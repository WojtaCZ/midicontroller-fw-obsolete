
MIDIcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e6c  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08006dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b20  20000078  08006e74  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b98  08006e74  00020b98  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ff76  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000046a4  00000000  00000000  00040016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fc3e  00000000  00000000  000446ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012c0  00000000  00000000  000542f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a58  00000000  00000000  000555b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bbd4  00000000  00000000  00057010  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000067d2  00000000  00000000  00062be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000693b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d60  00000000  00000000  00069434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f68 	.word	0x08005f68

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08005f68 	.word	0x08005f68

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_uhi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5a09      	ldrh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	b083      	sub	sp, #12
 8000468:	000d      	movs	r5, r1
 800046a:	4692      	mov	sl, r2
 800046c:	4699      	mov	r9, r3
 800046e:	428b      	cmp	r3, r1
 8000470:	d82f      	bhi.n	80004d2 <__udivmoddi4+0x7a>
 8000472:	d02c      	beq.n	80004ce <__udivmoddi4+0x76>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 fed8 	bl	800122c <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 fed3 	bl	800122c <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d500      	bpl.n	8000492 <__udivmoddi4+0x3a>
 8000490:	e074      	b.n	800057c <__udivmoddi4+0x124>
 8000492:	4653      	mov	r3, sl
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	001e      	movs	r6, r3
 80004a2:	42af      	cmp	r7, r5
 80004a4:	d829      	bhi.n	80004fa <__udivmoddi4+0xa2>
 80004a6:	d026      	beq.n	80004f6 <__udivmoddi4+0x9e>
 80004a8:	465b      	mov	r3, fp
 80004aa:	1ba4      	subs	r4, r4, r6
 80004ac:	41bd      	sbcs	r5, r7
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da00      	bge.n	80004b4 <__udivmoddi4+0x5c>
 80004b2:	e079      	b.n	80005a8 <__udivmoddi4+0x150>
 80004b4:	2200      	movs	r2, #0
 80004b6:	2300      	movs	r3, #0
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	2301      	movs	r3, #1
 80004be:	465a      	mov	r2, fp
 80004c0:	4093      	lsls	r3, r2
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	4642      	mov	r2, r8
 80004c8:	4093      	lsls	r3, r2
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	e019      	b.n	8000502 <__udivmoddi4+0xaa>
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d9d0      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <__udivmoddi4+0x8c>
 80004e0:	601c      	str	r4, [r3, #0]
 80004e2:	605d      	str	r5, [r3, #4]
 80004e4:	9800      	ldr	r0, [sp, #0]
 80004e6:	9901      	ldr	r1, [sp, #4]
 80004e8:	b003      	add	sp, #12
 80004ea:	bc3c      	pop	{r2, r3, r4, r5}
 80004ec:	4690      	mov	r8, r2
 80004ee:	4699      	mov	r9, r3
 80004f0:	46a2      	mov	sl, r4
 80004f2:	46ab      	mov	fp, r5
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	42a3      	cmp	r3, r4
 80004f8:	d9d6      	bls.n	80004a8 <__udivmoddi4+0x50>
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	4643      	mov	r3, r8
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0e8      	beq.n	80004da <__udivmoddi4+0x82>
 8000508:	07fb      	lsls	r3, r7, #31
 800050a:	0872      	lsrs	r2, r6, #1
 800050c:	431a      	orrs	r2, r3
 800050e:	4646      	mov	r6, r8
 8000510:	087b      	lsrs	r3, r7, #1
 8000512:	e00e      	b.n	8000532 <__udivmoddi4+0xda>
 8000514:	42ab      	cmp	r3, r5
 8000516:	d101      	bne.n	800051c <__udivmoddi4+0xc4>
 8000518:	42a2      	cmp	r2, r4
 800051a:	d80c      	bhi.n	8000536 <__udivmoddi4+0xde>
 800051c:	1aa4      	subs	r4, r4, r2
 800051e:	419d      	sbcs	r5, r3
 8000520:	2001      	movs	r0, #1
 8000522:	1924      	adds	r4, r4, r4
 8000524:	416d      	adcs	r5, r5
 8000526:	2100      	movs	r1, #0
 8000528:	3e01      	subs	r6, #1
 800052a:	1824      	adds	r4, r4, r0
 800052c:	414d      	adcs	r5, r1
 800052e:	2e00      	cmp	r6, #0
 8000530:	d006      	beq.n	8000540 <__udivmoddi4+0xe8>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d9ee      	bls.n	8000514 <__udivmoddi4+0xbc>
 8000536:	3e01      	subs	r6, #1
 8000538:	1924      	adds	r4, r4, r4
 800053a:	416d      	adcs	r5, r5
 800053c:	2e00      	cmp	r6, #0
 800053e:	d1f8      	bne.n	8000532 <__udivmoddi4+0xda>
 8000540:	465b      	mov	r3, fp
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	1900      	adds	r0, r0, r4
 8000548:	4169      	adcs	r1, r5
 800054a:	2b00      	cmp	r3, #0
 800054c:	db22      	blt.n	8000594 <__udivmoddi4+0x13c>
 800054e:	002b      	movs	r3, r5
 8000550:	465a      	mov	r2, fp
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	4644      	mov	r4, r8
 8000558:	40e2      	lsrs	r2, r4
 800055a:	001c      	movs	r4, r3
 800055c:	465b      	mov	r3, fp
 800055e:	0015      	movs	r5, r2
 8000560:	2b00      	cmp	r3, #0
 8000562:	db2c      	blt.n	80005be <__udivmoddi4+0x166>
 8000564:	0026      	movs	r6, r4
 8000566:	409e      	lsls	r6, r3
 8000568:	0033      	movs	r3, r6
 800056a:	0026      	movs	r6, r4
 800056c:	4647      	mov	r7, r8
 800056e:	40be      	lsls	r6, r7
 8000570:	0032      	movs	r2, r6
 8000572:	1a80      	subs	r0, r0, r2
 8000574:	4199      	sbcs	r1, r3
 8000576:	9000      	str	r0, [sp, #0]
 8000578:	9101      	str	r1, [sp, #4]
 800057a:	e7ae      	b.n	80004da <__udivmoddi4+0x82>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	4652      	mov	r2, sl
 8000584:	40da      	lsrs	r2, r3
 8000586:	4641      	mov	r1, r8
 8000588:	0013      	movs	r3, r2
 800058a:	464a      	mov	r2, r9
 800058c:	408a      	lsls	r2, r1
 800058e:	0017      	movs	r7, r2
 8000590:	431f      	orrs	r7, r3
 8000592:	e782      	b.n	800049a <__udivmoddi4+0x42>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4313      	orrs	r3, r2
 80005a6:	e7d5      	b.n	8000554 <__udivmoddi4+0xfc>
 80005a8:	4642      	mov	r2, r8
 80005aa:	2320      	movs	r3, #32
 80005ac:	2100      	movs	r1, #0
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	9100      	str	r1, [sp, #0]
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	2201      	movs	r2, #1
 80005b8:	40da      	lsrs	r2, r3
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	e782      	b.n	80004c4 <__udivmoddi4+0x6c>
 80005be:	4642      	mov	r2, r8
 80005c0:	2320      	movs	r3, #32
 80005c2:	0026      	movs	r6, r4
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	40de      	lsrs	r6, r3
 80005c8:	002f      	movs	r7, r5
 80005ca:	46b4      	mov	ip, r6
 80005cc:	4097      	lsls	r7, r2
 80005ce:	4666      	mov	r6, ip
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7c9      	b.n	800056a <__udivmoddi4+0x112>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__aeabi_dmul>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	4657      	mov	r7, sl
 80005dc:	4645      	mov	r5, r8
 80005de:	46de      	mov	lr, fp
 80005e0:	464e      	mov	r6, r9
 80005e2:	b5e0      	push	{r5, r6, r7, lr}
 80005e4:	030c      	lsls	r4, r1, #12
 80005e6:	4698      	mov	r8, r3
 80005e8:	004e      	lsls	r6, r1, #1
 80005ea:	0b23      	lsrs	r3, r4, #12
 80005ec:	b087      	sub	sp, #28
 80005ee:	0007      	movs	r7, r0
 80005f0:	4692      	mov	sl, r2
 80005f2:	469b      	mov	fp, r3
 80005f4:	0d76      	lsrs	r6, r6, #21
 80005f6:	0fcd      	lsrs	r5, r1, #31
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d06b      	beq.n	80006d4 <__aeabi_dmul+0xfc>
 80005fc:	4b6d      	ldr	r3, [pc, #436]	; (80007b4 <__aeabi_dmul+0x1dc>)
 80005fe:	429e      	cmp	r6, r3
 8000600:	d035      	beq.n	800066e <__aeabi_dmul+0x96>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	465b      	mov	r3, fp
 8000606:	0f42      	lsrs	r2, r0, #29
 8000608:	0424      	lsls	r4, r4, #16
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	4314      	orrs	r4, r2
 800060e:	431c      	orrs	r4, r3
 8000610:	00c3      	lsls	r3, r0, #3
 8000612:	4699      	mov	r9, r3
 8000614:	4b68      	ldr	r3, [pc, #416]	; (80007b8 <__aeabi_dmul+0x1e0>)
 8000616:	46a3      	mov	fp, r4
 8000618:	469c      	mov	ip, r3
 800061a:	2300      	movs	r3, #0
 800061c:	2700      	movs	r7, #0
 800061e:	4466      	add	r6, ip
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	4643      	mov	r3, r8
 8000624:	031c      	lsls	r4, r3, #12
 8000626:	005a      	lsls	r2, r3, #1
 8000628:	0fdb      	lsrs	r3, r3, #31
 800062a:	4650      	mov	r0, sl
 800062c:	0b24      	lsrs	r4, r4, #12
 800062e:	0d52      	lsrs	r2, r2, #21
 8000630:	4698      	mov	r8, r3
 8000632:	d100      	bne.n	8000636 <__aeabi_dmul+0x5e>
 8000634:	e076      	b.n	8000724 <__aeabi_dmul+0x14c>
 8000636:	4b5f      	ldr	r3, [pc, #380]	; (80007b4 <__aeabi_dmul+0x1dc>)
 8000638:	429a      	cmp	r2, r3
 800063a:	d06d      	beq.n	8000718 <__aeabi_dmul+0x140>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	0f41      	lsrs	r1, r0, #29
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	430b      	orrs	r3, r1
 8000644:	495c      	ldr	r1, [pc, #368]	; (80007b8 <__aeabi_dmul+0x1e0>)
 8000646:	00e4      	lsls	r4, r4, #3
 8000648:	468c      	mov	ip, r1
 800064a:	431c      	orrs	r4, r3
 800064c:	00c3      	lsls	r3, r0, #3
 800064e:	2000      	movs	r0, #0
 8000650:	4462      	add	r2, ip
 8000652:	4641      	mov	r1, r8
 8000654:	18b6      	adds	r6, r6, r2
 8000656:	4069      	eors	r1, r5
 8000658:	1c72      	adds	r2, r6, #1
 800065a:	9101      	str	r1, [sp, #4]
 800065c:	4694      	mov	ip, r2
 800065e:	4307      	orrs	r7, r0
 8000660:	2f0f      	cmp	r7, #15
 8000662:	d900      	bls.n	8000666 <__aeabi_dmul+0x8e>
 8000664:	e0b0      	b.n	80007c8 <__aeabi_dmul+0x1f0>
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <__aeabi_dmul+0x1e4>)
 8000668:	00bf      	lsls	r7, r7, #2
 800066a:	59d2      	ldr	r2, [r2, r7]
 800066c:	4697      	mov	pc, r2
 800066e:	465b      	mov	r3, fp
 8000670:	4303      	orrs	r3, r0
 8000672:	4699      	mov	r9, r3
 8000674:	d000      	beq.n	8000678 <__aeabi_dmul+0xa0>
 8000676:	e087      	b.n	8000788 <__aeabi_dmul+0x1b0>
 8000678:	2300      	movs	r3, #0
 800067a:	469b      	mov	fp, r3
 800067c:	3302      	adds	r3, #2
 800067e:	2708      	movs	r7, #8
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	e7ce      	b.n	8000622 <__aeabi_dmul+0x4a>
 8000684:	4642      	mov	r2, r8
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	2802      	cmp	r0, #2
 800068a:	d067      	beq.n	800075c <__aeabi_dmul+0x184>
 800068c:	2803      	cmp	r0, #3
 800068e:	d100      	bne.n	8000692 <__aeabi_dmul+0xba>
 8000690:	e20e      	b.n	8000ab0 <__aeabi_dmul+0x4d8>
 8000692:	2801      	cmp	r0, #1
 8000694:	d000      	beq.n	8000698 <__aeabi_dmul+0xc0>
 8000696:	e162      	b.n	800095e <__aeabi_dmul+0x386>
 8000698:	2300      	movs	r3, #0
 800069a:	2400      	movs	r4, #0
 800069c:	2200      	movs	r2, #0
 800069e:	4699      	mov	r9, r3
 80006a0:	9901      	ldr	r1, [sp, #4]
 80006a2:	4001      	ands	r1, r0
 80006a4:	b2cd      	uxtb	r5, r1
 80006a6:	2100      	movs	r1, #0
 80006a8:	0312      	lsls	r2, r2, #12
 80006aa:	0d0b      	lsrs	r3, r1, #20
 80006ac:	0b12      	lsrs	r2, r2, #12
 80006ae:	051b      	lsls	r3, r3, #20
 80006b0:	4313      	orrs	r3, r2
 80006b2:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <__aeabi_dmul+0x1e8>)
 80006b4:	0524      	lsls	r4, r4, #20
 80006b6:	4013      	ands	r3, r2
 80006b8:	431c      	orrs	r4, r3
 80006ba:	0064      	lsls	r4, r4, #1
 80006bc:	07ed      	lsls	r5, r5, #31
 80006be:	0864      	lsrs	r4, r4, #1
 80006c0:	432c      	orrs	r4, r5
 80006c2:	4648      	mov	r0, r9
 80006c4:	0021      	movs	r1, r4
 80006c6:	b007      	add	sp, #28
 80006c8:	bc3c      	pop	{r2, r3, r4, r5}
 80006ca:	4690      	mov	r8, r2
 80006cc:	4699      	mov	r9, r3
 80006ce:	46a2      	mov	sl, r4
 80006d0:	46ab      	mov	fp, r5
 80006d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d4:	4303      	orrs	r3, r0
 80006d6:	4699      	mov	r9, r3
 80006d8:	d04f      	beq.n	800077a <__aeabi_dmul+0x1a2>
 80006da:	465b      	mov	r3, fp
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dmul+0x10a>
 80006e0:	e189      	b.n	80009f6 <__aeabi_dmul+0x41e>
 80006e2:	4658      	mov	r0, fp
 80006e4:	f000 fd84 	bl	80011f0 <__clzsi2>
 80006e8:	0003      	movs	r3, r0
 80006ea:	3b0b      	subs	r3, #11
 80006ec:	2b1c      	cmp	r3, #28
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_dmul+0x11a>
 80006f0:	e17a      	b.n	80009e8 <__aeabi_dmul+0x410>
 80006f2:	221d      	movs	r2, #29
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	003a      	movs	r2, r7
 80006f8:	0001      	movs	r1, r0
 80006fa:	465c      	mov	r4, fp
 80006fc:	40da      	lsrs	r2, r3
 80006fe:	3908      	subs	r1, #8
 8000700:	408c      	lsls	r4, r1
 8000702:	0013      	movs	r3, r2
 8000704:	408f      	lsls	r7, r1
 8000706:	4323      	orrs	r3, r4
 8000708:	469b      	mov	fp, r3
 800070a:	46b9      	mov	r9, r7
 800070c:	2300      	movs	r3, #0
 800070e:	4e2d      	ldr	r6, [pc, #180]	; (80007c4 <__aeabi_dmul+0x1ec>)
 8000710:	2700      	movs	r7, #0
 8000712:	1a36      	subs	r6, r6, r0
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	e784      	b.n	8000622 <__aeabi_dmul+0x4a>
 8000718:	4653      	mov	r3, sl
 800071a:	4323      	orrs	r3, r4
 800071c:	d12a      	bne.n	8000774 <__aeabi_dmul+0x19c>
 800071e:	2400      	movs	r4, #0
 8000720:	2002      	movs	r0, #2
 8000722:	e796      	b.n	8000652 <__aeabi_dmul+0x7a>
 8000724:	4653      	mov	r3, sl
 8000726:	4323      	orrs	r3, r4
 8000728:	d020      	beq.n	800076c <__aeabi_dmul+0x194>
 800072a:	2c00      	cmp	r4, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_dmul+0x158>
 800072e:	e157      	b.n	80009e0 <__aeabi_dmul+0x408>
 8000730:	0020      	movs	r0, r4
 8000732:	f000 fd5d 	bl	80011f0 <__clzsi2>
 8000736:	0003      	movs	r3, r0
 8000738:	3b0b      	subs	r3, #11
 800073a:	2b1c      	cmp	r3, #28
 800073c:	dd00      	ble.n	8000740 <__aeabi_dmul+0x168>
 800073e:	e149      	b.n	80009d4 <__aeabi_dmul+0x3fc>
 8000740:	211d      	movs	r1, #29
 8000742:	1acb      	subs	r3, r1, r3
 8000744:	4651      	mov	r1, sl
 8000746:	0002      	movs	r2, r0
 8000748:	40d9      	lsrs	r1, r3
 800074a:	4653      	mov	r3, sl
 800074c:	3a08      	subs	r2, #8
 800074e:	4094      	lsls	r4, r2
 8000750:	4093      	lsls	r3, r2
 8000752:	430c      	orrs	r4, r1
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <__aeabi_dmul+0x1ec>)
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	2000      	movs	r0, #0
 800075a:	e77a      	b.n	8000652 <__aeabi_dmul+0x7a>
 800075c:	2501      	movs	r5, #1
 800075e:	9b01      	ldr	r3, [sp, #4]
 8000760:	4c14      	ldr	r4, [pc, #80]	; (80007b4 <__aeabi_dmul+0x1dc>)
 8000762:	401d      	ands	r5, r3
 8000764:	2300      	movs	r3, #0
 8000766:	2200      	movs	r2, #0
 8000768:	4699      	mov	r9, r3
 800076a:	e79c      	b.n	80006a6 <__aeabi_dmul+0xce>
 800076c:	2400      	movs	r4, #0
 800076e:	2200      	movs	r2, #0
 8000770:	2001      	movs	r0, #1
 8000772:	e76e      	b.n	8000652 <__aeabi_dmul+0x7a>
 8000774:	4653      	mov	r3, sl
 8000776:	2003      	movs	r0, #3
 8000778:	e76b      	b.n	8000652 <__aeabi_dmul+0x7a>
 800077a:	2300      	movs	r3, #0
 800077c:	469b      	mov	fp, r3
 800077e:	3301      	adds	r3, #1
 8000780:	2704      	movs	r7, #4
 8000782:	2600      	movs	r6, #0
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	e74c      	b.n	8000622 <__aeabi_dmul+0x4a>
 8000788:	2303      	movs	r3, #3
 800078a:	4681      	mov	r9, r0
 800078c:	270c      	movs	r7, #12
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	e747      	b.n	8000622 <__aeabi_dmul+0x4a>
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	2300      	movs	r3, #0
 8000796:	2500      	movs	r5, #0
 8000798:	0312      	lsls	r2, r2, #12
 800079a:	4699      	mov	r9, r3
 800079c:	4c05      	ldr	r4, [pc, #20]	; (80007b4 <__aeabi_dmul+0x1dc>)
 800079e:	e782      	b.n	80006a6 <__aeabi_dmul+0xce>
 80007a0:	465c      	mov	r4, fp
 80007a2:	464b      	mov	r3, r9
 80007a4:	9802      	ldr	r0, [sp, #8]
 80007a6:	e76f      	b.n	8000688 <__aeabi_dmul+0xb0>
 80007a8:	465c      	mov	r4, fp
 80007aa:	464b      	mov	r3, r9
 80007ac:	9501      	str	r5, [sp, #4]
 80007ae:	9802      	ldr	r0, [sp, #8]
 80007b0:	e76a      	b.n	8000688 <__aeabi_dmul+0xb0>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	000007ff 	.word	0x000007ff
 80007b8:	fffffc01 	.word	0xfffffc01
 80007bc:	08005f80 	.word	0x08005f80
 80007c0:	800fffff 	.word	0x800fffff
 80007c4:	fffffc0d 	.word	0xfffffc0d
 80007c8:	464a      	mov	r2, r9
 80007ca:	4649      	mov	r1, r9
 80007cc:	0c17      	lsrs	r7, r2, #16
 80007ce:	0c1a      	lsrs	r2, r3, #16
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	0408      	lsls	r0, r1, #16
 80007d6:	0019      	movs	r1, r3
 80007d8:	0c00      	lsrs	r0, r0, #16
 80007da:	4341      	muls	r1, r0
 80007dc:	0015      	movs	r5, r2
 80007de:	4688      	mov	r8, r1
 80007e0:	0019      	movs	r1, r3
 80007e2:	437d      	muls	r5, r7
 80007e4:	4379      	muls	r1, r7
 80007e6:	9503      	str	r5, [sp, #12]
 80007e8:	4689      	mov	r9, r1
 80007ea:	0029      	movs	r1, r5
 80007ec:	0015      	movs	r5, r2
 80007ee:	4345      	muls	r5, r0
 80007f0:	444d      	add	r5, r9
 80007f2:	9502      	str	r5, [sp, #8]
 80007f4:	4645      	mov	r5, r8
 80007f6:	0c2d      	lsrs	r5, r5, #16
 80007f8:	46aa      	mov	sl, r5
 80007fa:	9d02      	ldr	r5, [sp, #8]
 80007fc:	4455      	add	r5, sl
 80007fe:	45a9      	cmp	r9, r5
 8000800:	d906      	bls.n	8000810 <__aeabi_dmul+0x238>
 8000802:	468a      	mov	sl, r1
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0249      	lsls	r1, r1, #9
 8000808:	4689      	mov	r9, r1
 800080a:	44ca      	add	sl, r9
 800080c:	4651      	mov	r1, sl
 800080e:	9103      	str	r1, [sp, #12]
 8000810:	0c29      	lsrs	r1, r5, #16
 8000812:	9104      	str	r1, [sp, #16]
 8000814:	4641      	mov	r1, r8
 8000816:	0409      	lsls	r1, r1, #16
 8000818:	042d      	lsls	r5, r5, #16
 800081a:	0c09      	lsrs	r1, r1, #16
 800081c:	4688      	mov	r8, r1
 800081e:	0029      	movs	r1, r5
 8000820:	0c25      	lsrs	r5, r4, #16
 8000822:	0424      	lsls	r4, r4, #16
 8000824:	4441      	add	r1, r8
 8000826:	0c24      	lsrs	r4, r4, #16
 8000828:	9105      	str	r1, [sp, #20]
 800082a:	0021      	movs	r1, r4
 800082c:	4341      	muls	r1, r0
 800082e:	4688      	mov	r8, r1
 8000830:	0021      	movs	r1, r4
 8000832:	4379      	muls	r1, r7
 8000834:	468a      	mov	sl, r1
 8000836:	4368      	muls	r0, r5
 8000838:	4641      	mov	r1, r8
 800083a:	4450      	add	r0, sl
 800083c:	4681      	mov	r9, r0
 800083e:	0c08      	lsrs	r0, r1, #16
 8000840:	4448      	add	r0, r9
 8000842:	436f      	muls	r7, r5
 8000844:	4582      	cmp	sl, r0
 8000846:	d903      	bls.n	8000850 <__aeabi_dmul+0x278>
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0249      	lsls	r1, r1, #9
 800084c:	4689      	mov	r9, r1
 800084e:	444f      	add	r7, r9
 8000850:	0c01      	lsrs	r1, r0, #16
 8000852:	4689      	mov	r9, r1
 8000854:	0039      	movs	r1, r7
 8000856:	4449      	add	r1, r9
 8000858:	9102      	str	r1, [sp, #8]
 800085a:	4641      	mov	r1, r8
 800085c:	040f      	lsls	r7, r1, #16
 800085e:	9904      	ldr	r1, [sp, #16]
 8000860:	0c3f      	lsrs	r7, r7, #16
 8000862:	4688      	mov	r8, r1
 8000864:	0400      	lsls	r0, r0, #16
 8000866:	19c0      	adds	r0, r0, r7
 8000868:	4480      	add	r8, r0
 800086a:	4641      	mov	r1, r8
 800086c:	9104      	str	r1, [sp, #16]
 800086e:	4659      	mov	r1, fp
 8000870:	0c0f      	lsrs	r7, r1, #16
 8000872:	0409      	lsls	r1, r1, #16
 8000874:	0c09      	lsrs	r1, r1, #16
 8000876:	4688      	mov	r8, r1
 8000878:	4359      	muls	r1, r3
 800087a:	468a      	mov	sl, r1
 800087c:	0039      	movs	r1, r7
 800087e:	4351      	muls	r1, r2
 8000880:	4689      	mov	r9, r1
 8000882:	4641      	mov	r1, r8
 8000884:	434a      	muls	r2, r1
 8000886:	4651      	mov	r1, sl
 8000888:	0c09      	lsrs	r1, r1, #16
 800088a:	468b      	mov	fp, r1
 800088c:	437b      	muls	r3, r7
 800088e:	18d2      	adds	r2, r2, r3
 8000890:	445a      	add	r2, fp
 8000892:	4293      	cmp	r3, r2
 8000894:	d903      	bls.n	800089e <__aeabi_dmul+0x2c6>
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	469b      	mov	fp, r3
 800089c:	44d9      	add	r9, fp
 800089e:	4651      	mov	r1, sl
 80008a0:	0409      	lsls	r1, r1, #16
 80008a2:	0c09      	lsrs	r1, r1, #16
 80008a4:	468a      	mov	sl, r1
 80008a6:	4641      	mov	r1, r8
 80008a8:	4361      	muls	r1, r4
 80008aa:	437c      	muls	r4, r7
 80008ac:	0c13      	lsrs	r3, r2, #16
 80008ae:	0412      	lsls	r2, r2, #16
 80008b0:	444b      	add	r3, r9
 80008b2:	4452      	add	r2, sl
 80008b4:	46a1      	mov	r9, r4
 80008b6:	468a      	mov	sl, r1
 80008b8:	003c      	movs	r4, r7
 80008ba:	4641      	mov	r1, r8
 80008bc:	436c      	muls	r4, r5
 80008be:	434d      	muls	r5, r1
 80008c0:	4651      	mov	r1, sl
 80008c2:	444d      	add	r5, r9
 80008c4:	0c0f      	lsrs	r7, r1, #16
 80008c6:	197d      	adds	r5, r7, r5
 80008c8:	45a9      	cmp	r9, r5
 80008ca:	d903      	bls.n	80008d4 <__aeabi_dmul+0x2fc>
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0249      	lsls	r1, r1, #9
 80008d0:	4688      	mov	r8, r1
 80008d2:	4444      	add	r4, r8
 80008d4:	9f04      	ldr	r7, [sp, #16]
 80008d6:	9903      	ldr	r1, [sp, #12]
 80008d8:	46b8      	mov	r8, r7
 80008da:	4441      	add	r1, r8
 80008dc:	468b      	mov	fp, r1
 80008de:	4583      	cmp	fp, r0
 80008e0:	4180      	sbcs	r0, r0
 80008e2:	4241      	negs	r1, r0
 80008e4:	4688      	mov	r8, r1
 80008e6:	4651      	mov	r1, sl
 80008e8:	0408      	lsls	r0, r1, #16
 80008ea:	042f      	lsls	r7, r5, #16
 80008ec:	0c00      	lsrs	r0, r0, #16
 80008ee:	183f      	adds	r7, r7, r0
 80008f0:	4658      	mov	r0, fp
 80008f2:	9902      	ldr	r1, [sp, #8]
 80008f4:	1810      	adds	r0, r2, r0
 80008f6:	4689      	mov	r9, r1
 80008f8:	4290      	cmp	r0, r2
 80008fa:	4192      	sbcs	r2, r2
 80008fc:	444f      	add	r7, r9
 80008fe:	46ba      	mov	sl, r7
 8000900:	4252      	negs	r2, r2
 8000902:	4699      	mov	r9, r3
 8000904:	4693      	mov	fp, r2
 8000906:	44c2      	add	sl, r8
 8000908:	44d1      	add	r9, sl
 800090a:	44cb      	add	fp, r9
 800090c:	428f      	cmp	r7, r1
 800090e:	41bf      	sbcs	r7, r7
 8000910:	45c2      	cmp	sl, r8
 8000912:	4189      	sbcs	r1, r1
 8000914:	4599      	cmp	r9, r3
 8000916:	419b      	sbcs	r3, r3
 8000918:	4593      	cmp	fp, r2
 800091a:	4192      	sbcs	r2, r2
 800091c:	427f      	negs	r7, r7
 800091e:	4249      	negs	r1, r1
 8000920:	0c2d      	lsrs	r5, r5, #16
 8000922:	4252      	negs	r2, r2
 8000924:	430f      	orrs	r7, r1
 8000926:	425b      	negs	r3, r3
 8000928:	4313      	orrs	r3, r2
 800092a:	197f      	adds	r7, r7, r5
 800092c:	18ff      	adds	r7, r7, r3
 800092e:	465b      	mov	r3, fp
 8000930:	193c      	adds	r4, r7, r4
 8000932:	0ddb      	lsrs	r3, r3, #23
 8000934:	9a05      	ldr	r2, [sp, #20]
 8000936:	0264      	lsls	r4, r4, #9
 8000938:	431c      	orrs	r4, r3
 800093a:	0243      	lsls	r3, r0, #9
 800093c:	4313      	orrs	r3, r2
 800093e:	1e5d      	subs	r5, r3, #1
 8000940:	41ab      	sbcs	r3, r5
 8000942:	465a      	mov	r2, fp
 8000944:	0dc0      	lsrs	r0, r0, #23
 8000946:	4303      	orrs	r3, r0
 8000948:	0252      	lsls	r2, r2, #9
 800094a:	4313      	orrs	r3, r2
 800094c:	01e2      	lsls	r2, r4, #7
 800094e:	d556      	bpl.n	80009fe <__aeabi_dmul+0x426>
 8000950:	2001      	movs	r0, #1
 8000952:	085a      	lsrs	r2, r3, #1
 8000954:	4003      	ands	r3, r0
 8000956:	4313      	orrs	r3, r2
 8000958:	07e2      	lsls	r2, r4, #31
 800095a:	4313      	orrs	r3, r2
 800095c:	0864      	lsrs	r4, r4, #1
 800095e:	485a      	ldr	r0, [pc, #360]	; (8000ac8 <__aeabi_dmul+0x4f0>)
 8000960:	4460      	add	r0, ip
 8000962:	2800      	cmp	r0, #0
 8000964:	dd4d      	ble.n	8000a02 <__aeabi_dmul+0x42a>
 8000966:	075a      	lsls	r2, r3, #29
 8000968:	d009      	beq.n	800097e <__aeabi_dmul+0x3a6>
 800096a:	220f      	movs	r2, #15
 800096c:	401a      	ands	r2, r3
 800096e:	2a04      	cmp	r2, #4
 8000970:	d005      	beq.n	800097e <__aeabi_dmul+0x3a6>
 8000972:	1d1a      	adds	r2, r3, #4
 8000974:	429a      	cmp	r2, r3
 8000976:	419b      	sbcs	r3, r3
 8000978:	425b      	negs	r3, r3
 800097a:	18e4      	adds	r4, r4, r3
 800097c:	0013      	movs	r3, r2
 800097e:	01e2      	lsls	r2, r4, #7
 8000980:	d504      	bpl.n	800098c <__aeabi_dmul+0x3b4>
 8000982:	2080      	movs	r0, #128	; 0x80
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <__aeabi_dmul+0x4f4>)
 8000986:	00c0      	lsls	r0, r0, #3
 8000988:	4014      	ands	r4, r2
 800098a:	4460      	add	r0, ip
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <__aeabi_dmul+0x4f8>)
 800098e:	4290      	cmp	r0, r2
 8000990:	dd00      	ble.n	8000994 <__aeabi_dmul+0x3bc>
 8000992:	e6e3      	b.n	800075c <__aeabi_dmul+0x184>
 8000994:	2501      	movs	r5, #1
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	0762      	lsls	r2, r4, #29
 800099a:	431a      	orrs	r2, r3
 800099c:	0264      	lsls	r4, r4, #9
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	4691      	mov	r9, r2
 80009a2:	0b22      	lsrs	r2, r4, #12
 80009a4:	0544      	lsls	r4, r0, #21
 80009a6:	0d64      	lsrs	r4, r4, #21
 80009a8:	401d      	ands	r5, r3
 80009aa:	e67c      	b.n	80006a6 <__aeabi_dmul+0xce>
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	4659      	mov	r1, fp
 80009b0:	0312      	lsls	r2, r2, #12
 80009b2:	4211      	tst	r1, r2
 80009b4:	d008      	beq.n	80009c8 <__aeabi_dmul+0x3f0>
 80009b6:	4214      	tst	r4, r2
 80009b8:	d106      	bne.n	80009c8 <__aeabi_dmul+0x3f0>
 80009ba:	4322      	orrs	r2, r4
 80009bc:	0312      	lsls	r2, r2, #12
 80009be:	0b12      	lsrs	r2, r2, #12
 80009c0:	4645      	mov	r5, r8
 80009c2:	4699      	mov	r9, r3
 80009c4:	4c43      	ldr	r4, [pc, #268]	; (8000ad4 <__aeabi_dmul+0x4fc>)
 80009c6:	e66e      	b.n	80006a6 <__aeabi_dmul+0xce>
 80009c8:	465b      	mov	r3, fp
 80009ca:	431a      	orrs	r2, r3
 80009cc:	0312      	lsls	r2, r2, #12
 80009ce:	0b12      	lsrs	r2, r2, #12
 80009d0:	4c40      	ldr	r4, [pc, #256]	; (8000ad4 <__aeabi_dmul+0x4fc>)
 80009d2:	e668      	b.n	80006a6 <__aeabi_dmul+0xce>
 80009d4:	0003      	movs	r3, r0
 80009d6:	4654      	mov	r4, sl
 80009d8:	3b28      	subs	r3, #40	; 0x28
 80009da:	409c      	lsls	r4, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	e6b9      	b.n	8000754 <__aeabi_dmul+0x17c>
 80009e0:	f000 fc06 	bl	80011f0 <__clzsi2>
 80009e4:	3020      	adds	r0, #32
 80009e6:	e6a6      	b.n	8000736 <__aeabi_dmul+0x15e>
 80009e8:	0003      	movs	r3, r0
 80009ea:	3b28      	subs	r3, #40	; 0x28
 80009ec:	409f      	lsls	r7, r3
 80009ee:	2300      	movs	r3, #0
 80009f0:	46bb      	mov	fp, r7
 80009f2:	4699      	mov	r9, r3
 80009f4:	e68a      	b.n	800070c <__aeabi_dmul+0x134>
 80009f6:	f000 fbfb 	bl	80011f0 <__clzsi2>
 80009fa:	3020      	adds	r0, #32
 80009fc:	e674      	b.n	80006e8 <__aeabi_dmul+0x110>
 80009fe:	46b4      	mov	ip, r6
 8000a00:	e7ad      	b.n	800095e <__aeabi_dmul+0x386>
 8000a02:	2501      	movs	r5, #1
 8000a04:	1a2a      	subs	r2, r5, r0
 8000a06:	2a38      	cmp	r2, #56	; 0x38
 8000a08:	dd06      	ble.n	8000a18 <__aeabi_dmul+0x440>
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	2400      	movs	r4, #0
 8000a0e:	401d      	ands	r5, r3
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	4699      	mov	r9, r3
 8000a16:	e646      	b.n	80006a6 <__aeabi_dmul+0xce>
 8000a18:	2a1f      	cmp	r2, #31
 8000a1a:	dc21      	bgt.n	8000a60 <__aeabi_dmul+0x488>
 8000a1c:	2520      	movs	r5, #32
 8000a1e:	0020      	movs	r0, r4
 8000a20:	1aad      	subs	r5, r5, r2
 8000a22:	001e      	movs	r6, r3
 8000a24:	40ab      	lsls	r3, r5
 8000a26:	40a8      	lsls	r0, r5
 8000a28:	40d6      	lsrs	r6, r2
 8000a2a:	1e5d      	subs	r5, r3, #1
 8000a2c:	41ab      	sbcs	r3, r5
 8000a2e:	4330      	orrs	r0, r6
 8000a30:	4318      	orrs	r0, r3
 8000a32:	40d4      	lsrs	r4, r2
 8000a34:	0743      	lsls	r3, r0, #29
 8000a36:	d009      	beq.n	8000a4c <__aeabi_dmul+0x474>
 8000a38:	230f      	movs	r3, #15
 8000a3a:	4003      	ands	r3, r0
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d005      	beq.n	8000a4c <__aeabi_dmul+0x474>
 8000a40:	0003      	movs	r3, r0
 8000a42:	1d18      	adds	r0, r3, #4
 8000a44:	4298      	cmp	r0, r3
 8000a46:	419b      	sbcs	r3, r3
 8000a48:	425b      	negs	r3, r3
 8000a4a:	18e4      	adds	r4, r4, r3
 8000a4c:	0223      	lsls	r3, r4, #8
 8000a4e:	d521      	bpl.n	8000a94 <__aeabi_dmul+0x4bc>
 8000a50:	2501      	movs	r5, #1
 8000a52:	9b01      	ldr	r3, [sp, #4]
 8000a54:	2401      	movs	r4, #1
 8000a56:	401d      	ands	r5, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	e622      	b.n	80006a6 <__aeabi_dmul+0xce>
 8000a60:	251f      	movs	r5, #31
 8000a62:	0021      	movs	r1, r4
 8000a64:	426d      	negs	r5, r5
 8000a66:	1a28      	subs	r0, r5, r0
 8000a68:	40c1      	lsrs	r1, r0
 8000a6a:	0008      	movs	r0, r1
 8000a6c:	2a20      	cmp	r2, #32
 8000a6e:	d01d      	beq.n	8000aac <__aeabi_dmul+0x4d4>
 8000a70:	355f      	adds	r5, #95	; 0x5f
 8000a72:	1aaa      	subs	r2, r5, r2
 8000a74:	4094      	lsls	r4, r2
 8000a76:	4323      	orrs	r3, r4
 8000a78:	1e5c      	subs	r4, r3, #1
 8000a7a:	41a3      	sbcs	r3, r4
 8000a7c:	2507      	movs	r5, #7
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	401d      	ands	r5, r3
 8000a82:	2200      	movs	r2, #0
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d009      	beq.n	8000a9c <__aeabi_dmul+0x4c4>
 8000a88:	220f      	movs	r2, #15
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2a04      	cmp	r2, #4
 8000a92:	d1d6      	bne.n	8000a42 <__aeabi_dmul+0x46a>
 8000a94:	0003      	movs	r3, r0
 8000a96:	0765      	lsls	r5, r4, #29
 8000a98:	0264      	lsls	r4, r4, #9
 8000a9a:	0b22      	lsrs	r2, r4, #12
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	432b      	orrs	r3, r5
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	9b01      	ldr	r3, [sp, #4]
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	401d      	ands	r5, r3
 8000aaa:	e5fc      	b.n	80006a6 <__aeabi_dmul+0xce>
 8000aac:	2400      	movs	r4, #0
 8000aae:	e7e2      	b.n	8000a76 <__aeabi_dmul+0x49e>
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	2501      	movs	r5, #1
 8000ab4:	0312      	lsls	r2, r2, #12
 8000ab6:	4322      	orrs	r2, r4
 8000ab8:	9901      	ldr	r1, [sp, #4]
 8000aba:	0312      	lsls	r2, r2, #12
 8000abc:	0b12      	lsrs	r2, r2, #12
 8000abe:	400d      	ands	r5, r1
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	4c04      	ldr	r4, [pc, #16]	; (8000ad4 <__aeabi_dmul+0x4fc>)
 8000ac4:	e5ef      	b.n	80006a6 <__aeabi_dmul+0xce>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000003ff 	.word	0x000003ff
 8000acc:	feffffff 	.word	0xfeffffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	000007ff 	.word	0x000007ff

08000ad8 <__aeabi_dsub>:
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	4646      	mov	r6, r8
 8000adc:	46d6      	mov	lr, sl
 8000ade:	464f      	mov	r7, r9
 8000ae0:	030c      	lsls	r4, r1, #12
 8000ae2:	b5c0      	push	{r6, r7, lr}
 8000ae4:	0fcd      	lsrs	r5, r1, #31
 8000ae6:	004e      	lsls	r6, r1, #1
 8000ae8:	0a61      	lsrs	r1, r4, #9
 8000aea:	0f44      	lsrs	r4, r0, #29
 8000aec:	430c      	orrs	r4, r1
 8000aee:	00c1      	lsls	r1, r0, #3
 8000af0:	0058      	lsls	r0, r3, #1
 8000af2:	0d40      	lsrs	r0, r0, #21
 8000af4:	4684      	mov	ip, r0
 8000af6:	468a      	mov	sl, r1
 8000af8:	000f      	movs	r7, r1
 8000afa:	0319      	lsls	r1, r3, #12
 8000afc:	0f50      	lsrs	r0, r2, #29
 8000afe:	0a49      	lsrs	r1, r1, #9
 8000b00:	4301      	orrs	r1, r0
 8000b02:	48c6      	ldr	r0, [pc, #792]	; (8000e1c <__aeabi_dsub+0x344>)
 8000b04:	0d76      	lsrs	r6, r6, #21
 8000b06:	46a8      	mov	r8, r5
 8000b08:	0fdb      	lsrs	r3, r3, #31
 8000b0a:	00d2      	lsls	r2, r2, #3
 8000b0c:	4584      	cmp	ip, r0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dsub+0x3a>
 8000b10:	e0d8      	b.n	8000cc4 <__aeabi_dsub+0x1ec>
 8000b12:	2001      	movs	r0, #1
 8000b14:	4043      	eors	r3, r0
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dsub+0x44>
 8000b1a:	e0a6      	b.n	8000c6a <__aeabi_dsub+0x192>
 8000b1c:	4660      	mov	r0, ip
 8000b1e:	1a35      	subs	r5, r6, r0
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	dc00      	bgt.n	8000b26 <__aeabi_dsub+0x4e>
 8000b24:	e105      	b.n	8000d32 <__aeabi_dsub+0x25a>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d110      	bne.n	8000b4c <__aeabi_dsub+0x74>
 8000b2a:	000b      	movs	r3, r1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dsub+0x5a>
 8000b30:	e0d7      	b.n	8000ce2 <__aeabi_dsub+0x20a>
 8000b32:	1e6b      	subs	r3, r5, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dsub+0x62>
 8000b38:	e14b      	b.n	8000dd2 <__aeabi_dsub+0x2fa>
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	1a9f      	subs	r7, r3, r2
 8000b3e:	45ba      	cmp	sl, r7
 8000b40:	4180      	sbcs	r0, r0
 8000b42:	1a64      	subs	r4, r4, r1
 8000b44:	4240      	negs	r0, r0
 8000b46:	1a24      	subs	r4, r4, r0
 8000b48:	2601      	movs	r6, #1
 8000b4a:	e01e      	b.n	8000b8a <__aeabi_dsub+0xb2>
 8000b4c:	4bb3      	ldr	r3, [pc, #716]	; (8000e1c <__aeabi_dsub+0x344>)
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d048      	beq.n	8000be4 <__aeabi_dsub+0x10c>
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	4319      	orrs	r1, r3
 8000b58:	2d38      	cmp	r5, #56	; 0x38
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_dsub+0x86>
 8000b5c:	e119      	b.n	8000d92 <__aeabi_dsub+0x2ba>
 8000b5e:	2d1f      	cmp	r5, #31
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dsub+0x8c>
 8000b62:	e14c      	b.n	8000dfe <__aeabi_dsub+0x326>
 8000b64:	2320      	movs	r3, #32
 8000b66:	000f      	movs	r7, r1
 8000b68:	1b5b      	subs	r3, r3, r5
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	409f      	lsls	r7, r3
 8000b70:	40e8      	lsrs	r0, r5
 8000b72:	1e53      	subs	r3, r2, #1
 8000b74:	419a      	sbcs	r2, r3
 8000b76:	40e9      	lsrs	r1, r5
 8000b78:	4307      	orrs	r7, r0
 8000b7a:	4317      	orrs	r7, r2
 8000b7c:	4653      	mov	r3, sl
 8000b7e:	1bdf      	subs	r7, r3, r7
 8000b80:	1a61      	subs	r1, r4, r1
 8000b82:	45ba      	cmp	sl, r7
 8000b84:	41a4      	sbcs	r4, r4
 8000b86:	4264      	negs	r4, r4
 8000b88:	1b0c      	subs	r4, r1, r4
 8000b8a:	0223      	lsls	r3, r4, #8
 8000b8c:	d400      	bmi.n	8000b90 <__aeabi_dsub+0xb8>
 8000b8e:	e0c5      	b.n	8000d1c <__aeabi_dsub+0x244>
 8000b90:	0264      	lsls	r4, r4, #9
 8000b92:	0a65      	lsrs	r5, r4, #9
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dsub+0xc2>
 8000b98:	e0f6      	b.n	8000d88 <__aeabi_dsub+0x2b0>
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	f000 fb28 	bl	80011f0 <__clzsi2>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	3b08      	subs	r3, #8
 8000ba4:	2b1f      	cmp	r3, #31
 8000ba6:	dd00      	ble.n	8000baa <__aeabi_dsub+0xd2>
 8000ba8:	e0e9      	b.n	8000d7e <__aeabi_dsub+0x2a6>
 8000baa:	2220      	movs	r2, #32
 8000bac:	003c      	movs	r4, r7
 8000bae:	1ad2      	subs	r2, r2, r3
 8000bb0:	409d      	lsls	r5, r3
 8000bb2:	40d4      	lsrs	r4, r2
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	4325      	orrs	r5, r4
 8000bb8:	429e      	cmp	r6, r3
 8000bba:	dd00      	ble.n	8000bbe <__aeabi_dsub+0xe6>
 8000bbc:	e0db      	b.n	8000d76 <__aeabi_dsub+0x29e>
 8000bbe:	1b9e      	subs	r6, r3, r6
 8000bc0:	1c73      	adds	r3, r6, #1
 8000bc2:	2b1f      	cmp	r3, #31
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_dsub+0xf0>
 8000bc6:	e10a      	b.n	8000dde <__aeabi_dsub+0x306>
 8000bc8:	2220      	movs	r2, #32
 8000bca:	0038      	movs	r0, r7
 8000bcc:	1ad2      	subs	r2, r2, r3
 8000bce:	0029      	movs	r1, r5
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	002c      	movs	r4, r5
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	40d8      	lsrs	r0, r3
 8000bd8:	1e7a      	subs	r2, r7, #1
 8000bda:	4197      	sbcs	r7, r2
 8000bdc:	40dc      	lsrs	r4, r3
 8000bde:	2600      	movs	r6, #0
 8000be0:	4301      	orrs	r1, r0
 8000be2:	430f      	orrs	r7, r1
 8000be4:	077b      	lsls	r3, r7, #29
 8000be6:	d009      	beq.n	8000bfc <__aeabi_dsub+0x124>
 8000be8:	230f      	movs	r3, #15
 8000bea:	403b      	ands	r3, r7
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d005      	beq.n	8000bfc <__aeabi_dsub+0x124>
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	42bb      	cmp	r3, r7
 8000bf4:	41bf      	sbcs	r7, r7
 8000bf6:	427f      	negs	r7, r7
 8000bf8:	19e4      	adds	r4, r4, r7
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	0223      	lsls	r3, r4, #8
 8000bfe:	d525      	bpl.n	8000c4c <__aeabi_dsub+0x174>
 8000c00:	4b86      	ldr	r3, [pc, #536]	; (8000e1c <__aeabi_dsub+0x344>)
 8000c02:	3601      	adds	r6, #1
 8000c04:	429e      	cmp	r6, r3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dsub+0x132>
 8000c08:	e0af      	b.n	8000d6a <__aeabi_dsub+0x292>
 8000c0a:	4b85      	ldr	r3, [pc, #532]	; (8000e20 <__aeabi_dsub+0x348>)
 8000c0c:	2501      	movs	r5, #1
 8000c0e:	401c      	ands	r4, r3
 8000c10:	4643      	mov	r3, r8
 8000c12:	0762      	lsls	r2, r4, #29
 8000c14:	08ff      	lsrs	r7, r7, #3
 8000c16:	0264      	lsls	r4, r4, #9
 8000c18:	0576      	lsls	r6, r6, #21
 8000c1a:	4317      	orrs	r7, r2
 8000c1c:	0b24      	lsrs	r4, r4, #12
 8000c1e:	0d76      	lsrs	r6, r6, #21
 8000c20:	401d      	ands	r5, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	0324      	lsls	r4, r4, #12
 8000c26:	0b23      	lsrs	r3, r4, #12
 8000c28:	0d0c      	lsrs	r4, r1, #20
 8000c2a:	4a7e      	ldr	r2, [pc, #504]	; (8000e24 <__aeabi_dsub+0x34c>)
 8000c2c:	0524      	lsls	r4, r4, #20
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	4014      	ands	r4, r2
 8000c32:	0533      	lsls	r3, r6, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	07ed      	lsls	r5, r5, #31
 8000c3a:	085b      	lsrs	r3, r3, #1
 8000c3c:	432b      	orrs	r3, r5
 8000c3e:	0038      	movs	r0, r7
 8000c40:	0019      	movs	r1, r3
 8000c42:	bc1c      	pop	{r2, r3, r4}
 8000c44:	4690      	mov	r8, r2
 8000c46:	4699      	mov	r9, r3
 8000c48:	46a2      	mov	sl, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2501      	movs	r5, #1
 8000c4e:	4643      	mov	r3, r8
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	08ff      	lsrs	r7, r7, #3
 8000c54:	4317      	orrs	r7, r2
 8000c56:	08e4      	lsrs	r4, r4, #3
 8000c58:	401d      	ands	r5, r3
 8000c5a:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <__aeabi_dsub+0x344>)
 8000c5c:	429e      	cmp	r6, r3
 8000c5e:	d036      	beq.n	8000cce <__aeabi_dsub+0x1f6>
 8000c60:	0324      	lsls	r4, r4, #12
 8000c62:	0576      	lsls	r6, r6, #21
 8000c64:	0b24      	lsrs	r4, r4, #12
 8000c66:	0d76      	lsrs	r6, r6, #21
 8000c68:	e7db      	b.n	8000c22 <__aeabi_dsub+0x14a>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	1af3      	subs	r3, r6, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_dsub+0x19c>
 8000c72:	e094      	b.n	8000d9e <__aeabi_dsub+0x2c6>
 8000c74:	4660      	mov	r0, ip
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d035      	beq.n	8000ce6 <__aeabi_dsub+0x20e>
 8000c7a:	4868      	ldr	r0, [pc, #416]	; (8000e1c <__aeabi_dsub+0x344>)
 8000c7c:	4286      	cmp	r6, r0
 8000c7e:	d0b1      	beq.n	8000be4 <__aeabi_dsub+0x10c>
 8000c80:	2780      	movs	r7, #128	; 0x80
 8000c82:	043f      	lsls	r7, r7, #16
 8000c84:	4339      	orrs	r1, r7
 8000c86:	2b38      	cmp	r3, #56	; 0x38
 8000c88:	dc00      	bgt.n	8000c8c <__aeabi_dsub+0x1b4>
 8000c8a:	e0fd      	b.n	8000e88 <__aeabi_dsub+0x3b0>
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	0017      	movs	r7, r2
 8000c90:	2100      	movs	r1, #0
 8000c92:	1e7a      	subs	r2, r7, #1
 8000c94:	4197      	sbcs	r7, r2
 8000c96:	4457      	add	r7, sl
 8000c98:	4557      	cmp	r7, sl
 8000c9a:	4180      	sbcs	r0, r0
 8000c9c:	1909      	adds	r1, r1, r4
 8000c9e:	4244      	negs	r4, r0
 8000ca0:	190c      	adds	r4, r1, r4
 8000ca2:	0223      	lsls	r3, r4, #8
 8000ca4:	d53a      	bpl.n	8000d1c <__aeabi_dsub+0x244>
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <__aeabi_dsub+0x344>)
 8000ca8:	3601      	adds	r6, #1
 8000caa:	429e      	cmp	r6, r3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dsub+0x1d8>
 8000cae:	e14b      	b.n	8000f48 <__aeabi_dsub+0x470>
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <__aeabi_dsub+0x348>)
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	087b      	lsrs	r3, r7, #1
 8000cb8:	4017      	ands	r7, r2
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	07e2      	lsls	r2, r4, #31
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	0864      	lsrs	r4, r4, #1
 8000cc2:	e78f      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dsub+0x1f4>
 8000cca:	e724      	b.n	8000b16 <__aeabi_dsub+0x3e>
 8000ccc:	e721      	b.n	8000b12 <__aeabi_dsub+0x3a>
 8000cce:	0023      	movs	r3, r4
 8000cd0:	433b      	orrs	r3, r7
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dsub+0x1fe>
 8000cd4:	e1b9      	b.n	800104a <__aeabi_dsub+0x572>
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4314      	orrs	r4, r2
 8000cdc:	0324      	lsls	r4, r4, #12
 8000cde:	0b24      	lsrs	r4, r4, #12
 8000ce0:	e79f      	b.n	8000c22 <__aeabi_dsub+0x14a>
 8000ce2:	002e      	movs	r6, r5
 8000ce4:	e77e      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000ce6:	0008      	movs	r0, r1
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	d100      	bne.n	8000cee <__aeabi_dsub+0x216>
 8000cec:	e0ca      	b.n	8000e84 <__aeabi_dsub+0x3ac>
 8000cee:	1e58      	subs	r0, r3, #1
 8000cf0:	4684      	mov	ip, r0
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dsub+0x220>
 8000cf6:	e0e7      	b.n	8000ec8 <__aeabi_dsub+0x3f0>
 8000cf8:	4452      	add	r2, sl
 8000cfa:	4552      	cmp	r2, sl
 8000cfc:	4180      	sbcs	r0, r0
 8000cfe:	1864      	adds	r4, r4, r1
 8000d00:	4240      	negs	r0, r0
 8000d02:	1824      	adds	r4, r4, r0
 8000d04:	0017      	movs	r7, r2
 8000d06:	2601      	movs	r6, #1
 8000d08:	0223      	lsls	r3, r4, #8
 8000d0a:	d507      	bpl.n	8000d1c <__aeabi_dsub+0x244>
 8000d0c:	2602      	movs	r6, #2
 8000d0e:	e7cf      	b.n	8000cb0 <__aeabi_dsub+0x1d8>
 8000d10:	4664      	mov	r4, ip
 8000d12:	432c      	orrs	r4, r5
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dsub+0x240>
 8000d16:	e1b3      	b.n	8001080 <__aeabi_dsub+0x5a8>
 8000d18:	002c      	movs	r4, r5
 8000d1a:	4667      	mov	r7, ip
 8000d1c:	077b      	lsls	r3, r7, #29
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dsub+0x24a>
 8000d20:	e762      	b.n	8000be8 <__aeabi_dsub+0x110>
 8000d22:	0763      	lsls	r3, r4, #29
 8000d24:	08ff      	lsrs	r7, r7, #3
 8000d26:	431f      	orrs	r7, r3
 8000d28:	2501      	movs	r5, #1
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	08e4      	lsrs	r4, r4, #3
 8000d2e:	401d      	ands	r5, r3
 8000d30:	e793      	b.n	8000c5a <__aeabi_dsub+0x182>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d178      	bne.n	8000e28 <__aeabi_dsub+0x350>
 8000d36:	1c75      	adds	r5, r6, #1
 8000d38:	056d      	lsls	r5, r5, #21
 8000d3a:	0d6d      	lsrs	r5, r5, #21
 8000d3c:	2d01      	cmp	r5, #1
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_dsub+0x26a>
 8000d40:	e0f2      	b.n	8000f28 <__aeabi_dsub+0x450>
 8000d42:	4650      	mov	r0, sl
 8000d44:	1a80      	subs	r0, r0, r2
 8000d46:	4582      	cmp	sl, r0
 8000d48:	41bf      	sbcs	r7, r7
 8000d4a:	1a65      	subs	r5, r4, r1
 8000d4c:	427f      	negs	r7, r7
 8000d4e:	1bed      	subs	r5, r5, r7
 8000d50:	4684      	mov	ip, r0
 8000d52:	0228      	lsls	r0, r5, #8
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_dsub+0x280>
 8000d56:	e08c      	b.n	8000e72 <__aeabi_dsub+0x39a>
 8000d58:	4650      	mov	r0, sl
 8000d5a:	1a17      	subs	r7, r2, r0
 8000d5c:	42ba      	cmp	r2, r7
 8000d5e:	4192      	sbcs	r2, r2
 8000d60:	1b0c      	subs	r4, r1, r4
 8000d62:	4255      	negs	r5, r2
 8000d64:	1b65      	subs	r5, r4, r5
 8000d66:	4698      	mov	r8, r3
 8000d68:	e714      	b.n	8000b94 <__aeabi_dsub+0xbc>
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	2400      	movs	r4, #0
 8000d70:	401d      	ands	r5, r3
 8000d72:	2700      	movs	r7, #0
 8000d74:	e755      	b.n	8000c22 <__aeabi_dsub+0x14a>
 8000d76:	4c2a      	ldr	r4, [pc, #168]	; (8000e20 <__aeabi_dsub+0x348>)
 8000d78:	1af6      	subs	r6, r6, r3
 8000d7a:	402c      	ands	r4, r5
 8000d7c:	e732      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000d7e:	003d      	movs	r5, r7
 8000d80:	3828      	subs	r0, #40	; 0x28
 8000d82:	4085      	lsls	r5, r0
 8000d84:	2700      	movs	r7, #0
 8000d86:	e717      	b.n	8000bb8 <__aeabi_dsub+0xe0>
 8000d88:	0038      	movs	r0, r7
 8000d8a:	f000 fa31 	bl	80011f0 <__clzsi2>
 8000d8e:	3020      	adds	r0, #32
 8000d90:	e706      	b.n	8000ba0 <__aeabi_dsub+0xc8>
 8000d92:	430a      	orrs	r2, r1
 8000d94:	0017      	movs	r7, r2
 8000d96:	2100      	movs	r1, #0
 8000d98:	1e7a      	subs	r2, r7, #1
 8000d9a:	4197      	sbcs	r7, r2
 8000d9c:	e6ee      	b.n	8000b7c <__aeabi_dsub+0xa4>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_dsub+0x2cc>
 8000da2:	e0e5      	b.n	8000f70 <__aeabi_dsub+0x498>
 8000da4:	1c73      	adds	r3, r6, #1
 8000da6:	469c      	mov	ip, r3
 8000da8:	055b      	lsls	r3, r3, #21
 8000daa:	0d5b      	lsrs	r3, r3, #21
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dsub+0x2da>
 8000db0:	e09f      	b.n	8000ef2 <__aeabi_dsub+0x41a>
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <__aeabi_dsub+0x344>)
 8000db4:	459c      	cmp	ip, r3
 8000db6:	d100      	bne.n	8000dba <__aeabi_dsub+0x2e2>
 8000db8:	e0c5      	b.n	8000f46 <__aeabi_dsub+0x46e>
 8000dba:	4452      	add	r2, sl
 8000dbc:	4552      	cmp	r2, sl
 8000dbe:	4180      	sbcs	r0, r0
 8000dc0:	1864      	adds	r4, r4, r1
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	1824      	adds	r4, r4, r0
 8000dc6:	07e7      	lsls	r7, r4, #31
 8000dc8:	0852      	lsrs	r2, r2, #1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	0864      	lsrs	r4, r4, #1
 8000dce:	4666      	mov	r6, ip
 8000dd0:	e708      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <__aeabi_dsub+0x344>)
 8000dd4:	4285      	cmp	r5, r0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dsub+0x302>
 8000dd8:	e085      	b.n	8000ee6 <__aeabi_dsub+0x40e>
 8000dda:	001d      	movs	r5, r3
 8000ddc:	e6bc      	b.n	8000b58 <__aeabi_dsub+0x80>
 8000dde:	0029      	movs	r1, r5
 8000de0:	3e1f      	subs	r6, #31
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d100      	bne.n	8000dea <__aeabi_dsub+0x312>
 8000de8:	e07f      	b.n	8000eea <__aeabi_dsub+0x412>
 8000dea:	2240      	movs	r2, #64	; 0x40
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	409d      	lsls	r5, r3
 8000df0:	432f      	orrs	r7, r5
 8000df2:	1e7d      	subs	r5, r7, #1
 8000df4:	41af      	sbcs	r7, r5
 8000df6:	2400      	movs	r4, #0
 8000df8:	430f      	orrs	r7, r1
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	e78e      	b.n	8000d1c <__aeabi_dsub+0x244>
 8000dfe:	002b      	movs	r3, r5
 8000e00:	000f      	movs	r7, r1
 8000e02:	3b20      	subs	r3, #32
 8000e04:	40df      	lsrs	r7, r3
 8000e06:	2d20      	cmp	r5, #32
 8000e08:	d071      	beq.n	8000eee <__aeabi_dsub+0x416>
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	1b5d      	subs	r5, r3, r5
 8000e0e:	40a9      	lsls	r1, r5
 8000e10:	430a      	orrs	r2, r1
 8000e12:	1e51      	subs	r1, r2, #1
 8000e14:	418a      	sbcs	r2, r1
 8000e16:	2100      	movs	r1, #0
 8000e18:	4317      	orrs	r7, r2
 8000e1a:	e6af      	b.n	8000b7c <__aeabi_dsub+0xa4>
 8000e1c:	000007ff 	.word	0x000007ff
 8000e20:	ff7fffff 	.word	0xff7fffff
 8000e24:	800fffff 	.word	0x800fffff
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d03e      	beq.n	8000eaa <__aeabi_dsub+0x3d2>
 8000e2c:	4eb3      	ldr	r6, [pc, #716]	; (80010fc <__aeabi_dsub+0x624>)
 8000e2e:	45b4      	cmp	ip, r6
 8000e30:	d045      	beq.n	8000ebe <__aeabi_dsub+0x3e6>
 8000e32:	2680      	movs	r6, #128	; 0x80
 8000e34:	0436      	lsls	r6, r6, #16
 8000e36:	426d      	negs	r5, r5
 8000e38:	4334      	orrs	r4, r6
 8000e3a:	2d38      	cmp	r5, #56	; 0x38
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dsub+0x368>
 8000e3e:	e0a8      	b.n	8000f92 <__aeabi_dsub+0x4ba>
 8000e40:	2d1f      	cmp	r5, #31
 8000e42:	dd00      	ble.n	8000e46 <__aeabi_dsub+0x36e>
 8000e44:	e11f      	b.n	8001086 <__aeabi_dsub+0x5ae>
 8000e46:	2620      	movs	r6, #32
 8000e48:	0027      	movs	r7, r4
 8000e4a:	4650      	mov	r0, sl
 8000e4c:	1b76      	subs	r6, r6, r5
 8000e4e:	40b7      	lsls	r7, r6
 8000e50:	40e8      	lsrs	r0, r5
 8000e52:	4307      	orrs	r7, r0
 8000e54:	4650      	mov	r0, sl
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	1e46      	subs	r6, r0, #1
 8000e5a:	41b0      	sbcs	r0, r6
 8000e5c:	40ec      	lsrs	r4, r5
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	1a17      	subs	r7, r2, r0
 8000e62:	42ba      	cmp	r2, r7
 8000e64:	4192      	sbcs	r2, r2
 8000e66:	1b0c      	subs	r4, r1, r4
 8000e68:	4252      	negs	r2, r2
 8000e6a:	1aa4      	subs	r4, r4, r2
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	4698      	mov	r8, r3
 8000e70:	e68b      	b.n	8000b8a <__aeabi_dsub+0xb2>
 8000e72:	4664      	mov	r4, ip
 8000e74:	4667      	mov	r7, ip
 8000e76:	432c      	orrs	r4, r5
 8000e78:	d000      	beq.n	8000e7c <__aeabi_dsub+0x3a4>
 8000e7a:	e68b      	b.n	8000b94 <__aeabi_dsub+0xbc>
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	2600      	movs	r6, #0
 8000e80:	2700      	movs	r7, #0
 8000e82:	e6ea      	b.n	8000c5a <__aeabi_dsub+0x182>
 8000e84:	001e      	movs	r6, r3
 8000e86:	e6ad      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000e88:	2b1f      	cmp	r3, #31
 8000e8a:	dc60      	bgt.n	8000f4e <__aeabi_dsub+0x476>
 8000e8c:	2720      	movs	r7, #32
 8000e8e:	1af8      	subs	r0, r7, r3
 8000e90:	000f      	movs	r7, r1
 8000e92:	4684      	mov	ip, r0
 8000e94:	4087      	lsls	r7, r0
 8000e96:	0010      	movs	r0, r2
 8000e98:	40d8      	lsrs	r0, r3
 8000e9a:	4307      	orrs	r7, r0
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	4082      	lsls	r2, r0
 8000ea0:	1e50      	subs	r0, r2, #1
 8000ea2:	4182      	sbcs	r2, r0
 8000ea4:	40d9      	lsrs	r1, r3
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e6f5      	b.n	8000c96 <__aeabi_dsub+0x1be>
 8000eaa:	0026      	movs	r6, r4
 8000eac:	4650      	mov	r0, sl
 8000eae:	4306      	orrs	r6, r0
 8000eb0:	d005      	beq.n	8000ebe <__aeabi_dsub+0x3e6>
 8000eb2:	43ed      	mvns	r5, r5
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d0d3      	beq.n	8000e60 <__aeabi_dsub+0x388>
 8000eb8:	4e90      	ldr	r6, [pc, #576]	; (80010fc <__aeabi_dsub+0x624>)
 8000eba:	45b4      	cmp	ip, r6
 8000ebc:	d1bd      	bne.n	8000e3a <__aeabi_dsub+0x362>
 8000ebe:	000c      	movs	r4, r1
 8000ec0:	0017      	movs	r7, r2
 8000ec2:	4666      	mov	r6, ip
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	e68d      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000ec8:	488c      	ldr	r0, [pc, #560]	; (80010fc <__aeabi_dsub+0x624>)
 8000eca:	4283      	cmp	r3, r0
 8000ecc:	d00b      	beq.n	8000ee6 <__aeabi_dsub+0x40e>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	e6d9      	b.n	8000c86 <__aeabi_dsub+0x1ae>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_dsub+0x400>
 8000ed6:	e096      	b.n	8001006 <__aeabi_dsub+0x52e>
 8000ed8:	0008      	movs	r0, r1
 8000eda:	4310      	orrs	r0, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dsub+0x408>
 8000ede:	e0e2      	b.n	80010a6 <__aeabi_dsub+0x5ce>
 8000ee0:	000c      	movs	r4, r1
 8000ee2:	0017      	movs	r7, r2
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	4e85      	ldr	r6, [pc, #532]	; (80010fc <__aeabi_dsub+0x624>)
 8000ee8:	e67c      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000eea:	2500      	movs	r5, #0
 8000eec:	e780      	b.n	8000df0 <__aeabi_dsub+0x318>
 8000eee:	2100      	movs	r1, #0
 8000ef0:	e78e      	b.n	8000e10 <__aeabi_dsub+0x338>
 8000ef2:	0023      	movs	r3, r4
 8000ef4:	4650      	mov	r0, sl
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d000      	beq.n	8000efe <__aeabi_dsub+0x426>
 8000efc:	e0a8      	b.n	8001050 <__aeabi_dsub+0x578>
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dsub+0x42c>
 8000f02:	e0de      	b.n	80010c2 <__aeabi_dsub+0x5ea>
 8000f04:	000b      	movs	r3, r1
 8000f06:	4313      	orrs	r3, r2
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dsub+0x434>
 8000f0a:	e66b      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000f0c:	4452      	add	r2, sl
 8000f0e:	4552      	cmp	r2, sl
 8000f10:	4180      	sbcs	r0, r0
 8000f12:	1864      	adds	r4, r4, r1
 8000f14:	4240      	negs	r0, r0
 8000f16:	1824      	adds	r4, r4, r0
 8000f18:	0017      	movs	r7, r2
 8000f1a:	0223      	lsls	r3, r4, #8
 8000f1c:	d400      	bmi.n	8000f20 <__aeabi_dsub+0x448>
 8000f1e:	e6fd      	b.n	8000d1c <__aeabi_dsub+0x244>
 8000f20:	4b77      	ldr	r3, [pc, #476]	; (8001100 <__aeabi_dsub+0x628>)
 8000f22:	4666      	mov	r6, ip
 8000f24:	401c      	ands	r4, r3
 8000f26:	e65d      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000f28:	0025      	movs	r5, r4
 8000f2a:	4650      	mov	r0, sl
 8000f2c:	4305      	orrs	r5, r0
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d1cf      	bne.n	8000ed2 <__aeabi_dsub+0x3fa>
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d14f      	bne.n	8000fd6 <__aeabi_dsub+0x4fe>
 8000f36:	000c      	movs	r4, r1
 8000f38:	4314      	orrs	r4, r2
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dsub+0x466>
 8000f3c:	e0a0      	b.n	8001080 <__aeabi_dsub+0x5a8>
 8000f3e:	000c      	movs	r4, r1
 8000f40:	0017      	movs	r7, r2
 8000f42:	4698      	mov	r8, r3
 8000f44:	e64e      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000f46:	4666      	mov	r6, ip
 8000f48:	2400      	movs	r4, #0
 8000f4a:	2700      	movs	r7, #0
 8000f4c:	e685      	b.n	8000c5a <__aeabi_dsub+0x182>
 8000f4e:	001f      	movs	r7, r3
 8000f50:	0008      	movs	r0, r1
 8000f52:	3f20      	subs	r7, #32
 8000f54:	40f8      	lsrs	r0, r7
 8000f56:	0007      	movs	r7, r0
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dsub+0x486>
 8000f5c:	e08e      	b.n	800107c <__aeabi_dsub+0x5a4>
 8000f5e:	2040      	movs	r0, #64	; 0x40
 8000f60:	1ac3      	subs	r3, r0, r3
 8000f62:	4099      	lsls	r1, r3
 8000f64:	430a      	orrs	r2, r1
 8000f66:	1e51      	subs	r1, r2, #1
 8000f68:	418a      	sbcs	r2, r1
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4317      	orrs	r7, r2
 8000f6e:	e692      	b.n	8000c96 <__aeabi_dsub+0x1be>
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d114      	bne.n	8000f9e <__aeabi_dsub+0x4c6>
 8000f74:	0026      	movs	r6, r4
 8000f76:	4650      	mov	r0, sl
 8000f78:	4306      	orrs	r6, r0
 8000f7a:	d062      	beq.n	8001042 <__aeabi_dsub+0x56a>
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d15c      	bne.n	800103c <__aeabi_dsub+0x564>
 8000f82:	1887      	adds	r7, r0, r2
 8000f84:	4297      	cmp	r7, r2
 8000f86:	4192      	sbcs	r2, r2
 8000f88:	1864      	adds	r4, r4, r1
 8000f8a:	4252      	negs	r2, r2
 8000f8c:	18a4      	adds	r4, r4, r2
 8000f8e:	4666      	mov	r6, ip
 8000f90:	e687      	b.n	8000ca2 <__aeabi_dsub+0x1ca>
 8000f92:	4650      	mov	r0, sl
 8000f94:	4320      	orrs	r0, r4
 8000f96:	1e44      	subs	r4, r0, #1
 8000f98:	41a0      	sbcs	r0, r4
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	e760      	b.n	8000e60 <__aeabi_dsub+0x388>
 8000f9e:	4e57      	ldr	r6, [pc, #348]	; (80010fc <__aeabi_dsub+0x624>)
 8000fa0:	45b4      	cmp	ip, r6
 8000fa2:	d04e      	beq.n	8001042 <__aeabi_dsub+0x56a>
 8000fa4:	2680      	movs	r6, #128	; 0x80
 8000fa6:	0436      	lsls	r6, r6, #16
 8000fa8:	425b      	negs	r3, r3
 8000faa:	4334      	orrs	r4, r6
 8000fac:	2b38      	cmp	r3, #56	; 0x38
 8000fae:	dd00      	ble.n	8000fb2 <__aeabi_dsub+0x4da>
 8000fb0:	e07f      	b.n	80010b2 <__aeabi_dsub+0x5da>
 8000fb2:	2b1f      	cmp	r3, #31
 8000fb4:	dd00      	ble.n	8000fb8 <__aeabi_dsub+0x4e0>
 8000fb6:	e08b      	b.n	80010d0 <__aeabi_dsub+0x5f8>
 8000fb8:	2620      	movs	r6, #32
 8000fba:	0027      	movs	r7, r4
 8000fbc:	4650      	mov	r0, sl
 8000fbe:	1af6      	subs	r6, r6, r3
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	4307      	orrs	r7, r0
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	40b0      	lsls	r0, r6
 8000fca:	1e46      	subs	r6, r0, #1
 8000fcc:	41b0      	sbcs	r0, r6
 8000fce:	4307      	orrs	r7, r0
 8000fd0:	40dc      	lsrs	r4, r3
 8000fd2:	18bf      	adds	r7, r7, r2
 8000fd4:	e7d6      	b.n	8000f84 <__aeabi_dsub+0x4ac>
 8000fd6:	000d      	movs	r5, r1
 8000fd8:	4315      	orrs	r5, r2
 8000fda:	d100      	bne.n	8000fde <__aeabi_dsub+0x506>
 8000fdc:	e602      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8000fde:	4650      	mov	r0, sl
 8000fe0:	1a80      	subs	r0, r0, r2
 8000fe2:	4582      	cmp	sl, r0
 8000fe4:	41bf      	sbcs	r7, r7
 8000fe6:	1a65      	subs	r5, r4, r1
 8000fe8:	427f      	negs	r7, r7
 8000fea:	1bed      	subs	r5, r5, r7
 8000fec:	4684      	mov	ip, r0
 8000fee:	0228      	lsls	r0, r5, #8
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_dsub+0x51c>
 8000ff2:	e68d      	b.n	8000d10 <__aeabi_dsub+0x238>
 8000ff4:	4650      	mov	r0, sl
 8000ff6:	1a17      	subs	r7, r2, r0
 8000ff8:	42ba      	cmp	r2, r7
 8000ffa:	4192      	sbcs	r2, r2
 8000ffc:	1b0c      	subs	r4, r1, r4
 8000ffe:	4252      	negs	r2, r2
 8001000:	1aa4      	subs	r4, r4, r2
 8001002:	4698      	mov	r8, r3
 8001004:	e5ee      	b.n	8000be4 <__aeabi_dsub+0x10c>
 8001006:	000d      	movs	r5, r1
 8001008:	4315      	orrs	r5, r2
 800100a:	d100      	bne.n	800100e <__aeabi_dsub+0x536>
 800100c:	e76b      	b.n	8000ee6 <__aeabi_dsub+0x40e>
 800100e:	4650      	mov	r0, sl
 8001010:	0767      	lsls	r7, r4, #29
 8001012:	08c0      	lsrs	r0, r0, #3
 8001014:	4307      	orrs	r7, r0
 8001016:	2080      	movs	r0, #128	; 0x80
 8001018:	08e4      	lsrs	r4, r4, #3
 800101a:	0300      	lsls	r0, r0, #12
 800101c:	4204      	tst	r4, r0
 800101e:	d007      	beq.n	8001030 <__aeabi_dsub+0x558>
 8001020:	08cd      	lsrs	r5, r1, #3
 8001022:	4205      	tst	r5, r0
 8001024:	d104      	bne.n	8001030 <__aeabi_dsub+0x558>
 8001026:	002c      	movs	r4, r5
 8001028:	4698      	mov	r8, r3
 800102a:	08d7      	lsrs	r7, r2, #3
 800102c:	0749      	lsls	r1, r1, #29
 800102e:	430f      	orrs	r7, r1
 8001030:	0f7b      	lsrs	r3, r7, #29
 8001032:	00e4      	lsls	r4, r4, #3
 8001034:	431c      	orrs	r4, r3
 8001036:	00ff      	lsls	r7, r7, #3
 8001038:	4e30      	ldr	r6, [pc, #192]	; (80010fc <__aeabi_dsub+0x624>)
 800103a:	e5d3      	b.n	8000be4 <__aeabi_dsub+0x10c>
 800103c:	4e2f      	ldr	r6, [pc, #188]	; (80010fc <__aeabi_dsub+0x624>)
 800103e:	45b4      	cmp	ip, r6
 8001040:	d1b4      	bne.n	8000fac <__aeabi_dsub+0x4d4>
 8001042:	000c      	movs	r4, r1
 8001044:	0017      	movs	r7, r2
 8001046:	4666      	mov	r6, ip
 8001048:	e5cc      	b.n	8000be4 <__aeabi_dsub+0x10c>
 800104a:	2700      	movs	r7, #0
 800104c:	2400      	movs	r4, #0
 800104e:	e5e8      	b.n	8000c22 <__aeabi_dsub+0x14a>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d039      	beq.n	80010c8 <__aeabi_dsub+0x5f0>
 8001054:	000b      	movs	r3, r1
 8001056:	4313      	orrs	r3, r2
 8001058:	d100      	bne.n	800105c <__aeabi_dsub+0x584>
 800105a:	e744      	b.n	8000ee6 <__aeabi_dsub+0x40e>
 800105c:	08c0      	lsrs	r0, r0, #3
 800105e:	0767      	lsls	r7, r4, #29
 8001060:	4307      	orrs	r7, r0
 8001062:	2080      	movs	r0, #128	; 0x80
 8001064:	08e4      	lsrs	r4, r4, #3
 8001066:	0300      	lsls	r0, r0, #12
 8001068:	4204      	tst	r4, r0
 800106a:	d0e1      	beq.n	8001030 <__aeabi_dsub+0x558>
 800106c:	08cb      	lsrs	r3, r1, #3
 800106e:	4203      	tst	r3, r0
 8001070:	d1de      	bne.n	8001030 <__aeabi_dsub+0x558>
 8001072:	08d7      	lsrs	r7, r2, #3
 8001074:	0749      	lsls	r1, r1, #29
 8001076:	430f      	orrs	r7, r1
 8001078:	001c      	movs	r4, r3
 800107a:	e7d9      	b.n	8001030 <__aeabi_dsub+0x558>
 800107c:	2100      	movs	r1, #0
 800107e:	e771      	b.n	8000f64 <__aeabi_dsub+0x48c>
 8001080:	2500      	movs	r5, #0
 8001082:	2700      	movs	r7, #0
 8001084:	e5e9      	b.n	8000c5a <__aeabi_dsub+0x182>
 8001086:	002e      	movs	r6, r5
 8001088:	0027      	movs	r7, r4
 800108a:	3e20      	subs	r6, #32
 800108c:	40f7      	lsrs	r7, r6
 800108e:	2d20      	cmp	r5, #32
 8001090:	d02f      	beq.n	80010f2 <__aeabi_dsub+0x61a>
 8001092:	2640      	movs	r6, #64	; 0x40
 8001094:	1b75      	subs	r5, r6, r5
 8001096:	40ac      	lsls	r4, r5
 8001098:	4650      	mov	r0, sl
 800109a:	4320      	orrs	r0, r4
 800109c:	1e44      	subs	r4, r0, #1
 800109e:	41a0      	sbcs	r0, r4
 80010a0:	2400      	movs	r4, #0
 80010a2:	4338      	orrs	r0, r7
 80010a4:	e6dc      	b.n	8000e60 <__aeabi_dsub+0x388>
 80010a6:	2480      	movs	r4, #128	; 0x80
 80010a8:	2500      	movs	r5, #0
 80010aa:	0324      	lsls	r4, r4, #12
 80010ac:	4e13      	ldr	r6, [pc, #76]	; (80010fc <__aeabi_dsub+0x624>)
 80010ae:	2700      	movs	r7, #0
 80010b0:	e5d3      	b.n	8000c5a <__aeabi_dsub+0x182>
 80010b2:	4650      	mov	r0, sl
 80010b4:	4320      	orrs	r0, r4
 80010b6:	0007      	movs	r7, r0
 80010b8:	1e78      	subs	r0, r7, #1
 80010ba:	4187      	sbcs	r7, r0
 80010bc:	2400      	movs	r4, #0
 80010be:	18bf      	adds	r7, r7, r2
 80010c0:	e760      	b.n	8000f84 <__aeabi_dsub+0x4ac>
 80010c2:	000c      	movs	r4, r1
 80010c4:	0017      	movs	r7, r2
 80010c6:	e58d      	b.n	8000be4 <__aeabi_dsub+0x10c>
 80010c8:	000c      	movs	r4, r1
 80010ca:	0017      	movs	r7, r2
 80010cc:	4e0b      	ldr	r6, [pc, #44]	; (80010fc <__aeabi_dsub+0x624>)
 80010ce:	e589      	b.n	8000be4 <__aeabi_dsub+0x10c>
 80010d0:	001e      	movs	r6, r3
 80010d2:	0027      	movs	r7, r4
 80010d4:	3e20      	subs	r6, #32
 80010d6:	40f7      	lsrs	r7, r6
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d00c      	beq.n	80010f6 <__aeabi_dsub+0x61e>
 80010dc:	2640      	movs	r6, #64	; 0x40
 80010de:	1af3      	subs	r3, r6, r3
 80010e0:	409c      	lsls	r4, r3
 80010e2:	4650      	mov	r0, sl
 80010e4:	4320      	orrs	r0, r4
 80010e6:	1e44      	subs	r4, r0, #1
 80010e8:	41a0      	sbcs	r0, r4
 80010ea:	4307      	orrs	r7, r0
 80010ec:	2400      	movs	r4, #0
 80010ee:	18bf      	adds	r7, r7, r2
 80010f0:	e748      	b.n	8000f84 <__aeabi_dsub+0x4ac>
 80010f2:	2400      	movs	r4, #0
 80010f4:	e7d0      	b.n	8001098 <__aeabi_dsub+0x5c0>
 80010f6:	2400      	movs	r4, #0
 80010f8:	e7f3      	b.n	80010e2 <__aeabi_dsub+0x60a>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	ff7fffff 	.word	0xff7fffff

08001104 <__aeabi_d2iz>:
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	4d13      	ldr	r5, [pc, #76]	; (8001154 <__aeabi_d2iz+0x50>)
 8001108:	030a      	lsls	r2, r1, #12
 800110a:	004b      	lsls	r3, r1, #1
 800110c:	0b12      	lsrs	r2, r2, #12
 800110e:	0d5b      	lsrs	r3, r3, #21
 8001110:	0fc9      	lsrs	r1, r1, #31
 8001112:	2400      	movs	r4, #0
 8001114:	42ab      	cmp	r3, r5
 8001116:	dd10      	ble.n	800113a <__aeabi_d2iz+0x36>
 8001118:	4c0f      	ldr	r4, [pc, #60]	; (8001158 <__aeabi_d2iz+0x54>)
 800111a:	42a3      	cmp	r3, r4
 800111c:	dc0f      	bgt.n	800113e <__aeabi_d2iz+0x3a>
 800111e:	2480      	movs	r4, #128	; 0x80
 8001120:	4d0e      	ldr	r5, [pc, #56]	; (800115c <__aeabi_d2iz+0x58>)
 8001122:	0364      	lsls	r4, r4, #13
 8001124:	4322      	orrs	r2, r4
 8001126:	1aed      	subs	r5, r5, r3
 8001128:	2d1f      	cmp	r5, #31
 800112a:	dd0b      	ble.n	8001144 <__aeabi_d2iz+0x40>
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <__aeabi_d2iz+0x5c>)
 800112e:	1ac3      	subs	r3, r0, r3
 8001130:	40da      	lsrs	r2, r3
 8001132:	4254      	negs	r4, r2
 8001134:	2900      	cmp	r1, #0
 8001136:	d100      	bne.n	800113a <__aeabi_d2iz+0x36>
 8001138:	0014      	movs	r4, r2
 800113a:	0020      	movs	r0, r4
 800113c:	bd30      	pop	{r4, r5, pc}
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <__aeabi_d2iz+0x60>)
 8001140:	18cc      	adds	r4, r1, r3
 8001142:	e7fa      	b.n	800113a <__aeabi_d2iz+0x36>
 8001144:	4c08      	ldr	r4, [pc, #32]	; (8001168 <__aeabi_d2iz+0x64>)
 8001146:	40e8      	lsrs	r0, r5
 8001148:	46a4      	mov	ip, r4
 800114a:	4463      	add	r3, ip
 800114c:	409a      	lsls	r2, r3
 800114e:	4302      	orrs	r2, r0
 8001150:	e7ef      	b.n	8001132 <__aeabi_d2iz+0x2e>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	000003fe 	.word	0x000003fe
 8001158:	0000041d 	.word	0x0000041d
 800115c:	00000433 	.word	0x00000433
 8001160:	00000413 	.word	0x00000413
 8001164:	7fffffff 	.word	0x7fffffff
 8001168:	fffffbed 	.word	0xfffffbed

0800116c <__aeabi_i2d>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	2800      	cmp	r0, #0
 8001170:	d030      	beq.n	80011d4 <__aeabi_i2d+0x68>
 8001172:	17c3      	asrs	r3, r0, #31
 8001174:	18c4      	adds	r4, r0, r3
 8001176:	405c      	eors	r4, r3
 8001178:	0fc5      	lsrs	r5, r0, #31
 800117a:	0020      	movs	r0, r4
 800117c:	f000 f838 	bl	80011f0 <__clzsi2>
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <__aeabi_i2d+0x74>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <__aeabi_i2d+0x78>)
 8001184:	1a1b      	subs	r3, r3, r0
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	2a1f      	cmp	r2, #31
 800118a:	dd18      	ble.n	80011be <__aeabi_i2d+0x52>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_i2d+0x7c>)
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4094      	lsls	r4, r2
 8001192:	2200      	movs	r2, #0
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	055b      	lsls	r3, r3, #21
 8001198:	0b24      	lsrs	r4, r4, #12
 800119a:	0d5b      	lsrs	r3, r3, #21
 800119c:	2100      	movs	r1, #0
 800119e:	0010      	movs	r0, r2
 80011a0:	0324      	lsls	r4, r4, #12
 80011a2:	0d0a      	lsrs	r2, r1, #20
 80011a4:	0b24      	lsrs	r4, r4, #12
 80011a6:	0512      	lsls	r2, r2, #20
 80011a8:	4322      	orrs	r2, r4
 80011aa:	4c10      	ldr	r4, [pc, #64]	; (80011ec <__aeabi_i2d+0x80>)
 80011ac:	051b      	lsls	r3, r3, #20
 80011ae:	4022      	ands	r2, r4
 80011b0:	4313      	orrs	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	07ed      	lsls	r5, r5, #31
 80011b6:	085b      	lsrs	r3, r3, #1
 80011b8:	432b      	orrs	r3, r5
 80011ba:	0019      	movs	r1, r3
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	0021      	movs	r1, r4
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	210b      	movs	r1, #11
 80011c6:	1a08      	subs	r0, r1, r0
 80011c8:	40c4      	lsrs	r4, r0
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	0324      	lsls	r4, r4, #12
 80011ce:	0b24      	lsrs	r4, r4, #12
 80011d0:	0d5b      	lsrs	r3, r3, #21
 80011d2:	e7e3      	b.n	800119c <__aeabi_i2d+0x30>
 80011d4:	2500      	movs	r5, #0
 80011d6:	2300      	movs	r3, #0
 80011d8:	2400      	movs	r4, #0
 80011da:	2200      	movs	r2, #0
 80011dc:	e7de      	b.n	800119c <__aeabi_i2d+0x30>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	0000041e 	.word	0x0000041e
 80011e4:	00000433 	.word	0x00000433
 80011e8:	00000413 	.word	0x00000413
 80011ec:	800fffff 	.word	0x800fffff

080011f0 <__clzsi2>:
 80011f0:	211c      	movs	r1, #28
 80011f2:	2301      	movs	r3, #1
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d301      	bcc.n	80011fe <__clzsi2+0xe>
 80011fa:	0c00      	lsrs	r0, r0, #16
 80011fc:	3910      	subs	r1, #16
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	4298      	cmp	r0, r3
 8001202:	d301      	bcc.n	8001208 <__clzsi2+0x18>
 8001204:	0a00      	lsrs	r0, r0, #8
 8001206:	3908      	subs	r1, #8
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	4298      	cmp	r0, r3
 800120c:	d301      	bcc.n	8001212 <__clzsi2+0x22>
 800120e:	0900      	lsrs	r0, r0, #4
 8001210:	3904      	subs	r1, #4
 8001212:	a202      	add	r2, pc, #8	; (adr r2, 800121c <__clzsi2+0x2c>)
 8001214:	5c10      	ldrb	r0, [r2, r0]
 8001216:	1840      	adds	r0, r0, r1
 8001218:	4770      	bx	lr
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	02020304 	.word	0x02020304
 8001220:	01010101 	.word	0x01010101
	...

0800122c <__clzdi2>:
 800122c:	b510      	push	{r4, lr}
 800122e:	2900      	cmp	r1, #0
 8001230:	d103      	bne.n	800123a <__clzdi2+0xe>
 8001232:	f7ff ffdd 	bl	80011f0 <__clzsi2>
 8001236:	3020      	adds	r0, #32
 8001238:	e002      	b.n	8001240 <__clzdi2+0x14>
 800123a:	1c08      	adds	r0, r1, #0
 800123c:	f7ff ffd8 	bl	80011f0 <__clzsi2>
 8001240:	bd10      	pop	{r4, pc}
 8001242:	46c0      	nop			; (mov r8, r8)

08001244 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_InitTick+0x44>)
{
 8001246:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8001248:	6819      	ldr	r1, [r3, #0]
{
 800124a:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 800124c:	2900      	cmp	r1, #0
 800124e:	d101      	bne.n	8001254 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001250:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001252:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001254:	20fa      	movs	r0, #250	; 0xfa
 8001256:	0080      	lsls	r0, r0, #2
 8001258:	f7fe ff68 	bl	800012c <__udivsi3>
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_InitTick+0x48>)
 800125e:	0001      	movs	r1, r0
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f7fe ff63 	bl	800012c <__udivsi3>
 8001266:	f000 fc63 	bl	8001b30 <HAL_SYSTICK_Config>
 800126a:	1e04      	subs	r4, r0, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	2d03      	cmp	r5, #3
 8001270:	d8ee      	bhi.n	8001250 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001272:	0002      	movs	r2, r0
 8001274:	2001      	movs	r0, #1
 8001276:	0029      	movs	r1, r5
 8001278:	4240      	negs	r0, r0
 800127a:	f000 fc1d 	bl	8001ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_InitTick+0x4c>)
 8001280:	0020      	movs	r0, r4
 8001282:	601d      	str	r5, [r3, #0]
 8001284:	e7e5      	b.n	8001252 <HAL_InitTick+0xe>
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000000 	.word	0x20000000
 800128c:	20000010 	.word	0x20000010
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_Init+0x24>)
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	6811      	ldr	r1, [r2, #0]
{
 800129c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129e:	430b      	orrs	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ffce 	bl	8001244 <HAL_InitTick>
 80012a8:	1e04      	subs	r4, r0, #0
 80012aa:	d103      	bne.n	80012b4 <HAL_Init+0x20>
  HAL_MspInit();
 80012ac:	f004 f828 	bl	8005300 <HAL_MspInit>
}
 80012b0:	0020      	movs	r0, r4
 80012b2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80012b4:	2401      	movs	r4, #1
 80012b6:	e7fb      	b.n	80012b0 <HAL_Init+0x1c>
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_IncTick+0x10>)
 80012be:	4904      	ldr	r1, [pc, #16]	; (80012d0 <HAL_IncTick+0x14>)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	185b      	adds	r3, r3, r1
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	200004c4 	.word	0x200004c4
 80012d0:	20000000 	.word	0x20000000

080012d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <HAL_GetTick+0x8>)
 80012d6:	6818      	ldr	r0, [r3, #0]
}
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	200004c4 	.word	0x200004c4

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fff6 	bl	80012d4 <HAL_GetTick>
 80012e8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	1c63      	adds	r3, r4, #1
 80012ec:	d002      	beq.n	80012f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_Delay+0x20>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	4284      	cmp	r4, r0
 80012fc:	d8fa      	bhi.n	80012f4 <HAL_Delay+0x14>
  {
  }
}
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
 8001300:	20000000 	.word	0x20000000

08001304 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001304:	6880      	ldr	r0, [r0, #8]
 8001306:	0740      	lsls	r0, r0, #29
 8001308:	0fc0      	lsrs	r0, r0, #31
}
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800130c:	2300      	movs	r3, #0
{
 800130e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001310:	b085      	sub	sp, #20
 8001312:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001314:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001316:	2501      	movs	r5, #1
  if(hadc == NULL)
 8001318:	4298      	cmp	r0, r3
 800131a:	d100      	bne.n	800131e <HAL_ADC_Init+0x12>
 800131c:	e09a      	b.n	8001454 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001320:	429d      	cmp	r5, r3
 8001322:	d105      	bne.n	8001330 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001324:	f003 fa20 	bl	8004768 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001328:	0023      	movs	r3, r4
 800132a:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800132e:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001330:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001332:	6826      	ldr	r6, [r4, #0]
 8001334:	055b      	lsls	r3, r3, #21
 8001336:	68b2      	ldr	r2, [r6, #8]
 8001338:	421a      	tst	r2, r3
 800133a:	d100      	bne.n	800133e <HAL_ADC_Init+0x32>
 800133c:	e0d0      	b.n	80014e0 <HAL_ADC_Init+0x1d4>
 800133e:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2500      	movs	r5, #0
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	d400      	bmi.n	8001348 <HAL_ADC_Init+0x3c>
 8001346:	e0d8      	b.n	80014fa <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001348:	0030      	movs	r0, r6
 800134a:	f7ff ffdb 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800134e:	2310      	movs	r3, #16
 8001350:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8001352:	401e      	ands	r6, r3
 8001354:	d000      	beq.n	8001358 <HAL_ADC_Init+0x4c>
 8001356:	e0be      	b.n	80014d6 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001358:	2800      	cmp	r0, #0
 800135a:	d000      	beq.n	800135e <HAL_ADC_Init+0x52>
 800135c:	e0bb      	b.n	80014d6 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001360:	4a7c      	ldr	r2, [pc, #496]	; (8001554 <HAL_ADC_Init+0x248>)
 8001362:	401a      	ands	r2, r3
 8001364:	2302      	movs	r3, #2
 8001366:	4313      	orrs	r3, r2
 8001368:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800136a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	07d2      	lsls	r2, r2, #31
 8001370:	d400      	bmi.n	8001374 <HAL_ADC_Init+0x68>
 8001372:	e0cb      	b.n	800150c <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001374:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001376:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001378:	1e78      	subs	r0, r7, #1
 800137a:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800137c:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800137e:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001380:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001382:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001384:	9001      	str	r0, [sp, #4]
 8001386:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001388:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800138a:	7ea2      	ldrb	r2, [r4, #26]
 800138c:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800138e:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001390:	4694      	mov	ip, r2
 8001392:	0352      	lsls	r2, r2, #13
 8001394:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001396:	2800      	cmp	r0, #0
 8001398:	da66      	bge.n	8001468 <HAL_ADC_Init+0x15c>
 800139a:	0047      	lsls	r7, r0, #1
 800139c:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800139e:	0022      	movs	r2, r4
 80013a0:	322c      	adds	r2, #44	; 0x2c
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80013a6:	430a      	orrs	r2, r1
 80013a8:	9901      	ldr	r1, [sp, #4]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	4317      	orrs	r7, r2
 80013ae:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	1c62      	adds	r2, r4, #1
 80013b2:	7fd2      	ldrb	r2, [r2, #31]
 80013b4:	2a01      	cmp	r2, #1
 80013b6:	d107      	bne.n	80013c8 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b8:	4661      	mov	r1, ip
 80013ba:	2900      	cmp	r1, #0
 80013bc:	d157      	bne.n	800146e <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0039      	movs	r1, r7
 80013c2:	0252      	lsls	r2, r2, #9
 80013c4:	4311      	orrs	r1, r2
 80013c6:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d007      	beq.n	80013de <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013ce:	21e0      	movs	r1, #224	; 0xe0
 80013d0:	0049      	lsls	r1, r1, #1
 80013d2:	400a      	ands	r2, r1
 80013d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013d6:	430a      	orrs	r2, r1
 80013d8:	9901      	ldr	r1, [sp, #4]
 80013da:	4311      	orrs	r1, r2
 80013dc:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80013de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80013e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013e2:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 80013e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80013e6:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 80013e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80013ea:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80013ec:	0021      	movs	r1, r4
 80013ee:	313c      	adds	r1, #60	; 0x3c
 80013f0:	7809      	ldrb	r1, [r1, #0]
 80013f2:	2901      	cmp	r1, #1
 80013f4:	d100      	bne.n	80013f8 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80013f6:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80013f8:	68d9      	ldr	r1, [r3, #12]
 80013fa:	4f57      	ldr	r7, [pc, #348]	; (8001558 <HAL_ADC_Init+0x24c>)
 80013fc:	4039      	ands	r1, r7
 80013fe:	9f01      	ldr	r7, [sp, #4]
 8001400:	4339      	orrs	r1, r7
 8001402:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001404:	6919      	ldr	r1, [r3, #16]
 8001406:	4f55      	ldr	r7, [pc, #340]	; (800155c <HAL_ADC_Init+0x250>)
 8001408:	4039      	ands	r1, r7
 800140a:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 800140c:	2107      	movs	r1, #7
 800140e:	2770      	movs	r7, #112	; 0x70
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	438a      	bics	r2, r1
 8001416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001420:	43ba      	bics	r2, r7
 8001422:	0109      	lsls	r1, r1, #4
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001428:	2800      	cmp	r0, #0
 800142a:	d12a      	bne.n	8001482 <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800142c:	2210      	movs	r2, #16
 800142e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001430:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001432:	430a      	orrs	r2, r1
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_ADC_Init+0x254>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	9a01      	ldr	r2, [sp, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d13d      	bne.n	80014be <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001442:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001444:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800144a:	4393      	bics	r3, r2
 800144c:	001a      	movs	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	4313      	orrs	r3, r2
 8001452:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001454:	0028      	movs	r0, r5
 8001456:	b005      	add	sp, #20
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 800145a:	9b03      	ldr	r3, [sp, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 8001460:	9b03      	ldr	r3, [sp, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_Init+0x14e>
 8001466:	e76a      	b.n	800133e <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001468:	2780      	movs	r7, #128	; 0x80
 800146a:	03bf      	lsls	r7, r7, #14
 800146c:	e797      	b.n	800139e <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001470:	468c      	mov	ip, r1
 8001472:	2120      	movs	r1, #32
 8001474:	4667      	mov	r7, ip
 8001476:	4339      	orrs	r1, r7
 8001478:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800147c:	430a      	orrs	r2, r1
 800147e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8001480:	e7a2      	b.n	80013c8 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	0392      	lsls	r2, r2, #14
 8001486:	4290      	cmp	r0, r2
 8001488:	d1d5      	bne.n	8001436 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 800148a:	200f      	movs	r0, #15
 800148c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800148e:	000f      	movs	r7, r1
 8001490:	00b2      	lsls	r2, r6, #2
 8001492:	40d7      	lsrs	r7, r2
 8001494:	003a      	movs	r2, r7
 8001496:	4002      	ands	r2, r0
 8001498:	2a0f      	cmp	r2, #15
 800149a:	d00d      	beq.n	80014b8 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800149c:	3601      	adds	r6, #1
 800149e:	2e08      	cmp	r6, #8
 80014a0:	d1f5      	bne.n	800148e <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 80014a2:	4830      	ldr	r0, [pc, #192]	; (8001564 <HAL_ADC_Init+0x258>)
 80014a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a6:	69e2      	ldr	r2, [r4, #28]
 80014a8:	1812      	adds	r2, r2, r0
 80014aa:	201c      	movs	r0, #28
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4002      	ands	r2, r0
 80014b0:	382c      	subs	r0, #44	; 0x2c
 80014b2:	4090      	lsls	r0, r2
 80014b4:	0002      	movs	r2, r0
 80014b6:	e7bc      	b.n	8001432 <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80014b8:	2e01      	cmp	r6, #1
 80014ba:	d0b7      	beq.n	800142c <HAL_ADC_Init+0x120>
 80014bc:	e7f1      	b.n	80014a2 <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 80014be:	2212      	movs	r2, #18
 80014c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 80014c4:	4393      	bics	r3, r2
 80014c6:	001a      	movs	r2, r3
 80014c8:	2310      	movs	r3, #16
 80014ca:	4313      	orrs	r3, r2
 80014cc:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014d0:	432b      	orrs	r3, r5
 80014d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80014d4:	e7be      	b.n	8001454 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80014d8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	4313      	orrs	r3, r2
 80014dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80014de:	e7b9      	b.n	8001454 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 80014e0:	68b2      	ldr	r2, [r6, #8]
 80014e2:	4921      	ldr	r1, [pc, #132]	; (8001568 <HAL_ADC_Init+0x25c>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_ADC_Init+0x260>)
 80014ec:	4920      	ldr	r1, [pc, #128]	; (8001570 <HAL_ADC_Init+0x264>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f7fe fe1c 	bl	800012c <__udivsi3>
 80014f4:	0040      	lsls	r0, r0, #1
 80014f6:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 80014f8:	e7b2      	b.n	8001460 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fa:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fe:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001500:	4313      	orrs	r3, r2
 8001502:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001504:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001506:	432b      	orrs	r3, r5
 8001508:	65e3      	str	r3, [r4, #92]	; 0x5c
 800150a:	e71d      	b.n	8001348 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 800150c:	2118      	movs	r1, #24
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	438a      	bics	r2, r1
 8001512:	68a1      	ldr	r1, [r4, #8]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001518:	6861      	ldr	r1, [r4, #4]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	0f88      	lsrs	r0, r1, #30
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	0780      	lsls	r0, r0, #30
 8001522:	0892      	lsrs	r2, r2, #2
 8001524:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001526:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001528:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800152a:	004a      	lsls	r2, r1, #1
 800152c:	0852      	lsrs	r2, r2, #1
 800152e:	05c0      	lsls	r0, r0, #23
 8001530:	4282      	cmp	r2, r0
 8001532:	d100      	bne.n	8001536 <HAL_ADC_Init+0x22a>
 8001534:	e71e      	b.n	8001374 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	0612      	lsls	r2, r2, #24
 800153a:	4291      	cmp	r1, r2
 800153c:	d100      	bne.n	8001540 <HAL_ADC_Init+0x234>
 800153e:	e719      	b.n	8001374 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <HAL_ADC_Init+0x268>)
 8001542:	4f0d      	ldr	r7, [pc, #52]	; (8001578 <HAL_ADC_Init+0x26c>)
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	403a      	ands	r2, r7
 8001548:	27f0      	movs	r7, #240	; 0xf0
 800154a:	03bf      	lsls	r7, r7, #14
 800154c:	4039      	ands	r1, r7
 800154e:	430a      	orrs	r2, r1
 8001550:	6002      	str	r2, [r0, #0]
 8001552:	e70f      	b.n	8001374 <HAL_ADC_Init+0x68>
 8001554:	fffffefd 	.word	0xfffffefd
 8001558:	fffe0219 	.word	0xfffe0219
 800155c:	dffffc02 	.word	0xdffffc02
 8001560:	833fffe7 	.word	0x833fffe7
 8001564:	3fffffff 	.word	0x3fffffff
 8001568:	6fffffe8 	.word	0x6fffffe8
 800156c:	20000010 	.word	0x20000010
 8001570:	00030d40 	.word	0x00030d40
 8001574:	40012708 	.word	0x40012708
 8001578:	ffc3ffff 	.word	0xffc3ffff

0800157c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800157e:	6945      	ldr	r5, [r0, #20]
{
 8001580:	0004      	movs	r4, r0
 8001582:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001584:	2d08      	cmp	r5, #8
 8001586:	d00a      	beq.n	800159e <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	2001      	movs	r0, #1
 800158c:	68db      	ldr	r3, [r3, #12]
      
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800158e:	2504      	movs	r5, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001590:	4203      	tst	r3, r0
 8001592:	d004      	beq.n	800159e <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001594:	2320      	movs	r3, #32
 8001596:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001598:	4313      	orrs	r3, r2
 800159a:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }
  
  /* Return function status */
  return HAL_OK;
}
 800159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800159e:	f7ff fe99 	bl	80012d4 <HAL_GetTick>
 80015a2:	0007      	movs	r7, r0
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015a4:	6820      	ldr	r0, [r4, #0]
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	422b      	tst	r3, r5
 80015aa:	d026      	beq.n	80015fa <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4313      	orrs	r3, r2
 80015b4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80015b6:	23c0      	movs	r3, #192	; 0xc0
 80015b8:	68c2      	ldr	r2, [r0, #12]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	421a      	tst	r2, r3
 80015be:	d114      	bne.n	80015ea <HAL_ADC_PollForConversion+0x6e>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 80015c0:	7ea3      	ldrb	r3, [r4, #26]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_PollForConversion+0x6e>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	071b      	lsls	r3, r3, #28
 80015ca:	d50e      	bpl.n	80015ea <HAL_ADC_PollForConversion+0x6e>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015cc:	f7ff fe9a 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d124      	bne.n	800161e <HAL_ADC_PollForConversion+0xa2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015d4:	210c      	movs	r1, #12
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	6853      	ldr	r3, [r2, #4]
 80015da:	438b      	bics	r3, r1
 80015dc:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80015de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_ADC_PollForConversion+0xb4>)
 80015e2:	401a      	ands	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80015ea:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015ec:	7e23      	ldrb	r3, [r4, #24]
 80015ee:	4283      	cmp	r3, r0
 80015f0:	d1d4      	bne.n	800159c <HAL_ADC_PollForConversion+0x20>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015f2:	220c      	movs	r2, #12
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e7d0      	b.n	800159c <HAL_ADC_PollForConversion+0x20>
    if(Timeout != HAL_MAX_DELAY)
 80015fa:	1c73      	adds	r3, r6, #1
 80015fc:	d0d3      	beq.n	80015a6 <HAL_ADC_PollForConversion+0x2a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015fe:	f7ff fe69 	bl	80012d4 <HAL_GetTick>
 8001602:	1bc0      	subs	r0, r0, r7
 8001604:	4286      	cmp	r6, r0
 8001606:	d301      	bcc.n	800160c <HAL_ADC_PollForConversion+0x90>
 8001608:	2e00      	cmp	r6, #0
 800160a:	d1cb      	bne.n	80015a4 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800160c:	2304      	movs	r3, #4
 800160e:	6da2      	ldr	r2, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8001610:	3454      	adds	r4, #84	; 0x54
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001612:	4313      	orrs	r3, r2
 8001614:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001616:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001618:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800161a:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800161c:	e7be      	b.n	800159c <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161e:	2320      	movs	r3, #32
 8001620:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001622:	4313      	orrs	r3, r2
 8001624:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001626:	2301      	movs	r3, #1
 8001628:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800162a:	4313      	orrs	r3, r2
 800162c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800162e:	e7dc      	b.n	80015ea <HAL_ADC_PollForConversion+0x6e>
 8001630:	fffffefe 	.word	0xfffffefe

08001634 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001634:	6803      	ldr	r3, [r0, #0]
 8001636:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001638:	4770      	bx	lr

0800163a <HAL_ADC_ConvCpltCallback>:
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_LevelOutOfWindowCallback>:
 800163c:	4770      	bx	lr

0800163e <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_IRQHandler>:
{
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001642:	6803      	ldr	r3, [r0, #0]
{
 8001644:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001646:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001648:	685e      	ldr	r6, [r3, #4]
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800164a:	2302      	movs	r3, #2
 800164c:	421d      	tst	r5, r3
 800164e:	d00f      	beq.n	8001670 <HAL_ADC_IRQHandler+0x30>
 8001650:	421e      	tst	r6, r3
 8001652:	d00d      	beq.n	8001670 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001654:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001656:	06db      	lsls	r3, r3, #27
 8001658:	d404      	bmi.n	8001664 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4313      	orrs	r3, r2
 8001662:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001664:	0020      	movs	r0, r4
 8001666:	f000 fa25 	bl	8001ab4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 800166a:	2202      	movs	r2, #2
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	601a      	str	r2, [r3, #0]
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001670:	2304      	movs	r3, #4
 8001672:	421d      	tst	r5, r3
 8001674:	d001      	beq.n	800167a <HAL_ADC_IRQHandler+0x3a>
 8001676:	421e      	tst	r6, r3
 8001678:	d104      	bne.n	8001684 <HAL_ADC_IRQHandler+0x44>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 800167a:	2308      	movs	r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800167c:	421d      	tst	r5, r3
 800167e:	d02a      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x96>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8001680:	421e      	tst	r6, r3
 8001682:	d028      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x96>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001686:	06db      	lsls	r3, r3, #27
 8001688:	d404      	bmi.n	8001694 <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4313      	orrs	r3, r2
 8001692:	65a3      	str	r3, [r4, #88]	; 0x58
 8001694:	23c0      	movs	r3, #192	; 0xc0
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001696:	6820      	ldr	r0, [r4, #0]
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	68c2      	ldr	r2, [r0, #12]
 800169c:	421a      	tst	r2, r3
 800169e:	d114      	bne.n	80016ca <HAL_ADC_IRQHandler+0x8a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80016a0:	7ea3      	ldrb	r3, [r4, #26]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d111      	bne.n	80016ca <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016a6:	6803      	ldr	r3, [r0, #0]
 80016a8:	071b      	lsls	r3, r3, #28
 80016aa:	d50e      	bpl.n	80016ca <HAL_ADC_IRQHandler+0x8a>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ac:	f7ff fe2a 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d15a      	bne.n	800176a <HAL_ADC_IRQHandler+0x12a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016b4:	210c      	movs	r1, #12
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	6853      	ldr	r3, [r2, #4]
 80016ba:	438b      	bics	r3, r1
 80016bc:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80016be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016c0:	4a35      	ldr	r2, [pc, #212]	; (8001798 <HAL_ADC_IRQHandler+0x158>)
 80016c2:	401a      	ands	r2, r3
 80016c4:	2301      	movs	r3, #1
 80016c6:	4313      	orrs	r3, r2
 80016c8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80016ca:	0020      	movs	r0, r4
 80016cc:	f7ff ffb5 	bl	800163a <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80016d0:	220c      	movs	r2, #12
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 80016d6:	2780      	movs	r7, #128	; 0x80
 80016d8:	423d      	tst	r5, r7
 80016da:	d00b      	beq.n	80016f4 <HAL_ADC_IRQHandler+0xb4>
 80016dc:	423e      	tst	r6, r7
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4313      	orrs	r3, r2
 80016e8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016ea:	0020      	movs	r0, r4
 80016ec:	f7ff ffa6 	bl	800163c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 80016f4:	2780      	movs	r7, #128	; 0x80
 80016f6:	007f      	lsls	r7, r7, #1
 80016f8:	423d      	tst	r5, r7
 80016fa:	d00b      	beq.n	8001714 <HAL_ADC_IRQHandler+0xd4>
 80016fc:	423e      	tst	r6, r7
 80016fe:	d009      	beq.n	8001714 <HAL_ADC_IRQHandler+0xd4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4313      	orrs	r3, r2
 8001708:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800170a:	0020      	movs	r0, r4
 800170c:	f000 f9d0 	bl	8001ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8001714:	2780      	movs	r7, #128	; 0x80
 8001716:	00bf      	lsls	r7, r7, #2
 8001718:	423d      	tst	r5, r7
 800171a:	d00b      	beq.n	8001734 <HAL_ADC_IRQHandler+0xf4>
 800171c:	423e      	tst	r6, r7
 800171e:	d009      	beq.n	8001734 <HAL_ADC_IRQHandler+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001724:	02db      	lsls	r3, r3, #11
 8001726:	4313      	orrs	r3, r2
 8001728:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800172a:	0020      	movs	r0, r4
 800172c:	f000 f9c1 	bl	8001ab2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8001734:	2310      	movs	r3, #16
 8001736:	421d      	tst	r5, r3
 8001738:	d00b      	beq.n	8001752 <HAL_ADC_IRQHandler+0x112>
 800173a:	421e      	tst	r6, r3
 800173c:	d009      	beq.n	8001752 <HAL_ADC_IRQHandler+0x112>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800173e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01b      	beq.n	800177c <HAL_ADC_IRQHandler+0x13c>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001744:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	079b      	lsls	r3, r3, #30
 800174a:	d117      	bne.n	800177c <HAL_ADC_IRQHandler+0x13c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800174c:	2210      	movs	r2, #16
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001752:	2780      	movs	r7, #128	; 0x80
 8001754:	01bf      	lsls	r7, r7, #6
 8001756:	423d      	tst	r5, r7
 8001758:	d006      	beq.n	8001768 <HAL_ADC_IRQHandler+0x128>
 800175a:	423e      	tst	r6, r7
 800175c:	d004      	beq.n	8001768 <HAL_ADC_IRQHandler+0x128>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800175e:	0020      	movs	r0, r4
 8001760:	f000 f9a9 	bl	8001ab6 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	601f      	str	r7, [r3, #0]
}
 8001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176a:	2320      	movs	r3, #32
 800176c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800176e:	4313      	orrs	r3, r2
 8001770:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	2301      	movs	r3, #1
 8001774:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001776:	4313      	orrs	r3, r2
 8001778:	65e3      	str	r3, [r4, #92]	; 0x5c
 800177a:	e7a6      	b.n	80016ca <HAL_ADC_IRQHandler+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4313      	orrs	r3, r2
 8001784:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001786:	2302      	movs	r3, #2
 8001788:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800178a:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800178c:	4313      	orrs	r3, r2
 800178e:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8001790:	f7ff ff55 	bl	800163e <HAL_ADC_ErrorCallback>
 8001794:	e7da      	b.n	800174c <HAL_ADC_IRQHandler+0x10c>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	fffffefe 	.word	0xfffffefe

0800179c <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800179c:	2300      	movs	r3, #0
{
 800179e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a0:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 80017a2:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a4:	0003      	movs	r3, r0
 80017a6:	3354      	adds	r3, #84	; 0x54
 80017a8:	781a      	ldrb	r2, [r3, #0]
{
 80017aa:	0005      	movs	r5, r0
 80017ac:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 80017ae:	2402      	movs	r4, #2
 80017b0:	2a01      	cmp	r2, #1
 80017b2:	d100      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x1a>
 80017b4:	e0c1      	b.n	800193a <HAL_ADC_ConfigChannel+0x19e>
 80017b6:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 80017ba:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017bc:	f7ff fda2 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 80017c0:	9003      	str	r0, [sp, #12]
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d000      	beq.n	80017c8 <HAL_ADC_ConfigChannel+0x2c>
 80017c6:	e0ef      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x20c>
 80017c8:	2204      	movs	r2, #4
 80017ca:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4694      	mov	ip, r2
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9801      	ldr	r0, [sp, #4]
 80017d4:	692b      	ldr	r3, [r5, #16]
 80017d6:	0609      	lsls	r1, r1, #24
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d100      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x44>
 80017de:	e0b6      	b.n	800194e <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80017e0:	4660      	mov	r0, ip
 80017e2:	4383      	bics	r3, r0
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d113      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80017e8:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017ea:	0353      	lsls	r3, r2, #13
 80017ec:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80017ee:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 80017f0:	4303      	orrs	r3, r0
 80017f2:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017f4:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	496e      	ldr	r1, [pc, #440]	; (80019b4 <HAL_ADC_ConfigChannel+0x218>)
 80017fa:	6944      	ldr	r4, [r0, #20]
 80017fc:	4019      	ands	r1, r3
 80017fe:	4061      	eors	r1, r4
 8001800:	0213      	lsls	r3, r2, #8
 8001802:	400b      	ands	r3, r1
 8001804:	4063      	eors	r3, r4
 8001806:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001808:	2a00      	cmp	r2, #0
 800180a:	db65      	blt.n	80018d8 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2400      	movs	r4, #0
 800180e:	e091      	b.n	8001934 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001810:	211f      	movs	r1, #31
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	400b      	ands	r3, r1
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	230f      	movs	r3, #15
 800181a:	9802      	ldr	r0, [sp, #8]
 800181c:	4083      	lsls	r3, r0
 800181e:	43db      	mvns	r3, r3
 8001820:	9304      	str	r3, [sp, #16]
 8001822:	9804      	ldr	r0, [sp, #16]
 8001824:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001826:	4003      	ands	r3, r0
 8001828:	9305      	str	r3, [sp, #20]
 800182a:	0350      	lsls	r0, r2, #13
 800182c:	0013      	movs	r3, r2
 800182e:	2800      	cmp	r0, #0
 8001830:	d115      	bne.n	800185e <HAL_ADC_ConfigChannel+0xc2>
 8001832:	0e90      	lsrs	r0, r2, #26
 8001834:	4008      	ands	r0, r1
 8001836:	9902      	ldr	r1, [sp, #8]
 8001838:	4088      	lsls	r0, r1
 800183a:	9905      	ldr	r1, [sp, #20]
 800183c:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800183e:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001840:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001842:	0889      	lsrs	r1, r1, #2
 8001844:	69e8      	ldr	r0, [r5, #28]
 8001846:	3101      	adds	r1, #1
 8001848:	4281      	cmp	r1, r0
 800184a:	d8d3      	bhi.n	80017f4 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 800184c:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800184e:	6829      	ldr	r1, [r5, #0]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	0f1b      	lsrs	r3, r3, #28
 8001854:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8001856:	40a3      	lsls	r3, r4
 8001858:	9c04      	ldr	r4, [sp, #16]
 800185a:	4020      	ands	r0, r4
 800185c:	e7c8      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800185e:	9803      	ldr	r0, [sp, #12]
 8001860:	4232      	tst	r2, r6
 8001862:	d1e8      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001864:	0030      	movs	r0, r6
 8001866:	4222      	tst	r2, r4
 8001868:	d1e5      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 800186a:	4661      	mov	r1, ip
 800186c:	0020      	movs	r0, r4
 800186e:	420a      	tst	r2, r1
 8001870:	d1e1      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001872:	2003      	movs	r0, #3
 8001874:	0711      	lsls	r1, r2, #28
 8001876:	d4de      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001878:	4660      	mov	r0, ip
 800187a:	06d1      	lsls	r1, r2, #27
 800187c:	d4db      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 800187e:	2005      	movs	r0, #5
 8001880:	0691      	lsls	r1, r2, #26
 8001882:	d4d8      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001884:	3001      	adds	r0, #1
 8001886:	0651      	lsls	r1, r2, #25
 8001888:	d4d5      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 800188a:	3001      	adds	r0, #1
 800188c:	0611      	lsls	r1, r2, #24
 800188e:	d4d2      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001890:	3001      	adds	r0, #1
 8001892:	05d1      	lsls	r1, r2, #23
 8001894:	d4cf      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 8001896:	3001      	adds	r0, #1
 8001898:	0591      	lsls	r1, r2, #22
 800189a:	d4cc      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 800189c:	3001      	adds	r0, #1
 800189e:	0551      	lsls	r1, r2, #21
 80018a0:	d4c9      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018a2:	3001      	adds	r0, #1
 80018a4:	0511      	lsls	r1, r2, #20
 80018a6:	d4c6      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018a8:	3001      	adds	r0, #1
 80018aa:	04d1      	lsls	r1, r2, #19
 80018ac:	d4c3      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018ae:	3001      	adds	r0, #1
 80018b0:	0491      	lsls	r1, r2, #18
 80018b2:	d4c0      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018b4:	3001      	adds	r0, #1
 80018b6:	0451      	lsls	r1, r2, #17
 80018b8:	d4bd      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018ba:	3001      	adds	r0, #1
 80018bc:	0411      	lsls	r1, r2, #16
 80018be:	d4ba      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018c0:	3001      	adds	r0, #1
 80018c2:	03d1      	lsls	r1, r2, #15
 80018c4:	d4b7      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018c6:	3001      	adds	r0, #1
 80018c8:	0391      	lsls	r1, r2, #14
 80018ca:	d4b4      	bmi.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018cc:	2080      	movs	r0, #128	; 0x80
 80018ce:	02c0      	lsls	r0, r0, #11
 80018d0:	4010      	ands	r0, r2
 80018d2:	d0b0      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
 80018d4:	2012      	movs	r0, #18
 80018d6:	e7ae      	b.n	8001836 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d8:	21e0      	movs	r1, #224	; 0xe0
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018dc:	4837      	ldr	r0, [pc, #220]	; (80019bc <HAL_ADC_ConfigChannel+0x220>)
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	0449      	lsls	r1, r1, #17
 80018e2:	4021      	ands	r1, r4
 80018e4:	4282      	cmp	r2, r0
 80018e6:	d117      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x17c>
 80018e8:	2080      	movs	r0, #128	; 0x80
 80018ea:	0400      	lsls	r0, r0, #16
 80018ec:	4204      	tst	r4, r0
 80018ee:	d18d      	bne.n	800180c <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4c33      	ldr	r4, [pc, #204]	; (80019c0 <HAL_ADC_ConfigChannel+0x224>)
 80018f4:	4022      	ands	r2, r4
 80018f6:	430a      	orrs	r2, r1
 80018f8:	4302      	orrs	r2, r0
 80018fa:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_ADC_ConfigChannel+0x228>)
 80018fe:	4932      	ldr	r1, [pc, #200]	; (80019c8 <HAL_ADC_ConfigChannel+0x22c>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f7fe fc13 	bl	800012c <__udivsi3>
 8001906:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8001908:	9b07      	ldr	r3, [sp, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x174>
 800190e:	e77d      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8001910:	9b07      	ldr	r3, [sp, #28]
 8001912:	3b01      	subs	r3, #1
 8001914:	9307      	str	r3, [sp, #28]
 8001916:	e7f7      	b.n	8001908 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001918:	482c      	ldr	r0, [pc, #176]	; (80019cc <HAL_ADC_ConfigChannel+0x230>)
 800191a:	4282      	cmp	r2, r0
 800191c:	d110      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1a4>
 800191e:	2080      	movs	r0, #128	; 0x80
 8001920:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001922:	4004      	ands	r4, r0
 8001924:	d000      	beq.n	8001928 <HAL_ADC_ConfigChannel+0x18c>
 8001926:	e771      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4e25      	ldr	r6, [pc, #148]	; (80019c0 <HAL_ADC_ConfigChannel+0x224>)
 800192c:	4032      	ands	r2, r6
 800192e:	430a      	orrs	r2, r1
 8001930:	4302      	orrs	r2, r0
 8001932:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001934:	2300      	movs	r3, #0
 8001936:	3554      	adds	r5, #84	; 0x54
 8001938:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800193a:	0020      	movs	r0, r4
 800193c:	b009      	add	sp, #36	; 0x24
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <HAL_ADC_ConfigChannel+0x234>)
 8001942:	4282      	cmp	r2, r0
 8001944:	d000      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x1ac>
 8001946:	e761      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
 8001948:	2080      	movs	r0, #128	; 0x80
 800194a:	03c0      	lsls	r0, r0, #15
 800194c:	e7e9      	b.n	8001922 <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800194e:	4660      	mov	r0, ip
 8001950:	4383      	bics	r3, r0
 8001952:	428b      	cmp	r3, r1
 8001954:	d105      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001956:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001958:	0351      	lsls	r1, r2, #13
 800195a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800195c:	0b49      	lsrs	r1, r1, #13
 800195e:	438b      	bics	r3, r1
 8001960:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001962:	2a00      	cmp	r2, #0
 8001964:	db00      	blt.n	8001968 <HAL_ADC_ConfigChannel+0x1cc>
 8001966:	e751      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_ADC_ConfigChannel+0x220>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	428a      	cmp	r2, r1
 8001970:	d108      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001972:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001974:	681c      	ldr	r4, [r3, #0]
 8001976:	0452      	lsls	r2, r2, #17
 8001978:	4911      	ldr	r1, [pc, #68]	; (80019c0 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800197a:	4002      	ands	r2, r0
 800197c:	4021      	ands	r1, r4
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e743      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001984:	4911      	ldr	r1, [pc, #68]	; (80019cc <HAL_ADC_ConfigChannel+0x230>)
 8001986:	428a      	cmp	r2, r1
 8001988:	d103      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800198a:	22c0      	movs	r2, #192	; 0xc0
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	0412      	lsls	r2, r2, #16
 8001990:	e7f2      	b.n	8001978 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001992:	490f      	ldr	r1, [pc, #60]	; (80019d0 <HAL_ADC_ConfigChannel+0x234>)
 8001994:	428a      	cmp	r2, r1
 8001996:	d000      	beq.n	800199a <HAL_ADC_ConfigChannel+0x1fe>
 8001998:	e738      	b.n	800180c <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 800199a:	22c0      	movs	r2, #192	; 0xc0
 800199c:	0452      	lsls	r2, r2, #17
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	4002      	ands	r2, r0
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <HAL_ADC_ConfigChannel+0x224>)
 80019a4:	4001      	ands	r1, r0
 80019a6:	e7ea      	b.n	800197e <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	2320      	movs	r3, #32
 80019aa:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80019ac:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ae:	4313      	orrs	r3, r2
 80019b0:	65ab      	str	r3, [r5, #88]	; 0x58
 80019b2:	e7bf      	b.n	8001934 <HAL_ADC_ConfigChannel+0x198>
 80019b4:	07ffff00 	.word	0x07ffff00
 80019b8:	40012708 	.word	0x40012708
 80019bc:	b0001000 	.word	0xb0001000
 80019c0:	fe3fffff 	.word	0xfe3fffff
 80019c4:	20000010 	.word	0x20000010
 80019c8:	00030d40 	.word	0x00030d40
 80019cc:	b8004000 	.word	0xb8004000
 80019d0:	b4002000 	.word	0xb4002000

080019d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d6:	2401      	movs	r4, #1
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019d8:	6802      	ldr	r2, [r0, #0]
{
 80019da:	0005      	movs	r5, r0
 80019dc:	6893      	ldr	r3, [r2, #8]
 80019de:	4223      	tst	r3, r4
 80019e0:	d00a      	beq.n	80019f8 <ADC_Enable+0x24>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019e2:	2000      	movs	r0, #0
}
 80019e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	2310      	movs	r3, #16
 80019e8:	6daa      	ldr	r2, [r5, #88]	; 0x58
      return HAL_ERROR;
 80019ea:	0020      	movs	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	4313      	orrs	r3, r2
 80019ee:	65ab      	str	r3, [r5, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80019f2:	4323      	orrs	r3, r4
 80019f4:	65eb      	str	r3, [r5, #92]	; 0x5c
      return HAL_ERROR;
 80019f6:	e7f5      	b.n	80019e4 <ADC_Enable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019f8:	6891      	ldr	r1, [r2, #8]
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <ADC_Enable+0x78>)
 80019fc:	4219      	tst	r1, r3
 80019fe:	d1f2      	bne.n	80019e6 <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8001a00:	6893      	ldr	r3, [r2, #8]
 8001a02:	4e13      	ldr	r6, [pc, #76]	; (8001a50 <ADC_Enable+0x7c>)
 8001a04:	4033      	ands	r3, r6
 8001a06:	4323      	orrs	r3, r4
 8001a08:	6093      	str	r3, [r2, #8]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a0a:	7e6b      	ldrb	r3, [r5, #25]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d0e8      	beq.n	80019e2 <ADC_Enable+0xe>
      tickstart = HAL_GetTick();
 8001a10:	f7ff fc60 	bl	80012d4 <HAL_GetTick>
 8001a14:	0007      	movs	r7, r0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a16:	682a      	ldr	r2, [r5, #0]
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	4223      	tst	r3, r4
 8001a1c:	d1e1      	bne.n	80019e2 <ADC_Enable+0xe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1e:	6893      	ldr	r3, [r2, #8]
 8001a20:	4223      	tst	r3, r4
 8001a22:	d00d      	beq.n	8001a40 <ADC_Enable+0x6c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a24:	f7ff fc56 	bl	80012d4 <HAL_GetTick>
 8001a28:	1bc0      	subs	r0, r0, r7
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d9f3      	bls.n	8001a16 <ADC_Enable+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001a34:	4313      	orrs	r3, r2
 8001a36:	65ab      	str	r3, [r5, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001a3a:	4303      	orrs	r3, r0
 8001a3c:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001a3e:	e7d1      	b.n	80019e4 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 8001a40:	6893      	ldr	r3, [r2, #8]
 8001a42:	4033      	ands	r3, r6
 8001a44:	4323      	orrs	r3, r4
 8001a46:	6093      	str	r3, [r2, #8]
 8001a48:	e7ec      	b.n	8001a24 <ADC_Enable+0x50>
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	80000017 	.word	0x80000017
 8001a50:	7fffffe8 	.word	0x7fffffe8

08001a54 <HAL_ADC_Start>:
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a58:	6800      	ldr	r0, [r0, #0]
 8001a5a:	f7ff fc53 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001a5e:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 8001a60:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a62:	2e00      	cmp	r6, #0
 8001a64:	d11d      	bne.n	8001aa2 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 8001a66:	0025      	movs	r5, r4
 8001a68:	3554      	adds	r5, #84	; 0x54
 8001a6a:	782b      	ldrb	r3, [r5, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d018      	beq.n	8001aa2 <HAL_ADC_Start+0x4e>
 8001a70:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001a72:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8001a74:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 8001a76:	f7ff ffad 	bl	80019d4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d112      	bne.n	8001aa4 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a80:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 8001a82:	490a      	ldr	r1, [pc, #40]	; (8001aac <HAL_ADC_Start+0x58>)
 8001a84:	401a      	ands	r2, r3
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a8c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a90:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
      __HAL_UNLOCK(hadc);
 8001a98:	7028      	strb	r0, [r5, #0]
 8001a9a:	4011      	ands	r1, r2
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
}
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8001aa4:	702e      	strb	r6, [r5, #0]
 8001aa6:	e7fc      	b.n	8001aa2 <HAL_ADC_Start+0x4e>
 8001aa8:	fffff0fe 	.word	0xfffff0fe
 8001aac:	7fffffe8 	.word	0x7fffffe8

08001ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADCEx_EndOfSamplingCallback>:
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001abc:	2800      	cmp	r0, #0
 8001abe:	db12      	blt.n	8001ae6 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac0:	0883      	lsrs	r3, r0, #2
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_NVIC_SetPriority+0x58>)
 8001ac4:	2403      	movs	r4, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	189b      	adds	r3, r3, r2
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	4020      	ands	r0, r4
 8001ace:	40a0      	lsls	r0, r4
 8001ad0:	0014      	movs	r4, r2
 8001ad2:	25c0      	movs	r5, #192	; 0xc0
 8001ad4:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ad6:	4011      	ands	r1, r2
 8001ad8:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ada:	00ad      	lsls	r5, r5, #2
 8001adc:	595e      	ldr	r6, [r3, r5]
 8001ade:	43a6      	bics	r6, r4
 8001ae0:	4331      	orrs	r1, r6
 8001ae2:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae6:	2403      	movs	r4, #3
 8001ae8:	230f      	movs	r3, #15
 8001aea:	b2c0      	uxtb	r0, r0
 8001aec:	4003      	ands	r3, r0
 8001aee:	4020      	ands	r0, r4
 8001af0:	40a0      	lsls	r0, r4
 8001af2:	34fc      	adds	r4, #252	; 0xfc
 8001af4:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001af6:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001afa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afc:	3b08      	subs	r3, #8
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <HAL_NVIC_SetPriority+0x5c>)
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	189b      	adds	r3, r3, r2
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	43aa      	bics	r2, r5
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	61d9      	str	r1, [r3, #28]
 8001b0e:	e7e9      	b.n	8001ae4 <HAL_NVIC_SetPriority+0x2c>
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	db05      	blt.n	8001b28 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1c:	231f      	movs	r3, #31
 8001b1e:	4018      	ands	r0, r3
 8001b20:	3b1e      	subs	r3, #30
 8001b22:	4083      	lsls	r3, r0
 8001b24:	4a01      	ldr	r2, [pc, #4]	; (8001b2c <HAL_NVIC_EnableIRQ+0x14>)
 8001b26:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b28:	4770      	bx	lr
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_SYSTICK_Config+0x28>)
 8001b32:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b34:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d80d      	bhi.n	8001b56 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b40:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b42:	6a03      	ldr	r3, [r0, #32]
 8001b44:	0609      	lsls	r1, r1, #24
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b50:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b52:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b54:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001b56:	4770      	bx	lr
 8001b58:	00ffffff 	.word	0x00ffffff
 8001b5c:	e000e010 	.word	0xe000e010
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b66:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001b68:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001b6a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b6c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d002      	beq.n	8001b78 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b72:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001b74:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001b76:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001b78:	251c      	movs	r5, #28
 8001b7a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b7c:	4e08      	ldr	r6, [pc, #32]	; (8001ba0 <DMA_SetConfig+0x3c>)
 8001b7e:	4025      	ands	r5, r4
 8001b80:	2401      	movs	r4, #1
 8001b82:	40ac      	lsls	r4, r5
 8001b84:	6877      	ldr	r7, [r6, #4]
 8001b86:	433c      	orrs	r4, r7
 8001b88:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8a:	6804      	ldr	r4, [r0, #0]
 8001b8c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b8e:	6883      	ldr	r3, [r0, #8]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d102      	bne.n	8001b9a <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b94:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b96:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8001b9a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b9c:	60e2      	str	r2, [r4, #12]
}
 8001b9e:	e7fb      	b.n	8001b98 <DMA_SetConfig+0x34>
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ba8:	7800      	ldrb	r0, [r0, #0]
 8001baa:	2114      	movs	r1, #20
 8001bac:	3808      	subs	r0, #8
 8001bae:	f7fe fabd 	bl	800012c <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	189b      	adds	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001bc0:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001bc2:	231c      	movs	r3, #28
 8001bc4:	4018      	ands	r0, r3
 8001bc6:	3b1b      	subs	r3, #27
 8001bc8:	4083      	lsls	r3, r0
 8001bca:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	10008200 	.word	0x10008200
 8001bd4:	40020880 	.word	0x40020880

08001bd8 <HAL_DMA_Init>:
{
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
  if (hdma == NULL)
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	d048      	beq.n	8001c74 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001be2:	6825      	ldr	r5, [r4, #0]
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_DMA_Init+0xa8>)
 8001be6:	2114      	movs	r1, #20
 8001be8:	18e8      	adds	r0, r5, r3
 8001bea:	f7fe fa9f 	bl	800012c <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bee:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bf0:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bf4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001bfc:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bfe:	4013      	ands	r3, r2
 8001c00:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	682a      	ldr	r2, [r5, #0]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c0a:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6961      	ldr	r1, [r4, #20]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	69a1      	ldr	r1, [r4, #24]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	69e1      	ldr	r1, [r4, #28]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6a21      	ldr	r1, [r4, #32]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c22:	f7ff ffbf 	bl	8001ba4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	68a2      	ldr	r2, [r4, #8]
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d101      	bne.n	8001c34 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c30:	2300      	movs	r3, #0
 8001c32:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c34:	6862      	ldr	r2, [r4, #4]
 8001c36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c38:	b2d3      	uxtb	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001c3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c40:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c42:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c44:	2a03      	cmp	r2, #3
 8001c46:	d816      	bhi.n	8001c76 <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c4c:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c4e:	2203      	movs	r2, #3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	3a02      	subs	r2, #2
 8001c56:	409a      	lsls	r2, r3
 8001c58:	65a2      	str	r2, [r4, #88]	; 0x58
 8001c5a:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c5c:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c5e:	0089      	lsls	r1, r1, #2
 8001c60:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c62:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c64:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c66:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001c6a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001c6e:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8001c70:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8001c72:	77e0      	strb	r0, [r4, #31]
}
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c7a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c7e:	e7f3      	b.n	8001c68 <HAL_DMA_Init+0x90>
 8001c80:	bffdfff8 	.word	0xbffdfff8
 8001c84:	ffff800f 	.word	0xffff800f
 8001c88:	1000823f 	.word	0x1000823f
 8001c8c:	40020940 	.word	0x40020940

08001c90 <HAL_DMA_Start_IT>:
{
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001c92:	1d46      	adds	r6, r0, #5
 8001c94:	7ff5      	ldrb	r5, [r6, #31]
{
 8001c96:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001c98:	2002      	movs	r0, #2
 8001c9a:	2d01      	cmp	r5, #1
 8001c9c:	d030      	beq.n	8001d00 <HAL_DMA_Start_IT+0x70>
 8001c9e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8001ca0:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8001ca2:	77f5      	strb	r5, [r6, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001ca4:	7ffd      	ldrb	r5, [r7, #31]
 8001ca6:	b2ed      	uxtb	r5, r5
 8001ca8:	2d01      	cmp	r5, #1
 8001caa:	d127      	bne.n	8001cfc <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cae:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	6827      	ldr	r7, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	43a8      	bics	r0, r5
 8001cb8:	6038      	str	r0, [r7, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f7ff ff52 	bl	8001b64 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001cc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d01c      	beq.n	8001d02 <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc8:	220e      	movs	r2, #14
 8001cca:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cd0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	03c9      	lsls	r1, r1, #15
 8001cd6:	d504      	bpl.n	8001ce2 <HAL_DMA_Start_IT+0x52>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	6810      	ldr	r0, [r2, #0]
 8001cdc:	0049      	lsls	r1, r1, #1
 8001cde:	4301      	orrs	r1, r0
 8001ce0:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001ce2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_DMA_Start_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	6810      	ldr	r0, [r2, #0]
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	4301      	orrs	r1, r0
 8001cf0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001cf2:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	77f3      	strb	r3, [r6, #31]
}
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d02:	2104      	movs	r1, #4
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	438a      	bics	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d0a:	6819      	ldr	r1, [r3, #0]
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	e7dd      	b.n	8001ccc <HAL_DMA_Start_IT+0x3c>

08001d10 <HAL_DMA_Abort_IT>:
{
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001d12:	2301      	movs	r3, #1
 8001d14:	1d41      	adds	r1, r0, #5
 8001d16:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d18:	1d84      	adds	r4, r0, #6
 8001d1a:	7fe2      	ldrb	r2, [r4, #31]
 8001d1c:	2a02      	cmp	r2, #2
 8001d1e:	d003      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d20:	2204      	movs	r2, #4
 8001d22:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	260e      	movs	r6, #14
 8001d2a:	6802      	ldr	r2, [r0, #0]
 8001d2c:	6815      	ldr	r5, [r2, #0]
 8001d2e:	43b5      	bics	r5, r6
 8001d30:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d32:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d34:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8001d36:	439d      	bics	r5, r3
 8001d38:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d3a:	6832      	ldr	r2, [r6, #0]
 8001d3c:	4d11      	ldr	r5, [pc, #68]	; (8001d84 <HAL_DMA_Abort_IT+0x74>)
 8001d3e:	402a      	ands	r2, r5
 8001d40:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001d42:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d44:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001d46:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001d48:	4e0f      	ldr	r6, [pc, #60]	; (8001d88 <HAL_DMA_Abort_IT+0x78>)
 8001d4a:	402a      	ands	r2, r5
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	6877      	ldr	r7, [r6, #4]
 8001d50:	433b      	orrs	r3, r7
 8001d52:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001d56:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001d58:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001d5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d60:	4665      	mov	r5, ip
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	402a      	ands	r2, r5
 8001d66:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d6a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001d6c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001d72:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8001d74:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001d76:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8001d7a:	42a2      	cmp	r2, r4
 8001d7c:	d0d2      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 8001d7e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	0023      	movs	r3, r4
 8001d82:	e7cf      	b.n	8001d24 <HAL_DMA_Abort_IT+0x14>
 8001d84:	fffffeff 	.word	0xfffffeff
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_DMA_IRQHandler>:
{
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d8e:	211c      	movs	r1, #28
 8001d90:	2704      	movs	r7, #4
 8001d92:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d96:	4021      	ands	r1, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8001d9c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001da2:	4234      	tst	r4, r6
 8001da4:	d00f      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x3a>
 8001da6:	423d      	tst	r5, r7
 8001da8:	d00d      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001daa:	6811      	ldr	r1, [r2, #0]
 8001dac:	0689      	lsls	r1, r1, #26
 8001dae:	d402      	bmi.n	8001db6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db0:	6811      	ldr	r1, [r2, #0]
 8001db2:	43b9      	bics	r1, r7
 8001db4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4314      	orrs	r4, r2
 8001dba:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001dbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8001dc2:	4798      	blx	r3
  return;
 8001dc4:	e019      	b.n	8001dfa <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dc6:	2702      	movs	r7, #2
 8001dc8:	003c      	movs	r4, r7
 8001dca:	408c      	lsls	r4, r1
 8001dcc:	4234      	tst	r4, r6
 8001dce:	d015      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x70>
 8001dd0:	423d      	tst	r5, r7
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd4:	6811      	ldr	r1, [r2, #0]
 8001dd6:	0689      	lsls	r1, r1, #26
 8001dd8:	d406      	bmi.n	8001de8 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dda:	250a      	movs	r5, #10
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	43a9      	bics	r1, r5
 8001de0:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001de2:	2101      	movs	r1, #1
 8001de4:	1d82      	adds	r2, r0, #6
 8001de6:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 8001dec:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001dee:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001df0:	1d43      	adds	r3, r0, #5
 8001df2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8001df4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d1e3      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x36>
}
 8001dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dfc:	2408      	movs	r4, #8
 8001dfe:	0027      	movs	r7, r4
 8001e00:	408f      	lsls	r7, r1
 8001e02:	423e      	tst	r6, r7
 8001e04:	d0f9      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x6e>
 8001e06:	4225      	tst	r5, r4
 8001e08:	d0f7      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e0a:	250e      	movs	r5, #14
 8001e0c:	6814      	ldr	r4, [r2, #0]
 8001e0e:	43ac      	bics	r4, r5
 8001e10:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8001e12:	2201      	movs	r2, #1
 8001e14:	0015      	movs	r5, r2
 8001e16:	408d      	lsls	r5, r1
 8001e18:	0029      	movs	r1, r5
 8001e1a:	685c      	ldr	r4, [r3, #4]
 8001e1c:	4321      	orrs	r1, r4
 8001e1e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001e20:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e22:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001e26:	2200      	movs	r2, #0
 8001e28:	1d43      	adds	r3, r0, #5
 8001e2a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001e2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e2e:	e7e2      	b.n	8001df6 <HAL_DMA_IRQHandler+0x6a>
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_DMA_GetState>:
  return hdma->State;
 8001e34:	3006      	adds	r0, #6
 8001e36:	7fc0      	ldrb	r0, [r0, #31]
 8001e38:	b2c0      	uxtb	r0, r0
}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3e:	680b      	ldr	r3, [r1, #0]
{
 8001e40:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001e44:	2300      	movs	r3, #0
{
 8001e46:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	9a02      	ldr	r2, [sp, #8]
 8001e4a:	40da      	lsrs	r2, r3
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8001e4e:	b005      	add	sp, #20
 8001e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	9203      	str	r2, [sp, #12]
 8001e58:	9903      	ldr	r1, [sp, #12]
 8001e5a:	9a02      	ldr	r2, [sp, #8]
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001e60:	d100      	bne.n	8001e64 <HAL_GPIO_Init+0x28>
 8001e62:	e085      	b.n	8001f70 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	9a01      	ldr	r2, [sp, #4]
 8001e66:	2110      	movs	r1, #16
 8001e68:	6852      	ldr	r2, [r2, #4]
 8001e6a:	0016      	movs	r6, r2
 8001e6c:	438e      	bics	r6, r1
 8001e6e:	2e02      	cmp	r6, #2
 8001e70:	d10e      	bne.n	8001e90 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e72:	2507      	movs	r5, #7
 8001e74:	401d      	ands	r5, r3
 8001e76:	00ad      	lsls	r5, r5, #2
 8001e78:	3901      	subs	r1, #1
 8001e7a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001e7c:	08dc      	lsrs	r4, r3, #3
 8001e7e:	00a4      	lsls	r4, r4, #2
 8001e80:	1904      	adds	r4, r0, r4
 8001e82:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e84:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e86:	9901      	ldr	r1, [sp, #4]
 8001e88:	6909      	ldr	r1, [r1, #16]
 8001e8a:	40a9      	lsls	r1, r5
 8001e8c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001e8e:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e90:	2403      	movs	r4, #3
 8001e92:	005f      	lsls	r7, r3, #1
 8001e94:	40bc      	lsls	r4, r7
 8001e96:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001e98:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9a:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e9c:	4025      	ands	r5, r4
 8001e9e:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	2503      	movs	r5, #3
 8001ea2:	4015      	ands	r5, r2
 8001ea4:	40bd      	lsls	r5, r7
 8001ea6:	4661      	mov	r1, ip
 8001ea8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001eaa:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eac:	2e01      	cmp	r6, #1
 8001eae:	d80f      	bhi.n	8001ed0 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001eb2:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb4:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eb6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb8:	40bd      	lsls	r5, r7
 8001eba:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001ebc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ebe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec0:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ec2:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec4:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	400d      	ands	r5, r1
 8001eca:	409d      	lsls	r5, r3
 8001ecc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001ece:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ed0:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed2:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ed4:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed6:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eda:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001edc:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ede:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001ee0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee2:	420a      	tst	r2, r1
 8001ee4:	d044      	beq.n	8001f70 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ee6:	2603      	movs	r6, #3
 8001ee8:	240f      	movs	r4, #15
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8001eec:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001eee:	401e      	ands	r6, r3
 8001ef0:	00ad      	lsls	r5, r5, #2
 8001ef2:	00f6      	lsls	r6, r6, #3
 8001ef4:	186d      	adds	r5, r5, r1
 8001ef6:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ef8:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001efa:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001efc:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001efe:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f00:	2400      	movs	r4, #0
 8001f02:	4288      	cmp	r0, r1
 8001f04:	d00c      	beq.n	8001f20 <HAL_GPIO_Init+0xe4>
 8001f06:	491c      	ldr	r1, [pc, #112]	; (8001f78 <HAL_GPIO_Init+0x13c>)
 8001f08:	3401      	adds	r4, #1
 8001f0a:	4288      	cmp	r0, r1
 8001f0c:	d008      	beq.n	8001f20 <HAL_GPIO_Init+0xe4>
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <HAL_GPIO_Init+0x140>)
 8001f10:	3401      	adds	r4, #1
 8001f12:	4288      	cmp	r0, r1
 8001f14:	d004      	beq.n	8001f20 <HAL_GPIO_Init+0xe4>
 8001f16:	491a      	ldr	r1, [pc, #104]	; (8001f80 <HAL_GPIO_Init+0x144>)
 8001f18:	3403      	adds	r4, #3
 8001f1a:	4288      	cmp	r0, r1
 8001f1c:	d100      	bne.n	8001f20 <HAL_GPIO_Init+0xe4>
 8001f1e:	3c02      	subs	r4, #2
 8001f20:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001f22:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f24:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001f26:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8001f28:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8001f2a:	4c16      	ldr	r4, [pc, #88]	; (8001f84 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8001f2c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8001f2e:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001f30:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f32:	03d1      	lsls	r1, r2, #15
 8001f34:	d401      	bmi.n	8001f3a <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8001f36:	003e      	movs	r6, r7
 8001f38:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8001f3a:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001f3c:	4e12      	ldr	r6, [pc, #72]	; (8001f88 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8001f3e:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8001f40:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8001f42:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	0391      	lsls	r1, r2, #14
 8001f46:	d401      	bmi.n	8001f4c <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001f48:	402c      	ands	r4, r5
 8001f4a:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8001f4c:	4c09      	ldr	r4, [pc, #36]	; (8001f74 <HAL_GPIO_Init+0x138>)
 8001f4e:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001f50:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001f52:	9e00      	ldr	r6, [sp, #0]
 8001f54:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f56:	02d1      	lsls	r1, r2, #11
 8001f58:	d401      	bmi.n	8001f5e <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8001f5a:	003e      	movs	r6, r7
 8001f5c:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8001f5e:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8001f60:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001f62:	9f00      	ldr	r7, [sp, #0]
 8001f64:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f66:	0292      	lsls	r2, r2, #10
 8001f68:	d401      	bmi.n	8001f6e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8001f6a:	402e      	ands	r6, r5
 8001f6c:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8001f6e:	6067      	str	r7, [r4, #4]
    position++;
 8001f70:	3301      	adds	r3, #1
 8001f72:	e769      	b.n	8001e48 <HAL_GPIO_Init+0xc>
 8001f74:	40021800 	.word	0x40021800
 8001f78:	50000400 	.word	0x50000400
 8001f7c:	50000800 	.word	0x50000800
 8001f80:	50000c00 	.word	0x50000c00
 8001f84:	40021804 	.word	0x40021804
 8001f88:	40021808 	.word	0x40021808

08001f8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f8c:	6900      	ldr	r0, [r0, #16]
 8001f8e:	4008      	ands	r0, r1
 8001f90:	1e41      	subs	r1, r0, #1
 8001f92:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001f94:	b2c0      	uxtb	r0, r0
}
 8001f96:	4770      	bx	lr

08001f98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f9c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fa0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001fa2:	e7fc      	b.n	8001f9e <HAL_GPIO_WritePin+0x6>

08001fa4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	0792      	lsls	r2, r2, #30
 8001faa:	d501      	bpl.n	8001fb0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	6999      	ldr	r1, [r3, #24]
 8001fb4:	4211      	tst	r1, r2
 8001fb6:	d102      	bne.n	8001fbe <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb8:	6999      	ldr	r1, [r3, #24]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	619a      	str	r2, [r3, #24]
  }
}
 8001fbe:	4770      	bx	lr

08001fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001fc4:	0589      	lsls	r1, r1, #22
 8001fc6:	4333      	orrs	r3, r6
 8001fc8:	0d89      	lsrs	r1, r1, #22
 8001fca:	4319      	orrs	r1, r3
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	6804      	ldr	r4, [r0, #0]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	0d70      	lsrs	r0, r6, #21
 8001fd4:	4018      	ands	r0, r3
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <I2C_TransferConfig+0x28>)
 8001fd8:	6865      	ldr	r5, [r4, #4]
 8001fda:	0412      	lsls	r2, r2, #16
 8001fdc:	4318      	orrs	r0, r3
 8001fde:	4385      	bics	r5, r0
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	4329      	orrs	r1, r5
 8001fe4:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	03ff63ff 	.word	0x03ff63ff

08001fec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001fec:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001fee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ff0:	4c16      	ldr	r4, [pc, #88]	; (800204c <I2C_Enable_IRQ+0x60>)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	d002      	beq.n	8001ffe <I2C_Enable_IRQ+0x12>
 8001ff8:	4c15      	ldr	r4, [pc, #84]	; (8002050 <I2C_Enable_IRQ+0x64>)
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	d114      	bne.n	8002028 <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 8001ffe:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002000:	4211      	tst	r1, r2
 8002002:	d000      	beq.n	8002006 <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002004:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002006:	2211      	movs	r2, #17
 8002008:	400a      	ands	r2, r1
 800200a:	2a11      	cmp	r2, #17
 800200c:	d101      	bne.n	8002012 <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800200e:	327f      	adds	r2, #127	; 0x7f
 8002010:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002012:	2212      	movs	r2, #18
 8002014:	4011      	ands	r1, r2
 8002016:	4291      	cmp	r1, r2
 8002018:	d101      	bne.n	800201e <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800201a:	324e      	adds	r2, #78	; 0x4e
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800201c:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800201e:	6802      	ldr	r2, [r0, #0]
 8002020:	6811      	ldr	r1, [r2, #0]
 8002022:	430b      	orrs	r3, r1
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 8002028:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800202a:	4211      	tst	r1, r2
 800202c:	d000      	beq.n	8002030 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800202e:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002030:	07ca      	lsls	r2, r1, #31
 8002032:	d501      	bpl.n	8002038 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002034:	22f2      	movs	r2, #242	; 0xf2
 8002036:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002038:	078a      	lsls	r2, r1, #30
 800203a:	d501      	bpl.n	8002040 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800203c:	22f4      	movs	r2, #244	; 0xf4
 800203e:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002040:	2212      	movs	r2, #18
 8002042:	4011      	ands	r1, r2
 8002044:	4291      	cmp	r1, r2
 8002046:	d1ea      	bne.n	800201e <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 8002048:	320e      	adds	r2, #14
 800204a:	e7e7      	b.n	800201c <I2C_Enable_IRQ+0x30>
 800204c:	08002a79 	.word	0x08002a79
 8002050:	08002999 	.word	0x08002999

08002054 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002054:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8002056:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002058:	07ca      	lsls	r2, r1, #31
 800205a:	d508      	bpl.n	800206e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800205c:	0003      	movs	r3, r0
 800205e:	3341      	adds	r3, #65	; 0x41
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	2328      	movs	r3, #40	; 0x28
 8002064:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002066:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002068:	2a28      	cmp	r2, #40	; 0x28
 800206a:	d000      	beq.n	800206e <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800206c:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800206e:	078a      	lsls	r2, r1, #30
 8002070:	d508      	bpl.n	8002084 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002072:	0002      	movs	r2, r0
 8002074:	2428      	movs	r4, #40	; 0x28
 8002076:	3241      	adds	r2, #65	; 0x41
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	4022      	ands	r2, r4
 800207c:	42a2      	cmp	r2, r4
 800207e:	d116      	bne.n	80020ae <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002080:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002082:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002084:	074a      	lsls	r2, r1, #29
 8002086:	d501      	bpl.n	800208c <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002088:	22b8      	movs	r2, #184	; 0xb8
 800208a:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800208c:	2211      	movs	r2, #17
 800208e:	400a      	ands	r2, r1
 8002090:	2a11      	cmp	r2, #17
 8002092:	d101      	bne.n	8002098 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002094:	327f      	adds	r2, #127	; 0x7f
 8002096:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002098:	2212      	movs	r2, #18
 800209a:	4011      	ands	r1, r2
 800209c:	4291      	cmp	r1, r2
 800209e:	d101      	bne.n	80020a4 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80020a0:	324e      	adds	r2, #78	; 0x4e
 80020a2:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020a4:	6801      	ldr	r1, [r0, #0]
 80020a6:	680a      	ldr	r2, [r1, #0]
 80020a8:	439a      	bics	r2, r3
 80020aa:	600a      	str	r2, [r1, #0]
}
 80020ac:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020ae:	22f4      	movs	r2, #244	; 0xf4
 80020b0:	e7e7      	b.n	8002082 <I2C_Disable_IRQ+0x2e>

080020b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80020b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b4:	0004      	movs	r4, r0
 80020b6:	000e      	movs	r6, r1
 80020b8:	0017      	movs	r7, r2
 80020ba:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	6993      	ldr	r3, [r2, #24]
 80020c0:	4033      	ands	r3, r6
 80020c2:	1b9b      	subs	r3, r3, r6
 80020c4:	4259      	negs	r1, r3
 80020c6:	414b      	adcs	r3, r1
 80020c8:	42bb      	cmp	r3, r7
 80020ca:	d001      	beq.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80020cc:	2000      	movs	r0, #0
 80020ce:	e017      	b.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80020d0:	1c6b      	adds	r3, r5, #1
 80020d2:	d0f4      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7ff f8fe 	bl	80012d4 <HAL_GetTick>
 80020d8:	9b06      	ldr	r3, [sp, #24]
 80020da:	1ac0      	subs	r0, r0, r3
 80020dc:	4285      	cmp	r5, r0
 80020de:	d301      	bcc.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x32>
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	d1eb      	bne.n	80020bc <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e4:	2220      	movs	r2, #32
 80020e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80020e8:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	4313      	orrs	r3, r2
 80020ec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	0023      	movs	r3, r4
 80020f0:	3341      	adds	r3, #65	; 0x41
 80020f2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	0022      	movs	r2, r4
 80020f6:	2300      	movs	r3, #0
 80020f8:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80020fa:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80020fe:	7023      	strb	r3, [r4, #0]
}
 8002100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002104 <I2C_IsAcknowledgeFailed>:
{
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002106:	6803      	ldr	r3, [r0, #0]
{
 8002108:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800210a:	6998      	ldr	r0, [r3, #24]
 800210c:	2310      	movs	r3, #16
{
 800210e:	000e      	movs	r6, r1
 8002110:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002112:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002116:	2800      	cmp	r0, #0
 8002118:	d118      	bne.n	800214c <I2C_IsAcknowledgeFailed+0x48>
}
 800211a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 800211c:	1c72      	adds	r2, r6, #1
 800211e:	d016      	beq.n	800214e <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002120:	f7ff f8d8 	bl	80012d4 <HAL_GetTick>
 8002124:	1bc0      	subs	r0, r0, r7
 8002126:	4286      	cmp	r6, r0
 8002128:	d301      	bcc.n	800212e <I2C_IsAcknowledgeFailed+0x2a>
 800212a:	2e00      	cmp	r6, #0
 800212c:	d10e      	bne.n	800214c <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	2220      	movs	r2, #32
 8002130:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002132:	4313      	orrs	r3, r2
 8002134:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002136:	0023      	movs	r3, r4
 8002138:	3341      	adds	r3, #65	; 0x41
 800213a:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	0022      	movs	r2, r4
 800213e:	2300      	movs	r3, #0
 8002140:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002142:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8002148:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800214a:	e7e6      	b.n	800211a <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	422a      	tst	r2, r5
 8002152:	d0e3      	beq.n	800211c <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002154:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8002156:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002158:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800215c:	f7ff ff22 	bl	8001fa4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	4906      	ldr	r1, [pc, #24]	; (800217c <I2C_IsAcknowledgeFailed+0x78>)
 8002164:	6853      	ldr	r3, [r2, #4]
 8002166:	400b      	ands	r3, r1
 8002168:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800216a:	2304      	movs	r3, #4
 800216c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800216e:	4313      	orrs	r3, r2
 8002170:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	0023      	movs	r3, r4
 8002174:	3341      	adds	r3, #65	; 0x41
 8002176:	701d      	strb	r5, [r3, #0]
 8002178:	e7e0      	b.n	800213c <I2C_IsAcknowledgeFailed+0x38>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	fe00e800 	.word	0xfe00e800

08002180 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	0004      	movs	r4, r0
 8002184:	000d      	movs	r5, r1
 8002186:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002188:	2702      	movs	r7, #2
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	423b      	tst	r3, r7
 8002190:	d001      	beq.n	8002196 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002192:	2000      	movs	r0, #0
}
 8002194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	0032      	movs	r2, r6
 8002198:	0029      	movs	r1, r5
 800219a:	0020      	movs	r0, r4
 800219c:	f7ff ffb2 	bl	8002104 <I2C_IsAcknowledgeFailed>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d115      	bne.n	80021d0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	1c6b      	adds	r3, r5, #1
 80021a6:	d0f0      	beq.n	800218a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7ff f894 	bl	80012d4 <HAL_GetTick>
 80021ac:	1b80      	subs	r0, r0, r6
 80021ae:	4285      	cmp	r5, r0
 80021b0:	d301      	bcc.n	80021b6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d1e9      	bne.n	800218a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b6:	2220      	movs	r2, #32
 80021b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021ba:	4313      	orrs	r3, r2
 80021bc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021be:	0023      	movs	r3, r4
 80021c0:	3341      	adds	r3, #65	; 0x41
 80021c2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	0022      	movs	r2, r4
 80021c6:	2300      	movs	r3, #0
 80021c8:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80021ca:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80021ce:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e7df      	b.n	8002194 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080021d4 <I2C_RequestMemoryWrite>:
{
 80021d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021d6:	0014      	movs	r4, r2
 80021d8:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <I2C_RequestMemoryWrite+0x60>)
{
 80021de:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	045b      	lsls	r3, r3, #17
 80021e6:	f7ff feeb 	bl	8001fc0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	9a07      	ldr	r2, [sp, #28]
 80021ec:	9906      	ldr	r1, [sp, #24]
 80021ee:	0028      	movs	r0, r5
 80021f0:	f7ff ffc6 	bl	8002180 <I2C_WaitOnTXISFlagUntilTimeout>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d001      	beq.n	80021fc <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80021fc:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fe:	2e01      	cmp	r6, #1
 8002200:	d10d      	bne.n	800221e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002202:	b2e4      	uxtb	r4, r4
 8002204:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002206:	9b07      	ldr	r3, [sp, #28]
 8002208:	2200      	movs	r2, #0
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	9b06      	ldr	r3, [sp, #24]
 8002210:	0028      	movs	r0, r5
 8002212:	f7ff ff4e 	bl	80020b2 <I2C_WaitOnFlagUntilTimeout>
 8002216:	1e43      	subs	r3, r0, #1
 8002218:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800221a:	b2c0      	uxtb	r0, r0
 800221c:	e7ed      	b.n	80021fa <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800221e:	0a22      	lsrs	r2, r4, #8
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	9906      	ldr	r1, [sp, #24]
 8002224:	9a07      	ldr	r2, [sp, #28]
 8002226:	0028      	movs	r0, r5
 8002228:	f7ff ffaa 	bl	8002180 <I2C_WaitOnTXISFlagUntilTimeout>
 800222c:	2800      	cmp	r0, #0
 800222e:	d1e3      	bne.n	80021f8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	e7e6      	b.n	8002202 <I2C_RequestMemoryWrite+0x2e>
 8002234:	80002000 	.word	0x80002000

08002238 <HAL_I2C_Init>:
{
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800223e:	2c00      	cmp	r4, #0
 8002240:	d03f      	beq.n	80022c2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	0025      	movs	r5, r4
 8002244:	3541      	adds	r5, #65	; 0x41
 8002246:	782b      	ldrb	r3, [r5, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	0022      	movs	r2, r4
 8002250:	3240      	adds	r2, #64	; 0x40
 8002252:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8002254:	0020      	movs	r0, r4
 8002256:	f002 fb8d 	bl	8004974 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800225a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800225c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800225e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002260:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002262:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68a6      	ldr	r6, [r4, #8]
 8002268:	438a      	bics	r2, r1
 800226a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800226c:	6861      	ldr	r1, [r4, #4]
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_I2C_Init+0xa0>)
 8002270:	400a      	ands	r2, r1
 8002272:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_I2C_Init+0xa4>)
 8002278:	4011      	ands	r1, r2
 800227a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227c:	2801      	cmp	r0, #1
 800227e:	d121      	bne.n	80022c4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0209      	lsls	r1, r1, #8
 8002284:	4331      	orrs	r1, r6
 8002286:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002288:	6858      	ldr	r0, [r3, #4]
 800228a:	4915      	ldr	r1, [pc, #84]	; (80022e0 <HAL_I2C_Init+0xa8>)
 800228c:	4301      	orrs	r1, r0
 800228e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002290:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002294:	400a      	ands	r2, r1
 8002296:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002298:	6961      	ldr	r1, [r4, #20]
 800229a:	6922      	ldr	r2, [r4, #16]
 800229c:	430a      	orrs	r2, r1
 800229e:	69a1      	ldr	r1, [r4, #24]
 80022a0:	0209      	lsls	r1, r1, #8
 80022a2:	430a      	orrs	r2, r1
 80022a4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a6:	6a21      	ldr	r1, [r4, #32]
 80022a8:	69e2      	ldr	r2, [r4, #28]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80022ae:	2201      	movs	r2, #1
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	3442      	adds	r4, #66	; 0x42
 80022c0:	7020      	strb	r0, [r4, #0]
}
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022c4:	2184      	movs	r1, #132	; 0x84
 80022c6:	0209      	lsls	r1, r1, #8
 80022c8:	4331      	orrs	r1, r6
 80022ca:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022cc:	2802      	cmp	r0, #2
 80022ce:	d1db      	bne.n	8002288 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0109      	lsls	r1, r1, #4
 80022d4:	6059      	str	r1, [r3, #4]
 80022d6:	e7d7      	b.n	8002288 <HAL_I2C_Init+0x50>
 80022d8:	f0ffffff 	.word	0xf0ffffff
 80022dc:	ffff7fff 	.word	0xffff7fff
 80022e0:	02008000 	.word	0x02008000

080022e4 <HAL_I2C_Mem_Write_DMA>:
{
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e6:	0007      	movs	r7, r0
{
 80022e8:	b089      	sub	sp, #36	; 0x24
 80022ea:	9307      	str	r3, [sp, #28]
 80022ec:	ab0e      	add	r3, sp, #56	; 0x38
 80022ee:	9206      	str	r2, [sp, #24]
 80022f0:	cb04      	ldmia	r3!, {r2}
 80022f2:	9105      	str	r1, [sp, #20]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	9202      	str	r2, [sp, #8]
 80022f8:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	3741      	adds	r7, #65	; 0x41
 80022fc:	783b      	ldrb	r3, [r7, #0]
{
 80022fe:	0004      	movs	r4, r0
    return HAL_BUSY;
 8002300:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	2b20      	cmp	r3, #32
 8002304:	d171      	bne.n	80023ea <HAL_I2C_Mem_Write_DMA+0x106>
    if ((pData == NULL) || (Size == 0U))
 8002306:	2a00      	cmp	r2, #0
 8002308:	d002      	beq.n	8002310 <HAL_I2C_Mem_Write_DMA+0x2c>
 800230a:	9b04      	ldr	r3, [sp, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_I2C_Mem_Write_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002316:	2501      	movs	r5, #1
 8002318:	e067      	b.n	80023ea <HAL_I2C_Mem_Write_DMA+0x106>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800231a:	6803      	ldr	r3, [r0, #0]
 800231c:	699e      	ldr	r6, [r3, #24]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	401e      	ands	r6, r3
 8002324:	d161      	bne.n	80023ea <HAL_I2C_Mem_Write_DMA+0x106>
    __HAL_LOCK(hi2c);
 8002326:	0003      	movs	r3, r0
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	2a01      	cmp	r2, #1
 800232e:	d05c      	beq.n	80023ea <HAL_I2C_Mem_Write_DMA+0x106>
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002334:	f7fe ffce 	bl	80012d4 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002338:	2321      	movs	r3, #33	; 0x21
 800233a:	703b      	strb	r3, [r7, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800233c:	0023      	movs	r3, r4
 800233e:	3342      	adds	r3, #66	; 0x42
 8002340:	9303      	str	r3, [sp, #12]
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	9a03      	ldr	r2, [sp, #12]
 8002346:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 8002348:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234a:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800234c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234e:	466b      	mov	r3, sp
 8002350:	8a1b      	ldrh	r3, [r3, #16]
 8002352:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_I2C_Mem_Write_DMA+0x13c>)
 8002356:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_I2C_Mem_Write_DMA+0x140>)
 800235a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800235c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800235e:	2bff      	cmp	r3, #255	; 0xff
 8002360:	d915      	bls.n	800238e <HAL_I2C_Mem_Write_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002362:	23ff      	movs	r3, #255	; 0xff
 8002364:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 800236a:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800236c:	2319      	movs	r3, #25
 800236e:	9001      	str	r0, [sp, #4]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	9a06      	ldr	r2, [sp, #24]
 8002374:	9b07      	ldr	r3, [sp, #28]
 8002376:	9905      	ldr	r1, [sp, #20]
 8002378:	0020      	movs	r0, r4
 800237a:	f7ff ff2b 	bl	80021d4 <I2C_RequestMemoryWrite>
 800237e:	0027      	movs	r7, r4
 8002380:	0006      	movs	r6, r0
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	2800      	cmp	r0, #0
 8002386:	d007      	beq.n	8002398 <HAL_I2C_Mem_Write_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 8002388:	2300      	movs	r3, #0
 800238a:	703b      	strb	r3, [r7, #0]
 800238c:	e7c3      	b.n	8002316 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800238e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002390:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	049b      	lsls	r3, r3, #18
 8002396:	e7e8      	b.n	800236a <HAL_I2C_Mem_Write_DMA+0x86>
    if (hi2c->hdmatx != NULL)
 8002398:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800239a:	2800      	cmp	r0, #0
 800239c:	d028      	beq.n	80023f0 <HAL_I2C_Mem_Write_DMA+0x10c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_I2C_Mem_Write_DMA+0x144>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80023a0:	6822      	ldr	r2, [r4, #0]
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80023a2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_I2C_Mem_Write_DMA+0x148>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80023a6:	6306      	str	r6, [r0, #48]	; 0x30
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80023a8:	6343      	str	r3, [r0, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = NULL;
 80023aa:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80023ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023ae:	3228      	adds	r2, #40	; 0x28
 80023b0:	9902      	ldr	r1, [sp, #8]
 80023b2:	f7ff fc6d 	bl	8001c90 <HAL_DMA_Start_IT>
 80023b6:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 80023b8:	d126      	bne.n	8002408 <HAL_I2C_Mem_Write_DMA+0x124>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80023ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80023bc:	9000      	str	r0, [sp, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	9b04      	ldr	r3, [sp, #16]
 80023c2:	9905      	ldr	r1, [sp, #20]
 80023c4:	0020      	movs	r0, r4
 80023c6:	f7ff fdfb 	bl	8001fc0 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80023ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023ce:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023d6:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 80023d8:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023da:	f7ff fe07 	bl	8001fec <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	01db      	lsls	r3, r3, #7
 80023e4:	6811      	ldr	r1, [r2, #0]
 80023e6:	430b      	orrs	r3, r1
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	0028      	movs	r0, r5
 80023ec:	b009      	add	sp, #36	; 0x24
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 80023f0:	0023      	movs	r3, r4
 80023f2:	2220      	movs	r2, #32
 80023f4:	3341      	adds	r3, #65	; 0x41
 80023f6:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023f8:	9b03      	ldr	r3, [sp, #12]
 80023fa:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002400:	4313      	orrs	r3, r2
 8002402:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002404:	7038      	strb	r0, [r7, #0]
 8002406:	e786      	b.n	8002316 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002408:	0023      	movs	r3, r4
 800240a:	2220      	movs	r2, #32
 800240c:	3341      	adds	r3, #65	; 0x41
 800240e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002410:	9b03      	ldr	r3, [sp, #12]
 8002412:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002414:	2310      	movs	r3, #16
 8002416:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002418:	4313      	orrs	r3, r2
 800241a:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800241c:	703e      	strb	r6, [r7, #0]
 800241e:	e77a      	b.n	8002316 <HAL_I2C_Mem_Write_DMA+0x32>
 8002420:	ffff0000 	.word	0xffff0000
 8002424:	08002a79 	.word	0x08002a79
 8002428:	08002ba1 	.word	0x08002ba1
 800242c:	08002b89 	.word	0x08002b89

08002430 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002430:	6803      	ldr	r3, [r0, #0]
{
 8002432:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002434:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002436:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002438:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d000      	beq.n	8002440 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800243e:	4798      	blx	r3
}
 8002440:	bd10      	pop	{r4, pc}

08002442 <HAL_I2C_MasterTxCpltCallback>:
 8002442:	4770      	bx	lr

08002444 <HAL_I2C_MasterRxCpltCallback>:
 8002444:	4770      	bx	lr

08002446 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	0003      	movs	r3, r0
{
 8002448:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800244a:	2500      	movs	r5, #0
 800244c:	2220      	movs	r2, #32
 800244e:	0006      	movs	r6, r0
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002454:	3b01      	subs	r3, #1
 8002456:	7819      	ldrb	r1, [r3, #0]
{
 8002458:	0004      	movs	r4, r0
 800245a:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 800245c:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800245e:	2921      	cmp	r1, #33	; 0x21
 8002460:	d10a      	bne.n	8002478 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002462:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8002464:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002466:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002468:	3920      	subs	r1, #32
 800246a:	f7ff fdf3 	bl	8002054 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800246e:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002470:	0020      	movs	r0, r4
 8002472:	f7ff ffe6 	bl	8002442 <HAL_I2C_MasterTxCpltCallback>
}
 8002476:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002478:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 800247a:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800247c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800247e:	2102      	movs	r1, #2
 8002480:	f7ff fde8 	bl	8002054 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002484:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002486:	0020      	movs	r0, r4
 8002488:	f7ff ffdc 	bl	8002444 <HAL_I2C_MasterRxCpltCallback>
}
 800248c:	e7f3      	b.n	8002476 <I2C_ITMasterSeqCplt+0x30>

0800248e <HAL_I2C_SlaveTxCpltCallback>:
 800248e:	4770      	bx	lr

08002490 <HAL_I2C_SlaveRxCpltCallback>:
 8002490:	4770      	bx	lr

08002492 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	0003      	movs	r3, r0
{
 8002494:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	2500      	movs	r5, #0
 8002498:	3342      	adds	r3, #66	; 0x42
 800249a:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800249c:	3b01      	subs	r3, #1
 800249e:	781a      	ldrb	r2, [r3, #0]
{
 80024a0:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024a2:	2a29      	cmp	r2, #41	; 0x29
 80024a4:	d10d      	bne.n	80024c2 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024a6:	3a01      	subs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024aa:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024ac:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024ae:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024b0:	f7ff fdd0 	bl	8002054 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024b4:	0023      	movs	r3, r4
 80024b6:	3340      	adds	r3, #64	; 0x40
 80024b8:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024ba:	0020      	movs	r0, r4
 80024bc:	f7ff ffe7 	bl	800248e <HAL_I2C_SlaveTxCpltCallback>
}
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	2a2a      	cmp	r2, #42	; 0x2a
 80024c6:	d1fb      	bne.n	80024c0 <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024c8:	3a02      	subs	r2, #2
 80024ca:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024cc:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024ce:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024d0:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024d2:	f7ff fdbf 	bl	8002054 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024d6:	0023      	movs	r3, r4
 80024d8:	3340      	adds	r3, #64	; 0x40
 80024da:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024dc:	0020      	movs	r0, r4
 80024de:	f7ff ffd7 	bl	8002490 <HAL_I2C_SlaveRxCpltCallback>
}
 80024e2:	e7ed      	b.n	80024c0 <I2C_ITSlaveSeqCplt+0x2e>

080024e4 <HAL_I2C_AddrCallback>:
}
 80024e4:	4770      	bx	lr

080024e6 <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024e6:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80024e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ea:	3341      	adds	r3, #65	; 0x41
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80024f0:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024f2:	401a      	ands	r2, r3
 80024f4:	6803      	ldr	r3, [r0, #0]
 80024f6:	2a28      	cmp	r2, #40	; 0x28
 80024f8:	d137      	bne.n	800256a <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80024fa:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80024fc:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80024fe:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002500:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002502:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002504:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002506:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002508:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800250a:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 800250c:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800250e:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002510:	2902      	cmp	r1, #2
 8002512:	d121      	bne.n	8002558 <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002514:	0592      	lsls	r2, r2, #22
 8002516:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002518:	09d1      	lsrs	r1, r2, #7
 800251a:	404e      	eors	r6, r1
 800251c:	2106      	movs	r1, #6
 800251e:	400e      	ands	r6, r1
 8002520:	d110      	bne.n	8002544 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 8002522:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002524:	3101      	adds	r1, #1
 8002526:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002528:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800252a:	2902      	cmp	r1, #2
 800252c:	d109      	bne.n	8002542 <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800252e:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 8002530:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002532:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002534:	0003      	movs	r3, r0
 8002536:	3340      	adds	r3, #64	; 0x40
 8002538:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800253a:	0029      	movs	r1, r5
 800253c:	0020      	movs	r0, r4
 800253e:	f7ff ffd1 	bl	80024e4 <HAL_I2C_AddrCallback>
}
 8002542:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002544:	2104      	movs	r1, #4
 8002546:	f7ff fd85 	bl	8002054 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800254a:	0023      	movs	r3, r4
 800254c:	2200      	movs	r2, #0
 800254e:	3340      	adds	r3, #64	; 0x40
 8002550:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002552:	9a01      	ldr	r2, [sp, #4]
 8002554:	403a      	ands	r2, r7
 8002556:	e7f0      	b.n	800253a <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002558:	2104      	movs	r1, #4
 800255a:	f7ff fd7b 	bl	8002054 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800255e:	0023      	movs	r3, r4
 8002560:	2200      	movs	r2, #0
 8002562:	3340      	adds	r3, #64	; 0x40
 8002564:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002566:	0032      	movs	r2, r6
 8002568:	e7e7      	b.n	800253a <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800256a:	2208      	movs	r2, #8
 800256c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800256e:	2300      	movs	r3, #0
 8002570:	3440      	adds	r4, #64	; 0x40
 8002572:	7023      	strb	r3, [r4, #0]
 8002574:	e7e5      	b.n	8002542 <I2C_ITAddrCplt.isra.8+0x5c>

08002576 <HAL_I2C_ListenCpltCallback>:
 8002576:	4770      	bx	lr

08002578 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <I2C_ITListenCplt+0x64>)
{
 800257a:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800257e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002580:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	6303      	str	r3, [r0, #48]	; 0x30
{
 8002584:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	2020      	movs	r0, #32
 8002588:	3241      	adds	r2, #65	; 0x41
 800258a:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800258e:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8002590:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002592:	4211      	tst	r1, r2
 8002594:	d012      	beq.n	80025bc <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800259e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80025a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80025aa:	3b01      	subs	r3, #1
 80025ac:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80025ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b8:	431a      	orrs	r2, r3
 80025ba:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025bc:	2107      	movs	r1, #7
 80025be:	0020      	movs	r0, r4
 80025c0:	f7ff fd48 	bl	8002054 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	2210      	movs	r2, #16
 80025c6:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80025c8:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ca:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80025cc:	0023      	movs	r3, r4
 80025ce:	2200      	movs	r2, #0
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80025d4:	f7ff ffcf 	bl	8002576 <HAL_I2C_ListenCpltCallback>
}
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffff0000 	.word	0xffff0000

080025e0 <HAL_I2C_MemRxCpltCallback>:
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2C_ErrorCallback>:
 80025e2:	4770      	bx	lr

080025e4 <HAL_I2C_AbortCpltCallback>:
}
 80025e4:	4770      	bx	lr
	...

080025e8 <I2C_ITError>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ea:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025ec:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ee:	2600      	movs	r6, #0
 80025f0:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025f2:	3541      	adds	r5, #65	; 0x41
 80025f4:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025f6:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80025fa:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80025fe:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002600:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8002602:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002604:	4311      	orrs	r1, r2
 8002606:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002608:	2b02      	cmp	r3, #2
 800260a:	d822      	bhi.n	8002652 <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800260c:	2103      	movs	r1, #3
 800260e:	f7ff fd21 	bl	8002054 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002612:	2328      	movs	r3, #40	; 0x28
 8002614:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002618:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800261a:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 800261c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	01d2      	lsls	r2, r2, #7
 8002622:	6819      	ldr	r1, [r3, #0]
 8002624:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002626:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002628:	d01e      	beq.n	8002668 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800262a:	4925      	ldr	r1, [pc, #148]	; (80026c0 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 800262c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002632:	2800      	cmp	r0, #0
 8002634:	d00c      	beq.n	8002650 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 8002638:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800263a:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800263c:	0023      	movs	r3, r4
 800263e:	3340      	adds	r3, #64	; 0x40
 8002640:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002642:	f7ff fb65 	bl	8001d10 <HAL_DMA_Abort_IT>
 8002646:	2800      	cmp	r0, #0
 8002648:	d002      	beq.n	8002650 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800264a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800264c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800264e:	4798      	blx	r3
}
 8002650:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002652:	2107      	movs	r1, #7
 8002654:	f7ff fcfe 	bl	8002054 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002658:	782b      	ldrb	r3, [r5, #0]
 800265a:	2b60      	cmp	r3, #96	; 0x60
 800265c:	d001      	beq.n	8002662 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800265e:	2320      	movs	r3, #32
 8002660:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	6323      	str	r3, [r4, #48]	; 0x30
 8002666:	e7d8      	b.n	800261a <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002668:	2080      	movs	r0, #128	; 0x80
 800266a:	0200      	lsls	r0, r0, #8
 800266c:	4002      	ands	r2, r0
 800266e:	d011      	beq.n	8002694 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4815      	ldr	r0, [pc, #84]	; (80026c8 <I2C_ITError+0xe0>)
 8002674:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8002676:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002678:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800267a:	2800      	cmp	r0, #0
 800267c:	d0e8      	beq.n	8002650 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <I2C_ITError+0xdc>)
 8002680:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002682:	0023      	movs	r3, r4
 8002684:	3340      	adds	r3, #64	; 0x40
 8002686:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002688:	f7ff fb42 	bl	8001d10 <HAL_DMA_Abort_IT>
 800268c:	2800      	cmp	r0, #0
 800268e:	d0df      	beq.n	8002650 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002690:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002692:	e7db      	b.n	800264c <I2C_ITError+0x64>
 8002694:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002696:	7829      	ldrb	r1, [r5, #0]
 8002698:	3340      	adds	r3, #64	; 0x40
 800269a:	2960      	cmp	r1, #96	; 0x60
 800269c:	d106      	bne.n	80026ac <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	3940      	subs	r1, #64	; 0x40
 80026a0:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80026a2:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80026a4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80026a6:	f7ff ff9d 	bl	80025e4 <HAL_I2C_AbortCpltCallback>
 80026aa:	e7d1      	b.n	8002650 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 80026ac:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80026ae:	0020      	movs	r0, r4
 80026b0:	f7ff ff97 	bl	80025e2 <HAL_I2C_ErrorCallback>
}
 80026b4:	e7cc      	b.n	8002650 <I2C_ITError+0x68>
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	ffff0000 	.word	0xffff0000
 80026bc:	080027c1 	.word	0x080027c1
 80026c0:	ffffbfff 	.word	0xffffbfff
 80026c4:	08002c49 	.word	0x08002c49
 80026c8:	ffff7fff 	.word	0xffff7fff

080026cc <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026cc:	2220      	movs	r2, #32
{
 80026ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d0:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80026d2:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026d4:	6803      	ldr	r3, [r0, #0]
{
 80026d6:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026d8:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80026da:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026dc:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80026de:	f7ff fcb9 	bl	8002054 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	022d      	lsls	r5, r5, #8
 80026e6:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80026e8:	4933      	ldr	r1, [pc, #204]	; (80027b8 <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80026ea:	432a      	orrs	r2, r5
 80026ec:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80026ee:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80026f0:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 80026f2:	400a      	ands	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80026f6:	f7ff fc55 	bl	8001fa4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026fa:	0473      	lsls	r3, r6, #17
 80026fc:	d538      	bpl.n	8002770 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 80026fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b29b      	uxth	r3, r3
 800270a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800270c:	2304      	movs	r3, #4
 800270e:	421f      	tst	r7, r3
 8002710:	d010      	beq.n	8002734 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002712:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271e:	3301      	adds	r3, #1
 8002720:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002722:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8002728:	3b01      	subs	r3, #1
 800272a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800272c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800272e:	3b01      	subs	r3, #1
 8002730:	b29b      	uxth	r3, r3
 8002732:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800273a:	2304      	movs	r3, #4
 800273c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800273e:	4313      	orrs	r3, r2
 8002740:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800274e:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8002750:	6363      	str	r3, [r4, #52]	; 0x34
 8002752:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002754:	429e      	cmp	r6, r3
 8002756:	d00f      	beq.n	8002778 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002758:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800275a:	0020      	movs	r0, r4
 800275c:	f7ff ff44 	bl	80025e8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002760:	782b      	ldrb	r3, [r5, #0]
 8002762:	2b28      	cmp	r3, #40	; 0x28
 8002764:	d103      	bne.n	800276e <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002766:	0039      	movs	r1, r7
 8002768:	0020      	movs	r0, r4
 800276a:	f7ff ff05 	bl	8002578 <I2C_ITListenCplt>
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002770:	422e      	tst	r6, r5
 8002772:	d0cb      	beq.n	800270c <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8002774:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002776:	e7c3      	b.n	8002700 <I2C_ITSlaveCplt+0x34>
 8002778:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800277a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <I2C_ITSlaveCplt+0xf0>)
 800277e:	3740      	adds	r7, #64	; 0x40
 8002780:	4293      	cmp	r3, r2
 8002782:	d00b      	beq.n	800279c <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002784:	0020      	movs	r0, r4
 8002786:	f7ff fe84 	bl	8002492 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800278c:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	2320      	movs	r3, #32
 8002792:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002794:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002796:	f7ff feee 	bl	8002576 <HAL_I2C_ListenCpltCallback>
 800279a:	e7e8      	b.n	800276e <I2C_ITSlaveCplt+0xa2>
 800279c:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800279e:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027a0:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80027a4:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a6:	2a22      	cmp	r2, #34	; 0x22
 80027a8:	d102      	bne.n	80027b0 <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027aa:	f7ff fe71 	bl	8002490 <HAL_I2C_SlaveRxCpltCallback>
 80027ae:	e7de      	b.n	800276e <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027b0:	f7ff fe6d 	bl	800248e <HAL_I2C_SlaveTxCpltCallback>
}
 80027b4:	e7db      	b.n	800276e <I2C_ITSlaveCplt+0xa2>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	fe00e800 	.word	0xfe00e800
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <I2C_Slave_ISR_IT>:
{
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80027c2:	0007      	movs	r7, r0
 80027c4:	3740      	adds	r7, #64	; 0x40
{
 80027c6:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80027c8:	783a      	ldrb	r2, [r7, #0]
{
 80027ca:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80027cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 80027ce:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 80027d0:	2002      	movs	r0, #2
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d021      	beq.n	800281a <I2C_Slave_ISR_IT+0x5a>
 80027d6:	2201      	movs	r2, #1
 80027d8:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027da:	320f      	adds	r2, #15
 80027dc:	4211      	tst	r1, r2
 80027de:	d03b      	beq.n	8002858 <I2C_Slave_ISR_IT+0x98>
 80027e0:	4216      	tst	r6, r2
 80027e2:	d039      	beq.n	8002858 <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 80027e4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80027e6:	2900      	cmp	r1, #0
 80027e8:	d128      	bne.n	800283c <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80027ea:	0022      	movs	r2, r4
 80027ec:	3241      	adds	r2, #65	; 0x41
 80027ee:	7811      	ldrb	r1, [r2, #0]
 80027f0:	2928      	cmp	r1, #40	; 0x28
 80027f2:	d113      	bne.n	800281c <I2C_Slave_ISR_IT+0x5c>
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0489      	lsls	r1, r1, #18
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d10f      	bne.n	800281c <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027fc:	0029      	movs	r1, r5
 80027fe:	0020      	movs	r0, r4
 8002800:	f7ff feba 	bl	8002578 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002804:	2320      	movs	r3, #32
 8002806:	421d      	tst	r5, r3
 8002808:	d005      	beq.n	8002816 <I2C_Slave_ISR_IT+0x56>
 800280a:	421e      	tst	r6, r3
 800280c:	d003      	beq.n	8002816 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800280e:	0029      	movs	r1, r5
 8002810:	0020      	movs	r0, r4
 8002812:	f7ff ff5b 	bl	80026cc <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002816:	2000      	movs	r0, #0
 8002818:	7038      	strb	r0, [r7, #0]
}
 800281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800281c:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800281e:	7810      	ldrb	r0, [r2, #0]
 8002820:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002824:	2829      	cmp	r0, #41	; 0x29
 8002826:	d1ed      	bne.n	8002804 <I2C_Slave_ISR_IT+0x44>
 8002828:	482c      	ldr	r0, [pc, #176]	; (80028dc <I2C_Slave_ISR_IT+0x11c>)
 800282a:	4283      	cmp	r3, r0
 800282c:	d0ea      	beq.n	8002804 <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 800282e:	0020      	movs	r0, r4
 8002830:	f7ff fbb8 	bl	8001fa4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8002834:	0020      	movs	r0, r4
 8002836:	f7ff fe2c 	bl	8002492 <I2C_ITSlaveSeqCplt>
 800283a:	e7e3      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	6821      	ldr	r1, [r4, #0]
 800283e:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002840:	2204      	movs	r2, #4
 8002842:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002844:	430a      	orrs	r2, r1
 8002846:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <I2C_Slave_ISR_IT+0x120>)
 800284a:	4213      	tst	r3, r2
 800284c:	d1da      	bne.n	8002804 <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800284e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002850:	0020      	movs	r0, r4
 8002852:	f7ff fec9 	bl	80025e8 <I2C_ITError>
 8002856:	e7d5      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002858:	2204      	movs	r2, #4
 800285a:	4215      	tst	r5, r2
 800285c:	d01a      	beq.n	8002894 <I2C_Slave_ISR_IT+0xd4>
 800285e:	4216      	tst	r6, r2
 8002860:	d018      	beq.n	8002894 <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 8002862:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002864:	2900      	cmp	r1, #0
 8002866:	d00e      	beq.n	8002886 <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8002868:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800286e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002870:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 8002872:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002874:	3201      	adds	r2, #1
 8002876:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002878:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800287a:	3a01      	subs	r2, #1
 800287c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800287e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002880:	3a01      	subs	r2, #1
 8002882:	b292      	uxth	r2, r2
 8002884:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002886:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002888:	2a00      	cmp	r2, #0
 800288a:	d1bb      	bne.n	8002804 <I2C_Slave_ISR_IT+0x44>
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <I2C_Slave_ISR_IT+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d1d0      	bne.n	8002834 <I2C_Slave_ISR_IT+0x74>
 8002892:	e7b7      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002894:	2208      	movs	r2, #8
 8002896:	4215      	tst	r5, r2
 8002898:	d005      	beq.n	80028a6 <I2C_Slave_ISR_IT+0xe6>
 800289a:	4216      	tst	r6, r2
 800289c:	d003      	beq.n	80028a6 <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800289e:	0020      	movs	r0, r4
 80028a0:	f7ff fe21 	bl	80024e6 <I2C_ITAddrCplt.isra.8>
 80028a4:	e7ae      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028a6:	2202      	movs	r2, #2
 80028a8:	4215      	tst	r5, r2
 80028aa:	d0ab      	beq.n	8002804 <I2C_Slave_ISR_IT+0x44>
 80028ac:	4216      	tst	r6, r2
 80028ae:	d0a9      	beq.n	8002804 <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 80028b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80028bc:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028be:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80028c0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	8523      	strh	r3, [r4, #40]	; 0x28
 80028d0:	e798      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <I2C_Slave_ISR_IT+0x120>)
 80028d4:	4213      	tst	r3, r2
 80028d6:	d000      	beq.n	80028da <I2C_Slave_ISR_IT+0x11a>
 80028d8:	e794      	b.n	8002804 <I2C_Slave_ISR_IT+0x44>
 80028da:	e7ab      	b.n	8002834 <I2C_Slave_ISR_IT+0x74>
 80028dc:	ffff0000 	.word	0xffff0000
 80028e0:	feffffff 	.word	0xfeffffff

080028e4 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	2220      	movs	r2, #32
 80028e6:	6803      	ldr	r3, [r0, #0]
{
 80028e8:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80028ec:	685a      	ldr	r2, [r3, #4]
{
 80028ee:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 80028f0:	4827      	ldr	r0, [pc, #156]	; (8002990 <I2C_ITMasterCplt+0xac>)
 80028f2:	4002      	ands	r2, r0
 80028f4:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	2200      	movs	r2, #0
 80028f8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80028fa:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <I2C_ITMasterCplt+0xb0>)
 80028fe:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8002900:	2210      	movs	r2, #16
 8002902:	4211      	tst	r1, r2
 8002904:	d004      	beq.n	8002910 <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002908:	2304      	movs	r3, #4
 800290a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800290c:	4313      	orrs	r3, r2
 800290e:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8002910:	0020      	movs	r0, r4
 8002912:	f7ff fb47 	bl	8001fa4 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002916:	2103      	movs	r1, #3
 8002918:	0020      	movs	r0, r4
 800291a:	f7ff fb9b 	bl	8002054 <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800291e:	0022      	movs	r2, r4
 8002920:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 8002922:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002924:	7811      	ldrb	r1, [r2, #0]
 8002926:	2960      	cmp	r1, #96	; 0x60
 8002928:	d001      	beq.n	800292e <I2C_ITMasterCplt+0x4a>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800292e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002930:	0020      	movs	r0, r4
 8002932:	f7ff fe59 	bl	80025e8 <I2C_ITError>
}
 8002936:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002938:	7811      	ldrb	r1, [r2, #0]
 800293a:	2921      	cmp	r1, #33	; 0x21
 800293c:	d112      	bne.n	8002964 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	3901      	subs	r1, #1
 8002940:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002942:	0022      	movs	r2, r4
 8002944:	0021      	movs	r1, r4
 8002946:	3242      	adds	r2, #66	; 0x42
 8002948:	7810      	ldrb	r0, [r2, #0]
 800294a:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800294e:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002950:	2840      	cmp	r0, #64	; 0x40
 8002952:	d103      	bne.n	800295c <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002954:	0020      	movs	r0, r4
 8002956:	f002 fc25 	bl	80051a4 <HAL_I2C_MemTxCpltCallback>
 800295a:	e7ec      	b.n	8002936 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800295c:	0020      	movs	r0, r4
 800295e:	f7ff fd70 	bl	8002442 <HAL_I2C_MasterTxCpltCallback>
 8002962:	e7e8      	b.n	8002936 <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002964:	7811      	ldrb	r1, [r2, #0]
 8002966:	2922      	cmp	r1, #34	; 0x22
 8002968:	d1e5      	bne.n	8002936 <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	3902      	subs	r1, #2
 800296c:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296e:	0022      	movs	r2, r4
 8002970:	0021      	movs	r1, r4
 8002972:	3242      	adds	r2, #66	; 0x42
 8002974:	7810      	ldrb	r0, [r2, #0]
 8002976:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800297a:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800297c:	2840      	cmp	r0, #64	; 0x40
 800297e:	d103      	bne.n	8002988 <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002980:	0020      	movs	r0, r4
 8002982:	f7ff fe2d 	bl	80025e0 <HAL_I2C_MemRxCpltCallback>
 8002986:	e7d6      	b.n	8002936 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002988:	0020      	movs	r0, r4
 800298a:	f7ff fd5b 	bl	8002444 <HAL_I2C_MasterRxCpltCallback>
}
 800298e:	e7d2      	b.n	8002936 <I2C_ITMasterCplt+0x52>
 8002990:	fe00e800 	.word	0xfe00e800
 8002994:	ffff0000 	.word	0xffff0000

08002998 <I2C_Slave_ISR_DMA>:
{
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800299a:	0005      	movs	r5, r0
 800299c:	3540      	adds	r5, #64	; 0x40
 800299e:	782b      	ldrb	r3, [r5, #0]
{
 80029a0:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80029a2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80029a4:	2002      	movs	r0, #2
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d02d      	beq.n	8002a06 <I2C_Slave_ISR_DMA+0x6e>
 80029aa:	2301      	movs	r3, #1
 80029ac:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029ae:	330f      	adds	r3, #15
 80029b0:	4219      	tst	r1, r3
 80029b2:	d04b      	beq.n	8002a4c <I2C_Slave_ISR_DMA+0xb4>
 80029b4:	421a      	tst	r2, r3
 80029b6:	d049      	beq.n	8002a4c <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80029b8:	20c0      	movs	r0, #192	; 0xc0
 80029ba:	0200      	lsls	r0, r0, #8
 80029bc:	4202      	tst	r2, r0
 80029be:	d042      	beq.n	8002a46 <I2C_Slave_ISR_DMA+0xae>
      if (hi2c->hdmarx != NULL)
 80029c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 80029c2:	1e03      	subs	r3, r0, #0
      if (hi2c->hdmarx != NULL)
 80029c4:	d006      	beq.n	80029d4 <I2C_Slave_ISR_DMA+0x3c>
  uint32_t treatdmanack = 0U;
 80029c6:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80029c8:	0417      	lsls	r7, r2, #16
 80029ca:	d503      	bpl.n	80029d4 <I2C_Slave_ISR_DMA+0x3c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80029cc:	6803      	ldr	r3, [r0, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 80029d0:	4258      	negs	r0, r3
 80029d2:	4143      	adcs	r3, r0
      if (hi2c->hdmatx != NULL)
 80029d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d005      	beq.n	80029e6 <I2C_Slave_ISR_DMA+0x4e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80029da:	0452      	lsls	r2, r2, #17
 80029dc:	d503      	bpl.n	80029e6 <I2C_Slave_ISR_DMA+0x4e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80029de:	6802      	ldr	r2, [r0, #0]
 80029e0:	6852      	ldr	r2, [r2, #4]
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d001      	beq.n	80029ea <I2C_Slave_ISR_DMA+0x52>
      if (treatdmanack == 1U)
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d11e      	bne.n	8002a28 <I2C_Slave_ISR_DMA+0x90>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80029ea:	0023      	movs	r3, r4
 80029ec:	3341      	adds	r3, #65	; 0x41
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	2a28      	cmp	r2, #40	; 0x28
 80029f2:	d109      	bne.n	8002a08 <I2C_Slave_ISR_DMA+0x70>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0492      	lsls	r2, r2, #18
 80029f8:	4296      	cmp	r6, r2
 80029fa:	d105      	bne.n	8002a08 <I2C_Slave_ISR_DMA+0x70>
          I2C_ITListenCplt(hi2c, ITFlags);
 80029fc:	0020      	movs	r0, r4
 80029fe:	f7ff fdbb 	bl	8002578 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8002a02:	2000      	movs	r0, #0
 8002a04:	7028      	strb	r0, [r5, #0]
}
 8002a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a08:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a0a:	7819      	ldrb	r1, [r3, #0]
 8002a0c:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0e:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a10:	2929      	cmp	r1, #41	; 0x29
 8002a12:	d1f6      	bne.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <I2C_Slave_ISR_DMA+0xd8>)
 8002a16:	428e      	cmp	r6, r1
 8002a18:	d0f3      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
          I2C_Flush_TXDR(hi2c);
 8002a1a:	0020      	movs	r0, r4
 8002a1c:	f7ff fac2 	bl	8001fa4 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8002a20:	0020      	movs	r0, r4
 8002a22:	f7ff fd36 	bl	8002492 <I2C_ITSlaveSeqCplt>
 8002a26:	e7ec      	b.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	2210      	movs	r2, #16
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a32:	4313      	orrs	r3, r2
 8002a34:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <I2C_Slave_ISR_DMA+0xdc>)
 8002a38:	421e      	tst	r6, r3
 8002a3a:	d1e2      	bne.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f7ff fdd2 	bl	80025e8 <I2C_ITError>
 8002a44:	e7dd      	b.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	61d3      	str	r3, [r2, #28]
 8002a4a:	e7da      	b.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	4219      	tst	r1, r3
 8002a50:	d005      	beq.n	8002a5e <I2C_Slave_ISR_DMA+0xc6>
 8002a52:	421a      	tst	r2, r3
 8002a54:	d003      	beq.n	8002a5e <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002a56:	0020      	movs	r0, r4
 8002a58:	f7ff fd45 	bl	80024e6 <I2C_ITAddrCplt.isra.8>
 8002a5c:	e7d1      	b.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a5e:	2320      	movs	r3, #32
 8002a60:	4219      	tst	r1, r3
 8002a62:	d0ce      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
 8002a64:	421a      	tst	r2, r3
 8002a66:	d0cc      	beq.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f7ff fe2f 	bl	80026cc <I2C_ITSlaveCplt>
 8002a6e:	e7c8      	b.n	8002a02 <I2C_Slave_ISR_DMA+0x6a>
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	feffffff 	.word	0xfeffffff

08002a78 <I2C_Master_ISR_DMA>:
{
 8002a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8002a7a:	0005      	movs	r5, r0
 8002a7c:	3540      	adds	r5, #64	; 0x40
 8002a7e:	782b      	ldrb	r3, [r5, #0]
{
 8002a80:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8002a82:	2002      	movs	r0, #2
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d015      	beq.n	8002ab4 <I2C_Master_ISR_DMA+0x3c>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a8c:	330f      	adds	r3, #15
 8002a8e:	4219      	tst	r1, r3
 8002a90:	d011      	beq.n	8002ab6 <I2C_Master_ISR_DMA+0x3e>
 8002a92:	421a      	tst	r2, r3
 8002a94:	d00f      	beq.n	8002ab6 <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a98:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9a:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a9e:	3b0c      	subs	r3, #12
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002aa4:	2112      	movs	r1, #18
 8002aa6:	f7ff faa1 	bl	8001fec <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8002aaa:	0020      	movs	r0, r4
 8002aac:	f7ff fa7a 	bl	8001fa4 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	7028      	strb	r0, [r5, #0]
}
 8002ab4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002ab6:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ab8:	0608      	lsls	r0, r1, #24
 8002aba:	d544      	bpl.n	8002b46 <I2C_Master_ISR_DMA+0xce>
 8002abc:	421a      	tst	r2, r3
 8002abe:	d042      	beq.n	8002b46 <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	6811      	ldr	r1, [r2, #0]
 8002ac4:	4399      	bics	r1, r3
 8002ac6:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 8002ac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02f      	beq.n	8002b2e <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ace:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ad2:	0589      	lsls	r1, r1, #22
 8002ad4:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d91b      	bls.n	8002b12 <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ada:	23ff      	movs	r3, #255	; 0xff
 8002adc:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002ae6:	9000      	str	r0, [sp, #0]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7ff fa68 	bl	8001fc0 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8002af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002afa:	0023      	movs	r3, r4
 8002afc:	3341      	adds	r3, #65	; 0x41
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b02:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b04:	2a22      	cmp	r2, #34	; 0x22
 8002b06:	d10f      	bne.n	8002b28 <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e7ce      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8002b12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8002b16:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <I2C_Master_ISR_DMA+0x10c>)
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 8002b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b20:	e7df      	b.n	8002ae2 <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	049b      	lsls	r3, r3, #18
 8002b26:	e7dc      	b.n	8002ae2 <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	01d2      	lsls	r2, r2, #7
 8002b2c:	e7ee      	b.n	8002b0c <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b2e:	6853      	ldr	r3, [r2, #4]
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	d403      	bmi.n	8002b3c <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 8002b34:	0020      	movs	r0, r4
 8002b36:	f7ff fc86 	bl	8002446 <I2C_ITMasterSeqCplt>
 8002b3a:	e7b9      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b3c:	2140      	movs	r1, #64	; 0x40
 8002b3e:	0020      	movs	r0, r4
 8002b40:	f7ff fd52 	bl	80025e8 <I2C_ITError>
 8002b44:	e7b4      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b46:	4219      	tst	r1, r3
 8002b48:	d012      	beq.n	8002b70 <I2C_Master_ISR_DMA+0xf8>
 8002b4a:	421a      	tst	r2, r3
 8002b4c:	d010      	beq.n	8002b70 <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 8002b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f3      	bne.n	8002b3c <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	0192      	lsls	r2, r2, #6
 8002b5a:	d4a9      	bmi.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <I2C_Master_ISR_DMA+0x10c>)
 8002b60:	4291      	cmp	r1, r2
 8002b62:	d1e7      	bne.n	8002b34 <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	01d2      	lsls	r2, r2, #7
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e79f      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b70:	2320      	movs	r3, #32
 8002b72:	4219      	tst	r1, r3
 8002b74:	d09c      	beq.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
 8002b76:	421a      	tst	r2, r3
 8002b78:	d100      	bne.n	8002b7c <I2C_Master_ISR_DMA+0x104>
 8002b7a:	e799      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b7c:	0020      	movs	r0, r4
 8002b7e:	f7ff feb1 	bl	80028e4 <I2C_ITMasterCplt>
 8002b82:	e795      	b.n	8002ab0 <I2C_Master_ISR_DMA+0x38>
 8002b84:	ffff0000 	.word	0xffff0000

08002b88 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b88:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002b8c:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b8e:	6802      	ldr	r2, [r0, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	6851      	ldr	r1, [r2, #4]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002b98:	2110      	movs	r1, #16
 8002b9a:	f7ff fd25 	bl	80025e8 <I2C_ITError>
}
 8002b9e:	bd10      	pop	{r4, pc}

08002ba0 <I2C_DMAMasterTransmitCplt>:
{
 8002ba0:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ba4:	4911      	ldr	r1, [pc, #68]	; (8002bec <I2C_DMAMasterTransmitCplt+0x4c>)
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	6813      	ldr	r3, [r2, #0]
 8002baa:	400b      	ands	r3, r1
 8002bac:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8002bae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002bb4:	2112      	movs	r1, #18
 8002bb6:	0020      	movs	r0, r4
 8002bb8:	f7ff fa18 	bl	8001fec <I2C_Enable_IRQ>
}
 8002bbc:	e013      	b.n	8002be6 <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 8002bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bc0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002bc2:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8002bc6:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d90d      	bls.n	8002be8 <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bcc:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8002bce:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8002bd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bd2:	3228      	adds	r2, #40	; 0x28
 8002bd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bd6:	f7ff f85b 	bl	8001c90 <HAL_DMA_Start_IT>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d0ea      	beq.n	8002bb4 <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002bde:	2110      	movs	r1, #16
 8002be0:	0020      	movs	r0, r4
 8002be2:	f7ff fd01 	bl	80025e8 <I2C_ITError>
}
 8002be6:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8002be8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bea:	e7f0      	b.n	8002bce <I2C_DMAMasterTransmitCplt+0x2e>
 8002bec:	ffffbfff 	.word	0xffffbfff

08002bf0 <HAL_I2C_ER_IRQHandler>:
{
 8002bf0:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bf2:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bf4:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bf6:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bf8:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bfa:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bfc:	4229      	tst	r1, r5
 8002bfe:	d006      	beq.n	8002c0e <HAL_I2C_ER_IRQHandler+0x1e>
 8002c00:	0614      	lsls	r4, r2, #24
 8002c02:	d504      	bpl.n	8002c0e <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c04:	2401      	movs	r4, #1
 8002c06:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8002c08:	4334      	orrs	r4, r6
 8002c0a:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c0c:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c0e:	2580      	movs	r5, #128	; 0x80
 8002c10:	00ed      	lsls	r5, r5, #3
 8002c12:	4229      	tst	r1, r5
 8002c14:	d006      	beq.n	8002c24 <HAL_I2C_ER_IRQHandler+0x34>
 8002c16:	0614      	lsls	r4, r2, #24
 8002c18:	d504      	bpl.n	8002c24 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c1a:	2408      	movs	r4, #8
 8002c1c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8002c1e:	4334      	orrs	r4, r6
 8002c20:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c22:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c24:	2480      	movs	r4, #128	; 0x80
 8002c26:	00a4      	lsls	r4, r4, #2
 8002c28:	4221      	tst	r1, r4
 8002c2a:	d006      	beq.n	8002c3a <HAL_I2C_ER_IRQHandler+0x4a>
 8002c2c:	0612      	lsls	r2, r2, #24
 8002c2e:	d504      	bpl.n	8002c3a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c30:	2202      	movs	r2, #2
 8002c32:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002c34:	430a      	orrs	r2, r1
 8002c36:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c38:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c3a:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002c3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c3e:	4219      	tst	r1, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8002c42:	f7ff fcd1 	bl	80025e8 <I2C_ITError>
}
 8002c46:	bd70      	pop	{r4, r5, r6, pc}

08002c48 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002c48:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002c4c:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002c4e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002c50:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002c52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002c54:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c56:	0003      	movs	r3, r0
 8002c58:	3341      	adds	r3, #65	; 0x41
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	2a60      	cmp	r2, #96	; 0x60
 8002c5e:	d104      	bne.n	8002c6a <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	3a40      	subs	r2, #64	; 0x40
 8002c62:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c64:	f7ff fcbe 	bl	80025e4 <HAL_I2C_AbortCpltCallback>
}
 8002c68:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8002c6a:	f7ff fcba 	bl	80025e2 <HAL_I2C_ErrorCallback>
}
 8002c6e:	e7fb      	b.n	8002c68 <I2C_DMAAbort+0x20>

08002c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c72:	0004      	movs	r4, r0
 8002c74:	3441      	adds	r4, #65	; 0x41
 8002c76:	7822      	ldrb	r2, [r4, #0]
{
 8002c78:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	2a20      	cmp	r2, #32
 8002c80:	d118      	bne.n	8002cb4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8002c82:	001d      	movs	r5, r3
 8002c84:	3540      	adds	r5, #64	; 0x40
 8002c86:	782e      	ldrb	r6, [r5, #0]
 8002c88:	2e01      	cmp	r6, #1
 8002c8a:	d013      	beq.n	8002cb4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002c8c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8e:	3022      	adds	r0, #34	; 0x22
 8002c90:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002c92:	681e      	ldr	r6, [r3, #0]
 8002c94:	3823      	subs	r0, #35	; 0x23
 8002c96:	4386      	bics	r6, r0
 8002c98:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c9a:	681e      	ldr	r6, [r3, #0]
 8002c9c:	4f06      	ldr	r7, [pc, #24]	; (8002cb8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002c9e:	403e      	ands	r6, r7
 8002ca0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ca2:	681e      	ldr	r6, [r3, #0]
 8002ca4:	4331      	orrs	r1, r6
 8002ca6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	4308      	orrs	r0, r1
 8002cac:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002cae:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002cb2:	7028      	strb	r0, [r5, #0]
  }
}
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	ffffefff 	.word	0xffffefff

08002cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	0005      	movs	r5, r0
 8002cc0:	3541      	adds	r5, #65	; 0x41
 8002cc2:	782a      	ldrb	r2, [r5, #0]
{
 8002cc4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	2a20      	cmp	r2, #32
 8002ccc:	d117      	bne.n	8002cfe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002cce:	001c      	movs	r4, r3
 8002cd0:	3440      	adds	r4, #64	; 0x40
 8002cd2:	7826      	ldrb	r6, [r4, #0]
 8002cd4:	2e01      	cmp	r6, #1
 8002cd6:	d012      	beq.n	8002cfe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002cd8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cda:	3022      	adds	r0, #34	; 0x22
 8002cdc:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002cde:	681e      	ldr	r6, [r3, #0]
 8002ce0:	3823      	subs	r0, #35	; 0x23
 8002ce2:	4386      	bics	r6, r0
 8002ce4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002ce6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002ce8:	4f05      	ldr	r7, [pc, #20]	; (8002d00 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002cea:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002cec:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002cee:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002cf0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	4308      	orrs	r0, r1
 8002cf6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002cf8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002cfc:	7020      	strb	r0, [r4, #0]
  }
}
 8002cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d00:	fffff0ff 	.word	0xfffff0ff

08002d04 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002d04:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2401      	movs	r4, #1
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8002d0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002d0c:	4321      	orrs	r1, r4
 8002d0e:	6411      	str	r1, [r2, #64]	; 0x40
 8002d10:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4023      	ands	r3, r4
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	4318      	orrs	r0, r3
 8002d1e:	6010      	str	r0, [r2, #0]
}
 8002d20:	bd13      	pop	{r0, r1, r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40010000 	.word	0x40010000

08002d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d2c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d2e:	4c10      	ldr	r4, [pc, #64]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002d30:	4910      	ldr	r1, [pc, #64]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002d32:	6823      	ldr	r3, [r4, #0]
{
 8002d34:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d36:	400b      	ands	r3, r1
 8002d38:	4303      	orrs	r3, r0
 8002d3a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3c:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002d3e:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10c      	bne.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	4358      	muls	r0, r3
 8002d50:	f7fd f9ec 	bl	800012c <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d54:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002d56:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d58:	00d2      	lsls	r2, r2, #3
 8002d5a:	6960      	ldr	r0, [r4, #20]
 8002d5c:	4010      	ands	r0, r2
 8002d5e:	d100      	bne.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8002d60:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8002d66:	3b01      	subs	r3, #1
 8002d68:	e7f7      	b.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e7f8      	b.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x34>
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	40007000 	.word	0x40007000
 8002d74:	fffff9ff 	.word	0xfffff9ff
 8002d78:	20000010 	.word	0x20000010
 8002d7c:	000f4240 	.word	0x000f4240

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	0004      	movs	r4, r0
 8002d84:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002d8c:	b005      	add	sp, #20
 8002d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	07db      	lsls	r3, r3, #31
 8002d94:	d410      	bmi.n	8002db8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	079b      	lsls	r3, r3, #30
 8002d9a:	d45c      	bmi.n	8002e56 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	071b      	lsls	r3, r3, #28
 8002da0:	d500      	bpl.n	8002da4 <HAL_RCC_OscConfig+0x24>
 8002da2:	e0c2      	b.n	8002f2a <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	075b      	lsls	r3, r3, #29
 8002da8:	d500      	bpl.n	8002dac <HAL_RCC_OscConfig+0x2c>
 8002daa:	e0f4      	b.n	8002f96 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dac:	69e2      	ldr	r2, [r4, #28]
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	d000      	beq.n	8002db4 <HAL_RCC_OscConfig+0x34>
 8002db2:	e173      	b.n	800309c <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7e9      	b.n	8002d8c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db8:	2238      	movs	r2, #56	; 0x38
 8002dba:	4dac      	ldr	r5, [pc, #688]	; (800306c <HAL_RCC_OscConfig+0x2ec>)
 8002dbc:	68ab      	ldr	r3, [r5, #8]
 8002dbe:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc6:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dc8:	0793      	lsls	r3, r2, #30
 8002dca:	d108      	bne.n	8002dde <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	039b      	lsls	r3, r3, #14
 8002dd0:	d5e1      	bpl.n	8002d96 <HAL_RCC_OscConfig+0x16>
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1de      	bne.n	8002d96 <HAL_RCC_OscConfig+0x16>
 8002dd8:	e7d7      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d0f6      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	6863      	ldr	r3, [r4, #4]
 8002de2:	0252      	lsls	r2, r2, #9
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d111      	bne.n	8002e0c <HAL_RCC_OscConfig+0x8c>
 8002de8:	682a      	ldr	r2, [r5, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dee:	f7fe fa71 	bl	80012d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002df4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	02b6      	lsls	r6, r6, #10
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	4233      	tst	r3, r6
 8002dfc:	d1cb      	bne.n	8002d96 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa69 	bl	80012d4 <HAL_GetTick>
 8002e02:	1bc0      	subs	r0, r0, r7
 8002e04:	2864      	cmp	r0, #100	; 0x64
 8002e06:	d9f7      	bls.n	8002df8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002e08:	2003      	movs	r0, #3
 8002e0a:	e7bf      	b.n	8002d8c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	21a0      	movs	r1, #160	; 0xa0
 8002e0e:	02c9      	lsls	r1, r1, #11
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d108      	bne.n	8002e26 <HAL_RCC_OscConfig+0xa6>
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	6829      	ldr	r1, [r5, #0]
 8002e18:	02db      	lsls	r3, r3, #11
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	602b      	str	r3, [r5, #0]
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	602a      	str	r2, [r5, #0]
 8002e24:	e7e3      	b.n	8002dee <HAL_RCC_OscConfig+0x6e>
 8002e26:	682a      	ldr	r2, [r5, #0]
 8002e28:	4991      	ldr	r1, [pc, #580]	; (8003070 <HAL_RCC_OscConfig+0x2f0>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	602a      	str	r2, [r5, #0]
 8002e2e:	682a      	ldr	r2, [r5, #0]
 8002e30:	4990      	ldr	r1, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0x2f4>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1d9      	bne.n	8002dee <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fa4b 	bl	80012d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002e40:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e42:	02b6      	lsls	r6, r6, #10
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	4233      	tst	r3, r6
 8002e48:	d0a5      	beq.n	8002d96 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fa43 	bl	80012d4 <HAL_GetTick>
 8002e4e:	1bc0      	subs	r0, r0, r7
 8002e50:	2864      	cmp	r0, #100	; 0x64
 8002e52:	d9f7      	bls.n	8002e44 <HAL_RCC_OscConfig+0xc4>
 8002e54:	e7d8      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	2338      	movs	r3, #56	; 0x38
 8002e58:	4d84      	ldr	r5, [pc, #528]	; (800306c <HAL_RCC_OscConfig+0x2ec>)
 8002e5a:	68aa      	ldr	r2, [r5, #8]
 8002e5c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e5e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d129      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e64:	2103      	movs	r1, #3
 8002e66:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e68:	2a02      	cmp	r2, #2
 8002e6a:	d127      	bne.n	8002ebc <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	682a      	ldr	r2, [r5, #0]
 8002e6e:	0552      	lsls	r2, r2, #21
 8002e70:	d503      	bpl.n	8002e7a <HAL_RCC_OscConfig+0xfa>
 8002e72:	68e2      	ldr	r2, [r4, #12]
 8002e74:	2a00      	cmp	r2, #0
 8002e76:	d100      	bne.n	8002e7a <HAL_RCC_OscConfig+0xfa>
 8002e78:	e787      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	6869      	ldr	r1, [r5, #4]
 8002e7c:	6962      	ldr	r2, [r4, #20]
 8002e7e:	487e      	ldr	r0, [pc, #504]	; (8003078 <HAL_RCC_OscConfig+0x2f8>)
 8002e80:	0212      	lsls	r2, r2, #8
 8002e82:	4001      	ands	r1, r0
 8002e84:	430a      	orrs	r2, r1
 8002e86:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	4a7b      	ldr	r2, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x2fc>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	6922      	ldr	r2, [r4, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	4a79      	ldr	r2, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x300>)
 8002e9c:	049b      	lsls	r3, r3, #18
 8002e9e:	0f5b      	lsrs	r3, r3, #29
 8002ea0:	40da      	lsrs	r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x304>)
 8002ea6:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ea8:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x308>)
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	f7fe f9ca 	bl	8001244 <HAL_InitTick>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d100      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x136>
 8002eb4:	e772      	b.n	8002d9c <HAL_RCC_OscConfig+0x1c>
 8002eb6:	e768      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0d7      	beq.n	8002e6c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	4a6d      	ldr	r2, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ec8:	4013      	ands	r3, r2
 8002eca:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ecc:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	682a      	ldr	r2, [r5, #0]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002edc:	f7fe f9fa 	bl	80012d4 <HAL_GetTick>
 8002ee0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	4233      	tst	r3, r6
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	686a      	ldr	r2, [r5, #4]
 8002eea:	6963      	ldr	r3, [r4, #20]
 8002eec:	4962      	ldr	r1, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x2f8>)
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	606b      	str	r3, [r5, #4]
 8002ef6:	e751      	b.n	8002d9c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f9ec 	bl	80012d4 <HAL_GetTick>
 8002efc:	1bc0      	subs	r0, r0, r7
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d9ef      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x162>
 8002f02:	e781      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f08:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f9e1 	bl	80012d4 <HAL_GetTick>
 8002f12:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f14:	00f6      	lsls	r6, r6, #3
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	4233      	tst	r3, r6
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x19e>
 8002f1c:	e73e      	b.n	8002d9c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f9d9 	bl	80012d4 <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	2802      	cmp	r0, #2
 8002f26:	d9f6      	bls.n	8002f16 <HAL_RCC_OscConfig+0x196>
 8002f28:	e76e      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f2a:	2138      	movs	r1, #56	; 0x38
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <HAL_RCC_OscConfig+0x2ec>)
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	001d      	movs	r5, r3
 8002f32:	400a      	ands	r2, r1
 8002f34:	2a18      	cmp	r2, #24
 8002f36:	d108      	bne.n	8002f4a <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	079b      	lsls	r3, r3, #30
 8002f3c:	d400      	bmi.n	8002f40 <HAL_RCC_OscConfig+0x1c0>
 8002f3e:	e731      	b.n	8002da4 <HAL_RCC_OscConfig+0x24>
 8002f40:	69a3      	ldr	r3, [r4, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d000      	beq.n	8002f48 <HAL_RCC_OscConfig+0x1c8>
 8002f46:	e72d      	b.n	8002da4 <HAL_RCC_OscConfig+0x24>
 8002f48:	e71f      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4a:	69a2      	ldr	r2, [r4, #24]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8002f52:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f54:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8002f56:	4313      	orrs	r3, r2
 8002f58:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f5a:	f7fe f9bb 	bl	80012d4 <HAL_GetTick>
 8002f5e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f60:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002f62:	4233      	tst	r3, r6
 8002f64:	d000      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1e8>
 8002f66:	e71d      	b.n	8002da4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe f9b4 	bl	80012d4 <HAL_GetTick>
 8002f6c:	1bc0      	subs	r0, r0, r7
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	d9f6      	bls.n	8002f60 <HAL_RCC_OscConfig+0x1e0>
 8002f72:	e749      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002f74:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f76:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8002f78:	439a      	bics	r2, r3
 8002f7a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f9aa 	bl	80012d4 <HAL_GetTick>
 8002f80:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f82:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002f84:	4233      	tst	r3, r6
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x20a>
 8002f88:	e70c      	b.n	8002da4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f9a3 	bl	80012d4 <HAL_GetTick>
 8002f8e:	1bc0      	subs	r0, r0, r7
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d9f6      	bls.n	8002f82 <HAL_RCC_OscConfig+0x202>
 8002f94:	e738      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f96:	2138      	movs	r1, #56	; 0x38
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x2ec>)
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	001d      	movs	r5, r3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	2a20      	cmp	r2, #32
 8002fa2:	d108      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	079b      	lsls	r3, r3, #30
 8002fa8:	d400      	bmi.n	8002fac <HAL_RCC_OscConfig+0x22c>
 8002faa:	e6ff      	b.n	8002dac <HAL_RCC_OscConfig+0x2c>
 8002fac:	68a3      	ldr	r3, [r4, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d000      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x234>
 8002fb2:	e6fb      	b.n	8002dac <HAL_RCC_OscConfig+0x2c>
 8002fb4:	e6e9      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	0552      	lsls	r2, r2, #21
 8002fbc:	4213      	tst	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x242>
 8002fc0:	e0f6      	b.n	80031b0 <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	2780      	movs	r7, #128	; 0x80
 8002fc6:	4e32      	ldr	r6, [pc, #200]	; (8003090 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8002fc8:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	6833      	ldr	r3, [r6, #0]
 8002fcc:	007f      	lsls	r7, r7, #1
 8002fce:	423b      	tst	r3, r7
 8002fd0:	d015      	beq.n	8002ffe <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd2:	68a3      	ldr	r3, [r4, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d122      	bne.n	800301e <HAL_RCC_OscConfig+0x29e>
 8002fd8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002fde:	f7fe f979 	bl	80012d4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002fe4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002fe8:	423b      	tst	r3, r7
 8002fea:	d038      	beq.n	800305e <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8002fec:	9b00      	ldr	r3, [sp, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d000      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x274>
 8002ff2:	e6db      	b.n	8002dac <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x314>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002ffc:	e6d6      	b.n	8002dac <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffe:	6833      	ldr	r3, [r6, #0]
 8003000:	433b      	orrs	r3, r7
 8003002:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003004:	f7fe f966 	bl	80012d4 <HAL_GetTick>
 8003008:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300a:	6833      	ldr	r3, [r6, #0]
 800300c:	423b      	tst	r3, r7
 800300e:	d1e0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe f960 	bl	80012d4 <HAL_GetTick>
 8003014:	9b01      	ldr	r3, [sp, #4]
 8003016:	1ac0      	subs	r0, r0, r3
 8003018:	2802      	cmp	r0, #2
 800301a:	d9f6      	bls.n	800300a <HAL_RCC_OscConfig+0x28a>
 800301c:	e6f4      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003020:	2b05      	cmp	r3, #5
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x2b0>
 8003024:	3b01      	subs	r3, #1
 8003026:	4313      	orrs	r3, r2
 8003028:	65eb      	str	r3, [r5, #92]	; 0x5c
 800302a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800302c:	2301      	movs	r3, #1
 800302e:	e7d4      	b.n	8002fda <HAL_RCC_OscConfig+0x25a>
 8003030:	2101      	movs	r1, #1
 8003032:	438a      	bics	r2, r1
 8003034:	65ea      	str	r2, [r5, #92]	; 0x5c
 8003036:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003038:	3103      	adds	r1, #3
 800303a:	438a      	bics	r2, r1
 800303c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1cd      	bne.n	8002fde <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8003042:	f7fe f947 	bl	80012d4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003046:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003048:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800304a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800304c:	423b      	tst	r3, r7
 800304e:	d0cd      	beq.n	8002fec <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe f940 	bl	80012d4 <HAL_GetTick>
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x318>)
 8003056:	1b80      	subs	r0, r0, r6
 8003058:	4298      	cmp	r0, r3
 800305a:	d9f6      	bls.n	800304a <HAL_RCC_OscConfig+0x2ca>
 800305c:	e6d4      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe f939 	bl	80012d4 <HAL_GetTick>
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_OscConfig+0x318>)
 8003064:	1b80      	subs	r0, r0, r6
 8003066:	4298      	cmp	r0, r3
 8003068:	d9bd      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x266>
 800306a:	e6cd      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
 800306c:	40021000 	.word	0x40021000
 8003070:	fffeffff 	.word	0xfffeffff
 8003074:	fffbffff 	.word	0xfffbffff
 8003078:	ffff80ff 	.word	0xffff80ff
 800307c:	ffffc7ff 	.word	0xffffc7ff
 8003080:	00f42400 	.word	0x00f42400
 8003084:	20000010 	.word	0x20000010
 8003088:	20000004 	.word	0x20000004
 800308c:	fffffeff 	.word	0xfffffeff
 8003090:	40007000 	.word	0x40007000
 8003094:	efffffff 	.word	0xefffffff
 8003098:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309c:	2038      	movs	r0, #56	; 0x38
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_RCC_OscConfig+0x444>)
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	001d      	movs	r5, r3
 80030a4:	4001      	ands	r1, r0
 80030a6:	2910      	cmp	r1, #16
 80030a8:	d054      	beq.n	8003154 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4946      	ldr	r1, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x448>)
 80030ae:	400b      	ands	r3, r1
 80030b0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b2:	2a02      	cmp	r2, #2
 80030b4:	d137      	bne.n	8003126 <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 80030b6:	f7fe f90d 	bl	80012d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ba:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80030bc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	04b6      	lsls	r6, r6, #18
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	4233      	tst	r3, r6
 80030c4:	d129      	bne.n	800311a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030c8:	6a23      	ldr	r3, [r4, #32]
 80030ca:	68ea      	ldr	r2, [r5, #12]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	493f      	ldr	r1, [pc, #252]	; (80031cc <HAL_RCC_OscConfig+0x44c>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	4313      	orrs	r3, r2
 80030d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030d6:	4313      	orrs	r3, r2
 80030d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030da:	4313      	orrs	r3, r2
 80030dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030de:	4313      	orrs	r3, r2
 80030e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	0212      	lsls	r2, r2, #8
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	682a      	ldr	r2, [r5, #0]
 80030ee:	045b      	lsls	r3, r3, #17
 80030f0:	4313      	orrs	r3, r2
 80030f2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	68ea      	ldr	r2, [r5, #12]
 80030f8:	055b      	lsls	r3, r3, #21
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80030fe:	f7fe f8e9 	bl	80012d4 <HAL_GetTick>
 8003102:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003104:	04a4      	lsls	r4, r4, #18
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	4223      	tst	r3, r4
 800310a:	d000      	beq.n	800310e <HAL_RCC_OscConfig+0x38e>
 800310c:	e652      	b.n	8002db4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe f8e1 	bl	80012d4 <HAL_GetTick>
 8003112:	1b80      	subs	r0, r0, r6
 8003114:	2802      	cmp	r0, #2
 8003116:	d9f6      	bls.n	8003106 <HAL_RCC_OscConfig+0x386>
 8003118:	e676      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe f8db 	bl	80012d4 <HAL_GetTick>
 800311e:	1bc0      	subs	r0, r0, r7
 8003120:	2802      	cmp	r0, #2
 8003122:	d9cd      	bls.n	80030c0 <HAL_RCC_OscConfig+0x340>
 8003124:	e670      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003126:	2203      	movs	r2, #3
 8003128:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312a:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800312c:	4393      	bics	r3, r2
 800312e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003130:	68eb      	ldr	r3, [r5, #12]
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003136:	4013      	ands	r3, r2
 8003138:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800313a:	f7fe f8cb 	bl	80012d4 <HAL_GetTick>
 800313e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	4223      	tst	r3, r4
 8003144:	d100      	bne.n	8003148 <HAL_RCC_OscConfig+0x3c8>
 8003146:	e635      	b.n	8002db4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe f8c4 	bl	80012d4 <HAL_GetTick>
 800314c:	1b80      	subs	r0, r0, r6
 800314e:	2802      	cmp	r0, #2
 8003150:	d9f6      	bls.n	8003140 <HAL_RCC_OscConfig+0x3c0>
 8003152:	e659      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	2a01      	cmp	r2, #1
 8003156:	d100      	bne.n	800315a <HAL_RCC_OscConfig+0x3da>
 8003158:	e617      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 800315a:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315c:	2303      	movs	r3, #3
 800315e:	6a22      	ldr	r2, [r4, #32]
 8003160:	4003      	ands	r3, r0
 8003162:	4293      	cmp	r3, r2
 8003164:	d000      	beq.n	8003168 <HAL_RCC_OscConfig+0x3e8>
 8003166:	e610      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003168:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800316c:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	4293      	cmp	r3, r2
 8003170:	d000      	beq.n	8003174 <HAL_RCC_OscConfig+0x3f4>
 8003172:	e60a      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003174:	22fe      	movs	r2, #254	; 0xfe
 8003176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003178:	01d2      	lsls	r2, r2, #7
 800317a:	4002      	ands	r2, r0
 800317c:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d000      	beq.n	8003184 <HAL_RCC_OscConfig+0x404>
 8003182:	e602      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003184:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003188:	039b      	lsls	r3, r3, #14
 800318a:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d000      	beq.n	8003192 <HAL_RCC_OscConfig+0x412>
 8003190:	e5fb      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003192:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003194:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003196:	051b      	lsls	r3, r3, #20
 8003198:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800319a:	4293      	cmp	r3, r2
 800319c:	d000      	beq.n	80031a0 <HAL_RCC_OscConfig+0x420>
 800319e:	e5f4      	b.n	8002d8a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031a2:	0f40      	lsrs	r0, r0, #29
 80031a4:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031a6:	1ac0      	subs	r0, r0, r3
 80031a8:	1e43      	subs	r3, r0, #1
 80031aa:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80031ac:	b2c0      	uxtb	r0, r0
 80031ae:	e5ed      	b.n	8002d8c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80031b2:	4313      	orrs	r3, r2
 80031b4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80031b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80031b8:	4013      	ands	r3, r2
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	e700      	b.n	8002fc4 <HAL_RCC_OscConfig+0x244>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40021000 	.word	0x40021000
 80031c8:	feffffff 	.word	0xfeffffff
 80031cc:	11c1808c 	.word	0x11c1808c
 80031d0:	eefeffff 	.word	0xeefeffff

080031d4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031d4:	2338      	movs	r3, #56	; 0x38
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_RCC_GetSysClockFreq+0x80>)
{
 80031d8:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031da:	6891      	ldr	r1, [r2, #8]
 80031dc:	0014      	movs	r4, r2
 80031de:	4219      	tst	r1, r3
 80031e0:	d108      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031e2:	2101      	movs	r1, #1
 80031e4:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80031e6:	481c      	ldr	r0, [pc, #112]	; (8003258 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031e8:	049b      	lsls	r3, r3, #18
 80031ea:	0f5b      	lsrs	r3, r3, #29
 80031ec:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80031ee:	f7fc ff9d 	bl	800012c <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031f4:	6891      	ldr	r1, [r2, #8]
 80031f6:	4019      	ands	r1, r3
 80031f8:	2908      	cmp	r1, #8
 80031fa:	d025      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031fc:	6891      	ldr	r1, [r2, #8]
 80031fe:	4019      	ands	r1, r3
 8003200:	2910      	cmp	r1, #16
 8003202:	d115      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003204:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003206:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003208:	43db      	mvns	r3, r3
 800320a:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320c:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800320e:	0649      	lsls	r1, r1, #25
 8003210:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003212:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003214:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003216:	4015      	ands	r5, r2
    switch (pllsource)
 8003218:	079b      	lsls	r3, r3, #30
 800321a:	d107      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800321c:	480f      	ldr	r0, [pc, #60]	; (800325c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800321e:	f7fc ff85 	bl	800012c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003222:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003224:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003226:	0f49      	lsrs	r1, r1, #29
 8003228:	3101      	adds	r1, #1
 800322a:	e7e0      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800322c:	480a      	ldr	r0, [pc, #40]	; (8003258 <HAL_RCC_GetSysClockFreq+0x84>)
 800322e:	e7f6      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003230:	6891      	ldr	r1, [r2, #8]
 8003232:	4019      	ands	r1, r3
 8003234:	2920      	cmp	r1, #32
 8003236:	d009      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003238:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800323a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800323c:	4013      	ands	r3, r2
 800323e:	2b18      	cmp	r3, #24
 8003240:	d1d7      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8003242:	20fa      	movs	r0, #250	; 0xfa
 8003244:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8003246:	e7d4      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <HAL_RCC_GetSysClockFreq+0x88>)
 800324a:	e7d2      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800324c:	2080      	movs	r0, #128	; 0x80
 800324e:	0200      	lsls	r0, r0, #8
 8003250:	e7cf      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1e>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40021000 	.word	0x40021000
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_ClockConfig>:
{
 8003260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003262:	0005      	movs	r5, r0
 8003264:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8003266:	2800      	cmp	r0, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800326a:	2001      	movs	r0, #1
}
 800326c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800326e:	2707      	movs	r7, #7
 8003270:	4c4a      	ldr	r4, [pc, #296]	; (800339c <HAL_RCC_ClockConfig+0x13c>)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	403b      	ands	r3, r7
 8003276:	428b      	cmp	r3, r1
 8003278:	d32a      	bcc.n	80032d0 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327a:	6829      	ldr	r1, [r5, #0]
 800327c:	078b      	lsls	r3, r1, #30
 800327e:	d43b      	bmi.n	80032f8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003280:	07cb      	lsls	r3, r1, #31
 8003282:	d448      	bmi.n	8003316 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	2707      	movs	r7, #7
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	403b      	ands	r3, r7
 800328a:	429e      	cmp	r6, r3
 800328c:	d20a      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	43bb      	bics	r3, r7
 8003292:	4333      	orrs	r3, r6
 8003294:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003296:	f7fe f81d 	bl	80012d4 <HAL_GetTick>
 800329a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	403b      	ands	r3, r7
 80032a0:	429e      	cmp	r6, r3
 80032a2:	d16b      	bne.n	800337c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	4c3e      	ldr	r4, [pc, #248]	; (80033a0 <HAL_RCC_ClockConfig+0x140>)
 80032a8:	075b      	lsls	r3, r3, #29
 80032aa:	d46f      	bmi.n	800338c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80032ac:	f7ff ff92 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80032b0:	68a3      	ldr	r3, [r4, #8]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <HAL_RCC_ClockConfig+0x144>)
 80032b4:	051b      	lsls	r3, r3, #20
 80032b6:	0f1b      	lsrs	r3, r3, #28
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	589b      	ldr	r3, [r3, r2]
 80032bc:	221f      	movs	r2, #31
 80032be:	4013      	ands	r3, r2
 80032c0:	40d8      	lsrs	r0, r3
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_ClockConfig+0x148>)
 80032c4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_ClockConfig+0x14c>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	f7fd ffbb 	bl	8001244 <HAL_InitTick>
 80032ce:	e7cd      	b.n	800326c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	43bb      	bics	r3, r7
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80032d8:	f7fd fffc 	bl	80012d4 <HAL_GetTick>
 80032dc:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	403b      	ands	r3, r7
 80032e2:	429e      	cmp	r6, r3
 80032e4:	d0c9      	beq.n	800327a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fd fff5 	bl	80012d4 <HAL_GetTick>
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_RCC_ClockConfig+0x150>)
 80032f0:	4298      	cmp	r0, r3
 80032f2:	d9f4      	bls.n	80032de <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80032f4:	2003      	movs	r0, #3
 80032f6:	e7b9      	b.n	800326c <HAL_RCC_ClockConfig+0xc>
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fa:	074b      	lsls	r3, r1, #29
 80032fc:	d504      	bpl.n	8003308 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032fe:	23e0      	movs	r3, #224	; 0xe0
 8003300:	6890      	ldr	r0, [r2, #8]
 8003302:	01db      	lsls	r3, r3, #7
 8003304:	4303      	orrs	r3, r0
 8003306:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	6893      	ldr	r3, [r2, #8]
 800330a:	482a      	ldr	r0, [pc, #168]	; (80033b4 <HAL_RCC_ClockConfig+0x154>)
 800330c:	4003      	ands	r3, r0
 800330e:	68a8      	ldr	r0, [r5, #8]
 8003310:	4303      	orrs	r3, r0
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e7b4      	b.n	8003280 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	686a      	ldr	r2, [r5, #4]
 8003318:	4f21      	ldr	r7, [pc, #132]	; (80033a0 <HAL_RCC_ClockConfig+0x140>)
 800331a:	2a01      	cmp	r2, #1
 800331c:	d119      	bne.n	8003352 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	039b      	lsls	r3, r3, #14
 8003322:	d5a2      	bpl.n	800326a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003324:	2107      	movs	r1, #7
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	438b      	bics	r3, r1
 800332a:	4313      	orrs	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800332e:	f7fd ffd1 	bl	80012d4 <HAL_GetTick>
 8003332:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003334:	2338      	movs	r3, #56	; 0x38
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	401a      	ands	r2, r3
 800333a:	686b      	ldr	r3, [r5, #4]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	429a      	cmp	r2, r3
 8003340:	d0a0      	beq.n	8003284 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003342:	f7fd ffc7 	bl	80012d4 <HAL_GetTick>
 8003346:	9b01      	ldr	r3, [sp, #4]
 8003348:	1ac0      	subs	r0, r0, r3
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x150>)
 800334c:	4298      	cmp	r0, r3
 800334e:	d9f1      	bls.n	8003334 <HAL_RCC_ClockConfig+0xd4>
 8003350:	e7d0      	b.n	80032f4 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	2a02      	cmp	r2, #2
 8003354:	d103      	bne.n	800335e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	019b      	lsls	r3, r3, #6
 800335a:	d4e3      	bmi.n	8003324 <HAL_RCC_ClockConfig+0xc4>
 800335c:	e785      	b.n	800326a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800335e:	2a00      	cmp	r2, #0
 8003360:	d103      	bne.n	800336a <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	055b      	lsls	r3, r3, #21
 8003366:	d4dd      	bmi.n	8003324 <HAL_RCC_ClockConfig+0xc4>
 8003368:	e77f      	b.n	800326a <HAL_RCC_ClockConfig+0xa>
 800336a:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800336c:	2a03      	cmp	r2, #3
 800336e:	d103      	bne.n	8003378 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003370:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4219      	tst	r1, r3
 8003374:	d1d6      	bne.n	8003324 <HAL_RCC_ClockConfig+0xc4>
 8003376:	e778      	b.n	800326a <HAL_RCC_ClockConfig+0xa>
 8003378:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800337a:	e7fa      	b.n	8003372 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd ffaa 	bl	80012d4 <HAL_GetTick>
 8003380:	9b01      	ldr	r3, [sp, #4]
 8003382:	1ac0      	subs	r0, r0, r3
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_RCC_ClockConfig+0x150>)
 8003386:	4298      	cmp	r0, r3
 8003388:	d988      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
 800338a:	e7b3      	b.n	80032f4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x158>)
 8003390:	4013      	ands	r3, r2
 8003392:	68ea      	ldr	r2, [r5, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60a3      	str	r3, [r4, #8]
 8003398:	e788      	b.n	80032ac <HAL_RCC_ClockConfig+0x4c>
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08006d58 	.word	0x08006d58
 80033a8:	20000010 	.word	0x20000010
 80033ac:	20000004 	.word	0x20000004
 80033b0:	00001388 	.word	0x00001388
 80033b4:	fffff0ff 	.word	0xfffff0ff
 80033b8:	ffff8fff 	.word	0xffff8fff

080033bc <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80033be:	4a07      	ldr	r2, [pc, #28]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	045b      	lsls	r3, r3, #17
 80033c4:	0f5b      	lsrs	r3, r3, #29
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	589b      	ldr	r3, [r3, r2]
 80033ca:	221f      	movs	r2, #31
 80033cc:	4013      	ands	r3, r2
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d0:	6810      	ldr	r0, [r2, #0]
 80033d2:	40d8      	lsrs	r0, r3
}
 80033d4:	4770      	bx	lr
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08006d98 	.word	0x08006d98
 80033e0:	20000010 	.word	0x20000010

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e8:	682b      	ldr	r3, [r5, #0]
{
 80033ea:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ec:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ee:	039b      	lsls	r3, r3, #14
 80033f0:	d550      	bpl.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	4c6f      	ldr	r4, [pc, #444]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fc:	4213      	tst	r3, r2
 80033fe:	d108      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003402:	4313      	orrs	r3, r2
 8003404:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003408:	4013      	ands	r3, r2
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003412:	2780      	movs	r7, #128	; 0x80
 8003414:	4e68      	ldr	r6, [pc, #416]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003416:	007f      	lsls	r7, r7, #1
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	433b      	orrs	r3, r7
 800341c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800341e:	f7fd ff59 	bl	80012d4 <HAL_GetTick>
 8003422:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003424:	6833      	ldr	r3, [r6, #0]
 8003426:	423b      	tst	r3, r7
 8003428:	d026      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800342a:	23c0      	movs	r3, #192	; 0xc0
 800342c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003432:	d00f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003434:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003436:	4293      	cmp	r3, r2
 8003438:	d00c      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800343c:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003440:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	0252      	lsls	r2, r2, #9
 8003446:	430a      	orrs	r2, r1
 8003448:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800344c:	495c      	ldr	r1, [pc, #368]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800344e:	400a      	ands	r2, r1
 8003450:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003452:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003454:	07db      	lsls	r3, r3, #31
 8003456:	d507      	bpl.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd ff3c 	bl	80012d4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800345e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003462:	423b      	tst	r3, r7
 8003464:	d100      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003466:	e09d      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003468:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800346a:	4a54      	ldr	r2, [pc, #336]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800346c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800346e:	4013      	ands	r3, r2
 8003470:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003472:	4313      	orrs	r3, r2
 8003474:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fd ff2c 	bl	80012d4 <HAL_GetTick>
 800347c:	9b01      	ldr	r3, [sp, #4]
 800347e:	1ac0      	subs	r0, r0, r3
 8003480:	2802      	cmp	r0, #2
 8003482:	d9cf      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003486:	9b00      	ldr	r3, [sp, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d103      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800348e:	4a4d      	ldr	r2, [pc, #308]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003490:	4013      	ands	r3, r2
 8003492:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	07da      	lsls	r2, r3, #31
 8003498:	d506      	bpl.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349a:	2403      	movs	r4, #3
 800349c:	4945      	ldr	r1, [pc, #276]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034a0:	43a2      	bics	r2, r4
 80034a2:	686c      	ldr	r4, [r5, #4]
 80034a4:	4322      	orrs	r2, r4
 80034a6:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a8:	079a      	lsls	r2, r3, #30
 80034aa:	d506      	bpl.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ac:	240c      	movs	r4, #12
 80034ae:	4941      	ldr	r1, [pc, #260]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034b2:	43a2      	bics	r2, r4
 80034b4:	68ac      	ldr	r4, [r5, #8]
 80034b6:	4322      	orrs	r2, r4
 80034b8:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ba:	069a      	lsls	r2, r3, #26
 80034bc:	d506      	bpl.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034be:	493d      	ldr	r1, [pc, #244]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	4c41      	ldr	r4, [pc, #260]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034c2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034c4:	4022      	ands	r2, r4
 80034c6:	68ec      	ldr	r4, [r5, #12]
 80034c8:	4322      	orrs	r2, r4
 80034ca:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034cc:	059a      	lsls	r2, r3, #22
 80034ce:	d506      	bpl.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d0:	4938      	ldr	r1, [pc, #224]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	4c3e      	ldr	r4, [pc, #248]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034d4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034d6:	4022      	ands	r2, r4
 80034d8:	69ac      	ldr	r4, [r5, #24]
 80034da:	4322      	orrs	r2, r4
 80034dc:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034de:	055a      	lsls	r2, r3, #21
 80034e0:	d506      	bpl.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e2:	4934      	ldr	r1, [pc, #208]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	4c3a      	ldr	r4, [pc, #232]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034e6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034e8:	4022      	ands	r2, r4
 80034ea:	69ec      	ldr	r4, [r5, #28]
 80034ec:	4322      	orrs	r2, r4
 80034ee:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f0:	065a      	lsls	r2, r3, #25
 80034f2:	d506      	bpl.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f4:	492f      	ldr	r1, [pc, #188]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	4c37      	ldr	r4, [pc, #220]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034f8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80034fa:	4022      	ands	r2, r4
 80034fc:	692c      	ldr	r4, [r5, #16]
 80034fe:	4322      	orrs	r2, r4
 8003500:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003502:	045a      	lsls	r2, r3, #17
 8003504:	d50f      	bpl.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003506:	492b      	ldr	r1, [pc, #172]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	6a2c      	ldr	r4, [r5, #32]
 800350a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	0892      	lsrs	r2, r2, #2
 8003510:	4322      	orrs	r2, r4
 8003512:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	05d2      	lsls	r2, r2, #23
 8003518:	4294      	cmp	r4, r2
 800351a:	d104      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	68cc      	ldr	r4, [r1, #12]
 8003520:	0252      	lsls	r2, r2, #9
 8003522:	4322      	orrs	r2, r4
 8003524:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003526:	031a      	lsls	r2, r3, #12
 8003528:	d506      	bpl.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800352a:	2440      	movs	r4, #64	; 0x40
 800352c:	4921      	ldr	r1, [pc, #132]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003530:	43a2      	bics	r2, r4
 8003532:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003534:	4322      	orrs	r2, r4
 8003536:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003538:	029a      	lsls	r2, r3, #10
 800353a:	d50f      	bpl.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800353c:	491d      	ldr	r1, [pc, #116]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4e26      	ldr	r6, [pc, #152]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003540:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003542:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003544:	4032      	ands	r2, r6
 8003546:	4322      	orrs	r2, r4
 8003548:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	03d2      	lsls	r2, r2, #15
 800354e:	4294      	cmp	r4, r2
 8003550:	d104      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	68cc      	ldr	r4, [r1, #12]
 8003556:	0452      	lsls	r2, r2, #17
 8003558:	4322      	orrs	r2, r4
 800355a:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800355c:	025a      	lsls	r2, r3, #9
 800355e:	d50d      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003560:	4c14      	ldr	r4, [pc, #80]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	4e1e      	ldr	r6, [pc, #120]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003564:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003566:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003568:	4031      	ands	r1, r6
 800356a:	4311      	orrs	r1, r2
 800356c:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	0449      	lsls	r1, r1, #17
 8003572:	428a      	cmp	r2, r1
 8003574:	d102      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003576:	68e1      	ldr	r1, [r4, #12]
 8003578:	430a      	orrs	r2, r1
 800357a:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800357c:	051b      	lsls	r3, r3, #20
 800357e:	d50f      	bpl.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003580:	490c      	ldr	r1, [pc, #48]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4c17      	ldr	r4, [pc, #92]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003584:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003586:	696a      	ldr	r2, [r5, #20]
 8003588:	4023      	ands	r3, r4
 800358a:	4313      	orrs	r3, r2
 800358c:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	01db      	lsls	r3, r3, #7
 8003592:	429a      	cmp	r2, r3
 8003594:	d104      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	68ca      	ldr	r2, [r1, #12]
 800359a:	025b      	lsls	r3, r3, #9
 800359c:	4313      	orrs	r3, r2
 800359e:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 80035a0:	b005      	add	sp, #20
 80035a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fd fe96 	bl	80012d4 <HAL_GetTick>
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80035aa:	1b80      	subs	r0, r0, r6
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d800      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80035b0:	e756      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035b2:	e767      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40007000 	.word	0x40007000
 80035bc:	fffffcff 	.word	0xfffffcff
 80035c0:	fffeffff 	.word	0xfffeffff
 80035c4:	efffffff 	.word	0xefffffff
 80035c8:	fffff3ff 	.word	0xfffff3ff
 80035cc:	fff3ffff 	.word	0xfff3ffff
 80035d0:	ffcfffff 	.word	0xffcfffff
 80035d4:	ffffcfff 	.word	0xffffcfff
 80035d8:	ffbfffff 	.word	0xffbfffff
 80035dc:	feffffff 	.word	0xfeffffff
 80035e0:	ffff3fff 	.word	0xffff3fff
 80035e4:	00001388 	.word	0x00001388

080035e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
  if (hspi == NULL)
 80035ee:	2c00      	cmp	r4, #0
 80035f0:	d04b      	beq.n	800368a <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f2:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f4:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f8:	355d      	adds	r5, #93	; 0x5d
 80035fa:	782b      	ldrb	r3, [r5, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003602:	0022      	movs	r2, r4
 8003604:	325c      	adds	r2, #92	; 0x5c
 8003606:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003608:	0020      	movs	r0, r4
 800360a:	f001 fca1 	bl	8004f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800360e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003614:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003616:	680b      	ldr	r3, [r1, #0]
 8003618:	2000      	movs	r0, #0
 800361a:	4393      	bics	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
 800361e:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003620:	68e2      	ldr	r2, [r4, #12]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	429a      	cmp	r2, r3
 8003626:	d931      	bls.n	800368c <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003628:	26f0      	movs	r6, #240	; 0xf0
 800362a:	0136      	lsls	r6, r6, #4
 800362c:	42b2      	cmp	r2, r6
 800362e:	d133      	bne.n	8003698 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003630:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003632:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003634:	2800      	cmp	r0, #0
 8003636:	d103      	bne.n	8003640 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003638:	429a      	cmp	r2, r3
 800363a:	d92f      	bls.n	800369c <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800363c:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800363e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003640:	68a7      	ldr	r7, [r4, #8]
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	69a0      	ldr	r0, [r4, #24]
 8003646:	433b      	orrs	r3, r7
 8003648:	6927      	ldr	r7, [r4, #16]
 800364a:	433b      	orrs	r3, r7
 800364c:	6967      	ldr	r7, [r4, #20]
 800364e:	433b      	orrs	r3, r7
 8003650:	69e7      	ldr	r7, [r4, #28]
 8003652:	433b      	orrs	r3, r7
 8003654:	6a27      	ldr	r7, [r4, #32]
 8003656:	433b      	orrs	r3, r7
 8003658:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800365a:	433b      	orrs	r3, r7
 800365c:	2780      	movs	r7, #128	; 0x80
 800365e:	00bf      	lsls	r7, r7, #2
 8003660:	4007      	ands	r7, r0
 8003662:	433b      	orrs	r3, r7
 8003664:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003668:	0c00      	lsrs	r0, r0, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800366e:	431a      	orrs	r2, r3
 8003670:	2304      	movs	r3, #4
 8003672:	4018      	ands	r0, r3
 8003674:	4310      	orrs	r0, r2
 8003676:	4306      	orrs	r6, r0
 8003678:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800367a:	69cb      	ldr	r3, [r1, #28]
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800367e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003680:	4013      	ands	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003684:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003686:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003688:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800368c:	2680      	movs	r6, #128	; 0x80
 800368e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003690:	429a      	cmp	r2, r3
 8003692:	d0ce      	beq.n	8003632 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	62a0      	str	r0, [r4, #40]	; 0x28
 8003696:	e7cc      	b.n	8003632 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003698:	0006      	movs	r6, r0
 800369a:	e7fb      	b.n	8003694 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800369c:	2301      	movs	r3, #1
 800369e:	e7ce      	b.n	800363e <HAL_SPI_Init+0x56>
 80036a0:	fffff7ff 	.word	0xfffff7ff

080036a4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a4:	2201      	movs	r2, #1
 80036a6:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a8:	4807      	ldr	r0, [pc, #28]	; (80036c8 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036aa:	68d9      	ldr	r1, [r3, #12]
 80036ac:	4311      	orrs	r1, r2
 80036ae:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	2906      	cmp	r1, #6
 80036b6:	d005      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0x20>
 80036b8:	3807      	subs	r0, #7
 80036ba:	4281      	cmp	r1, r0
 80036bc:	d002      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0x20>
  {
    __HAL_TIM_ENABLE(htim);
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	4770      	bx	lr
 80036c8:	00010007 	.word	0x00010007

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_IC_CaptureCallback>:
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_TriggerCallback>:
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d4:	2202      	movs	r2, #2
 80036d6:	6803      	ldr	r3, [r0, #0]
{
 80036d8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036da:	6919      	ldr	r1, [r3, #16]
{
 80036dc:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036de:	4211      	tst	r1, r2
 80036e0:	d00e      	beq.n	8003700 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036e2:	68d9      	ldr	r1, [r3, #12]
 80036e4:	4211      	tst	r1, r2
 80036e6:	d00b      	beq.n	8003700 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e8:	3a05      	subs	r2, #5
 80036ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	3204      	adds	r2, #4
 80036f0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f2:	079b      	lsls	r3, r3, #30
 80036f4:	d100      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x24>
 80036f6:	e086      	b.n	8003806 <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f8:	f7ff ffe9 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fc:	2300      	movs	r3, #0
 80036fe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003700:	2204      	movs	r2, #4
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	6919      	ldr	r1, [r3, #16]
 8003706:	4211      	tst	r1, r2
 8003708:	d011      	beq.n	800372e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370a:	68d9      	ldr	r1, [r3, #12]
 800370c:	4211      	tst	r1, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003710:	3a09      	subs	r2, #9
 8003712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003714:	3207      	adds	r2, #7
 8003716:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	23c0      	movs	r3, #192	; 0xc0
 800371c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	421a      	tst	r2, r3
 8003722:	d100      	bne.n	8003726 <HAL_TIM_IRQHandler+0x52>
 8003724:	e075      	b.n	8003812 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	f7ff ffd2 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	2300      	movs	r3, #0
 800372c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800372e:	2208      	movs	r2, #8
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	6919      	ldr	r1, [r3, #16]
 8003734:	4211      	tst	r1, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003738:	68d9      	ldr	r1, [r3, #12]
 800373a:	4211      	tst	r1, r2
 800373c:	d00b      	beq.n	8003756 <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800373e:	3a11      	subs	r2, #17
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003742:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003744:	320d      	adds	r2, #13
 8003746:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003748:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374a:	079b      	lsls	r3, r3, #30
 800374c:	d067      	beq.n	800381e <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	f7ff ffbe 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	2300      	movs	r3, #0
 8003754:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003756:	2210      	movs	r2, #16
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	6919      	ldr	r1, [r3, #16]
 800375c:	4211      	tst	r1, r2
 800375e:	d010      	beq.n	8003782 <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003760:	68d9      	ldr	r1, [r3, #12]
 8003762:	4211      	tst	r1, r2
 8003764:	d00d      	beq.n	8003782 <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003766:	3a21      	subs	r2, #33	; 0x21
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376a:	3219      	adds	r2, #25
 800376c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	23c0      	movs	r3, #192	; 0xc0
 8003772:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003774:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003776:	421a      	tst	r2, r3
 8003778:	d057      	beq.n	800382a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	f7ff ffa8 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	2300      	movs	r3, #0
 8003780:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003782:	2201      	movs	r2, #1
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	4211      	tst	r1, r2
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800378c:	68d9      	ldr	r1, [r3, #12]
 800378e:	4211      	tst	r1, r2
 8003790:	d004      	beq.n	800379c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003792:	3a03      	subs	r2, #3
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003796:	0020      	movs	r0, r4
 8003798:	f001 f9ce 	bl	8004b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	4211      	tst	r1, r2
 80037a4:	d008      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a6:	68d9      	ldr	r1, [r3, #12]
 80037a8:	4211      	tst	r1, r2
 80037aa:	d005      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ac:	3a02      	subs	r2, #2
 80037ae:	3aff      	subs	r2, #255	; 0xff
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b2:	0020      	movs	r0, r4
 80037b4:	f000 f9d9 	bl	8003b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	05d2      	lsls	r2, r2, #23
 80037be:	d507      	bpl.n	80037d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	0612      	lsls	r2, r2, #24
 80037c4:	d504      	bpl.n	80037d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037c8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80037cc:	f000 f9ce 	bl	8003b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d0:	2240      	movs	r2, #64	; 0x40
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	4211      	tst	r1, r2
 80037d8:	d007      	beq.n	80037ea <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	68d9      	ldr	r1, [r3, #12]
 80037dc:	4211      	tst	r1, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e0:	3a81      	subs	r2, #129	; 0x81
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e4:	0020      	movs	r0, r4
 80037e6:	f7ff ff74 	bl	80036d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ea:	2220      	movs	r2, #32
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	6919      	ldr	r1, [r3, #16]
 80037f0:	4211      	tst	r1, r2
 80037f2:	d007      	beq.n	8003804 <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	4211      	tst	r1, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fa:	3a41      	subs	r2, #65	; 0x41
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fe:	0020      	movs	r0, r4
 8003800:	f000 f9b2 	bl	8003b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	f7ff ff61 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380a:	0020      	movs	r0, r4
 800380c:	f7ff ff60 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003810:	e774      	b.n	80036fc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	f7ff ff5b 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003816:	0020      	movs	r0, r4
 8003818:	f7ff ff5a 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
 800381c:	e785      	b.n	800372a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	f7ff ff55 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003822:	0020      	movs	r0, r4
 8003824:	f7ff ff54 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003828:	e793      	b.n	8003752 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	f7ff ff4f 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	0020      	movs	r0, r4
 8003830:	f7ff ff4e 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003834:	e7a3      	b.n	800377e <HAL_TIM_IRQHandler+0xaa>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	fffffeff 	.word	0xfffffeff

0800383c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <TIM_Base_SetConfig+0x84>)
{
 800383e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003840:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003842:	4290      	cmp	r0, r2
 8003844:	d006      	beq.n	8003854 <TIM_Base_SetConfig+0x18>
 8003846:	2480      	movs	r4, #128	; 0x80
 8003848:	05e4      	lsls	r4, r4, #23
 800384a:	42a0      	cmp	r0, r4
 800384c:	d002      	beq.n	8003854 <TIM_Base_SetConfig+0x18>
 800384e:	4c1d      	ldr	r4, [pc, #116]	; (80038c4 <TIM_Base_SetConfig+0x88>)
 8003850:	42a0      	cmp	r0, r4
 8003852:	d10c      	bne.n	800386e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	2470      	movs	r4, #112	; 0x70
 8003856:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003858:	684c      	ldr	r4, [r1, #4]
 800385a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385c:	4290      	cmp	r0, r2
 800385e:	d012      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 8003860:	2480      	movs	r4, #128	; 0x80
 8003862:	05e4      	lsls	r4, r4, #23
 8003864:	42a0      	cmp	r0, r4
 8003866:	d00e      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 8003868:	4c16      	ldr	r4, [pc, #88]	; (80038c4 <TIM_Base_SetConfig+0x88>)
 800386a:	42a0      	cmp	r0, r4
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 800386e:	4c16      	ldr	r4, [pc, #88]	; (80038c8 <TIM_Base_SetConfig+0x8c>)
 8003870:	42a0      	cmp	r0, r4
 8003872:	d008      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 8003874:	4c15      	ldr	r4, [pc, #84]	; (80038cc <TIM_Base_SetConfig+0x90>)
 8003876:	42a0      	cmp	r0, r4
 8003878:	d005      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 800387a:	4c15      	ldr	r4, [pc, #84]	; (80038d0 <TIM_Base_SetConfig+0x94>)
 800387c:	42a0      	cmp	r0, r4
 800387e:	d002      	beq.n	8003886 <TIM_Base_SetConfig+0x4a>
 8003880:	4c14      	ldr	r4, [pc, #80]	; (80038d4 <TIM_Base_SetConfig+0x98>)
 8003882:	42a0      	cmp	r0, r4
 8003884:	d103      	bne.n	800388e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	4c14      	ldr	r4, [pc, #80]	; (80038d8 <TIM_Base_SetConfig+0x9c>)
 8003888:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388a:	68cc      	ldr	r4, [r1, #12]
 800388c:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388e:	2480      	movs	r4, #128	; 0x80
 8003890:	43a3      	bics	r3, r4
 8003892:	694c      	ldr	r4, [r1, #20]
 8003894:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8003896:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	688b      	ldr	r3, [r1, #8]
 800389a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	680b      	ldr	r3, [r1, #0]
 800389e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a0:	4290      	cmp	r0, r2
 80038a2:	d008      	beq.n	80038b6 <TIM_Base_SetConfig+0x7a>
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <TIM_Base_SetConfig+0x90>)
 80038a6:	4298      	cmp	r0, r3
 80038a8:	d005      	beq.n	80038b6 <TIM_Base_SetConfig+0x7a>
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <TIM_Base_SetConfig+0x94>)
 80038ac:	4298      	cmp	r0, r3
 80038ae:	d002      	beq.n	80038b6 <TIM_Base_SetConfig+0x7a>
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <TIM_Base_SetConfig+0x98>)
 80038b2:	4298      	cmp	r0, r3
 80038b4:	d101      	bne.n	80038ba <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b6:	690b      	ldr	r3, [r1, #16]
 80038b8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ba:	2301      	movs	r3, #1
 80038bc:	6143      	str	r3, [r0, #20]
}
 80038be:	bd10      	pop	{r4, pc}
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40002000 	.word	0x40002000
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800
 80038d8:	fffffcff 	.word	0xfffffcff

080038dc <HAL_TIM_Base_Init>:
{
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	0004      	movs	r4, r0
    return HAL_ERROR;
 80038e0:	2001      	movs	r0, #1
  if (htim == NULL)
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d014      	beq.n	8003910 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80038e6:	0025      	movs	r5, r4
 80038e8:	353d      	adds	r5, #61	; 0x3d
 80038ea:	782b      	ldrb	r3, [r5, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80038f2:	0022      	movs	r2, r4
 80038f4:	323c      	adds	r2, #60	; 0x3c
 80038f6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80038f8:	0020      	movs	r0, r4
 80038fa:	f001 fe07 	bl	800550c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80038fe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003902:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	1d21      	adds	r1, r4, #4
 8003906:	f7ff ff99 	bl	800383c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800390a:	2301      	movs	r3, #1
  return HAL_OK;
 800390c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800390e:	702b      	strb	r3, [r5, #0]
}
 8003910:	bd70      	pop	{r4, r5, r6, pc}
	...

08003914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003914:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003916:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003918:	4d03      	ldr	r5, [pc, #12]	; (8003928 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800391a:	430a      	orrs	r2, r1
 800391c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003920:	4313      	orrs	r3, r2
 8003922:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003924:	6083      	str	r3, [r0, #8]
}
 8003926:	bd30      	pop	{r4, r5, pc}
 8003928:	ffff00ff 	.word	0xffff00ff

0800392c <HAL_TIM_ConfigClockSource>:
{
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800392e:	0005      	movs	r5, r0
 8003930:	2302      	movs	r3, #2
 8003932:	353c      	adds	r5, #60	; 0x3c
 8003934:	782a      	ldrb	r2, [r5, #0]
{
 8003936:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003938:	0018      	movs	r0, r3
 800393a:	2a01      	cmp	r2, #1
 800393c:	d016      	beq.n	800396c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800393e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8003940:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8003942:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8003946:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800394a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_TIM_ConfigClockSource+0x120>)
 800394e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003950:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003952:	680b      	ldr	r3, [r1, #0]
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d063      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0xf4>
 8003958:	d814      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x58>
 800395a:	2b10      	cmp	r3, #16
 800395c:	d00b      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x4a>
 800395e:	d806      	bhi.n	800396e <HAL_TIM_ConfigClockSource+0x42>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8003964:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003966:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003968:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800396a:	7028      	strb	r0, [r5, #0]
}
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800396e:	2b20      	cmp	r3, #32
 8003970:	d001      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x4a>
 8003972:	2b30      	cmp	r3, #48	; 0x30
 8003974:	d1f6      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003976:	4a36      	ldr	r2, [pc, #216]	; (8003a50 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8003978:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800397a:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397c:	2207      	movs	r2, #7
 800397e:	4313      	orrs	r3, r2
 8003980:	430b      	orrs	r3, r1
 8003982:	e019      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8003984:	2b60      	cmp	r3, #96	; 0x60
 8003986:	d034      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xc6>
 8003988:	d818      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x90>
 800398a:	2b50      	cmp	r3, #80	; 0x50
 800398c:	d1ea      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	684a      	ldr	r2, [r1, #4]
 8003990:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003992:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003994:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003996:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003998:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a4:	240a      	movs	r4, #10
 80039a6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80039a8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039ac:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039ae:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_TIM_ConfigClockSource+0x124>)
 80039b2:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b4:	2357      	movs	r3, #87	; 0x57
 80039b6:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80039b8:	6083      	str	r3, [r0, #8]
 80039ba:	e7d3      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d00d      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0xb0>
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	0192      	lsls	r2, r2, #6
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d1cd      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80039c8:	68cb      	ldr	r3, [r1, #12]
 80039ca:	684a      	ldr	r2, [r1, #4]
 80039cc:	6889      	ldr	r1, [r1, #8]
 80039ce:	f7ff ffa1 	bl	8003914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	01db      	lsls	r3, r3, #7
 80039d8:	6891      	ldr	r1, [r2, #8]
 80039da:	e007      	b.n	80039ec <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	68cb      	ldr	r3, [r1, #12]
 80039de:	684a      	ldr	r2, [r1, #4]
 80039e0:	6889      	ldr	r1, [r1, #8]
 80039e2:	f7ff ff97 	bl	8003914 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e6:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]
      break;
 80039f0:	e7b8      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f2:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f4:	684b      	ldr	r3, [r1, #4]
 80039f6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f8:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fa:	4f16      	ldr	r7, [pc, #88]	; (8003a54 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fc:	43a1      	bics	r1, r4
 80039fe:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a00:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a02:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a04:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a08:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003a0a:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a0c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a10:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a14:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a16:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_TIM_ConfigClockSource+0x124>)
 8003a1a:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1c:	2367      	movs	r3, #103	; 0x67
 8003a1e:	e7ca      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a20:	684a      	ldr	r2, [r1, #4]
 8003a22:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a24:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a28:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a30:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a32:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a34:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a36:	240a      	movs	r4, #10
 8003a38:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003a3a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a3c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a3e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a40:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a42:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_TIM_ConfigClockSource+0x124>)
 8003a44:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a46:	2347      	movs	r3, #71	; 0x47
 8003a48:	e7b5      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x8a>
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	ffce0088 	.word	0xffce0088
 8003a50:	ffcfff8f 	.word	0xffcfff8f
 8003a54:	ffff0fff 	.word	0xffff0fff

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5a:	0004      	movs	r4, r0
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	343c      	adds	r4, #60	; 0x3c
 8003a60:	7825      	ldrb	r5, [r4, #0]
{
 8003a62:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003a64:	0010      	movs	r0, r2
 8003a66:	2d01      	cmp	r5, #1
 8003a68:	d01a      	beq.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	001d      	movs	r5, r3
 8003a6c:	353d      	adds	r5, #61	; 0x3d
 8003a6e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a70:	4e0c      	ldr	r6, [pc, #48]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003a76:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a78:	42b2      	cmp	r2, r6
 8003a7a:	d103      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a7c:	4e0a      	ldr	r6, [pc, #40]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003a7e:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a80:	684e      	ldr	r6, [r1, #4]
 8003a82:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a84:	2670      	movs	r6, #112	; 0x70
 8003a86:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a88:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8a:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8c:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8e:	2680      	movs	r6, #128	; 0x80
 8003a90:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a92:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a94:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003a98:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8003a9a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003a9e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	ff0fffff 	.word	0xff0fffff

08003aac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003aac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	0004      	movs	r4, r0
 8003ab0:	343c      	adds	r4, #60	; 0x3c
 8003ab2:	7823      	ldrb	r3, [r4, #0]
{
 8003ab4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d039      	beq.n	8003b30 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003abc:	68c8      	ldr	r0, [r1, #12]
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003ac0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ac2:	4003      	ands	r3, r0
 8003ac4:	6888      	ldr	r0, [r1, #8]
 8003ac6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac8:	481b      	ldr	r0, [pc, #108]	; (8003b38 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003aca:	4003      	ands	r3, r0
 8003acc:	6848      	ldr	r0, [r1, #4]
 8003ace:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ad0:	481a      	ldr	r0, [pc, #104]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8003ad2:	4003      	ands	r3, r0
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ad8:	4819      	ldr	r0, [pc, #100]	; (8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8003ada:	4003      	ands	r3, r0
 8003adc:	6908      	ldr	r0, [r1, #16]
 8003ade:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ae0:	4818      	ldr	r0, [pc, #96]	; (8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8003ae2:	4003      	ands	r3, r0
 8003ae4:	6948      	ldr	r0, [r1, #20]
 8003ae6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae8:	4817      	ldr	r0, [pc, #92]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8003aea:	4003      	ands	r3, r0
 8003aec:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8003aee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003af0:	4816      	ldr	r0, [pc, #88]	; (8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8003af2:	4003      	ands	r3, r0
 8003af4:	6988      	ldr	r0, [r1, #24]
 8003af6:	0400      	lsls	r0, r0, #16
 8003af8:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003afa:	4815      	ldr	r0, [pc, #84]	; (8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003afc:	4282      	cmp	r2, r0
 8003afe:	d114      	bne.n	8003b2a <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b00:	4814      	ldr	r0, [pc, #80]	; (8003b54 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003b02:	4003      	ands	r3, r0
 8003b04:	69c8      	ldr	r0, [r1, #28]
 8003b06:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b08:	4813      	ldr	r0, [pc, #76]	; (8003b58 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003b0a:	4018      	ands	r0, r3
 8003b0c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003b0e:	051b      	lsls	r3, r3, #20
 8003b10:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b12:	4812      	ldr	r0, [pc, #72]	; (8003b5c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003b14:	4003      	ands	r3, r0
 8003b16:	6a08      	ldr	r0, [r1, #32]
 8003b18:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b1a:	4811      	ldr	r0, [pc, #68]	; (8003b60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003b1c:	4003      	ands	r3, r0
 8003b1e:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b20:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b22:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b24:	480f      	ldr	r0, [pc, #60]	; (8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003b26:	4003      	ands	r3, r0
 8003b28:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003b2a:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003b2e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	fffffcff 	.word	0xfffffcff
 8003b38:	fffffbff 	.word	0xfffffbff
 8003b3c:	fffff7ff 	.word	0xfffff7ff
 8003b40:	ffffefff 	.word	0xffffefff
 8003b44:	ffffdfff 	.word	0xffffdfff
 8003b48:	ffffbfff 	.word	0xffffbfff
 8003b4c:	fff0ffff 	.word	0xfff0ffff
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	efffffff 	.word	0xefffffff
 8003b58:	ff0fffff 	.word	0xff0fffff
 8003b5c:	feffffff 	.word	0xfeffffff
 8003b60:	fdffffff 	.word	0xfdffffff
 8003b64:	dfffffff 	.word	0xdfffffff

08003b68 <HAL_TIMEx_CommutCallback>:
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIMEx_BreakCallback>:
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b6c:	4770      	bx	lr
	...

08003b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b74:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b76:	69c1      	ldr	r1, [r0, #28]
 8003b78:	6883      	ldr	r3, [r0, #8]
 8003b7a:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003b7c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b7e:	4303      	orrs	r3, r0
 8003b80:	6960      	ldr	r0, [r4, #20]
 8003b82:	4303      	orrs	r3, r0
 8003b84:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b86:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003b88:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b8a:	4da4      	ldr	r5, [pc, #656]	; (8003e1c <UART_SetConfig+0x2ac>)
 8003b8c:	4028      	ands	r0, r5
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	6853      	ldr	r3, [r2, #4]
 8003b94:	48a2      	ldr	r0, [pc, #648]	; (8003e20 <UART_SetConfig+0x2b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b96:	4da3      	ldr	r5, [pc, #652]	; (8003e24 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b98:	4003      	ands	r3, r0
 8003b9a:	68e0      	ldr	r0, [r4, #12]
 8003b9c:	4303      	orrs	r3, r0
 8003b9e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba2:	42aa      	cmp	r2, r5
 8003ba4:	d001      	beq.n	8003baa <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ba6:	6a23      	ldr	r3, [r4, #32]
 8003ba8:	4318      	orrs	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003baa:	6893      	ldr	r3, [r2, #8]
 8003bac:	4e9e      	ldr	r6, [pc, #632]	; (8003e28 <UART_SetConfig+0x2b8>)
 8003bae:	4033      	ands	r3, r6

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bb0:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb2:	4303      	orrs	r3, r0
 8003bb4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bb6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bba:	43b0      	bics	r0, r6
 8003bbc:	4318      	orrs	r0, r3
 8003bbe:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc0:	489a      	ldr	r0, [pc, #616]	; (8003e2c <UART_SetConfig+0x2bc>)
 8003bc2:	4282      	cmp	r2, r0
 8003bc4:	d117      	bne.n	8003bf6 <UART_SetConfig+0x86>
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	4a99      	ldr	r2, [pc, #612]	; (8003e30 <UART_SetConfig+0x2c0>)
 8003bca:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bcc:	4002      	ands	r2, r0
 8003bce:	4899      	ldr	r0, [pc, #612]	; (8003e34 <UART_SetConfig+0x2c4>)
 8003bd0:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	0212      	lsls	r2, r2, #8
 8003bd6:	4291      	cmp	r1, r2
 8003bd8:	d000      	beq.n	8003bdc <UART_SetConfig+0x6c>
 8003bda:	e289      	b.n	80040f0 <UART_SetConfig+0x580>
  {
    switch (clocksource)
 8003bdc:	2808      	cmp	r0, #8
 8003bde:	d82b      	bhi.n	8003c38 <UART_SetConfig+0xc8>
 8003be0:	f7fc fa9a 	bl	8000118 <__gnu_thumb1_case_uhi>
 8003be4:	002a037d 	.word	0x002a037d
 8003be8:	002a021a 	.word	0x002a021a
 8003bec:	002a024e 	.word	0x002a024e
 8003bf0:	002a002a 	.word	0x002a002a
 8003bf4:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf6:	4890      	ldr	r0, [pc, #576]	; (8003e38 <UART_SetConfig+0x2c8>)
 8003bf8:	4282      	cmp	r2, r0
 8003bfa:	d105      	bne.n	8003c08 <UART_SetConfig+0x98>
 8003bfc:	200c      	movs	r0, #12
 8003bfe:	4a8c      	ldr	r2, [pc, #560]	; (8003e30 <UART_SetConfig+0x2c0>)
 8003c00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c02:	4002      	ands	r2, r0
 8003c04:	488d      	ldr	r0, [pc, #564]	; (8003e3c <UART_SetConfig+0x2cc>)
 8003c06:	e7e3      	b.n	8003bd0 <UART_SetConfig+0x60>
 8003c08:	488d      	ldr	r0, [pc, #564]	; (8003e40 <UART_SetConfig+0x2d0>)
 8003c0a:	4282      	cmp	r2, r0
 8003c0c:	d100      	bne.n	8003c10 <UART_SetConfig+0xa0>
 8003c0e:	e361      	b.n	80042d4 <UART_SetConfig+0x764>
 8003c10:	488c      	ldr	r0, [pc, #560]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003c12:	4282      	cmp	r2, r0
 8003c14:	d100      	bne.n	8003c18 <UART_SetConfig+0xa8>
 8003c16:	e35d      	b.n	80042d4 <UART_SetConfig+0x764>
 8003c18:	2010      	movs	r0, #16
 8003c1a:	42aa      	cmp	r2, r5
 8003c1c:	d1d9      	bne.n	8003bd2 <UART_SetConfig+0x62>
 8003c1e:	21c0      	movs	r1, #192	; 0xc0
 8003c20:	2080      	movs	r0, #128	; 0x80
 8003c22:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <UART_SetConfig+0x2c0>)
 8003c24:	0109      	lsls	r1, r1, #4
 8003c26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c28:	00c0      	lsls	r0, r0, #3
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	4282      	cmp	r2, r0
 8003c2e:	d100      	bne.n	8003c32 <UART_SetConfig+0xc2>
 8003c30:	e09c      	b.n	8003d6c <UART_SetConfig+0x1fc>
 8003c32:	d80d      	bhi.n	8003c50 <UART_SetConfig+0xe0>
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d04e      	beq.n	8003cd6 <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 8003c38:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c3a:	0021      	movs	r1, r4
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	316a      	adds	r1, #106	; 0x6a
 8003c40:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 8003c42:	3902      	subs	r1, #2
 8003c44:	800b      	strh	r3, [r1, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c46:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8003c48:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 8003c4a:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8003c4c:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c50:	2080      	movs	r0, #128	; 0x80
 8003c52:	0100      	lsls	r0, r0, #4
 8003c54:	4282      	cmp	r2, r0
 8003c56:	d06e      	beq.n	8003d36 <UART_SetConfig+0x1c6>
 8003c58:	428a      	cmp	r2, r1
 8003c5a:	d1ed      	bne.n	8003c38 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <UART_SetConfig+0xf2>
 8003c60:	e0c7      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d100      	bne.n	8003c68 <UART_SetConfig+0xf8>
 8003c66:	e0c7      	b.n	8003df8 <UART_SetConfig+0x288>
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d100      	bne.n	8003c6e <UART_SetConfig+0xfe>
 8003c6c:	e0c8      	b.n	8003e00 <UART_SetConfig+0x290>
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d100      	bne.n	8003c74 <UART_SetConfig+0x104>
 8003c72:	e0c8      	b.n	8003e06 <UART_SetConfig+0x296>
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d100      	bne.n	8003c7a <UART_SetConfig+0x10a>
 8003c78:	e0c7      	b.n	8003e0a <UART_SetConfig+0x29a>
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d100      	bne.n	8003c80 <UART_SetConfig+0x110>
 8003c7e:	e0c7      	b.n	8003e10 <UART_SetConfig+0x2a0>
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d100      	bne.n	8003c86 <UART_SetConfig+0x116>
 8003c84:	e0c6      	b.n	8003e14 <UART_SetConfig+0x2a4>
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	2b07      	cmp	r3, #7
 8003c8a:	d100      	bne.n	8003c8e <UART_SetConfig+0x11e>
 8003c8c:	e0c4      	b.n	8003e18 <UART_SetConfig+0x2a8>
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d100      	bne.n	8003c94 <UART_SetConfig+0x124>
 8003c92:	e0f7      	b.n	8003e84 <UART_SetConfig+0x314>
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d100      	bne.n	8003c9a <UART_SetConfig+0x12a>
 8003c98:	e0f6      	b.n	8003e88 <UART_SetConfig+0x318>
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d100      	bne.n	8003ca0 <UART_SetConfig+0x130>
 8003c9e:	e0f5      	b.n	8003e8c <UART_SetConfig+0x31c>
 8003ca0:	2b0b      	cmp	r3, #11
 8003ca2:	d000      	beq.n	8003ca6 <UART_SetConfig+0x136>
 8003ca4:	e0a6      	b.n	8003df4 <UART_SetConfig+0x284>
 8003ca6:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca8:	2003      	movs	r0, #3
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	4350      	muls	r0, r2
 8003cae:	4288      	cmp	r0, r1
 8003cb0:	d8c2      	bhi.n	8003c38 <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cb2:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cb4:	4288      	cmp	r0, r1
 8003cb6:	d3bf      	bcc.n	8003c38 <UART_SetConfig+0xc8>
        switch (clocksource)
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d900      	bls.n	8003cbe <UART_SetConfig+0x14e>
 8003cbc:	e1a9      	b.n	8004012 <UART_SetConfig+0x4a2>
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7fc fa2a 	bl	8000118 <__gnu_thumb1_case_uhi>
 8003cc4:	01a700e6 	.word	0x01a700e6
 8003cc8:	01a70138 	.word	0x01a70138
 8003ccc:	01a7016e 	.word	0x01a7016e
 8003cd0:	01a701a7 	.word	0x01a701a7
 8003cd4:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003cd6:	f7ff fb71 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cdc:	2101      	movs	r1, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d021      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003ce2:	1849      	adds	r1, r1, r1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d01e      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003ce8:	3102      	adds	r1, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d01b      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003cee:	3102      	adds	r1, #2
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d018      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003cf4:	3102      	adds	r1, #2
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d015      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003cfa:	3102      	adds	r1, #2
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d012      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d00:	3102      	adds	r1, #2
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d00f      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d06:	3104      	adds	r1, #4
 8003d08:	2b07      	cmp	r3, #7
 8003d0a:	d00c      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d0c:	3110      	adds	r1, #16
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d009      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d12:	3120      	adds	r1, #32
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d006      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d18:	3140      	adds	r1, #64	; 0x40
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d003      	beq.n	8003d26 <UART_SetConfig+0x1b6>
 8003d1e:	397f      	subs	r1, #127	; 0x7f
 8003d20:	2b0b      	cmp	r3, #11
 8003d22:	d100      	bne.n	8003d26 <UART_SetConfig+0x1b6>
 8003d24:	31ff      	adds	r1, #255	; 0xff
 8003d26:	f7fc fa01 	bl	800012c <__udivsi3>
        break;
 8003d2a:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d2c:	0001      	movs	r1, r0
 8003d2e:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8003d30:	4291      	cmp	r1, r2
 8003d32:	d1b9      	bne.n	8003ca8 <UART_SetConfig+0x138>
 8003d34:	e781      	b.n	8003c3a <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d059      	beq.n	8003dee <UART_SetConfig+0x27e>
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d043      	beq.n	8003dc6 <UART_SetConfig+0x256>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d043      	beq.n	8003dca <UART_SetConfig+0x25a>
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d043      	beq.n	8003dce <UART_SetConfig+0x25e>
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d043      	beq.n	8003dd2 <UART_SetConfig+0x262>
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d043      	beq.n	8003dd6 <UART_SetConfig+0x266>
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d043      	beq.n	8003dda <UART_SetConfig+0x26a>
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	d043      	beq.n	8003dde <UART_SetConfig+0x26e>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d043      	beq.n	8003de2 <UART_SetConfig+0x272>
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	d043      	beq.n	8003de6 <UART_SetConfig+0x276>
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d043      	beq.n	8003dea <UART_SetConfig+0x27a>
 8003d62:	2b0b      	cmp	r3, #11
 8003d64:	d143      	bne.n	8003dee <UART_SetConfig+0x27e>
 8003d66:	4938      	ldr	r1, [pc, #224]	; (8003e48 <UART_SetConfig+0x2d8>)
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e79d      	b.n	8003ca8 <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003d6c:	f7ff fa32 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d72:	2101      	movs	r1, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d021      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d78:	1849      	adds	r1, r1, r1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d01e      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d7e:	3102      	adds	r1, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d01b      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d84:	3102      	adds	r1, #2
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d018      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d8a:	3102      	adds	r1, #2
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d015      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d90:	3102      	adds	r1, #2
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d012      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d96:	3102      	adds	r1, #2
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d00f      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003d9c:	3104      	adds	r1, #4
 8003d9e:	2b07      	cmp	r3, #7
 8003da0:	d00c      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003da2:	3110      	adds	r1, #16
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d009      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003da8:	3120      	adds	r1, #32
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003dae:	3140      	adds	r1, #64	; 0x40
 8003db0:	2b0a      	cmp	r3, #10
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x24c>
 8003db4:	397f      	subs	r1, #127	; 0x7f
 8003db6:	2b0b      	cmp	r3, #11
 8003db8:	d100      	bne.n	8003dbc <UART_SetConfig+0x24c>
 8003dba:	31ff      	adds	r1, #255	; 0xff
 8003dbc:	f7fc f9b6 	bl	800012c <__udivsi3>
        break;
 8003dc0:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003dc2:	0001      	movs	r1, r0
        break;
 8003dc4:	e7b3      	b.n	8003d2e <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003dc6:	4921      	ldr	r1, [pc, #132]	; (8003e4c <UART_SetConfig+0x2dc>)
 8003dc8:	e7ce      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dca:	4921      	ldr	r1, [pc, #132]	; (8003e50 <UART_SetConfig+0x2e0>)
 8003dcc:	e76c      	b.n	8003ca8 <UART_SetConfig+0x138>
 8003dce:	4921      	ldr	r1, [pc, #132]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003dd0:	e7ca      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dd2:	4921      	ldr	r1, [pc, #132]	; (8003e58 <UART_SetConfig+0x2e8>)
 8003dd4:	e7c8      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dd6:	4921      	ldr	r1, [pc, #132]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003dd8:	e7c6      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dda:	4921      	ldr	r1, [pc, #132]	; (8003e60 <UART_SetConfig+0x2f0>)
 8003ddc:	e7c4      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dde:	4921      	ldr	r1, [pc, #132]	; (8003e64 <UART_SetConfig+0x2f4>)
 8003de0:	e7c2      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003de2:	4921      	ldr	r1, [pc, #132]	; (8003e68 <UART_SetConfig+0x2f8>)
 8003de4:	e7c0      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003de6:	4921      	ldr	r1, [pc, #132]	; (8003e6c <UART_SetConfig+0x2fc>)
 8003de8:	e7be      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dea:	4921      	ldr	r1, [pc, #132]	; (8003e70 <UART_SetConfig+0x300>)
 8003dec:	e7bc      	b.n	8003d68 <UART_SetConfig+0x1f8>
 8003dee:	4921      	ldr	r1, [pc, #132]	; (8003e74 <UART_SetConfig+0x304>)
 8003df0:	e7ba      	b.n	8003d68 <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	0209      	lsls	r1, r1, #8
 8003df6:	e001      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	01c9      	lsls	r1, r1, #7
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	e753      	b.n	8003ca8 <UART_SetConfig+0x138>
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	0189      	lsls	r1, r1, #6
 8003e04:	e7fa      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e06:	491c      	ldr	r1, [pc, #112]	; (8003e78 <UART_SetConfig+0x308>)
 8003e08:	e7f8      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0149      	lsls	r1, r1, #5
 8003e0e:	e7f5      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e10:	491a      	ldr	r1, [pc, #104]	; (8003e7c <UART_SetConfig+0x30c>)
 8003e12:	e7f3      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e14:	491a      	ldr	r1, [pc, #104]	; (8003e80 <UART_SetConfig+0x310>)
 8003e16:	e7f1      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e18:	0109      	lsls	r1, r1, #4
 8003e1a:	e7ef      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e1c:	cfff69f3 	.word	0xcfff69f3
 8003e20:	ffffcfff 	.word	0xffffcfff
 8003e24:	40008000 	.word	0x40008000
 8003e28:	11fff4ff 	.word	0x11fff4ff
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08005fc0 	.word	0x08005fc0
 8003e38:	40004400 	.word	0x40004400
 8003e3c:	08005fc4 	.word	0x08005fc4
 8003e40:	40004800 	.word	0x40004800
 8003e44:	40004c00 	.word	0x40004c00
 8003e48:	0000f424 	.word	0x0000f424
 8003e4c:	007a1200 	.word	0x007a1200
 8003e50:	003d0900 	.word	0x003d0900
 8003e54:	0028b0aa 	.word	0x0028b0aa
 8003e58:	001e8480 	.word	0x001e8480
 8003e5c:	00186a00 	.word	0x00186a00
 8003e60:	00145855 	.word	0x00145855
 8003e64:	000f4240 	.word	0x000f4240
 8003e68:	0007a120 	.word	0x0007a120
 8003e6c:	0003d090 	.word	0x0003d090
 8003e70:	0001e848 	.word	0x0001e848
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	00001555 	.word	0x00001555
 8003e7c:	00000ccc 	.word	0x00000ccc
 8003e80:	00000aaa 	.word	0x00000aaa
 8003e84:	00c9      	lsls	r1, r1, #3
 8003e86:	e70f      	b.n	8003ca8 <UART_SetConfig+0x138>
 8003e88:	0089      	lsls	r1, r1, #2
 8003e8a:	e7b7      	b.n	8003dfc <UART_SetConfig+0x28c>
 8003e8c:	0049      	lsls	r1, r1, #1
 8003e8e:	e7b5      	b.n	8003dfc <UART_SetConfig+0x28c>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7ff fa94 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e96:	2201      	movs	r2, #1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	d02e      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2901      	cmp	r1, #1
 8003ea4:	d02a      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2902      	cmp	r1, #2
 8003eac:	d026      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003eae:	2206      	movs	r2, #6
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d022      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2904      	cmp	r1, #4
 8003ebc:	d01e      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2905      	cmp	r1, #5
 8003ec4:	d01a      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2906      	cmp	r1, #6
 8003ecc:	d016      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ece:	2210      	movs	r2, #16
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2907      	cmp	r1, #7
 8003ed4:	d012      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2908      	cmp	r1, #8
 8003edc:	d00e      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2909      	cmp	r1, #9
 8003ee4:	d00a      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	2300      	movs	r3, #0
 8003eea:	290a      	cmp	r1, #10
 8003eec:	d006      	beq.n	8003efc <UART_SetConfig+0x38c>
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	290b      	cmp	r1, #11
 8003ef4:	d102      	bne.n	8003efc <UART_SetConfig+0x38c>
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	2300      	movs	r3, #0
 8003efa:	0052      	lsls	r2, r2, #1
 8003efc:	2100      	movs	r1, #0
 8003efe:	f7fc fa8b 	bl	8000418 <__aeabi_uldivmod>
 8003f02:	2700      	movs	r7, #0
 8003f04:	6865      	ldr	r5, [r4, #4]
 8003f06:	0e06      	lsrs	r6, r0, #24
 8003f08:	020b      	lsls	r3, r1, #8
 8003f0a:	4333      	orrs	r3, r6
 8003f0c:	0202      	lsls	r2, r0, #8
 8003f0e:	086e      	lsrs	r6, r5, #1
 8003f10:	1992      	adds	r2, r2, r6
 8003f12:	417b      	adcs	r3, r7
 8003f14:	0010      	movs	r0, r2
 8003f16:	0019      	movs	r1, r3
 8003f18:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f1a:	003b      	movs	r3, r7
 8003f1c:	f7fc fa7c 	bl	8000418 <__aeabi_uldivmod>
            break;
 8003f20:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f22:	4b96      	ldr	r3, [pc, #600]	; (800417c <UART_SetConfig+0x60c>)
 8003f24:	4996      	ldr	r1, [pc, #600]	; (8004180 <UART_SetConfig+0x610>)
 8003f26:	18c3      	adds	r3, r0, r3
 8003f28:	428b      	cmp	r3, r1
 8003f2a:	d900      	bls.n	8003f2e <UART_SetConfig+0x3be>
 8003f2c:	e684      	b.n	8003c38 <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	60d8      	str	r0, [r3, #12]
 8003f32:	e682      	b.n	8003c3a <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d030      	beq.n	8003f9c <UART_SetConfig+0x42c>
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d01a      	beq.n	8003f74 <UART_SetConfig+0x404>
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d01a      	beq.n	8003f78 <UART_SetConfig+0x408>
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0x40c>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d01a      	beq.n	8003f80 <UART_SetConfig+0x410>
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d01a      	beq.n	8003f84 <UART_SetConfig+0x414>
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d01a      	beq.n	8003f88 <UART_SetConfig+0x418>
 8003f52:	2b07      	cmp	r3, #7
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x41c>
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0x420>
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	d01a      	beq.n	8003f94 <UART_SetConfig+0x424>
 8003f5e:	2b0a      	cmp	r3, #10
 8003f60:	d01a      	beq.n	8003f98 <UART_SetConfig+0x428>
 8003f62:	2b0b      	cmp	r3, #11
 8003f64:	d11a      	bne.n	8003f9c <UART_SetConfig+0x42c>
 8003f66:	4887      	ldr	r0, [pc, #540]	; (8004184 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2700      	movs	r7, #0
 8003f6c:	0856      	lsrs	r6, r2, #1
 8003f6e:	1980      	adds	r0, r0, r6
 8003f70:	4179      	adcs	r1, r7
 8003f72:	e7d2      	b.n	8003f1a <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f74:	4884      	ldr	r0, [pc, #528]	; (8004188 <UART_SetConfig+0x618>)
 8003f76:	e7f7      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f78:	4884      	ldr	r0, [pc, #528]	; (800418c <UART_SetConfig+0x61c>)
 8003f7a:	e7f5      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f7c:	4884      	ldr	r0, [pc, #528]	; (8004190 <UART_SetConfig+0x620>)
 8003f7e:	e7f3      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f80:	4884      	ldr	r0, [pc, #528]	; (8004194 <UART_SetConfig+0x624>)
 8003f82:	e7f1      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f84:	4884      	ldr	r0, [pc, #528]	; (8004198 <UART_SetConfig+0x628>)
 8003f86:	e7ef      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f88:	4884      	ldr	r0, [pc, #528]	; (800419c <UART_SetConfig+0x62c>)
 8003f8a:	e7ed      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f8c:	4884      	ldr	r0, [pc, #528]	; (80041a0 <UART_SetConfig+0x630>)
 8003f8e:	e7eb      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f90:	4884      	ldr	r0, [pc, #528]	; (80041a4 <UART_SetConfig+0x634>)
 8003f92:	e7e9      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f94:	4884      	ldr	r0, [pc, #528]	; (80041a8 <UART_SetConfig+0x638>)
 8003f96:	e7e7      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f98:	4884      	ldr	r0, [pc, #528]	; (80041ac <UART_SetConfig+0x63c>)
 8003f9a:	e7e5      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003f9c:	4884      	ldr	r0, [pc, #528]	; (80041b0 <UART_SetConfig+0x640>)
 8003f9e:	e7e3      	b.n	8003f68 <UART_SetConfig+0x3f8>
            pclk = HAL_RCC_GetSysClockFreq();
 8003fa0:	f7ff f918 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003fa4:	e776      	b.n	8003e94 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d018      	beq.n	8003fde <UART_SetConfig+0x46e>
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d019      	beq.n	8003fe4 <UART_SetConfig+0x474>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d01a      	beq.n	8003fea <UART_SetConfig+0x47a>
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d01b      	beq.n	8003ff0 <UART_SetConfig+0x480>
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d01b      	beq.n	8003ff4 <UART_SetConfig+0x484>
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d01c      	beq.n	8003ffa <UART_SetConfig+0x48a>
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d01c      	beq.n	8003ffe <UART_SetConfig+0x48e>
 8003fc4:	2080      	movs	r0, #128	; 0x80
 8003fc6:	2b07      	cmp	r3, #7
 8003fc8:	d01b      	beq.n	8004002 <UART_SetConfig+0x492>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d01b      	beq.n	8004006 <UART_SetConfig+0x496>
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d01b      	beq.n	800400a <UART_SetConfig+0x49a>
 8003fd2:	2b0a      	cmp	r3, #10
 8003fd4:	d01b      	beq.n	800400e <UART_SetConfig+0x49e>
 8003fd6:	2b0b      	cmp	r3, #11
 8003fd8:	d102      	bne.n	8003fe0 <UART_SetConfig+0x470>
 8003fda:	0200      	lsls	r0, r0, #8
 8003fdc:	e7c4      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003fde:	2080      	movs	r0, #128	; 0x80
 8003fe0:	0400      	lsls	r0, r0, #16
 8003fe2:	e7c1      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003fe4:	2080      	movs	r0, #128	; 0x80
 8003fe6:	03c0      	lsls	r0, r0, #15
 8003fe8:	e7be      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003fea:	2080      	movs	r0, #128	; 0x80
 8003fec:	0380      	lsls	r0, r0, #14
 8003fee:	e7bb      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003ff0:	4870      	ldr	r0, [pc, #448]	; (80041b4 <UART_SetConfig+0x644>)
 8003ff2:	e7b9      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003ff4:	2080      	movs	r0, #128	; 0x80
 8003ff6:	0340      	lsls	r0, r0, #13
 8003ff8:	e7b6      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003ffa:	486f      	ldr	r0, [pc, #444]	; (80041b8 <UART_SetConfig+0x648>)
 8003ffc:	e7b4      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8003ffe:	486f      	ldr	r0, [pc, #444]	; (80041bc <UART_SetConfig+0x64c>)
 8004000:	e7b2      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8004002:	0300      	lsls	r0, r0, #12
 8004004:	e7b0      	b.n	8003f68 <UART_SetConfig+0x3f8>
 8004006:	02c0      	lsls	r0, r0, #11
 8004008:	e7ae      	b.n	8003f68 <UART_SetConfig+0x3f8>
 800400a:	0280      	lsls	r0, r0, #10
 800400c:	e7ac      	b.n	8003f68 <UART_SetConfig+0x3f8>
 800400e:	0240      	lsls	r0, r0, #9
 8004010:	e7aa      	b.n	8003f68 <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 8004012:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004014:	2000      	movs	r0, #0
 8004016:	e784      	b.n	8003f22 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02f      	beq.n	800407c <UART_SetConfig+0x50c>
 800401c:	2b01      	cmp	r3, #1
 800401e:	d019      	beq.n	8004054 <UART_SetConfig+0x4e4>
 8004020:	2b02      	cmp	r3, #2
 8004022:	d019      	beq.n	8004058 <UART_SetConfig+0x4e8>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d019      	beq.n	800405c <UART_SetConfig+0x4ec>
 8004028:	2b04      	cmp	r3, #4
 800402a:	d019      	beq.n	8004060 <UART_SetConfig+0x4f0>
 800402c:	2b05      	cmp	r3, #5
 800402e:	d019      	beq.n	8004064 <UART_SetConfig+0x4f4>
 8004030:	2b06      	cmp	r3, #6
 8004032:	d019      	beq.n	8004068 <UART_SetConfig+0x4f8>
 8004034:	2b07      	cmp	r3, #7
 8004036:	d019      	beq.n	800406c <UART_SetConfig+0x4fc>
 8004038:	2b08      	cmp	r3, #8
 800403a:	d019      	beq.n	8004070 <UART_SetConfig+0x500>
 800403c:	2b09      	cmp	r3, #9
 800403e:	d019      	beq.n	8004074 <UART_SetConfig+0x504>
 8004040:	2b0a      	cmp	r3, #10
 8004042:	d019      	beq.n	8004078 <UART_SetConfig+0x508>
 8004044:	2b0b      	cmp	r3, #11
 8004046:	d119      	bne.n	800407c <UART_SetConfig+0x50c>
 8004048:	485d      	ldr	r0, [pc, #372]	; (80041c0 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	6861      	ldr	r1, [r4, #4]
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	1818      	adds	r0, r3, r0
 8004052:	e173      	b.n	800433c <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004054:	484b      	ldr	r0, [pc, #300]	; (8004184 <UART_SetConfig+0x614>)
 8004056:	e7f8      	b.n	800404a <UART_SetConfig+0x4da>
 8004058:	485a      	ldr	r0, [pc, #360]	; (80041c4 <UART_SetConfig+0x654>)
 800405a:	e7f6      	b.n	800404a <UART_SetConfig+0x4da>
 800405c:	485a      	ldr	r0, [pc, #360]	; (80041c8 <UART_SetConfig+0x658>)
 800405e:	e7f4      	b.n	800404a <UART_SetConfig+0x4da>
 8004060:	485a      	ldr	r0, [pc, #360]	; (80041cc <UART_SetConfig+0x65c>)
 8004062:	e7f2      	b.n	800404a <UART_SetConfig+0x4da>
 8004064:	485a      	ldr	r0, [pc, #360]	; (80041d0 <UART_SetConfig+0x660>)
 8004066:	e7f0      	b.n	800404a <UART_SetConfig+0x4da>
 8004068:	485a      	ldr	r0, [pc, #360]	; (80041d4 <UART_SetConfig+0x664>)
 800406a:	e7ee      	b.n	800404a <UART_SetConfig+0x4da>
 800406c:	485a      	ldr	r0, [pc, #360]	; (80041d8 <UART_SetConfig+0x668>)
 800406e:	e7ec      	b.n	800404a <UART_SetConfig+0x4da>
 8004070:	485a      	ldr	r0, [pc, #360]	; (80041dc <UART_SetConfig+0x66c>)
 8004072:	e7ea      	b.n	800404a <UART_SetConfig+0x4da>
 8004074:	485a      	ldr	r0, [pc, #360]	; (80041e0 <UART_SetConfig+0x670>)
 8004076:	e7e8      	b.n	800404a <UART_SetConfig+0x4da>
 8004078:	485a      	ldr	r0, [pc, #360]	; (80041e4 <UART_SetConfig+0x674>)
 800407a:	e7e6      	b.n	800404a <UART_SetConfig+0x4da>
 800407c:	484b      	ldr	r0, [pc, #300]	; (80041ac <UART_SetConfig+0x63c>)
 800407e:	e7e4      	b.n	800404a <UART_SetConfig+0x4da>
        pclk = HAL_RCC_GetSysClockFreq();
 8004080:	f7ff f8a8 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004084:	e12d      	b.n	80042e2 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <UART_SetConfig+0x54c>
 800408a:	2b01      	cmp	r3, #1
 800408c:	d019      	beq.n	80040c2 <UART_SetConfig+0x552>
 800408e:	2b02      	cmp	r3, #2
 8004090:	d01a      	beq.n	80040c8 <UART_SetConfig+0x558>
 8004092:	2b03      	cmp	r3, #3
 8004094:	d01b      	beq.n	80040ce <UART_SetConfig+0x55e>
 8004096:	2b04      	cmp	r3, #4
 8004098:	d01b      	beq.n	80040d2 <UART_SetConfig+0x562>
 800409a:	2b05      	cmp	r3, #5
 800409c:	d01c      	beq.n	80040d8 <UART_SetConfig+0x568>
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d01c      	beq.n	80040dc <UART_SetConfig+0x56c>
 80040a2:	2080      	movs	r0, #128	; 0x80
 80040a4:	2b07      	cmp	r3, #7
 80040a6:	d01b      	beq.n	80040e0 <UART_SetConfig+0x570>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d01b      	beq.n	80040e4 <UART_SetConfig+0x574>
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	d01b      	beq.n	80040e8 <UART_SetConfig+0x578>
 80040b0:	2b0a      	cmp	r3, #10
 80040b2:	d01b      	beq.n	80040ec <UART_SetConfig+0x57c>
 80040b4:	2b0b      	cmp	r3, #11
 80040b6:	d102      	bne.n	80040be <UART_SetConfig+0x54e>
 80040b8:	0040      	lsls	r0, r0, #1
 80040ba:	e7c6      	b.n	800404a <UART_SetConfig+0x4da>
 80040bc:	2080      	movs	r0, #128	; 0x80
 80040be:	0240      	lsls	r0, r0, #9
 80040c0:	e7c3      	b.n	800404a <UART_SetConfig+0x4da>
 80040c2:	2080      	movs	r0, #128	; 0x80
 80040c4:	0200      	lsls	r0, r0, #8
 80040c6:	e7c0      	b.n	800404a <UART_SetConfig+0x4da>
 80040c8:	2080      	movs	r0, #128	; 0x80
 80040ca:	01c0      	lsls	r0, r0, #7
 80040cc:	e7bd      	b.n	800404a <UART_SetConfig+0x4da>
 80040ce:	4846      	ldr	r0, [pc, #280]	; (80041e8 <UART_SetConfig+0x678>)
 80040d0:	e7bb      	b.n	800404a <UART_SetConfig+0x4da>
 80040d2:	2080      	movs	r0, #128	; 0x80
 80040d4:	0180      	lsls	r0, r0, #6
 80040d6:	e7b8      	b.n	800404a <UART_SetConfig+0x4da>
 80040d8:	4844      	ldr	r0, [pc, #272]	; (80041ec <UART_SetConfig+0x67c>)
 80040da:	e7b6      	b.n	800404a <UART_SetConfig+0x4da>
 80040dc:	4844      	ldr	r0, [pc, #272]	; (80041f0 <UART_SetConfig+0x680>)
 80040de:	e7b4      	b.n	800404a <UART_SetConfig+0x4da>
 80040e0:	0140      	lsls	r0, r0, #5
 80040e2:	e7b2      	b.n	800404a <UART_SetConfig+0x4da>
 80040e4:	0100      	lsls	r0, r0, #4
 80040e6:	e7b0      	b.n	800404a <UART_SetConfig+0x4da>
 80040e8:	00c0      	lsls	r0, r0, #3
 80040ea:	e7ae      	b.n	800404a <UART_SetConfig+0x4da>
 80040ec:	0080      	lsls	r0, r0, #2
 80040ee:	e7ac      	b.n	800404a <UART_SetConfig+0x4da>
    switch (clocksource)
 80040f0:	2808      	cmp	r0, #8
 80040f2:	d900      	bls.n	80040f6 <UART_SetConfig+0x586>
 80040f4:	e0eb      	b.n	80042ce <UART_SetConfig+0x75e>
 80040f6:	f7fc f805 	bl	8000104 <__gnu_thumb1_case_uqi>
 80040fa:	ea05      	.short	0xea05
 80040fc:	eab3ea7f 	.word	0xeab3ea7f
 8004100:	eaea      	.short	0xeaea
 8004102:	b6          	.byte	0xb6
 8004103:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7ff f95a 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800410a:	2101      	movs	r1, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d021      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004110:	1849      	adds	r1, r1, r1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d01e      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004116:	3102      	adds	r1, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d01b      	beq.n	8004154 <UART_SetConfig+0x5e4>
 800411c:	3102      	adds	r1, #2
 800411e:	2b03      	cmp	r3, #3
 8004120:	d018      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004122:	3102      	adds	r1, #2
 8004124:	2b04      	cmp	r3, #4
 8004126:	d015      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004128:	3102      	adds	r1, #2
 800412a:	2b05      	cmp	r3, #5
 800412c:	d012      	beq.n	8004154 <UART_SetConfig+0x5e4>
 800412e:	3102      	adds	r1, #2
 8004130:	2b06      	cmp	r3, #6
 8004132:	d00f      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004134:	3104      	adds	r1, #4
 8004136:	2b07      	cmp	r3, #7
 8004138:	d00c      	beq.n	8004154 <UART_SetConfig+0x5e4>
 800413a:	3110      	adds	r1, #16
 800413c:	2b08      	cmp	r3, #8
 800413e:	d009      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004140:	3120      	adds	r1, #32
 8004142:	2b09      	cmp	r3, #9
 8004144:	d006      	beq.n	8004154 <UART_SetConfig+0x5e4>
 8004146:	3140      	adds	r1, #64	; 0x40
 8004148:	2b0a      	cmp	r3, #10
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x5e4>
 800414c:	397f      	subs	r1, #127	; 0x7f
 800414e:	2b0b      	cmp	r3, #11
 8004150:	d100      	bne.n	8004154 <UART_SetConfig+0x5e4>
 8004152:	31ff      	adds	r1, #255	; 0xff
 8004154:	6865      	ldr	r5, [r4, #4]
 8004156:	f7fb ffe9 	bl	800012c <__udivsi3>
 800415a:	0029      	movs	r1, r5
 800415c:	086b      	lsrs	r3, r5, #1
 800415e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004160:	f7fb ffe4 	bl	800012c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004164:	2200      	movs	r2, #0
 8004166:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004168:	0019      	movs	r1, r3
 800416a:	4822      	ldr	r0, [pc, #136]	; (80041f4 <UART_SetConfig+0x684>)
 800416c:	3910      	subs	r1, #16
 800416e:	4281      	cmp	r1, r0
 8004170:	d900      	bls.n	8004174 <UART_SetConfig+0x604>
 8004172:	e561      	b.n	8003c38 <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 8004174:	6821      	ldr	r1, [r4, #0]
 8004176:	60cb      	str	r3, [r1, #12]
 8004178:	e55f      	b.n	8003c3a <UART_SetConfig+0xca>
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	fffffd00 	.word	0xfffffd00
 8004180:	000ffcff 	.word	0x000ffcff
 8004184:	00f42400 	.word	0x00f42400
 8004188:	7a120000 	.word	0x7a120000
 800418c:	3d090000 	.word	0x3d090000
 8004190:	28b0aa00 	.word	0x28b0aa00
 8004194:	1e848000 	.word	0x1e848000
 8004198:	186a0000 	.word	0x186a0000
 800419c:	14585500 	.word	0x14585500
 80041a0:	0f424000 	.word	0x0f424000
 80041a4:	07a12000 	.word	0x07a12000
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	01e84800 	.word	0x01e84800
 80041b0:	f4240000 	.word	0xf4240000
 80041b4:	00155500 	.word	0x00155500
 80041b8:	000ccc00 	.word	0x000ccc00
 80041bc:	000aaa00 	.word	0x000aaa00
 80041c0:	0001e848 	.word	0x0001e848
 80041c4:	007a1200 	.word	0x007a1200
 80041c8:	00516154 	.word	0x00516154
 80041cc:	003d0900 	.word	0x003d0900
 80041d0:	0030d400 	.word	0x0030d400
 80041d4:	0028b0aa 	.word	0x0028b0aa
 80041d8:	001e8480 	.word	0x001e8480
 80041dc:	000f4240 	.word	0x000f4240
 80041e0:	0007a120 	.word	0x0007a120
 80041e4:	0003d090 	.word	0x0003d090
 80041e8:	00002aaa 	.word	0x00002aaa
 80041ec:	00001998 	.word	0x00001998
 80041f0:	00001554 	.word	0x00001554
 80041f4:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02f      	beq.n	800425c <UART_SetConfig+0x6ec>
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d019      	beq.n	8004234 <UART_SetConfig+0x6c4>
 8004200:	2b02      	cmp	r3, #2
 8004202:	d019      	beq.n	8004238 <UART_SetConfig+0x6c8>
 8004204:	2b03      	cmp	r3, #3
 8004206:	d019      	beq.n	800423c <UART_SetConfig+0x6cc>
 8004208:	2b04      	cmp	r3, #4
 800420a:	d019      	beq.n	8004240 <UART_SetConfig+0x6d0>
 800420c:	2b05      	cmp	r3, #5
 800420e:	d019      	beq.n	8004244 <UART_SetConfig+0x6d4>
 8004210:	2b06      	cmp	r3, #6
 8004212:	d019      	beq.n	8004248 <UART_SetConfig+0x6d8>
 8004214:	2b07      	cmp	r3, #7
 8004216:	d019      	beq.n	800424c <UART_SetConfig+0x6dc>
 8004218:	2b08      	cmp	r3, #8
 800421a:	d019      	beq.n	8004250 <UART_SetConfig+0x6e0>
 800421c:	2b09      	cmp	r3, #9
 800421e:	d019      	beq.n	8004254 <UART_SetConfig+0x6e4>
 8004220:	2b0a      	cmp	r3, #10
 8004222:	d019      	beq.n	8004258 <UART_SetConfig+0x6e8>
 8004224:	2b0b      	cmp	r3, #11
 8004226:	d119      	bne.n	800425c <UART_SetConfig+0x6ec>
 8004228:	484e      	ldr	r0, [pc, #312]	; (8004364 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	6861      	ldr	r1, [r4, #4]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	1818      	adds	r0, r3, r0
 8004232:	e795      	b.n	8004160 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004234:	484c      	ldr	r0, [pc, #304]	; (8004368 <UART_SetConfig+0x7f8>)
 8004236:	e7f8      	b.n	800422a <UART_SetConfig+0x6ba>
 8004238:	484c      	ldr	r0, [pc, #304]	; (800436c <UART_SetConfig+0x7fc>)
 800423a:	e7f6      	b.n	800422a <UART_SetConfig+0x6ba>
 800423c:	484c      	ldr	r0, [pc, #304]	; (8004370 <UART_SetConfig+0x800>)
 800423e:	e7f4      	b.n	800422a <UART_SetConfig+0x6ba>
 8004240:	484c      	ldr	r0, [pc, #304]	; (8004374 <UART_SetConfig+0x804>)
 8004242:	e7f2      	b.n	800422a <UART_SetConfig+0x6ba>
 8004244:	484c      	ldr	r0, [pc, #304]	; (8004378 <UART_SetConfig+0x808>)
 8004246:	e7f0      	b.n	800422a <UART_SetConfig+0x6ba>
 8004248:	484c      	ldr	r0, [pc, #304]	; (800437c <UART_SetConfig+0x80c>)
 800424a:	e7ee      	b.n	800422a <UART_SetConfig+0x6ba>
 800424c:	484c      	ldr	r0, [pc, #304]	; (8004380 <UART_SetConfig+0x810>)
 800424e:	e7ec      	b.n	800422a <UART_SetConfig+0x6ba>
 8004250:	484c      	ldr	r0, [pc, #304]	; (8004384 <UART_SetConfig+0x814>)
 8004252:	e7ea      	b.n	800422a <UART_SetConfig+0x6ba>
 8004254:	484c      	ldr	r0, [pc, #304]	; (8004388 <UART_SetConfig+0x818>)
 8004256:	e7e8      	b.n	800422a <UART_SetConfig+0x6ba>
 8004258:	484c      	ldr	r0, [pc, #304]	; (800438c <UART_SetConfig+0x81c>)
 800425a:	e7e6      	b.n	800422a <UART_SetConfig+0x6ba>
 800425c:	484c      	ldr	r0, [pc, #304]	; (8004390 <UART_SetConfig+0x820>)
 800425e:	e7e4      	b.n	800422a <UART_SetConfig+0x6ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8004260:	f7fe ffb8 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004264:	e750      	b.n	8004108 <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <UART_SetConfig+0x72c>
 800426a:	2b01      	cmp	r3, #1
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x730>
 800426e:	2b02      	cmp	r3, #2
 8004270:	d019      	beq.n	80042a6 <UART_SetConfig+0x736>
 8004272:	2b03      	cmp	r3, #3
 8004274:	d01a      	beq.n	80042ac <UART_SetConfig+0x73c>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d01a      	beq.n	80042b0 <UART_SetConfig+0x740>
 800427a:	2b05      	cmp	r3, #5
 800427c:	d01b      	beq.n	80042b6 <UART_SetConfig+0x746>
 800427e:	2b06      	cmp	r3, #6
 8004280:	d01b      	beq.n	80042ba <UART_SetConfig+0x74a>
 8004282:	2080      	movs	r0, #128	; 0x80
 8004284:	2b07      	cmp	r3, #7
 8004286:	d01a      	beq.n	80042be <UART_SetConfig+0x74e>
 8004288:	2b08      	cmp	r3, #8
 800428a:	d01a      	beq.n	80042c2 <UART_SetConfig+0x752>
 800428c:	2b09      	cmp	r3, #9
 800428e:	d01a      	beq.n	80042c6 <UART_SetConfig+0x756>
 8004290:	2b0a      	cmp	r3, #10
 8004292:	d01a      	beq.n	80042ca <UART_SetConfig+0x75a>
 8004294:	2b0b      	cmp	r3, #11
 8004296:	d0c8      	beq.n	800422a <UART_SetConfig+0x6ba>
 8004298:	0200      	lsls	r0, r0, #8
 800429a:	e7c6      	b.n	800422a <UART_SetConfig+0x6ba>
 800429c:	2080      	movs	r0, #128	; 0x80
 800429e:	e7fb      	b.n	8004298 <UART_SetConfig+0x728>
 80042a0:	2080      	movs	r0, #128	; 0x80
 80042a2:	01c0      	lsls	r0, r0, #7
 80042a4:	e7c1      	b.n	800422a <UART_SetConfig+0x6ba>
 80042a6:	2080      	movs	r0, #128	; 0x80
 80042a8:	0180      	lsls	r0, r0, #6
 80042aa:	e7be      	b.n	800422a <UART_SetConfig+0x6ba>
 80042ac:	4839      	ldr	r0, [pc, #228]	; (8004394 <UART_SetConfig+0x824>)
 80042ae:	e7bc      	b.n	800422a <UART_SetConfig+0x6ba>
 80042b0:	2080      	movs	r0, #128	; 0x80
 80042b2:	0140      	lsls	r0, r0, #5
 80042b4:	e7b9      	b.n	800422a <UART_SetConfig+0x6ba>
 80042b6:	4838      	ldr	r0, [pc, #224]	; (8004398 <UART_SetConfig+0x828>)
 80042b8:	e7b7      	b.n	800422a <UART_SetConfig+0x6ba>
 80042ba:	4838      	ldr	r0, [pc, #224]	; (800439c <UART_SetConfig+0x82c>)
 80042bc:	e7b5      	b.n	800422a <UART_SetConfig+0x6ba>
 80042be:	0100      	lsls	r0, r0, #4
 80042c0:	e7b3      	b.n	800422a <UART_SetConfig+0x6ba>
 80042c2:	00c0      	lsls	r0, r0, #3
 80042c4:	e7b1      	b.n	800422a <UART_SetConfig+0x6ba>
 80042c6:	0080      	lsls	r0, r0, #2
 80042c8:	e7af      	b.n	800422a <UART_SetConfig+0x6ba>
 80042ca:	0040      	lsls	r0, r0, #1
 80042cc:	e7ad      	b.n	800422a <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 80042ce:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e749      	b.n	8004168 <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	4299      	cmp	r1, r3
 80042da:	d000      	beq.n	80042de <UART_SetConfig+0x76e>
 80042dc:	e712      	b.n	8004104 <UART_SetConfig+0x594>
        pclk = HAL_RCC_GetPCLK1Freq();
 80042de:	f7ff f86d 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042e4:	2101      	movs	r1, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d021      	beq.n	800432e <UART_SetConfig+0x7be>
 80042ea:	1849      	adds	r1, r1, r1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d01e      	beq.n	800432e <UART_SetConfig+0x7be>
 80042f0:	3102      	adds	r1, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d01b      	beq.n	800432e <UART_SetConfig+0x7be>
 80042f6:	3102      	adds	r1, #2
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d018      	beq.n	800432e <UART_SetConfig+0x7be>
 80042fc:	3102      	adds	r1, #2
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d015      	beq.n	800432e <UART_SetConfig+0x7be>
 8004302:	3102      	adds	r1, #2
 8004304:	2b05      	cmp	r3, #5
 8004306:	d012      	beq.n	800432e <UART_SetConfig+0x7be>
 8004308:	3102      	adds	r1, #2
 800430a:	2b06      	cmp	r3, #6
 800430c:	d00f      	beq.n	800432e <UART_SetConfig+0x7be>
 800430e:	3104      	adds	r1, #4
 8004310:	2b07      	cmp	r3, #7
 8004312:	d00c      	beq.n	800432e <UART_SetConfig+0x7be>
 8004314:	3110      	adds	r1, #16
 8004316:	2b08      	cmp	r3, #8
 8004318:	d009      	beq.n	800432e <UART_SetConfig+0x7be>
 800431a:	3120      	adds	r1, #32
 800431c:	2b09      	cmp	r3, #9
 800431e:	d006      	beq.n	800432e <UART_SetConfig+0x7be>
 8004320:	3140      	adds	r1, #64	; 0x40
 8004322:	2b0a      	cmp	r3, #10
 8004324:	d003      	beq.n	800432e <UART_SetConfig+0x7be>
 8004326:	397f      	subs	r1, #127	; 0x7f
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d100      	bne.n	800432e <UART_SetConfig+0x7be>
 800432c:	31ff      	adds	r1, #255	; 0xff
 800432e:	f7fb fefd 	bl	800012c <__udivsi3>
 8004332:	6865      	ldr	r5, [r4, #4]
 8004334:	0040      	lsls	r0, r0, #1
 8004336:	0029      	movs	r1, r5
 8004338:	086b      	lsrs	r3, r5, #1
 800433a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800433c:	f7fb fef6 	bl	800012c <__udivsi3>
 8004340:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004342:	0003      	movs	r3, r0
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <UART_SetConfig+0x830>)
 8004346:	3b10      	subs	r3, #16
 8004348:	4293      	cmp	r3, r2
 800434a:	d900      	bls.n	800434e <UART_SetConfig+0x7de>
 800434c:	e474      	b.n	8003c38 <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800434e:	230f      	movs	r3, #15
 8004350:	0002      	movs	r2, r0
 8004352:	439a      	bics	r2, r3
 8004354:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004356:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8004358:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435a:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800435c:	4318      	orrs	r0, r3
 800435e:	60d0      	str	r0, [r2, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	e46a      	b.n	8003c3a <UART_SetConfig+0xca>
 8004364:	0000f424 	.word	0x0000f424
 8004368:	007a1200 	.word	0x007a1200
 800436c:	003d0900 	.word	0x003d0900
 8004370:	0028b0aa 	.word	0x0028b0aa
 8004374:	001e8480 	.word	0x001e8480
 8004378:	00186a00 	.word	0x00186a00
 800437c:	00145855 	.word	0x00145855
 8004380:	000f4240 	.word	0x000f4240
 8004384:	0007a120 	.word	0x0007a120
 8004388:	0003d090 	.word	0x0003d090
 800438c:	0001e848 	.word	0x0001e848
 8004390:	00f42400 	.word	0x00f42400
 8004394:	00001555 	.word	0x00001555
 8004398:	00000ccc 	.word	0x00000ccc
 800439c:	00000aaa 	.word	0x00000aaa
 80043a0:	0000ffef 	.word	0x0000ffef

080043a4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80043a6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a8:	07da      	lsls	r2, r3, #31
 80043aa:	d506      	bpl.n	80043ba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043ac:	6801      	ldr	r1, [r0, #0]
 80043ae:	4c28      	ldr	r4, [pc, #160]	; (8004450 <UART_AdvFeatureConfig+0xac>)
 80043b0:	684a      	ldr	r2, [r1, #4]
 80043b2:	4022      	ands	r2, r4
 80043b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80043b6:	4322      	orrs	r2, r4
 80043b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ba:	079a      	lsls	r2, r3, #30
 80043bc:	d506      	bpl.n	80043cc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043be:	6801      	ldr	r1, [r0, #0]
 80043c0:	4c24      	ldr	r4, [pc, #144]	; (8004454 <UART_AdvFeatureConfig+0xb0>)
 80043c2:	684a      	ldr	r2, [r1, #4]
 80043c4:	4022      	ands	r2, r4
 80043c6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80043c8:	4322      	orrs	r2, r4
 80043ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043cc:	075a      	lsls	r2, r3, #29
 80043ce:	d506      	bpl.n	80043de <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d0:	6801      	ldr	r1, [r0, #0]
 80043d2:	4c21      	ldr	r4, [pc, #132]	; (8004458 <UART_AdvFeatureConfig+0xb4>)
 80043d4:	684a      	ldr	r2, [r1, #4]
 80043d6:	4022      	ands	r2, r4
 80043d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80043da:	4322      	orrs	r2, r4
 80043dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043de:	071a      	lsls	r2, r3, #28
 80043e0:	d506      	bpl.n	80043f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e2:	6801      	ldr	r1, [r0, #0]
 80043e4:	4c1d      	ldr	r4, [pc, #116]	; (800445c <UART_AdvFeatureConfig+0xb8>)
 80043e6:	684a      	ldr	r2, [r1, #4]
 80043e8:	4022      	ands	r2, r4
 80043ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80043ec:	4322      	orrs	r2, r4
 80043ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043f0:	06da      	lsls	r2, r3, #27
 80043f2:	d506      	bpl.n	8004402 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f4:	6801      	ldr	r1, [r0, #0]
 80043f6:	4c1a      	ldr	r4, [pc, #104]	; (8004460 <UART_AdvFeatureConfig+0xbc>)
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	4022      	ands	r2, r4
 80043fc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80043fe:	4322      	orrs	r2, r4
 8004400:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004402:	069a      	lsls	r2, r3, #26
 8004404:	d506      	bpl.n	8004414 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004406:	6801      	ldr	r1, [r0, #0]
 8004408:	4c16      	ldr	r4, [pc, #88]	; (8004464 <UART_AdvFeatureConfig+0xc0>)
 800440a:	688a      	ldr	r2, [r1, #8]
 800440c:	4022      	ands	r2, r4
 800440e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004410:	4322      	orrs	r2, r4
 8004412:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004414:	065a      	lsls	r2, r3, #25
 8004416:	d510      	bpl.n	800443a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004418:	6801      	ldr	r1, [r0, #0]
 800441a:	4d13      	ldr	r5, [pc, #76]	; (8004468 <UART_AdvFeatureConfig+0xc4>)
 800441c:	684a      	ldr	r2, [r1, #4]
 800441e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004420:	402a      	ands	r2, r5
 8004422:	4322      	orrs	r2, r4
 8004424:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	0352      	lsls	r2, r2, #13
 800442a:	4294      	cmp	r4, r2
 800442c:	d105      	bne.n	800443a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442e:	684a      	ldr	r2, [r1, #4]
 8004430:	4c0e      	ldr	r4, [pc, #56]	; (800446c <UART_AdvFeatureConfig+0xc8>)
 8004432:	4022      	ands	r2, r4
 8004434:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004436:	4322      	orrs	r2, r4
 8004438:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	d506      	bpl.n	800444c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443e:	6802      	ldr	r2, [r0, #0]
 8004440:	490b      	ldr	r1, [pc, #44]	; (8004470 <UART_AdvFeatureConfig+0xcc>)
 8004442:	6853      	ldr	r3, [r2, #4]
 8004444:	400b      	ands	r3, r1
 8004446:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004448:	430b      	orrs	r3, r1
 800444a:	6053      	str	r3, [r2, #4]
  }
}
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	fffdffff 	.word	0xfffdffff
 8004454:	fffeffff 	.word	0xfffeffff
 8004458:	fffbffff 	.word	0xfffbffff
 800445c:	ffff7fff 	.word	0xffff7fff
 8004460:	ffffefff 	.word	0xffffefff
 8004464:	ffffdfff 	.word	0xffffdfff
 8004468:	ffefffff 	.word	0xffefffff
 800446c:	ff9fffff 	.word	0xff9fffff
 8004470:	fff7ffff 	.word	0xfff7ffff

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	0004      	movs	r4, r0
 8004478:	000e      	movs	r6, r1
 800447a:	0015      	movs	r5, r2
 800447c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	69d3      	ldr	r3, [r2, #28]
 8004482:	4033      	ands	r3, r6
 8004484:	1b9b      	subs	r3, r3, r6
 8004486:	4259      	negs	r1, r3
 8004488:	414b      	adcs	r3, r1
 800448a:	42ab      	cmp	r3, r5
 800448c:	d001      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800448e:	2000      	movs	r0, #0
 8004490:	e01e      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004492:	9b06      	ldr	r3, [sp, #24]
 8004494:	3301      	adds	r3, #1
 8004496:	d0f3      	beq.n	8004480 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fc ff1c 	bl	80012d4 <HAL_GetTick>
 800449c:	9b06      	ldr	r3, [sp, #24]
 800449e:	1bc0      	subs	r0, r0, r7
 80044a0:	4283      	cmp	r3, r0
 80044a2:	d301      	bcc.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x34>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ea      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044a8:	0022      	movs	r2, r4
 80044aa:	ca08      	ldmia	r2!, {r3}
 80044ac:	4809      	ldr	r0, [pc, #36]	; (80044d4 <UART_WaitOnFlagUntilTimeout+0x60>)
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	4001      	ands	r1, r0
 80044b2:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	30a3      	adds	r0, #163	; 0xa3
 80044b8:	30ff      	adds	r0, #255	; 0xff
 80044ba:	4381      	bics	r1, r0
 80044bc:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80044be:	2320      	movs	r3, #32
 80044c0:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	0022      	movs	r2, r4
 80044c4:	3208      	adds	r2, #8
 80044c6:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80044c8:	2300      	movs	r3, #0
 80044ca:	347c      	adds	r4, #124	; 0x7c
 80044cc:	7023      	strb	r3, [r4, #0]
 80044ce:	3002      	adds	r0, #2
}
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	fffffe5f 	.word	0xfffffe5f

080044d8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	0003      	movs	r3, r0
{
 80044da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	2600      	movs	r6, #0
{
 80044de:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	3388      	adds	r3, #136	; 0x88
 80044e2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80044e4:	f7fc fef6 	bl	80012d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044e8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80044ea:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	071b      	lsls	r3, r3, #28
 80044f0:	d417      	bmi.n	8004522 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	075b      	lsls	r3, r3, #29
 80044f8:	d50a      	bpl.n	8004510 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <UART_CheckIdleState+0x64>)
 80044fe:	2200      	movs	r2, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	03c9      	lsls	r1, r1, #15
 8004504:	002b      	movs	r3, r5
 8004506:	0020      	movs	r0, r4
 8004508:	f7ff ffb4 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 800450c:	2800      	cmp	r0, #0
 800450e:	d113      	bne.n	8004538 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004510:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004512:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004514:	1d22      	adds	r2, r4, #4
 8004516:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004518:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800451a:	3204      	adds	r2, #4
 800451c:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800451e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004520:	e00b      	b.n	800453a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <UART_CheckIdleState+0x64>)
 8004526:	0032      	movs	r2, r6
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	0389      	lsls	r1, r1, #14
 800452c:	0003      	movs	r3, r0
 800452e:	0020      	movs	r0, r4
 8004530:	f7ff ffa0 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004534:	2800      	cmp	r0, #0
 8004536:	d0dc      	beq.n	80044f2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004538:	2003      	movs	r0, #3
}
 800453a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800453c:	01ffffff 	.word	0x01ffffff

08004540 <HAL_UART_Init>:
{
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004546:	2001      	movs	r0, #1
}
 8004548:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	1d05      	adds	r5, r0, #4
 800454c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004552:	0002      	movs	r2, r0
 8004554:	327c      	adds	r2, #124	; 0x7c
 8004556:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004558:	f001 f858 	bl	800560c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800455e:	2101      	movs	r1, #1
 8004560:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004562:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004564:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004566:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004568:	438b      	bics	r3, r1
 800456a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800456c:	f7ff fb00 	bl	8003b70 <UART_SetConfig>
 8004570:	2801      	cmp	r0, #1
 8004572:	d0e8      	beq.n	8004546 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 800457a:	0020      	movs	r0, r4
 800457c:	f7ff ff12 	bl	80043a4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <HAL_UART_Init+0x64>)
 8004584:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004586:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004588:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	438a      	bics	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004594:	2201      	movs	r2, #1
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800459c:	f7ff ff9c 	bl	80044d8 <UART_CheckIdleState>
 80045a0:	e7d2      	b.n	8004548 <HAL_UART_Init+0x8>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	ffffb7ff 	.word	0xffffb7ff

080045a8 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045a8:	2301      	movs	r3, #1
{
 80045aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ac:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045ae:	aa02      	add	r2, sp, #8
 80045b0:	7013      	strb	r3, [r2, #0]
 80045b2:	7053      	strb	r3, [r2, #1]
 80045b4:	7093      	strb	r3, [r2, #2]
 80045b6:	2203      	movs	r2, #3
 80045b8:	a902      	add	r1, sp, #8
 80045ba:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80045bc:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045be:	2200      	movs	r2, #0
 80045c0:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80045c2:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045c4:	718a      	strb	r2, [r1, #6]
 80045c6:	71ca      	strb	r2, [r1, #7]
 80045c8:	710e      	strb	r6, [r1, #4]
 80045ca:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80045cc:	70a5      	strb	r5, [r4, #2]
 80045ce:	2104      	movs	r1, #4
 80045d0:	0007      	movs	r7, r0
 80045d2:	0005      	movs	r5, r0
 80045d4:	3208      	adds	r2, #8
 80045d6:	7022      	strb	r2, [r4, #0]
 80045d8:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045da:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80045dc:	7061      	strb	r1, [r4, #1]
 80045de:	70e1      	strb	r1, [r4, #3]
 80045e0:	7163      	strb	r3, [r4, #5]
 80045e2:	71a3      	strb	r3, [r4, #6]
 80045e4:	71e3      	strb	r3, [r4, #7]
 80045e6:	376a      	adds	r7, #106	; 0x6a
 80045e8:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	d103      	bne.n	80045f6 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 80045ee:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80045f0:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045f2:	b007      	add	sp, #28
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045f6:	6803      	ldr	r3, [r0, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045fa:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045fc:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045fe:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004600:	aa02      	add	r2, sp, #8
 8004602:	5cd0      	ldrb	r0, [r2, r3]
 8004604:	5ce1      	ldrb	r1, [r4, r3]
 8004606:	00c0      	lsls	r0, r0, #3
 8004608:	f7fb fe1a 	bl	8000240 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800460c:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800460e:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004610:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004612:	401e      	ands	r6, r3
 8004614:	ab02      	add	r3, sp, #8
 8004616:	5d98      	ldrb	r0, [r3, r6]
 8004618:	5da1      	ldrb	r1, [r4, r6]
 800461a:	00c0      	lsls	r0, r0, #3
 800461c:	f7fb fe10 	bl	8000240 <__divsi3>
 8004620:	8028      	strh	r0, [r5, #0]
}
 8004622:	e7e6      	b.n	80045f2 <UARTEx_SetNbDataToProcess+0x4a>

08004624 <HAL_UARTEx_DisableFifoMode>:
{
 8004624:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004626:	0004      	movs	r4, r0
 8004628:	347c      	adds	r4, #124	; 0x7c
 800462a:	7822      	ldrb	r2, [r4, #0]
 800462c:	2302      	movs	r3, #2
 800462e:	2a01      	cmp	r2, #1
 8004630:	d010      	beq.n	8004654 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 8004632:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004634:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	1d05      	adds	r5, r0, #4
 8004638:	3322      	adds	r3, #34	; 0x22
 800463a:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	43b3      	bics	r3, r6
 8004642:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_UARTEx_DisableFifoMode+0x34>)
 8004646:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004648:	2300      	movs	r3, #0
 800464a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800464c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800464e:	2220      	movs	r2, #32
 8004650:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004652:	7023      	strb	r3, [r4, #0]
}
 8004654:	0018      	movs	r0, r3
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	dfffffff 	.word	0xdfffffff

0800465c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800465e:	0005      	movs	r5, r0
 8004660:	357c      	adds	r5, #124	; 0x7c
 8004662:	782b      	ldrb	r3, [r5, #0]
{
 8004664:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004666:	2002      	movs	r0, #2
 8004668:	2b01      	cmp	r3, #1
 800466a:	d017      	beq.n	800469c <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800466e:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8004670:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004672:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8004674:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004676:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004678:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	4383      	bics	r3, r0
 800467e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004680:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004682:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	08db      	lsrs	r3, r3, #3
 8004688:	4319      	orrs	r1, r3
 800468a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800468c:	f7ff ff8c 	bl	80045a8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004690:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004692:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004694:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004696:	2320      	movs	r3, #32
 8004698:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800469a:	7028      	strb	r0, [r5, #0]
}
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80046a2:	0005      	movs	r5, r0
 80046a4:	357c      	adds	r5, #124	; 0x7c
 80046a6:	782b      	ldrb	r3, [r5, #0]
{
 80046a8:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80046aa:	2002      	movs	r0, #2
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d017      	beq.n	80046e0 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80046b2:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80046b6:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4382      	bics	r2, r0
 80046c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	4807      	ldr	r0, [pc, #28]	; (80046e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 80046c8:	4002      	ands	r2, r0
 80046ca:	4311      	orrs	r1, r2
 80046cc:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80046ce:	0020      	movs	r0, r4
 80046d0:	f7ff ff6a 	bl	80045a8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80046d6:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d8:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046da:	2320      	movs	r3, #32
 80046dc:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80046de:	7028      	strb	r0, [r5, #0]
}
 80046e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	f1ffffff 	.word	0xf1ffffff

080046e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80046e8:	b530      	push	{r4, r5, lr}
 80046ea:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80046ec:	220c      	movs	r2, #12
 80046ee:	2100      	movs	r1, #0
 80046f0:	a801      	add	r0, sp, #4
 80046f2:	f001 f818 	bl	8005726 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80046f6:	4c1a      	ldr	r4, [pc, #104]	; (8004760 <MX_ADC1_Init+0x78>)
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <MX_ADC1_Init+0x7c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046fa:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 80046fc:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80046fe:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8004700:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004706:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004708:	6162      	str	r2, [r4, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800470a:	1962      	adds	r2, r4, r5
 800470c:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800470e:	0022      	movs	r2, r4
 8004710:	322c      	adds	r2, #44	; 0x2c
 8004712:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
 8004714:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004716:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8004718:	323c      	adds	r2, #60	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800471a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800471c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800471e:	6123      	str	r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004720:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004722:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004724:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004726:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004728:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800472a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800472c:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800472e:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004730:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004732:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004734:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004736:	f7fc fde9 	bl	800130c <HAL_ADC_Init>
 800473a:	2800      	cmp	r0, #0
 800473c:	d001      	beq.n	8004742 <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 800473e:	f000 fbdf 	bl	8004f00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004742:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004744:	a901      	add	r1, sp, #4
 8004746:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8004748:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800474a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800474c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800474e:	f7fd f825 	bl	800179c <HAL_ADC_ConfigChannel>
 8004752:	2800      	cmp	r0, #0
 8004754:	d001      	beq.n	800475a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8004756:	f000 fbd3 	bl	8004f00 <Error_Handler>
  }

}
 800475a:	b005      	add	sp, #20
 800475c:	bd30      	pop	{r4, r5, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	200004c8 	.word	0x200004c8
 8004764:	40012400 	.word	0x40012400

08004768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004768:	b510      	push	{r4, lr}
 800476a:	0004      	movs	r4, r0
 800476c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	2214      	movs	r2, #20
 8004770:	2100      	movs	r1, #0
 8004772:	a803      	add	r0, sp, #12
 8004774:	f000 ffd7 	bl	8005726 <memset>
  if(adcHandle->Instance==ADC1)
 8004778:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_ADC_MspInit+0x64>)
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d122      	bne.n	80047c6 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004780:	2080      	movs	r0, #128	; 0x80
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_ADC_MspInit+0x68>)
 8004784:	0340      	lsls	r0, r0, #13
 8004786:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004788:	4301      	orrs	r1, r0
 800478a:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800478c:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800478e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004790:	4002      	ands	r2, r0
 8004792:	9201      	str	r2, [sp, #4]
 8004794:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004798:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479a:	430a      	orrs	r2, r1
 800479c:	635a      	str	r2, [r3, #52]	; 0x34
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a2:	400b      	ands	r3, r1
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 80047a8:	2321      	movs	r3, #33	; 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 80047ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ae:	3b1e      	subs	r3, #30
 80047b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b2:	f7fd fb43 	bl	8001e3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	200c      	movs	r0, #12
 80047ba:	0011      	movs	r1, r2
 80047bc:	f7fd f97c 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80047c0:	200c      	movs	r0, #12
 80047c2:	f7fd f9a9 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80047c6:	b008      	add	sp, #32
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	40012400 	.word	0x40012400
 80047d0:	40021000 	.word	0x40021000

080047d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80047d4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047d6:	2001      	movs	r0, #1
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <MX_DMA_Init+0x28>)
 80047da:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80047dc:	4301      	orrs	r1, r0
 80047de:	6391      	str	r1, [r2, #56]	; 0x38
 80047e0:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047e2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047e4:	4003      	ands	r3, r0
 80047e6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047e8:	0011      	movs	r1, r2
 80047ea:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047ee:	f7fd f963 	bl	8001ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047f2:	2009      	movs	r0, #9
 80047f4:	f7fd f990 	bl	8001b18 <HAL_NVIC_EnableIRQ>

}
 80047f8:	bd07      	pop	{r0, r1, r2, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	40021000 	.word	0x40021000

08004800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004802:	2601      	movs	r6, #1
{
 8004804:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004806:	2214      	movs	r2, #20
 8004808:	2100      	movs	r1, #0
 800480a:	a803      	add	r0, sp, #12
 800480c:	f000 ff8b 	bl	8005726 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004810:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8004812:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004814:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <MX_GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8004816:	4d39      	ldr	r5, [pc, #228]	; (80048fc <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800481a:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800481c:	4332      	orrs	r2, r6
 800481e:	635a      	str	r2, [r3, #52]	; 0x34
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8004822:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004824:	4032      	ands	r2, r6
 8004826:	9200      	str	r2, [sp, #0]
 8004828:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800482a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                          |KB_R5_Pin|BQ_OTG_Pin|BT_RST_Pin|BT_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	430a      	orrs	r2, r1
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
 8004832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004834:	400a      	ands	r2, r1
 8004836:	9201      	str	r2, [sp, #4]
 8004838:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800483a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483c:	3106      	adds	r1, #6
 800483e:	430a      	orrs	r2, r1
 8004840:	635a      	str	r2, [r3, #52]	; 0x34
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004846:	400b      	ands	r3, r1
 8004848:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800484a:	310a      	adds	r1, #10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800484c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800484e:	f7fd fba3 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8004852:	2200      	movs	r2, #0
 8004854:	0028      	movs	r0, r5
 8004856:	492a      	ldr	r1, [pc, #168]	; (8004900 <MX_GPIO_Init+0x100>)
 8004858:	f7fd fb9e 	bl	8001f98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 800485c:	2312      	movs	r3, #18
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485e:	0038      	movs	r0, r7
                           PBPin */
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
                          |KB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004860:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004862:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 8004864:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004866:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486c:	f7fd fae6 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <MX_GPIO_Init+0x104>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004872:	a903      	add	r1, sp, #12
 8004874:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8004876:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004878:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487e:	f7fd fadd 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004888:	2302      	movs	r3, #2
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 800488a:	a903      	add	r1, sp, #12
 800488c:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800488e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004890:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8004892:	f7fd fad3 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 8004896:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8004898:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 800489a:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 800489c:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 800489e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 80048a4:	f7fd faca 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 80048a8:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048aa:	a903      	add	r1, sp, #12
 80048ac:	4816      	ldr	r0, [pc, #88]	; (8004908 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 80048ae:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b4:	f7fd fac2 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 80048b8:	2310      	movs	r3, #16
 80048ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 80048be:	a903      	add	r1, sp, #12
 80048c0:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 80048c6:	f7fd fab9 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 80048ca:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 80048cc:	a903      	add	r1, sp, #12
 80048ce:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 80048d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048d2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 80048d8:	f7fd fab0 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BT_RST_Pin|BT_MODE_Pin;
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80048e2:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e4:	a903      	add	r1, sp, #12
 80048e6:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80048e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ec:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	f7fd faa5 	bl	8001e3c <HAL_GPIO_Init>

}
 80048f2:	b009      	add	sp, #36	; 0x24
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40021000 	.word	0x40021000
 80048fc:	50000400 	.word	0x50000400
 8004900:	00001f26 	.word	0x00001f26
 8004904:	00001c06 	.word	0x00001c06
 8004908:	50000c00 	.word	0x50000c00
 800490c:	10110000 	.word	0x10110000

08004910 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004910:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <MX_I2C1_Init+0x58>)
 8004914:	4c15      	ldr	r4, [pc, #84]	; (800496c <MX_I2C1_Init+0x5c>)
  hi2c1.Init.Timing = 0x00100413;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004916:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8004918:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00100413;
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <MX_I2C1_Init+0x60>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800491c:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00100413;
 800491e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004920:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004922:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8004924:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004926:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004928:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800492a:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800492c:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800492e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004930:	f7fd fc82 	bl	8002238 <HAL_I2C_Init>
 8004934:	2800      	cmp	r0, #0
 8004936:	d001      	beq.n	800493c <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8004938:	f000 fae2 	bl	8004f00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800493c:	2100      	movs	r1, #0
 800493e:	0020      	movs	r0, r4
 8004940:	f7fe f996 	bl	8002c70 <HAL_I2CEx_ConfigAnalogFilter>
 8004944:	2800      	cmp	r0, #0
 8004946:	d001      	beq.n	800494c <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8004948:	f000 fada 	bl	8004f00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800494c:	2100      	movs	r1, #0
 800494e:	0020      	movs	r0, r4
 8004950:	f7fe f9b4 	bl	8002cbc <HAL_I2CEx_ConfigDigitalFilter>
 8004954:	2800      	cmp	r0, #0
 8004956:	d001      	beq.n	800495c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004958:	f000 fad2 	bl	8004f00 <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800495c:	2080      	movs	r0, #128	; 0x80
 800495e:	0340      	lsls	r0, r0, #13
 8004960:	f7fe f9d0 	bl	8002d04 <HAL_I2CEx_EnableFastModePlus>

}
 8004964:	bd10      	pop	{r4, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40005400 	.word	0x40005400
 800496c:	20000588 	.word	0x20000588
 8004970:	00100413 	.word	0x00100413

08004974 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004974:	b530      	push	{r4, r5, lr}
 8004976:	0005      	movs	r5, r0
 8004978:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497a:	2214      	movs	r2, #20
 800497c:	2100      	movs	r1, #0
 800497e:	a803      	add	r0, sp, #12
 8004980:	f000 fed1 	bl	8005726 <memset>
  if(i2cHandle->Instance==I2C1)
 8004984:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_I2C_MspInit+0x9c>)
 8004986:	682a      	ldr	r2, [r5, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d13f      	bne.n	8004a0c <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498c:	2102      	movs	r1, #2
 800498e:	4c21      	ldr	r4, [pc, #132]	; (8004a14 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004990:	4821      	ldr	r0, [pc, #132]	; (8004a18 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004992:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004994:	430a      	orrs	r2, r1
 8004996:	6362      	str	r2, [r4, #52]	; 0x34
 8004998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800499a:	400b      	ands	r3, r1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049a0:	23c0      	movs	r3, #192	; 0xc0
 80049a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a4:	3bae      	subs	r3, #174	; 0xae
 80049a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a8:	3b11      	subs	r3, #17
 80049aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80049ae:	3305      	adds	r3, #5
 80049b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b2:	f7fd fa43 	bl	8001e3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049b6:	2180      	movs	r1, #128	; 0x80
 80049b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80049ba:	0389      	lsls	r1, r1, #14
 80049bc:	430a      	orrs	r2, r1
 80049be:	63e2      	str	r2, [r4, #60]	; 0x3c
 80049c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 80049c2:	4c16      	ldr	r4, [pc, #88]	; (8004a1c <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049c4:	400b      	ands	r3, r1
 80049c6:	9302      	str	r3, [sp, #8]
 80049c8:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_I2C_MspInit+0xac>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049cc:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 80049ce:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80049d0:	230b      	movs	r3, #11
 80049d2:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d4:	3305      	adds	r3, #5
 80049d6:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049dc:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049de:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80049e0:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049e2:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80049e4:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049e6:	019b      	lsls	r3, r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049e8:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049ea:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80049ec:	f7fd f8f4 	bl	8001bd8 <HAL_DMA_Init>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 80049f4:	f000 fa84 	bl	8004f00 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2017      	movs	r0, #23
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80049fc:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80049fe:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004a00:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004a02:	f7fd f859 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004a06:	2017      	movs	r0, #23
 8004a08:	f7fd f886 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004a0c:	b009      	add	sp, #36	; 0x24
 8004a0e:	bd30      	pop	{r4, r5, pc}
 8004a10:	40005400 	.word	0x40005400
 8004a14:	40021000 	.word	0x40021000
 8004a18:	50000400 	.word	0x50000400
 8004a1c:	2000052c 	.word	0x2000052c
 8004a20:	40020008 	.word	0x40020008

08004a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a24:	b530      	push	{r4, r5, lr}
 8004a26:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a28:	2238      	movs	r2, #56	; 0x38
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	a812      	add	r0, sp, #72	; 0x48
 8004a2e:	f000 fe7a 	bl	8005726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a32:	2210      	movs	r2, #16
 8004a34:	2100      	movs	r1, #0
 8004a36:	a801      	add	r0, sp, #4
 8004a38:	f000 fe75 	bl	8005726 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a3c:	2234      	movs	r2, #52	; 0x34
 8004a3e:	2100      	movs	r1, #0
 8004a40:	a805      	add	r0, sp, #20
 8004a42:	f000 fe70 	bl	8005726 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a46:	2080      	movs	r0, #128	; 0x80
 8004a48:	0080      	lsls	r0, r0, #2
 8004a4a:	f7fe f96f 	bl	8002d2c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a54:	3bc0      	subs	r3, #192	; 0xc0
 8004a56:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004a58:	3b38      	subs	r3, #56	; 0x38
 8004a5a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	049b      	lsls	r3, r3, #18
 8004a66:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a68:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004a6a:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a6c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a6e:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a70:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a72:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a74:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004a76:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a78:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a7a:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004a7c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a7e:	f7fe f97f 	bl	8002d80 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a82:	2307      	movs	r3, #7
 8004a84:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004a86:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a88:	2101      	movs	r1, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004a8a:	011b      	lsls	r3, r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a8c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004a8e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a90:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a92:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a94:	f7fe fbe4 	bl	8003260 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <SystemClock_Config+0x8c>)
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a9a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8004a9c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a9e:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004aa0:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004aa2:	940d      	str	r4, [sp, #52]	; 0x34
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004aa4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aa6:	f7fe fc9d 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004aaa:	b021      	add	sp, #132	; 0x84
 8004aac:	bd30      	pop	{r4, r5, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	00204060 	.word	0x00204060

08004ab4 <main>:
{
 8004ab4:	b510      	push	{r4, lr}
  HAL_Init();
 8004ab6:	f7fc fbed 	bl	8001294 <HAL_Init>
  SystemClock_Config();
 8004aba:	f7ff ffb3 	bl	8004a24 <SystemClock_Config>
  MX_GPIO_Init();
 8004abe:	f7ff fe9f 	bl	8004800 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ac2:	f7ff fe87 	bl	80047d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8004ac6:	f7ff fe0f 	bl	80046e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004aca:	f7ff ff21 	bl	8004910 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8004ace:	f000 fd65 	bl	800559c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8004ad2:	f000 fa17 	bl	8004f04 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8004ad6:	f000 fd51 	bl	800557c <MX_UCPD1_Init>
  MX_TIM2_Init();
 8004ada:	f000 fcdb 	bl	8005494 <MX_TIM2_Init>
  MX_TIM1_Init();
 8004ade:	f000 fc8d 	bl	80053fc <MX_TIM1_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  GPIO_PIN_RESET);
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	0049      	lsls	r1, r1, #1
 8004ae8:	4810      	ldr	r0, [pc, #64]	; (8004b2c <main+0x78>)
 8004aea:	f7fd fa55 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004aee:	2064      	movs	r0, #100	; 0x64
 8004af0:	f7fc fbf6 	bl	80012e0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  GPIO_PIN_SET);
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	2201      	movs	r2, #1
 8004af8:	0049      	lsls	r1, r1, #1
 8004afa:	480c      	ldr	r0, [pc, #48]	; (8004b2c <main+0x78>)
 8004afc:	f7fd fa4c 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  GPIO_PIN_SET);
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	2201      	movs	r2, #1
 8004b04:	0089      	lsls	r1, r1, #2
 8004b06:	4809      	ldr	r0, [pc, #36]	; (8004b2c <main+0x78>)
 8004b08:	f7fd fa46 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004b0c:	20a0      	movs	r0, #160	; 0xa0
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2102      	movs	r1, #2
 8004b12:	05c0      	lsls	r0, r0, #23
 8004b14:	f7fd fa40 	bl	8001f98 <HAL_GPIO_WritePin>
  ssd1306_Init();
 8004b18:	f000 faae 	bl	8005078 <ssd1306_Init>
 HAL_TIM_Base_Start_IT(&htim1);
 8004b1c:	4804      	ldr	r0, [pc, #16]	; (8004b30 <main+0x7c>)
 8004b1e:	f7fe fdc1 	bl	80036a4 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Base_Start_IT(&htim2);
 8004b22:	4804      	ldr	r0, [pc, #16]	; (8004b34 <main+0x80>)
 8004b24:	f7fe fdbe 	bl	80036a4 <HAL_TIM_Base_Start_IT>
 8004b28:	e7fe      	b.n	8004b28 <main+0x74>
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	50000400 	.word	0x50000400
 8004b30:	20000a88 	.word	0x20000a88
 8004b34:	20000ac8 	.word	0x20000ac8

08004b38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == TIM2){
 8004b38:	2380      	movs	r3, #128	; 0x80
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim->Instance == TIM2){
 8004b3c:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	0007      	movs	r7, r0
	if(htim->Instance == TIM2){
 8004b42:	05db      	lsls	r3, r3, #23
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d000      	beq.n	8004b4a <HAL_TIM_PeriodElapsedCallback+0x12>
 8004b48:	e0b7      	b.n	8004cba <HAL_TIM_PeriodElapsedCallback+0x182>
		//Obnovi se oled displej


		HAL_ADC_Start(&hadc1);
 8004b4a:	4cdd      	ldr	r4, [pc, #884]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8004b4c:	0020      	movs	r0, r4
 8004b4e:	f7fc ff81 	bl	8001a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004b52:	2101      	movs	r1, #1
 8004b54:	0020      	movs	r0, r4
 8004b56:	4249      	negs	r1, r1
 8004b58:	f7fc fd10 	bl	800157c <HAL_ADC_PollForConversion>
		int vbat = HAL_ADC_GetValue(&hadc1);
 8004b5c:	0020      	movs	r0, r4
 8004b5e:	f7fc fd69 	bl	8001634 <HAL_ADC_GetValue>
		double vbatF = (((double)vbat/(double)4096) * (double)5.1876);
 8004b62:	f7fc fb03 	bl	800116c <__aeabi_i2d>
 8004b66:	2200      	movs	r2, #0
 8004b68:	4bd6      	ldr	r3, [pc, #856]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8004b6a:	f7fb fd35 	bl	80005d8 <__aeabi_dmul>
 8004b6e:	4ad6      	ldr	r2, [pc, #856]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8004b70:	4bd6      	ldr	r3, [pc, #856]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x394>)
 8004b72:	f7fb fd31 	bl	80005d8 <__aeabi_dmul>
 8004b76:	9004      	str	r0, [sp, #16]
 8004b78:	9105      	str	r1, [sp, #20]

		HAL_ADC_Start(&hadc1);
 8004b7a:	0020      	movs	r0, r4
 8004b7c:	f7fc ff6a 	bl	8001a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004b80:	2101      	movs	r1, #1
 8004b82:	0020      	movs	r0, r4
 8004b84:	4249      	negs	r1, r1
 8004b86:	f7fc fcf9 	bl	800157c <HAL_ADC_PollForConversion>
		int vbat2 = HAL_ADC_GetValue(&hadc1);
 8004b8a:	0020      	movs	r0, r4
 8004b8c:	f7fc fd52 	bl	8001634 <HAL_ADC_GetValue>
		double vbatF2 = (((double)vbat2/(double)4096) * (double)5.1876);
 8004b90:	f7fc faec 	bl	800116c <__aeabi_i2d>
 8004b94:	2200      	movs	r2, #0
 8004b96:	4bcb      	ldr	r3, [pc, #812]	; (8004ec4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8004b98:	f7fb fd1e 	bl	80005d8 <__aeabi_dmul>
 8004b9c:	4aca      	ldr	r2, [pc, #808]	; (8004ec8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8004b9e:	4bcb      	ldr	r3, [pc, #812]	; (8004ecc <HAL_TIM_PeriodElapsedCallback+0x394>)
 8004ba0:	f7fb fd1a 	bl	80005d8 <__aeabi_dmul>
 8004ba4:	9006      	str	r0, [sp, #24]
 8004ba6:	9107      	str	r1, [sp, #28]


		ssd1306_Fill(Black);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f000 fa31 	bl	8005010 <ssd1306_Fill>
		c = ~c;
 8004bae:	4cc8      	ldr	r4, [pc, #800]	; (8004ed0 <HAL_TIM_PeriodElapsedCallback+0x398>)
		ssd1306_SetCursor(2,0);
 8004bb0:	2100      	movs	r1, #0
		c = ~c;
 8004bb2:	7823      	ldrb	r3, [r4, #0]
		ssd1306_SetCursor(2,0);
 8004bb4:	2002      	movs	r0, #2
		c = ~c;
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	7023      	strb	r3, [r4, #0]
		ssd1306_SetCursor(2,0);
 8004bba:	f000 fb9b 	bl	80052f4 <ssd1306_SetCursor>
		sprintf(buffer, "%06x   %02x", sw, c);
 8004bbe:	7823      	ldrb	r3, [r4, #0]
 8004bc0:	4ac4      	ldr	r2, [pc, #784]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004bc2:	4cc5      	ldr	r4, [pc, #788]	; (8004ed8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	49c5      	ldr	r1, [pc, #788]	; (8004edc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8004bc8:	0020      	movs	r0, r4
 8004bca:	f000 fe6f 	bl	80058ac <siprintf>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8004bce:	4dc4      	ldr	r5, [pc, #784]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	686a      	ldr	r2, [r5, #4]
 8004bd4:	6829      	ldr	r1, [r5, #0]
 8004bd6:	0020      	movs	r0, r4
 8004bd8:	f000 fb78 	bl	80052cc <ssd1306_WriteString>
		ssd1306_SetCursor(2,20);
 8004bdc:	2114      	movs	r1, #20
 8004bde:	2002      	movs	r0, #2
 8004be0:	f000 fb88 	bl	80052f4 <ssd1306_SetCursor>
		sprintf(buffer, "Off: %02d", cycles);
 8004be4:	4ebf      	ldr	r6, [pc, #764]	; (8004ee4 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8004be6:	49c0      	ldr	r1, [pc, #768]	; (8004ee8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8004be8:	7832      	ldrb	r2, [r6, #0]
 8004bea:	0020      	movs	r0, r4
 8004bec:	f000 fe5e 	bl	80058ac <siprintf>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8004bf0:	686a      	ldr	r2, [r5, #4]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	6829      	ldr	r1, [r5, #0]
 8004bf6:	0020      	movs	r0, r4
 8004bf8:	f000 fb68 	bl	80052cc <ssd1306_WriteString>

		ssd1306_SetCursor(2,40);
 8004bfc:	2128      	movs	r1, #40	; 0x28
 8004bfe:	2002      	movs	r0, #2
 8004c00:	f000 fb78 	bl	80052f4 <ssd1306_SetCursor>
		sprintf(buffer, "%1d.%02d|%1d.%02d", (int)vbatF, (int)((vbatF-(int)vbatF)*100), (int)vbatF2, (int)((vbatF2-(int)vbatF2)*100));
 8004c04:	9804      	ldr	r0, [sp, #16]
 8004c06:	9905      	ldr	r1, [sp, #20]
 8004c08:	f7fc fa7c 	bl	8001104 <__aeabi_d2iz>
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9806      	ldr	r0, [sp, #24]
 8004c10:	9907      	ldr	r1, [sp, #28]
 8004c12:	f7fc fa77 	bl	8001104 <__aeabi_d2iz>
 8004c16:	9003      	str	r0, [sp, #12]
 8004c18:	9802      	ldr	r0, [sp, #8]
 8004c1a:	f7fc faa7 	bl	800116c <__aeabi_i2d>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	000b      	movs	r3, r1
 8004c22:	9804      	ldr	r0, [sp, #16]
 8004c24:	9905      	ldr	r1, [sp, #20]
 8004c26:	f7fb ff57 	bl	8000ad8 <__aeabi_dsub>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4baf      	ldr	r3, [pc, #700]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8004c2e:	f7fb fcd3 	bl	80005d8 <__aeabi_dmul>
 8004c32:	f7fc fa67 	bl	8001104 <__aeabi_d2iz>
 8004c36:	9004      	str	r0, [sp, #16]
 8004c38:	9803      	ldr	r0, [sp, #12]
 8004c3a:	f7fc fa97 	bl	800116c <__aeabi_i2d>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	000b      	movs	r3, r1
 8004c42:	9806      	ldr	r0, [sp, #24]
 8004c44:	9907      	ldr	r1, [sp, #28]
 8004c46:	f7fb ff47 	bl	8000ad8 <__aeabi_dsub>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4ba7      	ldr	r3, [pc, #668]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8004c4e:	f7fb fcc3 	bl	80005d8 <__aeabi_dmul>
 8004c52:	f7fc fa57 	bl	8001104 <__aeabi_d2iz>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	9001      	str	r0, [sp, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	9a02      	ldr	r2, [sp, #8]
 8004c5e:	9b04      	ldr	r3, [sp, #16]
 8004c60:	49a3      	ldr	r1, [pc, #652]	; (8004ef0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8004c62:	0020      	movs	r0, r4
 8004c64:	f000 fe22 	bl	80058ac <siprintf>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8004c68:	cd06      	ldmia	r5!, {r1, r2}
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	f000 fb2d 	bl	80052cc <ssd1306_WriteString>

		ssd1306_UpdateScreen(0);
 8004c72:	2000      	movs	r0, #0
 8004c74:	f000 f9da 	bl	800502c <ssd1306_UpdateScreen>

		//oled_refresh();



		if(sw & 0x10000){
 8004c78:	2280      	movs	r2, #128	; 0x80
 8004c7a:	4b96      	ldr	r3, [pc, #600]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8004c7c:	0252      	lsls	r2, r2, #9
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4013      	ands	r3, r2
 8004c82:	d012      	beq.n	8004caa <HAL_TIM_PeriodElapsedCallback+0x172>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004c84:	20a0      	movs	r0, #160	; 0xa0
 8004c86:	2200      	movs	r2, #0
 8004c88:	2102      	movs	r1, #2
 8004c8a:	05c0      	lsls	r0, r0, #23
 8004c8c:	f7fd f984 	bl	8001f98 <HAL_GPIO_WritePin>
			cycles++;
 8004c90:	7833      	ldrb	r3, [r6, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	7033      	strb	r3, [r6, #0]
		}else{
			cycles = 0;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		}
		if(cycles >= 100){
 8004c96:	7833      	ldrb	r3, [r6, #0]
 8004c98:	2b63      	cmp	r3, #99	; 0x63
 8004c9a:	d90e      	bls.n	8004cba <HAL_TIM_PeriodElapsedCallback+0x182>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004c9c:	20a0      	movs	r0, #160	; 0xa0
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	05c0      	lsls	r0, r0, #23
 8004ca4:	f7fd f978 	bl	8001f98 <HAL_GPIO_WritePin>
 8004ca8:	e7fe      	b.n	8004ca8 <HAL_TIM_PeriodElapsedCallback+0x170>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004caa:	20a0      	movs	r0, #160	; 0xa0
 8004cac:	2201      	movs	r2, #1
 8004cae:	2102      	movs	r1, #2
 8004cb0:	05c0      	lsls	r0, r0, #23
			cycles = 0;
 8004cb2:	7033      	strb	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004cb4:	f7fd f970 	bl	8001f98 <HAL_GPIO_WritePin>
 8004cb8:	e7ed      	b.n	8004c96 <HAL_TIM_PeriodElapsedCallback+0x15e>
			while(1){;}
		}

	}

	if(htim->Instance == TIM1){
 8004cba:	4b8e      	ldr	r3, [pc, #568]	; (8004ef4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d000      	beq.n	8004cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8004cc2:	e0fb      	b.n	8004ebc <HAL_TIM_PeriodElapsedCallback+0x384>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	488b      	ldr	r0, [pc, #556]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004cca:	f7fd f965 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	2104      	movs	r1, #4
 8004cd2:	4889      	ldr	r0, [pc, #548]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004cd4:	f7fd f960 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	2201      	movs	r2, #1
 8004cdc:	00c9      	lsls	r1, r1, #3
 8004cde:	4886      	ldr	r0, [pc, #536]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004ce0:	f7fd f95a 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	0109      	lsls	r1, r1, #4
 8004cea:	4883      	ldr	r0, [pc, #524]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004cec:	f7fd f954 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004cf0:	2180      	movs	r1, #128	; 0x80

				sw = 0;
 8004cf2:	2500      	movs	r5, #0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	0149      	lsls	r1, r1, #5
 8004cf8:	487f      	ldr	r0, [pc, #508]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004cfa:	f7fd f94d 	bl	8001f98 <HAL_GPIO_WritePin>
				sw = 0;
 8004cfe:	4c75      	ldr	r4, [pc, #468]	; (8004ed4 <HAL_TIM_PeriodElapsedCallback+0x39c>)


				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8004d00:	2101      	movs	r1, #1
 8004d02:	487e      	ldr	r0, [pc, #504]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
				sw = 0;
 8004d04:	6025      	str	r5, [r4, #0]
				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8004d06:	f7fd f941 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	4247      	negs	r7, r0
 8004d0e:	4147      	adcs	r7, r0
 8004d10:	487a      	ldr	r0, [pc, #488]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d12:	f7fd f93b 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d16:	0003      	movs	r3, r0
 8004d18:	4258      	negs	r0, r3
 8004d1a:	4158      	adcs	r0, r3
 8004d1c:	0040      	lsls	r0, r0, #1
 8004d1e:	4307      	orrs	r7, r0
 8004d20:	2104      	movs	r1, #4
 8004d22:	4876      	ldr	r0, [pc, #472]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d24:	f7fd f932 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	4258      	negs	r0, r3
 8004d2c:	4158      	adcs	r0, r3
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	0080      	lsls	r0, r0, #2
 8004d32:	4338      	orrs	r0, r7
 8004d34:	4318      	orrs	r0, r3
 8004d36:	6020      	str	r0, [r4, #0]

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	486e      	ldr	r0, [pc, #440]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004d3e:	f7fd f92b 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8004d42:	002a      	movs	r2, r5
 8004d44:	2104      	movs	r1, #4
 8004d46:	486c      	ldr	r0, [pc, #432]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004d48:	f7fd f926 	bl	8001f98 <HAL_GPIO_WritePin>

				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 3;
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	486b      	ldr	r0, [pc, #428]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d50:	f7fd f91c 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d54:	2102      	movs	r1, #2
 8004d56:	4247      	negs	r7, r0
 8004d58:	4147      	adcs	r7, r0
 8004d5a:	4868      	ldr	r0, [pc, #416]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d5c:	f7fd f916 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d60:	0003      	movs	r3, r0
 8004d62:	4258      	negs	r0, r3
 8004d64:	4158      	adcs	r0, r3
 8004d66:	0040      	lsls	r0, r0, #1
 8004d68:	4307      	orrs	r7, r0
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	4863      	ldr	r0, [pc, #396]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d6e:	f7fd f90d 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004d72:	0003      	movs	r3, r0
 8004d74:	4258      	negs	r0, r3
 8004d76:	4158      	adcs	r0, r3
 8004d78:	0080      	lsls	r0, r0, #2
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	4338      	orrs	r0, r7
 8004d7e:	00c0      	lsls	r0, r0, #3
 8004d80:	4318      	orrs	r0, r3
 8004d82:	6020      	str	r0, [r4, #0]

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8004d84:	2201      	movs	r2, #1
 8004d86:	2104      	movs	r1, #4
 8004d88:	485b      	ldr	r0, [pc, #364]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004d8a:	f7fd f905 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	002a      	movs	r2, r5
 8004d92:	00c9      	lsls	r1, r1, #3
 8004d94:	4858      	ldr	r0, [pc, #352]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004d96:	f7fd f8ff 	bl	8001f98 <HAL_GPIO_WritePin>

				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4857      	ldr	r0, [pc, #348]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004d9e:	f7fd f8f5 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004da2:	2102      	movs	r1, #2
 8004da4:	4247      	negs	r7, r0
 8004da6:	4147      	adcs	r7, r0
 8004da8:	4854      	ldr	r0, [pc, #336]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004daa:	f7fd f8ef 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004dae:	0003      	movs	r3, r0
 8004db0:	4258      	negs	r0, r3
 8004db2:	4158      	adcs	r0, r3
 8004db4:	0040      	lsls	r0, r0, #1
 8004db6:	4307      	orrs	r7, r0
 8004db8:	2104      	movs	r1, #4
 8004dba:	4850      	ldr	r0, [pc, #320]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004dbc:	f7fd f8e6 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	4258      	negs	r0, r3
 8004dc4:	4158      	adcs	r0, r3

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004dc6:	2180      	movs	r1, #128	; 0x80
				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8004dc8:	0080      	lsls	r0, r0, #2
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	4338      	orrs	r0, r7
 8004dce:	0180      	lsls	r0, r0, #6
 8004dd0:	4318      	orrs	r0, r3
 8004dd2:	6020      	str	r0, [r4, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	00c9      	lsls	r1, r1, #3
 8004dd8:	4847      	ldr	r0, [pc, #284]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004dda:	f7fd f8dd 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	002a      	movs	r2, r5
 8004de2:	0109      	lsls	r1, r1, #4
 8004de4:	4844      	ldr	r0, [pc, #272]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004de6:	f7fd f8d7 	bl	8001f98 <HAL_GPIO_WritePin>

				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8004dea:	2101      	movs	r1, #1
 8004dec:	4843      	ldr	r0, [pc, #268]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004dee:	f7fd f8cd 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004df2:	2102      	movs	r1, #2
 8004df4:	4247      	negs	r7, r0
 8004df6:	4147      	adcs	r7, r0
 8004df8:	4840      	ldr	r0, [pc, #256]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004dfa:	f7fd f8c7 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	4258      	negs	r0, r3
 8004e02:	4158      	adcs	r0, r3
 8004e04:	0040      	lsls	r0, r0, #1
 8004e06:	4307      	orrs	r7, r0
 8004e08:	2104      	movs	r1, #4
 8004e0a:	483c      	ldr	r0, [pc, #240]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e0c:	f7fd f8be 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004e10:	0003      	movs	r3, r0
 8004e12:	4258      	negs	r0, r3
 8004e14:	4158      	adcs	r0, r3

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004e16:	2180      	movs	r1, #128	; 0x80
				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8004e18:	0080      	lsls	r0, r0, #2
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4338      	orrs	r0, r7
 8004e1e:	0240      	lsls	r0, r0, #9
 8004e20:	4318      	orrs	r0, r3
 8004e22:	6020      	str	r0, [r4, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004e24:	2201      	movs	r2, #1
 8004e26:	0109      	lsls	r1, r1, #4
 8004e28:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e2a:	f7fd f8b5 	bl	8001f98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	002a      	movs	r2, r5
 8004e32:	0149      	lsls	r1, r1, #5
 8004e34:	4830      	ldr	r0, [pc, #192]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e36:	f7fd f8af 	bl	8001f98 <HAL_GPIO_WritePin>

				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	482f      	ldr	r0, [pc, #188]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e3e:	f7fd f8a5 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004e42:	2102      	movs	r1, #2
 8004e44:	4247      	negs	r7, r0
 8004e46:	4147      	adcs	r7, r0
 8004e48:	482c      	ldr	r0, [pc, #176]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e4a:	f7fd f89f 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	4258      	negs	r0, r3
 8004e52:	4158      	adcs	r0, r3
 8004e54:	0040      	lsls	r0, r0, #1
 8004e56:	4307      	orrs	r7, r0
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4828      	ldr	r0, [pc, #160]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e5c:	f7fd f896 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004e60:	0003      	movs	r3, r0
 8004e62:	4258      	negs	r0, r3
 8004e64:	4158      	adcs	r0, r3

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004e66:	2180      	movs	r1, #128	; 0x80
				sw |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8004e68:	0080      	lsls	r0, r0, #2
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	4338      	orrs	r0, r7
 8004e6e:	0300      	lsls	r0, r0, #12
 8004e70:	4318      	orrs	r0, r3
 8004e72:	6020      	str	r0, [r4, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004e74:	2201      	movs	r2, #1
 8004e76:	0149      	lsls	r1, r1, #5
 8004e78:	481f      	ldr	r0, [pc, #124]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e7a:	f7fd f88d 	bl	8001f98 <HAL_GPIO_WritePin>


				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004e7e:	20a0      	movs	r0, #160	; 0xa0
 8004e80:	002a      	movs	r2, r5
 8004e82:	2102      	movs	r1, #2
 8004e84:	05c0      	lsls	r0, r0, #23
 8004e86:	f7fd f887 	bl	8001f98 <HAL_GPIO_WritePin>
				sw |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	481a      	ldr	r0, [pc, #104]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e8e:	01c9      	lsls	r1, r1, #7
 8004e90:	f7fd f87c 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	0006      	movs	r6, r0
 8004e98:	0189      	lsls	r1, r1, #6
 8004e9a:	4817      	ldr	r0, [pc, #92]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e9c:	f7fd f876 	bl	8001f8c <HAL_GPIO_ReadPin>
 8004ea0:	4275      	negs	r5, r6
 8004ea2:	4175      	adcs	r5, r6
 8004ea4:	0040      	lsls	r0, r0, #1
 8004ea6:	4305      	orrs	r5, r0
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004ea8:	20a0      	movs	r0, #160	; 0xa0
				sw |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	03ed      	lsls	r5, r5, #15
 8004eae:	431d      	orrs	r5, r3
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	05c0      	lsls	r0, r0, #23
				sw |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004eb6:	6025      	str	r5, [r4, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004eb8:	f7fd f86e 	bl	8001f98 <HAL_GPIO_WritePin>
	}


}
 8004ebc:	b009      	add	sp, #36	; 0x24
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec0:	200004c8 	.word	0x200004c8
 8004ec4:	3f300000 	.word	0x3f300000
 8004ec8:	36e2eb1c 	.word	0x36e2eb1c
 8004ecc:	4014c01a 	.word	0x4014c01a
 8004ed0:	20000610 	.word	0x20000610
 8004ed4:	20000098 	.word	0x20000098
 8004ed8:	200005d4 	.word	0x200005d4
 8004edc:	08005fd1 	.word	0x08005fd1
 8004ee0:	20000008 	.word	0x20000008
 8004ee4:	20000094 	.word	0x20000094
 8004ee8:	08005fdd 	.word	0x08005fdd
 8004eec:	40590000 	.word	0x40590000
 8004ef0:	08005fe7 	.word	0x08005fe7
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	50000400 	.word	0x50000400
 8004efc:	50000c00 	.word	0x50000c00

08004f00 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f00:	4770      	bx	lr
	...

08004f04 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8004f04:	4810      	ldr	r0, [pc, #64]	; (8004f48 <MX_SPI1_Init+0x44>)
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <MX_SPI1_Init+0x48>)
{
 8004f08:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8004f0a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f0c:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004f0e:	22c0      	movs	r2, #192	; 0xc0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f14:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	3aff      	subs	r2, #255	; 0xff
 8004f1e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004f20:	3afa      	subs	r2, #250	; 0xfa
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f22:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f24:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f26:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f28:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f2a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f2c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f30:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f32:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f34:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8004f36:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f38:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f3a:	f7fe fb55 	bl	80035e8 <HAL_SPI_Init>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d001      	beq.n	8004f46 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 8004f42:	f7ff ffdd 	bl	8004f00 <Error_Handler>
  }

}
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	20000614 	.word	0x20000614
 8004f4c:	40013000 	.word	0x40013000

08004f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f50:	b510      	push	{r4, lr}
 8004f52:	0004      	movs	r4, r0
 8004f54:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f56:	2214      	movs	r2, #20
 8004f58:	2100      	movs	r1, #0
 8004f5a:	a803      	add	r0, sp, #12
 8004f5c:	f000 fbe3 	bl	8005726 <memset>
  if(spiHandle->Instance==SPI1)
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_SPI_MspInit+0x78>)
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d12c      	bne.n	8004fc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f68:	2080      	movs	r0, #128	; 0x80
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_SPI_MspInit+0x7c>)
 8004f6c:	0140      	lsls	r0, r0, #5
 8004f6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f70:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f72:	4301      	orrs	r1, r0
 8004f74:	6419      	str	r1, [r3, #64]	; 0x40
 8004f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f78:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7a:	2001      	movs	r0, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f7c:	9200      	str	r2, [sp, #0]
 8004f7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f82:	4301      	orrs	r1, r0
 8004f84:	6359      	str	r1, [r3, #52]	; 0x34
 8004f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f8a:	4002      	ands	r2, r0
 8004f8c:	9201      	str	r2, [sp, #4]
 8004f8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f92:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f94:	4322      	orrs	r2, r4
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9c:	4023      	ands	r3, r4
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fa2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fa6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa8:	f7fc ff48 	bl	8001e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fac:	2308      	movs	r3, #8
 8004fae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb2:	a903      	add	r1, sp, #12
 8004fb4:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004fbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbe:	f7fc ff3d 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004fc2:	b008      	add	sp, #32
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	40013000 	.word	0x40013000
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	50000400 	.word	0x50000400

08004fd4 <ssd1306_WriteBufferByte>:
#if defined(SSD1306_USE_I2C)

uint8_t screenBuffer[(SSD1306_WIDTH * SSD1306_HEIGHT / 8)], bufferIndex = 0, txStep = 0, intStat = 0;


void ssd1306_WriteBufferByte(uint8_t buff[], uint8_t byte) {
 8004fd4:	b510      	push	{r4, lr}
	buff[bufferIndex++] = byte;
 8004fd6:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <ssd1306_WriteBufferByte+0x10>)
 8004fd8:	7813      	ldrb	r3, [r2, #0]
 8004fda:	1c5c      	adds	r4, r3, #1
 8004fdc:	7014      	strb	r4, [r2, #0]
 8004fde:	54c1      	strb	r1, [r0, r3]
}
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	200004b2 	.word	0x200004b2

08004fe8 <ssd1306_SendBuffer>:

void ssd1306_SendBuffer(uint8_t memAdd, uint8_t buff[], uint32_t size) {
 8004fe8:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, memAdd, 1, buff, size);
 8004fea:	b280      	uxth	r0, r0
 8004fec:	b292      	uxth	r2, r2
 8004fee:	9201      	str	r2, [sp, #4]
 8004ff0:	9100      	str	r1, [sp, #0]
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	2178      	movs	r1, #120	; 0x78
 8004ff8:	4803      	ldr	r0, [pc, #12]	; (8005008 <ssd1306_SendBuffer+0x20>)
 8004ffa:	f7fd f973 	bl	80022e4 <HAL_I2C_Mem_Write_DMA>
	bufferIndex = 0;
 8004ffe:	2200      	movs	r2, #0
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <ssd1306_SendBuffer+0x24>)
 8005002:	701a      	strb	r2, [r3, #0]
}
 8005004:	bd07      	pop	{r0, r1, r2, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000588 	.word	0x20000588
 800500c:	200004b2 	.word	0x200004b2

08005010 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005010:	1e42      	subs	r2, r0, #1
 8005012:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005014:	2282      	movs	r2, #130	; 0x82
 8005016:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005018:	4903      	ldr	r1, [pc, #12]	; (8005028 <ssd1306_Fill+0x18>)
 800501a:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800501c:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800501e:	5458      	strb	r0, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005020:	3301      	adds	r3, #1
 8005022:	4293      	cmp	r3, r2
 8005024:	d1fb      	bne.n	800501e <ssd1306_Fill+0xe>
    }
}
 8005026:	4770      	bx	lr
 8005028:	200000a2 	.word	0x200000a2

0800502c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(uint8_t step) {
 800502c:	0003      	movs	r3, r0
    intStat = 1;
 800502e:	2001      	movs	r0, #1
 8005030:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <ssd1306_UpdateScreen+0x3c>)
void ssd1306_UpdateScreen(uint8_t step) {
 8005032:	b510      	push	{r4, lr}
    intStat = 1;
 8005034:	7010      	strb	r0, [r2, #0]
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }*/


    if(step % 2){
 8005036:	4018      	ands	r0, r3
 8005038:	d00d      	beq.n	8005056 <ssd1306_UpdateScreen+0x2a>
    	//memcpy(screenBuffer, &SSD1306_Buffer[SSD1306_WIDTH*((step+1)/2)], SSD1306_WIDTH);
    	ssd1306_SendBuffer(SSD1306_MEM_DAT, &SSD1306_Buffer[SSD1306_WIDTH*((step-1)/2)], SSD1306_WIDTH);
 800503a:	2282      	movs	r2, #130	; 0x82
 800503c:	2040      	movs	r0, #64	; 0x40
 800503e:	1e59      	subs	r1, r3, #1
 8005040:	1049      	asrs	r1, r1, #1
 8005042:	4351      	muls	r1, r2
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <ssd1306_UpdateScreen+0x40>)
 8005046:	1859      	adds	r1, r3, r1
    }else{
    	screenBuffer[0] = 0xB0 + (step/2);
    	screenBuffer[1] = 0x00;
    	screenBuffer[2] = 0x10;
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 8005048:	f7ff ffce 	bl	8004fe8 <ssd1306_SendBuffer>
    }

   /* if(step == 0 && txStep == 0){
    	txStep = 1;
    }else */txStep++;
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <ssd1306_UpdateScreen+0x44>)
 800504e:	7813      	ldrb	r3, [r2, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	7013      	strb	r3, [r2, #0]




    //ssd1306_SendBuffer(SSD1306_MEM_DAT, SSD1306_Buffer, ((SSD1306_WIDTH * SSD1306_HEIGHT) / 8));
}
 8005054:	bd10      	pop	{r4, pc}
    	screenBuffer[0] = 0xB0 + (step/2);
 8005056:	4907      	ldr	r1, [pc, #28]	; (8005074 <ssd1306_UpdateScreen+0x48>)
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	3b50      	subs	r3, #80	; 0x50
 800505c:	700b      	strb	r3, [r1, #0]
    	screenBuffer[2] = 0x10;
 800505e:	2310      	movs	r3, #16
    	screenBuffer[1] = 0x00;
 8005060:	7048      	strb	r0, [r1, #1]
    	screenBuffer[2] = 0x10;
 8005062:	708b      	strb	r3, [r1, #2]
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 8005064:	2203      	movs	r2, #3
 8005066:	e7ef      	b.n	8005048 <ssd1306_UpdateScreen+0x1c>
 8005068:	200004b3 	.word	0x200004b3
 800506c:	200000a2 	.word	0x200000a2
 8005070:	200004b4 	.word	0x200004b4
 8005074:	20000678 	.word	0x20000678

08005078 <ssd1306_Init>:
void ssd1306_Init(void) {
 8005078:	b510      	push	{r4, lr}
    HAL_Delay(100);
 800507a:	2064      	movs	r0, #100	; 0x64
 800507c:	f7fc f930 	bl	80012e0 <HAL_Delay>
    ssd1306_WriteBufferByte(screenBuffer, 0xAE); //display off
 8005080:	4c44      	ldr	r4, [pc, #272]	; (8005194 <ssd1306_Init+0x11c>)
 8005082:	21ae      	movs	r1, #174	; 0xae
 8005084:	0020      	movs	r0, r4
 8005086:	f7ff ffa5 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //Set Memory Addressing Mode
 800508a:	2120      	movs	r1, #32
 800508c:	0020      	movs	r0, r4
 800508e:	f7ff ffa1 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8005092:	2110      	movs	r1, #16
 8005094:	0020      	movs	r0, r4
 8005096:	f7ff ff9d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800509a:	21b0      	movs	r1, #176	; 0xb0
 800509c:	0020      	movs	r0, r4
 800509e:	f7ff ff99 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xC8); //Set COM Output Scan Direction
 80050a2:	21c8      	movs	r1, #200	; 0xc8
 80050a4:	0020      	movs	r0, r4
 80050a6:	f7ff ff95 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //---set low column address
 80050aa:	2100      	movs	r1, #0
 80050ac:	0020      	movs	r0, r4
 80050ae:	f7ff ff91 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); //---set high column address
 80050b2:	2110      	movs	r1, #16
 80050b4:	0020      	movs	r0, r4
 80050b6:	f7ff ff8d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x40); //--set start line address - CHECK
 80050ba:	2140      	movs	r1, #64	; 0x40
 80050bc:	0020      	movs	r0, r4
 80050be:	f7ff ff89 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x81); //--set contrast control register - CHECK
 80050c2:	2181      	movs	r1, #129	; 0x81
 80050c4:	0020      	movs	r0, r4
 80050c6:	f7ff ff85 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xFF);
 80050ca:	21ff      	movs	r1, #255	; 0xff
 80050cc:	0020      	movs	r0, r4
 80050ce:	f7ff ff81 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA1); //--set segment re-map 0 to 127 - CHECK
 80050d2:	21a1      	movs	r1, #161	; 0xa1
 80050d4:	0020      	movs	r0, r4
 80050d6:	f7ff ff7d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA6); //--set normal color
 80050da:	21a6      	movs	r1, #166	; 0xa6
 80050dc:	0020      	movs	r0, r4
 80050de:	f7ff ff79 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80050e2:	21a8      	movs	r1, #168	; 0xa8
 80050e4:	0020      	movs	r0, r4
 80050e6:	f7ff ff75 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x3F); //
 80050ea:	213f      	movs	r1, #63	; 0x3f
 80050ec:	0020      	movs	r0, r4
 80050ee:	f7ff ff71 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80050f2:	21a4      	movs	r1, #164	; 0xa4
 80050f4:	0020      	movs	r0, r4
 80050f6:	f7ff ff6d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD3); //-set display offset - CHECK
 80050fa:	21d3      	movs	r1, #211	; 0xd3
 80050fc:	0020      	movs	r0, r4
 80050fe:	f7ff ff69 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //-not offset
 8005102:	2100      	movs	r1, #0
 8005104:	0020      	movs	r0, r4
 8005106:	f7ff ff65 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD5); //--set display clock divide ratio/oscillator frequency
 800510a:	21d5      	movs	r1, #213	; 0xd5
 800510c:	0020      	movs	r0, r4
 800510e:	f7ff ff61 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xF0); //--set divide ratio
 8005112:	21f0      	movs	r1, #240	; 0xf0
 8005114:	0020      	movs	r0, r4
 8005116:	f7ff ff5d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD9); //--set pre-charge period
 800511a:	21d9      	movs	r1, #217	; 0xd9
 800511c:	0020      	movs	r0, r4
 800511e:	f7ff ff59 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x34); //22
 8005122:	2134      	movs	r1, #52	; 0x34
 8005124:	0020      	movs	r0, r4
 8005126:	f7ff ff55 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDA); //--set com pins hardware configuration - CHECK
 800512a:	21da      	movs	r1, #218	; 0xda
 800512c:	0020      	movs	r0, r4
 800512e:	f7ff ff51 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x12);
 8005132:	2112      	movs	r1, #18
 8005134:	0020      	movs	r0, r4
 8005136:	f7ff ff4d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDB); //--set vcomh
 800513a:	21db      	movs	r1, #219	; 0xdb
 800513c:	0020      	movs	r0, r4
 800513e:	f7ff ff49 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //0x20,0.77xVcc
 8005142:	2120      	movs	r1, #32
 8005144:	0020      	movs	r0, r4
 8005146:	f7ff ff45 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x8D); //--set DC-DC enable
 800514a:	218d      	movs	r1, #141	; 0x8d
 800514c:	0020      	movs	r0, r4
 800514e:	f7ff ff41 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x14); //
 8005152:	2114      	movs	r1, #20
 8005154:	0020      	movs	r0, r4
 8005156:	f7ff ff3d 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xAF); //--turn on SSD1306 panel
 800515a:	21af      	movs	r1, #175	; 0xaf
 800515c:	0020      	movs	r0, r4
 800515e:	f7ff ff39 	bl	8004fd4 <ssd1306_WriteBufferByte>
    ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, bufferIndex);
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <ssd1306_Init+0x120>)
 8005164:	0021      	movs	r1, r4
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	2000      	movs	r0, #0
 800516a:	f7ff ff3d 	bl	8004fe8 <ssd1306_SendBuffer>
    while(HAL_DMA_GetState(&hdma_i2c1_tx) == HAL_DMA_STATE_BUSY);
 800516e:	480b      	ldr	r0, [pc, #44]	; (800519c <ssd1306_Init+0x124>)
 8005170:	f7fc fe60 	bl	8001e34 <HAL_DMA_GetState>
 8005174:	2802      	cmp	r0, #2
 8005176:	d0fa      	beq.n	800516e <ssd1306_Init+0xf6>
    ssd1306_Fill(Black);
 8005178:	2000      	movs	r0, #0
 800517a:	f7ff ff49 	bl	8005010 <ssd1306_Fill>
    ssd1306_UpdateScreen(0);
 800517e:	2000      	movs	r0, #0
 8005180:	f7ff ff54 	bl	800502c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8005184:	2200      	movs	r2, #0
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <ssd1306_Init+0x128>)
 8005188:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800518a:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800518c:	3201      	adds	r2, #1
 800518e:	715a      	strb	r2, [r3, #5]
}
 8005190:	bd10      	pop	{r4, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	20000678 	.word	0x20000678
 8005198:	200004b2 	.word	0x200004b2
 800519c:	2000052c 	.word	0x2000052c
 80051a0:	2000009c 	.word	0x2000009c

080051a4 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){

	if(hi2c->Instance == I2C1){
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_I2C_MemTxCpltCallback+0x28>)
 80051a6:	6802      	ldr	r2, [r0, #0]
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80051a8:	b510      	push	{r4, lr}
	if(hi2c->Instance == I2C1){
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d109      	bne.n	80051c2 <HAL_I2C_MemTxCpltCallback+0x1e>
		if(intStat == 0){
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <HAL_I2C_MemTxCpltCallback+0x2c>)

		}else if(intStat == 1){
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	d105      	bne.n	80051c2 <HAL_I2C_MemTxCpltCallback+0x1e>
			if(txStep < 16){
 80051b6:	4907      	ldr	r1, [pc, #28]	; (80051d4 <HAL_I2C_MemTxCpltCallback+0x30>)
 80051b8:	7808      	ldrb	r0, [r1, #0]
 80051ba:	280f      	cmp	r0, #15
 80051bc:	d802      	bhi.n	80051c4 <HAL_I2C_MemTxCpltCallback+0x20>
				ssd1306_UpdateScreen(txStep);
 80051be:	f7ff ff35 	bl	800502c <ssd1306_UpdateScreen>
		}

	}


}
 80051c2:	bd10      	pop	{r4, pc}
				txStep = 0;
 80051c4:	2200      	movs	r2, #0
 80051c6:	700a      	strb	r2, [r1, #0]
				intStat = 0;
 80051c8:	701a      	strb	r2, [r3, #0]
}
 80051ca:	e7fa      	b.n	80051c2 <HAL_I2C_MemTxCpltCallback+0x1e>
 80051cc:	40005400 	.word	0x40005400
 80051d0:	200004b3 	.word	0x200004b3
 80051d4:	200004b4 	.word	0x200004b4

080051d8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80051d8:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80051da:	2881      	cmp	r0, #129	; 0x81
 80051dc:	d815      	bhi.n	800520a <ssd1306_DrawPixel+0x32>
 80051de:	293f      	cmp	r1, #63	; 0x3f
 80051e0:	d813      	bhi.n	800520a <ssd1306_DrawPixel+0x32>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <ssd1306_DrawPixel+0x40>)
 80051e4:	791b      	ldrb	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <ssd1306_DrawPixel+0x18>
        color = (SSD1306_COLOR)!color;
 80051ea:	4253      	negs	r3, r2
 80051ec:	415a      	adcs	r2, r3
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	2382      	movs	r3, #130	; 0x82
 80051f2:	08cd      	lsrs	r5, r1, #3
    }

    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80051f4:	436b      	muls	r3, r5
 80051f6:	1818      	adds	r0, r3, r0
 80051f8:	2307      	movs	r3, #7
 80051fa:	4c08      	ldr	r4, [pc, #32]	; (800521c <ssd1306_DrawPixel+0x44>)
 80051fc:	4019      	ands	r1, r3
    if(color == White) {
 80051fe:	2a01      	cmp	r2, #1
 8005200:	d104      	bne.n	800520c <ssd1306_DrawPixel+0x34>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005202:	408a      	lsls	r2, r1
 8005204:	5c23      	ldrb	r3, [r4, r0]
 8005206:	431a      	orrs	r2, r3
 8005208:	5422      	strb	r2, [r4, r0]
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 800520a:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800520c:	2201      	movs	r2, #1
 800520e:	408a      	lsls	r2, r1
 8005210:	5c23      	ldrb	r3, [r4, r0]
 8005212:	4393      	bics	r3, r2
 8005214:	5423      	strb	r3, [r4, r0]
 8005216:	e7f8      	b.n	800520a <ssd1306_DrawPixel+0x32>
 8005218:	2000009c 	.word	0x2000009c
 800521c:	200000a2 	.word	0x200000a2

08005220 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b08b      	sub	sp, #44	; 0x2c
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	b2cb      	uxtb	r3, r1
 8005228:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800522a:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <ssd1306_WriteChar+0xa8>)
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800522c:	9108      	str	r1, [sp, #32]
 800522e:	9209      	str	r2, [sp, #36]	; 0x24
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005230:	9903      	ldr	r1, [sp, #12]
 8005232:	881a      	ldrh	r2, [r3, #0]
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005234:	0006      	movs	r6, r0
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005236:	9202      	str	r2, [sp, #8]
 8005238:	1852      	adds	r2, r2, r1
 800523a:	2a81      	cmp	r2, #129	; 0x81
 800523c:	dc41      	bgt.n	80052c2 <ssd1306_WriteChar+0xa2>
 800523e:	aa08      	add	r2, sp, #32
 8005240:	7852      	ldrb	r2, [r2, #1]
 8005242:	9204      	str	r2, [sp, #16]
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005244:	885c      	ldrh	r4, [r3, #2]
 8005246:	18a3      	adds	r3, r4, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005248:	2b3f      	cmp	r3, #63	; 0x3f
 800524a:	dc3a      	bgt.n	80052c2 <ssd1306_WriteChar+0xa2>
        return 0;
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800524c:	0033      	movs	r3, r6
 800524e:	3b20      	subs	r3, #32
 8005250:	435a      	muls	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	9207      	str	r2, [sp, #28]
 8005256:	b2e4      	uxtb	r4, r4
 8005258:	9301      	str	r3, [sp, #4]
    for(i = 0; i < Font.FontHeight; i++) {
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	9a04      	ldr	r2, [sp, #16]
 800525e:	4293      	cmp	r3, r2
 8005260:	d308      	bcc.n	8005274 <ssd1306_WriteChar+0x54>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005262:	9a03      	ldr	r2, [sp, #12]
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	4694      	mov	ip, r2
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <ssd1306_WriteChar+0xa8>)
 800526a:	4463      	add	r3, ip
 800526c:	8013      	strh	r3, [r2, #0]

    // Return written char for validation
    return ch;
}
 800526e:	0030      	movs	r0, r6
 8005270:	b00b      	add	sp, #44	; 0x2c
 8005272:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005274:	9a07      	ldr	r2, [sp, #28]
 8005276:	9b01      	ldr	r3, [sp, #4]
        for(j = 0; j < Font.FontWidth; j++) {
 8005278:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800527a:	189b      	adds	r3, r3, r2
 800527c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	5a9b      	ldrh	r3, [r3, r2]
 8005282:	9306      	str	r3, [sp, #24]
 8005284:	466b      	mov	r3, sp
 8005286:	7a1d      	ldrb	r5, [r3, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	429f      	cmp	r7, r3
 800528c:	d305      	bcc.n	800529a <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	3401      	adds	r4, #1
 8005292:	3301      	adds	r3, #1
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	b2e4      	uxtb	r4, r4
 8005298:	e7df      	b.n	800525a <ssd1306_WriteChar+0x3a>
            if((b << j) & 0x8000)  {
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	2280      	movs	r2, #128	; 0x80
 800529e:	40bb      	lsls	r3, r7
 80052a0:	0212      	lsls	r2, r2, #8
 80052a2:	4213      	tst	r3, r2
 80052a4:	d008      	beq.n	80052b8 <ssd1306_WriteChar+0x98>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80052a6:	9a05      	ldr	r2, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80052a8:	0028      	movs	r0, r5
 80052aa:	0021      	movs	r1, r4
 80052ac:	3501      	adds	r5, #1
 80052ae:	f7ff ff93 	bl	80051d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80052b2:	3701      	adds	r7, #1
 80052b4:	b2ed      	uxtb	r5, r5
 80052b6:	e7e7      	b.n	8005288 <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80052b8:	9a05      	ldr	r2, [sp, #20]
 80052ba:	4253      	negs	r3, r2
 80052bc:	415a      	adcs	r2, r3
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	e7f2      	b.n	80052a8 <ssd1306_WriteChar+0x88>
        return 0;
 80052c2:	2600      	movs	r6, #0
 80052c4:	e7d3      	b.n	800526e <ssd1306_WriteChar+0x4e>
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	2000009c 	.word	0x2000009c

080052cc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80052cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ce:	0004      	movs	r4, r0
 80052d0:	001d      	movs	r5, r3
 80052d2:	9100      	str	r1, [sp, #0]
 80052d4:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 80052d6:	7820      	ldrb	r0, [r4, #0]
 80052d8:	2800      	cmp	r0, #0
 80052da:	d100      	bne.n	80052de <ssd1306_WriteString+0x12>
        str++;
    }

    // Everything ok
    return *str;
}
 80052dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80052de:	002b      	movs	r3, r5
 80052e0:	9900      	ldr	r1, [sp, #0]
 80052e2:	9a01      	ldr	r2, [sp, #4]
 80052e4:	f7ff ff9c 	bl	8005220 <ssd1306_WriteChar>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7820      	ldrb	r0, [r4, #0]
 80052ec:	4283      	cmp	r3, r0
 80052ee:	d1f5      	bne.n	80052dc <ssd1306_WriteString+0x10>
        str++;
 80052f0:	3401      	adds	r4, #1
 80052f2:	e7f0      	b.n	80052d6 <ssd1306_WriteString+0xa>

080052f4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80052f4:	4b01      	ldr	r3, [pc, #4]	; (80052fc <ssd1306_SetCursor+0x8>)
 80052f6:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80052f8:	8059      	strh	r1, [r3, #2]
}
 80052fa:	4770      	bx	lr
 80052fc:	2000009c 	.word	0x2000009c

08005300 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005300:	2001      	movs	r0, #1
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <HAL_MspInit+0x38>)
{
 8005304:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005308:	4301      	orrs	r1, r0
 800530a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005312:	4002      	ands	r2, r0
 8005314:	9200      	str	r2, [sp, #0]
 8005316:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531a:	430a      	orrs	r2, r1
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <HAL_MspInit+0x3c>)
 8005322:	400b      	ands	r3, r1
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	9b01      	ldr	r3, [sp, #4]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	6811      	ldr	r1, [r2, #0]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	430b      	orrs	r3, r1
 8005330:	6013      	str	r3, [r2, #0]
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD2_STROBE);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005332:	b002      	add	sp, #8
 8005334:	4770      	bx	lr
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	40021000 	.word	0x40021000
 800533c:	40010000 	.word	0x40010000

08005340 <NMI_Handler>:
 8005340:	4770      	bx	lr

08005342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005342:	e7fe      	b.n	8005342 <HardFault_Handler>

08005344 <SVC_Handler>:
 8005344:	4770      	bx	lr

08005346 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005346:	4770      	bx	lr

08005348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005348:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800534a:	f7fb ffb7 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800534e:	bd10      	pop	{r4, pc}

08005350 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005350:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005352:	4802      	ldr	r0, [pc, #8]	; (800535c <DMA1_Channel1_IRQHandler+0xc>)
 8005354:	f7fc fd1a 	bl	8001d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005358:	bd10      	pop	{r4, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	2000052c 	.word	0x2000052c

08005360 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005360:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005362:	4802      	ldr	r0, [pc, #8]	; (800536c <ADC1_COMP_IRQHandler+0xc>)
 8005364:	f7fc f96c 	bl	8001640 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005368:	bd10      	pop	{r4, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	200004c8 	.word	0x200004c8

08005370 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005370:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005372:	4802      	ldr	r0, [pc, #8]	; (800537c <TIM1_CC_IRQHandler+0xc>)
 8005374:	f7fe f9ae 	bl	80036d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005378:	bd10      	pop	{r4, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	20000a88 	.word	0x20000a88

08005380 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
 8005380:	b510      	push	{r4, lr}
 8005382:	f7ff fff5 	bl	8005370 <TIM1_CC_IRQHandler>
 8005386:	bd10      	pop	{r4, pc}

08005388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005388:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800538a:	4802      	ldr	r0, [pc, #8]	; (8005394 <TIM2_IRQHandler+0xc>)
 800538c:	f7fe f9a2 	bl	80036d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005390:	bd10      	pop	{r4, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	20000ac8 	.word	0x20000ac8

08005398 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005398:	4806      	ldr	r0, [pc, #24]	; (80053b4 <I2C1_IRQHandler+0x1c>)
{
 800539a:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800539c:	6803      	ldr	r3, [r0, #0]
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	23e0      	movs	r3, #224	; 0xe0
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	421a      	tst	r2, r3
 80053a6:	d002      	beq.n	80053ae <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80053a8:	f7fd fc22 	bl	8002bf0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80053ac:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80053ae:	f7fd f83f 	bl	8002430 <HAL_I2C_EV_IRQHandler>
}
 80053b2:	e7fb      	b.n	80053ac <I2C1_IRQHandler+0x14>
 80053b4:	20000588 	.word	0x20000588

080053b8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <_sbrk+0x2c>)
{
 80053ba:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80053bc:	6819      	ldr	r1, [r3, #0]
{
 80053be:	0002      	movs	r2, r0
	if (heap_end == 0)
 80053c0:	2900      	cmp	r1, #0
 80053c2:	d101      	bne.n	80053c8 <_sbrk+0x10>
		heap_end = &end;
 80053c4:	4908      	ldr	r1, [pc, #32]	; (80053e8 <_sbrk+0x30>)
 80053c6:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80053c8:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80053ca:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80053cc:	1882      	adds	r2, r0, r2
 80053ce:	428a      	cmp	r2, r1
 80053d0:	d906      	bls.n	80053e0 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80053d2:	f000 f975 	bl	80056c0 <__errno>
 80053d6:	230c      	movs	r3, #12
 80053d8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80053da:	2001      	movs	r0, #1
 80053dc:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80053de:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80053e0:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80053e2:	e7fc      	b.n	80053de <_sbrk+0x26>
 80053e4:	200004b8 	.word	0x200004b8
 80053e8:	20000b98 	.word	0x20000b98

080053ec <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	4b02      	ldr	r3, [pc, #8]	; (80053f8 <SystemInit+0xc>)
 80053f0:	0512      	lsls	r2, r2, #20
 80053f2:	609a      	str	r2, [r3, #8]
#endif
}
 80053f4:	4770      	bx	lr
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80053fc:	b530      	push	{r4, r5, lr}
 80053fe:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005400:	2210      	movs	r2, #16
 8005402:	2100      	movs	r1, #0
 8005404:	a803      	add	r0, sp, #12
 8005406:	f000 f98e 	bl	8005726 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800540a:	220c      	movs	r2, #12
 800540c:	2100      	movs	r1, #0
 800540e:	4668      	mov	r0, sp
 8005410:	f000 f989 	bl	8005726 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005414:	2234      	movs	r2, #52	; 0x34
 8005416:	2100      	movs	r1, #0
 8005418:	a807      	add	r0, sp, #28
 800541a:	f000 f984 	bl	8005726 <memset>

  htim1.Instance = TIM1;
 800541e:	4c1b      	ldr	r4, [pc, #108]	; (800548c <MX_TIM1_Init+0x90>)
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <MX_TIM1_Init+0x94>)
  htim1.Init.Prescaler = 31;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 100;
 8005422:	2264      	movs	r2, #100	; 0x64
  htim1.Instance = TIM1;
 8005424:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 31;
 8005426:	231f      	movs	r3, #31
 8005428:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800542a:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800542c:	0020      	movs	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800542e:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 100;
 8005430:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005432:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8005434:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005436:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005438:	f7fe fa50 	bl	80038dc <HAL_TIM_Base_Init>
 800543c:	2800      	cmp	r0, #0
 800543e:	d001      	beq.n	8005444 <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8005440:	f7ff fd5e 	bl	8004f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005444:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005446:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005448:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800544a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800544e:	f7fe fa6d 	bl	800392c <HAL_TIM_ConfigClockSource>
 8005452:	2800      	cmp	r0, #0
 8005454:	d001      	beq.n	800545a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8005456:	f7ff fd53 	bl	8004f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800545a:	2500      	movs	r5, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800545c:	4669      	mov	r1, sp
 800545e:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005460:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005462:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005464:	9502      	str	r5, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005466:	f7fe faf7 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 800546a:	42a8      	cmp	r0, r5
 800546c:	d001      	beq.n	8005472 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800546e:	f7ff fd47 	bl	8004f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005472:	a907      	add	r1, sp, #28
 8005474:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005476:	950e      	str	r5, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005478:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800547a:	f7fe fb17 	bl	8003aac <HAL_TIMEx_ConfigBreakDeadTime>
 800547e:	2800      	cmp	r0, #0
 8005480:	d001      	beq.n	8005486 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005482:	f7ff fd3d 	bl	8004f00 <Error_Handler>
  }

}
 8005486:	b015      	add	sp, #84	; 0x54
 8005488:	bd30      	pop	{r4, r5, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	20000a88 	.word	0x20000a88
 8005490:	40012c00 	.word	0x40012c00

08005494 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005494:	b510      	push	{r4, lr}
 8005496:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005498:	2210      	movs	r2, #16
 800549a:	2100      	movs	r1, #0
 800549c:	a804      	add	r0, sp, #16
 800549e:	f000 f942 	bl	8005726 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054a2:	220c      	movs	r2, #12
 80054a4:	2100      	movs	r1, #0
 80054a6:	a801      	add	r0, sp, #4
 80054a8:	f000 f93d 	bl	8005726 <memset>

  htim2.Instance = TIM2;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	4c15      	ldr	r4, [pc, #84]	; (8005504 <MX_TIM2_Init+0x70>)
 80054b0:	05db      	lsls	r3, r3, #23
 80054b2:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 319;
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	33ff      	adds	r3, #255	; 0xff
 80054b8:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ba:	2300      	movs	r3, #0
  htim2.Init.Period = 6600;
 80054bc:	4a12      	ldr	r2, [pc, #72]	; (8005508 <MX_TIM2_Init+0x74>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054be:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c0:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 6600;
 80054c2:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054c4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054c6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054c8:	f7fe fa08 	bl	80038dc <HAL_TIM_Base_Init>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d001      	beq.n	80054d4 <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 80054d0:	f7ff fd16 	bl	8004f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054d4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054d6:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054d8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054da:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054de:	f7fe fa25 	bl	800392c <HAL_TIM_ConfigClockSource>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d001      	beq.n	80054ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80054e6:	f7ff fd0b 	bl	8004f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ea:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054ec:	a901      	add	r1, sp, #4
 80054ee:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054f4:	f7fe fab0 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80054fc:	f7ff fd00 	bl	8004f00 <Error_Handler>
  }

}
 8005500:	b008      	add	sp, #32
 8005502:	bd10      	pop	{r4, pc}
 8005504:	20000ac8 	.word	0x20000ac8
 8005508:	000019c8 	.word	0x000019c8

0800550c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800550c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_TIM_Base_MspInit+0x68>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d11a      	bne.n	800554c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005516:	2080      	movs	r0, #128	; 0x80
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_TIM_Base_MspInit+0x6c>)
 800551a:	0100      	lsls	r0, r0, #4
 800551c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800551e:	4301      	orrs	r1, r0
 8005520:	6411      	str	r1, [r2, #64]	; 0x40
 8005522:	6c13      	ldr	r3, [r2, #64]	; 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8005524:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005526:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8005528:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800552a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800552c:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 800552e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8005530:	f7fc fac2 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8005534:	200d      	movs	r0, #13
 8005536:	f7fc faef 	bl	8001b18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800553a:	2200      	movs	r2, #0
 800553c:	200e      	movs	r0, #14
 800553e:	0011      	movs	r1, r2
 8005540:	f7fc faba 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005544:	200e      	movs	r0, #14
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005546:	f7fc fae7 	bl	8001b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800554a:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_baseHandle->Instance==TIM2)
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	05d2      	lsls	r2, r2, #23
 8005550:	4293      	cmp	r3, r2
 8005552:	d1fa      	bne.n	800554a <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005554:	2001      	movs	r0, #1
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <HAL_TIM_Base_MspInit+0x6c>)
 8005558:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800555a:	4301      	orrs	r1, r0
 800555c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800555e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005560:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005562:	4003      	ands	r3, r0
 8005564:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005566:	300e      	adds	r0, #14
 8005568:	0011      	movs	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800556a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800556c:	f7fc faa4 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005570:	200f      	movs	r0, #15
 8005572:	e7e8      	b.n	8005546 <HAL_TIM_Base_MspInit+0x3a>
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40021000 	.word	0x40021000

0800557c <MX_UCPD1_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800557c:	2080      	movs	r0, #128	; 0x80
 800557e:	4a06      	ldr	r2, [pc, #24]	; (8005598 <MX_UCPD1_Init+0x1c>)
 8005580:	0480      	lsls	r0, r0, #18
 8005582:	6bd1      	ldr	r1, [r2, #60]	; 0x3c

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8005584:	b082      	sub	sp, #8
 8005586:	4301      	orrs	r1, r0
 8005588:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800558a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800558c:	4003      	ands	r3, r0
 800558e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005590:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);

}
 8005592:	b002      	add	sp, #8
 8005594:	4770      	bx	lr
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	40021000 	.word	0x40021000

0800559c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800559c:	b510      	push	{r4, lr}

  hlpuart1.Instance = LPUART1;
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <MX_LPUART1_UART_Init+0x64>)
 80055a0:	4c18      	ldr	r4, [pc, #96]	; (8005604 <MX_LPUART1_UART_Init+0x68>)
  hlpuart1.Init.BaudRate = 209700;
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80055a2:	220c      	movs	r2, #12
  hlpuart1.Instance = LPUART1;
 80055a4:	6023      	str	r3, [r4, #0]
  hlpuart1.Init.BaudRate = 209700;
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <MX_LPUART1_UART_Init+0x6c>)
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80055a8:	0020      	movs	r0, r4
  hlpuart1.Init.BaudRate = 209700;
 80055aa:	6063      	str	r3, [r4, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	055b      	lsls	r3, r3, #21
 80055b0:	60a3      	str	r3, [r4, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80055b2:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80055b4:	6162      	str	r2, [r4, #20]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80055b6:	60e3      	str	r3, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80055b8:	6123      	str	r3, [r4, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055ba:	61a3      	str	r3, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055bc:	6223      	str	r3, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055be:	6263      	str	r3, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055c0:	62a3      	str	r3, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80055c2:	6663      	str	r3, [r4, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80055c4:	f7fe ffbc 	bl	8004540 <HAL_UART_Init>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d001      	beq.n	80055d0 <MX_LPUART1_UART_Init+0x34>
  {
    Error_Handler();
 80055cc:	f7ff fc98 	bl	8004f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055d0:	2100      	movs	r1, #0
 80055d2:	0020      	movs	r0, r4
 80055d4:	f7ff f842 	bl	800465c <HAL_UARTEx_SetTxFifoThreshold>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d001      	beq.n	80055e0 <MX_LPUART1_UART_Init+0x44>
  {
    Error_Handler();
 80055dc:	f7ff fc90 	bl	8004f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055e0:	2100      	movs	r1, #0
 80055e2:	0020      	movs	r0, r4
 80055e4:	f7ff f85c 	bl	80046a0 <HAL_UARTEx_SetRxFifoThreshold>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d001      	beq.n	80055f0 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 80055ec:	f7ff fc88 	bl	8004f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80055f0:	0020      	movs	r0, r4
 80055f2:	f7ff f817 	bl	8004624 <HAL_UARTEx_DisableFifoMode>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d001      	beq.n	80055fe <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80055fa:	f7ff fc81 	bl	8004f00 <Error_Handler>
  }

}
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	40008000 	.word	0x40008000
 8005604:	20000b08 	.word	0x20000b08
 8005608:	00033324 	.word	0x00033324

0800560c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800560c:	b510      	push	{r4, lr}
 800560e:	0004      	movs	r4, r0
 8005610:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005612:	2214      	movs	r2, #20
 8005614:	2100      	movs	r1, #0
 8005616:	a803      	add	r0, sp, #12
 8005618:	f000 f885 	bl	8005726 <memset>
  if(uartHandle->Instance==LPUART1)
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_UART_MspInit+0x58>)
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d11c      	bne.n	800565e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005624:	2080      	movs	r0, #128	; 0x80
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <HAL_UART_MspInit+0x5c>)
 8005628:	0340      	lsls	r0, r0, #13
 800562a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800562c:	4301      	orrs	r1, r0
 800562e:	63d9      	str	r1, [r3, #60]	; 0x3c
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005630:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005634:	4002      	ands	r2, r0
 8005636:	9201      	str	r2, [sp, #4]
 8005638:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563e:	430a      	orrs	r2, r1
 8005640:	635a      	str	r2, [r3, #52]	; 0x34
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005644:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005646:	400b      	ands	r3, r1
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800564c:	230c      	movs	r3, #12
 800564e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005650:	3b0a      	subs	r3, #10
 8005652:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005654:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8005656:	3304      	adds	r3, #4
 8005658:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565a:	f7fc fbef 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800565e:	b008      	add	sp, #32
 8005660:	bd10      	pop	{r4, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	40008000 	.word	0x40008000
 8005668:	40021000 	.word	0x40021000

0800566c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800566c:	480d      	ldr	r0, [pc, #52]	; (80056a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800566e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005670:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005672:	e003      	b.n	800567c <LoopCopyDataInit>

08005674 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005676:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005678:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800567a:	3104      	adds	r1, #4

0800567c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800567c:	480b      	ldr	r0, [pc, #44]	; (80056ac <LoopForever+0xa>)
  ldr r3, =_edata
 800567e:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <LoopForever+0xe>)
  adds r2, r0, r1
 8005680:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005682:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005684:	d3f6      	bcc.n	8005674 <CopyDataInit>
  ldr r2, =_sbss
 8005686:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <LoopForever+0x12>)
  b LoopFillZerobss
 8005688:	e002      	b.n	8005690 <LoopFillZerobss>

0800568a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800568a:	2300      	movs	r3, #0
  str  r3, [r2]
 800568c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800568e:	3204      	adds	r2, #4

08005690 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005690:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <LoopForever+0x16>)
  cmp r2, r3
 8005692:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005694:	d3f9      	bcc.n	800568a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005696:	f7ff fea9 	bl	80053ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800569a:	f000 f817 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800569e:	f7ff fa09 	bl	8004ab4 <main>

080056a2 <LoopForever>:

LoopForever:
    b LoopForever
 80056a2:	e7fe      	b.n	80056a2 <LoopForever>
  ldr   r0, =_estack
 80056a4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80056a8:	08006dfc 	.word	0x08006dfc
  ldr r0, =_sdata
 80056ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80056b0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80056b4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80056b8:	20000b98 	.word	0x20000b98

080056bc <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056bc:	e7fe      	b.n	80056bc <CEC_IRQHandler>
	...

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	20000014 	.word	0x20000014

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2600      	movs	r6, #0
 80056d0:	4d0c      	ldr	r5, [pc, #48]	; (8005704 <__libc_init_array+0x38>)
 80056d2:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	2600      	movs	r6, #0
 80056de:	f000 fc43 	bl	8005f68 <_init>
 80056e2:	4d0a      	ldr	r5, [pc, #40]	; (800570c <__libc_init_array+0x40>)
 80056e4:	4c0a      	ldr	r4, [pc, #40]	; (8005710 <__libc_init_array+0x44>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	00b3      	lsls	r3, r6, #2
 80056f2:	58eb      	ldr	r3, [r5, r3]
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	00b3      	lsls	r3, r6, #2
 80056fc:	58eb      	ldr	r3, [r5, r3]
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08006df4 	.word	0x08006df4
 8005708:	08006df4 	.word	0x08006df4
 800570c:	08006df4 	.word	0x08006df4
 8005710:	08006df8 	.word	0x08006df8

08005714 <memcpy>:
 8005714:	2300      	movs	r3, #0
 8005716:	b510      	push	{r4, lr}
 8005718:	429a      	cmp	r2, r3
 800571a:	d100      	bne.n	800571e <memcpy+0xa>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	5ccc      	ldrb	r4, [r1, r3]
 8005720:	54c4      	strb	r4, [r0, r3]
 8005722:	3301      	adds	r3, #1
 8005724:	e7f8      	b.n	8005718 <memcpy+0x4>

08005726 <memset>:
 8005726:	0003      	movs	r3, r0
 8005728:	1882      	adds	r2, r0, r2
 800572a:	4293      	cmp	r3, r2
 800572c:	d100      	bne.n	8005730 <memset+0xa>
 800572e:	4770      	bx	lr
 8005730:	7019      	strb	r1, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	e7f9      	b.n	800572a <memset+0x4>
	...

08005738 <_free_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	0005      	movs	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d010      	beq.n	8005762 <_free_r+0x2a>
 8005740:	1f0c      	subs	r4, r1, #4
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	da00      	bge.n	800574a <_free_r+0x12>
 8005748:	18e4      	adds	r4, r4, r3
 800574a:	0028      	movs	r0, r5
 800574c:	f000 f8d0 	bl	80058f0 <__malloc_lock>
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <_free_r+0x90>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <_free_r+0x2c>
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	6014      	str	r4, [r2, #0]
 800575c:	0028      	movs	r0, r5
 800575e:	f000 f8c8 	bl	80058f2 <__malloc_unlock>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	42a3      	cmp	r3, r4
 8005766:	d909      	bls.n	800577c <_free_r+0x44>
 8005768:	6821      	ldr	r1, [r4, #0]
 800576a:	1860      	adds	r0, r4, r1
 800576c:	4283      	cmp	r3, r0
 800576e:	d1f3      	bne.n	8005758 <_free_r+0x20>
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	1841      	adds	r1, r0, r1
 8005776:	6021      	str	r1, [r4, #0]
 8005778:	e7ee      	b.n	8005758 <_free_r+0x20>
 800577a:	0013      	movs	r3, r2
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	2a00      	cmp	r2, #0
 8005780:	d001      	beq.n	8005786 <_free_r+0x4e>
 8005782:	42a2      	cmp	r2, r4
 8005784:	d9f9      	bls.n	800577a <_free_r+0x42>
 8005786:	6819      	ldr	r1, [r3, #0]
 8005788:	1858      	adds	r0, r3, r1
 800578a:	42a0      	cmp	r0, r4
 800578c:	d10b      	bne.n	80057a6 <_free_r+0x6e>
 800578e:	6820      	ldr	r0, [r4, #0]
 8005790:	1809      	adds	r1, r1, r0
 8005792:	1858      	adds	r0, r3, r1
 8005794:	6019      	str	r1, [r3, #0]
 8005796:	4282      	cmp	r2, r0
 8005798:	d1e0      	bne.n	800575c <_free_r+0x24>
 800579a:	6810      	ldr	r0, [r2, #0]
 800579c:	6852      	ldr	r2, [r2, #4]
 800579e:	1841      	adds	r1, r0, r1
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	e7da      	b.n	800575c <_free_r+0x24>
 80057a6:	42a0      	cmp	r0, r4
 80057a8:	d902      	bls.n	80057b0 <_free_r+0x78>
 80057aa:	230c      	movs	r3, #12
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	e7d5      	b.n	800575c <_free_r+0x24>
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	1860      	adds	r0, r4, r1
 80057b4:	4282      	cmp	r2, r0
 80057b6:	d103      	bne.n	80057c0 <_free_r+0x88>
 80057b8:	6810      	ldr	r0, [r2, #0]
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	1841      	adds	r1, r0, r1
 80057be:	6021      	str	r1, [r4, #0]
 80057c0:	6062      	str	r2, [r4, #4]
 80057c2:	605c      	str	r4, [r3, #4]
 80057c4:	e7ca      	b.n	800575c <_free_r+0x24>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	200004bc 	.word	0x200004bc

080057cc <_malloc_r>:
 80057cc:	2303      	movs	r3, #3
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	1ccd      	adds	r5, r1, #3
 80057d2:	439d      	bics	r5, r3
 80057d4:	3508      	adds	r5, #8
 80057d6:	0006      	movs	r6, r0
 80057d8:	2d0c      	cmp	r5, #12
 80057da:	d21e      	bcs.n	800581a <_malloc_r+0x4e>
 80057dc:	250c      	movs	r5, #12
 80057de:	42a9      	cmp	r1, r5
 80057e0:	d81d      	bhi.n	800581e <_malloc_r+0x52>
 80057e2:	0030      	movs	r0, r6
 80057e4:	f000 f884 	bl	80058f0 <__malloc_lock>
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <_malloc_r+0xb4>)
 80057ea:	6814      	ldr	r4, [r2, #0]
 80057ec:	0021      	movs	r1, r4
 80057ee:	2900      	cmp	r1, #0
 80057f0:	d119      	bne.n	8005826 <_malloc_r+0x5a>
 80057f2:	4c24      	ldr	r4, [pc, #144]	; (8005884 <_malloc_r+0xb8>)
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <_malloc_r+0x36>
 80057fa:	0030      	movs	r0, r6
 80057fc:	f000 f844 	bl	8005888 <_sbrk_r>
 8005800:	6020      	str	r0, [r4, #0]
 8005802:	0029      	movs	r1, r5
 8005804:	0030      	movs	r0, r6
 8005806:	f000 f83f 	bl	8005888 <_sbrk_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d12c      	bne.n	8005868 <_malloc_r+0x9c>
 800580e:	230c      	movs	r3, #12
 8005810:	0030      	movs	r0, r6
 8005812:	6033      	str	r3, [r6, #0]
 8005814:	f000 f86d 	bl	80058f2 <__malloc_unlock>
 8005818:	e003      	b.n	8005822 <_malloc_r+0x56>
 800581a:	2d00      	cmp	r5, #0
 800581c:	dadf      	bge.n	80057de <_malloc_r+0x12>
 800581e:	230c      	movs	r3, #12
 8005820:	6033      	str	r3, [r6, #0]
 8005822:	2000      	movs	r0, #0
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	680b      	ldr	r3, [r1, #0]
 8005828:	1b5b      	subs	r3, r3, r5
 800582a:	d41a      	bmi.n	8005862 <_malloc_r+0x96>
 800582c:	2b0b      	cmp	r3, #11
 800582e:	d903      	bls.n	8005838 <_malloc_r+0x6c>
 8005830:	600b      	str	r3, [r1, #0]
 8005832:	18cc      	adds	r4, r1, r3
 8005834:	6025      	str	r5, [r4, #0]
 8005836:	e003      	b.n	8005840 <_malloc_r+0x74>
 8005838:	428c      	cmp	r4, r1
 800583a:	d10e      	bne.n	800585a <_malloc_r+0x8e>
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	0030      	movs	r0, r6
 8005842:	f000 f856 	bl	80058f2 <__malloc_unlock>
 8005846:	0020      	movs	r0, r4
 8005848:	2207      	movs	r2, #7
 800584a:	300b      	adds	r0, #11
 800584c:	1d23      	adds	r3, r4, #4
 800584e:	4390      	bics	r0, r2
 8005850:	1ac3      	subs	r3, r0, r3
 8005852:	d0e7      	beq.n	8005824 <_malloc_r+0x58>
 8005854:	425a      	negs	r2, r3
 8005856:	50e2      	str	r2, [r4, r3]
 8005858:	e7e4      	b.n	8005824 <_malloc_r+0x58>
 800585a:	684b      	ldr	r3, [r1, #4]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	000c      	movs	r4, r1
 8005860:	e7ee      	b.n	8005840 <_malloc_r+0x74>
 8005862:	000c      	movs	r4, r1
 8005864:	6849      	ldr	r1, [r1, #4]
 8005866:	e7c2      	b.n	80057ee <_malloc_r+0x22>
 8005868:	2303      	movs	r3, #3
 800586a:	1cc4      	adds	r4, r0, #3
 800586c:	439c      	bics	r4, r3
 800586e:	42a0      	cmp	r0, r4
 8005870:	d0e0      	beq.n	8005834 <_malloc_r+0x68>
 8005872:	1a21      	subs	r1, r4, r0
 8005874:	0030      	movs	r0, r6
 8005876:	f000 f807 	bl	8005888 <_sbrk_r>
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	d1da      	bne.n	8005834 <_malloc_r+0x68>
 800587e:	e7c6      	b.n	800580e <_malloc_r+0x42>
 8005880:	200004bc 	.word	0x200004bc
 8005884:	200004c0 	.word	0x200004c0

08005888 <_sbrk_r>:
 8005888:	2300      	movs	r3, #0
 800588a:	b570      	push	{r4, r5, r6, lr}
 800588c:	4c06      	ldr	r4, [pc, #24]	; (80058a8 <_sbrk_r+0x20>)
 800588e:	0005      	movs	r5, r0
 8005890:	0008      	movs	r0, r1
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	f7ff fd90 	bl	80053b8 <_sbrk>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d103      	bne.n	80058a4 <_sbrk_r+0x1c>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d000      	beq.n	80058a4 <_sbrk_r+0x1c>
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	20000b94 	.word	0x20000b94

080058ac <siprintf>:
 80058ac:	b40e      	push	{r1, r2, r3}
 80058ae:	b510      	push	{r4, lr}
 80058b0:	b09d      	sub	sp, #116	; 0x74
 80058b2:	a902      	add	r1, sp, #8
 80058b4:	9002      	str	r0, [sp, #8]
 80058b6:	6108      	str	r0, [r1, #16]
 80058b8:	480b      	ldr	r0, [pc, #44]	; (80058e8 <siprintf+0x3c>)
 80058ba:	2482      	movs	r4, #130	; 0x82
 80058bc:	6088      	str	r0, [r1, #8]
 80058be:	6148      	str	r0, [r1, #20]
 80058c0:	2001      	movs	r0, #1
 80058c2:	4240      	negs	r0, r0
 80058c4:	ab1f      	add	r3, sp, #124	; 0x7c
 80058c6:	81c8      	strh	r0, [r1, #14]
 80058c8:	4808      	ldr	r0, [pc, #32]	; (80058ec <siprintf+0x40>)
 80058ca:	cb04      	ldmia	r3!, {r2}
 80058cc:	00a4      	lsls	r4, r4, #2
 80058ce:	6800      	ldr	r0, [r0, #0]
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	818c      	strh	r4, [r1, #12]
 80058d4:	f000 f870 	bl	80059b8 <_svfiprintf_r>
 80058d8:	2300      	movs	r3, #0
 80058da:	9a02      	ldr	r2, [sp, #8]
 80058dc:	7013      	strb	r3, [r2, #0]
 80058de:	b01d      	add	sp, #116	; 0x74
 80058e0:	bc10      	pop	{r4}
 80058e2:	bc08      	pop	{r3}
 80058e4:	b003      	add	sp, #12
 80058e6:	4718      	bx	r3
 80058e8:	7fffffff 	.word	0x7fffffff
 80058ec:	20000014 	.word	0x20000014

080058f0 <__malloc_lock>:
 80058f0:	4770      	bx	lr

080058f2 <__malloc_unlock>:
 80058f2:	4770      	bx	lr

080058f4 <__ssputs_r>:
 80058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f6:	688e      	ldr	r6, [r1, #8]
 80058f8:	b085      	sub	sp, #20
 80058fa:	0007      	movs	r7, r0
 80058fc:	000c      	movs	r4, r1
 80058fe:	9203      	str	r2, [sp, #12]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	429e      	cmp	r6, r3
 8005904:	d839      	bhi.n	800597a <__ssputs_r+0x86>
 8005906:	2390      	movs	r3, #144	; 0x90
 8005908:	898a      	ldrh	r2, [r1, #12]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	421a      	tst	r2, r3
 800590e:	d034      	beq.n	800597a <__ssputs_r+0x86>
 8005910:	2503      	movs	r5, #3
 8005912:	6909      	ldr	r1, [r1, #16]
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	1a5b      	subs	r3, r3, r1
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	6963      	ldr	r3, [r4, #20]
 800591c:	9802      	ldr	r0, [sp, #8]
 800591e:	435d      	muls	r5, r3
 8005920:	0feb      	lsrs	r3, r5, #31
 8005922:	195d      	adds	r5, r3, r5
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	106d      	asrs	r5, r5, #1
 8005928:	3301      	adds	r3, #1
 800592a:	181b      	adds	r3, r3, r0
 800592c:	42ab      	cmp	r3, r5
 800592e:	d900      	bls.n	8005932 <__ssputs_r+0x3e>
 8005930:	001d      	movs	r5, r3
 8005932:	0553      	lsls	r3, r2, #21
 8005934:	d532      	bpl.n	800599c <__ssputs_r+0xa8>
 8005936:	0029      	movs	r1, r5
 8005938:	0038      	movs	r0, r7
 800593a:	f7ff ff47 	bl	80057cc <_malloc_r>
 800593e:	1e06      	subs	r6, r0, #0
 8005940:	d109      	bne.n	8005956 <__ssputs_r+0x62>
 8005942:	230c      	movs	r3, #12
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	2001      	movs	r0, #1
 800594a:	89a2      	ldrh	r2, [r4, #12]
 800594c:	4240      	negs	r0, r0
 800594e:	4313      	orrs	r3, r2
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	b005      	add	sp, #20
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005956:	9a02      	ldr	r2, [sp, #8]
 8005958:	6921      	ldr	r1, [r4, #16]
 800595a:	f7ff fedb 	bl	8005714 <memcpy>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <__ssputs_r+0xc0>)
 8005962:	401a      	ands	r2, r3
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	4313      	orrs	r3, r2
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	6126      	str	r6, [r4, #16]
 800596e:	18f6      	adds	r6, r6, r3
 8005970:	6026      	str	r6, [r4, #0]
 8005972:	6165      	str	r5, [r4, #20]
 8005974:	9e01      	ldr	r6, [sp, #4]
 8005976:	1aed      	subs	r5, r5, r3
 8005978:	60a5      	str	r5, [r4, #8]
 800597a:	9b01      	ldr	r3, [sp, #4]
 800597c:	42b3      	cmp	r3, r6
 800597e:	d200      	bcs.n	8005982 <__ssputs_r+0x8e>
 8005980:	001e      	movs	r6, r3
 8005982:	0032      	movs	r2, r6
 8005984:	9903      	ldr	r1, [sp, #12]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	f000 faad 	bl	8005ee6 <memmove>
 800598c:	68a3      	ldr	r3, [r4, #8]
 800598e:	2000      	movs	r0, #0
 8005990:	1b9b      	subs	r3, r3, r6
 8005992:	60a3      	str	r3, [r4, #8]
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	199e      	adds	r6, r3, r6
 8005998:	6026      	str	r6, [r4, #0]
 800599a:	e7da      	b.n	8005952 <__ssputs_r+0x5e>
 800599c:	002a      	movs	r2, r5
 800599e:	0038      	movs	r0, r7
 80059a0:	f000 fab3 	bl	8005f0a <_realloc_r>
 80059a4:	1e06      	subs	r6, r0, #0
 80059a6:	d1e0      	bne.n	800596a <__ssputs_r+0x76>
 80059a8:	6921      	ldr	r1, [r4, #16]
 80059aa:	0038      	movs	r0, r7
 80059ac:	f7ff fec4 	bl	8005738 <_free_r>
 80059b0:	e7c7      	b.n	8005942 <__ssputs_r+0x4e>
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	fffffb7f 	.word	0xfffffb7f

080059b8 <_svfiprintf_r>:
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	b09f      	sub	sp, #124	; 0x7c
 80059bc:	9002      	str	r0, [sp, #8]
 80059be:	9305      	str	r3, [sp, #20]
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	000f      	movs	r7, r1
 80059c4:	0016      	movs	r6, r2
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	d511      	bpl.n	80059ee <_svfiprintf_r+0x36>
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10e      	bne.n	80059ee <_svfiprintf_r+0x36>
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	f7ff fefb 	bl	80057cc <_malloc_r>
 80059d6:	6038      	str	r0, [r7, #0]
 80059d8:	6138      	str	r0, [r7, #16]
 80059da:	2800      	cmp	r0, #0
 80059dc:	d105      	bne.n	80059ea <_svfiprintf_r+0x32>
 80059de:	230c      	movs	r3, #12
 80059e0:	9a02      	ldr	r2, [sp, #8]
 80059e2:	3801      	subs	r0, #1
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	b01f      	add	sp, #124	; 0x7c
 80059e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	2300      	movs	r3, #0
 80059f0:	ad06      	add	r5, sp, #24
 80059f2:	616b      	str	r3, [r5, #20]
 80059f4:	3320      	adds	r3, #32
 80059f6:	766b      	strb	r3, [r5, #25]
 80059f8:	3310      	adds	r3, #16
 80059fa:	76ab      	strb	r3, [r5, #26]
 80059fc:	0034      	movs	r4, r6
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d147      	bne.n	8005a94 <_svfiprintf_r+0xdc>
 8005a04:	1ba3      	subs	r3, r4, r6
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	d00d      	beq.n	8005a26 <_svfiprintf_r+0x6e>
 8005a0a:	1ba3      	subs	r3, r4, r6
 8005a0c:	0032      	movs	r2, r6
 8005a0e:	0039      	movs	r1, r7
 8005a10:	9802      	ldr	r0, [sp, #8]
 8005a12:	f7ff ff6f 	bl	80058f4 <__ssputs_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	d100      	bne.n	8005a1c <_svfiprintf_r+0x64>
 8005a1a:	e0b5      	b.n	8005b88 <_svfiprintf_r+0x1d0>
 8005a1c:	696a      	ldr	r2, [r5, #20]
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	4694      	mov	ip, r2
 8005a22:	4463      	add	r3, ip
 8005a24:	616b      	str	r3, [r5, #20]
 8005a26:	7823      	ldrb	r3, [r4, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d100      	bne.n	8005a2e <_svfiprintf_r+0x76>
 8005a2c:	e0ac      	b.n	8005b88 <_svfiprintf_r+0x1d0>
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2300      	movs	r3, #0
 8005a32:	4252      	negs	r2, r2
 8005a34:	606a      	str	r2, [r5, #4]
 8005a36:	a902      	add	r1, sp, #8
 8005a38:	3254      	adds	r2, #84	; 0x54
 8005a3a:	1852      	adds	r2, r2, r1
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	60eb      	str	r3, [r5, #12]
 8005a42:	60ab      	str	r3, [r5, #8]
 8005a44:	7013      	strb	r3, [r2, #0]
 8005a46:	65ab      	str	r3, [r5, #88]	; 0x58
 8005a48:	4e58      	ldr	r6, [pc, #352]	; (8005bac <_svfiprintf_r+0x1f4>)
 8005a4a:	2205      	movs	r2, #5
 8005a4c:	7821      	ldrb	r1, [r4, #0]
 8005a4e:	0030      	movs	r0, r6
 8005a50:	f000 fa3e 	bl	8005ed0 <memchr>
 8005a54:	1c62      	adds	r2, r4, #1
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d120      	bne.n	8005a9c <_svfiprintf_r+0xe4>
 8005a5a:	6829      	ldr	r1, [r5, #0]
 8005a5c:	06cb      	lsls	r3, r1, #27
 8005a5e:	d504      	bpl.n	8005a6a <_svfiprintf_r+0xb2>
 8005a60:	2353      	movs	r3, #83	; 0x53
 8005a62:	ae02      	add	r6, sp, #8
 8005a64:	3020      	adds	r0, #32
 8005a66:	199b      	adds	r3, r3, r6
 8005a68:	7018      	strb	r0, [r3, #0]
 8005a6a:	070b      	lsls	r3, r1, #28
 8005a6c:	d504      	bpl.n	8005a78 <_svfiprintf_r+0xc0>
 8005a6e:	2353      	movs	r3, #83	; 0x53
 8005a70:	202b      	movs	r0, #43	; 0x2b
 8005a72:	ae02      	add	r6, sp, #8
 8005a74:	199b      	adds	r3, r3, r6
 8005a76:	7018      	strb	r0, [r3, #0]
 8005a78:	7823      	ldrb	r3, [r4, #0]
 8005a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7c:	d016      	beq.n	8005aac <_svfiprintf_r+0xf4>
 8005a7e:	2000      	movs	r0, #0
 8005a80:	210a      	movs	r1, #10
 8005a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a84:	7822      	ldrb	r2, [r4, #0]
 8005a86:	3a30      	subs	r2, #48	; 0x30
 8005a88:	2a09      	cmp	r2, #9
 8005a8a:	d955      	bls.n	8005b38 <_svfiprintf_r+0x180>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d015      	beq.n	8005abc <_svfiprintf_r+0x104>
 8005a90:	9309      	str	r3, [sp, #36]	; 0x24
 8005a92:	e013      	b.n	8005abc <_svfiprintf_r+0x104>
 8005a94:	2b25      	cmp	r3, #37	; 0x25
 8005a96:	d0b5      	beq.n	8005a04 <_svfiprintf_r+0x4c>
 8005a98:	3401      	adds	r4, #1
 8005a9a:	e7b0      	b.n	80059fe <_svfiprintf_r+0x46>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	1b80      	subs	r0, r0, r6
 8005aa0:	4083      	lsls	r3, r0
 8005aa2:	6829      	ldr	r1, [r5, #0]
 8005aa4:	0014      	movs	r4, r2
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7cd      	b.n	8005a48 <_svfiprintf_r+0x90>
 8005aac:	9b05      	ldr	r3, [sp, #20]
 8005aae:	1d18      	adds	r0, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9005      	str	r0, [sp, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	db39      	blt.n	8005b2c <_svfiprintf_r+0x174>
 8005ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aba:	0014      	movs	r4, r2
 8005abc:	7823      	ldrb	r3, [r4, #0]
 8005abe:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac0:	d10b      	bne.n	8005ada <_svfiprintf_r+0x122>
 8005ac2:	7863      	ldrb	r3, [r4, #1]
 8005ac4:	1c62      	adds	r2, r4, #1
 8005ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac8:	d13e      	bne.n	8005b48 <_svfiprintf_r+0x190>
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	3402      	adds	r4, #2
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	9205      	str	r2, [sp, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db34      	blt.n	8005b42 <_svfiprintf_r+0x18a>
 8005ad8:	9307      	str	r3, [sp, #28]
 8005ada:	4e35      	ldr	r6, [pc, #212]	; (8005bb0 <_svfiprintf_r+0x1f8>)
 8005adc:	7821      	ldrb	r1, [r4, #0]
 8005ade:	2203      	movs	r2, #3
 8005ae0:	0030      	movs	r0, r6
 8005ae2:	f000 f9f5 	bl	8005ed0 <memchr>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d006      	beq.n	8005af8 <_svfiprintf_r+0x140>
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	1b80      	subs	r0, r0, r6
 8005aee:	4083      	lsls	r3, r0
 8005af0:	682a      	ldr	r2, [r5, #0]
 8005af2:	3401      	adds	r4, #1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	7821      	ldrb	r1, [r4, #0]
 8005afa:	2206      	movs	r2, #6
 8005afc:	482d      	ldr	r0, [pc, #180]	; (8005bb4 <_svfiprintf_r+0x1fc>)
 8005afe:	1c66      	adds	r6, r4, #1
 8005b00:	7629      	strb	r1, [r5, #24]
 8005b02:	f000 f9e5 	bl	8005ed0 <memchr>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d046      	beq.n	8005b98 <_svfiprintf_r+0x1e0>
 8005b0a:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <_svfiprintf_r+0x200>)
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d12f      	bne.n	8005b70 <_svfiprintf_r+0x1b8>
 8005b10:	6829      	ldr	r1, [r5, #0]
 8005b12:	9b05      	ldr	r3, [sp, #20]
 8005b14:	2207      	movs	r2, #7
 8005b16:	05c9      	lsls	r1, r1, #23
 8005b18:	d528      	bpl.n	8005b6c <_svfiprintf_r+0x1b4>
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	3308      	adds	r3, #8
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	696b      	ldr	r3, [r5, #20]
 8005b24:	9a03      	ldr	r2, [sp, #12]
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	616b      	str	r3, [r5, #20]
 8005b2a:	e767      	b.n	80059fc <_svfiprintf_r+0x44>
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	60eb      	str	r3, [r5, #12]
 8005b30:	2302      	movs	r3, #2
 8005b32:	430b      	orrs	r3, r1
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	e7c0      	b.n	8005aba <_svfiprintf_r+0x102>
 8005b38:	434b      	muls	r3, r1
 8005b3a:	3401      	adds	r4, #1
 8005b3c:	189b      	adds	r3, r3, r2
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e7a0      	b.n	8005a84 <_svfiprintf_r+0xcc>
 8005b42:	2301      	movs	r3, #1
 8005b44:	425b      	negs	r3, r3
 8005b46:	e7c7      	b.n	8005ad8 <_svfiprintf_r+0x120>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	0014      	movs	r4, r2
 8005b4c:	200a      	movs	r0, #10
 8005b4e:	001a      	movs	r2, r3
 8005b50:	606b      	str	r3, [r5, #4]
 8005b52:	7821      	ldrb	r1, [r4, #0]
 8005b54:	3930      	subs	r1, #48	; 0x30
 8005b56:	2909      	cmp	r1, #9
 8005b58:	d903      	bls.n	8005b62 <_svfiprintf_r+0x1aa>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0bd      	beq.n	8005ada <_svfiprintf_r+0x122>
 8005b5e:	9207      	str	r2, [sp, #28]
 8005b60:	e7bb      	b.n	8005ada <_svfiprintf_r+0x122>
 8005b62:	4342      	muls	r2, r0
 8005b64:	3401      	adds	r4, #1
 8005b66:	1852      	adds	r2, r2, r1
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e7f2      	b.n	8005b52 <_svfiprintf_r+0x19a>
 8005b6c:	3307      	adds	r3, #7
 8005b6e:	e7d5      	b.n	8005b1c <_svfiprintf_r+0x164>
 8005b70:	ab05      	add	r3, sp, #20
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	003a      	movs	r2, r7
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <_svfiprintf_r+0x204>)
 8005b78:	0029      	movs	r1, r5
 8005b7a:	9802      	ldr	r0, [sp, #8]
 8005b7c:	e000      	b.n	8005b80 <_svfiprintf_r+0x1c8>
 8005b7e:	bf00      	nop
 8005b80:	9003      	str	r0, [sp, #12]
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	d1cc      	bne.n	8005b22 <_svfiprintf_r+0x16a>
 8005b88:	89bb      	ldrh	r3, [r7, #12]
 8005b8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b8c:	065b      	lsls	r3, r3, #25
 8005b8e:	d400      	bmi.n	8005b92 <_svfiprintf_r+0x1da>
 8005b90:	e729      	b.n	80059e6 <_svfiprintf_r+0x2e>
 8005b92:	2001      	movs	r0, #1
 8005b94:	4240      	negs	r0, r0
 8005b96:	e726      	b.n	80059e6 <_svfiprintf_r+0x2e>
 8005b98:	ab05      	add	r3, sp, #20
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	003a      	movs	r2, r7
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <_svfiprintf_r+0x204>)
 8005ba0:	0029      	movs	r1, r5
 8005ba2:	9802      	ldr	r0, [sp, #8]
 8005ba4:	f000 f87a 	bl	8005c9c <_printf_i>
 8005ba8:	e7ea      	b.n	8005b80 <_svfiprintf_r+0x1c8>
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	08006db8 	.word	0x08006db8
 8005bb0:	08006dbe 	.word	0x08006dbe
 8005bb4:	08006dc2 	.word	0x08006dc2
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	080058f5 	.word	0x080058f5

08005bc0 <_printf_common>:
 8005bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc2:	0015      	movs	r5, r2
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	688a      	ldr	r2, [r1, #8]
 8005bc8:	690b      	ldr	r3, [r1, #16]
 8005bca:	9000      	str	r0, [sp, #0]
 8005bcc:	000c      	movs	r4, r1
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	da00      	bge.n	8005bd4 <_printf_common+0x14>
 8005bd2:	0013      	movs	r3, r2
 8005bd4:	0022      	movs	r2, r4
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	3243      	adds	r2, #67	; 0x43
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d001      	beq.n	8005be4 <_printf_common+0x24>
 8005be0:	3301      	adds	r3, #1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	069b      	lsls	r3, r3, #26
 8005be8:	d502      	bpl.n	8005bf0 <_printf_common+0x30>
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	3302      	adds	r3, #2
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	2706      	movs	r7, #6
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	401f      	ands	r7, r3
 8005bf6:	d027      	beq.n	8005c48 <_printf_common+0x88>
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	3343      	adds	r3, #67	; 0x43
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	1e5a      	subs	r2, r3, #1
 8005c00:	4193      	sbcs	r3, r2
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	0692      	lsls	r2, r2, #26
 8005c06:	d430      	bmi.n	8005c6a <_printf_common+0xaa>
 8005c08:	0022      	movs	r2, r4
 8005c0a:	9901      	ldr	r1, [sp, #4]
 8005c0c:	3243      	adds	r2, #67	; 0x43
 8005c0e:	9800      	ldr	r0, [sp, #0]
 8005c10:	9e08      	ldr	r6, [sp, #32]
 8005c12:	47b0      	blx	r6
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d025      	beq.n	8005c64 <_printf_common+0xa4>
 8005c18:	2306      	movs	r3, #6
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	682a      	ldr	r2, [r5, #0]
 8005c1e:	68e1      	ldr	r1, [r4, #12]
 8005c20:	4003      	ands	r3, r0
 8005c22:	2500      	movs	r5, #0
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d103      	bne.n	8005c30 <_printf_common+0x70>
 8005c28:	1a8d      	subs	r5, r1, r2
 8005c2a:	43eb      	mvns	r3, r5
 8005c2c:	17db      	asrs	r3, r3, #31
 8005c2e:	401d      	ands	r5, r3
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	6922      	ldr	r2, [r4, #16]
 8005c34:	4293      	cmp	r3, r2
 8005c36:	dd01      	ble.n	8005c3c <_printf_common+0x7c>
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	18ed      	adds	r5, r5, r3
 8005c3c:	2700      	movs	r7, #0
 8005c3e:	42bd      	cmp	r5, r7
 8005c40:	d120      	bne.n	8005c84 <_printf_common+0xc4>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e010      	b.n	8005c68 <_printf_common+0xa8>
 8005c46:	3701      	adds	r7, #1
 8005c48:	68e3      	ldr	r3, [r4, #12]
 8005c4a:	682a      	ldr	r2, [r5, #0]
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	429f      	cmp	r7, r3
 8005c50:	dad2      	bge.n	8005bf8 <_printf_common+0x38>
 8005c52:	0022      	movs	r2, r4
 8005c54:	2301      	movs	r3, #1
 8005c56:	3219      	adds	r2, #25
 8005c58:	9901      	ldr	r1, [sp, #4]
 8005c5a:	9800      	ldr	r0, [sp, #0]
 8005c5c:	9e08      	ldr	r6, [sp, #32]
 8005c5e:	47b0      	blx	r6
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d1f0      	bne.n	8005c46 <_printf_common+0x86>
 8005c64:	2001      	movs	r0, #1
 8005c66:	4240      	negs	r0, r0
 8005c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c6a:	2030      	movs	r0, #48	; 0x30
 8005c6c:	18e1      	adds	r1, r4, r3
 8005c6e:	3143      	adds	r1, #67	; 0x43
 8005c70:	7008      	strb	r0, [r1, #0]
 8005c72:	0021      	movs	r1, r4
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	3145      	adds	r1, #69	; 0x45
 8005c78:	7809      	ldrb	r1, [r1, #0]
 8005c7a:	18a2      	adds	r2, r4, r2
 8005c7c:	3243      	adds	r2, #67	; 0x43
 8005c7e:	3302      	adds	r3, #2
 8005c80:	7011      	strb	r1, [r2, #0]
 8005c82:	e7c1      	b.n	8005c08 <_printf_common+0x48>
 8005c84:	0022      	movs	r2, r4
 8005c86:	2301      	movs	r3, #1
 8005c88:	321a      	adds	r2, #26
 8005c8a:	9901      	ldr	r1, [sp, #4]
 8005c8c:	9800      	ldr	r0, [sp, #0]
 8005c8e:	9e08      	ldr	r6, [sp, #32]
 8005c90:	47b0      	blx	r6
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d0e6      	beq.n	8005c64 <_printf_common+0xa4>
 8005c96:	3701      	adds	r7, #1
 8005c98:	e7d1      	b.n	8005c3e <_printf_common+0x7e>
	...

08005c9c <_printf_i>:
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	b08b      	sub	sp, #44	; 0x2c
 8005ca0:	9206      	str	r2, [sp, #24]
 8005ca2:	000a      	movs	r2, r1
 8005ca4:	3243      	adds	r2, #67	; 0x43
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	9005      	str	r0, [sp, #20]
 8005caa:	9204      	str	r2, [sp, #16]
 8005cac:	7e0a      	ldrb	r2, [r1, #24]
 8005cae:	000c      	movs	r4, r1
 8005cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cb2:	2a6e      	cmp	r2, #110	; 0x6e
 8005cb4:	d100      	bne.n	8005cb8 <_printf_i+0x1c>
 8005cb6:	e08f      	b.n	8005dd8 <_printf_i+0x13c>
 8005cb8:	d817      	bhi.n	8005cea <_printf_i+0x4e>
 8005cba:	2a63      	cmp	r2, #99	; 0x63
 8005cbc:	d02c      	beq.n	8005d18 <_printf_i+0x7c>
 8005cbe:	d808      	bhi.n	8005cd2 <_printf_i+0x36>
 8005cc0:	2a00      	cmp	r2, #0
 8005cc2:	d100      	bne.n	8005cc6 <_printf_i+0x2a>
 8005cc4:	e099      	b.n	8005dfa <_printf_i+0x15e>
 8005cc6:	2a58      	cmp	r2, #88	; 0x58
 8005cc8:	d054      	beq.n	8005d74 <_printf_i+0xd8>
 8005cca:	0026      	movs	r6, r4
 8005ccc:	3642      	adds	r6, #66	; 0x42
 8005cce:	7032      	strb	r2, [r6, #0]
 8005cd0:	e029      	b.n	8005d26 <_printf_i+0x8a>
 8005cd2:	2a64      	cmp	r2, #100	; 0x64
 8005cd4:	d001      	beq.n	8005cda <_printf_i+0x3e>
 8005cd6:	2a69      	cmp	r2, #105	; 0x69
 8005cd8:	d1f7      	bne.n	8005cca <_printf_i+0x2e>
 8005cda:	6821      	ldr	r1, [r4, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	0608      	lsls	r0, r1, #24
 8005ce0:	d523      	bpl.n	8005d2a <_printf_i+0x8e>
 8005ce2:	1d11      	adds	r1, r2, #4
 8005ce4:	6019      	str	r1, [r3, #0]
 8005ce6:	6815      	ldr	r5, [r2, #0]
 8005ce8:	e025      	b.n	8005d36 <_printf_i+0x9a>
 8005cea:	2a73      	cmp	r2, #115	; 0x73
 8005cec:	d100      	bne.n	8005cf0 <_printf_i+0x54>
 8005cee:	e088      	b.n	8005e02 <_printf_i+0x166>
 8005cf0:	d808      	bhi.n	8005d04 <_printf_i+0x68>
 8005cf2:	2a6f      	cmp	r2, #111	; 0x6f
 8005cf4:	d029      	beq.n	8005d4a <_printf_i+0xae>
 8005cf6:	2a70      	cmp	r2, #112	; 0x70
 8005cf8:	d1e7      	bne.n	8005cca <_printf_i+0x2e>
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	6809      	ldr	r1, [r1, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	6022      	str	r2, [r4, #0]
 8005d02:	e003      	b.n	8005d0c <_printf_i+0x70>
 8005d04:	2a75      	cmp	r2, #117	; 0x75
 8005d06:	d020      	beq.n	8005d4a <_printf_i+0xae>
 8005d08:	2a78      	cmp	r2, #120	; 0x78
 8005d0a:	d1de      	bne.n	8005cca <_printf_i+0x2e>
 8005d0c:	0022      	movs	r2, r4
 8005d0e:	2178      	movs	r1, #120	; 0x78
 8005d10:	3245      	adds	r2, #69	; 0x45
 8005d12:	7011      	strb	r1, [r2, #0]
 8005d14:	4a6c      	ldr	r2, [pc, #432]	; (8005ec8 <_printf_i+0x22c>)
 8005d16:	e030      	b.n	8005d7a <_printf_i+0xde>
 8005d18:	000e      	movs	r6, r1
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	3642      	adds	r6, #66	; 0x42
 8005d1e:	1d11      	adds	r1, r2, #4
 8005d20:	6019      	str	r1, [r3, #0]
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	7033      	strb	r3, [r6, #0]
 8005d26:	2301      	movs	r3, #1
 8005d28:	e079      	b.n	8005e1e <_printf_i+0x182>
 8005d2a:	0649      	lsls	r1, r1, #25
 8005d2c:	d5d9      	bpl.n	8005ce2 <_printf_i+0x46>
 8005d2e:	1d11      	adds	r1, r2, #4
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	5ed5      	ldrsh	r5, [r2, r3]
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	da03      	bge.n	8005d42 <_printf_i+0xa6>
 8005d3a:	232d      	movs	r3, #45	; 0x2d
 8005d3c:	9a04      	ldr	r2, [sp, #16]
 8005d3e:	426d      	negs	r5, r5
 8005d40:	7013      	strb	r3, [r2, #0]
 8005d42:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <_printf_i+0x230>)
 8005d44:	270a      	movs	r7, #10
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	e02f      	b.n	8005daa <_printf_i+0x10e>
 8005d4a:	6820      	ldr	r0, [r4, #0]
 8005d4c:	6819      	ldr	r1, [r3, #0]
 8005d4e:	0605      	lsls	r5, r0, #24
 8005d50:	d503      	bpl.n	8005d5a <_printf_i+0xbe>
 8005d52:	1d08      	adds	r0, r1, #4
 8005d54:	6018      	str	r0, [r3, #0]
 8005d56:	680d      	ldr	r5, [r1, #0]
 8005d58:	e005      	b.n	8005d66 <_printf_i+0xca>
 8005d5a:	0640      	lsls	r0, r0, #25
 8005d5c:	d5f9      	bpl.n	8005d52 <_printf_i+0xb6>
 8005d5e:	680d      	ldr	r5, [r1, #0]
 8005d60:	1d08      	adds	r0, r1, #4
 8005d62:	6018      	str	r0, [r3, #0]
 8005d64:	b2ad      	uxth	r5, r5
 8005d66:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <_printf_i+0x230>)
 8005d68:	2708      	movs	r7, #8
 8005d6a:	9303      	str	r3, [sp, #12]
 8005d6c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d6e:	d018      	beq.n	8005da2 <_printf_i+0x106>
 8005d70:	270a      	movs	r7, #10
 8005d72:	e016      	b.n	8005da2 <_printf_i+0x106>
 8005d74:	3145      	adds	r1, #69	; 0x45
 8005d76:	700a      	strb	r2, [r1, #0]
 8005d78:	4a54      	ldr	r2, [pc, #336]	; (8005ecc <_printf_i+0x230>)
 8005d7a:	9203      	str	r2, [sp, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	1d10      	adds	r0, r2, #4
 8005d82:	6018      	str	r0, [r3, #0]
 8005d84:	6815      	ldr	r5, [r2, #0]
 8005d86:	0608      	lsls	r0, r1, #24
 8005d88:	d522      	bpl.n	8005dd0 <_printf_i+0x134>
 8005d8a:	07cb      	lsls	r3, r1, #31
 8005d8c:	d502      	bpl.n	8005d94 <_printf_i+0xf8>
 8005d8e:	2320      	movs	r3, #32
 8005d90:	4319      	orrs	r1, r3
 8005d92:	6021      	str	r1, [r4, #0]
 8005d94:	2710      	movs	r7, #16
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	d103      	bne.n	8005da2 <_printf_i+0x106>
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	6822      	ldr	r2, [r4, #0]
 8005d9e:	439a      	bics	r2, r3
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	0023      	movs	r3, r4
 8005da4:	2200      	movs	r2, #0
 8005da6:	3343      	adds	r3, #67	; 0x43
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	db5c      	blt.n	8005e6c <_printf_i+0x1d0>
 8005db2:	2204      	movs	r2, #4
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	4391      	bics	r1, r2
 8005db8:	6021      	str	r1, [r4, #0]
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	d158      	bne.n	8005e70 <_printf_i+0x1d4>
 8005dbe:	9e04      	ldr	r6, [sp, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d064      	beq.n	8005e8e <_printf_i+0x1f2>
 8005dc4:	0026      	movs	r6, r4
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	3642      	adds	r6, #66	; 0x42
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	7033      	strb	r3, [r6, #0]
 8005dce:	e05e      	b.n	8005e8e <_printf_i+0x1f2>
 8005dd0:	0648      	lsls	r0, r1, #25
 8005dd2:	d5da      	bpl.n	8005d8a <_printf_i+0xee>
 8005dd4:	b2ad      	uxth	r5, r5
 8005dd6:	e7d8      	b.n	8005d8a <_printf_i+0xee>
 8005dd8:	6809      	ldr	r1, [r1, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	0608      	lsls	r0, r1, #24
 8005dde:	d505      	bpl.n	8005dec <_printf_i+0x150>
 8005de0:	1d11      	adds	r1, r2, #4
 8005de2:	6019      	str	r1, [r3, #0]
 8005de4:	6813      	ldr	r3, [r2, #0]
 8005de6:	6962      	ldr	r2, [r4, #20]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e006      	b.n	8005dfa <_printf_i+0x15e>
 8005dec:	0649      	lsls	r1, r1, #25
 8005dee:	d5f7      	bpl.n	8005de0 <_printf_i+0x144>
 8005df0:	1d11      	adds	r1, r2, #4
 8005df2:	6019      	str	r1, [r3, #0]
 8005df4:	6813      	ldr	r3, [r2, #0]
 8005df6:	8aa2      	ldrh	r2, [r4, #20]
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9e04      	ldr	r6, [sp, #16]
 8005dfe:	6123      	str	r3, [r4, #16]
 8005e00:	e054      	b.n	8005eac <_printf_i+0x210>
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	1d11      	adds	r1, r2, #4
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	6816      	ldr	r6, [r2, #0]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6862      	ldr	r2, [r4, #4]
 8005e0e:	0030      	movs	r0, r6
 8005e10:	f000 f85e 	bl	8005ed0 <memchr>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d001      	beq.n	8005e1c <_printf_i+0x180>
 8005e18:	1b80      	subs	r0, r0, r6
 8005e1a:	6060      	str	r0, [r4, #4]
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9a04      	ldr	r2, [sp, #16]
 8005e24:	7013      	strb	r3, [r2, #0]
 8005e26:	e041      	b.n	8005eac <_printf_i+0x210>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	0032      	movs	r2, r6
 8005e2c:	9906      	ldr	r1, [sp, #24]
 8005e2e:	9805      	ldr	r0, [sp, #20]
 8005e30:	9d07      	ldr	r5, [sp, #28]
 8005e32:	47a8      	blx	r5
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d043      	beq.n	8005ec0 <_printf_i+0x224>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	079b      	lsls	r3, r3, #30
 8005e3e:	d40f      	bmi.n	8005e60 <_printf_i+0x1c4>
 8005e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e42:	68e0      	ldr	r0, [r4, #12]
 8005e44:	4298      	cmp	r0, r3
 8005e46:	da3d      	bge.n	8005ec4 <_printf_i+0x228>
 8005e48:	0018      	movs	r0, r3
 8005e4a:	e03b      	b.n	8005ec4 <_printf_i+0x228>
 8005e4c:	0022      	movs	r2, r4
 8005e4e:	2301      	movs	r3, #1
 8005e50:	3219      	adds	r2, #25
 8005e52:	9906      	ldr	r1, [sp, #24]
 8005e54:	9805      	ldr	r0, [sp, #20]
 8005e56:	9e07      	ldr	r6, [sp, #28]
 8005e58:	47b0      	blx	r6
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d030      	beq.n	8005ec0 <_printf_i+0x224>
 8005e5e:	3501      	adds	r5, #1
 8005e60:	68e3      	ldr	r3, [r4, #12]
 8005e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	429d      	cmp	r5, r3
 8005e68:	dbf0      	blt.n	8005e4c <_printf_i+0x1b0>
 8005e6a:	e7e9      	b.n	8005e40 <_printf_i+0x1a4>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d0a9      	beq.n	8005dc4 <_printf_i+0x128>
 8005e70:	9e04      	ldr	r6, [sp, #16]
 8005e72:	0028      	movs	r0, r5
 8005e74:	0039      	movs	r1, r7
 8005e76:	f7fa f9df 	bl	8000238 <__aeabi_uidivmod>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	3e01      	subs	r6, #1
 8005e7e:	5c5b      	ldrb	r3, [r3, r1]
 8005e80:	0028      	movs	r0, r5
 8005e82:	7033      	strb	r3, [r6, #0]
 8005e84:	0039      	movs	r1, r7
 8005e86:	f7fa f951 	bl	800012c <__udivsi3>
 8005e8a:	1e05      	subs	r5, r0, #0
 8005e8c:	d1f1      	bne.n	8005e72 <_printf_i+0x1d6>
 8005e8e:	2f08      	cmp	r7, #8
 8005e90:	d109      	bne.n	8005ea6 <_printf_i+0x20a>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07db      	lsls	r3, r3, #31
 8005e96:	d506      	bpl.n	8005ea6 <_printf_i+0x20a>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	6922      	ldr	r2, [r4, #16]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	dc02      	bgt.n	8005ea6 <_printf_i+0x20a>
 8005ea0:	2330      	movs	r3, #48	; 0x30
 8005ea2:	3e01      	subs	r6, #1
 8005ea4:	7033      	strb	r3, [r6, #0]
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	1b9b      	subs	r3, r3, r6
 8005eaa:	6123      	str	r3, [r4, #16]
 8005eac:	9b07      	ldr	r3, [sp, #28]
 8005eae:	aa09      	add	r2, sp, #36	; 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	0021      	movs	r1, r4
 8005eb4:	9b06      	ldr	r3, [sp, #24]
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	f7ff fe82 	bl	8005bc0 <_printf_common>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d1b3      	bne.n	8005e28 <_printf_i+0x18c>
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	b00b      	add	sp, #44	; 0x2c
 8005ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec8:	08006dda 	.word	0x08006dda
 8005ecc:	08006dc9 	.word	0x08006dc9

08005ed0 <memchr>:
 8005ed0:	b2c9      	uxtb	r1, r1
 8005ed2:	1882      	adds	r2, r0, r2
 8005ed4:	4290      	cmp	r0, r2
 8005ed6:	d101      	bne.n	8005edc <memchr+0xc>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	4770      	bx	lr
 8005edc:	7803      	ldrb	r3, [r0, #0]
 8005ede:	428b      	cmp	r3, r1
 8005ee0:	d0fb      	beq.n	8005eda <memchr+0xa>
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	e7f6      	b.n	8005ed4 <memchr+0x4>

08005ee6 <memmove>:
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	4288      	cmp	r0, r1
 8005eea:	d902      	bls.n	8005ef2 <memmove+0xc>
 8005eec:	188b      	adds	r3, r1, r2
 8005eee:	4298      	cmp	r0, r3
 8005ef0:	d308      	bcc.n	8005f04 <memmove+0x1e>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d007      	beq.n	8005f08 <memmove+0x22>
 8005ef8:	5ccc      	ldrb	r4, [r1, r3]
 8005efa:	54c4      	strb	r4, [r0, r3]
 8005efc:	3301      	adds	r3, #1
 8005efe:	e7f9      	b.n	8005ef4 <memmove+0xe>
 8005f00:	5c8b      	ldrb	r3, [r1, r2]
 8005f02:	5483      	strb	r3, [r0, r2]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	d2fb      	bcs.n	8005f00 <memmove+0x1a>
 8005f08:	bd10      	pop	{r4, pc}

08005f0a <_realloc_r>:
 8005f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0c:	0007      	movs	r7, r0
 8005f0e:	000d      	movs	r5, r1
 8005f10:	0016      	movs	r6, r2
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d105      	bne.n	8005f22 <_realloc_r+0x18>
 8005f16:	0011      	movs	r1, r2
 8005f18:	f7ff fc58 	bl	80057cc <_malloc_r>
 8005f1c:	0004      	movs	r4, r0
 8005f1e:	0020      	movs	r0, r4
 8005f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d103      	bne.n	8005f2e <_realloc_r+0x24>
 8005f26:	f7ff fc07 	bl	8005738 <_free_r>
 8005f2a:	0034      	movs	r4, r6
 8005f2c:	e7f7      	b.n	8005f1e <_realloc_r+0x14>
 8005f2e:	f000 f812 	bl	8005f56 <_malloc_usable_size_r>
 8005f32:	002c      	movs	r4, r5
 8005f34:	4286      	cmp	r6, r0
 8005f36:	d9f2      	bls.n	8005f1e <_realloc_r+0x14>
 8005f38:	0031      	movs	r1, r6
 8005f3a:	0038      	movs	r0, r7
 8005f3c:	f7ff fc46 	bl	80057cc <_malloc_r>
 8005f40:	1e04      	subs	r4, r0, #0
 8005f42:	d0ec      	beq.n	8005f1e <_realloc_r+0x14>
 8005f44:	0029      	movs	r1, r5
 8005f46:	0032      	movs	r2, r6
 8005f48:	f7ff fbe4 	bl	8005714 <memcpy>
 8005f4c:	0029      	movs	r1, r5
 8005f4e:	0038      	movs	r0, r7
 8005f50:	f7ff fbf2 	bl	8005738 <_free_r>
 8005f54:	e7e3      	b.n	8005f1e <_realloc_r+0x14>

08005f56 <_malloc_usable_size_r>:
 8005f56:	1f0b      	subs	r3, r1, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1f18      	subs	r0, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	da01      	bge.n	8005f64 <_malloc_usable_size_r+0xe>
 8005f60:	580b      	ldr	r3, [r1, r0]
 8005f62:	18c0      	adds	r0, r0, r3
 8005f64:	4770      	bx	lr
	...

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
