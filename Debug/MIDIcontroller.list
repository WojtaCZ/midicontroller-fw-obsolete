
MIDIcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f0  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000268  20000000  08007bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f9c  20000268  08007e5c  00020268  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002204  08007e5c  00022204  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 10 .debug_info   000271f6  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005301  00000000  00000000  00047486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010ee0  00000000  00000000  0004c787  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014a8  00000000  00000000  0005d668  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c28  00000000  00000000  0005eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d30a  00000000  00000000  00060738  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000712b  00000000  00000000  0006da42  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00074b6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043e8  00000000  00000000  00074bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000268 	.word	0x20000268
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080063dc 	.word	0x080063dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000026c 	.word	0x2000026c
 8000100:	080063dc 	.word	0x080063dc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_uldivmod>:
 800043c:	2b00      	cmp	r3, #0
 800043e:	d111      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d10f      	bne.n	8000464 <__aeabi_uldivmod+0x28>
 8000444:	2900      	cmp	r1, #0
 8000446:	d100      	bne.n	800044a <__aeabi_uldivmod+0xe>
 8000448:	2800      	cmp	r0, #0
 800044a:	d002      	beq.n	8000452 <__aeabi_uldivmod+0x16>
 800044c:	2100      	movs	r1, #0
 800044e:	43c9      	mvns	r1, r1
 8000450:	1c08      	adds	r0, r1, #0
 8000452:	b407      	push	{r0, r1, r2}
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <__aeabi_uldivmod+0x24>)
 8000456:	a102      	add	r1, pc, #8	; (adr r1, 8000460 <__aeabi_uldivmod+0x24>)
 8000458:	1840      	adds	r0, r0, r1
 800045a:	9002      	str	r0, [sp, #8]
 800045c:	bd03      	pop	{r0, r1, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	ffffffd9 	.word	0xffffffd9
 8000464:	b403      	push	{r0, r1}
 8000466:	4668      	mov	r0, sp
 8000468:	b501      	push	{r0, lr}
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	f000 f806 	bl	800047c <__udivmoddi4>
 8000470:	9b01      	ldr	r3, [sp, #4]
 8000472:	469e      	mov	lr, r3
 8000474:	b002      	add	sp, #8
 8000476:	bc0c      	pop	{r2, r3}
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__udivmoddi4>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	4657      	mov	r7, sl
 8000480:	464e      	mov	r6, r9
 8000482:	4645      	mov	r5, r8
 8000484:	46de      	mov	lr, fp
 8000486:	b5e0      	push	{r5, r6, r7, lr}
 8000488:	0004      	movs	r4, r0
 800048a:	b083      	sub	sp, #12
 800048c:	000d      	movs	r5, r1
 800048e:	4692      	mov	sl, r2
 8000490:	4699      	mov	r9, r3
 8000492:	428b      	cmp	r3, r1
 8000494:	d82f      	bhi.n	80004f6 <__udivmoddi4+0x7a>
 8000496:	d02c      	beq.n	80004f2 <__udivmoddi4+0x76>
 8000498:	4649      	mov	r1, r9
 800049a:	4650      	mov	r0, sl
 800049c:	f000 f8ae 	bl	80005fc <__clzdi2>
 80004a0:	0029      	movs	r1, r5
 80004a2:	0006      	movs	r6, r0
 80004a4:	0020      	movs	r0, r4
 80004a6:	f000 f8a9 	bl	80005fc <__clzdi2>
 80004aa:	1a33      	subs	r3, r6, r0
 80004ac:	4698      	mov	r8, r3
 80004ae:	3b20      	subs	r3, #32
 80004b0:	469b      	mov	fp, r3
 80004b2:	d500      	bpl.n	80004b6 <__udivmoddi4+0x3a>
 80004b4:	e074      	b.n	80005a0 <__udivmoddi4+0x124>
 80004b6:	4653      	mov	r3, sl
 80004b8:	465a      	mov	r2, fp
 80004ba:	4093      	lsls	r3, r2
 80004bc:	001f      	movs	r7, r3
 80004be:	4653      	mov	r3, sl
 80004c0:	4642      	mov	r2, r8
 80004c2:	4093      	lsls	r3, r2
 80004c4:	001e      	movs	r6, r3
 80004c6:	42af      	cmp	r7, r5
 80004c8:	d829      	bhi.n	800051e <__udivmoddi4+0xa2>
 80004ca:	d026      	beq.n	800051a <__udivmoddi4+0x9e>
 80004cc:	465b      	mov	r3, fp
 80004ce:	1ba4      	subs	r4, r4, r6
 80004d0:	41bd      	sbcs	r5, r7
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da00      	bge.n	80004d8 <__udivmoddi4+0x5c>
 80004d6:	e079      	b.n	80005cc <__udivmoddi4+0x150>
 80004d8:	2200      	movs	r2, #0
 80004da:	2300      	movs	r3, #0
 80004dc:	9200      	str	r2, [sp, #0]
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2301      	movs	r3, #1
 80004e2:	465a      	mov	r2, fp
 80004e4:	4093      	lsls	r3, r2
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2301      	movs	r3, #1
 80004ea:	4642      	mov	r2, r8
 80004ec:	4093      	lsls	r3, r2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	e019      	b.n	8000526 <__udivmoddi4+0xaa>
 80004f2:	4282      	cmp	r2, r0
 80004f4:	d9d0      	bls.n	8000498 <__udivmoddi4+0x1c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <__udivmoddi4+0x8c>
 8000504:	601c      	str	r4, [r3, #0]
 8000506:	605d      	str	r5, [r3, #4]
 8000508:	9800      	ldr	r0, [sp, #0]
 800050a:	9901      	ldr	r1, [sp, #4]
 800050c:	b003      	add	sp, #12
 800050e:	bc3c      	pop	{r2, r3, r4, r5}
 8000510:	4690      	mov	r8, r2
 8000512:	4699      	mov	r9, r3
 8000514:	46a2      	mov	sl, r4
 8000516:	46ab      	mov	fp, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	42a3      	cmp	r3, r4
 800051c:	d9d6      	bls.n	80004cc <__udivmoddi4+0x50>
 800051e:	2200      	movs	r2, #0
 8000520:	2300      	movs	r3, #0
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0e8      	beq.n	80004fe <__udivmoddi4+0x82>
 800052c:	07fb      	lsls	r3, r7, #31
 800052e:	0872      	lsrs	r2, r6, #1
 8000530:	431a      	orrs	r2, r3
 8000532:	4646      	mov	r6, r8
 8000534:	087b      	lsrs	r3, r7, #1
 8000536:	e00e      	b.n	8000556 <__udivmoddi4+0xda>
 8000538:	42ab      	cmp	r3, r5
 800053a:	d101      	bne.n	8000540 <__udivmoddi4+0xc4>
 800053c:	42a2      	cmp	r2, r4
 800053e:	d80c      	bhi.n	800055a <__udivmoddi4+0xde>
 8000540:	1aa4      	subs	r4, r4, r2
 8000542:	419d      	sbcs	r5, r3
 8000544:	2001      	movs	r0, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2100      	movs	r1, #0
 800054c:	3e01      	subs	r6, #1
 800054e:	1824      	adds	r4, r4, r0
 8000550:	414d      	adcs	r5, r1
 8000552:	2e00      	cmp	r6, #0
 8000554:	d006      	beq.n	8000564 <__udivmoddi4+0xe8>
 8000556:	42ab      	cmp	r3, r5
 8000558:	d9ee      	bls.n	8000538 <__udivmoddi4+0xbc>
 800055a:	3e01      	subs	r6, #1
 800055c:	1924      	adds	r4, r4, r4
 800055e:	416d      	adcs	r5, r5
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1f8      	bne.n	8000556 <__udivmoddi4+0xda>
 8000564:	465b      	mov	r3, fp
 8000566:	9800      	ldr	r0, [sp, #0]
 8000568:	9901      	ldr	r1, [sp, #4]
 800056a:	1900      	adds	r0, r0, r4
 800056c:	4169      	adcs	r1, r5
 800056e:	2b00      	cmp	r3, #0
 8000570:	db22      	blt.n	80005b8 <__udivmoddi4+0x13c>
 8000572:	002b      	movs	r3, r5
 8000574:	465a      	mov	r2, fp
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4644      	mov	r4, r8
 800057c:	40e2      	lsrs	r2, r4
 800057e:	001c      	movs	r4, r3
 8000580:	465b      	mov	r3, fp
 8000582:	0015      	movs	r5, r2
 8000584:	2b00      	cmp	r3, #0
 8000586:	db2c      	blt.n	80005e2 <__udivmoddi4+0x166>
 8000588:	0026      	movs	r6, r4
 800058a:	409e      	lsls	r6, r3
 800058c:	0033      	movs	r3, r6
 800058e:	0026      	movs	r6, r4
 8000590:	4647      	mov	r7, r8
 8000592:	40be      	lsls	r6, r7
 8000594:	0032      	movs	r2, r6
 8000596:	1a80      	subs	r0, r0, r2
 8000598:	4199      	sbcs	r1, r3
 800059a:	9000      	str	r0, [sp, #0]
 800059c:	9101      	str	r1, [sp, #4]
 800059e:	e7ae      	b.n	80004fe <__udivmoddi4+0x82>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	4652      	mov	r2, sl
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	4641      	mov	r1, r8
 80005ac:	0013      	movs	r3, r2
 80005ae:	464a      	mov	r2, r9
 80005b0:	408a      	lsls	r2, r1
 80005b2:	0017      	movs	r7, r2
 80005b4:	431f      	orrs	r7, r3
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x42>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4313      	orrs	r3, r2
 80005ca:	e7d5      	b.n	8000578 <__udivmoddi4+0xfc>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	40da      	lsrs	r2, r3
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	e782      	b.n	80004e8 <__udivmoddi4+0x6c>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	0026      	movs	r6, r4
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	40de      	lsrs	r6, r3
 80005ec:	002f      	movs	r7, r5
 80005ee:	46b4      	mov	ip, r6
 80005f0:	4097      	lsls	r7, r2
 80005f2:	4666      	mov	r6, ip
 80005f4:	003b      	movs	r3, r7
 80005f6:	4333      	orrs	r3, r6
 80005f8:	e7c9      	b.n	800058e <__udivmoddi4+0x112>
 80005fa:	46c0      	nop			; (mov r8, r8)

080005fc <__clzdi2>:
 80005fc:	b510      	push	{r4, lr}
 80005fe:	2900      	cmp	r1, #0
 8000600:	d103      	bne.n	800060a <__clzdi2+0xe>
 8000602:	f000 f807 	bl	8000614 <__clzsi2>
 8000606:	3020      	adds	r0, #32
 8000608:	e002      	b.n	8000610 <__clzdi2+0x14>
 800060a:	1c08      	adds	r0, r1, #0
 800060c:	f000 f802 	bl	8000614 <__clzsi2>
 8000610:	bd10      	pop	{r4, pc}
 8000612:	46c0      	nop			; (mov r8, r8)

08000614 <__clzsi2>:
 8000614:	211c      	movs	r1, #28
 8000616:	2301      	movs	r3, #1
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0xe>
 800061e:	0c00      	lsrs	r0, r0, #16
 8000620:	3910      	subs	r1, #16
 8000622:	0a1b      	lsrs	r3, r3, #8
 8000624:	4298      	cmp	r0, r3
 8000626:	d301      	bcc.n	800062c <__clzsi2+0x18>
 8000628:	0a00      	lsrs	r0, r0, #8
 800062a:	3908      	subs	r1, #8
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	4298      	cmp	r0, r3
 8000630:	d301      	bcc.n	8000636 <__clzsi2+0x22>
 8000632:	0900      	lsrs	r0, r0, #4
 8000634:	3904      	subs	r1, #4
 8000636:	a202      	add	r2, pc, #8	; (adr r2, 8000640 <__clzsi2+0x2c>)
 8000638:	5c10      	ldrb	r0, [r2, r0]
 800063a:	1840      	adds	r0, r0, r1
 800063c:	4770      	bx	lr
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	02020304 	.word	0x02020304
 8000644:	01010101 	.word	0x01010101
	...

08000650 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_InitTick+0x44>)
{
 8000652:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8000654:	6819      	ldr	r1, [r3, #0]
{
 8000656:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 8000658:	2900      	cmp	r1, #0
 800065a:	d101      	bne.n	8000660 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800065c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800065e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	20fa      	movs	r0, #250	; 0xfa
 8000662:	0080      	lsls	r0, r0, #2
 8000664:	f7ff fd74 	bl	8000150 <__udivsi3>
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_InitTick+0x48>)
 800066a:	0001      	movs	r1, r0
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f7ff fd6f 	bl	8000150 <__udivsi3>
 8000672:	f000 fb97 	bl	8000da4 <HAL_SYSTICK_Config>
 8000676:	1e04      	subs	r4, r0, #0
 8000678:	d1f0      	bne.n	800065c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067a:	2d03      	cmp	r5, #3
 800067c:	d8ee      	bhi.n	800065c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067e:	0002      	movs	r2, r0
 8000680:	2001      	movs	r0, #1
 8000682:	0029      	movs	r1, r5
 8000684:	4240      	negs	r0, r0
 8000686:	f000 fb51 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_InitTick+0x4c>)
 800068c:	0020      	movs	r0, r4
 800068e:	601d      	str	r5, [r3, #0]
 8000690:	e7e5      	b.n	800065e <HAL_InitTick+0xe>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000000 	.word	0x20000000
 8000698:	20000200 	.word	0x20000200
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_Init+0x24>)
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	6811      	ldr	r1, [r2, #0]
{
 80006a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ffce 	bl	8000650 <HAL_InitTick>
 80006b4:	1e04      	subs	r4, r0, #0
 80006b6:	d103      	bne.n	80006c0 <HAL_Init+0x20>
  HAL_MspInit();
 80006b8:	f004 ff82 	bl	80055c0 <HAL_MspInit>
}
 80006bc:	0020      	movs	r0, r4
 80006be:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80006c0:	2401      	movs	r4, #1
 80006c2:	e7fb      	b.n	80006bc <HAL_Init+0x1c>
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x10>)
 80006ca:	4904      	ldr	r1, [pc, #16]	; (80006dc <HAL_IncTick+0x14>)
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	6809      	ldr	r1, [r1, #0]
 80006d0:	185b      	adds	r3, r3, r1
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	200006ac 	.word	0x200006ac
 80006dc:	20000000 	.word	0x20000000

080006e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_GetTick+0x8>)
 80006e2:	6818      	ldr	r0, [r3, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200006ac 	.word	0x200006ac

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006f0:	f7ff fff6 	bl	80006e0 <HAL_GetTick>
 80006f4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f6:	1c63      	adds	r3, r4, #1
 80006f8:	d002      	beq.n	8000700 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_Delay+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000700:	f7ff ffee 	bl	80006e0 <HAL_GetTick>
 8000704:	1b40      	subs	r0, r0, r5
 8000706:	4284      	cmp	r4, r0
 8000708:	d8fa      	bhi.n	8000700 <HAL_Delay+0x14>
  {
  }
}
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	20000000 	.word	0x20000000

08000710 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000710:	6880      	ldr	r0, [r0, #8]
 8000712:	0740      	lsls	r0, r0, #29
 8000714:	0fc0      	lsrs	r0, r0, #31
}
 8000716:	4770      	bx	lr

08000718 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000718:	2300      	movs	r3, #0
{
 800071a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071c:	b085      	sub	sp, #20
 800071e:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8000720:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000722:	2501      	movs	r5, #1
  if(hadc == NULL)
 8000724:	4298      	cmp	r0, r3
 8000726:	d100      	bne.n	800072a <HAL_ADC_Init+0x12>
 8000728:	e09a      	b.n	8000860 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800072a:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800072c:	429d      	cmp	r5, r3
 800072e:	d105      	bne.n	800073c <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000730:	f003 fd22 	bl	8004178 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000734:	0023      	movs	r3, r4
 8000736:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000738:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800073a:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800073c:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800073e:	6826      	ldr	r6, [r4, #0]
 8000740:	055b      	lsls	r3, r3, #21
 8000742:	68b2      	ldr	r2, [r6, #8]
 8000744:	421a      	tst	r2, r3
 8000746:	d100      	bne.n	800074a <HAL_ADC_Init+0x32>
 8000748:	e0d0      	b.n	80008ec <HAL_ADC_Init+0x1d4>
 800074a:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800074c:	2500      	movs	r5, #0
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	d400      	bmi.n	8000754 <HAL_ADC_Init+0x3c>
 8000752:	e0d8      	b.n	8000906 <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000754:	0030      	movs	r0, r6
 8000756:	f7ff ffdb 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800075a:	2310      	movs	r3, #16
 800075c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800075e:	401e      	ands	r6, r3
 8000760:	d000      	beq.n	8000764 <HAL_ADC_Init+0x4c>
 8000762:	e0be      	b.n	80008e2 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000764:	2800      	cmp	r0, #0
 8000766:	d000      	beq.n	800076a <HAL_ADC_Init+0x52>
 8000768:	e0bb      	b.n	80008e2 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800076a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800076c:	4a7c      	ldr	r2, [pc, #496]	; (8000960 <HAL_ADC_Init+0x248>)
 800076e:	401a      	ands	r2, r3
 8000770:	2302      	movs	r3, #2
 8000772:	4313      	orrs	r3, r2
 8000774:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000776:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000778:	689a      	ldr	r2, [r3, #8]
 800077a:	07d2      	lsls	r2, r2, #31
 800077c:	d400      	bmi.n	8000780 <HAL_ADC_Init+0x68>
 800077e:	e0cb      	b.n	8000918 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000780:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000782:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000784:	1e78      	subs	r0, r7, #1
 8000786:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000788:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800078a:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800078c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800078e:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000790:	9001      	str	r0, [sp, #4]
 8000792:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000794:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000796:	7ea2      	ldrb	r2, [r4, #26]
 8000798:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800079a:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800079c:	4694      	mov	ip, r2
 800079e:	0352      	lsls	r2, r2, #13
 80007a0:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80007a2:	2800      	cmp	r0, #0
 80007a4:	da66      	bge.n	8000874 <HAL_ADC_Init+0x15c>
 80007a6:	0047      	lsls	r7, r0, #1
 80007a8:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80007aa:	0022      	movs	r2, r4
 80007ac:	322c      	adds	r2, #44	; 0x2c
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80007b2:	430a      	orrs	r2, r1
 80007b4:	9901      	ldr	r1, [sp, #4]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	4317      	orrs	r7, r2
 80007ba:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007bc:	1c62      	adds	r2, r4, #1
 80007be:	7fd2      	ldrb	r2, [r2, #31]
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d107      	bne.n	80007d4 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007c4:	4661      	mov	r1, ip
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d157      	bne.n	800087a <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0039      	movs	r1, r7
 80007ce:	0252      	lsls	r2, r2, #9
 80007d0:	4311      	orrs	r1, r2
 80007d2:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d007      	beq.n	80007ea <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80007da:	21e0      	movs	r1, #224	; 0xe0
 80007dc:	0049      	lsls	r1, r1, #1
 80007de:	400a      	ands	r2, r1
 80007e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80007e2:	430a      	orrs	r2, r1
 80007e4:	9901      	ldr	r1, [sp, #4]
 80007e6:	4311      	orrs	r1, r2
 80007e8:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80007ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ee:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 80007f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80007f2:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 80007f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80007f6:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80007f8:	0021      	movs	r1, r4
 80007fa:	313c      	adds	r1, #60	; 0x3c
 80007fc:	7809      	ldrb	r1, [r1, #0]
 80007fe:	2901      	cmp	r1, #1
 8000800:	d100      	bne.n	8000804 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000802:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000804:	68d9      	ldr	r1, [r3, #12]
 8000806:	4f57      	ldr	r7, [pc, #348]	; (8000964 <HAL_ADC_Init+0x24c>)
 8000808:	4039      	ands	r1, r7
 800080a:	9f01      	ldr	r7, [sp, #4]
 800080c:	4339      	orrs	r1, r7
 800080e:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000810:	6919      	ldr	r1, [r3, #16]
 8000812:	4f55      	ldr	r7, [pc, #340]	; (8000968 <HAL_ADC_Init+0x250>)
 8000814:	4039      	ands	r1, r7
 8000816:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8000818:	2107      	movs	r1, #7
 800081a:	2770      	movs	r7, #112	; 0x70
 800081c:	611a      	str	r2, [r3, #16]
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	438a      	bics	r2, r1
 8000822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800082c:	43ba      	bics	r2, r7
 800082e:	0109      	lsls	r1, r1, #4
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000834:	2800      	cmp	r0, #0
 8000836:	d12a      	bne.n	800088e <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000838:	2210      	movs	r2, #16
 800083a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800083c:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800083e:	430a      	orrs	r2, r1
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <HAL_ADC_Init+0x254>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4013      	ands	r3, r2
 8000848:	9a01      	ldr	r2, [sp, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d13d      	bne.n	80008ca <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800084e:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000850:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000852:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000856:	4393      	bics	r3, r2
 8000858:	001a      	movs	r2, r3
 800085a:	2301      	movs	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000860:	0028      	movs	r0, r5
 8000862:	b005      	add	sp, #20
 8000864:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 8000866:	9b03      	ldr	r3, [sp, #12]
 8000868:	3b01      	subs	r3, #1
 800086a:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 800086c:	9b03      	ldr	r3, [sp, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f9      	bne.n	8000866 <HAL_ADC_Init+0x14e>
 8000872:	e76a      	b.n	800074a <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000874:	2780      	movs	r7, #128	; 0x80
 8000876:	03bf      	lsls	r7, r7, #14
 8000878:	e797      	b.n	80007aa <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800087c:	468c      	mov	ip, r1
 800087e:	2120      	movs	r1, #32
 8000880:	4667      	mov	r7, ip
 8000882:	4339      	orrs	r1, r7
 8000884:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000886:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000888:	430a      	orrs	r2, r1
 800088a:	65e2      	str	r2, [r4, #92]	; 0x5c
 800088c:	e7a2      	b.n	80007d4 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0392      	lsls	r2, r2, #14
 8000892:	4290      	cmp	r0, r2
 8000894:	d1d5      	bne.n	8000842 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000896:	200f      	movs	r0, #15
 8000898:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800089a:	000f      	movs	r7, r1
 800089c:	00b2      	lsls	r2, r6, #2
 800089e:	40d7      	lsrs	r7, r2
 80008a0:	003a      	movs	r2, r7
 80008a2:	4002      	ands	r2, r0
 80008a4:	2a0f      	cmp	r2, #15
 80008a6:	d00d      	beq.n	80008c4 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80008a8:	3601      	adds	r6, #1
 80008aa:	2e08      	cmp	r6, #8
 80008ac:	d1f5      	bne.n	800089a <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 80008ae:	4830      	ldr	r0, [pc, #192]	; (8000970 <HAL_ADC_Init+0x258>)
 80008b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b2:	69e2      	ldr	r2, [r4, #28]
 80008b4:	1812      	adds	r2, r2, r0
 80008b6:	201c      	movs	r0, #28
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	4002      	ands	r2, r0
 80008bc:	382c      	subs	r0, #44	; 0x2c
 80008be:	4090      	lsls	r0, r2
 80008c0:	0002      	movs	r2, r0
 80008c2:	e7bc      	b.n	800083e <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 80008c4:	2e01      	cmp	r6, #1
 80008c6:	d0b7      	beq.n	8000838 <HAL_ADC_Init+0x120>
 80008c8:	e7f1      	b.n	80008ae <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 80008ca:	2212      	movs	r2, #18
 80008cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ce:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 80008d0:	4393      	bics	r3, r2
 80008d2:	001a      	movs	r2, r3
 80008d4:	2310      	movs	r3, #16
 80008d6:	4313      	orrs	r3, r2
 80008d8:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80008dc:	432b      	orrs	r3, r5
 80008de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80008e0:	e7be      	b.n	8000860 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80008e4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e6:	4313      	orrs	r3, r2
 80008e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80008ea:	e7b9      	b.n	8000860 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 80008ec:	68b2      	ldr	r2, [r6, #8]
 80008ee:	4921      	ldr	r1, [pc, #132]	; (8000974 <HAL_ADC_Init+0x25c>)
 80008f0:	400a      	ands	r2, r1
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_ADC_Init+0x260>)
 80008f8:	4920      	ldr	r1, [pc, #128]	; (800097c <HAL_ADC_Init+0x264>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	f7ff fc28 	bl	8000150 <__udivsi3>
 8000900:	0040      	lsls	r0, r0, #1
 8000902:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8000904:	e7b2      	b.n	800086c <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000906:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000908:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800090a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800090c:	4313      	orrs	r3, r2
 800090e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000912:	432b      	orrs	r3, r5
 8000914:	65e3      	str	r3, [r4, #92]	; 0x5c
 8000916:	e71d      	b.n	8000754 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000918:	2118      	movs	r1, #24
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	438a      	bics	r2, r1
 800091e:	68a1      	ldr	r1, [r4, #8]
 8000920:	430a      	orrs	r2, r1
 8000922:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000924:	6861      	ldr	r1, [r4, #4]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	0f88      	lsrs	r0, r1, #30
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	0780      	lsls	r0, r0, #30
 800092e:	0892      	lsrs	r2, r2, #2
 8000930:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000932:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000934:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000936:	004a      	lsls	r2, r1, #1
 8000938:	0852      	lsrs	r2, r2, #1
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4282      	cmp	r2, r0
 800093e:	d100      	bne.n	8000942 <HAL_ADC_Init+0x22a>
 8000940:	e71e      	b.n	8000780 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0612      	lsls	r2, r2, #24
 8000946:	4291      	cmp	r1, r2
 8000948:	d100      	bne.n	800094c <HAL_ADC_Init+0x234>
 800094a:	e719      	b.n	8000780 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <HAL_ADC_Init+0x268>)
 800094e:	4f0d      	ldr	r7, [pc, #52]	; (8000984 <HAL_ADC_Init+0x26c>)
 8000950:	6802      	ldr	r2, [r0, #0]
 8000952:	403a      	ands	r2, r7
 8000954:	27f0      	movs	r7, #240	; 0xf0
 8000956:	03bf      	lsls	r7, r7, #14
 8000958:	4039      	ands	r1, r7
 800095a:	430a      	orrs	r2, r1
 800095c:	6002      	str	r2, [r0, #0]
 800095e:	e70f      	b.n	8000780 <HAL_ADC_Init+0x68>
 8000960:	fffffefd 	.word	0xfffffefd
 8000964:	fffe0219 	.word	0xfffe0219
 8000968:	dffffc02 	.word	0xdffffc02
 800096c:	833fffe7 	.word	0x833fffe7
 8000970:	3fffffff 	.word	0x3fffffff
 8000974:	6fffffe8 	.word	0x6fffffe8
 8000978:	20000200 	.word	0x20000200
 800097c:	00030d40 	.word	0x00030d40
 8000980:	40012708 	.word	0x40012708
 8000984:	ffc3ffff 	.word	0xffc3ffff

08000988 <HAL_ADC_ConvCpltCallback>:
 8000988:	4770      	bx	lr

0800098a <HAL_ADC_LevelOutOfWindowCallback>:
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800098c:	4770      	bx	lr
	...

08000990 <HAL_ADC_IRQHandler>:
{
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000992:	6803      	ldr	r3, [r0, #0]
{
 8000994:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000996:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000998:	685e      	ldr	r6, [r3, #4]
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800099a:	2302      	movs	r3, #2
 800099c:	421d      	tst	r5, r3
 800099e:	d00f      	beq.n	80009c0 <HAL_ADC_IRQHandler+0x30>
 80009a0:	421e      	tst	r6, r3
 80009a2:	d00d      	beq.n	80009c0 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80009a6:	06db      	lsls	r3, r3, #27
 80009a8:	d404      	bmi.n	80009b4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80009b4:	0020      	movs	r0, r4
 80009b6:	f000 f9b7 	bl	8000d28 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 80009ba:	2202      	movs	r2, #2
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	601a      	str	r2, [r3, #0]
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80009c0:	2304      	movs	r3, #4
 80009c2:	421d      	tst	r5, r3
 80009c4:	d001      	beq.n	80009ca <HAL_ADC_IRQHandler+0x3a>
 80009c6:	421e      	tst	r6, r3
 80009c8:	d104      	bne.n	80009d4 <HAL_ADC_IRQHandler+0x44>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80009ca:	2308      	movs	r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80009cc:	421d      	tst	r5, r3
 80009ce:	d02a      	beq.n	8000a26 <HAL_ADC_IRQHandler+0x96>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80009d0:	421e      	tst	r6, r3
 80009d2:	d028      	beq.n	8000a26 <HAL_ADC_IRQHandler+0x96>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009d6:	06db      	lsls	r3, r3, #27
 80009d8:	d404      	bmi.n	80009e4 <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4313      	orrs	r3, r2
 80009e2:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009e4:	23c0      	movs	r3, #192	; 0xc0
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80009e6:	6820      	ldr	r0, [r4, #0]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	68c2      	ldr	r2, [r0, #12]
 80009ec:	421a      	tst	r2, r3
 80009ee:	d114      	bne.n	8000a1a <HAL_ADC_IRQHandler+0x8a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80009f0:	7ea3      	ldrb	r3, [r4, #26]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d111      	bne.n	8000a1a <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80009f6:	6803      	ldr	r3, [r0, #0]
 80009f8:	071b      	lsls	r3, r3, #28
 80009fa:	d50e      	bpl.n	8000a1a <HAL_ADC_IRQHandler+0x8a>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009fc:	f7ff fe88 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d15a      	bne.n	8000aba <HAL_ADC_IRQHandler+0x12a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a04:	210c      	movs	r1, #12
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	6853      	ldr	r3, [r2, #4]
 8000a0a:	438b      	bics	r3, r1
 8000a0c:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a10:	4a35      	ldr	r2, [pc, #212]	; (8000ae8 <HAL_ADC_IRQHandler+0x158>)
 8000a12:	401a      	ands	r2, r3
 8000a14:	2301      	movs	r3, #1
 8000a16:	4313      	orrs	r3, r2
 8000a18:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f7ff ffb4 	bl	8000988 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000a20:	220c      	movs	r2, #12
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000a26:	2780      	movs	r7, #128	; 0x80
 8000a28:	423d      	tst	r5, r7
 8000a2a:	d00b      	beq.n	8000a44 <HAL_ADC_IRQHandler+0xb4>
 8000a2c:	423e      	tst	r6, r7
 8000a2e:	d009      	beq.n	8000a44 <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	4313      	orrs	r3, r2
 8000a38:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	f7ff ffa5 	bl	800098a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8000a44:	2780      	movs	r7, #128	; 0x80
 8000a46:	007f      	lsls	r7, r7, #1
 8000a48:	423d      	tst	r5, r7
 8000a4a:	d00b      	beq.n	8000a64 <HAL_ADC_IRQHandler+0xd4>
 8000a4c:	423e      	tst	r6, r7
 8000a4e:	d009      	beq.n	8000a64 <HAL_ADC_IRQHandler+0xd4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000a54:	029b      	lsls	r3, r3, #10
 8000a56:	4313      	orrs	r3, r2
 8000a58:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f000 f962 	bl	8000d24 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8000a64:	2780      	movs	r7, #128	; 0x80
 8000a66:	00bf      	lsls	r7, r7, #2
 8000a68:	423d      	tst	r5, r7
 8000a6a:	d00b      	beq.n	8000a84 <HAL_ADC_IRQHandler+0xf4>
 8000a6c:	423e      	tst	r6, r7
 8000a6e:	d009      	beq.n	8000a84 <HAL_ADC_IRQHandler+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000a74:	02db      	lsls	r3, r3, #11
 8000a76:	4313      	orrs	r3, r2
 8000a78:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	f000 f953 	bl	8000d26 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8000a84:	2310      	movs	r3, #16
 8000a86:	421d      	tst	r5, r3
 8000a88:	d00b      	beq.n	8000aa2 <HAL_ADC_IRQHandler+0x112>
 8000a8a:	421e      	tst	r6, r3
 8000a8c:	d009      	beq.n	8000aa2 <HAL_ADC_IRQHandler+0x112>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d01b      	beq.n	8000acc <HAL_ADC_IRQHandler+0x13c>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8000a94:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	079b      	lsls	r3, r3, #30
 8000a9a:	d117      	bne.n	8000acc <HAL_ADC_IRQHandler+0x13c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8000aa2:	2780      	movs	r7, #128	; 0x80
 8000aa4:	01bf      	lsls	r7, r7, #6
 8000aa6:	423d      	tst	r5, r7
 8000aa8:	d006      	beq.n	8000ab8 <HAL_ADC_IRQHandler+0x128>
 8000aaa:	423e      	tst	r6, r7
 8000aac:	d004      	beq.n	8000ab8 <HAL_ADC_IRQHandler+0x128>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8000aae:	0020      	movs	r0, r4
 8000ab0:	f000 f93b 	bl	8000d2a <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	601f      	str	r7, [r3, #0]
}
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aba:	2320      	movs	r3, #32
 8000abc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8000aca:	e7a6      	b.n	8000a1a <HAL_ADC_IRQHandler+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8000ada:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000adc:	4313      	orrs	r3, r2
 8000ade:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8000ae0:	f7ff ff54 	bl	800098c <HAL_ADC_ErrorCallback>
 8000ae4:	e7da      	b.n	8000a9c <HAL_ADC_IRQHandler+0x10c>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	fffffefe 	.word	0xfffffefe

08000aec <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000aec:	2300      	movs	r3, #0
{
 8000aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af0:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 8000af2:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000af4:	0003      	movs	r3, r0
 8000af6:	3354      	adds	r3, #84	; 0x54
 8000af8:	781a      	ldrb	r2, [r3, #0]
{
 8000afa:	0005      	movs	r5, r0
 8000afc:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 8000afe:	2402      	movs	r4, #2
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	d100      	bne.n	8000b06 <HAL_ADC_ConfigChannel+0x1a>
 8000b04:	e0c1      	b.n	8000c8a <HAL_ADC_ConfigChannel+0x19e>
 8000b06:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b08:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 8000b0a:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b0c:	f7ff fe00 	bl	8000710 <LL_ADC_REG_IsConversionOngoing>
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d000      	beq.n	8000b18 <HAL_ADC_ConfigChannel+0x2c>
 8000b16:	e0ef      	b.n	8000cf8 <HAL_ADC_ConfigChannel+0x20c>
 8000b18:	2204      	movs	r2, #4
 8000b1a:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4694      	mov	ip, r2
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	9801      	ldr	r0, [sp, #4]
 8000b24:	692b      	ldr	r3, [r5, #16]
 8000b26:	0609      	lsls	r1, r1, #24
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	42a0      	cmp	r0, r4
 8000b2c:	d100      	bne.n	8000b30 <HAL_ADC_ConfigChannel+0x44>
 8000b2e:	e0b6      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000b30:	4660      	mov	r0, ip
 8000b32:	4383      	bics	r3, r0
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d113      	bne.n	8000b60 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000b38:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b3a:	0353      	lsls	r3, r2, #13
 8000b3c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000b3e:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8000b40:	4303      	orrs	r3, r0
 8000b42:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b44:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	496e      	ldr	r1, [pc, #440]	; (8000d04 <HAL_ADC_ConfigChannel+0x218>)
 8000b4a:	6944      	ldr	r4, [r0, #20]
 8000b4c:	4019      	ands	r1, r3
 8000b4e:	4061      	eors	r1, r4
 8000b50:	0213      	lsls	r3, r2, #8
 8000b52:	400b      	ands	r3, r1
 8000b54:	4063      	eors	r3, r4
 8000b56:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	db65      	blt.n	8000c28 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	e091      	b.n	8000c84 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000b60:	211f      	movs	r1, #31
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	400b      	ands	r3, r1
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	230f      	movs	r3, #15
 8000b6a:	9802      	ldr	r0, [sp, #8]
 8000b6c:	4083      	lsls	r3, r0
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	9304      	str	r3, [sp, #16]
 8000b72:	9804      	ldr	r0, [sp, #16]
 8000b74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8000b76:	4003      	ands	r3, r0
 8000b78:	9305      	str	r3, [sp, #20]
 8000b7a:	0350      	lsls	r0, r2, #13
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d115      	bne.n	8000bae <HAL_ADC_ConfigChannel+0xc2>
 8000b82:	0e90      	lsrs	r0, r2, #26
 8000b84:	4008      	ands	r0, r1
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	4088      	lsls	r0, r1
 8000b8a:	9905      	ldr	r1, [sp, #20]
 8000b8c:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000b8e:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000b90:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000b92:	0889      	lsrs	r1, r1, #2
 8000b94:	69e8      	ldr	r0, [r5, #28]
 8000b96:	3101      	adds	r1, #1
 8000b98:	4281      	cmp	r1, r0
 8000b9a:	d8d3      	bhi.n	8000b44 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8000b9c:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000b9e:	6829      	ldr	r1, [r5, #0]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	0f1b      	lsrs	r3, r3, #28
 8000ba4:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000ba6:	40a3      	lsls	r3, r4
 8000ba8:	9c04      	ldr	r4, [sp, #16]
 8000baa:	4020      	ands	r0, r4
 8000bac:	e7c8      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000bae:	9803      	ldr	r0, [sp, #12]
 8000bb0:	4232      	tst	r2, r6
 8000bb2:	d1e8      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bb4:	0030      	movs	r0, r6
 8000bb6:	4222      	tst	r2, r4
 8000bb8:	d1e5      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bba:	4661      	mov	r1, ip
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	420a      	tst	r2, r1
 8000bc0:	d1e1      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	0711      	lsls	r1, r2, #28
 8000bc6:	d4de      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bc8:	4660      	mov	r0, ip
 8000bca:	06d1      	lsls	r1, r2, #27
 8000bcc:	d4db      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bce:	2005      	movs	r0, #5
 8000bd0:	0691      	lsls	r1, r2, #26
 8000bd2:	d4d8      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bd4:	3001      	adds	r0, #1
 8000bd6:	0651      	lsls	r1, r2, #25
 8000bd8:	d4d5      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bda:	3001      	adds	r0, #1
 8000bdc:	0611      	lsls	r1, r2, #24
 8000bde:	d4d2      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000be0:	3001      	adds	r0, #1
 8000be2:	05d1      	lsls	r1, r2, #23
 8000be4:	d4cf      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000be6:	3001      	adds	r0, #1
 8000be8:	0591      	lsls	r1, r2, #22
 8000bea:	d4cc      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bec:	3001      	adds	r0, #1
 8000bee:	0551      	lsls	r1, r2, #21
 8000bf0:	d4c9      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bf2:	3001      	adds	r0, #1
 8000bf4:	0511      	lsls	r1, r2, #20
 8000bf6:	d4c6      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bf8:	3001      	adds	r0, #1
 8000bfa:	04d1      	lsls	r1, r2, #19
 8000bfc:	d4c3      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000bfe:	3001      	adds	r0, #1
 8000c00:	0491      	lsls	r1, r2, #18
 8000c02:	d4c0      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c04:	3001      	adds	r0, #1
 8000c06:	0451      	lsls	r1, r2, #17
 8000c08:	d4bd      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c0a:	3001      	adds	r0, #1
 8000c0c:	0411      	lsls	r1, r2, #16
 8000c0e:	d4ba      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c10:	3001      	adds	r0, #1
 8000c12:	03d1      	lsls	r1, r2, #15
 8000c14:	d4b7      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c16:	3001      	adds	r0, #1
 8000c18:	0391      	lsls	r1, r2, #14
 8000c1a:	d4b4      	bmi.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c1c:	2080      	movs	r0, #128	; 0x80
 8000c1e:	02c0      	lsls	r0, r0, #11
 8000c20:	4010      	ands	r0, r2
 8000c22:	d0b0      	beq.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
 8000c24:	2012      	movs	r0, #18
 8000c26:	e7ae      	b.n	8000b86 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c28:	21e0      	movs	r1, #224	; 0xe0
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000c2c:	4837      	ldr	r0, [pc, #220]	; (8000d0c <HAL_ADC_ConfigChannel+0x220>)
 8000c2e:	681c      	ldr	r4, [r3, #0]
 8000c30:	0449      	lsls	r1, r1, #17
 8000c32:	4021      	ands	r1, r4
 8000c34:	4282      	cmp	r2, r0
 8000c36:	d117      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x17c>
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	0400      	lsls	r0, r0, #16
 8000c3c:	4204      	tst	r4, r0
 8000c3e:	d18d      	bne.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4c33      	ldr	r4, [pc, #204]	; (8000d10 <HAL_ADC_ConfigChannel+0x224>)
 8000c44:	4022      	ands	r2, r4
 8000c46:	430a      	orrs	r2, r1
 8000c48:	4302      	orrs	r2, r0
 8000c4a:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_ADC_ConfigChannel+0x228>)
 8000c4e:	4932      	ldr	r1, [pc, #200]	; (8000d18 <HAL_ADC_ConfigChannel+0x22c>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	f7ff fa7d 	bl	8000150 <__udivsi3>
 8000c56:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8000c58:	9b07      	ldr	r3, [sp, #28]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x174>
 8000c5e:	e77d      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8000c60:	9b07      	ldr	r3, [sp, #28]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	9307      	str	r3, [sp, #28]
 8000c66:	e7f7      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000c68:	482c      	ldr	r0, [pc, #176]	; (8000d1c <HAL_ADC_ConfigChannel+0x230>)
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	d110      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x1a4>
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000c72:	4004      	ands	r4, r0
 8000c74:	d000      	beq.n	8000c78 <HAL_ADC_ConfigChannel+0x18c>
 8000c76:	e771      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4e25      	ldr	r6, [pc, #148]	; (8000d10 <HAL_ADC_ConfigChannel+0x224>)
 8000c7c:	4032      	ands	r2, r6
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	4302      	orrs	r2, r0
 8000c82:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c84:	2300      	movs	r3, #0
 8000c86:	3554      	adds	r5, #84	; 0x54
 8000c88:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	b009      	add	sp, #36	; 0x24
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000c90:	4823      	ldr	r0, [pc, #140]	; (8000d20 <HAL_ADC_ConfigChannel+0x234>)
 8000c92:	4282      	cmp	r2, r0
 8000c94:	d000      	beq.n	8000c98 <HAL_ADC_ConfigChannel+0x1ac>
 8000c96:	e761      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
 8000c98:	2080      	movs	r0, #128	; 0x80
 8000c9a:	03c0      	lsls	r0, r0, #15
 8000c9c:	e7e9      	b.n	8000c72 <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000c9e:	4660      	mov	r0, ip
 8000ca0:	4383      	bics	r3, r0
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d105      	bne.n	8000cb2 <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000ca6:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ca8:	0351      	lsls	r1, r2, #13
 8000caa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000cac:	0b49      	lsrs	r1, r1, #13
 8000cae:	438b      	bics	r3, r1
 8000cb0:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	db00      	blt.n	8000cb8 <HAL_ADC_ConfigChannel+0x1cc>
 8000cb6:	e751      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cba:	4914      	ldr	r1, [pc, #80]	; (8000d0c <HAL_ADC_ConfigChannel+0x220>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	428a      	cmp	r2, r1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8000cc2:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cc4:	681c      	ldr	r4, [r3, #0]
 8000cc6:	0452      	lsls	r2, r2, #17
 8000cc8:	4911      	ldr	r1, [pc, #68]	; (8000d10 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000cca:	4002      	ands	r2, r0
 8000ccc:	4021      	ands	r1, r4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e743      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000cd4:	4911      	ldr	r1, [pc, #68]	; (8000d1c <HAL_ADC_ConfigChannel+0x230>)
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	d103      	bne.n	8000ce2 <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000cda:	22c0      	movs	r2, #192	; 0xc0
 8000cdc:	681c      	ldr	r4, [r3, #0]
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	e7f2      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000ce2:	490f      	ldr	r1, [pc, #60]	; (8000d20 <HAL_ADC_ConfigChannel+0x234>)
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d000      	beq.n	8000cea <HAL_ADC_ConfigChannel+0x1fe>
 8000ce8:	e738      	b.n	8000b5c <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8000cea:	22c0      	movs	r2, #192	; 0xc0
 8000cec:	0452      	lsls	r2, r2, #17
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	4002      	ands	r2, r0
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <HAL_ADC_ConfigChannel+0x224>)
 8000cf4:	4001      	ands	r1, r0
 8000cf6:	e7ea      	b.n	8000cce <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000cfc:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	65ab      	str	r3, [r5, #88]	; 0x58
 8000d02:	e7bf      	b.n	8000c84 <HAL_ADC_ConfigChannel+0x198>
 8000d04:	07ffff00 	.word	0x07ffff00
 8000d08:	40012708 	.word	0x40012708
 8000d0c:	b0001000 	.word	0xb0001000
 8000d10:	fe3fffff 	.word	0xfe3fffff
 8000d14:	20000200 	.word	0x20000200
 8000d18:	00030d40 	.word	0x00030d40
 8000d1c:	b8004000 	.word	0xb8004000
 8000d20:	b4002000 	.word	0xb4002000

08000d24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8000d24:	4770      	bx	lr

08000d26 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8000d26:	4770      	bx	lr

08000d28 <HAL_ADCEx_EndOfSamplingCallback>:
 8000d28:	4770      	bx	lr

08000d2a <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	db12      	blt.n	8000d5a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	0883      	lsrs	r3, r0, #2
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <HAL_NVIC_SetPriority+0x58>)
 8000d38:	2403      	movs	r4, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	189b      	adds	r3, r3, r2
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	4020      	ands	r0, r4
 8000d42:	40a0      	lsls	r0, r4
 8000d44:	0014      	movs	r4, r2
 8000d46:	25c0      	movs	r5, #192	; 0xc0
 8000d48:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4a:	4011      	ands	r1, r2
 8000d4c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4e:	00ad      	lsls	r5, r5, #2
 8000d50:	595e      	ldr	r6, [r3, r5]
 8000d52:	43a6      	bics	r6, r4
 8000d54:	4331      	orrs	r1, r6
 8000d56:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000d58:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5a:	2403      	movs	r4, #3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	b2c0      	uxtb	r0, r0
 8000d60:	4003      	ands	r3, r0
 8000d62:	4020      	ands	r0, r4
 8000d64:	40a0      	lsls	r0, r4
 8000d66:	34fc      	adds	r4, #252	; 0xfc
 8000d68:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6a:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	3b08      	subs	r3, #8
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <HAL_NVIC_SetPriority+0x5c>)
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	189b      	adds	r3, r3, r2
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	43aa      	bics	r2, r5
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	61d9      	str	r1, [r3, #28]
 8000d82:	e7e9      	b.n	8000d58 <HAL_NVIC_SetPriority+0x2c>
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	db05      	blt.n	8000d9c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d90:	231f      	movs	r3, #31
 8000d92:	4018      	ands	r0, r3
 8000d94:	3b1e      	subs	r3, #30
 8000d96:	4083      	lsls	r3, r0
 8000d98:	4a01      	ldr	r2, [pc, #4]	; (8000da0 <HAL_NVIC_EnableIRQ+0x14>)
 8000d9a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d9c:	4770      	bx	lr
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_SYSTICK_Config+0x28>)
 8000da6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d80d      	bhi.n	8000dca <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dae:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db6:	6a03      	ldr	r3, [r0, #32]
 8000db8:	0609      	lsls	r1, r1, #24
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000dca:	4770      	bx	lr
 8000dcc:	00ffffff 	.word	0x00ffffff
 8000dd0:	e000e010 	.word	0xe000e010
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dda:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8000ddc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8000dde:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000de0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d002      	beq.n	8000dec <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000de6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000de8:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000dea:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000dec:	251c      	movs	r5, #28
 8000dee:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000df0:	4e08      	ldr	r6, [pc, #32]	; (8000e14 <DMA_SetConfig+0x3c>)
 8000df2:	4025      	ands	r5, r4
 8000df4:	2401      	movs	r4, #1
 8000df6:	40ac      	lsls	r4, r5
 8000df8:	6877      	ldr	r7, [r6, #4]
 8000dfa:	433c      	orrs	r4, r7
 8000dfc:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dfe:	6804      	ldr	r4, [r0, #0]
 8000e00:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	6883      	ldr	r3, [r0, #8]
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	d102      	bne.n	8000e0e <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e08:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e0a:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000e0e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e10:	60e2      	str	r2, [r4, #12]
}
 8000e12:	e7fb      	b.n	8000e0c <DMA_SetConfig+0x34>
 8000e14:	40020000 	.word	0x40020000

08000e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e1c:	7800      	ldrb	r0, [r0, #0]
 8000e1e:	2114      	movs	r1, #20
 8000e20:	3808      	subs	r0, #8
 8000e22:	f7ff f995 	bl	8000150 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	189b      	adds	r3, r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8000e34:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000e36:	231c      	movs	r3, #28
 8000e38:	4018      	ands	r0, r3
 8000e3a:	3b1b      	subs	r3, #27
 8000e3c:	4083      	lsls	r3, r0
 8000e3e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	10008200 	.word	0x10008200
 8000e48:	40020880 	.word	0x40020880

08000e4c <HAL_DMA_Init>:
{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
  if (hdma == NULL)
 8000e52:	2c00      	cmp	r4, #0
 8000e54:	d048      	beq.n	8000ee8 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e56:	6825      	ldr	r5, [r4, #0]
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_DMA_Init+0xa8>)
 8000e5a:	2114      	movs	r1, #20
 8000e5c:	18e8      	adds	r0, r5, r3
 8000e5e:	f7ff f977 	bl	8000150 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e62:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e64:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e66:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e68:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e6a:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e70:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e72:	4013      	ands	r3, r2
 8000e74:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e76:	68a3      	ldr	r3, [r4, #8]
 8000e78:	682a      	ldr	r2, [r5, #0]
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e7e:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6961      	ldr	r1, [r4, #20]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	69a1      	ldr	r1, [r4, #24]
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	69e1      	ldr	r1, [r4, #28]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6a21      	ldr	r1, [r4, #32]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	4313      	orrs	r3, r2
 8000e94:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e96:	f7ff ffbf 	bl	8000e18 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	68a2      	ldr	r2, [r4, #8]
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d101      	bne.n	8000ea8 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ea8:	6862      	ldr	r2, [r4, #4]
 8000eaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000eac:	b2d3      	uxtb	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000eb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000eb4:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb6:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000eb8:	2a03      	cmp	r2, #3
 8000eba:	d816      	bhi.n	8000eea <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000ec0:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	3a02      	subs	r2, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	65a2      	str	r2, [r4, #88]	; 0x58
 8000ece:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ed0:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000ed2:	0089      	lsls	r1, r1, #2
 8000ed4:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000ed6:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ed8:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eda:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8000ede:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee0:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8000ee2:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000ee4:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8000ee6:	77e0      	strb	r0, [r4, #31]
}
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000eee:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ef0:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ef2:	e7f3      	b.n	8000edc <HAL_DMA_Init+0x90>
 8000ef4:	bffdfff8 	.word	0xbffdfff8
 8000ef8:	ffff800f 	.word	0xffff800f
 8000efc:	1000823f 	.word	0x1000823f
 8000f00:	40020940 	.word	0x40020940

08000f04 <HAL_DMA_Start_IT>:
{
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000f06:	1d46      	adds	r6, r0, #5
 8000f08:	7ff5      	ldrb	r5, [r6, #31]
{
 8000f0a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	2d01      	cmp	r5, #1
 8000f10:	d030      	beq.n	8000f74 <HAL_DMA_Start_IT+0x70>
 8000f12:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000f14:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8000f16:	77f5      	strb	r5, [r6, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000f18:	7ffd      	ldrb	r5, [r7, #31]
 8000f1a:	b2ed      	uxtb	r5, r5
 8000f1c:	2d01      	cmp	r5, #1
 8000f1e:	d127      	bne.n	8000f70 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f22:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000f24:	6827      	ldr	r7, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	43a8      	bics	r0, r5
 8000f2c:	6038      	str	r0, [r7, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f7ff ff52 	bl	8000dd8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8000f34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d01c      	beq.n	8000f76 <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3c:	220e      	movs	r2, #14
 8000f3e:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f44:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f46:	6811      	ldr	r1, [r2, #0]
 8000f48:	03c9      	lsls	r1, r1, #15
 8000f4a:	d504      	bpl.n	8000f56 <HAL_DMA_Start_IT+0x52>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	6810      	ldr	r0, [r2, #0]
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	4301      	orrs	r1, r0
 8000f54:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000f56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_DMA_Start_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	6810      	ldr	r0, [r2, #0]
 8000f60:	0049      	lsls	r1, r1, #1
 8000f62:	4301      	orrs	r1, r0
 8000f64:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f66:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000f68:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8000f70:	2300      	movs	r3, #0
 8000f72:	77f3      	strb	r3, [r6, #31]
}
 8000f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f76:	2104      	movs	r1, #4
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	220a      	movs	r2, #10
 8000f82:	e7dd      	b.n	8000f40 <HAL_DMA_Start_IT+0x3c>

08000f84 <HAL_DMA_Abort>:
{
 8000f84:	0003      	movs	r3, r0
 8000f86:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
  if (NULL == hdma)
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	1d98      	adds	r0, r3, #6
 8000f90:	7fc2      	ldrb	r2, [r0, #31]
 8000f92:	1d5c      	adds	r4, r3, #5
 8000f94:	2a02      	cmp	r2, #2
 8000f96:	d005      	beq.n	8000fa4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	2204      	movs	r2, #4
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8000f9c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000fa0:	77e3      	strb	r3, [r4, #31]
}
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	250e      	movs	r5, #14
 8000fa6:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fa8:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000faa:	680a      	ldr	r2, [r1, #0]
 8000fac:	43aa      	bics	r2, r5
 8000fae:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fb0:	6832      	ldr	r2, [r6, #0]
 8000fb2:	4d11      	ldr	r5, [pc, #68]	; (8000ff8 <HAL_DMA_Abort+0x74>)
 8000fb4:	402a      	ands	r2, r5
 8000fb6:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	680e      	ldr	r6, [r1, #0]
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	4396      	bics	r6, r2
 8000fc0:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000fc2:	211c      	movs	r1, #28
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc6:	4e0d      	ldr	r6, [pc, #52]	; (8000ffc <HAL_DMA_Abort+0x78>)
 8000fc8:	4011      	ands	r1, r2
 8000fca:	4662      	mov	r2, ip
 8000fcc:	408a      	lsls	r2, r1
 8000fce:	6877      	ldr	r7, [r6, #4]
 8000fd0:	433a      	orrs	r2, r7
 8000fd2:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fd8:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8000fda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d005      	beq.n	8000fec <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	4029      	ands	r1, r5
 8000fe4:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000fec:	2301      	movs	r3, #1
 8000fee:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8000ff4:	e7d5      	b.n	8000fa2 <HAL_DMA_Abort+0x1e>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	fffffeff 	.word	0xfffffeff
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_DMA_Abort_IT>:
{
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001002:	2301      	movs	r3, #1
 8001004:	1d41      	adds	r1, r0, #5
 8001006:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001008:	1d84      	adds	r4, r0, #6
 800100a:	7fe2      	ldrb	r2, [r4, #31]
 800100c:	2a02      	cmp	r2, #2
 800100e:	d003      	beq.n	8001018 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001010:	2204      	movs	r2, #4
 8001012:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 8001014:	0018      	movs	r0, r3
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001018:	260e      	movs	r6, #14
 800101a:	6802      	ldr	r2, [r0, #0]
 800101c:	6815      	ldr	r5, [r2, #0]
 800101e:	43b5      	bics	r5, r6
 8001020:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001022:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001024:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8001026:	439d      	bics	r5, r3
 8001028:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102a:	6832      	ldr	r2, [r6, #0]
 800102c:	4d11      	ldr	r5, [pc, #68]	; (8001074 <HAL_DMA_Abort_IT+0x74>)
 800102e:	402a      	ands	r2, r5
 8001030:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001032:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001034:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001036:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001038:	4e0f      	ldr	r6, [pc, #60]	; (8001078 <HAL_DMA_Abort_IT+0x78>)
 800103a:	402a      	ands	r2, r5
 800103c:	4093      	lsls	r3, r2
 800103e:	6877      	ldr	r7, [r6, #4]
 8001040:	433b      	orrs	r3, r7
 8001042:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001044:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001046:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001048:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800104a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001050:	4665      	mov	r5, ip
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	402a      	ands	r2, r5
 8001056:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001058:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800105a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800105c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	2301      	movs	r3, #1
 8001060:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001062:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8001064:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001066:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 800106a:	42a2      	cmp	r2, r4
 800106c:	d0d2      	beq.n	8001014 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800106e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001070:	0023      	movs	r3, r4
 8001072:	e7cf      	b.n	8001014 <HAL_DMA_Abort_IT+0x14>
 8001074:	fffffeff 	.word	0xfffffeff
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_DMA_IRQHandler>:
{
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800107e:	211c      	movs	r1, #28
 8001080:	2704      	movs	r7, #4
 8001082:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001086:	4021      	ands	r1, r4
 8001088:	003c      	movs	r4, r7
 800108a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800108c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800108e:	6802      	ldr	r2, [r0, #0]
 8001090:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001092:	4234      	tst	r4, r6
 8001094:	d00f      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x3a>
 8001096:	423d      	tst	r5, r7
 8001098:	d00d      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	6811      	ldr	r1, [r2, #0]
 800109c:	0689      	lsls	r1, r1, #26
 800109e:	d402      	bmi.n	80010a6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	43b9      	bics	r1, r7
 80010a4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4314      	orrs	r4, r2
 80010aa:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80010ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01b      	beq.n	80010ea <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80010b2:	4798      	blx	r3
  return;
 80010b4:	e019      	b.n	80010ea <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80010b6:	2702      	movs	r7, #2
 80010b8:	003c      	movs	r4, r7
 80010ba:	408c      	lsls	r4, r1
 80010bc:	4234      	tst	r4, r6
 80010be:	d015      	beq.n	80010ec <HAL_DMA_IRQHandler+0x70>
 80010c0:	423d      	tst	r5, r7
 80010c2:	d013      	beq.n	80010ec <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c4:	6811      	ldr	r1, [r2, #0]
 80010c6:	0689      	lsls	r1, r1, #26
 80010c8:	d406      	bmi.n	80010d8 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010ca:	250a      	movs	r5, #10
 80010cc:	6811      	ldr	r1, [r2, #0]
 80010ce:	43a9      	bics	r1, r5
 80010d0:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80010d2:	2101      	movs	r1, #1
 80010d4:	1d82      	adds	r2, r0, #6
 80010d6:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 80010dc:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80010de:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 80010e0:	1d43      	adds	r3, r0, #5
 80010e2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80010e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d1e3      	bne.n	80010b2 <HAL_DMA_IRQHandler+0x36>
}
 80010ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80010ec:	2408      	movs	r4, #8
 80010ee:	0027      	movs	r7, r4
 80010f0:	408f      	lsls	r7, r1
 80010f2:	423e      	tst	r6, r7
 80010f4:	d0f9      	beq.n	80010ea <HAL_DMA_IRQHandler+0x6e>
 80010f6:	4225      	tst	r5, r4
 80010f8:	d0f7      	beq.n	80010ea <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fa:	250e      	movs	r5, #14
 80010fc:	6814      	ldr	r4, [r2, #0]
 80010fe:	43ac      	bics	r4, r5
 8001100:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8001102:	2201      	movs	r2, #1
 8001104:	0015      	movs	r5, r2
 8001106:	408d      	lsls	r5, r1
 8001108:	0029      	movs	r1, r5
 800110a:	685c      	ldr	r4, [r3, #4]
 800110c:	4321      	orrs	r1, r4
 800110e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001110:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001112:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001114:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001116:	2200      	movs	r2, #0
 8001118:	1d43      	adds	r3, r0, #5
 800111a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800111c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800111e:	e7e2      	b.n	80010e6 <HAL_DMA_IRQHandler+0x6a>
 8001120:	40020000 	.word	0x40020000

08001124 <HAL_DMA_GetState>:
  return hdma->State;
 8001124:	3006      	adds	r0, #6
 8001126:	7fc0      	ldrb	r0, [r0, #31]
 8001128:	b2c0      	uxtb	r0, r0
}
 800112a:	4770      	bx	lr

0800112c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800112c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	680b      	ldr	r3, [r1, #0]
{
 8001134:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001138:	2300      	movs	r3, #0
{
 800113a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	9a02      	ldr	r2, [sp, #8]
 800113e:	40da      	lsrs	r2, r3
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8001142:	b005      	add	sp, #20
 8001144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001146:	2201      	movs	r2, #1
 8001148:	409a      	lsls	r2, r3
 800114a:	9203      	str	r2, [sp, #12]
 800114c:	9903      	ldr	r1, [sp, #12]
 800114e:	9a02      	ldr	r2, [sp, #8]
 8001150:	400a      	ands	r2, r1
 8001152:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001154:	d100      	bne.n	8001158 <HAL_GPIO_Init+0x28>
 8001156:	e085      	b.n	8001264 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	9a01      	ldr	r2, [sp, #4]
 800115a:	2110      	movs	r1, #16
 800115c:	6852      	ldr	r2, [r2, #4]
 800115e:	0016      	movs	r6, r2
 8001160:	438e      	bics	r6, r1
 8001162:	2e02      	cmp	r6, #2
 8001164:	d10e      	bne.n	8001184 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001166:	2507      	movs	r5, #7
 8001168:	401d      	ands	r5, r3
 800116a:	00ad      	lsls	r5, r5, #2
 800116c:	3901      	subs	r1, #1
 800116e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001170:	08dc      	lsrs	r4, r3, #3
 8001172:	00a4      	lsls	r4, r4, #2
 8001174:	1904      	adds	r4, r0, r4
 8001176:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001178:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117a:	9901      	ldr	r1, [sp, #4]
 800117c:	6909      	ldr	r1, [r1, #16]
 800117e:	40a9      	lsls	r1, r5
 8001180:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001182:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001184:	2403      	movs	r4, #3
 8001186:	005f      	lsls	r7, r3, #1
 8001188:	40bc      	lsls	r4, r7
 800118a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800118c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001190:	4025      	ands	r5, r4
 8001192:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001194:	2503      	movs	r5, #3
 8001196:	4015      	ands	r5, r2
 8001198:	40bd      	lsls	r5, r7
 800119a:	4661      	mov	r1, ip
 800119c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800119e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	2e01      	cmp	r6, #1
 80011a2:	d80f      	bhi.n	80011c4 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80011a6:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ac:	40bd      	lsls	r5, r7
 80011ae:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80011b0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80011b2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b4:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011b6:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b8:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ba:	2101      	movs	r1, #1
 80011bc:	400d      	ands	r5, r1
 80011be:	409d      	lsls	r5, r3
 80011c0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80011c2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80011c4:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c6:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011c8:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ca:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011cc:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ce:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d0:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80011d4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	420a      	tst	r2, r1
 80011d8:	d044      	beq.n	8001264 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011da:	2603      	movs	r6, #3
 80011dc:	240f      	movs	r4, #15
 80011de:	4922      	ldr	r1, [pc, #136]	; (8001268 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 80011e0:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011e2:	401e      	ands	r6, r3
 80011e4:	00ad      	lsls	r5, r5, #2
 80011e6:	00f6      	lsls	r6, r6, #3
 80011e8:	186d      	adds	r5, r5, r1
 80011ea:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011ec:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80011ee:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011f0:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011f2:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011f4:	2400      	movs	r4, #0
 80011f6:	4288      	cmp	r0, r1
 80011f8:	d00c      	beq.n	8001214 <HAL_GPIO_Init+0xe4>
 80011fa:	491c      	ldr	r1, [pc, #112]	; (800126c <HAL_GPIO_Init+0x13c>)
 80011fc:	3401      	adds	r4, #1
 80011fe:	4288      	cmp	r0, r1
 8001200:	d008      	beq.n	8001214 <HAL_GPIO_Init+0xe4>
 8001202:	491b      	ldr	r1, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x140>)
 8001204:	3401      	adds	r4, #1
 8001206:	4288      	cmp	r0, r1
 8001208:	d004      	beq.n	8001214 <HAL_GPIO_Init+0xe4>
 800120a:	491a      	ldr	r1, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x144>)
 800120c:	3403      	adds	r4, #3
 800120e:	4288      	cmp	r0, r1
 8001210:	d100      	bne.n	8001214 <HAL_GPIO_Init+0xe4>
 8001212:	3c02      	subs	r4, #2
 8001214:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001216:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001218:	433c      	orrs	r4, r7
          temp |= iocurrent;
 800121a:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 800121c:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 800121e:	4c16      	ldr	r4, [pc, #88]	; (8001278 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8001220:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8001222:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001224:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	03d1      	lsls	r1, r2, #15
 8001228:	d401      	bmi.n	800122e <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 800122a:	003e      	movs	r6, r7
 800122c:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 800122e:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001230:	4e12      	ldr	r6, [pc, #72]	; (800127c <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8001232:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8001234:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8001236:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	0391      	lsls	r1, r2, #14
 800123a:	d401      	bmi.n	8001240 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 800123c:	402c      	ands	r4, r5
 800123e:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8001240:	4c09      	ldr	r4, [pc, #36]	; (8001268 <HAL_GPIO_Init+0x138>)
 8001242:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001244:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001246:	9e00      	ldr	r6, [sp, #0]
 8001248:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124a:	02d1      	lsls	r1, r2, #11
 800124c:	d401      	bmi.n	8001252 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 800124e:	003e      	movs	r6, r7
 8001250:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8001252:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8001254:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001256:	9f00      	ldr	r7, [sp, #0]
 8001258:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125a:	0292      	lsls	r2, r2, #10
 800125c:	d401      	bmi.n	8001262 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800125e:	402e      	ands	r6, r5
 8001260:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8001262:	6067      	str	r7, [r4, #4]
    position++;
 8001264:	3301      	adds	r3, #1
 8001266:	e769      	b.n	800113c <HAL_GPIO_Init+0xc>
 8001268:	40021800 	.word	0x40021800
 800126c:	50000400 	.word	0x50000400
 8001270:	50000800 	.word	0x50000800
 8001274:	50000c00 	.word	0x50000c00
 8001278:	40021804 	.word	0x40021804
 800127c:	40021808 	.word	0x40021808

08001280 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001280:	6900      	ldr	r0, [r0, #16]
 8001282:	4008      	ands	r0, r1
 8001284:	1e41      	subs	r1, r0, #1
 8001286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001288:	b2c0      	uxtb	r0, r0
}
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	2a00      	cmp	r2, #0
 800128e:	d001      	beq.n	8001294 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001290:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001292:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001294:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001296:	e7fc      	b.n	8001292 <HAL_GPIO_WritePin+0x6>

08001298 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001298:	6803      	ldr	r3, [r0, #0]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	0792      	lsls	r2, r2, #30
 800129e:	d501      	bpl.n	80012a4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012a4:	2201      	movs	r2, #1
 80012a6:	6999      	ldr	r1, [r3, #24]
 80012a8:	4211      	tst	r1, r2
 80012aa:	d102      	bne.n	80012b2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012ac:	6999      	ldr	r1, [r3, #24]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	619a      	str	r2, [r3, #24]
  }
}
 80012b2:	4770      	bx	lr

080012b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80012b8:	0589      	lsls	r1, r1, #22
 80012ba:	4333      	orrs	r3, r6
 80012bc:	0d89      	lsrs	r1, r1, #22
 80012be:	4319      	orrs	r1, r3
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	6804      	ldr	r4, [r0, #0]
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	0d70      	lsrs	r0, r6, #21
 80012c8:	4018      	ands	r0, r3
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <I2C_TransferConfig+0x28>)
 80012cc:	6865      	ldr	r5, [r4, #4]
 80012ce:	0412      	lsls	r2, r2, #16
 80012d0:	4318      	orrs	r0, r3
 80012d2:	4385      	bics	r5, r0
 80012d4:	4311      	orrs	r1, r2
 80012d6:	4329      	orrs	r1, r5
 80012d8:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	03ff63ff 	.word	0x03ff63ff

080012e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80012e0:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80012e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012e4:	4c16      	ldr	r4, [pc, #88]	; (8001340 <I2C_Enable_IRQ+0x60>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	42a3      	cmp	r3, r4
 80012ea:	d002      	beq.n	80012f2 <I2C_Enable_IRQ+0x12>
 80012ec:	4c15      	ldr	r4, [pc, #84]	; (8001344 <I2C_Enable_IRQ+0x64>)
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	d114      	bne.n	800131c <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 80012f2:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80012f4:	4211      	tst	r1, r2
 80012f6:	d000      	beq.n	80012fa <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80012f8:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80012fa:	2211      	movs	r2, #17
 80012fc:	400a      	ands	r2, r1
 80012fe:	2a11      	cmp	r2, #17
 8001300:	d101      	bne.n	8001306 <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001302:	327f      	adds	r2, #127	; 0x7f
 8001304:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001306:	2212      	movs	r2, #18
 8001308:	4011      	ands	r1, r2
 800130a:	4291      	cmp	r1, r2
 800130c:	d101      	bne.n	8001312 <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800130e:	324e      	adds	r2, #78	; 0x4e
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8001310:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001312:	6802      	ldr	r2, [r0, #0]
 8001314:	6811      	ldr	r1, [r2, #0]
 8001316:	430b      	orrs	r3, r1
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 800131c:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800131e:	4211      	tst	r1, r2
 8001320:	d000      	beq.n	8001324 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001322:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001324:	07ca      	lsls	r2, r1, #31
 8001326:	d501      	bpl.n	800132c <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8001328:	22f2      	movs	r2, #242	; 0xf2
 800132a:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800132c:	078a      	lsls	r2, r1, #30
 800132e:	d501      	bpl.n	8001334 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8001330:	22f4      	movs	r2, #244	; 0xf4
 8001332:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001334:	2212      	movs	r2, #18
 8001336:	4011      	ands	r1, r2
 8001338:	4291      	cmp	r1, r2
 800133a:	d1ea      	bne.n	8001312 <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 800133c:	320e      	adds	r2, #14
 800133e:	e7e7      	b.n	8001310 <I2C_Enable_IRQ+0x30>
 8001340:	08001d6d 	.word	0x08001d6d
 8001344:	08001c8d 	.word	0x08001c8d

08001348 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001348:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800134a:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800134c:	07ca      	lsls	r2, r1, #31
 800134e:	d508      	bpl.n	8001362 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001350:	0003      	movs	r3, r0
 8001352:	3341      	adds	r3, #65	; 0x41
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	2328      	movs	r3, #40	; 0x28
 8001358:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800135a:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800135c:	2a28      	cmp	r2, #40	; 0x28
 800135e:	d000      	beq.n	8001362 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001360:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001362:	078a      	lsls	r2, r1, #30
 8001364:	d508      	bpl.n	8001378 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001366:	0002      	movs	r2, r0
 8001368:	2428      	movs	r4, #40	; 0x28
 800136a:	3241      	adds	r2, #65	; 0x41
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	4022      	ands	r2, r4
 8001370:	42a2      	cmp	r2, r4
 8001372:	d116      	bne.n	80013a2 <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001374:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001376:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001378:	074a      	lsls	r2, r1, #29
 800137a:	d501      	bpl.n	8001380 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800137c:	22b8      	movs	r2, #184	; 0xb8
 800137e:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001380:	2211      	movs	r2, #17
 8001382:	400a      	ands	r2, r1
 8001384:	2a11      	cmp	r2, #17
 8001386:	d101      	bne.n	800138c <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001388:	327f      	adds	r2, #127	; 0x7f
 800138a:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800138c:	2212      	movs	r2, #18
 800138e:	4011      	ands	r1, r2
 8001390:	4291      	cmp	r1, r2
 8001392:	d101      	bne.n	8001398 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001394:	324e      	adds	r2, #78	; 0x4e
 8001396:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001398:	6801      	ldr	r1, [r0, #0]
 800139a:	680a      	ldr	r2, [r1, #0]
 800139c:	439a      	bics	r2, r3
 800139e:	600a      	str	r2, [r1, #0]
}
 80013a0:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80013a2:	22f4      	movs	r2, #244	; 0xf4
 80013a4:	e7e7      	b.n	8001376 <I2C_Disable_IRQ+0x2e>

080013a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80013a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a8:	0004      	movs	r4, r0
 80013aa:	000e      	movs	r6, r1
 80013ac:	0017      	movs	r7, r2
 80013ae:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	6993      	ldr	r3, [r2, #24]
 80013b4:	4033      	ands	r3, r6
 80013b6:	1b9b      	subs	r3, r3, r6
 80013b8:	4259      	negs	r1, r3
 80013ba:	414b      	adcs	r3, r1
 80013bc:	42bb      	cmp	r3, r7
 80013be:	d001      	beq.n	80013c4 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80013c0:	2000      	movs	r0, #0
 80013c2:	e017      	b.n	80013f4 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80013c4:	1c6b      	adds	r3, r5, #1
 80013c6:	d0f4      	beq.n	80013b2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c8:	f7ff f98a 	bl	80006e0 <HAL_GetTick>
 80013cc:	9b06      	ldr	r3, [sp, #24]
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	4285      	cmp	r5, r0
 80013d2:	d301      	bcc.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x32>
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	d1eb      	bne.n	80013b0 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d8:	2220      	movs	r2, #32
 80013da:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80013dc:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013de:	4313      	orrs	r3, r2
 80013e0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013e2:	0023      	movs	r3, r4
 80013e4:	3341      	adds	r3, #65	; 0x41
 80013e6:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e8:	0022      	movs	r2, r4
 80013ea:	2300      	movs	r3, #0
 80013ec:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80013ee:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80013f2:	7023      	strb	r3, [r4, #0]
}
 80013f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013f8 <I2C_IsAcknowledgeFailed>:
{
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013fa:	6803      	ldr	r3, [r0, #0]
{
 80013fc:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013fe:	6998      	ldr	r0, [r3, #24]
 8001400:	2310      	movs	r3, #16
{
 8001402:	000e      	movs	r6, r1
 8001404:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001406:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001408:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800140a:	2800      	cmp	r0, #0
 800140c:	d118      	bne.n	8001440 <I2C_IsAcknowledgeFailed+0x48>
}
 800140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001410:	1c72      	adds	r2, r6, #1
 8001412:	d016      	beq.n	8001442 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001414:	f7ff f964 	bl	80006e0 <HAL_GetTick>
 8001418:	1bc0      	subs	r0, r0, r7
 800141a:	4286      	cmp	r6, r0
 800141c:	d301      	bcc.n	8001422 <I2C_IsAcknowledgeFailed+0x2a>
 800141e:	2e00      	cmp	r6, #0
 8001420:	d10e      	bne.n	8001440 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001422:	2220      	movs	r2, #32
 8001424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001426:	4313      	orrs	r3, r2
 8001428:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800142a:	0023      	movs	r3, r4
 800142c:	3341      	adds	r3, #65	; 0x41
 800142e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	0022      	movs	r2, r4
 8001432:	2300      	movs	r3, #0
 8001434:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001436:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001438:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800143c:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 800143e:	e7e6      	b.n	800140e <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	422a      	tst	r2, r5
 8001446:	d0e3      	beq.n	8001410 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001448:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800144a:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800144c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800144e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001450:	f7ff ff22 	bl	8001298 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001454:	6822      	ldr	r2, [r4, #0]
 8001456:	4906      	ldr	r1, [pc, #24]	; (8001470 <I2C_IsAcknowledgeFailed+0x78>)
 8001458:	6853      	ldr	r3, [r2, #4]
 800145a:	400b      	ands	r3, r1
 800145c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800145e:	2304      	movs	r3, #4
 8001460:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001462:	4313      	orrs	r3, r2
 8001464:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001466:	0023      	movs	r3, r4
 8001468:	3341      	adds	r3, #65	; 0x41
 800146a:	701d      	strb	r5, [r3, #0]
 800146c:	e7e0      	b.n	8001430 <I2C_IsAcknowledgeFailed+0x38>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	fe00e800 	.word	0xfe00e800

08001474 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	0004      	movs	r4, r0
 8001478:	000d      	movs	r5, r1
 800147a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800147c:	2702      	movs	r7, #2
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	423b      	tst	r3, r7
 8001484:	d001      	beq.n	800148a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
}
 8001488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800148a:	0032      	movs	r2, r6
 800148c:	0029      	movs	r1, r5
 800148e:	0020      	movs	r0, r4
 8001490:	f7ff ffb2 	bl	80013f8 <I2C_IsAcknowledgeFailed>
 8001494:	2800      	cmp	r0, #0
 8001496:	d115      	bne.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001498:	1c6b      	adds	r3, r5, #1
 800149a:	d0f0      	beq.n	800147e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149c:	f7ff f920 	bl	80006e0 <HAL_GetTick>
 80014a0:	1b80      	subs	r0, r0, r6
 80014a2:	4285      	cmp	r5, r0
 80014a4:	d301      	bcc.n	80014aa <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80014a6:	2d00      	cmp	r5, #0
 80014a8:	d1e9      	bne.n	800147e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014aa:	2220      	movs	r2, #32
 80014ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ae:	4313      	orrs	r3, r2
 80014b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	0023      	movs	r3, r4
 80014b4:	3341      	adds	r3, #65	; 0x41
 80014b6:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b8:	0022      	movs	r2, r4
 80014ba:	2300      	movs	r3, #0
 80014bc:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80014be:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80014c2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	e7df      	b.n	8001488 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080014c8 <I2C_RequestMemoryWrite>:
{
 80014c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014ca:	0014      	movs	r4, r2
 80014cc:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <I2C_RequestMemoryWrite+0x60>)
{
 80014d2:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	045b      	lsls	r3, r3, #17
 80014da:	f7ff feeb 	bl	80012b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014de:	9a07      	ldr	r2, [sp, #28]
 80014e0:	9906      	ldr	r1, [sp, #24]
 80014e2:	0028      	movs	r0, r5
 80014e4:	f7ff ffc6 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d001      	beq.n	80014f0 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
}
 80014ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80014f0:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014f2:	2e01      	cmp	r6, #1
 80014f4:	d10d      	bne.n	8001512 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f6:	b2e4      	uxtb	r4, r4
 80014f8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014fa:	9b07      	ldr	r3, [sp, #28]
 80014fc:	2200      	movs	r2, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	9b06      	ldr	r3, [sp, #24]
 8001504:	0028      	movs	r0, r5
 8001506:	f7ff ff4e 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 800150a:	1e43      	subs	r3, r0, #1
 800150c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800150e:	b2c0      	uxtb	r0, r0
 8001510:	e7ed      	b.n	80014ee <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001512:	0a22      	lsrs	r2, r4, #8
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001516:	9906      	ldr	r1, [sp, #24]
 8001518:	9a07      	ldr	r2, [sp, #28]
 800151a:	0028      	movs	r0, r5
 800151c:	f7ff ffaa 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001520:	2800      	cmp	r0, #0
 8001522:	d1e3      	bne.n	80014ec <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	e7e6      	b.n	80014f6 <I2C_RequestMemoryWrite+0x2e>
 8001528:	80002000 	.word	0x80002000

0800152c <HAL_I2C_Init>:
{
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001532:	2c00      	cmp	r4, #0
 8001534:	d03f      	beq.n	80015b6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	0025      	movs	r5, r4
 8001538:	3541      	adds	r5, #65	; 0x41
 800153a:	782b      	ldrb	r3, [r5, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	0022      	movs	r2, r4
 8001544:	3240      	adds	r2, #64	; 0x40
 8001546:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001548:	0020      	movs	r0, r4
 800154a:	f003 f855 	bl	80045f8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800154e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001550:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001552:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001554:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001556:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68a6      	ldr	r6, [r4, #8]
 800155c:	438a      	bics	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001560:	6861      	ldr	r1, [r4, #4]
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <HAL_I2C_Init+0xa0>)
 8001564:	400a      	ands	r2, r1
 8001566:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_I2C_Init+0xa4>)
 800156c:	4011      	ands	r1, r2
 800156e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001570:	2801      	cmp	r0, #1
 8001572:	d121      	bne.n	80015b8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0209      	lsls	r1, r1, #8
 8001578:	4331      	orrs	r1, r6
 800157a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800157c:	6858      	ldr	r0, [r3, #4]
 800157e:	4915      	ldr	r1, [pc, #84]	; (80015d4 <HAL_I2C_Init+0xa8>)
 8001580:	4301      	orrs	r1, r0
 8001582:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001584:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001586:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001588:	400a      	ands	r2, r1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800158c:	6961      	ldr	r1, [r4, #20]
 800158e:	6922      	ldr	r2, [r4, #16]
 8001590:	430a      	orrs	r2, r1
 8001592:	69a1      	ldr	r1, [r4, #24]
 8001594:	0209      	lsls	r1, r1, #8
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800159a:	6a21      	ldr	r1, [r4, #32]
 800159c:	69e2      	ldr	r2, [r4, #28]
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80015a2:	2201      	movs	r2, #1
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b2:	3442      	adds	r4, #66	; 0x42
 80015b4:	7020      	strb	r0, [r4, #0]
}
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b8:	2184      	movs	r1, #132	; 0x84
 80015ba:	0209      	lsls	r1, r1, #8
 80015bc:	4331      	orrs	r1, r6
 80015be:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d1db      	bne.n	800157c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0109      	lsls	r1, r1, #4
 80015c8:	6059      	str	r1, [r3, #4]
 80015ca:	e7d7      	b.n	800157c <HAL_I2C_Init+0x50>
 80015cc:	f0ffffff 	.word	0xf0ffffff
 80015d0:	ffff7fff 	.word	0xffff7fff
 80015d4:	02008000 	.word	0x02008000

080015d8 <HAL_I2C_Mem_Write_DMA>:
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015da:	0007      	movs	r7, r0
{
 80015dc:	b089      	sub	sp, #36	; 0x24
 80015de:	9307      	str	r3, [sp, #28]
 80015e0:	ab0e      	add	r3, sp, #56	; 0x38
 80015e2:	9206      	str	r2, [sp, #24]
 80015e4:	cb04      	ldmia	r3!, {r2}
 80015e6:	9105      	str	r1, [sp, #20]
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	9202      	str	r2, [sp, #8]
 80015ec:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ee:	3741      	adds	r7, #65	; 0x41
 80015f0:	783b      	ldrb	r3, [r7, #0]
{
 80015f2:	0004      	movs	r4, r0
    return HAL_BUSY;
 80015f4:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d171      	bne.n	80016de <HAL_I2C_Mem_Write_DMA+0x106>
    if ((pData == NULL) || (Size == 0U))
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d002      	beq.n	8001604 <HAL_I2C_Mem_Write_DMA+0x2c>
 80015fe:	9b04      	ldr	r3, [sp, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <HAL_I2C_Mem_Write_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800160a:	2501      	movs	r5, #1
 800160c:	e067      	b.n	80016de <HAL_I2C_Mem_Write_DMA+0x106>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800160e:	6803      	ldr	r3, [r0, #0]
 8001610:	699e      	ldr	r6, [r3, #24]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	401e      	ands	r6, r3
 8001618:	d161      	bne.n	80016de <HAL_I2C_Mem_Write_DMA+0x106>
    __HAL_LOCK(hi2c);
 800161a:	0003      	movs	r3, r0
 800161c:	3340      	adds	r3, #64	; 0x40
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	2a01      	cmp	r2, #1
 8001622:	d05c      	beq.n	80016de <HAL_I2C_Mem_Write_DMA+0x106>
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001628:	f7ff f85a 	bl	80006e0 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800162c:	2321      	movs	r3, #33	; 0x21
 800162e:	703b      	strb	r3, [r7, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001630:	0023      	movs	r3, r4
 8001632:	3342      	adds	r3, #66	; 0x42
 8001634:	9303      	str	r3, [sp, #12]
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	9a03      	ldr	r2, [sp, #12]
 800163a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 800163c:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800163e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8001640:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001642:	466b      	mov	r3, sp
 8001644:	8a1b      	ldrh	r3, [r3, #16]
 8001646:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_I2C_Mem_Write_DMA+0x13c>)
 800164a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_I2C_Mem_Write_DMA+0x140>)
 800164e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d915      	bls.n	8001682 <HAL_I2C_Mem_Write_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 800165e:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001660:	2319      	movs	r3, #25
 8001662:	9001      	str	r0, [sp, #4]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	9a06      	ldr	r2, [sp, #24]
 8001668:	9b07      	ldr	r3, [sp, #28]
 800166a:	9905      	ldr	r1, [sp, #20]
 800166c:	0020      	movs	r0, r4
 800166e:	f7ff ff2b 	bl	80014c8 <I2C_RequestMemoryWrite>
 8001672:	0027      	movs	r7, r4
 8001674:	0006      	movs	r6, r0
 8001676:	3740      	adds	r7, #64	; 0x40
 8001678:	2800      	cmp	r0, #0
 800167a:	d007      	beq.n	800168c <HAL_I2C_Mem_Write_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 800167c:	2300      	movs	r3, #0
 800167e:	703b      	strb	r3, [r7, #0]
 8001680:	e7c3      	b.n	800160a <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001682:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001684:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	e7e8      	b.n	800165e <HAL_I2C_Mem_Write_DMA+0x86>
    if (hi2c->hdmatx != NULL)
 800168c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168e:	2800      	cmp	r0, #0
 8001690:	d028      	beq.n	80016e4 <HAL_I2C_Mem_Write_DMA+0x10c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_I2C_Mem_Write_DMA+0x144>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001694:	6822      	ldr	r2, [r4, #0]
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001696:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_I2C_Mem_Write_DMA+0x148>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800169a:	6306      	str	r6, [r0, #48]	; 0x30
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800169c:	6343      	str	r3, [r0, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = NULL;
 800169e:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80016a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016a2:	3228      	adds	r2, #40	; 0x28
 80016a4:	9902      	ldr	r1, [sp, #8]
 80016a6:	f7ff fc2d 	bl	8000f04 <HAL_DMA_Start_IT>
 80016aa:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 80016ac:	d126      	bne.n	80016fc <HAL_I2C_Mem_Write_DMA+0x124>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80016ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80016b0:	9000      	str	r0, [sp, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	9b04      	ldr	r3, [sp, #16]
 80016b6:	9905      	ldr	r1, [sp, #20]
 80016b8:	0020      	movs	r0, r4
 80016ba:	f7ff fdfb 	bl	80012b4 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80016be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80016c2:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80016ca:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 80016cc:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80016ce:	f7ff fe07 	bl	80012e0 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	01db      	lsls	r3, r3, #7
 80016d8:	6811      	ldr	r1, [r2, #0]
 80016da:	430b      	orrs	r3, r1
 80016dc:	6013      	str	r3, [r2, #0]
}
 80016de:	0028      	movs	r0, r5
 80016e0:	b009      	add	sp, #36	; 0x24
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 80016e4:	0023      	movs	r3, r4
 80016e6:	2220      	movs	r2, #32
 80016e8:	3341      	adds	r3, #65	; 0x41
 80016ea:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80016ec:	9b03      	ldr	r3, [sp, #12]
 80016ee:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80016f8:	7038      	strb	r0, [r7, #0]
 80016fa:	e786      	b.n	800160a <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 80016fc:	0023      	movs	r3, r4
 80016fe:	2220      	movs	r2, #32
 8001700:	3341      	adds	r3, #65	; 0x41
 8001702:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001704:	9b03      	ldr	r3, [sp, #12]
 8001706:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001708:	2310      	movs	r3, #16
 800170a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800170c:	4313      	orrs	r3, r2
 800170e:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001710:	703e      	strb	r6, [r7, #0]
 8001712:	e77a      	b.n	800160a <HAL_I2C_Mem_Write_DMA+0x32>
 8001714:	ffff0000 	.word	0xffff0000
 8001718:	08001d6d 	.word	0x08001d6d
 800171c:	08001e95 	.word	0x08001e95
 8001720:	08001e7d 	.word	0x08001e7d

08001724 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001724:	6803      	ldr	r3, [r0, #0]
{
 8001726:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001728:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800172a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800172c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800172e:	2b00      	cmp	r3, #0
 8001730:	d000      	beq.n	8001734 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001732:	4798      	blx	r3
}
 8001734:	bd10      	pop	{r4, pc}

08001736 <HAL_I2C_MasterTxCpltCallback>:
 8001736:	4770      	bx	lr

08001738 <HAL_I2C_MasterRxCpltCallback>:
 8001738:	4770      	bx	lr

0800173a <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	0003      	movs	r3, r0
{
 800173c:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173e:	2500      	movs	r5, #0
 8001740:	2220      	movs	r2, #32
 8001742:	0006      	movs	r6, r0
 8001744:	3342      	adds	r3, #66	; 0x42
 8001746:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001748:	3b01      	subs	r3, #1
 800174a:	7819      	ldrb	r1, [r3, #0]
{
 800174c:	0004      	movs	r4, r0
 800174e:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8001750:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001752:	2921      	cmp	r1, #33	; 0x21
 8001754:	d10a      	bne.n	800176c <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001756:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8001758:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800175a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800175c:	3920      	subs	r1, #32
 800175e:	f7ff fdf3 	bl	8001348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001762:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001764:	0020      	movs	r0, r4
 8001766:	f7ff ffe6 	bl	8001736 <HAL_I2C_MasterTxCpltCallback>
}
 800176a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800176c:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 800176e:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001770:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001772:	2102      	movs	r1, #2
 8001774:	f7ff fde8 	bl	8001348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001778:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800177a:	0020      	movs	r0, r4
 800177c:	f7ff ffdc 	bl	8001738 <HAL_I2C_MasterRxCpltCallback>
}
 8001780:	e7f3      	b.n	800176a <I2C_ITMasterSeqCplt+0x30>

08001782 <HAL_I2C_SlaveTxCpltCallback>:
 8001782:	4770      	bx	lr

08001784 <HAL_I2C_SlaveRxCpltCallback>:
 8001784:	4770      	bx	lr

08001786 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	0003      	movs	r3, r0
{
 8001788:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800178a:	2500      	movs	r5, #0
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001790:	3b01      	subs	r3, #1
 8001792:	781a      	ldrb	r2, [r3, #0]
{
 8001794:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001796:	2a29      	cmp	r2, #41	; 0x29
 8001798:	d10d      	bne.n	80017b6 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800179a:	3a01      	subs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800179e:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017a0:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017a2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017a4:	f7ff fdd0 	bl	8001348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80017a8:	0023      	movs	r3, r4
 80017aa:	3340      	adds	r3, #64	; 0x40
 80017ac:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017ae:	0020      	movs	r0, r4
 80017b0:	f7ff ffe7 	bl	8001782 <HAL_I2C_SlaveTxCpltCallback>
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	2a2a      	cmp	r2, #42	; 0x2a
 80017ba:	d1fb      	bne.n	80017b4 <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017bc:	3a02      	subs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017c0:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80017c2:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017c4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80017c6:	f7ff fdbf 	bl	8001348 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80017ca:	0023      	movs	r3, r4
 80017cc:	3340      	adds	r3, #64	; 0x40
 80017ce:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017d0:	0020      	movs	r0, r4
 80017d2:	f7ff ffd7 	bl	8001784 <HAL_I2C_SlaveRxCpltCallback>
}
 80017d6:	e7ed      	b.n	80017b4 <I2C_ITSlaveSeqCplt+0x2e>

080017d8 <HAL_I2C_AddrCallback>:
}
 80017d8:	4770      	bx	lr

080017da <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017da:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80017dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017de:	3341      	adds	r3, #65	; 0x41
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80017e4:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017e6:	401a      	ands	r2, r3
 80017e8:	6803      	ldr	r3, [r0, #0]
 80017ea:	2a28      	cmp	r2, #40	; 0x28
 80017ec:	d137      	bne.n	800185e <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80017ee:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80017f0:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80017f2:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80017f4:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80017f6:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80017f8:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80017fa:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017fc:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80017fe:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8001800:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001802:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001804:	2902      	cmp	r1, #2
 8001806:	d121      	bne.n	800184c <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001808:	0592      	lsls	r2, r2, #22
 800180a:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800180c:	09d1      	lsrs	r1, r2, #7
 800180e:	404e      	eors	r6, r1
 8001810:	2106      	movs	r1, #6
 8001812:	400e      	ands	r6, r1
 8001814:	d110      	bne.n	8001838 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 8001816:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001818:	3101      	adds	r1, #1
 800181a:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800181c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800181e:	2902      	cmp	r1, #2
 8001820:	d109      	bne.n	8001836 <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001822:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 8001824:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001826:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001828:	0003      	movs	r3, r0
 800182a:	3340      	adds	r3, #64	; 0x40
 800182c:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800182e:	0029      	movs	r1, r5
 8001830:	0020      	movs	r0, r4
 8001832:	f7ff ffd1 	bl	80017d8 <HAL_I2C_AddrCallback>
}
 8001836:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001838:	2104      	movs	r1, #4
 800183a:	f7ff fd85 	bl	8001348 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800183e:	0023      	movs	r3, r4
 8001840:	2200      	movs	r2, #0
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001846:	9a01      	ldr	r2, [sp, #4]
 8001848:	403a      	ands	r2, r7
 800184a:	e7f0      	b.n	800182e <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800184c:	2104      	movs	r1, #4
 800184e:	f7ff fd7b 	bl	8001348 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001852:	0023      	movs	r3, r4
 8001854:	2200      	movs	r2, #0
 8001856:	3340      	adds	r3, #64	; 0x40
 8001858:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800185a:	0032      	movs	r2, r6
 800185c:	e7e7      	b.n	800182e <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800185e:	2208      	movs	r2, #8
 8001860:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001862:	2300      	movs	r3, #0
 8001864:	3440      	adds	r4, #64	; 0x40
 8001866:	7023      	strb	r3, [r4, #0]
 8001868:	e7e5      	b.n	8001836 <I2C_ITAddrCplt.isra.8+0x5c>

0800186a <HAL_I2C_ListenCpltCallback>:
 800186a:	4770      	bx	lr

0800186c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <I2C_ITListenCplt+0x64>)
{
 800186e:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001870:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001872:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001874:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8001876:	6303      	str	r3, [r0, #48]	; 0x30
{
 8001878:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800187a:	2020      	movs	r0, #32
 800187c:	3241      	adds	r2, #65	; 0x41
 800187e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001880:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001882:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8001884:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001886:	4211      	tst	r1, r2
 8001888:	d012      	beq.n	80018b0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001894:	3301      	adds	r3, #1
 8001896:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800189e:	3b01      	subs	r3, #1
 80018a0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80018a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018ac:	431a      	orrs	r2, r3
 80018ae:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80018b0:	2107      	movs	r1, #7
 80018b2:	0020      	movs	r0, r4
 80018b4:	f7ff fd48 	bl	8001348 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b8:	2210      	movs	r2, #16
 80018ba:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80018bc:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018be:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80018c0:	0023      	movs	r3, r4
 80018c2:	2200      	movs	r2, #0
 80018c4:	3340      	adds	r3, #64	; 0x40
 80018c6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80018c8:	f7ff ffcf 	bl	800186a <HAL_I2C_ListenCpltCallback>
}
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	ffff0000 	.word	0xffff0000

080018d4 <HAL_I2C_MemRxCpltCallback>:
 80018d4:	4770      	bx	lr

080018d6 <HAL_I2C_ErrorCallback>:
 80018d6:	4770      	bx	lr

080018d8 <HAL_I2C_AbortCpltCallback>:
}
 80018d8:	4770      	bx	lr
	...

080018dc <I2C_ITError>:
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80018de:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80018e0:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80018e2:	2600      	movs	r6, #0
 80018e4:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80018e6:	3541      	adds	r5, #65	; 0x41
 80018e8:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80018ea:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80018ee:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80018f0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80018f2:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80018f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80018f6:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 80018f8:	4311      	orrs	r1, r2
 80018fa:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d822      	bhi.n	8001946 <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001900:	2103      	movs	r1, #3
 8001902:	f7ff fd21 	bl	8001348 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800190c:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800190e:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8001910:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	01d2      	lsls	r2, r2, #7
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800191a:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800191c:	d01e      	beq.n	800195c <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800191e:	4925      	ldr	r1, [pc, #148]	; (80019b4 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8001920:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001922:	400a      	ands	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001926:	2800      	cmp	r0, #0
 8001928:	d00c      	beq.n	8001944 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 800192c:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800192e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001930:	0023      	movs	r3, r4
 8001932:	3340      	adds	r3, #64	; 0x40
 8001934:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001936:	f7ff fb63 	bl	8001000 <HAL_DMA_Abort_IT>
 800193a:	2800      	cmp	r0, #0
 800193c:	d002      	beq.n	8001944 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800193e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001940:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001942:	4798      	blx	r3
}
 8001944:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001946:	2107      	movs	r1, #7
 8001948:	f7ff fcfe 	bl	8001348 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800194c:	782b      	ldrb	r3, [r5, #0]
 800194e:	2b60      	cmp	r3, #96	; 0x60
 8001950:	d001      	beq.n	8001956 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001952:	2320      	movs	r3, #32
 8001954:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	6323      	str	r3, [r4, #48]	; 0x30
 800195a:	e7d8      	b.n	800190e <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800195c:	2080      	movs	r0, #128	; 0x80
 800195e:	0200      	lsls	r0, r0, #8
 8001960:	4002      	ands	r2, r0
 8001962:	d011      	beq.n	8001988 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4815      	ldr	r0, [pc, #84]	; (80019bc <I2C_ITError+0xe0>)
 8001968:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800196a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800196c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800196e:	2800      	cmp	r0, #0
 8001970:	d0e8      	beq.n	8001944 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <I2C_ITError+0xdc>)
 8001974:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001976:	0023      	movs	r3, r4
 8001978:	3340      	adds	r3, #64	; 0x40
 800197a:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800197c:	f7ff fb40 	bl	8001000 <HAL_DMA_Abort_IT>
 8001980:	2800      	cmp	r0, #0
 8001982:	d0df      	beq.n	8001944 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001984:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001986:	e7db      	b.n	8001940 <I2C_ITError+0x64>
 8001988:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800198a:	7829      	ldrb	r1, [r5, #0]
 800198c:	3340      	adds	r3, #64	; 0x40
 800198e:	2960      	cmp	r1, #96	; 0x60
 8001990:	d106      	bne.n	80019a0 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 8001992:	3940      	subs	r1, #64	; 0x40
 8001994:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001996:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001998:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800199a:	f7ff ff9d 	bl	80018d8 <HAL_I2C_AbortCpltCallback>
 800199e:	e7d1      	b.n	8001944 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 80019a0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80019a2:	0020      	movs	r0, r4
 80019a4:	f7ff ff97 	bl	80018d6 <HAL_I2C_ErrorCallback>
}
 80019a8:	e7cc      	b.n	8001944 <I2C_ITError+0x68>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	ffff0000 	.word	0xffff0000
 80019b0:	08001ab5 	.word	0x08001ab5
 80019b4:	ffffbfff 	.word	0xffffbfff
 80019b8:	08001f3d 	.word	0x08001f3d
 80019bc:	ffff7fff 	.word	0xffff7fff

080019c0 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c0:	2220      	movs	r2, #32
{
 80019c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c4:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019c6:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80019c8:	6803      	ldr	r3, [r0, #0]
{
 80019ca:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80019cc:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80019ce:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d0:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80019d2:	f7ff fcb9 	bl	8001348 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	022d      	lsls	r5, r5, #8
 80019da:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80019dc:	4933      	ldr	r1, [pc, #204]	; (8001aac <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019de:	432a      	orrs	r2, r5
 80019e0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80019e2:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80019e4:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 80019e6:	400a      	ands	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80019ea:	f7ff fc55 	bl	8001298 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80019ee:	0473      	lsls	r3, r6, #17
 80019f0:	d538      	bpl.n	8001a64 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 80019f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001a00:	2304      	movs	r3, #4
 8001a02:	421f      	tst	r7, r3
 8001a04:	d010      	beq.n	8001a28 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001a06:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a12:	3301      	adds	r3, #1
 8001a14:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001a16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001a20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001a28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a32:	4313      	orrs	r3, r2
 8001a34:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a36:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3c:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a42:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8001a44:	6363      	str	r3, [r4, #52]	; 0x34
 8001a46:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a48:	429e      	cmp	r6, r3
 8001a4a:	d00f      	beq.n	8001a6c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a4e:	0020      	movs	r0, r4
 8001a50:	f7ff ff44 	bl	80018dc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001a54:	782b      	ldrb	r3, [r5, #0]
 8001a56:	2b28      	cmp	r3, #40	; 0x28
 8001a58:	d103      	bne.n	8001a62 <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a5a:	0039      	movs	r1, r7
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f7ff ff05 	bl	800186c <I2C_ITListenCplt>
}
 8001a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a64:	422e      	tst	r6, r5
 8001a66:	d0cb      	beq.n	8001a00 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8001a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a6a:	e7c3      	b.n	80019f4 <I2C_ITSlaveCplt+0x34>
 8001a6c:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <I2C_ITSlaveCplt+0xf0>)
 8001a72:	3740      	adds	r7, #64	; 0x40
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00b      	beq.n	8001a90 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001a78:	0020      	movs	r0, r4
 8001a7a:	f7ff fe84 	bl	8001786 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8001a80:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a82:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	2320      	movs	r3, #32
 8001a86:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001a88:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001a8a:	f7ff feee 	bl	800186a <HAL_I2C_ListenCpltCallback>
 8001a8e:	e7e8      	b.n	8001a62 <I2C_ITSlaveCplt+0xa2>
 8001a90:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a92:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001a94:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001a98:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a9a:	2a22      	cmp	r2, #34	; 0x22
 8001a9c:	d102      	bne.n	8001aa4 <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001a9e:	f7ff fe71 	bl	8001784 <HAL_I2C_SlaveRxCpltCallback>
 8001aa2:	e7de      	b.n	8001a62 <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001aa4:	f7ff fe6d 	bl	8001782 <HAL_I2C_SlaveTxCpltCallback>
}
 8001aa8:	e7db      	b.n	8001a62 <I2C_ITSlaveCplt+0xa2>
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	fe00e800 	.word	0xfe00e800
 8001ab0:	ffff0000 	.word	0xffff0000

08001ab4 <I2C_Slave_ISR_IT>:
{
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8001ab6:	0007      	movs	r7, r0
 8001ab8:	3740      	adds	r7, #64	; 0x40
{
 8001aba:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8001abc:	783a      	ldrb	r2, [r7, #0]
{
 8001abe:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ac0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8001ac2:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d021      	beq.n	8001b0e <I2C_Slave_ISR_IT+0x5a>
 8001aca:	2201      	movs	r2, #1
 8001acc:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ace:	320f      	adds	r2, #15
 8001ad0:	4211      	tst	r1, r2
 8001ad2:	d03b      	beq.n	8001b4c <I2C_Slave_ISR_IT+0x98>
 8001ad4:	4216      	tst	r6, r2
 8001ad6:	d039      	beq.n	8001b4c <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 8001ad8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d128      	bne.n	8001b30 <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001ade:	0022      	movs	r2, r4
 8001ae0:	3241      	adds	r2, #65	; 0x41
 8001ae2:	7811      	ldrb	r1, [r2, #0]
 8001ae4:	2928      	cmp	r1, #40	; 0x28
 8001ae6:	d113      	bne.n	8001b10 <I2C_Slave_ISR_IT+0x5c>
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0489      	lsls	r1, r1, #18
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d10f      	bne.n	8001b10 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001af0:	0029      	movs	r1, r5
 8001af2:	0020      	movs	r0, r4
 8001af4:	f7ff feba 	bl	800186c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001af8:	2320      	movs	r3, #32
 8001afa:	421d      	tst	r5, r3
 8001afc:	d005      	beq.n	8001b0a <I2C_Slave_ISR_IT+0x56>
 8001afe:	421e      	tst	r6, r3
 8001b00:	d003      	beq.n	8001b0a <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b02:	0029      	movs	r1, r5
 8001b04:	0020      	movs	r0, r4
 8001b06:	f7ff ff5b 	bl	80019c0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	7038      	strb	r0, [r7, #0]
}
 8001b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b10:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b12:	7810      	ldrb	r0, [r2, #0]
 8001b14:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b16:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b18:	2829      	cmp	r0, #41	; 0x29
 8001b1a:	d1ed      	bne.n	8001af8 <I2C_Slave_ISR_IT+0x44>
 8001b1c:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <I2C_Slave_ISR_IT+0x11c>)
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	d0ea      	beq.n	8001af8 <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 8001b22:	0020      	movs	r0, r4
 8001b24:	f7ff fbb8 	bl	8001298 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f7ff fe2c 	bl	8001786 <I2C_ITSlaveSeqCplt>
 8001b2e:	e7e3      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b30:	6821      	ldr	r1, [r4, #0]
 8001b32:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b34:	2204      	movs	r2, #4
 8001b36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <I2C_Slave_ISR_IT+0x120>)
 8001b3e:	4213      	tst	r3, r2
 8001b40:	d1da      	bne.n	8001af8 <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b44:	0020      	movs	r0, r4
 8001b46:	f7ff fec9 	bl	80018dc <I2C_ITError>
 8001b4a:	e7d5      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4215      	tst	r5, r2
 8001b50:	d01a      	beq.n	8001b88 <I2C_Slave_ISR_IT+0xd4>
 8001b52:	4216      	tst	r6, r2
 8001b54:	d018      	beq.n	8001b88 <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 8001b56:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d00e      	beq.n	8001b7a <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001b5c:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b64:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 8001b66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b68:	3201      	adds	r2, #1
 8001b6a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001b6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b74:	3a01      	subs	r2, #1
 8001b76:	b292      	uxth	r2, r2
 8001b78:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001b7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d1bb      	bne.n	8001af8 <I2C_Slave_ISR_IT+0x44>
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <I2C_Slave_ISR_IT+0x11c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d1d0      	bne.n	8001b28 <I2C_Slave_ISR_IT+0x74>
 8001b86:	e7b7      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4215      	tst	r5, r2
 8001b8c:	d005      	beq.n	8001b9a <I2C_Slave_ISR_IT+0xe6>
 8001b8e:	4216      	tst	r6, r2
 8001b90:	d003      	beq.n	8001b9a <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b92:	0020      	movs	r0, r4
 8001b94:	f7ff fe21 	bl	80017da <I2C_ITAddrCplt.isra.8>
 8001b98:	e7ae      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4215      	tst	r5, r2
 8001b9e:	d0ab      	beq.n	8001af8 <I2C_Slave_ISR_IT+0x44>
 8001ba0:	4216      	tst	r6, r2
 8001ba2:	d0a9      	beq.n	8001af8 <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 8001ba4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d00d      	beq.n	8001bc6 <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001bb0:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001bb4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	8523      	strh	r3, [r4, #40]	; 0x28
 8001bc4:	e798      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bc6:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <I2C_Slave_ISR_IT+0x120>)
 8001bc8:	4213      	tst	r3, r2
 8001bca:	d000      	beq.n	8001bce <I2C_Slave_ISR_IT+0x11a>
 8001bcc:	e794      	b.n	8001af8 <I2C_Slave_ISR_IT+0x44>
 8001bce:	e7ab      	b.n	8001b28 <I2C_Slave_ISR_IT+0x74>
 8001bd0:	ffff0000 	.word	0xffff0000
 8001bd4:	feffffff 	.word	0xfeffffff

08001bd8 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd8:	2220      	movs	r2, #32
 8001bda:	6803      	ldr	r3, [r0, #0]
{
 8001bdc:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bde:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8001be0:	685a      	ldr	r2, [r3, #4]
{
 8001be2:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 8001be4:	4827      	ldr	r0, [pc, #156]	; (8001c84 <I2C_ITMasterCplt+0xac>)
 8001be6:	4002      	ands	r2, r0
 8001be8:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bea:	2200      	movs	r2, #0
 8001bec:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8001bee:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <I2C_ITMasterCplt+0xb0>)
 8001bf2:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	4211      	tst	r1, r2
 8001bf8:	d004      	beq.n	8001c04 <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfa:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c00:	4313      	orrs	r3, r2
 8001c02:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8001c04:	0020      	movs	r0, r4
 8001c06:	f7ff fb47 	bl	8001298 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f7ff fb9b 	bl	8001348 <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001c12:	0022      	movs	r2, r4
 8001c14:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 8001c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001c18:	7811      	ldrb	r1, [r2, #0]
 8001c1a:	2960      	cmp	r1, #96	; 0x60
 8001c1c:	d001      	beq.n	8001c22 <I2C_ITMasterCplt+0x4a>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c24:	0020      	movs	r0, r4
 8001c26:	f7ff fe59 	bl	80018dc <I2C_ITError>
}
 8001c2a:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c2c:	7811      	ldrb	r1, [r2, #0]
 8001c2e:	2921      	cmp	r1, #33	; 0x21
 8001c30:	d112      	bne.n	8001c58 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	3901      	subs	r1, #1
 8001c34:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c36:	0022      	movs	r2, r4
 8001c38:	0021      	movs	r1, r4
 8001c3a:	3242      	adds	r2, #66	; 0x42
 8001c3c:	7810      	ldrb	r0, [r2, #0]
 8001c3e:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001c42:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c44:	2840      	cmp	r0, #64	; 0x40
 8001c46:	d103      	bne.n	8001c50 <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f003 fc0b 	bl	8005464 <HAL_I2C_MemTxCpltCallback>
 8001c4e:	e7ec      	b.n	8001c2a <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c50:	0020      	movs	r0, r4
 8001c52:	f7ff fd70 	bl	8001736 <HAL_I2C_MasterTxCpltCallback>
 8001c56:	e7e8      	b.n	8001c2a <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c58:	7811      	ldrb	r1, [r2, #0]
 8001c5a:	2922      	cmp	r1, #34	; 0x22
 8001c5c:	d1e5      	bne.n	8001c2a <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	3902      	subs	r1, #2
 8001c60:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c62:	0022      	movs	r2, r4
 8001c64:	0021      	movs	r1, r4
 8001c66:	3242      	adds	r2, #66	; 0x42
 8001c68:	7810      	ldrb	r0, [r2, #0]
 8001c6a:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001c6e:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c70:	2840      	cmp	r0, #64	; 0x40
 8001c72:	d103      	bne.n	8001c7c <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001c74:	0020      	movs	r0, r4
 8001c76:	f7ff fe2d 	bl	80018d4 <HAL_I2C_MemRxCpltCallback>
 8001c7a:	e7d6      	b.n	8001c2a <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c7c:	0020      	movs	r0, r4
 8001c7e:	f7ff fd5b 	bl	8001738 <HAL_I2C_MasterRxCpltCallback>
}
 8001c82:	e7d2      	b.n	8001c2a <I2C_ITMasterCplt+0x52>
 8001c84:	fe00e800 	.word	0xfe00e800
 8001c88:	ffff0000 	.word	0xffff0000

08001c8c <I2C_Slave_ISR_DMA>:
{
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8001c8e:	0005      	movs	r5, r0
 8001c90:	3540      	adds	r5, #64	; 0x40
 8001c92:	782b      	ldrb	r3, [r5, #0]
{
 8001c94:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c96:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8001c98:	2002      	movs	r0, #2
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d02d      	beq.n	8001cfa <I2C_Slave_ISR_DMA+0x6e>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ca2:	330f      	adds	r3, #15
 8001ca4:	4219      	tst	r1, r3
 8001ca6:	d04b      	beq.n	8001d40 <I2C_Slave_ISR_DMA+0xb4>
 8001ca8:	421a      	tst	r2, r3
 8001caa:	d049      	beq.n	8001d40 <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cac:	20c0      	movs	r0, #192	; 0xc0
 8001cae:	0200      	lsls	r0, r0, #8
 8001cb0:	4202      	tst	r2, r0
 8001cb2:	d042      	beq.n	8001d3a <I2C_Slave_ISR_DMA+0xae>
      if (hi2c->hdmarx != NULL)
 8001cb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 8001cb6:	1e03      	subs	r3, r0, #0
      if (hi2c->hdmarx != NULL)
 8001cb8:	d006      	beq.n	8001cc8 <I2C_Slave_ISR_DMA+0x3c>
  uint32_t treatdmanack = 0U;
 8001cba:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001cbc:	0417      	lsls	r7, r2, #16
 8001cbe:	d503      	bpl.n	8001cc8 <I2C_Slave_ISR_DMA+0x3c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8001cc4:	4258      	negs	r0, r3
 8001cc6:	4143      	adcs	r3, r0
      if (hi2c->hdmatx != NULL)
 8001cc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d005      	beq.n	8001cda <I2C_Slave_ISR_DMA+0x4e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001cce:	0452      	lsls	r2, r2, #17
 8001cd0:	d503      	bpl.n	8001cda <I2C_Slave_ISR_DMA+0x4e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001cd2:	6802      	ldr	r2, [r0, #0]
 8001cd4:	6852      	ldr	r2, [r2, #4]
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d001      	beq.n	8001cde <I2C_Slave_ISR_DMA+0x52>
      if (treatdmanack == 1U)
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d11e      	bne.n	8001d1c <I2C_Slave_ISR_DMA+0x90>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001cde:	0023      	movs	r3, r4
 8001ce0:	3341      	adds	r3, #65	; 0x41
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	2a28      	cmp	r2, #40	; 0x28
 8001ce6:	d109      	bne.n	8001cfc <I2C_Slave_ISR_DMA+0x70>
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0492      	lsls	r2, r2, #18
 8001cec:	4296      	cmp	r6, r2
 8001cee:	d105      	bne.n	8001cfc <I2C_Slave_ISR_DMA+0x70>
          I2C_ITListenCplt(hi2c, ITFlags);
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f7ff fdbb 	bl	800186c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	7028      	strb	r0, [r5, #0]
}
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cfc:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cfe:	7819      	ldrb	r1, [r3, #0]
 8001d00:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d04:	2929      	cmp	r1, #41	; 0x29
 8001d06:	d1f6      	bne.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <I2C_Slave_ISR_DMA+0xd8>)
 8001d0a:	428e      	cmp	r6, r1
 8001d0c:	d0f3      	beq.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
          I2C_Flush_TXDR(hi2c);
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f7ff fac2 	bl	8001298 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8001d14:	0020      	movs	r0, r4
 8001d16:	f7ff fd36 	bl	8001786 <I2C_ITSlaveSeqCplt>
 8001d1a:	e7ec      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d22:	2304      	movs	r3, #4
 8001d24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d26:	4313      	orrs	r3, r2
 8001d28:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <I2C_Slave_ISR_DMA+0xdc>)
 8001d2c:	421e      	tst	r6, r3
 8001d2e:	d1e2      	bne.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d32:	0020      	movs	r0, r4
 8001d34:	f7ff fdd2 	bl	80018dc <I2C_ITError>
 8001d38:	e7dd      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	e7da      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d40:	2308      	movs	r3, #8
 8001d42:	4219      	tst	r1, r3
 8001d44:	d005      	beq.n	8001d52 <I2C_Slave_ISR_DMA+0xc6>
 8001d46:	421a      	tst	r2, r3
 8001d48:	d003      	beq.n	8001d52 <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001d4a:	0020      	movs	r0, r4
 8001d4c:	f7ff fd45 	bl	80017da <I2C_ITAddrCplt.isra.8>
 8001d50:	e7d1      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d52:	2320      	movs	r3, #32
 8001d54:	4219      	tst	r1, r3
 8001d56:	d0ce      	beq.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
 8001d58:	421a      	tst	r2, r3
 8001d5a:	d0cc      	beq.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001d5c:	0020      	movs	r0, r4
 8001d5e:	f7ff fe2f 	bl	80019c0 <I2C_ITSlaveCplt>
 8001d62:	e7c8      	b.n	8001cf6 <I2C_Slave_ISR_DMA+0x6a>
 8001d64:	ffff0000 	.word	0xffff0000
 8001d68:	feffffff 	.word	0xfeffffff

08001d6c <I2C_Master_ISR_DMA>:
{
 8001d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8001d6e:	0005      	movs	r5, r0
 8001d70:	3540      	adds	r5, #64	; 0x40
 8001d72:	782b      	ldrb	r3, [r5, #0]
{
 8001d74:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8001d76:	2002      	movs	r0, #2
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d015      	beq.n	8001da8 <I2C_Master_ISR_DMA+0x3c>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d80:	330f      	adds	r3, #15
 8001d82:	4219      	tst	r1, r3
 8001d84:	d011      	beq.n	8001daa <I2C_Master_ISR_DMA+0x3e>
 8001d86:	421a      	tst	r2, r3
 8001d88:	d00f      	beq.n	8001daa <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d8c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8e:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d90:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d92:	3b0c      	subs	r3, #12
 8001d94:	4313      	orrs	r3, r2
 8001d96:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d98:	2112      	movs	r1, #18
 8001d9a:	f7ff faa1 	bl	80012e0 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f7ff fa7a 	bl	8001298 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8001da4:	2000      	movs	r0, #0
 8001da6:	7028      	strb	r0, [r5, #0]
}
 8001da8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001daa:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001dac:	0608      	lsls	r0, r1, #24
 8001dae:	d544      	bpl.n	8001e3a <I2C_Master_ISR_DMA+0xce>
 8001db0:	421a      	tst	r2, r3
 8001db2:	d042      	beq.n	8001e3a <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6811      	ldr	r1, [r2, #0]
 8001db8:	4399      	bics	r1, r3
 8001dba:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 8001dbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d02f      	beq.n	8001e22 <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001dc2:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001dc6:	0589      	lsls	r1, r1, #22
 8001dc8:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	2bff      	cmp	r3, #255	; 0xff
 8001dcc:	d91b      	bls.n	8001e06 <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dce:	23ff      	movs	r3, #255	; 0xff
 8001dd0:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001dda:	9000      	str	r0, [sp, #0]
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	0020      	movs	r0, r4
 8001de0:	f7ff fa68 	bl	80012b4 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8001de4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001de6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dee:	0023      	movs	r3, r4
 8001df0:	3341      	adds	r3, #65	; 0x41
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001df6:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001df8:	2a22      	cmp	r2, #34	; 0x22
 8001dfa:	d10f      	bne.n	8001e1c <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e7ce      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8001e06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8001e0a:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <I2C_Master_ISR_DMA+0x10c>)
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 8001e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e14:	e7df      	b.n	8001dd6 <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	049b      	lsls	r3, r3, #18
 8001e1a:	e7dc      	b.n	8001dd6 <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	01d2      	lsls	r2, r2, #7
 8001e20:	e7ee      	b.n	8001e00 <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e22:	6853      	ldr	r3, [r2, #4]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	d403      	bmi.n	8001e30 <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 8001e28:	0020      	movs	r0, r4
 8001e2a:	f7ff fc86 	bl	800173a <I2C_ITMasterSeqCplt>
 8001e2e:	e7b9      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	0020      	movs	r0, r4
 8001e34:	f7ff fd52 	bl	80018dc <I2C_ITError>
 8001e38:	e7b4      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e3a:	4219      	tst	r1, r3
 8001e3c:	d012      	beq.n	8001e64 <I2C_Master_ISR_DMA+0xf8>
 8001e3e:	421a      	tst	r2, r3
 8001e40:	d010      	beq.n	8001e64 <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 8001e42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f3      	bne.n	8001e30 <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	0192      	lsls	r2, r2, #6
 8001e4e:	d4a9      	bmi.n	8001da4 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e52:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <I2C_Master_ISR_DMA+0x10c>)
 8001e54:	4291      	cmp	r1, r2
 8001e56:	d1e7      	bne.n	8001e28 <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	01d2      	lsls	r2, r2, #7
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	e79f      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e64:	2320      	movs	r3, #32
 8001e66:	4219      	tst	r1, r3
 8001e68:	d09c      	beq.n	8001da4 <I2C_Master_ISR_DMA+0x38>
 8001e6a:	421a      	tst	r2, r3
 8001e6c:	d100      	bne.n	8001e70 <I2C_Master_ISR_DMA+0x104>
 8001e6e:	e799      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001e70:	0020      	movs	r0, r4
 8001e72:	f7ff feb1 	bl	8001bd8 <I2C_ITMasterCplt>
 8001e76:	e795      	b.n	8001da4 <I2C_Master_ISR_DMA+0x38>
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e7c:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001e80:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	6851      	ldr	r1, [r2, #4]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	f7ff fd25 	bl	80018dc <I2C_ITError>
}
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <I2C_DMAMasterTransmitCplt>:
{
 8001e94:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e96:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e98:	4911      	ldr	r1, [pc, #68]	; (8001ee0 <I2C_DMAMasterTransmitCplt+0x4c>)
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	6813      	ldr	r3, [r2, #0]
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8001ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8001ea8:	2112      	movs	r1, #18
 8001eaa:	0020      	movs	r0, r4
 8001eac:	f7ff fa18 	bl	80012e0 <I2C_Enable_IRQ>
}
 8001eb0:	e013      	b.n	8001eda <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 8001eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eb4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8001eb6:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8001eba:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebc:	2bff      	cmp	r3, #255	; 0xff
 8001ebe:	d90d      	bls.n	8001edc <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec0:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8001ec2:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8001ec4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ec6:	3228      	adds	r2, #40	; 0x28
 8001ec8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001eca:	f7ff f81b 	bl	8000f04 <HAL_DMA_Start_IT>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d0ea      	beq.n	8001ea8 <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	f7ff fd01 	bl	80018dc <I2C_ITError>
}
 8001eda:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8001edc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ede:	e7f0      	b.n	8001ec2 <I2C_DMAMasterTransmitCplt+0x2e>
 8001ee0:	ffffbfff 	.word	0xffffbfff

08001ee4 <HAL_I2C_ER_IRQHandler>:
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ee6:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ee8:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eea:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001eec:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001eee:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ef0:	4229      	tst	r1, r5
 8001ef2:	d006      	beq.n	8001f02 <HAL_I2C_ER_IRQHandler+0x1e>
 8001ef4:	0614      	lsls	r4, r2, #24
 8001ef6:	d504      	bpl.n	8001f02 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ef8:	2401      	movs	r4, #1
 8001efa:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001efc:	4334      	orrs	r4, r6
 8001efe:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f00:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f02:	2580      	movs	r5, #128	; 0x80
 8001f04:	00ed      	lsls	r5, r5, #3
 8001f06:	4229      	tst	r1, r5
 8001f08:	d006      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0x34>
 8001f0a:	0614      	lsls	r4, r2, #24
 8001f0c:	d504      	bpl.n	8001f18 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f0e:	2408      	movs	r4, #8
 8001f10:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001f12:	4334      	orrs	r4, r6
 8001f14:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f16:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f18:	2480      	movs	r4, #128	; 0x80
 8001f1a:	00a4      	lsls	r4, r4, #2
 8001f1c:	4221      	tst	r1, r4
 8001f1e:	d006      	beq.n	8001f2e <HAL_I2C_ER_IRQHandler+0x4a>
 8001f20:	0612      	lsls	r2, r2, #24
 8001f22:	d504      	bpl.n	8001f2e <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f24:	2202      	movs	r2, #2
 8001f26:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f2c:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f2e:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8001f30:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f32:	4219      	tst	r1, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8001f36:	f7ff fcd1 	bl	80018dc <I2C_ITError>
}
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}

08001f3c <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001f3c:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001f40:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001f42:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001f44:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001f46:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001f48:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	3341      	adds	r3, #65	; 0x41
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	2a60      	cmp	r2, #96	; 0x60
 8001f52:	d104      	bne.n	8001f5e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	3a40      	subs	r2, #64	; 0x40
 8001f56:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f58:	f7ff fcbe 	bl	80018d8 <HAL_I2C_AbortCpltCallback>
}
 8001f5c:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001f5e:	f7ff fcba 	bl	80018d6 <HAL_I2C_ErrorCallback>
}
 8001f62:	e7fb      	b.n	8001f5c <I2C_DMAAbort+0x20>

08001f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f66:	0004      	movs	r4, r0
 8001f68:	3441      	adds	r4, #65	; 0x41
 8001f6a:	7822      	ldrb	r2, [r4, #0]
{
 8001f6c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f72:	2a20      	cmp	r2, #32
 8001f74:	d118      	bne.n	8001fa8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001f76:	001d      	movs	r5, r3
 8001f78:	3540      	adds	r5, #64	; 0x40
 8001f7a:	782e      	ldrb	r6, [r5, #0]
 8001f7c:	2e01      	cmp	r6, #1
 8001f7e:	d013      	beq.n	8001fa8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001f80:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f82:	3022      	adds	r0, #34	; 0x22
 8001f84:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001f86:	681e      	ldr	r6, [r3, #0]
 8001f88:	3823      	subs	r0, #35	; 0x23
 8001f8a:	4386      	bics	r6, r0
 8001f8c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f8e:	681e      	ldr	r6, [r3, #0]
 8001f90:	4f06      	ldr	r7, [pc, #24]	; (8001fac <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001f92:	403e      	ands	r6, r7
 8001f94:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f96:	681e      	ldr	r6, [r3, #0]
 8001f98:	4331      	orrs	r1, r6
 8001f9a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	4308      	orrs	r0, r1
 8001fa0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001fa2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001fa6:	7028      	strb	r0, [r5, #0]
  }
}
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	ffffefff 	.word	0xffffefff

08001fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	0005      	movs	r5, r0
 8001fb4:	3541      	adds	r5, #65	; 0x41
 8001fb6:	782a      	ldrb	r2, [r5, #0]
{
 8001fb8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	2a20      	cmp	r2, #32
 8001fc0:	d117      	bne.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	3440      	adds	r4, #64	; 0x40
 8001fc6:	7826      	ldrb	r6, [r4, #0]
 8001fc8:	2e01      	cmp	r6, #1
 8001fca:	d012      	beq.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001fcc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fce:	3022      	adds	r0, #34	; 0x22
 8001fd0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001fd2:	681e      	ldr	r6, [r3, #0]
 8001fd4:	3823      	subs	r0, #35	; 0x23
 8001fd6:	4386      	bics	r6, r0
 8001fd8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001fda:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001fdc:	4f05      	ldr	r7, [pc, #20]	; (8001ff4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001fde:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001fe0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001fe2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001fe4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4308      	orrs	r0, r1
 8001fea:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001fec:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001ff0:	7020      	strb	r0, [r4, #0]
  }
}
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	fffff0ff 	.word	0xfffff0ff

08001ff8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001ff8:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2401      	movs	r4, #1
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8001ffe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002000:	4321      	orrs	r1, r4
 8002002:	6411      	str	r1, [r2, #64]	; 0x40
 8002004:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4023      	ands	r3, r4
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800200e:	6813      	ldr	r3, [r2, #0]
 8002010:	4318      	orrs	r0, r3
 8002012:	6010      	str	r0, [r2, #0]
}
 8002014:	bd13      	pop	{r0, r1, r4, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002022:	4c10      	ldr	r4, [pc, #64]	; (8002064 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002024:	4910      	ldr	r1, [pc, #64]	; (8002068 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002026:	6823      	ldr	r3, [r4, #0]
{
 8002028:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800202a:	400b      	ands	r3, r1
 800202c:	4303      	orrs	r3, r0
 800202e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002032:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	429a      	cmp	r2, r3
 8002038:	d10c      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	2306      	movs	r3, #6
 8002042:	4358      	muls	r0, r3
 8002044:	f7fe f884 	bl	8000150 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002048:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800204a:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	6960      	ldr	r0, [r4, #20]
 8002050:	4010      	ands	r0, r2
 8002052:	d100      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8002054:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 800205a:	3b01      	subs	r3, #1
 800205c:	e7f7      	b.n	800204e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800205e:	2003      	movs	r0, #3
 8002060:	e7f8      	b.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x34>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	40007000 	.word	0x40007000
 8002068:	fffff9ff 	.word	0xfffff9ff
 800206c:	20000200 	.word	0x20000200
 8002070:	000f4240 	.word	0x000f4240

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	0004      	movs	r4, r0
 8002078:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800207a:	2800      	cmp	r0, #0
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800207e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002080:	b005      	add	sp, #20
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	07db      	lsls	r3, r3, #31
 8002088:	d410      	bmi.n	80020ac <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	079b      	lsls	r3, r3, #30
 800208e:	d45c      	bmi.n	800214a <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	071b      	lsls	r3, r3, #28
 8002094:	d500      	bpl.n	8002098 <HAL_RCC_OscConfig+0x24>
 8002096:	e0c2      	b.n	800221e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	075b      	lsls	r3, r3, #29
 800209c:	d500      	bpl.n	80020a0 <HAL_RCC_OscConfig+0x2c>
 800209e:	e0f4      	b.n	800228a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020a0:	69e2      	ldr	r2, [r4, #28]
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d000      	beq.n	80020a8 <HAL_RCC_OscConfig+0x34>
 80020a6:	e173      	b.n	8002390 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
 80020aa:	e7e9      	b.n	8002080 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ac:	2238      	movs	r2, #56	; 0x38
 80020ae:	4dac      	ldr	r5, [pc, #688]	; (8002360 <HAL_RCC_OscConfig+0x2ec>)
 80020b0:	68ab      	ldr	r3, [r5, #8]
 80020b2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ba:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020bc:	0793      	lsls	r3, r2, #30
 80020be:	d108      	bne.n	80020d2 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	039b      	lsls	r3, r3, #14
 80020c4:	d5e1      	bpl.n	800208a <HAL_RCC_OscConfig+0x16>
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1de      	bne.n	800208a <HAL_RCC_OscConfig+0x16>
 80020cc:	e7d7      	b.n	800207e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d0f6      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	0252      	lsls	r2, r2, #9
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_RCC_OscConfig+0x8c>
 80020dc:	682a      	ldr	r2, [r5, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020e2:	f7fe fafd 	bl	80006e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80020e8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	02b6      	lsls	r6, r6, #10
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	4233      	tst	r3, r6
 80020f0:	d1cb      	bne.n	800208a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f2:	f7fe faf5 	bl	80006e0 <HAL_GetTick>
 80020f6:	1bc0      	subs	r0, r0, r7
 80020f8:	2864      	cmp	r0, #100	; 0x64
 80020fa:	d9f7      	bls.n	80020ec <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
 80020fe:	e7bf      	b.n	8002080 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002100:	21a0      	movs	r1, #160	; 0xa0
 8002102:	02c9      	lsls	r1, r1, #11
 8002104:	428b      	cmp	r3, r1
 8002106:	d108      	bne.n	800211a <HAL_RCC_OscConfig+0xa6>
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	6829      	ldr	r1, [r5, #0]
 800210c:	02db      	lsls	r3, r3, #11
 800210e:	430b      	orrs	r3, r1
 8002110:	602b      	str	r3, [r5, #0]
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	431a      	orrs	r2, r3
 8002116:	602a      	str	r2, [r5, #0]
 8002118:	e7e3      	b.n	80020e2 <HAL_RCC_OscConfig+0x6e>
 800211a:	682a      	ldr	r2, [r5, #0]
 800211c:	4991      	ldr	r1, [pc, #580]	; (8002364 <HAL_RCC_OscConfig+0x2f0>)
 800211e:	400a      	ands	r2, r1
 8002120:	602a      	str	r2, [r5, #0]
 8002122:	682a      	ldr	r2, [r5, #0]
 8002124:	4990      	ldr	r1, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x2f4>)
 8002126:	400a      	ands	r2, r1
 8002128:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1d9      	bne.n	80020e2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800212e:	f7fe fad7 	bl	80006e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002132:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002134:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	02b6      	lsls	r6, r6, #10
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	4233      	tst	r3, r6
 800213c:	d0a5      	beq.n	800208a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe facf 	bl	80006e0 <HAL_GetTick>
 8002142:	1bc0      	subs	r0, r0, r7
 8002144:	2864      	cmp	r0, #100	; 0x64
 8002146:	d9f7      	bls.n	8002138 <HAL_RCC_OscConfig+0xc4>
 8002148:	e7d8      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214a:	2338      	movs	r3, #56	; 0x38
 800214c:	4d84      	ldr	r5, [pc, #528]	; (8002360 <HAL_RCC_OscConfig+0x2ec>)
 800214e:	68aa      	ldr	r2, [r5, #8]
 8002150:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002152:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002154:	2b10      	cmp	r3, #16
 8002156:	d129      	bne.n	80021ac <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002158:	2103      	movs	r1, #3
 800215a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800215c:	2a02      	cmp	r2, #2
 800215e:	d127      	bne.n	80021b0 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002160:	682a      	ldr	r2, [r5, #0]
 8002162:	0552      	lsls	r2, r2, #21
 8002164:	d503      	bpl.n	800216e <HAL_RCC_OscConfig+0xfa>
 8002166:	68e2      	ldr	r2, [r4, #12]
 8002168:	2a00      	cmp	r2, #0
 800216a:	d100      	bne.n	800216e <HAL_RCC_OscConfig+0xfa>
 800216c:	e787      	b.n	800207e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	6869      	ldr	r1, [r5, #4]
 8002170:	6962      	ldr	r2, [r4, #20]
 8002172:	487e      	ldr	r0, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x2f8>)
 8002174:	0212      	lsls	r2, r2, #8
 8002176:	4001      	ands	r1, r0
 8002178:	430a      	orrs	r2, r1
 800217a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x2fc>)
 8002184:	4013      	ands	r3, r2
 8002186:	6922      	ldr	r2, [r4, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	4a79      	ldr	r2, [pc, #484]	; (8002374 <HAL_RCC_OscConfig+0x300>)
 8002190:	049b      	lsls	r3, r3, #18
 8002192:	0f5b      	lsrs	r3, r3, #29
 8002194:	40da      	lsrs	r2, r3
 8002196:	0013      	movs	r3, r2
 8002198:	4a77      	ldr	r2, [pc, #476]	; (8002378 <HAL_RCC_OscConfig+0x304>)
 800219a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800219c:	4b77      	ldr	r3, [pc, #476]	; (800237c <HAL_RCC_OscConfig+0x308>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	f7fe fa56 	bl	8000650 <HAL_InitTick>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d100      	bne.n	80021aa <HAL_RCC_OscConfig+0x136>
 80021a8:	e772      	b.n	8002090 <HAL_RCC_OscConfig+0x1c>
 80021aa:	e768      	b.n	800207e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0d7      	beq.n	8002160 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b0:	68e3      	ldr	r3, [r4, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	4a6d      	ldr	r2, [pc, #436]	; (8002370 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ba:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021bc:	4013      	ands	r3, r2
 80021be:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021c2:	4313      	orrs	r3, r2
 80021c4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	682a      	ldr	r2, [r5, #0]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4313      	orrs	r3, r2
 80021ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021d0:	f7fe fa86 	bl	80006e0 <HAL_GetTick>
 80021d4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	4233      	tst	r3, r6
 80021da:	d007      	beq.n	80021ec <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	686a      	ldr	r2, [r5, #4]
 80021de:	6963      	ldr	r3, [r4, #20]
 80021e0:	4962      	ldr	r1, [pc, #392]	; (800236c <HAL_RCC_OscConfig+0x2f8>)
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	400a      	ands	r2, r1
 80021e6:	4313      	orrs	r3, r2
 80021e8:	606b      	str	r3, [r5, #4]
 80021ea:	e751      	b.n	8002090 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fa78 	bl	80006e0 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	2802      	cmp	r0, #2
 80021f4:	d9ef      	bls.n	80021d6 <HAL_RCC_OscConfig+0x162>
 80021f6:	e781      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	4a61      	ldr	r2, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4013      	ands	r3, r2
 8002200:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002202:	f7fe fa6d 	bl	80006e0 <HAL_GetTick>
 8002206:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	00f6      	lsls	r6, r6, #3
 800220a:	682b      	ldr	r3, [r5, #0]
 800220c:	4233      	tst	r3, r6
 800220e:	d100      	bne.n	8002212 <HAL_RCC_OscConfig+0x19e>
 8002210:	e73e      	b.n	8002090 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe fa65 	bl	80006e0 <HAL_GetTick>
 8002216:	1bc0      	subs	r0, r0, r7
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f6      	bls.n	800220a <HAL_RCC_OscConfig+0x196>
 800221c:	e76e      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800221e:	2138      	movs	r1, #56	; 0x38
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x2ec>)
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	001d      	movs	r5, r3
 8002226:	400a      	ands	r2, r1
 8002228:	2a18      	cmp	r2, #24
 800222a:	d108      	bne.n	800223e <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	079b      	lsls	r3, r3, #30
 8002230:	d400      	bmi.n	8002234 <HAL_RCC_OscConfig+0x1c0>
 8002232:	e731      	b.n	8002098 <HAL_RCC_OscConfig+0x24>
 8002234:	69a3      	ldr	r3, [r4, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d000      	beq.n	800223c <HAL_RCC_OscConfig+0x1c8>
 800223a:	e72d      	b.n	8002098 <HAL_RCC_OscConfig+0x24>
 800223c:	e71f      	b.n	800207e <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	69a2      	ldr	r2, [r4, #24]
 8002240:	2301      	movs	r3, #1
 8002242:	2a00      	cmp	r2, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8002246:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002248:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 800224a:	4313      	orrs	r3, r2
 800224c:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800224e:	f7fe fa47 	bl	80006e0 <HAL_GetTick>
 8002252:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002254:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002256:	4233      	tst	r3, r6
 8002258:	d000      	beq.n	800225c <HAL_RCC_OscConfig+0x1e8>
 800225a:	e71d      	b.n	8002098 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe fa40 	bl	80006e0 <HAL_GetTick>
 8002260:	1bc0      	subs	r0, r0, r7
 8002262:	2802      	cmp	r0, #2
 8002264:	d9f6      	bls.n	8002254 <HAL_RCC_OscConfig+0x1e0>
 8002266:	e749      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002268:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226a:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 800226c:	439a      	bics	r2, r3
 800226e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002270:	f7fe fa36 	bl	80006e0 <HAL_GetTick>
 8002274:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002276:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002278:	4233      	tst	r3, r6
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x20a>
 800227c:	e70c      	b.n	8002098 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7fe fa2f 	bl	80006e0 <HAL_GetTick>
 8002282:	1bc0      	subs	r0, r0, r7
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f6      	bls.n	8002276 <HAL_RCC_OscConfig+0x202>
 8002288:	e738      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800228a:	2138      	movs	r1, #56	; 0x38
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x2ec>)
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	001d      	movs	r5, r3
 8002292:	400a      	ands	r2, r1
 8002294:	2a20      	cmp	r2, #32
 8002296:	d108      	bne.n	80022aa <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	079b      	lsls	r3, r3, #30
 800229c:	d400      	bmi.n	80022a0 <HAL_RCC_OscConfig+0x22c>
 800229e:	e6ff      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c>
 80022a0:	68a3      	ldr	r3, [r4, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d000      	beq.n	80022a8 <HAL_RCC_OscConfig+0x234>
 80022a6:	e6fb      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c>
 80022a8:	e6e9      	b.n	800207e <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	0552      	lsls	r2, r2, #21
 80022b0:	4213      	tst	r3, r2
 80022b2:	d100      	bne.n	80022b6 <HAL_RCC_OscConfig+0x242>
 80022b4:	e0f6      	b.n	80024a4 <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	2780      	movs	r7, #128	; 0x80
 80022ba:	4e32      	ldr	r6, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022be:	6833      	ldr	r3, [r6, #0]
 80022c0:	007f      	lsls	r7, r7, #1
 80022c2:	423b      	tst	r3, r7
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d122      	bne.n	8002312 <HAL_RCC_OscConfig+0x29e>
 80022cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80022ce:	4313      	orrs	r3, r2
 80022d0:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80022d2:	f7fe fa05 	bl	80006e0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80022d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80022dc:	423b      	tst	r3, r7
 80022de:	d038      	beq.n	8002352 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 80022e0:	9b00      	ldr	r3, [sp, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d000      	beq.n	80022e8 <HAL_RCC_OscConfig+0x274>
 80022e6:	e6db      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80022ea:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x314>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	63eb      	str	r3, [r5, #60]	; 0x3c
 80022f0:	e6d6      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f2:	6833      	ldr	r3, [r6, #0]
 80022f4:	433b      	orrs	r3, r7
 80022f6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80022f8:	f7fe f9f2 	bl	80006e0 <HAL_GetTick>
 80022fc:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fe:	6833      	ldr	r3, [r6, #0]
 8002300:	423b      	tst	r3, r7
 8002302:	d1e0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe f9ec 	bl	80006e0 <HAL_GetTick>
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	1ac0      	subs	r0, r0, r3
 800230c:	2802      	cmp	r0, #2
 800230e:	d9f6      	bls.n	80022fe <HAL_RCC_OscConfig+0x28a>
 8002310:	e6f4      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002314:	2b05      	cmp	r3, #5
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b0>
 8002318:	3b01      	subs	r3, #1
 800231a:	4313      	orrs	r3, r2
 800231c:	65eb      	str	r3, [r5, #92]	; 0x5c
 800231e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002320:	2301      	movs	r3, #1
 8002322:	e7d4      	b.n	80022ce <HAL_RCC_OscConfig+0x25a>
 8002324:	2101      	movs	r1, #1
 8002326:	438a      	bics	r2, r1
 8002328:	65ea      	str	r2, [r5, #92]	; 0x5c
 800232a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800232c:	3103      	adds	r1, #3
 800232e:	438a      	bics	r2, r1
 8002330:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1cd      	bne.n	80022d2 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8002336:	f7fe f9d3 	bl	80006e0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800233c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002340:	423b      	tst	r3, r7
 8002342:	d0cd      	beq.n	80022e0 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe f9cc 	bl	80006e0 <HAL_GetTick>
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x318>)
 800234a:	1b80      	subs	r0, r0, r6
 800234c:	4298      	cmp	r0, r3
 800234e:	d9f6      	bls.n	800233e <HAL_RCC_OscConfig+0x2ca>
 8002350:	e6d4      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe f9c5 	bl	80006e0 <HAL_GetTick>
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x318>)
 8002358:	1b80      	subs	r0, r0, r6
 800235a:	4298      	cmp	r0, r3
 800235c:	d9bd      	bls.n	80022da <HAL_RCC_OscConfig+0x266>
 800235e:	e6cd      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
 8002360:	40021000 	.word	0x40021000
 8002364:	fffeffff 	.word	0xfffeffff
 8002368:	fffbffff 	.word	0xfffbffff
 800236c:	ffff80ff 	.word	0xffff80ff
 8002370:	ffffc7ff 	.word	0xffffc7ff
 8002374:	00f42400 	.word	0x00f42400
 8002378:	20000200 	.word	0x20000200
 800237c:	20000004 	.word	0x20000004
 8002380:	fffffeff 	.word	0xfffffeff
 8002384:	40007000 	.word	0x40007000
 8002388:	efffffff 	.word	0xefffffff
 800238c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002390:	2038      	movs	r0, #56	; 0x38
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x444>)
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	001d      	movs	r5, r3
 8002398:	4001      	ands	r1, r0
 800239a:	2910      	cmp	r1, #16
 800239c:	d054      	beq.n	8002448 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4946      	ldr	r1, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x448>)
 80023a2:	400b      	ands	r3, r1
 80023a4:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a6:	2a02      	cmp	r2, #2
 80023a8:	d137      	bne.n	800241a <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 80023aa:	f7fe f999 	bl	80006e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80023b0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	04b6      	lsls	r6, r6, #18
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	4233      	tst	r3, r6
 80023b8:	d129      	bne.n	800240e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023bc:	6a23      	ldr	r3, [r4, #32]
 80023be:	68ea      	ldr	r2, [r5, #12]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	493f      	ldr	r1, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x44c>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	4313      	orrs	r3, r2
 80023c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023ca:	4313      	orrs	r3, r2
 80023cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023ce:	4313      	orrs	r3, r2
 80023d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80023d2:	4313      	orrs	r3, r2
 80023d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	0212      	lsls	r2, r2, #8
 80023da:	4313      	orrs	r3, r2
 80023dc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	682a      	ldr	r2, [r5, #0]
 80023e2:	045b      	lsls	r3, r3, #17
 80023e4:	4313      	orrs	r3, r2
 80023e6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	68ea      	ldr	r2, [r5, #12]
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80023f2:	f7fe f975 	bl	80006e0 <HAL_GetTick>
 80023f6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f8:	04a4      	lsls	r4, r4, #18
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	4223      	tst	r3, r4
 80023fe:	d000      	beq.n	8002402 <HAL_RCC_OscConfig+0x38e>
 8002400:	e652      	b.n	80020a8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe f96d 	bl	80006e0 <HAL_GetTick>
 8002406:	1b80      	subs	r0, r0, r6
 8002408:	2802      	cmp	r0, #2
 800240a:	d9f6      	bls.n	80023fa <HAL_RCC_OscConfig+0x386>
 800240c:	e676      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe f967 	bl	80006e0 <HAL_GetTick>
 8002412:	1bc0      	subs	r0, r0, r7
 8002414:	2802      	cmp	r0, #2
 8002416:	d9cd      	bls.n	80023b4 <HAL_RCC_OscConfig+0x340>
 8002418:	e670      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800241a:	2203      	movs	r2, #3
 800241c:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002420:	4393      	bics	r3, r2
 8002422:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002424:	68eb      	ldr	r3, [r5, #12]
 8002426:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800242a:	4013      	ands	r3, r2
 800242c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800242e:	f7fe f957 	bl	80006e0 <HAL_GetTick>
 8002432:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	4223      	tst	r3, r4
 8002438:	d100      	bne.n	800243c <HAL_RCC_OscConfig+0x3c8>
 800243a:	e635      	b.n	80020a8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe f950 	bl	80006e0 <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	2802      	cmp	r0, #2
 8002444:	d9f6      	bls.n	8002434 <HAL_RCC_OscConfig+0x3c0>
 8002446:	e659      	b.n	80020fc <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	2a01      	cmp	r2, #1
 800244a:	d100      	bne.n	800244e <HAL_RCC_OscConfig+0x3da>
 800244c:	e617      	b.n	800207e <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 800244e:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002450:	2303      	movs	r3, #3
 8002452:	6a22      	ldr	r2, [r4, #32]
 8002454:	4003      	ands	r3, r0
 8002456:	4293      	cmp	r3, r2
 8002458:	d000      	beq.n	800245c <HAL_RCC_OscConfig+0x3e8>
 800245a:	e610      	b.n	800207e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800245c:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	4293      	cmp	r3, r2
 8002464:	d000      	beq.n	8002468 <HAL_RCC_OscConfig+0x3f4>
 8002466:	e60a      	b.n	800207e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002468:	22fe      	movs	r2, #254	; 0xfe
 800246a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800246c:	01d2      	lsls	r2, r2, #7
 800246e:	4002      	ands	r2, r0
 8002470:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d000      	beq.n	8002478 <HAL_RCC_OscConfig+0x404>
 8002476:	e602      	b.n	800207e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002478:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800247c:	039b      	lsls	r3, r3, #14
 800247e:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002480:	4293      	cmp	r3, r2
 8002482:	d000      	beq.n	8002486 <HAL_RCC_OscConfig+0x412>
 8002484:	e5fb      	b.n	800207e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002486:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002488:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800248a:	051b      	lsls	r3, r3, #20
 800248c:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800248e:	4293      	cmp	r3, r2
 8002490:	d000      	beq.n	8002494 <HAL_RCC_OscConfig+0x420>
 8002492:	e5f4      	b.n	800207e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002494:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002496:	0f40      	lsrs	r0, r0, #29
 8002498:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800249a:	1ac0      	subs	r0, r0, r3
 800249c:	1e43      	subs	r3, r0, #1
 800249e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80024a0:	b2c0      	uxtb	r0, r0
 80024a2:	e5ed      	b.n	8002080 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80024a6:	4313      	orrs	r3, r2
 80024a8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80024aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80024ac:	4013      	ands	r3, r2
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e700      	b.n	80022b8 <HAL_RCC_OscConfig+0x244>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40021000 	.word	0x40021000
 80024bc:	feffffff 	.word	0xfeffffff
 80024c0:	11c1808c 	.word	0x11c1808c
 80024c4:	eefeffff 	.word	0xeefeffff

080024c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024c8:	2338      	movs	r3, #56	; 0x38
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_RCC_GetSysClockFreq+0x80>)
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ce:	6891      	ldr	r1, [r2, #8]
 80024d0:	0014      	movs	r4, r2
 80024d2:	4219      	tst	r1, r3
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024d6:	2101      	movs	r1, #1
 80024d8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024da:	481c      	ldr	r0, [pc, #112]	; (800254c <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	0f5b      	lsrs	r3, r3, #29
 80024e0:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80024e2:	f7fd fe35 	bl	8000150 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024e8:	6891      	ldr	r1, [r2, #8]
 80024ea:	4019      	ands	r1, r3
 80024ec:	2908      	cmp	r1, #8
 80024ee:	d025      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024f0:	6891      	ldr	r1, [r2, #8]
 80024f2:	4019      	ands	r1, r3
 80024f4:	2910      	cmp	r1, #16
 80024f6:	d115      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024f8:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fa:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024fc:	43db      	mvns	r3, r3
 80024fe:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002500:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002502:	0649      	lsls	r1, r1, #25
 8002504:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002506:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002508:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800250a:	4015      	ands	r5, r2
    switch (pllsource)
 800250c:	079b      	lsls	r3, r3, #30
 800250e:	d107      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002510:	480f      	ldr	r0, [pc, #60]	; (8002550 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002512:	f7fd fe1d 	bl	8000150 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002516:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002518:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800251a:	0f49      	lsrs	r1, r1, #29
 800251c:	3101      	adds	r1, #1
 800251e:	e7e0      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <HAL_RCC_GetSysClockFreq+0x84>)
 8002522:	e7f6      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002524:	6891      	ldr	r1, [r2, #8]
 8002526:	4019      	ands	r1, r3
 8002528:	2920      	cmp	r1, #32
 800252a:	d009      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800252c:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800252e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002530:	4013      	ands	r3, r2
 8002532:	2b18      	cmp	r3, #24
 8002534:	d1d7      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8002536:	20fa      	movs	r0, #250	; 0xfa
 8002538:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 800253a:	e7d4      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <HAL_RCC_GetSysClockFreq+0x88>)
 800253e:	e7d2      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8002540:	2080      	movs	r0, #128	; 0x80
 8002542:	0200      	lsls	r0, r0, #8
 8002544:	e7cf      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1e>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40021000 	.word	0x40021000
 800254c:	00f42400 	.word	0x00f42400
 8002550:	007a1200 	.word	0x007a1200

08002554 <HAL_RCC_ClockConfig>:
{
 8002554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002556:	0005      	movs	r5, r0
 8002558:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800255a:	2800      	cmp	r0, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800255e:	2001      	movs	r0, #1
}
 8002560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002562:	2707      	movs	r7, #7
 8002564:	4c4a      	ldr	r4, [pc, #296]	; (8002690 <HAL_RCC_ClockConfig+0x13c>)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	403b      	ands	r3, r7
 800256a:	428b      	cmp	r3, r1
 800256c:	d32a      	bcc.n	80025c4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256e:	6829      	ldr	r1, [r5, #0]
 8002570:	078b      	lsls	r3, r1, #30
 8002572:	d43b      	bmi.n	80025ec <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002574:	07cb      	lsls	r3, r1, #31
 8002576:	d448      	bmi.n	800260a <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	2707      	movs	r7, #7
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	403b      	ands	r3, r7
 800257e:	429e      	cmp	r6, r3
 8002580:	d20a      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	43bb      	bics	r3, r7
 8002586:	4333      	orrs	r3, r6
 8002588:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800258a:	f7fe f8a9 	bl	80006e0 <HAL_GetTick>
 800258e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	403b      	ands	r3, r7
 8002594:	429e      	cmp	r6, r3
 8002596:	d16b      	bne.n	8002670 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	4c3e      	ldr	r4, [pc, #248]	; (8002694 <HAL_RCC_ClockConfig+0x140>)
 800259c:	075b      	lsls	r3, r3, #29
 800259e:	d46f      	bmi.n	8002680 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025a0:	f7ff ff92 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80025a4:	68a3      	ldr	r3, [r4, #8]
 80025a6:	4a3c      	ldr	r2, [pc, #240]	; (8002698 <HAL_RCC_ClockConfig+0x144>)
 80025a8:	051b      	lsls	r3, r3, #20
 80025aa:	0f1b      	lsrs	r3, r3, #28
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	221f      	movs	r2, #31
 80025b2:	4013      	ands	r3, r2
 80025b4:	40d8      	lsrs	r0, r3
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_ClockConfig+0x148>)
 80025b8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_ClockConfig+0x14c>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f7fe f847 	bl	8000650 <HAL_InitTick>
 80025c2:	e7cd      	b.n	8002560 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	43bb      	bics	r3, r7
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80025cc:	f7fe f888 	bl	80006e0 <HAL_GetTick>
 80025d0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	403b      	ands	r3, r7
 80025d6:	429e      	cmp	r6, r3
 80025d8:	d0c9      	beq.n	800256e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe f881 	bl	80006e0 <HAL_GetTick>
 80025de:	9b01      	ldr	r3, [sp, #4]
 80025e0:	1ac0      	subs	r0, r0, r3
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 80025e4:	4298      	cmp	r0, r3
 80025e6:	d9f4      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80025e8:	2003      	movs	r0, #3
 80025ea:	e7b9      	b.n	8002560 <HAL_RCC_ClockConfig+0xc>
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ee:	074b      	lsls	r3, r1, #29
 80025f0:	d504      	bpl.n	80025fc <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025f2:	23e0      	movs	r3, #224	; 0xe0
 80025f4:	6890      	ldr	r0, [r2, #8]
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4303      	orrs	r3, r0
 80025fa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	482a      	ldr	r0, [pc, #168]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 8002600:	4003      	ands	r3, r0
 8002602:	68a8      	ldr	r0, [r5, #8]
 8002604:	4303      	orrs	r3, r0
 8002606:	6093      	str	r3, [r2, #8]
 8002608:	e7b4      	b.n	8002574 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	686a      	ldr	r2, [r5, #4]
 800260c:	4f21      	ldr	r7, [pc, #132]	; (8002694 <HAL_RCC_ClockConfig+0x140>)
 800260e:	2a01      	cmp	r2, #1
 8002610:	d119      	bne.n	8002646 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	039b      	lsls	r3, r3, #14
 8002616:	d5a2      	bpl.n	800255e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002618:	2107      	movs	r1, #7
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	438b      	bics	r3, r1
 800261e:	4313      	orrs	r3, r2
 8002620:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002622:	f7fe f85d 	bl	80006e0 <HAL_GetTick>
 8002626:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002628:	2338      	movs	r3, #56	; 0x38
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	401a      	ands	r2, r3
 800262e:	686b      	ldr	r3, [r5, #4]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	429a      	cmp	r2, r3
 8002634:	d0a0      	beq.n	8002578 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002636:	f7fe f853 	bl	80006e0 <HAL_GetTick>
 800263a:	9b01      	ldr	r3, [sp, #4]
 800263c:	1ac0      	subs	r0, r0, r3
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 8002640:	4298      	cmp	r0, r3
 8002642:	d9f1      	bls.n	8002628 <HAL_RCC_ClockConfig+0xd4>
 8002644:	e7d0      	b.n	80025e8 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002646:	2a02      	cmp	r2, #2
 8002648:	d103      	bne.n	8002652 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	d4e3      	bmi.n	8002618 <HAL_RCC_ClockConfig+0xc4>
 8002650:	e785      	b.n	800255e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002652:	2a00      	cmp	r2, #0
 8002654:	d103      	bne.n	800265e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	055b      	lsls	r3, r3, #21
 800265a:	d4dd      	bmi.n	8002618 <HAL_RCC_ClockConfig+0xc4>
 800265c:	e77f      	b.n	800255e <HAL_RCC_ClockConfig+0xa>
 800265e:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002660:	2a03      	cmp	r2, #3
 8002662:	d103      	bne.n	800266c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002664:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4219      	tst	r1, r3
 8002668:	d1d6      	bne.n	8002618 <HAL_RCC_ClockConfig+0xc4>
 800266a:	e778      	b.n	800255e <HAL_RCC_ClockConfig+0xa>
 800266c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800266e:	e7fa      	b.n	8002666 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe f836 	bl	80006e0 <HAL_GetTick>
 8002674:	9b01      	ldr	r3, [sp, #4]
 8002676:	1ac0      	subs	r0, r0, r3
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 800267a:	4298      	cmp	r0, r3
 800267c:	d988      	bls.n	8002590 <HAL_RCC_ClockConfig+0x3c>
 800267e:	e7b3      	b.n	80025e8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	68a3      	ldr	r3, [r4, #8]
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x158>)
 8002684:	4013      	ands	r3, r2
 8002686:	68ea      	ldr	r2, [r5, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	e788      	b.n	80025a0 <HAL_RCC_ClockConfig+0x4c>
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	40022000 	.word	0x40022000
 8002694:	40021000 	.word	0x40021000
 8002698:	08007af0 	.word	0x08007af0
 800269c:	20000200 	.word	0x20000200
 80026a0:	20000004 	.word	0x20000004
 80026a4:	00001388 	.word	0x00001388
 80026a8:	fffff0ff 	.word	0xfffff0ff
 80026ac:	ffff8fff 	.word	0xffff8fff

080026b0 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b2:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	045b      	lsls	r3, r3, #17
 80026b8:	0f5b      	lsrs	r3, r3, #29
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	589b      	ldr	r3, [r3, r2]
 80026be:	221f      	movs	r2, #31
 80026c0:	4013      	ands	r3, r2
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c4:	6810      	ldr	r0, [r2, #0]
 80026c6:	40d8      	lsrs	r0, r3
}
 80026c8:	4770      	bx	lr
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08007b30 	.word	0x08007b30
 80026d4:	20000200 	.word	0x20000200

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026dc:	682b      	ldr	r3, [r5, #0]
{
 80026de:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e0:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e2:	039b      	lsls	r3, r3, #14
 80026e4:	d550      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	4c6f      	ldr	r4, [pc, #444]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	0552      	lsls	r2, r2, #21
 80026ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f0:	4213      	tst	r3, r2
 80026f2:	d108      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026f6:	4313      	orrs	r3, r2
 80026f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80026fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026fc:	4013      	ands	r3, r2
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002706:	2780      	movs	r7, #128	; 0x80
 8002708:	4e68      	ldr	r6, [pc, #416]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270a:	007f      	lsls	r7, r7, #1
 800270c:	6833      	ldr	r3, [r6, #0]
 800270e:	433b      	orrs	r3, r7
 8002710:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002712:	f7fd ffe5 	bl	80006e0 <HAL_GetTick>
 8002716:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002718:	6833      	ldr	r3, [r6, #0]
 800271a:	423b      	tst	r3, r7
 800271c:	d026      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800271e:	23c0      	movs	r3, #192	; 0xc0
 8002720:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002726:	d00f      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002728:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800272a:	4293      	cmp	r3, r2
 800272c:	d00c      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800272e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002730:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002732:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002734:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	0252      	lsls	r2, r2, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800273e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002740:	495c      	ldr	r1, [pc, #368]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002742:	400a      	ands	r2, r1
 8002744:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002746:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002748:	07db      	lsls	r3, r3, #31
 800274a:	d507      	bpl.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fd ffc8 	bl	80006e0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002750:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002752:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002756:	423b      	tst	r3, r7
 8002758:	d100      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800275a:	e09d      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800275e:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002760:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002762:	4013      	ands	r3, r2
 8002764:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002766:	4313      	orrs	r3, r2
 8002768:	65e3      	str	r3, [r4, #92]	; 0x5c
 800276a:	e006      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fd ffb8 	bl	80006e0 <HAL_GetTick>
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	1ac0      	subs	r0, r0, r3
 8002774:	2802      	cmp	r0, #2
 8002776:	d9cf      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277a:	9b00      	ldr	r3, [sp, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d103      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002782:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002784:	4013      	ands	r3, r2
 8002786:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	07da      	lsls	r2, r3, #31
 800278c:	d506      	bpl.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278e:	2403      	movs	r4, #3
 8002790:	4945      	ldr	r1, [pc, #276]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002794:	43a2      	bics	r2, r4
 8002796:	686c      	ldr	r4, [r5, #4]
 8002798:	4322      	orrs	r2, r4
 800279a:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279c:	079a      	lsls	r2, r3, #30
 800279e:	d506      	bpl.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	240c      	movs	r4, #12
 80027a2:	4941      	ldr	r1, [pc, #260]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027a6:	43a2      	bics	r2, r4
 80027a8:	68ac      	ldr	r4, [r5, #8]
 80027aa:	4322      	orrs	r2, r4
 80027ac:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ae:	069a      	lsls	r2, r3, #26
 80027b0:	d506      	bpl.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027b2:	493d      	ldr	r1, [pc, #244]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	4c41      	ldr	r4, [pc, #260]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027b6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027b8:	4022      	ands	r2, r4
 80027ba:	68ec      	ldr	r4, [r5, #12]
 80027bc:	4322      	orrs	r2, r4
 80027be:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c0:	059a      	lsls	r2, r3, #22
 80027c2:	d506      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c4:	4938      	ldr	r1, [pc, #224]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	4c3e      	ldr	r4, [pc, #248]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80027c8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027ca:	4022      	ands	r2, r4
 80027cc:	69ac      	ldr	r4, [r5, #24]
 80027ce:	4322      	orrs	r2, r4
 80027d0:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027d2:	055a      	lsls	r2, r3, #21
 80027d4:	d506      	bpl.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d6:	4934      	ldr	r1, [pc, #208]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d8:	4c3a      	ldr	r4, [pc, #232]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80027da:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027dc:	4022      	ands	r2, r4
 80027de:	69ec      	ldr	r4, [r5, #28]
 80027e0:	4322      	orrs	r2, r4
 80027e2:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	065a      	lsls	r2, r3, #25
 80027e6:	d506      	bpl.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e8:	492f      	ldr	r1, [pc, #188]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	4c37      	ldr	r4, [pc, #220]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80027ec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027ee:	4022      	ands	r2, r4
 80027f0:	692c      	ldr	r4, [r5, #16]
 80027f2:	4322      	orrs	r2, r4
 80027f4:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f6:	045a      	lsls	r2, r3, #17
 80027f8:	d50f      	bpl.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fa:	492b      	ldr	r1, [pc, #172]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	6a2c      	ldr	r4, [r5, #32]
 80027fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	0892      	lsrs	r2, r2, #2
 8002804:	4322      	orrs	r2, r4
 8002806:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	05d2      	lsls	r2, r2, #23
 800280c:	4294      	cmp	r4, r2
 800280e:	d104      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	68cc      	ldr	r4, [r1, #12]
 8002814:	0252      	lsls	r2, r2, #9
 8002816:	4322      	orrs	r2, r4
 8002818:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281a:	031a      	lsls	r2, r3, #12
 800281c:	d506      	bpl.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800281e:	2440      	movs	r4, #64	; 0x40
 8002820:	4921      	ldr	r1, [pc, #132]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002824:	43a2      	bics	r2, r4
 8002826:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002828:	4322      	orrs	r2, r4
 800282a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800282c:	029a      	lsls	r2, r3, #10
 800282e:	d50f      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002830:	491d      	ldr	r1, [pc, #116]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002832:	4e26      	ldr	r6, [pc, #152]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002834:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002836:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8002838:	4032      	ands	r2, r6
 800283a:	4322      	orrs	r2, r4
 800283c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	03d2      	lsls	r2, r2, #15
 8002842:	4294      	cmp	r4, r2
 8002844:	d104      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	68cc      	ldr	r4, [r1, #12]
 800284a:	0452      	lsls	r2, r2, #17
 800284c:	4322      	orrs	r2, r4
 800284e:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002850:	025a      	lsls	r2, r3, #9
 8002852:	d50d      	bpl.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002854:	4c14      	ldr	r4, [pc, #80]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	4e1e      	ldr	r6, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002858:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800285a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800285c:	4031      	ands	r1, r6
 800285e:	4311      	orrs	r1, r2
 8002860:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0449      	lsls	r1, r1, #17
 8002866:	428a      	cmp	r2, r1
 8002868:	d102      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800286a:	68e1      	ldr	r1, [r4, #12]
 800286c:	430a      	orrs	r2, r1
 800286e:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002870:	051b      	lsls	r3, r3, #20
 8002872:	d50f      	bpl.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4c17      	ldr	r4, [pc, #92]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002878:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800287a:	696a      	ldr	r2, [r5, #20]
 800287c:	4023      	ands	r3, r4
 800287e:	4313      	orrs	r3, r2
 8002880:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	429a      	cmp	r2, r3
 8002888:	d104      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	68ca      	ldr	r2, [r1, #12]
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8002894:	b005      	add	sp, #20
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fd ff22 	bl	80006e0 <HAL_GetTick>
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800289e:	1b80      	subs	r0, r0, r6
 80028a0:	4298      	cmp	r0, r3
 80028a2:	d800      	bhi.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80028a4:	e756      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028a6:	e767      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
 80028b0:	fffffcff 	.word	0xfffffcff
 80028b4:	fffeffff 	.word	0xfffeffff
 80028b8:	efffffff 	.word	0xefffffff
 80028bc:	fffff3ff 	.word	0xfffff3ff
 80028c0:	fff3ffff 	.word	0xfff3ffff
 80028c4:	ffcfffff 	.word	0xffcfffff
 80028c8:	ffffcfff 	.word	0xffffcfff
 80028cc:	ffbfffff 	.word	0xffbfffff
 80028d0:	feffffff 	.word	0xfeffffff
 80028d4:	ffff3fff 	.word	0xffff3fff
 80028d8:	00001388 	.word	0x00001388

080028dc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80028dc:	21a0      	movs	r1, #160	; 0xa0
 80028de:	6802      	ldr	r2, [r0, #0]
{
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80028e2:	68d3      	ldr	r3, [r2, #12]
{
 80028e4:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80028e6:	438b      	bics	r3, r1
 80028e8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80028ea:	f7fd fef9 	bl	80006e0 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028ee:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80028f0:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028f2:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028f4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	422b      	tst	r3, r5
 80028fc:	d001      	beq.n	8002902 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80028fe:	2000      	movs	r0, #0
}
 8002900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002902:	f7fd feed 	bl	80006e0 <HAL_GetTick>
 8002906:	1b80      	subs	r0, r0, r6
 8002908:	42b8      	cmp	r0, r7
 800290a:	d9f4      	bls.n	80028f6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800290c:	2003      	movs	r0, #3
 800290e:	e7f7      	b.n	8002900 <HAL_RTC_WaitForSynchro+0x24>

08002910 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002912:	2740      	movs	r7, #64	; 0x40
 8002914:	6803      	ldr	r3, [r0, #0]
{
 8002916:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002918:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 800291a:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800291c:	423a      	tst	r2, r7
 800291e:	d10c      	bne.n	800293a <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	68d9      	ldr	r1, [r3, #12]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002928:	f7fd feda 	bl	80006e0 <HAL_GetTick>
 800292c:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	423b      	tst	r3, r7
 8002934:	d101      	bne.n	800293a <RTC_EnterInitMode+0x2a>
 8002936:	2c03      	cmp	r4, #3
 8002938:	d101      	bne.n	800293e <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 800293a:	0020      	movs	r0, r4
 800293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800293e:	f7fd fecf 	bl	80006e0 <HAL_GetTick>
 8002942:	23fa      	movs	r3, #250	; 0xfa
 8002944:	1b80      	subs	r0, r0, r6
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4298      	cmp	r0, r3
 800294a:	d9f0      	bls.n	800292e <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800294c:	002b      	movs	r3, r5
 800294e:	2403      	movs	r4, #3
 8002950:	3329      	adds	r3, #41	; 0x29
 8002952:	701c      	strb	r4, [r3, #0]
 8002954:	e7eb      	b.n	800292e <RTC_EnterInitMode+0x1e>
	...

08002958 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002958:	2280      	movs	r2, #128	; 0x80
{
 800295a:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800295c:	4c0f      	ldr	r4, [pc, #60]	; (800299c <RTC_ExitInitMode+0x44>)
{
 800295e:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002960:	68e3      	ldr	r3, [r4, #12]
 8002962:	4393      	bics	r3, r2
 8002964:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002966:	69a3      	ldr	r3, [r4, #24]
 8002968:	3a60      	subs	r2, #96	; 0x60
 800296a:	4213      	tst	r3, r2
 800296c:	d107      	bne.n	800297e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800296e:	f7ff ffb5 	bl	80028dc <HAL_RTC_WaitForSynchro>
 8002972:	2800      	cmp	r0, #0
 8002974:	d002      	beq.n	800297c <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002976:	2003      	movs	r0, #3
 8002978:	3529      	adds	r5, #41	; 0x29
 800297a:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800297c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800297e:	69a3      	ldr	r3, [r4, #24]
 8002980:	4393      	bics	r3, r2
 8002982:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002984:	f7ff ffaa 	bl	80028dc <HAL_RTC_WaitForSynchro>
 8002988:	2800      	cmp	r0, #0
 800298a:	d002      	beq.n	8002992 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800298c:	2003      	movs	r0, #3
 800298e:	3529      	adds	r5, #41	; 0x29
 8002990:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002992:	2320      	movs	r3, #32
 8002994:	69a2      	ldr	r2, [r4, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61a3      	str	r3, [r4, #24]
 800299a:	e7ef      	b.n	800297c <RTC_ExitInitMode+0x24>
 800299c:	40002800 	.word	0x40002800

080029a0 <HAL_RTC_Init>:
{
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 80029a4:	2001      	movs	r0, #1
  if(hrtc != NULL)
 80029a6:	2c00      	cmp	r4, #0
 80029a8:	d047      	beq.n	8002a3a <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029aa:	0025      	movs	r5, r4
 80029ac:	3529      	adds	r5, #41	; 0x29
 80029ae:	782b      	ldrb	r3, [r5, #0]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d108      	bne.n	80029c8 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 80029b6:	0022      	movs	r2, r4
 80029b8:	3228      	adds	r2, #40	; 0x28
 80029ba:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80029bc:	2388      	movs	r3, #136	; 0x88
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 80029c2:	0020      	movs	r0, r4
 80029c4:	f002 fbe4 	bl	8005190 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029c8:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ca:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029cc:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ce:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 80029d0:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
 80029d4:	3a77      	subs	r2, #119	; 0x77
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80029d8:	f7ff ff9a 	bl	8002910 <RTC_EnterInitMode>
    if(status == HAL_OK)
 80029dc:	2800      	cmp	r0, #0
 80029de:	d125      	bne.n	8002a2c <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	4916      	ldr	r1, [pc, #88]	; (8002a3c <HAL_RTC_Init+0x9c>)
 80029e4:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029e6:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80029e8:	400a      	ands	r2, r1
 80029ea:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	6999      	ldr	r1, [r3, #24]
 80029f0:	4302      	orrs	r2, r0
 80029f2:	69e0      	ldr	r0, [r4, #28]
 80029f4:	4302      	orrs	r2, r0
 80029f6:	430a      	orrs	r2, r1
 80029f8:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029fa:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 80029fc:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a00:	68e2      	ldr	r2, [r4, #12]
 8002a02:	6919      	ldr	r1, [r3, #16]
 8002a04:	0412      	lsls	r2, r2, #16
 8002a06:	430a      	orrs	r2, r1
 8002a08:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8002a0a:	f7ff ffa5 	bl	8002958 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002a12:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a14:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002a16:	6993      	ldr	r3, [r2, #24]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a20:	6991      	ldr	r1, [r2, #24]
 8002a22:	4333      	orrs	r3, r6
 8002a24:	69a6      	ldr	r6, [r4, #24]
 8002a26:	4333      	orrs	r3, r6
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a2c:	22ff      	movs	r2, #255	; 0xff
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8002a36:	2301      	movs	r3, #1
 8002a38:	702b      	strb	r3, [r5, #0]
}
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	fb8fffbf 	.word	0xfb8fffbf

08002a40 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a40:	230a      	movs	r3, #10
 8002a42:	0902      	lsrs	r2, r0, #4
 8002a44:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002a46:	220f      	movs	r2, #15
 8002a48:	4010      	ands	r0, r2
 8002a4a:	1818      	adds	r0, r3, r0
 8002a4c:	b2c0      	uxtb	r0, r0
}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_RTC_GetTime>:
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002a54:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a56:	6801      	ldr	r1, [r0, #0]
 8002a58:	688b      	ldr	r3, [r1, #8]
 8002a5a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002a5c:	690b      	ldr	r3, [r1, #16]
 8002a5e:	045b      	lsls	r3, r3, #17
 8002a60:	0c5b      	lsrs	r3, r3, #17
 8002a62:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002a64:	680b      	ldr	r3, [r1, #0]
 8002a66:	490d      	ldr	r1, [pc, #52]	; (8002a9c <HAL_RTC_GetTime+0x4c>)
 8002a68:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002a6a:	0298      	lsls	r0, r3, #10
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002a6c:	0a1e      	lsrs	r6, r3, #8
 8002a6e:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002a70:	0e80      	lsrs	r0, r0, #26
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002a72:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002a74:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002a76:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002a78:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002a7a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002a7c:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_RTC_GetTime+0x48>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002a82:	f7ff ffdd 	bl	8002a40 <RTC_Bcd2ToByte>
 8002a86:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002a88:	0030      	movs	r0, r6
 8002a8a:	f7ff ffd9 	bl	8002a40 <RTC_Bcd2ToByte>
 8002a8e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002a90:	0028      	movs	r0, r5
 8002a92:	f7ff ffd5 	bl	8002a40 <RTC_Bcd2ToByte>
 8002a96:	70a0      	strb	r0, [r4, #2]
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	007f7f7f 	.word	0x007f7f7f

08002aa0 <HAL_RTC_GetDate>:
{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002aa2:	253f      	movs	r5, #63	; 0x3f
{
 8002aa4:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	490d      	ldr	r1, [pc, #52]	; (8002ae0 <HAL_RTC_GetDate+0x40>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002aae:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ab0:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002ab2:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002ab4:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ab6:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002ab8:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002aba:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002abc:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002abe:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002ac0:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ac6:	f7ff ffbb 	bl	8002a40 <RTC_Bcd2ToByte>
 8002aca:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002acc:	0030      	movs	r0, r6
 8002ace:	f7ff ffb7 	bl	8002a40 <RTC_Bcd2ToByte>
 8002ad2:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ad4:	0028      	movs	r0, r5
 8002ad6:	f7ff ffb3 	bl	8002a40 <RTC_Bcd2ToByte>
 8002ada:	70a0      	strb	r0, [r4, #2]
}
 8002adc:	2000      	movs	r0, #0
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	00ffff3f 	.word	0x00ffff3f

08002ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002aea:	2c00      	cmp	r4, #0
 8002aec:	d04b      	beq.n	8002b86 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af4:	355d      	adds	r5, #93	; 0x5d
 8002af6:	782b      	ldrb	r3, [r5, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002afe:	0022      	movs	r2, r4
 8002b00:	325c      	adds	r2, #92	; 0x5c
 8002b02:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b04:	0020      	movs	r0, r4
 8002b06:	f002 fb83 	bl	8005210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b0a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b10:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002b12:	680b      	ldr	r3, [r1, #0]
 8002b14:	2000      	movs	r0, #0
 8002b16:	4393      	bics	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
 8002b1a:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b1c:	68e2      	ldr	r2, [r4, #12]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d931      	bls.n	8002b88 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b24:	26f0      	movs	r6, #240	; 0xf0
 8002b26:	0136      	lsls	r6, r6, #4
 8002b28:	42b2      	cmp	r2, r6
 8002b2a:	d133      	bne.n	8002b94 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b2c:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d103      	bne.n	8002b3c <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d92f      	bls.n	8002b98 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b38:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b3a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b3c:	68a7      	ldr	r7, [r4, #8]
 8002b3e:	6863      	ldr	r3, [r4, #4]
 8002b40:	69a0      	ldr	r0, [r4, #24]
 8002b42:	433b      	orrs	r3, r7
 8002b44:	6927      	ldr	r7, [r4, #16]
 8002b46:	433b      	orrs	r3, r7
 8002b48:	6967      	ldr	r7, [r4, #20]
 8002b4a:	433b      	orrs	r3, r7
 8002b4c:	69e7      	ldr	r7, [r4, #28]
 8002b4e:	433b      	orrs	r3, r7
 8002b50:	6a27      	ldr	r7, [r4, #32]
 8002b52:	433b      	orrs	r3, r7
 8002b54:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002b56:	433b      	orrs	r3, r7
 8002b58:	2780      	movs	r7, #128	; 0x80
 8002b5a:	00bf      	lsls	r7, r7, #2
 8002b5c:	4007      	ands	r7, r0
 8002b5e:	433b      	orrs	r3, r7
 8002b60:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b64:	0c00      	lsrs	r0, r0, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	4018      	ands	r0, r3
 8002b70:	4310      	orrs	r0, r2
 8002b72:	4306      	orrs	r6, r0
 8002b74:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b76:	69cb      	ldr	r3, [r1, #28]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b7a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002b80:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b82:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b84:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b88:	2680      	movs	r6, #128	; 0x80
 8002b8a:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d0ce      	beq.n	8002b2e <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	62a0      	str	r0, [r4, #40]	; 0x28
 8002b92:	e7cc      	b.n	8002b2e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b94:	0006      	movs	r6, r0
 8002b96:	e7fb      	b.n	8002b90 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e7ce      	b.n	8002b3a <HAL_SPI_Init+0x56>
 8002b9c:	fffff7ff 	.word	0xfffff7ff

08002ba0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	4311      	orrs	r1, r2
 8002baa:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb0:	2906      	cmp	r1, #6
 8002bb2:	d005      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x20>
 8002bb4:	3807      	subs	r0, #7
 8002bb6:	4281      	cmp	r1, r0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x20>
  {
    __HAL_TIM_ENABLE(htim);
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr
 8002bc4:	00010007 	.word	0x00010007

08002bc8 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bc8:	2101      	movs	r1, #1
 8002bca:	6803      	ldr	r3, [r0, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	438a      	bics	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bd2:	6a18      	ldr	r0, [r3, #32]
 8002bd4:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_TIM_Base_Stop_IT+0x24>)
 8002bd6:	4210      	tst	r0, r2
 8002bd8:	d106      	bne.n	8002be8 <HAL_TIM_Base_Stop_IT+0x20>
 8002bda:	6a18      	ldr	r0, [r3, #32]
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_TIM_Base_Stop_IT+0x28>)
 8002bde:	4210      	tst	r0, r2
 8002be0:	d102      	bne.n	8002be8 <HAL_TIM_Base_Stop_IT+0x20>
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	4770      	bx	lr
 8002bec:	00001111 	.word	0x00001111
 8002bf0:	00000444 	.word	0x00000444

08002bf4 <HAL_TIM_OC_DelayElapsedCallback>:
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIM_IC_CaptureCallback>:
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_TriggerCallback>:
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	6803      	ldr	r3, [r0, #0]
{
 8002c00:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c02:	6919      	ldr	r1, [r3, #16]
{
 8002c04:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c06:	4211      	tst	r1, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	4211      	tst	r1, r2
 8002c0e:	d00b      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c10:	3a05      	subs	r2, #5
 8002c12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c16:	3204      	adds	r2, #4
 8002c18:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c1a:	079b      	lsls	r3, r3, #30
 8002c1c:	d100      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x24>
 8002c1e:	e086      	b.n	8002d2e <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	f7ff ffe9 	bl	8002bf6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c24:	2300      	movs	r3, #0
 8002c26:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c28:	2204      	movs	r2, #4
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	4211      	tst	r1, r2
 8002c30:	d011      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c32:	68d9      	ldr	r1, [r3, #12]
 8002c34:	4211      	tst	r1, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c38:	3a09      	subs	r2, #9
 8002c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3c:	3207      	adds	r2, #7
 8002c3e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	23c0      	movs	r3, #192	; 0xc0
 8002c44:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c48:	421a      	tst	r2, r3
 8002c4a:	d100      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x52>
 8002c4c:	e075      	b.n	8002d3a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	f7ff ffd2 	bl	8002bf6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	2300      	movs	r3, #0
 8002c54:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c56:	2208      	movs	r2, #8
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	6919      	ldr	r1, [r3, #16]
 8002c5c:	4211      	tst	r1, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	4211      	tst	r1, r2
 8002c64:	d00b      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c66:	3a11      	subs	r2, #17
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6c:	320d      	adds	r2, #13
 8002c6e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c70:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c72:	079b      	lsls	r3, r3, #30
 8002c74:	d067      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	f7ff ffbe 	bl	8002bf6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c7e:	2210      	movs	r2, #16
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	6919      	ldr	r1, [r3, #16]
 8002c84:	4211      	tst	r1, r2
 8002c86:	d010      	beq.n	8002caa <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	4211      	tst	r1, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c8e:	3a21      	subs	r2, #33	; 0x21
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c92:	3219      	adds	r2, #25
 8002c94:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	23c0      	movs	r3, #192	; 0xc0
 8002c9a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c9e:	421a      	tst	r2, r3
 8002ca0:	d057      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	f7ff ffa8 	bl	8002bf6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002caa:	2201      	movs	r2, #1
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	4211      	tst	r1, r2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	4211      	tst	r1, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cba:	3a03      	subs	r2, #3
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cbe:	0020      	movs	r0, r4
 8002cc0:	f001 fd6e 	bl	80047a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	6919      	ldr	r1, [r3, #16]
 8002cca:	4211      	tst	r1, r2
 8002ccc:	d008      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	4211      	tst	r1, r2
 8002cd2:	d005      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd4:	3a02      	subs	r2, #2
 8002cd6:	3aff      	subs	r2, #255	; 0xff
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f000 f9d9 	bl	8003092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	05d2      	lsls	r2, r2, #23
 8002ce6:	d507      	bpl.n	8002cf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	0612      	lsls	r2, r2, #24
 8002cec:	d504      	bpl.n	8002cf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cee:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cf0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cf2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002cf4:	f000 f9ce 	bl	8003094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	6919      	ldr	r1, [r3, #16]
 8002cfe:	4211      	tst	r1, r2
 8002d00:	d007      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d02:	68d9      	ldr	r1, [r3, #12]
 8002d04:	4211      	tst	r1, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d08:	3a81      	subs	r2, #129	; 0x81
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0c:	0020      	movs	r0, r4
 8002d0e:	f7ff ff74 	bl	8002bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d12:	2220      	movs	r2, #32
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	6919      	ldr	r1, [r3, #16]
 8002d18:	4211      	tst	r1, r2
 8002d1a:	d007      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	4211      	tst	r1, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d22:	3a41      	subs	r2, #65	; 0x41
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d26:	0020      	movs	r0, r4
 8002d28:	f000 f9b2 	bl	8003090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	f7ff ff61 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d32:	0020      	movs	r0, r4
 8002d34:	f7ff ff60 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d38:	e774      	b.n	8002c24 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	f7ff ff5b 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	0020      	movs	r0, r4
 8002d40:	f7ff ff5a 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d44:	e785      	b.n	8002c52 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	f7ff ff55 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	f7ff ff54 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d50:	e793      	b.n	8002c7a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	f7ff ff4f 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	0020      	movs	r0, r4
 8002d58:	f7ff ff4e 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5c:	e7a3      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xaa>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	fffffeff 	.word	0xfffffeff

08002d64 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d64:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <TIM_Base_SetConfig+0x84>)
{
 8002d66:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002d68:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6a:	4290      	cmp	r0, r2
 8002d6c:	d006      	beq.n	8002d7c <TIM_Base_SetConfig+0x18>
 8002d6e:	2480      	movs	r4, #128	; 0x80
 8002d70:	05e4      	lsls	r4, r4, #23
 8002d72:	42a0      	cmp	r0, r4
 8002d74:	d002      	beq.n	8002d7c <TIM_Base_SetConfig+0x18>
 8002d76:	4c1d      	ldr	r4, [pc, #116]	; (8002dec <TIM_Base_SetConfig+0x88>)
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d10c      	bne.n	8002d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d7c:	2470      	movs	r4, #112	; 0x70
 8002d7e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002d80:	684c      	ldr	r4, [r1, #4]
 8002d82:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d84:	4290      	cmp	r0, r2
 8002d86:	d012      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002d88:	2480      	movs	r4, #128	; 0x80
 8002d8a:	05e4      	lsls	r4, r4, #23
 8002d8c:	42a0      	cmp	r0, r4
 8002d8e:	d00e      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002d90:	4c16      	ldr	r4, [pc, #88]	; (8002dec <TIM_Base_SetConfig+0x88>)
 8002d92:	42a0      	cmp	r0, r4
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002d96:	4c16      	ldr	r4, [pc, #88]	; (8002df0 <TIM_Base_SetConfig+0x8c>)
 8002d98:	42a0      	cmp	r0, r4
 8002d9a:	d008      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002d9c:	4c15      	ldr	r4, [pc, #84]	; (8002df4 <TIM_Base_SetConfig+0x90>)
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	d005      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002da2:	4c15      	ldr	r4, [pc, #84]	; (8002df8 <TIM_Base_SetConfig+0x94>)
 8002da4:	42a0      	cmp	r0, r4
 8002da6:	d002      	beq.n	8002dae <TIM_Base_SetConfig+0x4a>
 8002da8:	4c14      	ldr	r4, [pc, #80]	; (8002dfc <TIM_Base_SetConfig+0x98>)
 8002daa:	42a0      	cmp	r0, r4
 8002dac:	d103      	bne.n	8002db6 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	4c14      	ldr	r4, [pc, #80]	; (8002e00 <TIM_Base_SetConfig+0x9c>)
 8002db0:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db2:	68cc      	ldr	r4, [r1, #12]
 8002db4:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db6:	2480      	movs	r4, #128	; 0x80
 8002db8:	43a3      	bics	r3, r4
 8002dba:	694c      	ldr	r4, [r1, #20]
 8002dbc:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002dbe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	688b      	ldr	r3, [r1, #8]
 8002dc2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc4:	680b      	ldr	r3, [r1, #0]
 8002dc6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	4290      	cmp	r0, r2
 8002dca:	d008      	beq.n	8002dde <TIM_Base_SetConfig+0x7a>
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <TIM_Base_SetConfig+0x90>)
 8002dce:	4298      	cmp	r0, r3
 8002dd0:	d005      	beq.n	8002dde <TIM_Base_SetConfig+0x7a>
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <TIM_Base_SetConfig+0x94>)
 8002dd4:	4298      	cmp	r0, r3
 8002dd6:	d002      	beq.n	8002dde <TIM_Base_SetConfig+0x7a>
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <TIM_Base_SetConfig+0x98>)
 8002dda:	4298      	cmp	r0, r3
 8002ddc:	d101      	bne.n	8002de2 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dde:	690b      	ldr	r3, [r1, #16]
 8002de0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de2:	2301      	movs	r3, #1
 8002de4:	6143      	str	r3, [r0, #20]
}
 8002de6:	bd10      	pop	{r4, pc}
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40002000 	.word	0x40002000
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800
 8002e00:	fffffcff 	.word	0xfffffcff

08002e04 <HAL_TIM_Base_Init>:
{
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002e08:	2001      	movs	r0, #1
  if (htim == NULL)
 8002e0a:	2c00      	cmp	r4, #0
 8002e0c:	d014      	beq.n	8002e38 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	0025      	movs	r5, r4
 8002e10:	353d      	adds	r5, #61	; 0x3d
 8002e12:	782b      	ldrb	r3, [r5, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	0022      	movs	r2, r4
 8002e1c:	323c      	adds	r2, #60	; 0x3c
 8002e1e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002e20:	0020      	movs	r0, r4
 8002e22:	f002 fd2d 	bl	8005880 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2c:	1d21      	adds	r1, r4, #4
 8002e2e:	f7ff ff99 	bl	8002d64 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002e32:	2301      	movs	r3, #1
  return HAL_OK;
 8002e34:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e36:	702b      	strb	r3, [r5, #0]
}
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	4d03      	ldr	r5, [pc, #12]	; (8002e50 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e42:	430a      	orrs	r2, r1
 8002e44:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e46:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4c:	6083      	str	r3, [r0, #8]
}
 8002e4e:	bd30      	pop	{r4, r5, pc}
 8002e50:	ffff00ff 	.word	0xffff00ff

08002e54 <HAL_TIM_ConfigClockSource>:
{
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002e56:	0005      	movs	r5, r0
 8002e58:	2302      	movs	r3, #2
 8002e5a:	353c      	adds	r5, #60	; 0x3c
 8002e5c:	782a      	ldrb	r2, [r5, #0]
{
 8002e5e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002e60:	0018      	movs	r0, r3
 8002e62:	2a01      	cmp	r2, #1
 8002e64:	d016      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e66:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8002e68:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8002e6a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8002e6e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002e72:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e74:	4a3f      	ldr	r2, [pc, #252]	; (8002f74 <HAL_TIM_ConfigClockSource+0x120>)
 8002e76:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002e78:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d063      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xf4>
 8002e80:	d814      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x58>
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d00b      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x4a>
 8002e86:	d806      	bhi.n	8002e96 <HAL_TIM_ConfigClockSource+0x42>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002e8e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002e92:	7028      	strb	r0, [r5, #0]
}
 8002e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d001      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x4a>
 8002e9a:	2b30      	cmp	r3, #48	; 0x30
 8002e9c:	d1f6      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9e:	4a36      	ldr	r2, [pc, #216]	; (8002f78 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8002ea0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	e019      	b.n	8002ee0 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d034      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xc6>
 8002eb0:	d818      	bhi.n	8002ee4 <HAL_TIM_ConfigClockSource+0x90>
 8002eb2:	2b50      	cmp	r3, #80	; 0x50
 8002eb4:	d1ea      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb6:	684a      	ldr	r2, [r1, #4]
 8002eb8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002eba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ebc:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ebe:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec0:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec2:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eca:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ecc:	240a      	movs	r4, #10
 8002ece:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002ed0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ed6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_TIM_ConfigClockSource+0x124>)
 8002eda:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002edc:	2357      	movs	r3, #87	; 0x57
 8002ede:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8002ee0:	6083      	str	r3, [r0, #8]
 8002ee2:	e7d3      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d00d      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xb0>
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	0192      	lsls	r2, r2, #6
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d1cd      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	68cb      	ldr	r3, [r1, #12]
 8002ef2:	684a      	ldr	r2, [r1, #4]
 8002ef4:	6889      	ldr	r1, [r1, #8]
 8002ef6:	f7ff ffa1 	bl	8002e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	01db      	lsls	r3, r3, #7
 8002f00:	6891      	ldr	r1, [r2, #8]
 8002f02:	e007      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	68cb      	ldr	r3, [r1, #12]
 8002f06:	684a      	ldr	r2, [r1, #4]
 8002f08:	6889      	ldr	r1, [r1, #8]
 8002f0a:	f7ff ff97 	bl	8002e3c <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6093      	str	r3, [r2, #8]
      break;
 8002f18:	e7b8      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1a:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1c:	684b      	ldr	r3, [r1, #4]
 8002f1e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f20:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f22:	4f16      	ldr	r7, [pc, #88]	; (8002f7c <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f24:	43a1      	bics	r1, r4
 8002f26:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f28:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f2c:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f30:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002f32:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f34:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f38:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8002f3a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_TIM_ConfigClockSource+0x124>)
 8002f42:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f44:	2367      	movs	r3, #103	; 0x67
 8002f46:	e7ca      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f48:	684a      	ldr	r2, [r1, #4]
 8002f4a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f4c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f50:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f52:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f54:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f58:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f5a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5e:	240a      	movs	r4, #10
 8002f60:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002f62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002f64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6a:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <HAL_TIM_ConfigClockSource+0x124>)
 8002f6c:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f6e:	2347      	movs	r3, #71	; 0x47
 8002f70:	e7b5      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x8a>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	ffce0088 	.word	0xffce0088
 8002f78:	ffcfff8f 	.word	0xffcfff8f
 8002f7c:	ffff0fff 	.word	0xffff0fff

08002f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	0004      	movs	r4, r0
 8002f84:	2202      	movs	r2, #2
 8002f86:	343c      	adds	r4, #60	; 0x3c
 8002f88:	7825      	ldrb	r5, [r4, #0]
{
 8002f8a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002f8c:	0010      	movs	r0, r2
 8002f8e:	2d01      	cmp	r5, #1
 8002f90:	d01a      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f92:	001d      	movs	r5, r3
 8002f94:	353d      	adds	r5, #61	; 0x3d
 8002f96:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f98:	4e0c      	ldr	r6, [pc, #48]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002f9e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fa0:	42b2      	cmp	r2, r6
 8002fa2:	d103      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fa4:	4e0a      	ldr	r6, [pc, #40]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002fa6:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fa8:	684e      	ldr	r6, [r1, #4]
 8002faa:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fac:	2670      	movs	r6, #112	; 0x70
 8002fae:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb2:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb6:	2680      	movs	r6, #128	; 0x80
 8002fb8:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fbc:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbe:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002fc0:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8002fc2:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002fc6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	ff0fffff 	.word	0xff0fffff

08002fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fd4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fd6:	0004      	movs	r4, r0
 8002fd8:	343c      	adds	r4, #60	; 0x3c
 8002fda:	7823      	ldrb	r3, [r4, #0]
{
 8002fdc:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002fde:	2002      	movs	r0, #2
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d039      	beq.n	8003058 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fe4:	68c8      	ldr	r0, [r1, #12]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002fe8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fea:	4003      	ands	r3, r0
 8002fec:	6888      	ldr	r0, [r1, #8]
 8002fee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ff0:	481b      	ldr	r0, [pc, #108]	; (8003060 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002ff2:	4003      	ands	r3, r0
 8002ff4:	6848      	ldr	r0, [r1, #4]
 8002ff6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ff8:	481a      	ldr	r0, [pc, #104]	; (8003064 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002ffa:	4003      	ands	r3, r0
 8002ffc:	6808      	ldr	r0, [r1, #0]
 8002ffe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003000:	4819      	ldr	r0, [pc, #100]	; (8003068 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8003002:	4003      	ands	r3, r0
 8003004:	6908      	ldr	r0, [r1, #16]
 8003006:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003008:	4818      	ldr	r0, [pc, #96]	; (800306c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800300a:	4003      	ands	r3, r0
 800300c:	6948      	ldr	r0, [r1, #20]
 800300e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003010:	4817      	ldr	r0, [pc, #92]	; (8003070 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8003012:	4003      	ands	r3, r0
 8003014:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8003016:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003018:	4816      	ldr	r0, [pc, #88]	; (8003074 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800301a:	4003      	ands	r3, r0
 800301c:	6988      	ldr	r0, [r1, #24]
 800301e:	0400      	lsls	r0, r0, #16
 8003020:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003022:	4815      	ldr	r0, [pc, #84]	; (8003078 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003024:	4282      	cmp	r2, r0
 8003026:	d114      	bne.n	8003052 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003028:	4814      	ldr	r0, [pc, #80]	; (800307c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800302a:	4003      	ands	r3, r0
 800302c:	69c8      	ldr	r0, [r1, #28]
 800302e:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003030:	4813      	ldr	r0, [pc, #76]	; (8003080 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003032:	4018      	ands	r0, r3
 8003034:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003036:	051b      	lsls	r3, r3, #20
 8003038:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800303a:	4812      	ldr	r0, [pc, #72]	; (8003084 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800303c:	4003      	ands	r3, r0
 800303e:	6a08      	ldr	r0, [r1, #32]
 8003040:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003042:	4811      	ldr	r0, [pc, #68]	; (8003088 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003044:	4003      	ands	r3, r0
 8003046:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003048:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800304a:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800304c:	480f      	ldr	r0, [pc, #60]	; (800308c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800304e:	4003      	ands	r3, r0
 8003050:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8003052:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8003056:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003058:	bd10      	pop	{r4, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	fffffcff 	.word	0xfffffcff
 8003060:	fffffbff 	.word	0xfffffbff
 8003064:	fffff7ff 	.word	0xfffff7ff
 8003068:	ffffefff 	.word	0xffffefff
 800306c:	ffffdfff 	.word	0xffffdfff
 8003070:	ffffbfff 	.word	0xffffbfff
 8003074:	fff0ffff 	.word	0xfff0ffff
 8003078:	40012c00 	.word	0x40012c00
 800307c:	efffffff 	.word	0xefffffff
 8003080:	ff0fffff 	.word	0xff0fffff
 8003084:	feffffff 	.word	0xfeffffff
 8003088:	fdffffff 	.word	0xfdffffff
 800308c:	dfffffff 	.word	0xdfffffff

08003090 <HAL_TIMEx_CommutCallback>:
 8003090:	4770      	bx	lr

08003092 <HAL_TIMEx_BreakCallback>:
 8003092:	4770      	bx	lr

08003094 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003094:	4770      	bx	lr
	...

08003098 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	4907      	ldr	r1, [pc, #28]	; (80030b8 <UART_EndRxTransfer+0x20>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4905      	ldr	r1, [pc, #20]	; (80030bc <UART_EndRxTransfer+0x24>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	0003      	movs	r3, r0
 80030ac:	2220      	movs	r2, #32
 80030ae:	3308      	adds	r3, #8
 80030b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80030b6:	4770      	bx	lr
 80030b8:	fffffedf 	.word	0xfffffedf
 80030bc:	effffffe 	.word	0xeffffffe

080030c0 <HAL_UART_Transmit_DMA>:
{
 80030c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80030c2:	1d05      	adds	r5, r0, #4
{
 80030c4:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80030c6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
{
 80030c8:	0004      	movs	r4, r0
    return HAL_BUSY;
 80030ca:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80030cc:	2a20      	cmp	r2, #32
 80030ce:	d13a      	bne.n	8003146 <HAL_UART_Transmit_DMA+0x86>
      return HAL_ERROR;
 80030d0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80030d2:	2900      	cmp	r1, #0
 80030d4:	d037      	beq.n	8003146 <HAL_UART_Transmit_DMA+0x86>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d035      	beq.n	8003146 <HAL_UART_Transmit_DMA+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	68a6      	ldr	r6, [r4, #8]
 80030de:	0152      	lsls	r2, r2, #5
 80030e0:	4296      	cmp	r6, r2
 80030e2:	d104      	bne.n	80030ee <HAL_UART_Transmit_DMA+0x2e>
 80030e4:	6922      	ldr	r2, [r4, #16]
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ea:	4201      	tst	r1, r0
 80030ec:	d12b      	bne.n	8003146 <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 80030ee:	0022      	movs	r2, r4
 80030f0:	327c      	adds	r2, #124	; 0x7c
 80030f2:	9201      	str	r2, [sp, #4]
 80030f4:	7812      	ldrb	r2, [r2, #0]
    return HAL_BUSY;
 80030f6:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80030f8:	2a01      	cmp	r2, #1
 80030fa:	d024      	beq.n	8003146 <HAL_UART_Transmit_DMA+0x86>
 80030fc:	9a01      	ldr	r2, [sp, #4]
 80030fe:	3801      	subs	r0, #1
 8003100:	7010      	strb	r0, [r2, #0]
    huart->TxXferSize  = Size;
 8003102:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	0027      	movs	r7, r4
    huart->TxXferSize  = Size;
 8003106:	3254      	adds	r2, #84	; 0x54
    huart->pTxBuffPtr  = pData;
 8003108:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 800310c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800310e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003110:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8003112:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	3788      	adds	r7, #136	; 0x88
 8003116:	603e      	str	r6, [r7, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003118:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 800311a:	42b0      	cmp	r0, r6
 800311c:	d014      	beq.n	8003148 <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_UART_Transmit_DMA+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 8003120:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003122:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_UART_Transmit_DMA+0xa4>)
 8003126:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_UART_Transmit_DMA+0xa8>)
 800312a:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	3228      	adds	r2, #40	; 0x28
 8003130:	f7fd fee8 	bl	8000f04 <HAL_DMA_Start_IT>
 8003134:	42b0      	cmp	r0, r6
 8003136:	d007      	beq.n	8003148 <HAL_UART_Transmit_DMA+0x88>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003138:	2310      	movs	r3, #16
 800313a:	603b      	str	r3, [r7, #0]
        __HAL_UNLOCK(huart);
 800313c:	9b01      	ldr	r3, [sp, #4]
        return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
        __HAL_UNLOCK(huart);
 8003140:	701e      	strb	r6, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8003142:	2320      	movs	r3, #32
 8003144:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 8003146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003148:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800314a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800314c:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800314e:	347c      	adds	r4, #124	; 0x7c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003150:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	1892      	adds	r2, r2, r2
 8003156:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8003158:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800315a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800315c:	e7f3      	b.n	8003146 <HAL_UART_Transmit_DMA+0x86>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	080032bd 	.word	0x080032bd
 8003164:	080032ef 	.word	0x080032ef
 8003168:	0800334d 	.word	0x0800334d

0800316c <HAL_UART_Receive_DMA>:
{
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	0013      	movs	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003170:	0002      	movs	r2, r0
 8003172:	3208      	adds	r2, #8
 8003174:	6fd5      	ldr	r5, [r2, #124]	; 0x7c
{
 8003176:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003178:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800317a:	2d20      	cmp	r5, #32
 800317c:	d13a      	bne.n	80031f4 <HAL_UART_Receive_DMA+0x88>
      return HAL_ERROR;
 800317e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003180:	2900      	cmp	r1, #0
 8003182:	d037      	beq.n	80031f4 <HAL_UART_Receive_DMA+0x88>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d035      	beq.n	80031f4 <HAL_UART_Receive_DMA+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	2580      	movs	r5, #128	; 0x80
 800318a:	68a6      	ldr	r6, [r4, #8]
 800318c:	016d      	lsls	r5, r5, #5
 800318e:	42ae      	cmp	r6, r5
 8003190:	d104      	bne.n	800319c <HAL_UART_Receive_DMA+0x30>
 8003192:	6925      	ldr	r5, [r4, #16]
 8003194:	2d00      	cmp	r5, #0
 8003196:	d101      	bne.n	800319c <HAL_UART_Receive_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003198:	4201      	tst	r1, r0
 800319a:	d12b      	bne.n	80031f4 <HAL_UART_Receive_DMA+0x88>
    __HAL_LOCK(huart);
 800319c:	0025      	movs	r5, r4
 800319e:	357c      	adds	r5, #124	; 0x7c
 80031a0:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80031a2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80031a4:	2e01      	cmp	r6, #1
 80031a6:	d025      	beq.n	80031f4 <HAL_UART_Receive_DMA+0x88>
 80031a8:	3801      	subs	r0, #1
 80031aa:	7028      	strb	r0, [r5, #0]
    huart->RxXferSize = Size;
 80031ac:	0020      	movs	r0, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	0027      	movs	r7, r4
    huart->RxXferSize = Size;
 80031b0:	305c      	adds	r0, #92	; 0x5c
    huart->pRxBuffPtr = pData;
 80031b2:	65a1      	str	r1, [r4, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	2600      	movs	r6, #0
    huart->RxXferSize = Size;
 80031b6:	8003      	strh	r3, [r0, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b8:	2022      	movs	r0, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	3788      	adds	r7, #136	; 0x88
 80031bc:	603e      	str	r6, [r7, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031be:	67d0      	str	r0, [r2, #124]	; 0x7c
    if (huart->hdmarx != NULL)
 80031c0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80031c2:	42b0      	cmp	r0, r6
 80031c4:	d017      	beq.n	80031f6 <HAL_UART_Receive_DMA+0x8a>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_UART_Receive_DMA+0xac>)
      huart->hdmarx->XferAbortCallback = NULL;
 80031c8:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031ca:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031cc:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_UART_Receive_DMA+0xb0>)
 80031ce:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <HAL_UART_Receive_DMA+0xb4>)
 80031d2:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	3224      	adds	r2, #36	; 0x24
 80031d8:	4694      	mov	ip, r2
 80031da:	000a      	movs	r2, r1
 80031dc:	4661      	mov	r1, ip
 80031de:	f7fd fe91 	bl	8000f04 <HAL_DMA_Start_IT>
 80031e2:	42b0      	cmp	r0, r6
 80031e4:	d007      	beq.n	80031f6 <HAL_UART_Receive_DMA+0x8a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031e6:	2310      	movs	r3, #16
        return HAL_ERROR;
 80031e8:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031ea:	603b      	str	r3, [r7, #0]
        huart->gState = HAL_UART_STATE_READY;
 80031ec:	3404      	adds	r4, #4
 80031ee:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 80031f0:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 80031f2:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 80031f8:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	0052      	lsls	r2, r2, #1
 80031fe:	6819      	ldr	r1, [r3, #0]
    __HAL_UNLOCK(huart);
 8003200:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	2201      	movs	r2, #1
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8003216:	e7ed      	b.n	80031f4 <HAL_UART_Receive_DMA+0x88>
 8003218:	080032f9 	.word	0x080032f9
 800321c:	0800333f 	.word	0x0800333f
 8003220:	0800334d 	.word	0x0800334d

08003224 <HAL_UART_DMAStop>:
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003224:	0003      	movs	r3, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003226:	2180      	movs	r1, #128	; 0x80
{
 8003228:	b570      	push	{r4, r5, r6, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800322a:	3308      	adds	r3, #8
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800322c:	1d06      	adds	r6, r0, #4
 800322e:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003230:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003232:	6803      	ldr	r3, [r0, #0]
{
 8003234:	0004      	movs	r4, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003236:	6898      	ldr	r0, [r3, #8]
 8003238:	4208      	tst	r0, r1
 800323a:	d020      	beq.n	800327e <HAL_UART_DMAStop+0x5a>
 800323c:	2a21      	cmp	r2, #33	; 0x21
 800323e:	d11e      	bne.n	800327e <HAL_UART_DMAStop+0x5a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003240:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8003242:	6f60      	ldr	r0, [r4, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003244:	438a      	bics	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8003248:	2800      	cmp	r0, #0
 800324a:	d00d      	beq.n	8003268 <HAL_UART_DMAStop+0x44>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800324c:	f7fd fe9a 	bl	8000f84 <HAL_DMA_Abort>
 8003250:	2800      	cmp	r0, #0
 8003252:	d009      	beq.n	8003268 <HAL_UART_DMAStop+0x44>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003254:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003256:	f7fd ff69 	bl	800112c <HAL_DMA_GetError>
 800325a:	2820      	cmp	r0, #32
 800325c:	d104      	bne.n	8003268 <HAL_UART_DMAStop+0x44>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800325e:	2310      	movs	r3, #16
 8003260:	3488      	adds	r4, #136	; 0x88
 8003262:	6023      	str	r3, [r4, #0]
          return HAL_TIMEOUT;
 8003264:	381d      	subs	r0, #29
}
 8003266:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003268:	21c0      	movs	r1, #192	; 0xc0
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	438a      	bics	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4910      	ldr	r1, [pc, #64]	; (80032b8 <HAL_UART_DMAStop+0x94>)
 8003276:	400a      	ands	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800327a:	2320      	movs	r3, #32
 800327c:	67f3      	str	r3, [r6, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003282:	2000      	movs	r0, #0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	420a      	tst	r2, r1
 8003288:	d0ed      	beq.n	8003266 <HAL_UART_DMAStop+0x42>
 800328a:	2d22      	cmp	r5, #34	; 0x22
 800328c:	d1eb      	bne.n	8003266 <HAL_UART_DMAStop+0x42>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8003290:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8003296:	2800      	cmp	r0, #0
 8003298:	d008      	beq.n	80032ac <HAL_UART_DMAStop+0x88>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800329a:	f7fd fe73 	bl	8000f84 <HAL_DMA_Abort>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d004      	beq.n	80032ac <HAL_UART_DMAStop+0x88>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80032a2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80032a4:	f7fd ff42 	bl	800112c <HAL_DMA_GetError>
 80032a8:	2820      	cmp	r0, #32
 80032aa:	d0d8      	beq.n	800325e <HAL_UART_DMAStop+0x3a>
    UART_EndRxTransfer(huart);
 80032ac:	0020      	movs	r0, r4
 80032ae:	f7ff fef3 	bl	8003098 <UART_EndRxTransfer>
  return HAL_OK;
 80032b2:	2000      	movs	r0, #0
 80032b4:	e7d7      	b.n	8003266 <HAL_UART_DMAStop+0x42>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	ff7fffff 	.word	0xff7fffff

080032bc <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032bc:	2120      	movs	r1, #32
 80032be:	6803      	ldr	r3, [r0, #0]
{
 80032c0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032c2:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032c6:	400b      	ands	r3, r1
 80032c8:	d10c      	bne.n	80032e4 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 80032ca:	0011      	movs	r1, r2
 80032cc:	3156      	adds	r1, #86	; 0x56
 80032ce:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	438a      	bics	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032e2:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80032e4:	0010      	movs	r0, r2
 80032e6:	f001 faef 	bl	80048c8 <HAL_UART_TxCpltCallback>
}
 80032ea:	e7fa      	b.n	80032e2 <UART_DMATransmitCplt+0x26>

080032ec <HAL_UART_TxHalfCpltCallback>:
 80032ec:	4770      	bx	lr

080032ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032ee:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80032f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80032f2:	f7ff fffb 	bl	80032ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032f8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032fc:	2020      	movs	r0, #32
 80032fe:	681b      	ldr	r3, [r3, #0]
{
 8003300:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003302:	4003      	ands	r3, r0
 8003304:	d113      	bne.n	800332e <UART_DMAReceiveCplt+0x36>
  {
    huart->RxXferCount = 0U;
 8003306:	0011      	movs	r1, r2
 8003308:	315e      	adds	r1, #94	; 0x5e
 800330a:	800b      	strh	r3, [r1, #0]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	4c0a      	ldr	r4, [pc, #40]	; (8003338 <UART_DMAReceiveCplt+0x40>)
 8003310:	6819      	ldr	r1, [r3, #0]
 8003312:	4021      	ands	r1, r4
 8003314:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	3403      	adds	r4, #3
 800331a:	34ff      	adds	r4, #255	; 0xff
 800331c:	43a1      	bics	r1, r4
 800331e:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	343f      	adds	r4, #63	; 0x3f
 8003324:	43a1      	bics	r1, r4
 8003326:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003328:	0013      	movs	r3, r2
 800332a:	3308      	adds	r3, #8
 800332c:	67d8      	str	r0, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800332e:	0010      	movs	r0, r2
 8003330:	f001 faae 	bl	8004890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003334:	bd10      	pop	{r4, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	fffffeff 	.word	0xfffffeff

0800333c <HAL_UART_RxHalfCpltCallback>:
 800333c:	4770      	bx	lr

0800333e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800333e:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003340:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003342:	f7ff fffb 	bl	800333c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003346:	bd10      	pop	{r4, pc}

08003348 <HAL_UART_ErrorCallback>:
 8003348:	4770      	bx	lr
	...

0800334c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800334c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800334e:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003350:	0023      	movs	r3, r4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003352:	1d21      	adds	r1, r4, #4
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003354:	3308      	adds	r3, #8
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003356:	6fca      	ldr	r2, [r1, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003358:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	689d      	ldr	r5, [r3, #8]
 800335e:	062d      	lsls	r5, r5, #24
 8003360:	d50f      	bpl.n	8003382 <UART_DMAError+0x36>
 8003362:	2a21      	cmp	r2, #33	; 0x21
 8003364:	d10d      	bne.n	8003382 <UART_DMAError+0x36>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003366:	0022      	movs	r2, r4
 8003368:	2500      	movs	r5, #0
 800336a:	3256      	adds	r2, #86	; 0x56
 800336c:	8015      	strh	r5, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	35c0      	adds	r5, #192	; 0xc0
 8003372:	43aa      	bics	r2, r5
 8003374:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4d0d      	ldr	r5, [pc, #52]	; (80033b0 <UART_DMAError+0x64>)
 800337a:	402a      	ands	r2, r5
 800337c:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800337e:	2220      	movs	r2, #32
 8003380:	67ca      	str	r2, [r1, #124]	; 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	065b      	lsls	r3, r3, #25
 8003386:	d508      	bpl.n	800339a <UART_DMAError+0x4e>
 8003388:	2822      	cmp	r0, #34	; 0x22
 800338a:	d106      	bne.n	800339a <UART_DMAError+0x4e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800338c:	0023      	movs	r3, r4
 800338e:	2200      	movs	r2, #0
 8003390:	335e      	adds	r3, #94	; 0x5e
 8003392:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8003394:	0020      	movs	r0, r4
 8003396:	f7ff fe7f 	bl	8003098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800339a:	0022      	movs	r2, r4
 800339c:	2310      	movs	r3, #16
 800339e:	3288      	adds	r2, #136	; 0x88
 80033a0:	6811      	ldr	r1, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033a2:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6013      	str	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80033a8:	f7ff ffce 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	ff7fffff 	.word	0xff7fffff

080033b4 <HAL_UART_IRQHandler>:
{
 80033b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033b6:	6802      	ldr	r2, [r0, #0]
{
 80033b8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033ba:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033bc:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033be:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80033c0:	071d      	lsls	r5, r3, #28
 80033c2:	d10d      	bne.n	80033e0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033c4:	2520      	movs	r5, #32
 80033c6:	422b      	tst	r3, r5
 80033c8:	d100      	bne.n	80033cc <HAL_UART_IRQHandler+0x18>
 80033ca:	e080      	b.n	80034ce <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033cc:	4229      	tst	r1, r5
 80033ce:	d102      	bne.n	80033d6 <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033d0:	00c5      	lsls	r5, r0, #3
 80033d2:	d400      	bmi.n	80033d6 <HAL_UART_IRQHandler+0x22>
 80033d4:	e07b      	b.n	80034ce <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 80033d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      huart->TxISR(huart);
 80033d8:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d16d      	bne.n	80034ba <HAL_UART_IRQHandler+0x106>
 80033de:	e06d      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80033e0:	4d55      	ldr	r5, [pc, #340]	; (8003538 <HAL_UART_IRQHandler+0x184>)
 80033e2:	4005      	ands	r5, r0
 80033e4:	9500      	str	r5, [sp, #0]
 80033e6:	d104      	bne.n	80033f2 <HAL_UART_IRQHandler+0x3e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80033e8:	3521      	adds	r5, #33	; 0x21
 80033ea:	35ff      	adds	r5, #255	; 0xff
 80033ec:	4229      	tst	r1, r5
 80033ee:	d100      	bne.n	80033f2 <HAL_UART_IRQHandler+0x3e>
 80033f0:	e06d      	b.n	80034ce <HAL_UART_IRQHandler+0x11a>
 80033f2:	0025      	movs	r5, r4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033f4:	2601      	movs	r6, #1
 80033f6:	3588      	adds	r5, #136	; 0x88
 80033f8:	4233      	tst	r3, r6
 80033fa:	d005      	beq.n	8003408 <HAL_UART_IRQHandler+0x54>
 80033fc:	05cf      	lsls	r7, r1, #23
 80033fe:	d503      	bpl.n	8003408 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003400:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003402:	682f      	ldr	r7, [r5, #0]
 8003404:	433e      	orrs	r6, r7
 8003406:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003408:	2602      	movs	r6, #2
 800340a:	4233      	tst	r3, r6
 800340c:	d00c      	beq.n	8003428 <HAL_UART_IRQHandler+0x74>
 800340e:	07c7      	lsls	r7, r0, #31
 8003410:	d50a      	bpl.n	8003428 <HAL_UART_IRQHandler+0x74>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003412:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003414:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003416:	3788      	adds	r7, #136	; 0x88
 8003418:	683e      	ldr	r6, [r7, #0]
 800341a:	9701      	str	r7, [sp, #4]
 800341c:	46b4      	mov	ip, r6
 800341e:	2604      	movs	r6, #4
 8003420:	4667      	mov	r7, ip
 8003422:	433e      	orrs	r6, r7
 8003424:	9f01      	ldr	r7, [sp, #4]
 8003426:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003428:	2604      	movs	r6, #4
 800342a:	4233      	tst	r3, r6
 800342c:	d00c      	beq.n	8003448 <HAL_UART_IRQHandler+0x94>
 800342e:	07c7      	lsls	r7, r0, #31
 8003430:	d50a      	bpl.n	8003448 <HAL_UART_IRQHandler+0x94>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003432:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003434:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003436:	3788      	adds	r7, #136	; 0x88
 8003438:	683e      	ldr	r6, [r7, #0]
 800343a:	9701      	str	r7, [sp, #4]
 800343c:	46b4      	mov	ip, r6
 800343e:	2602      	movs	r6, #2
 8003440:	4667      	mov	r7, ip
 8003442:	433e      	orrs	r6, r7
 8003444:	9f01      	ldr	r7, [sp, #4]
 8003446:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003448:	071e      	lsls	r6, r3, #28
 800344a:	d509      	bpl.n	8003460 <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800344c:	068e      	lsls	r6, r1, #26
 800344e:	d402      	bmi.n	8003456 <HAL_UART_IRQHandler+0xa2>
 8003450:	9e00      	ldr	r6, [sp, #0]
 8003452:	2e00      	cmp	r6, #0
 8003454:	d004      	beq.n	8003460 <HAL_UART_IRQHandler+0xac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003456:	2608      	movs	r6, #8
 8003458:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345a:	682a      	ldr	r2, [r5, #0]
 800345c:	4316      	orrs	r6, r2
 800345e:	602e      	str	r6, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003460:	682a      	ldr	r2, [r5, #0]
 8003462:	2a00      	cmp	r2, #0
 8003464:	d02a      	beq.n	80034bc <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003466:	2220      	movs	r2, #32
 8003468:	4213      	tst	r3, r2
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0xca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800346c:	4211      	tst	r1, r2
 800346e:	d101      	bne.n	8003474 <HAL_UART_IRQHandler+0xc0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003470:	00c3      	lsls	r3, r0, #3
 8003472:	d504      	bpl.n	800347e <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8003474:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800347a:	0020      	movs	r0, r4
 800347c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800347e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003480:	682e      	ldr	r6, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003482:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8003484:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003486:	065b      	lsls	r3, r3, #25
 8003488:	d402      	bmi.n	8003490 <HAL_UART_IRQHandler+0xdc>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800348a:	2308      	movs	r3, #8
 800348c:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800348e:	d01a      	beq.n	80034c6 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8003490:	f7ff fe02 	bl	8003098 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	420a      	tst	r2, r1
 800349c:	d00f      	beq.n	80034be <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80034a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	438a      	bics	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d009      	beq.n	80034be <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_UART_IRQHandler+0x188>)
 80034ac:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ae:	f7fd fda7 	bl	8001000 <HAL_DMA_Abort_IT>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034b6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80034b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034ba:	4798      	blx	r3
}
 80034bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80034be:	0020      	movs	r0, r4
 80034c0:	f7ff ff42 	bl	8003348 <HAL_UART_ErrorCallback>
 80034c4:	e7fa      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 80034c6:	f7ff ff3f 	bl	8003348 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	602e      	str	r6, [r5, #0]
 80034cc:	e7f6      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034ce:	2580      	movs	r5, #128	; 0x80
 80034d0:	036d      	lsls	r5, r5, #13
 80034d2:	422b      	tst	r3, r5
 80034d4:	d006      	beq.n	80034e4 <HAL_UART_IRQHandler+0x130>
 80034d6:	0246      	lsls	r6, r0, #9
 80034d8:	d504      	bpl.n	80034e4 <HAL_UART_IRQHandler+0x130>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034da:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80034dc:	0020      	movs	r0, r4
 80034de:	f000 fd9b 	bl	8004018 <HAL_UARTEx_WakeupCallback>
    return;
 80034e2:	e7eb      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80034e4:	2580      	movs	r5, #128	; 0x80
 80034e6:	422b      	tst	r3, r5
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0x142>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034ea:	4229      	tst	r1, r5
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_IRQHandler+0x13e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034ee:	0200      	lsls	r0, r0, #8
 80034f0:	d501      	bpl.n	80034f6 <HAL_UART_IRQHandler+0x142>
    if (huart->TxISR != NULL)
 80034f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80034f4:	e770      	b.n	80033d8 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f6:	2040      	movs	r0, #64	; 0x40
 80034f8:	4203      	tst	r3, r0
 80034fa:	d00d      	beq.n	8003518 <HAL_UART_IRQHandler+0x164>
 80034fc:	4201      	tst	r1, r0
 80034fe:	d00b      	beq.n	8003518 <HAL_UART_IRQHandler+0x164>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003500:	6813      	ldr	r3, [r2, #0]
 8003502:	4383      	bics	r3, r0
 8003504:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	2220      	movs	r2, #32
 8003508:	1d23      	adds	r3, r4, #4
 800350a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800350c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800350e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003510:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8003512:	f001 f9d9 	bl	80048c8 <HAL_UART_TxCpltCallback>
 8003516:	e7d1      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	d505      	bpl.n	8003528 <HAL_UART_IRQHandler+0x174>
 800351c:	004a      	lsls	r2, r1, #1
 800351e:	d503      	bpl.n	8003528 <HAL_UART_IRQHandler+0x174>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003520:	0020      	movs	r0, r4
 8003522:	f000 fd7b 	bl	800401c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003526:	e7c9      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	d5c7      	bpl.n	80034bc <HAL_UART_IRQHandler+0x108>
 800352c:	2900      	cmp	r1, #0
 800352e:	dac5      	bge.n	80034bc <HAL_UART_IRQHandler+0x108>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003530:	0020      	movs	r0, r4
 8003532:	f000 fd72 	bl	800401a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003536:	e7c1      	b.n	80034bc <HAL_UART_IRQHandler+0x108>
 8003538:	10000001 	.word	0x10000001
 800353c:	08003541 	.word	0x08003541

08003540 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003540:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	0002      	movs	r2, r0
{
 8003546:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003548:	325e      	adds	r2, #94	; 0x5e
 800354a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800354c:	3a08      	subs	r2, #8
 800354e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8003550:	f7ff fefa 	bl	8003348 <HAL_UART_ErrorCallback>
}
 8003554:	bd10      	pop	{r4, pc}

08003556 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8003556:	1d03      	adds	r3, r0, #4
  temp2 = huart->RxState;
 8003558:	3008      	adds	r0, #8
  temp1 = huart->gState;
 800355a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  temp2 = huart->RxState;
 800355c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800355e:	4310      	orrs	r0, r2
}
 8003560:	4770      	bx	lr
	...

08003564 <UART_SetConfig>:
{
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003568:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356a:	69c1      	ldr	r1, [r0, #28]
 800356c:	6883      	ldr	r3, [r0, #8]
 800356e:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003570:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003572:	4303      	orrs	r3, r0
 8003574:	6960      	ldr	r0, [r4, #20]
 8003576:	4303      	orrs	r3, r0
 8003578:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800357c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357e:	4da4      	ldr	r5, [pc, #656]	; (8003810 <UART_SetConfig+0x2ac>)
 8003580:	4028      	ands	r0, r5
 8003582:	4303      	orrs	r3, r0
 8003584:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	48a2      	ldr	r0, [pc, #648]	; (8003814 <UART_SetConfig+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800358a:	4da3      	ldr	r5, [pc, #652]	; (8003818 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800358c:	4003      	ands	r3, r0
 800358e:	68e0      	ldr	r0, [r4, #12]
 8003590:	4303      	orrs	r3, r0
 8003592:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003594:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003596:	42aa      	cmp	r2, r5
 8003598:	d001      	beq.n	800359e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800359a:	6a23      	ldr	r3, [r4, #32]
 800359c:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359e:	6893      	ldr	r3, [r2, #8]
 80035a0:	4e9e      	ldr	r6, [pc, #632]	; (800381c <UART_SetConfig+0x2b8>)
 80035a2:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035a4:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a6:	4303      	orrs	r3, r0
 80035a8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035aa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80035ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ae:	43b0      	bics	r0, r6
 80035b0:	4318      	orrs	r0, r3
 80035b2:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b4:	489a      	ldr	r0, [pc, #616]	; (8003820 <UART_SetConfig+0x2bc>)
 80035b6:	4282      	cmp	r2, r0
 80035b8:	d117      	bne.n	80035ea <UART_SetConfig+0x86>
 80035ba:	2003      	movs	r0, #3
 80035bc:	4a99      	ldr	r2, [pc, #612]	; (8003824 <UART_SetConfig+0x2c0>)
 80035be:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035c0:	4002      	ands	r2, r0
 80035c2:	4899      	ldr	r0, [pc, #612]	; (8003828 <UART_SetConfig+0x2c4>)
 80035c4:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0212      	lsls	r2, r2, #8
 80035ca:	4291      	cmp	r1, r2
 80035cc:	d000      	beq.n	80035d0 <UART_SetConfig+0x6c>
 80035ce:	e289      	b.n	8003ae4 <UART_SetConfig+0x580>
    switch (clocksource)
 80035d0:	2808      	cmp	r0, #8
 80035d2:	d82b      	bhi.n	800362c <UART_SetConfig+0xc8>
 80035d4:	f7fc fdb2 	bl	800013c <__gnu_thumb1_case_uhi>
 80035d8:	002a037d 	.word	0x002a037d
 80035dc:	002a021a 	.word	0x002a021a
 80035e0:	002a024e 	.word	0x002a024e
 80035e4:	002a002a 	.word	0x002a002a
 80035e8:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ea:	4890      	ldr	r0, [pc, #576]	; (800382c <UART_SetConfig+0x2c8>)
 80035ec:	4282      	cmp	r2, r0
 80035ee:	d105      	bne.n	80035fc <UART_SetConfig+0x98>
 80035f0:	200c      	movs	r0, #12
 80035f2:	4a8c      	ldr	r2, [pc, #560]	; (8003824 <UART_SetConfig+0x2c0>)
 80035f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035f6:	4002      	ands	r2, r0
 80035f8:	488d      	ldr	r0, [pc, #564]	; (8003830 <UART_SetConfig+0x2cc>)
 80035fa:	e7e3      	b.n	80035c4 <UART_SetConfig+0x60>
 80035fc:	488d      	ldr	r0, [pc, #564]	; (8003834 <UART_SetConfig+0x2d0>)
 80035fe:	4282      	cmp	r2, r0
 8003600:	d100      	bne.n	8003604 <UART_SetConfig+0xa0>
 8003602:	e361      	b.n	8003cc8 <UART_SetConfig+0x764>
 8003604:	488c      	ldr	r0, [pc, #560]	; (8003838 <UART_SetConfig+0x2d4>)
 8003606:	4282      	cmp	r2, r0
 8003608:	d100      	bne.n	800360c <UART_SetConfig+0xa8>
 800360a:	e35d      	b.n	8003cc8 <UART_SetConfig+0x764>
 800360c:	2010      	movs	r0, #16
 800360e:	42aa      	cmp	r2, r5
 8003610:	d1d9      	bne.n	80035c6 <UART_SetConfig+0x62>
 8003612:	21c0      	movs	r1, #192	; 0xc0
 8003614:	2080      	movs	r0, #128	; 0x80
 8003616:	4a83      	ldr	r2, [pc, #524]	; (8003824 <UART_SetConfig+0x2c0>)
 8003618:	0109      	lsls	r1, r1, #4
 800361a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800361c:	00c0      	lsls	r0, r0, #3
 800361e:	400a      	ands	r2, r1
 8003620:	4282      	cmp	r2, r0
 8003622:	d100      	bne.n	8003626 <UART_SetConfig+0xc2>
 8003624:	e09c      	b.n	8003760 <UART_SetConfig+0x1fc>
 8003626:	d80d      	bhi.n	8003644 <UART_SetConfig+0xe0>
 8003628:	2a00      	cmp	r2, #0
 800362a:	d04e      	beq.n	80036ca <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 800362c:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 800362e:	0021      	movs	r1, r4
 8003630:	2301      	movs	r3, #1
 8003632:	316a      	adds	r1, #106	; 0x6a
 8003634:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 8003636:	3902      	subs	r1, #2
 8003638:	800b      	strh	r3, [r1, #0]
  huart->RxISR = NULL;
 800363a:	2300      	movs	r3, #0
}
 800363c:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 800363e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8003640:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003644:	2080      	movs	r0, #128	; 0x80
 8003646:	0100      	lsls	r0, r0, #4
 8003648:	4282      	cmp	r2, r0
 800364a:	d06e      	beq.n	800372a <UART_SetConfig+0x1c6>
 800364c:	428a      	cmp	r2, r1
 800364e:	d1ed      	bne.n	800362c <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003650:	2b00      	cmp	r3, #0
 8003652:	d100      	bne.n	8003656 <UART_SetConfig+0xf2>
 8003654:	e0c7      	b.n	80037e6 <UART_SetConfig+0x282>
 8003656:	2b01      	cmp	r3, #1
 8003658:	d100      	bne.n	800365c <UART_SetConfig+0xf8>
 800365a:	e0c7      	b.n	80037ec <UART_SetConfig+0x288>
 800365c:	2b02      	cmp	r3, #2
 800365e:	d100      	bne.n	8003662 <UART_SetConfig+0xfe>
 8003660:	e0c8      	b.n	80037f4 <UART_SetConfig+0x290>
 8003662:	2b03      	cmp	r3, #3
 8003664:	d100      	bne.n	8003668 <UART_SetConfig+0x104>
 8003666:	e0c8      	b.n	80037fa <UART_SetConfig+0x296>
 8003668:	2b04      	cmp	r3, #4
 800366a:	d100      	bne.n	800366e <UART_SetConfig+0x10a>
 800366c:	e0c7      	b.n	80037fe <UART_SetConfig+0x29a>
 800366e:	2b05      	cmp	r3, #5
 8003670:	d100      	bne.n	8003674 <UART_SetConfig+0x110>
 8003672:	e0c7      	b.n	8003804 <UART_SetConfig+0x2a0>
 8003674:	2b06      	cmp	r3, #6
 8003676:	d100      	bne.n	800367a <UART_SetConfig+0x116>
 8003678:	e0c6      	b.n	8003808 <UART_SetConfig+0x2a4>
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	2b07      	cmp	r3, #7
 800367e:	d100      	bne.n	8003682 <UART_SetConfig+0x11e>
 8003680:	e0c4      	b.n	800380c <UART_SetConfig+0x2a8>
 8003682:	2b08      	cmp	r3, #8
 8003684:	d100      	bne.n	8003688 <UART_SetConfig+0x124>
 8003686:	e0f7      	b.n	8003878 <UART_SetConfig+0x314>
 8003688:	2b09      	cmp	r3, #9
 800368a:	d100      	bne.n	800368e <UART_SetConfig+0x12a>
 800368c:	e0f6      	b.n	800387c <UART_SetConfig+0x318>
 800368e:	2b0a      	cmp	r3, #10
 8003690:	d100      	bne.n	8003694 <UART_SetConfig+0x130>
 8003692:	e0f5      	b.n	8003880 <UART_SetConfig+0x31c>
 8003694:	2b0b      	cmp	r3, #11
 8003696:	d000      	beq.n	800369a <UART_SetConfig+0x136>
 8003698:	e0a6      	b.n	80037e8 <UART_SetConfig+0x284>
 800369a:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800369c:	2003      	movs	r0, #3
 800369e:	6862      	ldr	r2, [r4, #4]
 80036a0:	4350      	muls	r0, r2
 80036a2:	4288      	cmp	r0, r1
 80036a4:	d8c2      	bhi.n	800362c <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036a6:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036a8:	4288      	cmp	r0, r1
 80036aa:	d3bf      	bcc.n	800362c <UART_SetConfig+0xc8>
        switch (clocksource)
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d900      	bls.n	80036b2 <UART_SetConfig+0x14e>
 80036b0:	e1a9      	b.n	8003a06 <UART_SetConfig+0x4a2>
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fc fd42 	bl	800013c <__gnu_thumb1_case_uhi>
 80036b8:	01a700e6 	.word	0x01a700e6
 80036bc:	01a70138 	.word	0x01a70138
 80036c0:	01a7016e 	.word	0x01a7016e
 80036c4:	01a701a7 	.word	0x01a701a7
 80036c8:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036ca:	f7fe fff1 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80036ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d0:	2101      	movs	r1, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d021      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036d6:	1849      	adds	r1, r1, r1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d01e      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036dc:	3102      	adds	r1, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d01b      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036e2:	3102      	adds	r1, #2
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d018      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036e8:	3102      	adds	r1, #2
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d015      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036ee:	3102      	adds	r1, #2
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d012      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036f4:	3102      	adds	r1, #2
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d00f      	beq.n	800371a <UART_SetConfig+0x1b6>
 80036fa:	3104      	adds	r1, #4
 80036fc:	2b07      	cmp	r3, #7
 80036fe:	d00c      	beq.n	800371a <UART_SetConfig+0x1b6>
 8003700:	3110      	adds	r1, #16
 8003702:	2b08      	cmp	r3, #8
 8003704:	d009      	beq.n	800371a <UART_SetConfig+0x1b6>
 8003706:	3120      	adds	r1, #32
 8003708:	2b09      	cmp	r3, #9
 800370a:	d006      	beq.n	800371a <UART_SetConfig+0x1b6>
 800370c:	3140      	adds	r1, #64	; 0x40
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d003      	beq.n	800371a <UART_SetConfig+0x1b6>
 8003712:	397f      	subs	r1, #127	; 0x7f
 8003714:	2b0b      	cmp	r3, #11
 8003716:	d100      	bne.n	800371a <UART_SetConfig+0x1b6>
 8003718:	31ff      	adds	r1, #255	; 0xff
 800371a:	f7fc fd19 	bl	8000150 <__udivsi3>
        break;
 800371e:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003720:	0001      	movs	r1, r0
 8003722:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8003724:	4291      	cmp	r1, r2
 8003726:	d1b9      	bne.n	800369c <UART_SetConfig+0x138>
 8003728:	e781      	b.n	800362e <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800372a:	2b00      	cmp	r3, #0
 800372c:	d059      	beq.n	80037e2 <UART_SetConfig+0x27e>
 800372e:	2b01      	cmp	r3, #1
 8003730:	d043      	beq.n	80037ba <UART_SetConfig+0x256>
 8003732:	2b02      	cmp	r3, #2
 8003734:	d043      	beq.n	80037be <UART_SetConfig+0x25a>
 8003736:	2b03      	cmp	r3, #3
 8003738:	d043      	beq.n	80037c2 <UART_SetConfig+0x25e>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d043      	beq.n	80037c6 <UART_SetConfig+0x262>
 800373e:	2b05      	cmp	r3, #5
 8003740:	d043      	beq.n	80037ca <UART_SetConfig+0x266>
 8003742:	2b06      	cmp	r3, #6
 8003744:	d043      	beq.n	80037ce <UART_SetConfig+0x26a>
 8003746:	2b07      	cmp	r3, #7
 8003748:	d043      	beq.n	80037d2 <UART_SetConfig+0x26e>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d043      	beq.n	80037d6 <UART_SetConfig+0x272>
 800374e:	2b09      	cmp	r3, #9
 8003750:	d043      	beq.n	80037da <UART_SetConfig+0x276>
 8003752:	2b0a      	cmp	r3, #10
 8003754:	d043      	beq.n	80037de <UART_SetConfig+0x27a>
 8003756:	2b0b      	cmp	r3, #11
 8003758:	d143      	bne.n	80037e2 <UART_SetConfig+0x27e>
 800375a:	4938      	ldr	r1, [pc, #224]	; (800383c <UART_SetConfig+0x2d8>)
 800375c:	2302      	movs	r3, #2
 800375e:	e79d      	b.n	800369c <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003760:	f7fe feb2 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003766:	2101      	movs	r1, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <UART_SetConfig+0x24c>
 800376c:	1849      	adds	r1, r1, r1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d01e      	beq.n	80037b0 <UART_SetConfig+0x24c>
 8003772:	3102      	adds	r1, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d01b      	beq.n	80037b0 <UART_SetConfig+0x24c>
 8003778:	3102      	adds	r1, #2
 800377a:	2b03      	cmp	r3, #3
 800377c:	d018      	beq.n	80037b0 <UART_SetConfig+0x24c>
 800377e:	3102      	adds	r1, #2
 8003780:	2b04      	cmp	r3, #4
 8003782:	d015      	beq.n	80037b0 <UART_SetConfig+0x24c>
 8003784:	3102      	adds	r1, #2
 8003786:	2b05      	cmp	r3, #5
 8003788:	d012      	beq.n	80037b0 <UART_SetConfig+0x24c>
 800378a:	3102      	adds	r1, #2
 800378c:	2b06      	cmp	r3, #6
 800378e:	d00f      	beq.n	80037b0 <UART_SetConfig+0x24c>
 8003790:	3104      	adds	r1, #4
 8003792:	2b07      	cmp	r3, #7
 8003794:	d00c      	beq.n	80037b0 <UART_SetConfig+0x24c>
 8003796:	3110      	adds	r1, #16
 8003798:	2b08      	cmp	r3, #8
 800379a:	d009      	beq.n	80037b0 <UART_SetConfig+0x24c>
 800379c:	3120      	adds	r1, #32
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d006      	beq.n	80037b0 <UART_SetConfig+0x24c>
 80037a2:	3140      	adds	r1, #64	; 0x40
 80037a4:	2b0a      	cmp	r3, #10
 80037a6:	d003      	beq.n	80037b0 <UART_SetConfig+0x24c>
 80037a8:	397f      	subs	r1, #127	; 0x7f
 80037aa:	2b0b      	cmp	r3, #11
 80037ac:	d100      	bne.n	80037b0 <UART_SetConfig+0x24c>
 80037ae:	31ff      	adds	r1, #255	; 0xff
 80037b0:	f7fc fcce 	bl	8000150 <__udivsi3>
        break;
 80037b4:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037b6:	0001      	movs	r1, r0
        break;
 80037b8:	e7b3      	b.n	8003722 <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037ba:	4921      	ldr	r1, [pc, #132]	; (8003840 <UART_SetConfig+0x2dc>)
 80037bc:	e7ce      	b.n	800375c <UART_SetConfig+0x1f8>
 80037be:	4921      	ldr	r1, [pc, #132]	; (8003844 <UART_SetConfig+0x2e0>)
 80037c0:	e76c      	b.n	800369c <UART_SetConfig+0x138>
 80037c2:	4921      	ldr	r1, [pc, #132]	; (8003848 <UART_SetConfig+0x2e4>)
 80037c4:	e7ca      	b.n	800375c <UART_SetConfig+0x1f8>
 80037c6:	4921      	ldr	r1, [pc, #132]	; (800384c <UART_SetConfig+0x2e8>)
 80037c8:	e7c8      	b.n	800375c <UART_SetConfig+0x1f8>
 80037ca:	4921      	ldr	r1, [pc, #132]	; (8003850 <UART_SetConfig+0x2ec>)
 80037cc:	e7c6      	b.n	800375c <UART_SetConfig+0x1f8>
 80037ce:	4921      	ldr	r1, [pc, #132]	; (8003854 <UART_SetConfig+0x2f0>)
 80037d0:	e7c4      	b.n	800375c <UART_SetConfig+0x1f8>
 80037d2:	4921      	ldr	r1, [pc, #132]	; (8003858 <UART_SetConfig+0x2f4>)
 80037d4:	e7c2      	b.n	800375c <UART_SetConfig+0x1f8>
 80037d6:	4921      	ldr	r1, [pc, #132]	; (800385c <UART_SetConfig+0x2f8>)
 80037d8:	e7c0      	b.n	800375c <UART_SetConfig+0x1f8>
 80037da:	4921      	ldr	r1, [pc, #132]	; (8003860 <UART_SetConfig+0x2fc>)
 80037dc:	e7be      	b.n	800375c <UART_SetConfig+0x1f8>
 80037de:	4921      	ldr	r1, [pc, #132]	; (8003864 <UART_SetConfig+0x300>)
 80037e0:	e7bc      	b.n	800375c <UART_SetConfig+0x1f8>
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <UART_SetConfig+0x304>)
 80037e4:	e7ba      	b.n	800375c <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0209      	lsls	r1, r1, #8
 80037ea:	e001      	b.n	80037f0 <UART_SetConfig+0x28c>
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	01c9      	lsls	r1, r1, #7
 80037f0:	2308      	movs	r3, #8
 80037f2:	e753      	b.n	800369c <UART_SetConfig+0x138>
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0189      	lsls	r1, r1, #6
 80037f8:	e7fa      	b.n	80037f0 <UART_SetConfig+0x28c>
 80037fa:	491c      	ldr	r1, [pc, #112]	; (800386c <UART_SetConfig+0x308>)
 80037fc:	e7f8      	b.n	80037f0 <UART_SetConfig+0x28c>
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	0149      	lsls	r1, r1, #5
 8003802:	e7f5      	b.n	80037f0 <UART_SetConfig+0x28c>
 8003804:	491a      	ldr	r1, [pc, #104]	; (8003870 <UART_SetConfig+0x30c>)
 8003806:	e7f3      	b.n	80037f0 <UART_SetConfig+0x28c>
 8003808:	491a      	ldr	r1, [pc, #104]	; (8003874 <UART_SetConfig+0x310>)
 800380a:	e7f1      	b.n	80037f0 <UART_SetConfig+0x28c>
 800380c:	0109      	lsls	r1, r1, #4
 800380e:	e7ef      	b.n	80037f0 <UART_SetConfig+0x28c>
 8003810:	cfff69f3 	.word	0xcfff69f3
 8003814:	ffffcfff 	.word	0xffffcfff
 8003818:	40008000 	.word	0x40008000
 800381c:	11fff4ff 	.word	0x11fff4ff
 8003820:	40013800 	.word	0x40013800
 8003824:	40021000 	.word	0x40021000
 8003828:	080063f4 	.word	0x080063f4
 800382c:	40004400 	.word	0x40004400
 8003830:	080063f8 	.word	0x080063f8
 8003834:	40004800 	.word	0x40004800
 8003838:	40004c00 	.word	0x40004c00
 800383c:	0000f424 	.word	0x0000f424
 8003840:	007a1200 	.word	0x007a1200
 8003844:	003d0900 	.word	0x003d0900
 8003848:	0028b0aa 	.word	0x0028b0aa
 800384c:	001e8480 	.word	0x001e8480
 8003850:	00186a00 	.word	0x00186a00
 8003854:	00145855 	.word	0x00145855
 8003858:	000f4240 	.word	0x000f4240
 800385c:	0007a120 	.word	0x0007a120
 8003860:	0003d090 	.word	0x0003d090
 8003864:	0001e848 	.word	0x0001e848
 8003868:	00f42400 	.word	0x00f42400
 800386c:	00001555 	.word	0x00001555
 8003870:	00000ccc 	.word	0x00000ccc
 8003874:	00000aaa 	.word	0x00000aaa
 8003878:	00c9      	lsls	r1, r1, #3
 800387a:	e70f      	b.n	800369c <UART_SetConfig+0x138>
 800387c:	0089      	lsls	r1, r1, #2
 800387e:	e7b7      	b.n	80037f0 <UART_SetConfig+0x28c>
 8003880:	0049      	lsls	r1, r1, #1
 8003882:	e7b5      	b.n	80037f0 <UART_SetConfig+0x28c>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe ff14 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003888:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800388a:	2201      	movs	r2, #1
 800388c:	2300      	movs	r3, #0
 800388e:	2900      	cmp	r1, #0
 8003890:	d02e      	beq.n	80038f0 <UART_SetConfig+0x38c>
 8003892:	2202      	movs	r2, #2
 8003894:	2300      	movs	r3, #0
 8003896:	2901      	cmp	r1, #1
 8003898:	d02a      	beq.n	80038f0 <UART_SetConfig+0x38c>
 800389a:	2204      	movs	r2, #4
 800389c:	2300      	movs	r3, #0
 800389e:	2902      	cmp	r1, #2
 80038a0:	d026      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038a2:	2206      	movs	r2, #6
 80038a4:	2300      	movs	r3, #0
 80038a6:	2903      	cmp	r1, #3
 80038a8:	d022      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038aa:	2208      	movs	r2, #8
 80038ac:	2300      	movs	r3, #0
 80038ae:	2904      	cmp	r1, #4
 80038b0:	d01e      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038b2:	220a      	movs	r2, #10
 80038b4:	2300      	movs	r3, #0
 80038b6:	2905      	cmp	r1, #5
 80038b8:	d01a      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038ba:	220c      	movs	r2, #12
 80038bc:	2300      	movs	r3, #0
 80038be:	2906      	cmp	r1, #6
 80038c0:	d016      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038c2:	2210      	movs	r2, #16
 80038c4:	2300      	movs	r3, #0
 80038c6:	2907      	cmp	r1, #7
 80038c8:	d012      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038ca:	2220      	movs	r2, #32
 80038cc:	2300      	movs	r3, #0
 80038ce:	2908      	cmp	r1, #8
 80038d0:	d00e      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	2300      	movs	r3, #0
 80038d6:	2909      	cmp	r1, #9
 80038d8:	d00a      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	2300      	movs	r3, #0
 80038de:	290a      	cmp	r1, #10
 80038e0:	d006      	beq.n	80038f0 <UART_SetConfig+0x38c>
 80038e2:	2201      	movs	r2, #1
 80038e4:	2300      	movs	r3, #0
 80038e6:	290b      	cmp	r1, #11
 80038e8:	d102      	bne.n	80038f0 <UART_SetConfig+0x38c>
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	2300      	movs	r3, #0
 80038ee:	0052      	lsls	r2, r2, #1
 80038f0:	2100      	movs	r1, #0
 80038f2:	f7fc fda3 	bl	800043c <__aeabi_uldivmod>
 80038f6:	2700      	movs	r7, #0
 80038f8:	6865      	ldr	r5, [r4, #4]
 80038fa:	0e06      	lsrs	r6, r0, #24
 80038fc:	020b      	lsls	r3, r1, #8
 80038fe:	4333      	orrs	r3, r6
 8003900:	0202      	lsls	r2, r0, #8
 8003902:	086e      	lsrs	r6, r5, #1
 8003904:	1992      	adds	r2, r2, r6
 8003906:	417b      	adcs	r3, r7
 8003908:	0010      	movs	r0, r2
 800390a:	0019      	movs	r1, r3
 800390c:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800390e:	003b      	movs	r3, r7
 8003910:	f7fc fd94 	bl	800043c <__aeabi_uldivmod>
            break;
 8003914:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003916:	4b96      	ldr	r3, [pc, #600]	; (8003b70 <UART_SetConfig+0x60c>)
 8003918:	4996      	ldr	r1, [pc, #600]	; (8003b74 <UART_SetConfig+0x610>)
 800391a:	18c3      	adds	r3, r0, r3
 800391c:	428b      	cmp	r3, r1
 800391e:	d900      	bls.n	8003922 <UART_SetConfig+0x3be>
 8003920:	e684      	b.n	800362c <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	60d8      	str	r0, [r3, #12]
 8003926:	e682      	b.n	800362e <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d030      	beq.n	8003990 <UART_SetConfig+0x42c>
 800392e:	2b01      	cmp	r3, #1
 8003930:	d01a      	beq.n	8003968 <UART_SetConfig+0x404>
 8003932:	2b02      	cmp	r3, #2
 8003934:	d01a      	beq.n	800396c <UART_SetConfig+0x408>
 8003936:	2b03      	cmp	r3, #3
 8003938:	d01a      	beq.n	8003970 <UART_SetConfig+0x40c>
 800393a:	2b04      	cmp	r3, #4
 800393c:	d01a      	beq.n	8003974 <UART_SetConfig+0x410>
 800393e:	2b05      	cmp	r3, #5
 8003940:	d01a      	beq.n	8003978 <UART_SetConfig+0x414>
 8003942:	2b06      	cmp	r3, #6
 8003944:	d01a      	beq.n	800397c <UART_SetConfig+0x418>
 8003946:	2b07      	cmp	r3, #7
 8003948:	d01a      	beq.n	8003980 <UART_SetConfig+0x41c>
 800394a:	2b08      	cmp	r3, #8
 800394c:	d01a      	beq.n	8003984 <UART_SetConfig+0x420>
 800394e:	2b09      	cmp	r3, #9
 8003950:	d01a      	beq.n	8003988 <UART_SetConfig+0x424>
 8003952:	2b0a      	cmp	r3, #10
 8003954:	d01a      	beq.n	800398c <UART_SetConfig+0x428>
 8003956:	2b0b      	cmp	r3, #11
 8003958:	d11a      	bne.n	8003990 <UART_SetConfig+0x42c>
 800395a:	4887      	ldr	r0, [pc, #540]	; (8003b78 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395c:	2100      	movs	r1, #0
 800395e:	2700      	movs	r7, #0
 8003960:	0856      	lsrs	r6, r2, #1
 8003962:	1980      	adds	r0, r0, r6
 8003964:	4179      	adcs	r1, r7
 8003966:	e7d2      	b.n	800390e <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003968:	4884      	ldr	r0, [pc, #528]	; (8003b7c <UART_SetConfig+0x618>)
 800396a:	e7f7      	b.n	800395c <UART_SetConfig+0x3f8>
 800396c:	4884      	ldr	r0, [pc, #528]	; (8003b80 <UART_SetConfig+0x61c>)
 800396e:	e7f5      	b.n	800395c <UART_SetConfig+0x3f8>
 8003970:	4884      	ldr	r0, [pc, #528]	; (8003b84 <UART_SetConfig+0x620>)
 8003972:	e7f3      	b.n	800395c <UART_SetConfig+0x3f8>
 8003974:	4884      	ldr	r0, [pc, #528]	; (8003b88 <UART_SetConfig+0x624>)
 8003976:	e7f1      	b.n	800395c <UART_SetConfig+0x3f8>
 8003978:	4884      	ldr	r0, [pc, #528]	; (8003b8c <UART_SetConfig+0x628>)
 800397a:	e7ef      	b.n	800395c <UART_SetConfig+0x3f8>
 800397c:	4884      	ldr	r0, [pc, #528]	; (8003b90 <UART_SetConfig+0x62c>)
 800397e:	e7ed      	b.n	800395c <UART_SetConfig+0x3f8>
 8003980:	4884      	ldr	r0, [pc, #528]	; (8003b94 <UART_SetConfig+0x630>)
 8003982:	e7eb      	b.n	800395c <UART_SetConfig+0x3f8>
 8003984:	4884      	ldr	r0, [pc, #528]	; (8003b98 <UART_SetConfig+0x634>)
 8003986:	e7e9      	b.n	800395c <UART_SetConfig+0x3f8>
 8003988:	4884      	ldr	r0, [pc, #528]	; (8003b9c <UART_SetConfig+0x638>)
 800398a:	e7e7      	b.n	800395c <UART_SetConfig+0x3f8>
 800398c:	4884      	ldr	r0, [pc, #528]	; (8003ba0 <UART_SetConfig+0x63c>)
 800398e:	e7e5      	b.n	800395c <UART_SetConfig+0x3f8>
 8003990:	4884      	ldr	r0, [pc, #528]	; (8003ba4 <UART_SetConfig+0x640>)
 8003992:	e7e3      	b.n	800395c <UART_SetConfig+0x3f8>
            pclk = HAL_RCC_GetSysClockFreq();
 8003994:	f7fe fd98 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003998:	e776      	b.n	8003888 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d018      	beq.n	80039d2 <UART_SetConfig+0x46e>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d019      	beq.n	80039d8 <UART_SetConfig+0x474>
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d01a      	beq.n	80039de <UART_SetConfig+0x47a>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d01b      	beq.n	80039e4 <UART_SetConfig+0x480>
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d01b      	beq.n	80039e8 <UART_SetConfig+0x484>
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d01c      	beq.n	80039ee <UART_SetConfig+0x48a>
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d01c      	beq.n	80039f2 <UART_SetConfig+0x48e>
 80039b8:	2080      	movs	r0, #128	; 0x80
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	d01b      	beq.n	80039f6 <UART_SetConfig+0x492>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d01b      	beq.n	80039fa <UART_SetConfig+0x496>
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	d01b      	beq.n	80039fe <UART_SetConfig+0x49a>
 80039c6:	2b0a      	cmp	r3, #10
 80039c8:	d01b      	beq.n	8003a02 <UART_SetConfig+0x49e>
 80039ca:	2b0b      	cmp	r3, #11
 80039cc:	d102      	bne.n	80039d4 <UART_SetConfig+0x470>
 80039ce:	0200      	lsls	r0, r0, #8
 80039d0:	e7c4      	b.n	800395c <UART_SetConfig+0x3f8>
 80039d2:	2080      	movs	r0, #128	; 0x80
 80039d4:	0400      	lsls	r0, r0, #16
 80039d6:	e7c1      	b.n	800395c <UART_SetConfig+0x3f8>
 80039d8:	2080      	movs	r0, #128	; 0x80
 80039da:	03c0      	lsls	r0, r0, #15
 80039dc:	e7be      	b.n	800395c <UART_SetConfig+0x3f8>
 80039de:	2080      	movs	r0, #128	; 0x80
 80039e0:	0380      	lsls	r0, r0, #14
 80039e2:	e7bb      	b.n	800395c <UART_SetConfig+0x3f8>
 80039e4:	4870      	ldr	r0, [pc, #448]	; (8003ba8 <UART_SetConfig+0x644>)
 80039e6:	e7b9      	b.n	800395c <UART_SetConfig+0x3f8>
 80039e8:	2080      	movs	r0, #128	; 0x80
 80039ea:	0340      	lsls	r0, r0, #13
 80039ec:	e7b6      	b.n	800395c <UART_SetConfig+0x3f8>
 80039ee:	486f      	ldr	r0, [pc, #444]	; (8003bac <UART_SetConfig+0x648>)
 80039f0:	e7b4      	b.n	800395c <UART_SetConfig+0x3f8>
 80039f2:	486f      	ldr	r0, [pc, #444]	; (8003bb0 <UART_SetConfig+0x64c>)
 80039f4:	e7b2      	b.n	800395c <UART_SetConfig+0x3f8>
 80039f6:	0300      	lsls	r0, r0, #12
 80039f8:	e7b0      	b.n	800395c <UART_SetConfig+0x3f8>
 80039fa:	02c0      	lsls	r0, r0, #11
 80039fc:	e7ae      	b.n	800395c <UART_SetConfig+0x3f8>
 80039fe:	0280      	lsls	r0, r0, #10
 8003a00:	e7ac      	b.n	800395c <UART_SetConfig+0x3f8>
 8003a02:	0240      	lsls	r0, r0, #9
 8003a04:	e7aa      	b.n	800395c <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 8003a06:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e784      	b.n	8003916 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02f      	beq.n	8003a70 <UART_SetConfig+0x50c>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d019      	beq.n	8003a48 <UART_SetConfig+0x4e4>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d019      	beq.n	8003a4c <UART_SetConfig+0x4e8>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d019      	beq.n	8003a50 <UART_SetConfig+0x4ec>
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d019      	beq.n	8003a54 <UART_SetConfig+0x4f0>
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d019      	beq.n	8003a58 <UART_SetConfig+0x4f4>
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d019      	beq.n	8003a5c <UART_SetConfig+0x4f8>
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d019      	beq.n	8003a60 <UART_SetConfig+0x4fc>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d019      	beq.n	8003a64 <UART_SetConfig+0x500>
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d019      	beq.n	8003a68 <UART_SetConfig+0x504>
 8003a34:	2b0a      	cmp	r3, #10
 8003a36:	d019      	beq.n	8003a6c <UART_SetConfig+0x508>
 8003a38:	2b0b      	cmp	r3, #11
 8003a3a:	d119      	bne.n	8003a70 <UART_SetConfig+0x50c>
 8003a3c:	485d      	ldr	r0, [pc, #372]	; (8003bb4 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	1818      	adds	r0, r3, r0
 8003a46:	e173      	b.n	8003d30 <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a48:	484b      	ldr	r0, [pc, #300]	; (8003b78 <UART_SetConfig+0x614>)
 8003a4a:	e7f8      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a4c:	485a      	ldr	r0, [pc, #360]	; (8003bb8 <UART_SetConfig+0x654>)
 8003a4e:	e7f6      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a50:	485a      	ldr	r0, [pc, #360]	; (8003bbc <UART_SetConfig+0x658>)
 8003a52:	e7f4      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a54:	485a      	ldr	r0, [pc, #360]	; (8003bc0 <UART_SetConfig+0x65c>)
 8003a56:	e7f2      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a58:	485a      	ldr	r0, [pc, #360]	; (8003bc4 <UART_SetConfig+0x660>)
 8003a5a:	e7f0      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a5c:	485a      	ldr	r0, [pc, #360]	; (8003bc8 <UART_SetConfig+0x664>)
 8003a5e:	e7ee      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a60:	485a      	ldr	r0, [pc, #360]	; (8003bcc <UART_SetConfig+0x668>)
 8003a62:	e7ec      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a64:	485a      	ldr	r0, [pc, #360]	; (8003bd0 <UART_SetConfig+0x66c>)
 8003a66:	e7ea      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a68:	485a      	ldr	r0, [pc, #360]	; (8003bd4 <UART_SetConfig+0x670>)
 8003a6a:	e7e8      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a6c:	485a      	ldr	r0, [pc, #360]	; (8003bd8 <UART_SetConfig+0x674>)
 8003a6e:	e7e6      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003a70:	484b      	ldr	r0, [pc, #300]	; (8003ba0 <UART_SetConfig+0x63c>)
 8003a72:	e7e4      	b.n	8003a3e <UART_SetConfig+0x4da>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a74:	f7fe fd28 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003a78:	e12d      	b.n	8003cd6 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <UART_SetConfig+0x54c>
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d019      	beq.n	8003ab6 <UART_SetConfig+0x552>
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d01a      	beq.n	8003abc <UART_SetConfig+0x558>
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d01b      	beq.n	8003ac2 <UART_SetConfig+0x55e>
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d01b      	beq.n	8003ac6 <UART_SetConfig+0x562>
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d01c      	beq.n	8003acc <UART_SetConfig+0x568>
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d01c      	beq.n	8003ad0 <UART_SetConfig+0x56c>
 8003a96:	2080      	movs	r0, #128	; 0x80
 8003a98:	2b07      	cmp	r3, #7
 8003a9a:	d01b      	beq.n	8003ad4 <UART_SetConfig+0x570>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d01b      	beq.n	8003ad8 <UART_SetConfig+0x574>
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d01b      	beq.n	8003adc <UART_SetConfig+0x578>
 8003aa4:	2b0a      	cmp	r3, #10
 8003aa6:	d01b      	beq.n	8003ae0 <UART_SetConfig+0x57c>
 8003aa8:	2b0b      	cmp	r3, #11
 8003aaa:	d102      	bne.n	8003ab2 <UART_SetConfig+0x54e>
 8003aac:	0040      	lsls	r0, r0, #1
 8003aae:	e7c6      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ab0:	2080      	movs	r0, #128	; 0x80
 8003ab2:	0240      	lsls	r0, r0, #9
 8003ab4:	e7c3      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ab6:	2080      	movs	r0, #128	; 0x80
 8003ab8:	0200      	lsls	r0, r0, #8
 8003aba:	e7c0      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003abc:	2080      	movs	r0, #128	; 0x80
 8003abe:	01c0      	lsls	r0, r0, #7
 8003ac0:	e7bd      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ac2:	4846      	ldr	r0, [pc, #280]	; (8003bdc <UART_SetConfig+0x678>)
 8003ac4:	e7bb      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ac6:	2080      	movs	r0, #128	; 0x80
 8003ac8:	0180      	lsls	r0, r0, #6
 8003aca:	e7b8      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003acc:	4844      	ldr	r0, [pc, #272]	; (8003be0 <UART_SetConfig+0x67c>)
 8003ace:	e7b6      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ad0:	4844      	ldr	r0, [pc, #272]	; (8003be4 <UART_SetConfig+0x680>)
 8003ad2:	e7b4      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ad4:	0140      	lsls	r0, r0, #5
 8003ad6:	e7b2      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ad8:	0100      	lsls	r0, r0, #4
 8003ada:	e7b0      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003adc:	00c0      	lsls	r0, r0, #3
 8003ade:	e7ae      	b.n	8003a3e <UART_SetConfig+0x4da>
 8003ae0:	0080      	lsls	r0, r0, #2
 8003ae2:	e7ac      	b.n	8003a3e <UART_SetConfig+0x4da>
    switch (clocksource)
 8003ae4:	2808      	cmp	r0, #8
 8003ae6:	d900      	bls.n	8003aea <UART_SetConfig+0x586>
 8003ae8:	e0eb      	b.n	8003cc2 <UART_SetConfig+0x75e>
 8003aea:	f7fc fb1d 	bl	8000128 <__gnu_thumb1_case_uqi>
 8003aee:	ea05      	.short	0xea05
 8003af0:	eab3ea7f 	.word	0xeab3ea7f
 8003af4:	eaea      	.short	0xeaea
 8003af6:	b6          	.byte	0xb6
 8003af7:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe fdda 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afe:	2101      	movs	r1, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d021      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b04:	1849      	adds	r1, r1, r1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d01e      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b0a:	3102      	adds	r1, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d01b      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b10:	3102      	adds	r1, #2
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d018      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b16:	3102      	adds	r1, #2
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d015      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b1c:	3102      	adds	r1, #2
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d012      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b22:	3102      	adds	r1, #2
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d00f      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b28:	3104      	adds	r1, #4
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	d00c      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b2e:	3110      	adds	r1, #16
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d009      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b34:	3120      	adds	r1, #32
 8003b36:	2b09      	cmp	r3, #9
 8003b38:	d006      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b3a:	3140      	adds	r1, #64	; 0x40
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0x5e4>
 8003b40:	397f      	subs	r1, #127	; 0x7f
 8003b42:	2b0b      	cmp	r3, #11
 8003b44:	d100      	bne.n	8003b48 <UART_SetConfig+0x5e4>
 8003b46:	31ff      	adds	r1, #255	; 0xff
 8003b48:	6865      	ldr	r5, [r4, #4]
 8003b4a:	f7fc fb01 	bl	8000150 <__udivsi3>
 8003b4e:	0029      	movs	r1, r5
 8003b50:	086b      	lsrs	r3, r5, #1
 8003b52:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b54:	f7fc fafc 	bl	8000150 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b58:	2200      	movs	r2, #0
 8003b5a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	4822      	ldr	r0, [pc, #136]	; (8003be8 <UART_SetConfig+0x684>)
 8003b60:	3910      	subs	r1, #16
 8003b62:	4281      	cmp	r1, r0
 8003b64:	d900      	bls.n	8003b68 <UART_SetConfig+0x604>
 8003b66:	e561      	b.n	800362c <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 8003b68:	6821      	ldr	r1, [r4, #0]
 8003b6a:	60cb      	str	r3, [r1, #12]
 8003b6c:	e55f      	b.n	800362e <UART_SetConfig+0xca>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	fffffd00 	.word	0xfffffd00
 8003b74:	000ffcff 	.word	0x000ffcff
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	7a120000 	.word	0x7a120000
 8003b80:	3d090000 	.word	0x3d090000
 8003b84:	28b0aa00 	.word	0x28b0aa00
 8003b88:	1e848000 	.word	0x1e848000
 8003b8c:	186a0000 	.word	0x186a0000
 8003b90:	14585500 	.word	0x14585500
 8003b94:	0f424000 	.word	0x0f424000
 8003b98:	07a12000 	.word	0x07a12000
 8003b9c:	03d09000 	.word	0x03d09000
 8003ba0:	01e84800 	.word	0x01e84800
 8003ba4:	f4240000 	.word	0xf4240000
 8003ba8:	00155500 	.word	0x00155500
 8003bac:	000ccc00 	.word	0x000ccc00
 8003bb0:	000aaa00 	.word	0x000aaa00
 8003bb4:	0001e848 	.word	0x0001e848
 8003bb8:	007a1200 	.word	0x007a1200
 8003bbc:	00516154 	.word	0x00516154
 8003bc0:	003d0900 	.word	0x003d0900
 8003bc4:	0030d400 	.word	0x0030d400
 8003bc8:	0028b0aa 	.word	0x0028b0aa
 8003bcc:	001e8480 	.word	0x001e8480
 8003bd0:	000f4240 	.word	0x000f4240
 8003bd4:	0007a120 	.word	0x0007a120
 8003bd8:	0003d090 	.word	0x0003d090
 8003bdc:	00002aaa 	.word	0x00002aaa
 8003be0:	00001998 	.word	0x00001998
 8003be4:	00001554 	.word	0x00001554
 8003be8:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02f      	beq.n	8003c50 <UART_SetConfig+0x6ec>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d019      	beq.n	8003c28 <UART_SetConfig+0x6c4>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d019      	beq.n	8003c2c <UART_SetConfig+0x6c8>
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d019      	beq.n	8003c30 <UART_SetConfig+0x6cc>
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d019      	beq.n	8003c34 <UART_SetConfig+0x6d0>
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d019      	beq.n	8003c38 <UART_SetConfig+0x6d4>
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d019      	beq.n	8003c3c <UART_SetConfig+0x6d8>
 8003c08:	2b07      	cmp	r3, #7
 8003c0a:	d019      	beq.n	8003c40 <UART_SetConfig+0x6dc>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d019      	beq.n	8003c44 <UART_SetConfig+0x6e0>
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d019      	beq.n	8003c48 <UART_SetConfig+0x6e4>
 8003c14:	2b0a      	cmp	r3, #10
 8003c16:	d019      	beq.n	8003c4c <UART_SetConfig+0x6e8>
 8003c18:	2b0b      	cmp	r3, #11
 8003c1a:	d119      	bne.n	8003c50 <UART_SetConfig+0x6ec>
 8003c1c:	484e      	ldr	r0, [pc, #312]	; (8003d58 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c1e:	6863      	ldr	r3, [r4, #4]
 8003c20:	6861      	ldr	r1, [r4, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	1818      	adds	r0, r3, r0
 8003c26:	e795      	b.n	8003b54 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c28:	484c      	ldr	r0, [pc, #304]	; (8003d5c <UART_SetConfig+0x7f8>)
 8003c2a:	e7f8      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c2c:	484c      	ldr	r0, [pc, #304]	; (8003d60 <UART_SetConfig+0x7fc>)
 8003c2e:	e7f6      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c30:	484c      	ldr	r0, [pc, #304]	; (8003d64 <UART_SetConfig+0x800>)
 8003c32:	e7f4      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c34:	484c      	ldr	r0, [pc, #304]	; (8003d68 <UART_SetConfig+0x804>)
 8003c36:	e7f2      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c38:	484c      	ldr	r0, [pc, #304]	; (8003d6c <UART_SetConfig+0x808>)
 8003c3a:	e7f0      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c3c:	484c      	ldr	r0, [pc, #304]	; (8003d70 <UART_SetConfig+0x80c>)
 8003c3e:	e7ee      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c40:	484c      	ldr	r0, [pc, #304]	; (8003d74 <UART_SetConfig+0x810>)
 8003c42:	e7ec      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c44:	484c      	ldr	r0, [pc, #304]	; (8003d78 <UART_SetConfig+0x814>)
 8003c46:	e7ea      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c48:	484c      	ldr	r0, [pc, #304]	; (8003d7c <UART_SetConfig+0x818>)
 8003c4a:	e7e8      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c4c:	484c      	ldr	r0, [pc, #304]	; (8003d80 <UART_SetConfig+0x81c>)
 8003c4e:	e7e6      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c50:	484c      	ldr	r0, [pc, #304]	; (8003d84 <UART_SetConfig+0x820>)
 8003c52:	e7e4      	b.n	8003c1e <UART_SetConfig+0x6ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c54:	f7fe fc38 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003c58:	e750      	b.n	8003afc <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <UART_SetConfig+0x72c>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d018      	beq.n	8003c94 <UART_SetConfig+0x730>
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d019      	beq.n	8003c9a <UART_SetConfig+0x736>
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d01a      	beq.n	8003ca0 <UART_SetConfig+0x73c>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d01a      	beq.n	8003ca4 <UART_SetConfig+0x740>
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d01b      	beq.n	8003caa <UART_SetConfig+0x746>
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d01b      	beq.n	8003cae <UART_SetConfig+0x74a>
 8003c76:	2080      	movs	r0, #128	; 0x80
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d01a      	beq.n	8003cb2 <UART_SetConfig+0x74e>
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d01a      	beq.n	8003cb6 <UART_SetConfig+0x752>
 8003c80:	2b09      	cmp	r3, #9
 8003c82:	d01a      	beq.n	8003cba <UART_SetConfig+0x756>
 8003c84:	2b0a      	cmp	r3, #10
 8003c86:	d01a      	beq.n	8003cbe <UART_SetConfig+0x75a>
 8003c88:	2b0b      	cmp	r3, #11
 8003c8a:	d0c8      	beq.n	8003c1e <UART_SetConfig+0x6ba>
 8003c8c:	0200      	lsls	r0, r0, #8
 8003c8e:	e7c6      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c90:	2080      	movs	r0, #128	; 0x80
 8003c92:	e7fb      	b.n	8003c8c <UART_SetConfig+0x728>
 8003c94:	2080      	movs	r0, #128	; 0x80
 8003c96:	01c0      	lsls	r0, r0, #7
 8003c98:	e7c1      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003c9a:	2080      	movs	r0, #128	; 0x80
 8003c9c:	0180      	lsls	r0, r0, #6
 8003c9e:	e7be      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003ca0:	4839      	ldr	r0, [pc, #228]	; (8003d88 <UART_SetConfig+0x824>)
 8003ca2:	e7bc      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003ca4:	2080      	movs	r0, #128	; 0x80
 8003ca6:	0140      	lsls	r0, r0, #5
 8003ca8:	e7b9      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003caa:	4838      	ldr	r0, [pc, #224]	; (8003d8c <UART_SetConfig+0x828>)
 8003cac:	e7b7      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003cae:	4838      	ldr	r0, [pc, #224]	; (8003d90 <UART_SetConfig+0x82c>)
 8003cb0:	e7b5      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003cb2:	0100      	lsls	r0, r0, #4
 8003cb4:	e7b3      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003cb6:	00c0      	lsls	r0, r0, #3
 8003cb8:	e7b1      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003cba:	0080      	lsls	r0, r0, #2
 8003cbc:	e7af      	b.n	8003c1e <UART_SetConfig+0x6ba>
 8003cbe:	0040      	lsls	r0, r0, #1
 8003cc0:	e7ad      	b.n	8003c1e <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 8003cc2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e749      	b.n	8003b5c <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d000      	beq.n	8003cd2 <UART_SetConfig+0x76e>
 8003cd0:	e712      	b.n	8003af8 <UART_SetConfig+0x594>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd2:	f7fe fced 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd8:	2101      	movs	r1, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d021      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003cde:	1849      	adds	r1, r1, r1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d01e      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003ce4:	3102      	adds	r1, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d01b      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003cea:	3102      	adds	r1, #2
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d018      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003cf0:	3102      	adds	r1, #2
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d015      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003cf6:	3102      	adds	r1, #2
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d012      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003cfc:	3102      	adds	r1, #2
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d00f      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003d02:	3104      	adds	r1, #4
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d00c      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003d08:	3110      	adds	r1, #16
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003d0e:	3120      	adds	r1, #32
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d006      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003d14:	3140      	adds	r1, #64	; 0x40
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d003      	beq.n	8003d22 <UART_SetConfig+0x7be>
 8003d1a:	397f      	subs	r1, #127	; 0x7f
 8003d1c:	2b0b      	cmp	r3, #11
 8003d1e:	d100      	bne.n	8003d22 <UART_SetConfig+0x7be>
 8003d20:	31ff      	adds	r1, #255	; 0xff
 8003d22:	f7fc fa15 	bl	8000150 <__udivsi3>
 8003d26:	6865      	ldr	r5, [r4, #4]
 8003d28:	0040      	lsls	r0, r0, #1
 8003d2a:	0029      	movs	r1, r5
 8003d2c:	086b      	lsrs	r3, r5, #1
 8003d2e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d30:	f7fc fa0e 	bl	8000150 <__udivsi3>
 8003d34:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d36:	0003      	movs	r3, r0
 8003d38:	4a16      	ldr	r2, [pc, #88]	; (8003d94 <UART_SetConfig+0x830>)
 8003d3a:	3b10      	subs	r3, #16
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d900      	bls.n	8003d42 <UART_SetConfig+0x7de>
 8003d40:	e474      	b.n	800362c <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d42:	230f      	movs	r3, #15
 8003d44:	0002      	movs	r2, r0
 8003d46:	439a      	bics	r2, r3
 8003d48:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4a:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8003d4c:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4e:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8003d50:	4318      	orrs	r0, r3
 8003d52:	60d0      	str	r0, [r2, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	e46a      	b.n	800362e <UART_SetConfig+0xca>
 8003d58:	0000f424 	.word	0x0000f424
 8003d5c:	007a1200 	.word	0x007a1200
 8003d60:	003d0900 	.word	0x003d0900
 8003d64:	0028b0aa 	.word	0x0028b0aa
 8003d68:	001e8480 	.word	0x001e8480
 8003d6c:	00186a00 	.word	0x00186a00
 8003d70:	00145855 	.word	0x00145855
 8003d74:	000f4240 	.word	0x000f4240
 8003d78:	0007a120 	.word	0x0007a120
 8003d7c:	0003d090 	.word	0x0003d090
 8003d80:	0001e848 	.word	0x0001e848
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	00001555 	.word	0x00001555
 8003d8c:	00000ccc 	.word	0x00000ccc
 8003d90:	00000aaa 	.word	0x00000aaa
 8003d94:	0000ffef 	.word	0x0000ffef

08003d98 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d98:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8003d9a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d9c:	07da      	lsls	r2, r3, #31
 8003d9e:	d506      	bpl.n	8003dae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da0:	6801      	ldr	r1, [r0, #0]
 8003da2:	4c28      	ldr	r4, [pc, #160]	; (8003e44 <UART_AdvFeatureConfig+0xac>)
 8003da4:	684a      	ldr	r2, [r1, #4]
 8003da6:	4022      	ands	r2, r4
 8003da8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003daa:	4322      	orrs	r2, r4
 8003dac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dae:	079a      	lsls	r2, r3, #30
 8003db0:	d506      	bpl.n	8003dc0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db2:	6801      	ldr	r1, [r0, #0]
 8003db4:	4c24      	ldr	r4, [pc, #144]	; (8003e48 <UART_AdvFeatureConfig+0xb0>)
 8003db6:	684a      	ldr	r2, [r1, #4]
 8003db8:	4022      	ands	r2, r4
 8003dba:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003dbc:	4322      	orrs	r2, r4
 8003dbe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dc0:	075a      	lsls	r2, r3, #29
 8003dc2:	d506      	bpl.n	8003dd2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc4:	6801      	ldr	r1, [r0, #0]
 8003dc6:	4c21      	ldr	r4, [pc, #132]	; (8003e4c <UART_AdvFeatureConfig+0xb4>)
 8003dc8:	684a      	ldr	r2, [r1, #4]
 8003dca:	4022      	ands	r2, r4
 8003dcc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003dce:	4322      	orrs	r2, r4
 8003dd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd2:	071a      	lsls	r2, r3, #28
 8003dd4:	d506      	bpl.n	8003de4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd6:	6801      	ldr	r1, [r0, #0]
 8003dd8:	4c1d      	ldr	r4, [pc, #116]	; (8003e50 <UART_AdvFeatureConfig+0xb8>)
 8003dda:	684a      	ldr	r2, [r1, #4]
 8003ddc:	4022      	ands	r2, r4
 8003dde:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003de0:	4322      	orrs	r2, r4
 8003de2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de4:	06da      	lsls	r2, r3, #27
 8003de6:	d506      	bpl.n	8003df6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de8:	6801      	ldr	r1, [r0, #0]
 8003dea:	4c1a      	ldr	r4, [pc, #104]	; (8003e54 <UART_AdvFeatureConfig+0xbc>)
 8003dec:	688a      	ldr	r2, [r1, #8]
 8003dee:	4022      	ands	r2, r4
 8003df0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003df2:	4322      	orrs	r2, r4
 8003df4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003df6:	069a      	lsls	r2, r3, #26
 8003df8:	d506      	bpl.n	8003e08 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dfa:	6801      	ldr	r1, [r0, #0]
 8003dfc:	4c16      	ldr	r4, [pc, #88]	; (8003e58 <UART_AdvFeatureConfig+0xc0>)
 8003dfe:	688a      	ldr	r2, [r1, #8]
 8003e00:	4022      	ands	r2, r4
 8003e02:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e04:	4322      	orrs	r2, r4
 8003e06:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	065a      	lsls	r2, r3, #25
 8003e0a:	d510      	bpl.n	8003e2e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e0c:	6801      	ldr	r1, [r0, #0]
 8003e0e:	4d13      	ldr	r5, [pc, #76]	; (8003e5c <UART_AdvFeatureConfig+0xc4>)
 8003e10:	684a      	ldr	r2, [r1, #4]
 8003e12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003e14:	402a      	ands	r2, r5
 8003e16:	4322      	orrs	r2, r4
 8003e18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	0352      	lsls	r2, r2, #13
 8003e1e:	4294      	cmp	r4, r2
 8003e20:	d105      	bne.n	8003e2e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e22:	684a      	ldr	r2, [r1, #4]
 8003e24:	4c0e      	ldr	r4, [pc, #56]	; (8003e60 <UART_AdvFeatureConfig+0xc8>)
 8003e26:	4022      	ands	r2, r4
 8003e28:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003e2a:	4322      	orrs	r2, r4
 8003e2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	d506      	bpl.n	8003e40 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e32:	6802      	ldr	r2, [r0, #0]
 8003e34:	490b      	ldr	r1, [pc, #44]	; (8003e64 <UART_AdvFeatureConfig+0xcc>)
 8003e36:	6853      	ldr	r3, [r2, #4]
 8003e38:	400b      	ands	r3, r1
 8003e3a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6053      	str	r3, [r2, #4]
}
 8003e40:	bd30      	pop	{r4, r5, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	fffdffff 	.word	0xfffdffff
 8003e48:	fffeffff 	.word	0xfffeffff
 8003e4c:	fffbffff 	.word	0xfffbffff
 8003e50:	ffff7fff 	.word	0xffff7fff
 8003e54:	ffffefff 	.word	0xffffefff
 8003e58:	ffffdfff 	.word	0xffffdfff
 8003e5c:	ffefffff 	.word	0xffefffff
 8003e60:	ff9fffff 	.word	0xff9fffff
 8003e64:	fff7ffff 	.word	0xfff7ffff

08003e68 <UART_WaitOnFlagUntilTimeout>:
{
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	000e      	movs	r6, r1
 8003e6e:	0015      	movs	r5, r2
 8003e70:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	69d3      	ldr	r3, [r2, #28]
 8003e76:	4033      	ands	r3, r6
 8003e78:	1b9b      	subs	r3, r3, r6
 8003e7a:	4259      	negs	r1, r3
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	42ab      	cmp	r3, r5
 8003e80:	d001      	beq.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003e82:	2000      	movs	r0, #0
 8003e84:	e01e      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	9b06      	ldr	r3, [sp, #24]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d0f3      	beq.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fc fc28 	bl	80006e0 <HAL_GetTick>
 8003e90:	9b06      	ldr	r3, [sp, #24]
 8003e92:	1bc0      	subs	r0, r0, r7
 8003e94:	4283      	cmp	r3, r0
 8003e96:	d301      	bcc.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x34>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ea      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e9c:	0022      	movs	r2, r4
 8003e9e:	ca08      	ldmia	r2!, {r3}
 8003ea0:	4809      	ldr	r0, [pc, #36]	; (8003ec8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	4001      	ands	r1, r0
 8003ea6:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	6899      	ldr	r1, [r3, #8]
 8003eaa:	30a3      	adds	r0, #163	; 0xa3
 8003eac:	30ff      	adds	r0, #255	; 0xff
 8003eae:	4381      	bics	r1, r0
 8003eb0:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	0022      	movs	r2, r4
 8003eb8:	3208      	adds	r2, #8
 8003eba:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	347c      	adds	r4, #124	; 0x7c
 8003ec0:	7023      	strb	r3, [r4, #0]
 8003ec2:	3002      	adds	r0, #2
}
 8003ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	fffffe5f 	.word	0xfffffe5f

08003ecc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	0003      	movs	r3, r0
{
 8003ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	2600      	movs	r6, #0
{
 8003ed2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	3388      	adds	r3, #136	; 0x88
 8003ed6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003ed8:	f7fc fc02 	bl	80006e0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003edc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003ede:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	071b      	lsls	r3, r3, #28
 8003ee4:	d417      	bmi.n	8003f16 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	075b      	lsls	r3, r3, #29
 8003eec:	d50a      	bpl.n	8003f04 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <UART_CheckIdleState+0x64>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	03c9      	lsls	r1, r1, #15
 8003ef8:	002b      	movs	r3, r5
 8003efa:	0020      	movs	r0, r4
 8003efc:	f7ff ffb4 	bl	8003e68 <UART_WaitOnFlagUntilTimeout>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d113      	bne.n	8003f2c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003f06:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f08:	1d22      	adds	r2, r4, #4
 8003f0a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003f0c:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	3204      	adds	r2, #4
 8003f10:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003f12:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003f14:	e00b      	b.n	8003f2e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <UART_CheckIdleState+0x64>)
 8003f1a:	0032      	movs	r2, r6
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	0389      	lsls	r1, r1, #14
 8003f20:	0003      	movs	r3, r0
 8003f22:	0020      	movs	r0, r4
 8003f24:	f7ff ffa0 	bl	8003e68 <UART_WaitOnFlagUntilTimeout>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d0dc      	beq.n	8003ee6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003f2c:	2003      	movs	r0, #3
}
 8003f2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003f30:	01ffffff 	.word	0x01ffffff

08003f34 <HAL_UART_Init>:
{
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003f3a:	2001      	movs	r0, #1
}
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3e:	1d05      	adds	r5, r0, #4
 8003f40:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8003f46:	0002      	movs	r2, r0
 8003f48:	327c      	adds	r2, #124	; 0x7c
 8003f4a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003f4c:	f001 fd2c 	bl	80059a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003f52:	2101      	movs	r1, #1
 8003f54:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f56:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003f58:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f5a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003f5c:	438b      	bics	r3, r1
 8003f5e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f60:	f7ff fb00 	bl	8003564 <UART_SetConfig>
 8003f64:	2801      	cmp	r0, #1
 8003f66:	d0e8      	beq.n	8003f3a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8003f6e:	0020      	movs	r0, r4
 8003f70:	f7ff ff12 	bl	8003d98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <HAL_UART_Init+0x64>)
 8003f78:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003f7a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	438a      	bics	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f88:	2201      	movs	r2, #1
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003f90:	f7ff ff9c 	bl	8003ecc <UART_CheckIdleState>
 8003f94:	e7d2      	b.n	8003f3c <HAL_UART_Init+0x8>
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	ffffb7ff 	.word	0xffffb7ff

08003f9c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f9c:	2301      	movs	r3, #1
{
 8003f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa0:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003fa2:	aa02      	add	r2, sp, #8
 8003fa4:	7013      	strb	r3, [r2, #0]
 8003fa6:	7053      	strb	r3, [r2, #1]
 8003fa8:	7093      	strb	r3, [r2, #2]
 8003faa:	2203      	movs	r2, #3
 8003fac:	a902      	add	r1, sp, #8
 8003fae:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003fb0:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003fb6:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003fb8:	718a      	strb	r2, [r1, #6]
 8003fba:	71ca      	strb	r2, [r1, #7]
 8003fbc:	710e      	strb	r6, [r1, #4]
 8003fbe:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003fc0:	70a5      	strb	r5, [r4, #2]
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	0007      	movs	r7, r0
 8003fc6:	0005      	movs	r5, r0
 8003fc8:	3208      	adds	r2, #8
 8003fca:	7022      	strb	r2, [r4, #0]
 8003fcc:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fce:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003fd0:	7061      	strb	r1, [r4, #1]
 8003fd2:	70e1      	strb	r1, [r4, #3]
 8003fd4:	7163      	strb	r3, [r4, #5]
 8003fd6:	71a3      	strb	r3, [r4, #6]
 8003fd8:	71e3      	strb	r3, [r4, #7]
 8003fda:	376a      	adds	r7, #106	; 0x6a
 8003fdc:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d103      	bne.n	8003fea <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8003fe2:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8003fe4:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fe6:	b007      	add	sp, #28
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fea:	6803      	ldr	r3, [r0, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fee:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ff0:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ff2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003ff4:	aa02      	add	r2, sp, #8
 8003ff6:	5cd0      	ldrb	r0, [r2, r3]
 8003ff8:	5ce1      	ldrb	r1, [r4, r3]
 8003ffa:	00c0      	lsls	r0, r0, #3
 8003ffc:	f7fc f932 	bl	8000264 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004000:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004002:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004004:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004006:	401e      	ands	r6, r3
 8004008:	ab02      	add	r3, sp, #8
 800400a:	5d98      	ldrb	r0, [r3, r6]
 800400c:	5da1      	ldrb	r1, [r4, r6]
 800400e:	00c0      	lsls	r0, r0, #3
 8004010:	f7fc f928 	bl	8000264 <__divsi3>
 8004014:	8028      	strh	r0, [r5, #0]
}
 8004016:	e7e6      	b.n	8003fe6 <UARTEx_SetNbDataToProcess+0x4a>

08004018 <HAL_UARTEx_WakeupCallback>:
 8004018:	4770      	bx	lr

0800401a <HAL_UARTEx_RxFifoFullCallback>:
 800401a:	4770      	bx	lr

0800401c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800401c:	4770      	bx	lr
	...

08004020 <HAL_UARTEx_DisableFifoMode>:
{
 8004020:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004022:	0004      	movs	r4, r0
 8004024:	347c      	adds	r4, #124	; 0x7c
 8004026:	7822      	ldrb	r2, [r4, #0]
 8004028:	2302      	movs	r3, #2
 800402a:	2a01      	cmp	r2, #1
 800402c:	d010      	beq.n	8004050 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800402e:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004030:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004032:	1d05      	adds	r5, r0, #4
 8004034:	3322      	adds	r3, #34	; 0x22
 8004036:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004038:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	43b3      	bics	r3, r6
 800403e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <HAL_UARTEx_DisableFifoMode+0x34>)
 8004042:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004044:	2300      	movs	r3, #0
 8004046:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004048:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800404a:	2220      	movs	r2, #32
 800404c:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800404e:	7023      	strb	r3, [r4, #0]
}
 8004050:	0018      	movs	r0, r3
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	dfffffff 	.word	0xdfffffff

08004058 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800405a:	0005      	movs	r5, r0
 800405c:	357c      	adds	r5, #124	; 0x7c
 800405e:	782b      	ldrb	r3, [r5, #0]
{
 8004060:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004062:	2002      	movs	r0, #2
 8004064:	2b01      	cmp	r3, #1
 8004066:	d017      	beq.n	8004098 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800406a:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 800406c:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800406e:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8004070:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004072:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004074:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004076:	6813      	ldr	r3, [r2, #0]
 8004078:	4383      	bics	r3, r0
 800407a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800407c:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800407e:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	4319      	orrs	r1, r3
 8004086:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004088:	f7ff ff88 	bl	8003f9c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800408e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004090:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004092:	2320      	movs	r3, #32
 8004094:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004096:	7028      	strb	r0, [r5, #0]
}
 8004098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800409c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800409e:	0005      	movs	r5, r0
 80040a0:	357c      	adds	r5, #124	; 0x7c
 80040a2:	782b      	ldrb	r3, [r5, #0]
{
 80040a4:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80040a6:	2002      	movs	r0, #2
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d017      	beq.n	80040dc <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80040ae:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80040b2:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4382      	bics	r2, r0
 80040be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	4807      	ldr	r0, [pc, #28]	; (80040e0 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 80040c4:	4002      	ands	r2, r0
 80040c6:	4311      	orrs	r1, r2
 80040c8:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80040ca:	0020      	movs	r0, r4
 80040cc:	f7ff ff66 	bl	8003f9c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040d0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80040d2:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040d4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	2320      	movs	r3, #32
 80040d8:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80040da:	7028      	strb	r0, [r5, #0]
}
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	f1ffffff 	.word	0xf1ffffff

080040e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80040e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80040e6:	220c      	movs	r2, #12
 80040e8:	2100      	movs	r1, #0
 80040ea:	a801      	add	r0, sp, #4
 80040ec:	f001 fd35 	bl	8005b5a <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80040f0:	4c1f      	ldr	r4, [pc, #124]	; (8004170 <MX_ADC1_Init+0x8c>)
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <MX_ADC1_Init+0x90>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040f4:	2280      	movs	r2, #128	; 0x80
  hadc1.Instance = ADC1;
 80040f6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80040f8:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040fa:	0392      	lsls	r2, r2, #14
 80040fc:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040fe:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004104:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004106:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 2;
 8004108:	3a02      	subs	r2, #2
 800410a:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800410c:	1c62      	adds	r2, r4, #1
 800410e:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004110:	0022      	movs	r2, r4
 8004112:	322c      	adds	r2, #44	; 0x2c
 8004114:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
 8004116:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004118:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 800411a:	323c      	adds	r2, #60	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800411c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800411e:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004120:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004122:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004124:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004126:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004128:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800412a:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800412c:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800412e:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004130:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004132:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004134:	f7fc faf0 	bl	8000718 <HAL_ADC_Init>
 8004138:	2800      	cmp	r0, #0
 800413a:	d001      	beq.n	8004140 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 800413c:	f000 fbc5 	bl	80048ca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004140:	2301      	movs	r3, #1
 8004142:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004144:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004146:	a901      	add	r1, sp, #4
 8004148:	0020      	movs	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800414a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800414c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800414e:	f7fc fccd 	bl	8000aec <HAL_ADC_ConfigChannel>
 8004152:	2800      	cmp	r0, #0
 8004154:	d001      	beq.n	800415a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8004156:	f000 fbb8 	bl	80048ca <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800415a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800415c:	a901      	add	r1, sp, #4
 800415e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004160:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004162:	f7fc fcc3 	bl	8000aec <HAL_ADC_ConfigChannel>
 8004166:	2800      	cmp	r0, #0
 8004168:	d001      	beq.n	800416e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800416a:	f000 fbae 	bl	80048ca <Error_Handler>
  }

}
 800416e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8004170:	200006b0 	.word	0x200006b0
 8004174:	40012400 	.word	0x40012400

08004178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004178:	b510      	push	{r4, lr}
 800417a:	0004      	movs	r4, r0
 800417c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417e:	2214      	movs	r2, #20
 8004180:	2100      	movs	r1, #0
 8004182:	a803      	add	r0, sp, #12
 8004184:	f001 fce9 	bl	8005b5a <memset>
  if(adcHandle->Instance==ADC1)
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_ADC_MspInit+0x64>)
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d122      	bne.n	80041d6 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004190:	2080      	movs	r0, #128	; 0x80
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_ADC_MspInit+0x68>)
 8004194:	0340      	lsls	r0, r0, #13
 8004196:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004198:	4301      	orrs	r1, r0
 800419a:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800419e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a0:	4002      	ands	r2, r0
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041aa:	430a      	orrs	r2, r1
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b2:	400b      	ands	r3, r1
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 80041b8:	2321      	movs	r3, #33	; 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 80041bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041be:	3b1e      	subs	r3, #30
 80041c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c2:	f7fc ffb5 	bl	8001130 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	200c      	movs	r0, #12
 80041ca:	0011      	movs	r1, r2
 80041cc:	f7fc fdae 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80041d0:	200c      	movs	r0, #12
 80041d2:	f7fc fddb 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80041d6:	b008      	add	sp, #32
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	40012400 	.word	0x40012400
 80041e0:	40021000 	.word	0x40021000

080041e4 <bluetoothCMD_ACK>:

	return 1;
}


uint8_t bluetoothCMD_ACK(char *cmd, char *ack){
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	0007      	movs	r7, r0
		memset(btRxBuff, 0, sizeof(btRxBuff));
 80041e8:	4d1e      	ldr	r5, [pc, #120]	; (8004264 <bluetoothCMD_ACK+0x80>)
 80041ea:	22ff      	movs	r2, #255	; 0xff
uint8_t bluetoothCMD_ACK(char *cmd, char *ack){
 80041ec:	000e      	movs	r6, r1
		memset(btRxBuff, 0, sizeof(btRxBuff));
 80041ee:	0028      	movs	r0, r5
 80041f0:	2100      	movs	r1, #0
 80041f2:	f001 fcb2 	bl	8005b5a <memset>


		if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 80041f6:	0038      	movs	r0, r7
 80041f8:	f7fb ff8e 	bl	8000118 <strlen>
 80041fc:	4c1a      	ldr	r4, [pc, #104]	; (8004268 <bluetoothCMD_ACK+0x84>)
 80041fe:	b282      	uxth	r2, r0
 8004200:	0039      	movs	r1, r7
 8004202:	0020      	movs	r0, r4
 8004204:	f7fe ff5c 	bl	80030c0 <HAL_UART_Transmit_DMA>
 8004208:	2800      	cmp	r0, #0
 800420a:	d001      	beq.n	8004210 <bluetoothCMD_ACK+0x2c>
 800420c:	2000      	movs	r0, #0
		HAL_UART_DMAStop(&huart2);
		if(strstr((char *)btRxBuff, ack) == 0) return 0;

		return 1;

}
 800420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while(HAL_DMA_GetState(&hdma_usart2_tx) == HAL_DMA_STATE_BUSY);
 8004210:	4816      	ldr	r0, [pc, #88]	; (800426c <bluetoothCMD_ACK+0x88>)
 8004212:	f7fc ff87 	bl	8001124 <HAL_DMA_GetState>
 8004216:	2802      	cmp	r0, #2
 8004218:	d0fa      	beq.n	8004210 <bluetoothCMD_ACK+0x2c>
		while(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 800421a:	0020      	movs	r0, r4
 800421c:	f7ff f99b 	bl	8003556 <HAL_UART_GetState>
 8004220:	2821      	cmp	r0, #33	; 0x21
 8004222:	d0fa      	beq.n	800421a <bluetoothCMD_ACK+0x36>
		if(HAL_UART_Receive_DMA(&huart2, btRxBuff, strlen(ack)) != HAL_OK) return 0;
 8004224:	0030      	movs	r0, r6
 8004226:	f7fb ff77 	bl	8000118 <strlen>
 800422a:	0029      	movs	r1, r5
 800422c:	b282      	uxth	r2, r0
 800422e:	0020      	movs	r0, r4
 8004230:	f7fe ff9c 	bl	800316c <HAL_UART_Receive_DMA>
 8004234:	2800      	cmp	r0, #0
 8004236:	d1e9      	bne.n	800420c <bluetoothCMD_ACK+0x28>
		while(HAL_DMA_GetState(&hdma_usart2_rx) == HAL_DMA_STATE_BUSY);
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <bluetoothCMD_ACK+0x8c>)
 800423a:	f7fc ff73 	bl	8001124 <HAL_DMA_GetState>
 800423e:	2802      	cmp	r0, #2
 8004240:	d0fa      	beq.n	8004238 <bluetoothCMD_ACK+0x54>
		while(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_RX);
 8004242:	0020      	movs	r0, r4
 8004244:	f7ff f987 	bl	8003556 <HAL_UART_GetState>
 8004248:	2822      	cmp	r0, #34	; 0x22
 800424a:	d0fa      	beq.n	8004242 <bluetoothCMD_ACK+0x5e>
		HAL_UART_DMAStop(&huart2);
 800424c:	0020      	movs	r0, r4
 800424e:	f7fe ffe9 	bl	8003224 <HAL_UART_DMAStop>
		if(strstr((char *)btRxBuff, ack) == 0) return 0;
 8004252:	0031      	movs	r1, r6
 8004254:	0028      	movs	r0, r5
 8004256:	f001 fd6d 	bl	8005d34 <strstr>
 800425a:	1e43      	subs	r3, r0, #1
 800425c:	4198      	sbcs	r0, r3
		if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 800425e:	b2c0      	uxtb	r0, r0
 8004260:	e7d5      	b.n	800420e <bluetoothCMD_ACK+0x2a>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20001954 	.word	0x20001954
 8004268:	20002174 	.word	0x20002174
 800426c:	20002118 	.word	0x20002118
 8004270:	200020bc 	.word	0x200020bc

08004274 <bluetoothInit>:
uint8_t bluetoothInit(){
 8004274:	b570      	push	{r4, r5, r6, lr}
	if(HAL_UART_Receive_DMA(&huart2, btRxBuff, 8) != HAL_OK) return 0;
 8004276:	4d2c      	ldr	r5, [pc, #176]	; (8004328 <bluetoothInit+0xb4>)
 8004278:	4c2c      	ldr	r4, [pc, #176]	; (800432c <bluetoothInit+0xb8>)
 800427a:	2208      	movs	r2, #8
 800427c:	0029      	movs	r1, r5
 800427e:	0020      	movs	r0, r4
 8004280:	f7fe ff74 	bl	800316c <HAL_UART_Receive_DMA>
 8004284:	1e02      	subs	r2, r0, #0
 8004286:	d001      	beq.n	800428c <bluetoothInit+0x18>
 8004288:	2000      	movs	r0, #0
}
 800428a:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_RESET);
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	4828      	ldr	r0, [pc, #160]	; (8004330 <bluetoothInit+0xbc>)
 8004290:	0049      	lsls	r1, r1, #1
 8004292:	f7fc fffb 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_MODE_GPIO_Port, BT_MODE_Pin, GPIO_PIN_SET);
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	2201      	movs	r2, #1
 800429a:	0089      	lsls	r1, r1, #2
 800429c:	4824      	ldr	r0, [pc, #144]	; (8004330 <bluetoothInit+0xbc>)
 800429e:	f7fc fff5 	bl	800128c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80042a2:	200a      	movs	r0, #10
 80042a4:	f7fc fa22 	bl	80006ec <HAL_Delay>
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_SET);
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	4821      	ldr	r0, [pc, #132]	; (8004330 <bluetoothInit+0xbc>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	0049      	lsls	r1, r1, #1
 80042b0:	f7fc ffec 	bl	800128c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	f7fc fa19 	bl	80006ec <HAL_Delay>
	while(HAL_DMA_GetState(&hdma_usart2_rx) == HAL_DMA_STATE_BUSY);
 80042ba:	481e      	ldr	r0, [pc, #120]	; (8004334 <bluetoothInit+0xc0>)
 80042bc:	f7fc ff32 	bl	8001124 <HAL_DMA_GetState>
 80042c0:	2802      	cmp	r0, #2
 80042c2:	d0fa      	beq.n	80042ba <bluetoothInit+0x46>
	if(strcmp("%REBOOT%", (char *)btRxBuff) != 0) return 0;
 80042c4:	0029      	movs	r1, r5
 80042c6:	481c      	ldr	r0, [pc, #112]	; (8004338 <bluetoothInit+0xc4>)
 80042c8:	f7fb ff1c 	bl	8000104 <strcmp>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1db      	bne.n	8004288 <bluetoothInit+0x14>
	HAL_UART_DMAStop(&huart2);
 80042d0:	0020      	movs	r0, r4
 80042d2:	f7fe ffa7 	bl	8003224 <HAL_UART_DMAStop>
	if(!bluetoothCMD_ACK("$$$", "CMD> ")) return 0;
 80042d6:	4919      	ldr	r1, [pc, #100]	; (800433c <bluetoothInit+0xc8>)
 80042d8:	4819      	ldr	r0, [pc, #100]	; (8004340 <bluetoothInit+0xcc>)
 80042da:	f7ff ff83 	bl	80041e4 <bluetoothCMD_ACK>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0d2      	beq.n	8004288 <bluetoothInit+0x14>
	if(!bluetoothCMD_ACK("GN\r", "MIDIController\r\nCMD> ")){
 80042e2:	4918      	ldr	r1, [pc, #96]	; (8004344 <bluetoothInit+0xd0>)
 80042e4:	4818      	ldr	r0, [pc, #96]	; (8004348 <bluetoothInit+0xd4>)
 80042e6:	f7ff ff7d 	bl	80041e4 <bluetoothCMD_ACK>
 80042ea:	4c18      	ldr	r4, [pc, #96]	; (800434c <bluetoothInit+0xd8>)
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d013      	beq.n	8004318 <bluetoothInit+0xa4>
	if(!bluetoothCMD_ACK("SGA,0\r", BT_AOK)) return 0;
 80042f0:	0021      	movs	r1, r4
 80042f2:	4817      	ldr	r0, [pc, #92]	; (8004350 <bluetoothInit+0xdc>)
 80042f4:	f7ff ff76 	bl	80041e4 <bluetoothCMD_ACK>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d0c5      	beq.n	8004288 <bluetoothInit+0x14>
	if(!bluetoothCMD_ACK("SGC,0\r", BT_AOK)) return 0;
 80042fc:	0021      	movs	r1, r4
 80042fe:	4815      	ldr	r0, [pc, #84]	; (8004354 <bluetoothInit+0xe0>)
 8004300:	f7ff ff70 	bl	80041e4 <bluetoothCMD_ACK>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0bf      	beq.n	8004288 <bluetoothInit+0x14>
	if(!bluetoothCMD_ACK("SA,0\r", BT_AOK)) return 0;
 8004308:	0021      	movs	r1, r4
 800430a:	4813      	ldr	r0, [pc, #76]	; (8004358 <bluetoothInit+0xe4>)
 800430c:	f7ff ff6a 	bl	80041e4 <bluetoothCMD_ACK>
 8004310:	1e43      	subs	r3, r0, #1
 8004312:	4198      	sbcs	r0, r3
	if(HAL_UART_Receive_DMA(&huart2, btRxBuff, 8) != HAL_OK) return 0;
 8004314:	b2c0      	uxtb	r0, r0
 8004316:	e7b8      	b.n	800428a <bluetoothInit+0x16>
		if(!bluetoothCMD_ACK("SN,MIDIController\r", BT_AOK)) return 0;
 8004318:	0021      	movs	r1, r4
 800431a:	4810      	ldr	r0, [pc, #64]	; (800435c <bluetoothInit+0xe8>)
 800431c:	f7ff ff62 	bl	80041e4 <bluetoothCMD_ACK>
 8004320:	2800      	cmp	r0, #0
 8004322:	d1e5      	bne.n	80042f0 <bluetoothInit+0x7c>
 8004324:	e7b0      	b.n	8004288 <bluetoothInit+0x14>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20001954 	.word	0x20001954
 800432c:	20002174 	.word	0x20002174
 8004330:	50000400 	.word	0x50000400
 8004334:	200020bc 	.word	0x200020bc
 8004338:	0800641b 	.word	0x0800641b
 800433c:	08006447 	.word	0x08006447
 8004340:	08006424 	.word	0x08006424
 8004344:	08006428 	.word	0x08006428
 8004348:	0800643e 	.word	0x0800643e
 800434c:	08006442 	.word	0x08006442
 8004350:	0800644d 	.word	0x0800644d
 8004354:	08006467 	.word	0x08006467
 8004358:	0800646e 	.word	0x0800646e
 800435c:	08006454 	.word	0x08006454

08004360 <bluetoothCMD_Until>:

uint8_t bluetoothCMD_Until(char *cmd, char *terminator, char *recvBuffer){
 8004360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	memset(btRxBuff, 0, sizeof(btRxBuff));
 8004362:	4d1b      	ldr	r5, [pc, #108]	; (80043d0 <bluetoothCMD_Until+0x70>)
uint8_t bluetoothCMD_Until(char *cmd, char *terminator, char *recvBuffer){
 8004364:	9100      	str	r1, [sp, #0]
 8004366:	9201      	str	r2, [sp, #4]
	memset(btRxBuff, 0, sizeof(btRxBuff));
 8004368:	2100      	movs	r1, #0
 800436a:	22ff      	movs	r2, #255	; 0xff
uint8_t bluetoothCMD_Until(char *cmd, char *terminator, char *recvBuffer){
 800436c:	0006      	movs	r6, r0
	memset(btRxBuff, 0, sizeof(btRxBuff));
 800436e:	0028      	movs	r0, r5
 8004370:	f001 fbf3 	bl	8005b5a <memset>

	btRxStatus = 2;
 8004374:	2202      	movs	r2, #2
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <bluetoothCMD_Until+0x74>)
	btRxIndex = 0;

	if(HAL_UART_Receive_DMA(&huart2, (uint8_t*)&btRxByte, 1) != HAL_OK) return 0;
 8004378:	4c17      	ldr	r4, [pc, #92]	; (80043d8 <bluetoothCMD_Until+0x78>)
	btRxStatus = 2;
 800437a:	701a      	strb	r2, [r3, #0]
	btRxIndex = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	4f17      	ldr	r7, [pc, #92]	; (80043dc <bluetoothCMD_Until+0x7c>)
	if(HAL_UART_Receive_DMA(&huart2, (uint8_t*)&btRxByte, 1) != HAL_OK) return 0;
 8004380:	3a01      	subs	r2, #1
 8004382:	4917      	ldr	r1, [pc, #92]	; (80043e0 <bluetoothCMD_Until+0x80>)
 8004384:	0020      	movs	r0, r4
	btRxIndex = 0;
 8004386:	703b      	strb	r3, [r7, #0]
	if(HAL_UART_Receive_DMA(&huart2, (uint8_t*)&btRxByte, 1) != HAL_OK) return 0;
 8004388:	f7fe fef0 	bl	800316c <HAL_UART_Receive_DMA>
 800438c:	2800      	cmp	r0, #0
 800438e:	d001      	beq.n	8004394 <bluetoothCMD_Until+0x34>
 8004390:	2000      	movs	r0, #0
	memcpy(recvBuffer, (char *)btRxBuff, btRxIndex);

	HAL_UART_DMAStop(&huart2);

	return 1;
}
 8004392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 8004394:	0030      	movs	r0, r6
 8004396:	f7fb febf 	bl	8000118 <strlen>
 800439a:	0031      	movs	r1, r6
 800439c:	b282      	uxth	r2, r0
 800439e:	0020      	movs	r0, r4
 80043a0:	f7fe fe8e 	bl	80030c0 <HAL_UART_Transmit_DMA>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d1f3      	bne.n	8004390 <bluetoothCMD_Until+0x30>
	while(!strstr((char *)btRxBuff, terminator) && btRxIndex < BT_RX_BUFF_SIZE);
 80043a8:	9900      	ldr	r1, [sp, #0]
 80043aa:	0028      	movs	r0, r5
 80043ac:	f001 fcc2 	bl	8005d34 <strstr>
 80043b0:	783a      	ldrb	r2, [r7, #0]
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d102      	bne.n	80043bc <bluetoothCMD_Until+0x5c>
 80043b6:	2aff      	cmp	r2, #255	; 0xff
 80043b8:	d1fd      	bne.n	80043b6 <bluetoothCMD_Until+0x56>
 80043ba:	e7e9      	b.n	8004390 <bluetoothCMD_Until+0x30>
	memcpy(recvBuffer, (char *)btRxBuff, btRxIndex);
 80043bc:	0029      	movs	r1, r5
 80043be:	9801      	ldr	r0, [sp, #4]
 80043c0:	f001 fbc2 	bl	8005b48 <memcpy>
	HAL_UART_DMAStop(&huart2);
 80043c4:	0020      	movs	r0, r4
 80043c6:	f7fe ff2d 	bl	8003224 <HAL_UART_DMAStop>
 80043ca:	2001      	movs	r0, #1
 80043cc:	e7e1      	b.n	8004392 <bluetoothCMD_Until+0x32>
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	20001954 	.word	0x20001954
 80043d4:	200016a8 	.word	0x200016a8
 80043d8:	20002174 	.word	0x20002174
 80043dc:	200016b0 	.word	0x200016b0
 80043e0:	20001945 	.word	0x20001945

080043e4 <bluetoothGetBondedDevices>:

	return 1;

}

uint8_t bluetoothGetBondedDevices(){
 80043e4:	b510      	push	{r4, lr}

	sprintf(oledHeader, "1");
 80043e6:	4c11      	ldr	r4, [pc, #68]	; (800442c <bluetoothGetBondedDevices+0x48>)
uint8_t bluetoothGetBondedDevices(){
 80043e8:	b0cc      	sub	sp, #304	; 0x130
	sprintf(oledHeader, "1");
 80043ea:	4911      	ldr	r1, [pc, #68]	; (8004430 <bluetoothGetBondedDevices+0x4c>)
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	f001 fc99 	bl	8005d24 <strcpy>

	char buff[300];
	memset(buff, 0, 300);
 80043f2:	2296      	movs	r2, #150	; 0x96
 80043f4:	2100      	movs	r1, #0
 80043f6:	0052      	lsls	r2, r2, #1
 80043f8:	a801      	add	r0, sp, #4
 80043fa:	f001 fbae 	bl	8005b5a <memset>

	sprintf(oledHeader, "2");
 80043fe:	490d      	ldr	r1, [pc, #52]	; (8004434 <bluetoothGetBondedDevices+0x50>)
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	f001 fc8f 	bl	8005d24 <strcpy>


	if(!bluetoothCMD_Until("LB\r", "END", buff)) return 0;
 8004406:	aa01      	add	r2, sp, #4
 8004408:	490b      	ldr	r1, [pc, #44]	; (8004438 <bluetoothGetBondedDevices+0x54>)
 800440a:	480c      	ldr	r0, [pc, #48]	; (800443c <bluetoothGetBondedDevices+0x58>)
 800440c:	f7ff ffa8 	bl	8004360 <bluetoothCMD_Until>
 8004410:	2800      	cmp	r0, #0
 8004412:	d008      	beq.n	8004426 <bluetoothGetBondedDevices+0x42>

	//btBondedCount = countOccurances(buff, "\n");
	//replacechar(buff, 300, '\r', ' ');
	//splitString(buff, "\n", devices);

	sprintf(oledHeader, "Count: %d", btBondedCount);
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <bluetoothGetBondedDevices+0x5c>)
 8004416:	490b      	ldr	r1, [pc, #44]	; (8004444 <bluetoothGetBondedDevices+0x60>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	f001 fc60 	bl	8005ce0 <siprintf>
	oled_refresh();
 8004420:	f000 fe80 	bl	8005124 <oled_refresh>
	btBondedDevicesMenu[btBondedCount].specharSelected = 37;
	btBondedDevicesMenu[btBondedCount].submenuLevel = 3;
	btBondedDevicesMenu[btBondedCount].parentItem = 0;

*/
	return 1;
 8004424:	2001      	movs	r0, #1

}
 8004426:	b04c      	add	sp, #304	; 0x130
 8004428:	bd10      	pop	{r4, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	200016ac 	.word	0x200016ac
 8004430:	08006405 	.word	0x08006405
 8004434:	08006407 	.word	0x08006407
 8004438:	08006409 	.word	0x08006409
 800443c:	0800640d 	.word	0x0800640d
 8004440:	20001944 	.word	0x20001944
 8004444:	08006411 	.word	0x08006411

08004448 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004448:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800444a:	2001      	movs	r0, #1
 800444c:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <MX_DMA_Init+0x38>)
 800444e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004450:	4301      	orrs	r1, r0
 8004452:	6391      	str	r1, [r2, #56]	; 0x38
 8004454:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004456:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004458:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800445a:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800445c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800445e:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004460:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004462:	f7fc fc63 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004466:	2009      	movs	r0, #9
 8004468:	f7fc fc90 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	200a      	movs	r0, #10
 8004470:	0011      	movs	r1, r2
 8004472:	f7fc fc5b 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004476:	200a      	movs	r0, #10
 8004478:	f7fc fc88 	bl	8000d8c <HAL_NVIC_EnableIRQ>

}
 800447c:	bd07      	pop	{r0, r1, r2, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	40021000 	.word	0x40021000

08004484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004486:	2601      	movs	r6, #1
{
 8004488:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448a:	2214      	movs	r2, #20
 800448c:	2100      	movs	r1, #0
 800448e:	a803      	add	r0, sp, #12
 8004490:	f001 fb63 	bl	8005b5a <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004494:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8004496:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004498:	4b38      	ldr	r3, [pc, #224]	; (800457c <MX_GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 800449a:	4d39      	ldr	r5, [pc, #228]	; (8004580 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800449e:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a0:	4332      	orrs	r2, r6
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34
 80044a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80044a6:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a8:	4032      	ands	r2, r6
 80044aa:	9200      	str	r2, [sp, #0]
 80044ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                          |KB_R5_Pin|BQ_OTG_Pin|BT_RST_Pin|BT_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	430a      	orrs	r2, r1
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	400a      	ands	r2, r1
 80044ba:	9201      	str	r2, [sp, #4]
 80044bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c0:	3106      	adds	r1, #6
 80044c2:	430a      	orrs	r2, r1
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80044c8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ca:	400b      	ands	r3, r1
 80044cc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80044ce:	310a      	adds	r1, #10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80044d2:	f7fc fedb 	bl	800128c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 80044d6:	2200      	movs	r2, #0
 80044d8:	0028      	movs	r0, r5
 80044da:	492a      	ldr	r1, [pc, #168]	; (8004584 <MX_GPIO_Init+0x100>)
 80044dc:	f7fc fed6 	bl	800128c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 80044e0:	2312      	movs	r3, #18
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e2:	0038      	movs	r0, r7
                           PBPin */
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
                          |KB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 80044e8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f7fc fe1e 	bl	8001130 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 80044f4:	4b24      	ldr	r3, [pc, #144]	; (8004588 <MX_GPIO_Init+0x104>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f6:	a903      	add	r1, sp, #12
 80044f8:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 80044fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004500:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	f7fc fe15 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800450c:	2302      	movs	r3, #2
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 800450e:	a903      	add	r1, sp, #12
 8004510:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004512:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004514:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8004516:	f7fc fe0b 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 800451a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 800451c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 800451e:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8004520:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 8004522:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004524:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8004528:	f7fc fe02 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 800452c:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800452e:	a903      	add	r1, sp, #12
 8004530:	4816      	ldr	r0, [pc, #88]	; (800458c <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 8004532:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004534:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004538:	f7fc fdfa 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 800453c:	2310      	movs	r3, #16
 800453e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8004542:	a903      	add	r1, sp, #12
 8004544:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004546:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 800454a:	f7fc fdf1 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 800454e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 8004550:	a903      	add	r1, sp, #12
 8004552:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 8004554:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004556:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 800455c:	f7fc fde8 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BT_RST_Pin|BT_MODE_Pin;
 8004560:	23c0      	movs	r3, #192	; 0xc0
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004566:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004568:	a903      	add	r1, sp, #12
 800456a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800456c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004570:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004572:	f7fc fddd 	bl	8001130 <HAL_GPIO_Init>

}
 8004576:	b009      	add	sp, #36	; 0x24
 8004578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40021000 	.word	0x40021000
 8004580:	50000400 	.word	0x50000400
 8004584:	00001f26 	.word	0x00001f26
 8004588:	00001c06 	.word	0x00001c06
 800458c:	50000c00 	.word	0x50000c00
 8004590:	10110000 	.word	0x10110000

08004594 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004594:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <MX_I2C1_Init+0x58>)
 8004598:	4c15      	ldr	r4, [pc, #84]	; (80045f0 <MX_I2C1_Init+0x5c>)
  hi2c1.Init.Timing = 0x00100413;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800459a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 800459c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00100413;
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045a0:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00100413;
 80045a2:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045a4:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045a6:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80045a8:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045aa:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045ac:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045ae:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045b0:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045b2:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045b4:	f7fc ffba 	bl	800152c <HAL_I2C_Init>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d001      	beq.n	80045c0 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 80045bc:	f000 f985 	bl	80048ca <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045c0:	2100      	movs	r1, #0
 80045c2:	0020      	movs	r0, r4
 80045c4:	f7fd fcce 	bl	8001f64 <HAL_I2CEx_ConfigAnalogFilter>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d001      	beq.n	80045d0 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 80045cc:	f000 f97d 	bl	80048ca <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045d0:	2100      	movs	r1, #0
 80045d2:	0020      	movs	r0, r4
 80045d4:	f7fd fcec 	bl	8001fb0 <HAL_I2CEx_ConfigDigitalFilter>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d001      	beq.n	80045e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80045dc:	f000 f975 	bl	80048ca <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80045e0:	2080      	movs	r0, #128	; 0x80
 80045e2:	0340      	lsls	r0, r0, #13
 80045e4:	f7fd fd08 	bl	8001ff8 <HAL_I2CEx_EnableFastModePlus>

}
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40005400 	.word	0x40005400
 80045f0:	20001ab8 	.word	0x20001ab8
 80045f4:	00100413 	.word	0x00100413

080045f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80045f8:	b530      	push	{r4, r5, lr}
 80045fa:	0005      	movs	r5, r0
 80045fc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fe:	2214      	movs	r2, #20
 8004600:	2100      	movs	r1, #0
 8004602:	a803      	add	r0, sp, #12
 8004604:	f001 faa9 	bl	8005b5a <memset>
  if(i2cHandle->Instance==I2C1)
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_I2C_MspInit+0x9c>)
 800460a:	682a      	ldr	r2, [r5, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d13f      	bne.n	8004690 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004610:	2102      	movs	r1, #2
 8004612:	4c21      	ldr	r4, [pc, #132]	; (8004698 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004614:	4821      	ldr	r0, [pc, #132]	; (800469c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004616:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004618:	430a      	orrs	r2, r1
 800461a:	6362      	str	r2, [r4, #52]	; 0x34
 800461c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800461e:	400b      	ands	r3, r1
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004624:	23c0      	movs	r3, #192	; 0xc0
 8004626:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004628:	3bae      	subs	r3, #174	; 0xae
 800462a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800462c:	3b11      	subs	r3, #17
 800462e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004630:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004632:	3305      	adds	r3, #5
 8004634:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004636:	f7fc fd7b 	bl	8001130 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800463e:	0389      	lsls	r1, r1, #14
 8004640:	430a      	orrs	r2, r1
 8004642:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8004646:	4c16      	ldr	r4, [pc, #88]	; (80046a0 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004648:	400b      	ands	r3, r1
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_I2C_MspInit+0xac>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004650:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8004652:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004654:	230b      	movs	r3, #11
 8004656:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004658:	3305      	adds	r3, #5
 800465a:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800465c:	2300      	movs	r3, #0
 800465e:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004660:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004662:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004664:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004666:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004668:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800466a:	019b      	lsls	r3, r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800466c:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800466e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004670:	f7fc fbec 	bl	8000e4c <HAL_DMA_Init>
 8004674:	2800      	cmp	r0, #0
 8004676:	d001      	beq.n	800467c <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 8004678:	f000 f927 	bl	80048ca <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2017      	movs	r0, #23
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004680:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004682:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004684:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004686:	f7fc fb51 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800468a:	2017      	movs	r0, #23
 800468c:	f7fc fb7e 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004690:	b009      	add	sp, #36	; 0x24
 8004692:	bd30      	pop	{r4, r5, pc}
 8004694:	40005400 	.word	0x40005400
 8004698:	40021000 	.word	0x40021000
 800469c:	50000400 	.word	0x50000400
 80046a0:	20001a5c 	.word	0x20001a5c
 80046a4:	40020008 	.word	0x40020008

080046a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046aa:	2680      	movs	r6, #128	; 0x80
{
 80046ac:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ae:	2238      	movs	r2, #56	; 0x38
 80046b0:	2100      	movs	r1, #0
 80046b2:	a812      	add	r0, sp, #72	; 0x48
 80046b4:	f001 fa51 	bl	8005b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b8:	2210      	movs	r2, #16
 80046ba:	2100      	movs	r1, #0
 80046bc:	a801      	add	r0, sp, #4
 80046be:	f001 fa4c 	bl	8005b5a <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c2:	00b6      	lsls	r6, r6, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c4:	2234      	movs	r2, #52	; 0x34
 80046c6:	2100      	movs	r1, #0
 80046c8:	a805      	add	r0, sp, #20
 80046ca:	f001 fa46 	bl	8005b5a <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ce:	0030      	movs	r0, r6
 80046d0:	f7fd fca6 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80046d4:	230a      	movs	r3, #10
 80046d6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046d8:	33f6      	adds	r3, #246	; 0xf6
 80046da:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046dc:	3bc0      	subs	r3, #192	; 0xc0
 80046de:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 80046e0:	3b38      	subs	r3, #56	; 0x38
 80046e2:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	049b      	lsls	r3, r3, #18
 80046ee:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046f0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80046f2:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046f4:	2502      	movs	r5, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80046f6:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046f8:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046fa:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046fc:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80046fe:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004700:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004702:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004704:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004706:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004708:	f7fd fcb4 	bl	8002074 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800470c:	2307      	movs	r3, #7
 800470e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004710:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004712:	0039      	movs	r1, r7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004714:	011b      	lsls	r3, r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004716:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004718:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800471a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800471c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800471e:	f7fd ff19 	bl	8002554 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <SystemClock_Config+0x94>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004724:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8004726:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004728:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800472a:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800472c:	940d      	str	r4, [sp, #52]	; 0x34
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800472e:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004730:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004732:	f7fd ffd1 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004736:	b021      	add	sp, #132	; 0x84
 8004738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	00224042 	.word	0x00224042

08004740 <main>:
{
 8004740:	b510      	push	{r4, lr}
  HAL_Init();
 8004742:	f7fb ffad 	bl	80006a0 <HAL_Init>
  SystemClock_Config();
 8004746:	f7ff ffaf 	bl	80046a8 <SystemClock_Config>
  MX_GPIO_Init();
 800474a:	f7ff fe9b 	bl	8004484 <MX_GPIO_Init>
  MX_DMA_Init();
 800474e:	f7ff fe7b 	bl	8004448 <MX_DMA_Init>
  MX_ADC1_Init();
 8004752:	f7ff fcc7 	bl	80040e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004756:	f7ff ff1d 	bl	8004594 <MX_I2C1_Init>
  MX_SPI1_Init();
 800475a:	f000 fd33 	bl	80051c4 <MX_SPI1_Init>
  MX_UCPD1_Init();
 800475e:	f001 f8dd 	bl	800591c <MX_UCPD1_Init>
  MX_TIM2_Init();
 8004762:	f001 f813 	bl	800578c <MX_TIM2_Init>
  MX_TIM1_Init();
 8004766:	f000 ffc5 	bl	80056f4 <MX_TIM1_Init>
  MX_RTC_Init();
 800476a:	f000 fcf5 	bl	8005158 <MX_RTC_Init>
  MX_TIM3_Init();
 800476e:	f001 f849 	bl	8005804 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004772:	f001 f8e3 	bl	800593c <MX_USART2_UART_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004776:	20a0      	movs	r0, #160	; 0xa0
 8004778:	2201      	movs	r2, #1
 800477a:	2102      	movs	r1, #2
 800477c:	05c0      	lsls	r0, r0, #23
 800477e:	f7fc fd85 	bl	800128c <HAL_GPIO_WritePin>
  HAL_RTC_Init(&hrtc);
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <main+0x58>)
 8004784:	f7fe f90c 	bl	80029a0 <HAL_RTC_Init>
  oled_begin();
 8004788:	f000 fa70 	bl	8004c6c <oled_begin>
  HAL_TIM_Base_Start_IT(&htim1);
 800478c:	4803      	ldr	r0, [pc, #12]	; (800479c <main+0x5c>)
 800478e:	f7fe fa07 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
  bluetoothInit();
 8004792:	f7ff fd6f 	bl	8004274 <bluetoothInit>
 8004796:	e7fe      	b.n	8004796 <main+0x56>
 8004798:	20001b5c 	.word	0x20001b5c
 800479c:	2000203c 	.word	0x2000203c

080047a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == TIM2){
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80047a4:	b510      	push	{r4, lr}
	if(htim->Instance == TIM2){
 80047a6:	05db      	lsls	r3, r3, #23
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80047a8:	0004      	movs	r4, r0
	if(htim->Instance == TIM2){
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_PeriodElapsedCallback+0x12>
		//Obnovi se oled displej
		oled_refresh();
 80047ae:	f000 fcb9 	bl	8005124 <oled_refresh>
	}

	if(htim->Instance == TIM1){
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d11b      	bne.n	80047f2 <HAL_TIM_PeriodElapsedCallback+0x52>
		midiControl_checkKeyboard();
 80047ba:	f000 f887 	bl	80048cc <midiControl_checkKeyboard>

		if(keypad.changed){
 80047be:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80047c0:	7c53      	ldrb	r3, [r2, #17]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d015      	beq.n	80047f2 <HAL_TIM_PeriodElapsedCallback+0x52>
			if(keypad.up){
 80047c6:	7b11      	ldrb	r1, [r2, #12]
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d035      	beq.n	800483a <HAL_TIM_PeriodElapsedCallback+0x9a>
				encoderpos--;
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	3901      	subs	r1, #1
			}else if(keypad.down){
				encoderpos++;
 80047d2:	6019      	str	r1, [r3, #0]
			}

			//Dopocita se pozice v dispmenu
			if(encoderpos >= (signed int)(dispmenusize)-1){
 80047d4:	4926      	ldr	r1, [pc, #152]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	6809      	ldr	r1, [r1, #0]
 80047da:	3901      	subs	r1, #1
 80047dc:	4281      	cmp	r1, r0
 80047de:	dc32      	bgt.n	8004846 <HAL_TIM_PeriodElapsedCallback+0xa6>
				encoderpos = (signed int)(dispmenusize)-1;
			}else if(encoderpos < (signed int)0){
				encoderpos = 0;
 80047e0:	6019      	str	r1, [r3, #0]
			}

			if(keypad.enter){
 80047e2:	7c13      	ldrb	r3, [r2, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_TIM_PeriodElapsedCallback+0x4e>
				encoderclick = 1;
 80047e8:	2101      	movs	r1, #1
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80047ec:	6019      	str	r1, [r3, #0]
			}

			keypad.changed = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	7453      	strb	r3, [r2, #17]
		}


	}

	if(htim->Instance == TIM3){
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80047f4:	6822      	ldr	r2, [r4, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11e      	bne.n	8004838 <HAL_TIM_PeriodElapsedCallback+0x98>

		//Tady se dela scrollovani
		if(scrollPauseDone){
 80047fa:	4a20      	ldr	r2, [pc, #128]	; (800487c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80047fe:	6811      	ldr	r1, [r2, #0]
 8004800:	2900      	cmp	r1, #0
 8004802:	d027      	beq.n	8004854 <HAL_TIM_PeriodElapsedCallback+0xb4>
			if(scrollIndex <= scrollMax){
 8004804:	481f      	ldr	r0, [pc, #124]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004806:	4c20      	ldr	r4, [pc, #128]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	6824      	ldr	r4, [r4, #0]
 800480c:	42a1      	cmp	r1, r4
 800480e:	dc1e      	bgt.n	800484e <HAL_TIM_PeriodElapsedCallback+0xae>
				scrollIndex++;
 8004810:	3101      	adds	r1, #1
 8004812:	6001      	str	r1, [r0, #0]
			}else{
				scrollPauseDone = 0;
			}
		}else scrollPause++;

		if(scrollPause == OLED_MENU_SCROLL_PAUSE){
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	2902      	cmp	r1, #2
 8004818:	d108      	bne.n	800482c <HAL_TIM_PeriodElapsedCallback+0x8c>
			if(scrollIndex > 0){
 800481a:	491a      	ldr	r1, [pc, #104]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800481c:	6808      	ldr	r0, [r1, #0]
 800481e:	2800      	cmp	r0, #0
 8004820:	dd1c      	ble.n	800485c <HAL_TIM_PeriodElapsedCallback+0xbc>
				scrollPauseDone = 0;
 8004822:	2000      	movs	r0, #0
			}else scrollPauseDone = 1;
 8004824:	6010      	str	r0, [r2, #0]

			scrollPause = 0;
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
			scrollIndex = 0;
 800482a:	600a      	str	r2, [r1, #0]
		}

		if(loadingStat < 3){
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	dc15      	bgt.n	8004860 <HAL_TIM_PeriodElapsedCallback+0xc0>
			loadingStat++;
 8004834:	3301      	adds	r3, #1
		}else loadingStat = 0;
 8004836:	6013      	str	r3, [r2, #0]

	}


}
 8004838:	bd10      	pop	{r4, pc}
			}else if(keypad.down){
 800483a:	7b51      	ldrb	r1, [r2, #13]
 800483c:	2900      	cmp	r1, #0
 800483e:	d0c9      	beq.n	80047d4 <HAL_TIM_PeriodElapsedCallback+0x34>
				encoderpos++;
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	3101      	adds	r1, #1
 8004844:	e7c5      	b.n	80047d2 <HAL_TIM_PeriodElapsedCallback+0x32>
			}else if(encoderpos < (signed int)0){
 8004846:	2800      	cmp	r0, #0
 8004848:	dacb      	bge.n	80047e2 <HAL_TIM_PeriodElapsedCallback+0x42>
				encoderpos = 0;
 800484a:	2100      	movs	r1, #0
 800484c:	e7c8      	b.n	80047e0 <HAL_TIM_PeriodElapsedCallback+0x40>
				scrollPauseDone = 0;
 800484e:	2100      	movs	r1, #0
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	e7df      	b.n	8004814 <HAL_TIM_PeriodElapsedCallback+0x74>
		}else scrollPause++;
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	3101      	adds	r1, #1
 8004858:	6019      	str	r1, [r3, #0]
 800485a:	e7db      	b.n	8004814 <HAL_TIM_PeriodElapsedCallback+0x74>
			}else scrollPauseDone = 1;
 800485c:	2001      	movs	r0, #1
 800485e:	e7e1      	b.n	8004824 <HAL_TIM_PeriodElapsedCallback+0x84>
		}else loadingStat = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	e7e8      	b.n	8004836 <HAL_TIM_PeriodElapsedCallback+0x96>
 8004864:	40012c00 	.word	0x40012c00
 8004868:	20001b0c 	.word	0x20001b0c
 800486c:	20001948 	.word	0x20001948
 8004870:	2000194c 	.word	0x2000194c
 8004874:	200013f8 	.word	0x200013f8
 8004878:	40000400 	.word	0x40000400
 800487c:	20000718 	.word	0x20000718
 8004880:	20001950 	.word	0x20001950
 8004884:	20001a54 	.word	0x20001a54
 8004888:	20000720 	.word	0x20000720
 800488c:	200016a4 	.word	0x200016a4

08004890 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004890:	b510      	push	{r4, lr}

	//if(huart->Instance == USART2){
		//Prichazi data pro BT Receive Until
		if(btRxStatus == 2){
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_UART_RxCpltCallback+0x24>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d10b      	bne.n	80048b2 <HAL_UART_RxCpltCallback+0x22>
			//Zapise se prichozi byte
			btRxBuff[btRxIndex++] = btRxByte;
 800489a:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <HAL_UART_RxCpltCallback+0x28>)
 800489c:	7813      	ldrb	r3, [r2, #0]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	7011      	strb	r1, [r2, #0]
 80048a2:	4906      	ldr	r1, [pc, #24]	; (80048bc <HAL_UART_RxCpltCallback+0x2c>)
 80048a4:	4a06      	ldr	r2, [pc, #24]	; (80048c0 <HAL_UART_RxCpltCallback+0x30>)
 80048a6:	7808      	ldrb	r0, [r1, #0]
 80048a8:	54d0      	strb	r0, [r2, r3]
			//Znovu se zapne DMA
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)&btRxByte, 1);
 80048aa:	2201      	movs	r2, #1
 80048ac:	4805      	ldr	r0, [pc, #20]	; (80048c4 <HAL_UART_RxCpltCallback+0x34>)
 80048ae:	f7fe fc5d 	bl	800316c <HAL_UART_Receive_DMA>
		}

	//}
}
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	200016a8 	.word	0x200016a8
 80048b8:	200016b0 	.word	0x200016b0
 80048bc:	20001945 	.word	0x20001945
 80048c0:	20001954 	.word	0x20001954
 80048c4:	20002174 	.word	0x20002174

080048c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

}
 80048c8:	4770      	bx	lr

080048ca <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048ca:	4770      	bx	lr

080048cc <midiControl_checkKeyboard>:
#include "midiController.h"
#include <stm32g0xx_hal.h>

uint32_t midiControl_checkKeyboard(){
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2102      	movs	r1, #2
 80048d2:	489b      	ldr	r0, [pc, #620]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80048d4:	f7fc fcda 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80048d8:	2201      	movs	r2, #1
 80048da:	2104      	movs	r1, #4
 80048dc:	4898      	ldr	r0, [pc, #608]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80048de:	f7fc fcd5 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	2201      	movs	r2, #1
 80048e6:	00c9      	lsls	r1, r1, #3
 80048e8:	4895      	ldr	r0, [pc, #596]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80048ea:	f7fc fccf 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	2201      	movs	r2, #1
 80048f2:	0109      	lsls	r1, r1, #4
 80048f4:	4892      	ldr	r0, [pc, #584]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80048f6:	f7fc fcc9 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80048fa:	2180      	movs	r1, #128	; 0x80

	keyboardState = 0;
 80048fc:	2500      	movs	r5, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80048fe:	2201      	movs	r2, #1
 8004900:	0149      	lsls	r1, r1, #5
 8004902:	488f      	ldr	r0, [pc, #572]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004904:	f7fc fcc2 	bl	800128c <HAL_GPIO_WritePin>
	keyboardState = 0;
 8004908:	4c8e      	ldr	r4, [pc, #568]	; (8004b44 <midiControl_checkKeyboard+0x278>)


	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 800490a:	2101      	movs	r1, #1
 800490c:	488e      	ldr	r0, [pc, #568]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
	keyboardState = 0;
 800490e:	6025      	str	r5, [r4, #0]
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8004910:	f7fc fcb6 	bl	8001280 <HAL_GPIO_ReadPin>
 8004914:	2102      	movs	r1, #2
 8004916:	4247      	negs	r7, r0
 8004918:	4147      	adcs	r7, r0
 800491a:	488b      	ldr	r0, [pc, #556]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 800491c:	f7fc fcb0 	bl	8001280 <HAL_GPIO_ReadPin>
 8004920:	0003      	movs	r3, r0
 8004922:	4258      	negs	r0, r3
 8004924:	4158      	adcs	r0, r3
 8004926:	0040      	lsls	r0, r0, #1
 8004928:	4307      	orrs	r7, r0
 800492a:	2104      	movs	r1, #4
 800492c:	4886      	ldr	r0, [pc, #536]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 800492e:	f7fc fca7 	bl	8001280 <HAL_GPIO_ReadPin>
 8004932:	0003      	movs	r3, r0
 8004934:	4258      	negs	r0, r3
 8004936:	4158      	adcs	r0, r3
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	0080      	lsls	r0, r0, #2
 800493c:	4338      	orrs	r0, r7
 800493e:	4318      	orrs	r0, r3
 8004940:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8004942:	2201      	movs	r2, #1
 8004944:	2102      	movs	r1, #2
 8004946:	487e      	ldr	r0, [pc, #504]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004948:	f7fc fca0 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800494c:	002a      	movs	r2, r5
 800494e:	2104      	movs	r1, #4
 8004950:	487b      	ldr	r0, [pc, #492]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004952:	f7fc fc9b 	bl	800128c <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 3;
 8004956:	2101      	movs	r1, #1
 8004958:	487b      	ldr	r0, [pc, #492]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 800495a:	f7fc fc91 	bl	8001280 <HAL_GPIO_ReadPin>
 800495e:	2102      	movs	r1, #2
 8004960:	4247      	negs	r7, r0
 8004962:	4147      	adcs	r7, r0
 8004964:	4878      	ldr	r0, [pc, #480]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004966:	f7fc fc8b 	bl	8001280 <HAL_GPIO_ReadPin>
 800496a:	0003      	movs	r3, r0
 800496c:	4258      	negs	r0, r3
 800496e:	4158      	adcs	r0, r3
 8004970:	0040      	lsls	r0, r0, #1
 8004972:	4307      	orrs	r7, r0
 8004974:	2104      	movs	r1, #4
 8004976:	4874      	ldr	r0, [pc, #464]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004978:	f7fc fc82 	bl	8001280 <HAL_GPIO_ReadPin>
 800497c:	0003      	movs	r3, r0
 800497e:	4258      	negs	r0, r3
 8004980:	4158      	adcs	r0, r3
 8004982:	0080      	lsls	r0, r0, #2
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	4338      	orrs	r0, r7
 8004988:	00c0      	lsls	r0, r0, #3
 800498a:	4318      	orrs	r0, r3
 800498c:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800498e:	2201      	movs	r2, #1
 8004990:	2104      	movs	r1, #4
 8004992:	486b      	ldr	r0, [pc, #428]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004994:	f7fc fc7a 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	002a      	movs	r2, r5
 800499c:	00c9      	lsls	r1, r1, #3
 800499e:	4868      	ldr	r0, [pc, #416]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80049a0:	f7fc fc74 	bl	800128c <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 80049a4:	2101      	movs	r1, #1
 80049a6:	4868      	ldr	r0, [pc, #416]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 80049a8:	f7fc fc6a 	bl	8001280 <HAL_GPIO_ReadPin>
 80049ac:	2102      	movs	r1, #2
 80049ae:	4247      	negs	r7, r0
 80049b0:	4147      	adcs	r7, r0
 80049b2:	4865      	ldr	r0, [pc, #404]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 80049b4:	f7fc fc64 	bl	8001280 <HAL_GPIO_ReadPin>
 80049b8:	0003      	movs	r3, r0
 80049ba:	4258      	negs	r0, r3
 80049bc:	4158      	adcs	r0, r3
 80049be:	0040      	lsls	r0, r0, #1
 80049c0:	4307      	orrs	r7, r0
 80049c2:	2104      	movs	r1, #4
 80049c4:	4860      	ldr	r0, [pc, #384]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 80049c6:	f7fc fc5b 	bl	8001280 <HAL_GPIO_ReadPin>
 80049ca:	0003      	movs	r3, r0
 80049cc:	4258      	negs	r0, r3
 80049ce:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80049d0:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 80049d2:	0080      	lsls	r0, r0, #2
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	4338      	orrs	r0, r7
 80049d8:	0180      	lsls	r0, r0, #6
 80049da:	4318      	orrs	r0, r3
 80049dc:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80049de:	2201      	movs	r2, #1
 80049e0:	00c9      	lsls	r1, r1, #3
 80049e2:	4857      	ldr	r0, [pc, #348]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80049e4:	f7fc fc52 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	002a      	movs	r2, r5
 80049ec:	0109      	lsls	r1, r1, #4
 80049ee:	4854      	ldr	r0, [pc, #336]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 80049f0:	f7fc fc4c 	bl	800128c <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 80049f4:	2101      	movs	r1, #1
 80049f6:	4854      	ldr	r0, [pc, #336]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 80049f8:	f7fc fc42 	bl	8001280 <HAL_GPIO_ReadPin>
 80049fc:	2102      	movs	r1, #2
 80049fe:	4247      	negs	r7, r0
 8004a00:	4147      	adcs	r7, r0
 8004a02:	4851      	ldr	r0, [pc, #324]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004a04:	f7fc fc3c 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	4258      	negs	r0, r3
 8004a0c:	4158      	adcs	r0, r3
 8004a0e:	0040      	lsls	r0, r0, #1
 8004a10:	4307      	orrs	r7, r0
 8004a12:	2104      	movs	r1, #4
 8004a14:	484c      	ldr	r0, [pc, #304]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004a16:	f7fc fc33 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	4258      	negs	r0, r3
 8004a1e:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004a20:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8004a22:	0080      	lsls	r0, r0, #2
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	4338      	orrs	r0, r7
 8004a28:	0240      	lsls	r0, r0, #9
 8004a2a:	4318      	orrs	r0, r3
 8004a2c:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	0109      	lsls	r1, r1, #4
 8004a32:	4843      	ldr	r0, [pc, #268]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004a34:	f7fc fc2a 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	002a      	movs	r2, r5
 8004a3c:	0149      	lsls	r1, r1, #5
 8004a3e:	4840      	ldr	r0, [pc, #256]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004a40:	f7fc fc24 	bl	800128c <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8004a44:	2101      	movs	r1, #1
 8004a46:	4840      	ldr	r0, [pc, #256]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004a48:	f7fc fc1a 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	4247      	negs	r7, r0
 8004a50:	4147      	adcs	r7, r0
 8004a52:	483d      	ldr	r0, [pc, #244]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004a54:	f7fc fc14 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	4258      	negs	r0, r3
 8004a5c:	4158      	adcs	r0, r3
 8004a5e:	0040      	lsls	r0, r0, #1
 8004a60:	4307      	orrs	r7, r0
 8004a62:	2104      	movs	r1, #4
 8004a64:	4838      	ldr	r0, [pc, #224]	; (8004b48 <midiControl_checkKeyboard+0x27c>)
 8004a66:	f7fc fc0b 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	4258      	negs	r0, r3
 8004a6e:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004a70:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8004a72:	0080      	lsls	r0, r0, #2
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	4338      	orrs	r0, r7
 8004a78:	0300      	lsls	r0, r0, #12
 8004a7a:	4318      	orrs	r0, r3
 8004a7c:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8004a7e:	2201      	movs	r2, #1
 8004a80:	0149      	lsls	r1, r1, #5
 8004a82:	482f      	ldr	r0, [pc, #188]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004a84:	f7fc fc02 	bl	800128c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004a88:	20a0      	movs	r0, #160	; 0xa0
 8004a8a:	002a      	movs	r2, r5
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	05c0      	lsls	r0, r0, #23
 8004a90:	f7fc fbfc 	bl	800128c <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	482a      	ldr	r0, [pc, #168]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004a98:	01c9      	lsls	r1, r1, #7
 8004a9a:	f7fc fbf1 	bl	8001280 <HAL_GPIO_ReadPin>
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0006      	movs	r6, r0
 8004aa2:	0189      	lsls	r1, r1, #6
 8004aa4:	4826      	ldr	r0, [pc, #152]	; (8004b40 <midiControl_checkKeyboard+0x274>)
 8004aa6:	f7fc fbeb 	bl	8001280 <HAL_GPIO_ReadPin>
 8004aaa:	4275      	negs	r5, r6
 8004aac:	4175      	adcs	r5, r6
 8004aae:	0040      	lsls	r0, r0, #1
 8004ab0:	4305      	orrs	r5, r0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004ab2:	20a0      	movs	r0, #160	; 0xa0
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	03ed      	lsls	r5, r5, #15
 8004ab8:	431d      	orrs	r5, r3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004aba:	05c0      	lsls	r0, r0, #23
 8004abc:	2201      	movs	r2, #1
 8004abe:	2102      	movs	r1, #2
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | (((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8004ac0:	6025      	str	r5, [r4, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8004ac2:	f7fc fbe3 	bl	800128c <HAL_GPIO_WritePin>

	if(keyboardState != keyboardStateOld){
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	4c20      	ldr	r4, [pc, #128]	; (8004b4c <midiControl_checkKeyboard+0x280>)
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	4298      	cmp	r0, r3
 8004ace:	d036      	beq.n	8004b3e <midiControl_checkKeyboard+0x272>
		keypad.one = (keyboardState & 0x4) >> 2;
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <midiControl_checkKeyboard+0x284>)
 8004ad4:	0881      	lsrs	r1, r0, #2
 8004ad6:	4011      	ands	r1, r2
 8004ad8:	7019      	strb	r1, [r3, #0]
		keypad.two = (keyboardState & 0x2) >> 1;
 8004ada:	0841      	lsrs	r1, r0, #1
 8004adc:	4011      	ands	r1, r2
 8004ade:	7059      	strb	r1, [r3, #1]
		keypad.three = (keyboardState & 0x1);
 8004ae0:	0001      	movs	r1, r0
 8004ae2:	4011      	ands	r1, r2
 8004ae4:	7099      	strb	r1, [r3, #2]

		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8004ae6:	0941      	lsrs	r1, r0, #5
 8004ae8:	4011      	ands	r1, r2
 8004aea:	70d9      	strb	r1, [r3, #3]
		keypad.five = ((keyboardState >> 3) & 0x2) >> 1;
 8004aec:	0901      	lsrs	r1, r0, #4
 8004aee:	4011      	ands	r1, r2
 8004af0:	7119      	strb	r1, [r3, #4]
		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8004af2:	08c1      	lsrs	r1, r0, #3
		keypad.six = ((keyboardState >> 3) & 0x1);
 8004af4:	4011      	ands	r1, r2
 8004af6:	7159      	strb	r1, [r3, #5]

		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8004af8:	0a01      	lsrs	r1, r0, #8
 8004afa:	4011      	ands	r1, r2
 8004afc:	7199      	strb	r1, [r3, #6]
		keypad.eight = ((keyboardState >> 6) & 0x2) >> 1;
 8004afe:	09c1      	lsrs	r1, r0, #7
 8004b00:	4011      	ands	r1, r2
 8004b02:	71d9      	strb	r1, [r3, #7]
		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8004b04:	0981      	lsrs	r1, r0, #6
		keypad.nine = ((keyboardState >> 6) & 0x1);
 8004b06:	4011      	ands	r1, r2
 8004b08:	7219      	strb	r1, [r3, #8]

		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 8004b0a:	0ac1      	lsrs	r1, r0, #11
 8004b0c:	4011      	ands	r1, r2
 8004b0e:	7299      	strb	r1, [r3, #10]
		keypad.zero = ((keyboardState >> 9) & 0x2) >> 1;
 8004b10:	0a81      	lsrs	r1, r0, #10
 8004b12:	4011      	ands	r1, r2
 8004b14:	7259      	strb	r1, [r3, #9]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 8004b16:	0c01      	lsrs	r1, r0, #16
 8004b18:	4011      	ands	r1, r2
 8004b1a:	72d9      	strb	r1, [r3, #11]
		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 8004b1c:	0a41      	lsrs	r1, r0, #9

		keypad.up = ((keyboardState >> 9) & 0x1);
 8004b1e:	4011      	ands	r1, r2
 8004b20:	7319      	strb	r1, [r3, #12]
		keypad.down = ((keyboardState >> 12) & 0x4) >> 2;
 8004b22:	0b81      	lsrs	r1, r0, #14
 8004b24:	4011      	ands	r1, r2
 8004b26:	7359      	strb	r1, [r3, #13]
		keypad.left = ((keyboardState >> 12) & 0x2) >> 1;
 8004b28:	0b41      	lsrs	r1, r0, #13
 8004b2a:	4011      	ands	r1, r2
 8004b2c:	7399      	strb	r1, [r3, #14]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 8004b2e:	0b01      	lsrs	r1, r0, #12
		keypad.right = ((keyboardState >> 12) & 0x1);
 8004b30:	4011      	ands	r1, r2
 8004b32:	73d9      	strb	r1, [r3, #15]
		keypad.enter = ((keyboardState >> 12) & 0x8) >> 3;
 8004b34:	0bc1      	lsrs	r1, r0, #15
 8004b36:	4011      	ands	r1, r2
 8004b38:	7419      	strb	r1, [r3, #16]

		keypad.changed = 1;
 8004b3a:	745a      	strb	r2, [r3, #17]

		keyboardStateOld = keyboardState;
 8004b3c:	6020      	str	r0, [r4, #0]
	}


	return keyboardState;
}
 8004b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b40:	50000400 	.word	0x50000400
 8004b44:	20001b04 	.word	0x20001b04
 8004b48:	50000c00 	.word	0x50000c00
 8004b4c:	20001b08 	.word	0x20001b08
 8004b50:	20001b0c 	.word	0x20001b0c

08004b54 <oled_LoadingSplash>:
	ssd1306_WriteString(version, Font_7x10, White);

}

void oled_LoadingSplash(char * msg){
	oledType = OLED_SPLASH;
 8004b54:	2203      	movs	r2, #3
void oled_LoadingSplash(char * msg){
 8004b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	oledType = OLED_SPLASH;
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <oled_LoadingSplash+0x8c>)
void oled_LoadingSplash(char * msg){
 8004b5a:	0004      	movs	r4, r0
	oledType = OLED_SPLASH;
 8004b5c:	601a      	str	r2, [r3, #0]
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 15);
 8004b5e:	f7fb fadb 	bl	8000118 <strlen>
 8004b62:	0003      	movs	r3, r0
 8004b64:	200b      	movs	r0, #11
 8004b66:	4240      	negs	r0, r0
 8004b68:	4358      	muls	r0, r3
 8004b6a:	308b      	adds	r0, #139	; 0x8b
 8004b6c:	0840      	lsrs	r0, r0, #1
	ssd1306_WriteString(msg, Font_11x18, White);

	ssd1306_SetCursor(42,35);
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8004b6e:	2601      	movs	r6, #1
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 15);
 8004b70:	b2c0      	uxtb	r0, r0
 8004b72:	210f      	movs	r1, #15
 8004b74:	f000 fd1e 	bl	80055b4 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8004b78:	0020      	movs	r0, r4
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8004b7a:	2421      	movs	r4, #33	; 0x21
	ssd1306_WriteString(msg, Font_11x18, White);
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <oled_LoadingSplash+0x90>)
 8004b7e:	2301      	movs	r3, #1
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	f000 fd02 	bl	800558c <ssd1306_WriteString>
	ssd1306_SetCursor(42,35);
 8004b88:	2123      	movs	r1, #35	; 0x23
 8004b8a:	202a      	movs	r0, #42	; 0x2a
 8004b8c:	f000 fd12 	bl	80055b4 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8004b90:	4f15      	ldr	r7, [pc, #84]	; (8004be8 <oled_LoadingSplash+0x94>)
 8004b92:	4d16      	ldr	r5, [pc, #88]	; (8004bec <oled_LoadingSplash+0x98>)
 8004b94:	6838      	ldr	r0, [r7, #0]
 8004b96:	0033      	movs	r3, r6
 8004b98:	4030      	ands	r0, r6
 8004b9a:	1a20      	subs	r0, r4, r0
 8004b9c:	686a      	ldr	r2, [r5, #4]
 8004b9e:	6829      	ldr	r1, [r5, #0]
 8004ba0:	b2c0      	uxtb	r0, r0
 8004ba2:	f000 fc9d 	bl	80054e0 <ssd1306_WriteChar>
	ssd1306_SetCursor(64,35);
 8004ba6:	2123      	movs	r1, #35	; 0x23
 8004ba8:	2040      	movs	r0, #64	; 0x40
 8004baa:	f000 fd03 	bl	80055b4 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>1) & 0x01), Icon_11x18, White);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6829      	ldr	r1, [r5, #0]
 8004bb2:	1058      	asrs	r0, r3, #1
 8004bb4:	4030      	ands	r0, r6
 8004bb6:	1a20      	subs	r0, r4, r0
 8004bb8:	0033      	movs	r3, r6
 8004bba:	686a      	ldr	r2, [r5, #4]
 8004bbc:	b2c0      	uxtb	r0, r0
 8004bbe:	f000 fc8f 	bl	80054e0 <ssd1306_WriteChar>
	ssd1306_SetCursor(86,35);
 8004bc2:	2123      	movs	r1, #35	; 0x23
 8004bc4:	2056      	movs	r0, #86	; 0x56
 8004bc6:	f000 fcf5 	bl	80055b4 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>2) & 0x01), Icon_11x18, White);
 8004bca:	cd06      	ldmia	r5!, {r1, r2}
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	0033      	movs	r3, r6
 8004bd0:	1080      	asrs	r0, r0, #2
 8004bd2:	4030      	ands	r0, r6
 8004bd4:	1a20      	subs	r0, r4, r0
 8004bd6:	b2c0      	uxtb	r0, r0
 8004bd8:	f000 fc82 	bl	80054e0 <ssd1306_WriteChar>


}
 8004bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	20000864 	.word	0x20000864
 8004be4:	200001e8 	.word	0x200001e8
 8004be8:	200016a4 	.word	0x200016a4
 8004bec:	200001f8 	.word	0x200001f8

08004bf0 <oled_setDisplayedMenu>:
void oled_setDisplayedMenu(char *menuname ,struct menuitem (*menu)[], int menusize, int issubmenu){
 8004bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf2:	0004      	movs	r4, r0
	HAL_TIM_Base_Stop_IT(&htim2);
 8004bf4:	4d16      	ldr	r5, [pc, #88]	; (8004c50 <oled_setDisplayedMenu+0x60>)
void oled_setDisplayedMenu(char *menuname ,struct menuitem (*menu)[], int menusize, int issubmenu){
 8004bf6:	0016      	movs	r6, r2
	HAL_TIM_Base_Stop_IT(&htim2);
 8004bf8:	0028      	movs	r0, r5
void oled_setDisplayedMenu(char *menuname ,struct menuitem (*menu)[], int menusize, int issubmenu){
 8004bfa:	9100      	str	r1, [sp, #0]
 8004bfc:	9301      	str	r3, [sp, #4]
	HAL_TIM_Base_Stop_IT(&htim2);
 8004bfe:	f7fd ffe3 	bl	8002bc8 <HAL_TIM_Base_Stop_IT>
	dispmenuname = malloc(strlen(menuname)+1);
 8004c02:	0020      	movs	r0, r4
 8004c04:	f7fb fa88 	bl	8000118 <strlen>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f000 ff93 	bl	8005b34 <malloc>
 8004c0e:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <oled_setDisplayedMenu+0x64>)
	dispmenusize = menusize/sizeof(struct menuitem);
 8004c10:	0972      	lsrs	r2, r6, #5
	dispmenuname = malloc(strlen(menuname)+1);
 8004c12:	6018      	str	r0, [r3, #0]
	dispmenusize = menusize/sizeof(struct menuitem);
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <oled_setDisplayedMenu+0x68>)
	dispmenuname = malloc(strlen(menuname)+1);
 8004c16:	0007      	movs	r7, r0
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 8004c18:	0020      	movs	r0, r4
	dispmenusize = menusize/sizeof(struct menuitem);
 8004c1a:	601a      	str	r2, [r3, #0]
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 8004c1c:	f7fb fa7c 	bl	8000118 <strlen>
 8004c20:	0021      	movs	r1, r4
 8004c22:	1c42      	adds	r2, r0, #1
 8004c24:	0038      	movs	r0, r7
 8004c26:	f000 ff8f 	bl	8005b48 <memcpy>
	memcpy(&dispmenu, menu, menusize);
 8004c2a:	0032      	movs	r2, r6
 8004c2c:	9900      	ldr	r1, [sp, #0]
 8004c2e:	480b      	ldr	r0, [pc, #44]	; (8004c5c <oled_setDisplayedMenu+0x6c>)
 8004c30:	f000 ff8a 	bl	8005b48 <memcpy>
	dispmenusubmenu = issubmenu;
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <oled_setDisplayedMenu+0x70>)
	HAL_TIM_Base_Start_IT(&htim2);
 8004c38:	0028      	movs	r0, r5
	dispmenusubmenu = issubmenu;
 8004c3a:	601a      	str	r2, [r3, #0]
	encoderposOld = -1;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <oled_setDisplayedMenu+0x74>)
 8004c40:	4252      	negs	r2, r2
 8004c42:	601a      	str	r2, [r3, #0]
	oledType = OLED_MENU;
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <oled_setDisplayedMenu+0x78>)
 8004c46:	3203      	adds	r2, #3
 8004c48:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8004c4a:	f7fd ffa9 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
}
 8004c4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004c50:	2000207c 	.word	0x2000207c
 8004c54:	20001940 	.word	0x20001940
 8004c58:	2000194c 	.word	0x2000194c
 8004c5c:	20000db8 	.word	0x20000db8
 8004c60:	20001934 	.word	0x20001934
 8004c64:	20001938 	.word	0x20001938
 8004c68:	20000864 	.word	0x20000864

08004c6c <oled_begin>:
void oled_begin(){
 8004c6c:	b510      	push	{r4, lr}
	ssd1306_Init();
 8004c6e:	f000 fb63 	bl	8005338 <ssd1306_Init>
	oled_setDisplayedMenu("mainmenu", &mainmenu, sizeof(mainmenu), 0);
 8004c72:	2300      	movs	r3, #0
 8004c74:	22a0      	movs	r2, #160	; 0xa0
 8004c76:	490d      	ldr	r1, [pc, #52]	; (8004cac <oled_begin+0x40>)
 8004c78:	480d      	ldr	r0, [pc, #52]	; (8004cb0 <oled_begin+0x44>)
 8004c7a:	f7ff ffb9 	bl	8004bf0 <oled_setDisplayedMenu>
	HAL_TIM_Base_Start_IT(&htim2);
 8004c7e:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <oled_begin+0x48>)
 8004c80:	f7fd ff8e 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <oled_begin+0x4c>)
 8004c86:	f7fd ff8b 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
	oledHeader = (char*)malloc(50);
 8004c8a:	2032      	movs	r0, #50	; 0x32
 8004c8c:	f000 ff52 	bl	8005b34 <malloc>
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <oled_begin+0x50>)
	encoderposOld = -1;
 8004c92:	2101      	movs	r1, #1
	oledHeader = (char*)malloc(50);
 8004c94:	6018      	str	r0, [r3, #0]
	encoderpos = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <oled_begin+0x54>)
	encoderposOld = -1;
 8004c9a:	4249      	negs	r1, r1
	encoderpos = 0;
 8004c9c:	6013      	str	r3, [r2, #0]
	encoderposOld = -1;
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <oled_begin+0x58>)
 8004ca0:	6011      	str	r1, [r2, #0]
	scrollPause = 0;
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <oled_begin+0x5c>)
 8004ca4:	6013      	str	r3, [r2, #0]
	scrollPauseDone = 0;
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <oled_begin+0x60>)
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	20000068 	.word	0x20000068
 8004cb0:	08006474 	.word	0x08006474
 8004cb4:	2000207c 	.word	0x2000207c
 8004cb8:	20001ffc 	.word	0x20001ffc
 8004cbc:	200016ac 	.word	0x200016ac
 8004cc0:	20001948 	.word	0x20001948
 8004cc4:	20001938 	.word	0x20001938
 8004cc8:	20001950 	.word	0x20001950
 8004ccc:	20000718 	.word	0x20000718

08004cd0 <oled_setDisplayedSplash>:
void oled_setDisplayedSplash(void (*funct)(), char * txt){
 8004cd0:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Stop_IT(&htim2);
 8004cd2:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <oled_setDisplayedSplash+0x2c>)
void oled_setDisplayedSplash(void (*funct)(), char * txt){
 8004cd4:	0006      	movs	r6, r0
	HAL_TIM_Base_Stop_IT(&htim2);
 8004cd6:	0020      	movs	r0, r4
void oled_setDisplayedSplash(void (*funct)(), char * txt){
 8004cd8:	000d      	movs	r5, r1
	HAL_TIM_Base_Stop_IT(&htim2);
 8004cda:	f7fd ff75 	bl	8002bc8 <HAL_TIM_Base_Stop_IT>
	loadingStat = 0;
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <oled_setDisplayedSplash+0x30>)
	HAL_TIM_Base_Start_IT(&htim2);
 8004ce2:	0020      	movs	r0, r4
	loadingStat = 0;
 8004ce4:	601a      	str	r2, [r3, #0]
	splashFunction = funct;
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <oled_setDisplayedSplash+0x34>)
	oledType = OLED_SPLASH;
 8004ce8:	3203      	adds	r2, #3
	splashFunction = funct;
 8004cea:	601e      	str	r6, [r3, #0]
	splashTxt = txt;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <oled_setDisplayedSplash+0x38>)
 8004cee:	601d      	str	r5, [r3, #0]
	oledType = OLED_SPLASH;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <oled_setDisplayedSplash+0x3c>)
 8004cf2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8004cf4:	f7fd ff54 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
}
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	2000207c 	.word	0x2000207c
 8004d00:	200016a4 	.word	0x200016a4
 8004d04:	2000193c 	.word	0x2000193c
 8004d08:	20001a58 	.word	0x20001a58
 8004d0c:	20000864 	.word	0x20000864

08004d10 <oled_menuOnclick>:
void oled_menuOnclick(int menupos){
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8004d12:	4f3a      	ldr	r7, [pc, #232]	; (8004dfc <oled_menuOnclick+0xec>)
void oled_menuOnclick(int menupos){
 8004d14:	b0c1      	sub	sp, #260	; 0x104
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8004d16:	683d      	ldr	r5, [r7, #0]
void oled_menuOnclick(int menupos){
 8004d18:	0004      	movs	r4, r0
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8004d1a:	0028      	movs	r0, r5
 8004d1c:	f7fb f9fc 	bl	8000118 <strlen>
 8004d20:	0029      	movs	r1, r5
 8004d22:	1c42      	adds	r2, r0, #1
 8004d24:	4668      	mov	r0, sp
 8004d26:	f000 ff0f 	bl	8005b48 <memcpy>
	if(strcmp(dispmenuname, "mainmenu") == 0){
 8004d2a:	4e35      	ldr	r6, [pc, #212]	; (8004e00 <oled_menuOnclick+0xf0>)
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	0031      	movs	r1, r6
 8004d30:	f7fb f9e8 	bl	8000104 <strcmp>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d127      	bne.n	8004d88 <oled_menuOnclick+0x78>
		switch(menupos){
 8004d38:	2c04      	cmp	r4, #4
 8004d3a:	d809      	bhi.n	8004d50 <oled_menuOnclick+0x40>
 8004d3c:	0020      	movs	r0, r4
 8004d3e:	f7fb f9f3 	bl	8000128 <__gnu_thumb1_case_uqi>
 8004d42:	0703      	.short	0x0703
 8004d44:	1b14      	.short	0x1b14
 8004d46:	1e          	.byte	0x1e
 8004d47:	00          	.byte	0x00
				oled_setDisplayedSplash(oled_LoadingSplash, "Skenuji");
 8004d48:	492e      	ldr	r1, [pc, #184]	; (8004e04 <oled_menuOnclick+0xf4>)
 8004d4a:	482f      	ldr	r0, [pc, #188]	; (8004e08 <oled_menuOnclick+0xf8>)
 8004d4c:	f7ff ffc0 	bl	8004cd0 <oled_setDisplayedSplash>
	encoderclick = 0;
 8004d50:	2400      	movs	r4, #0
 8004d52:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <oled_menuOnclick+0xfc>)
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 8004d54:	4669      	mov	r1, sp
 8004d56:	6838      	ldr	r0, [r7, #0]
	encoderclick = 0;
 8004d58:	601c      	str	r4, [r3, #0]
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 8004d5a:	f7fb f9d3 	bl	8000104 <strcmp>
 8004d5e:	42a0      	cmp	r0, r4
 8004d60:	d001      	beq.n	8004d66 <oled_menuOnclick+0x56>
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <oled_menuOnclick+0x100>)
 8004d64:	601c      	str	r4, [r3, #0]
}
 8004d66:	b041      	add	sp, #260	; 0x104
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
				oled_setDisplayedMenu("organmenu",&organmenu, sizeof(organmenu), 1);
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	2260      	movs	r2, #96	; 0x60
 8004d6e:	4929      	ldr	r1, [pc, #164]	; (8004e14 <oled_menuOnclick+0x104>)
 8004d70:	4829      	ldr	r0, [pc, #164]	; (8004e18 <oled_menuOnclick+0x108>)
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8004d72:	f7ff ff3d 	bl	8004bf0 <oled_setDisplayedMenu>
					break;
 8004d76:	e7eb      	b.n	8004d50 <oled_menuOnclick+0x40>
				bluetoothGetBondedDevices();
 8004d78:	f7ff fb34 	bl	80043e4 <bluetoothGetBondedDevices>
			break;
 8004d7c:	e7e8      	b.n	8004d50 <oled_menuOnclick+0x40>
				oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 1);
 8004d7e:	2301      	movs	r3, #1
				oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 0);
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	4926      	ldr	r1, [pc, #152]	; (8004e1c <oled_menuOnclick+0x10c>)
 8004d84:	4826      	ldr	r0, [pc, #152]	; (8004e20 <oled_menuOnclick+0x110>)
 8004d86:	e7f4      	b.n	8004d72 <oled_menuOnclick+0x62>
	}else if(strcmp(dispmenuname, "settingsmenu") == 0){
 8004d88:	4925      	ldr	r1, [pc, #148]	; (8004e20 <oled_menuOnclick+0x110>)
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	f7fb f9ba 	bl	8000104 <strcmp>
 8004d90:	1e03      	subs	r3, r0, #0
 8004d92:	d10c      	bne.n	8004dae <oled_menuOnclick+0x9e>
		switch(menupos){
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	d005      	beq.n	8004da4 <oled_menuOnclick+0x94>
 8004d98:	2c03      	cmp	r4, #3
 8004d9a:	d1d9      	bne.n	8004d50 <oled_menuOnclick+0x40>
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8004d9c:	22a0      	movs	r2, #160	; 0xa0
 8004d9e:	4921      	ldr	r1, [pc, #132]	; (8004e24 <oled_menuOnclick+0x114>)
 8004da0:	0030      	movs	r0, r6
 8004da2:	e7e6      	b.n	8004d72 <oled_menuOnclick+0x62>
				oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 1);
 8004da4:	2301      	movs	r3, #1
				oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 0);
 8004da6:	2260      	movs	r2, #96	; 0x60
 8004da8:	491f      	ldr	r1, [pc, #124]	; (8004e28 <oled_menuOnclick+0x118>)
 8004daa:	4820      	ldr	r0, [pc, #128]	; (8004e2c <oled_menuOnclick+0x11c>)
 8004dac:	e7e1      	b.n	8004d72 <oled_menuOnclick+0x62>
	}else if(strcmp(dispmenuname, "bluetoothmenu") == 0){
 8004dae:	491f      	ldr	r1, [pc, #124]	; (8004e2c <oled_menuOnclick+0x11c>)
 8004db0:	0028      	movs	r0, r5
 8004db2:	f7fb f9a7 	bl	8000104 <strcmp>
 8004db6:	1e03      	subs	r3, r0, #0
 8004db8:	d10c      	bne.n	8004dd4 <oled_menuOnclick+0xc4>
		switch(menupos){
 8004dba:	2c00      	cmp	r4, #0
 8004dbc:	d002      	beq.n	8004dc4 <oled_menuOnclick+0xb4>
 8004dbe:	2c02      	cmp	r4, #2
 8004dc0:	d0de      	beq.n	8004d80 <oled_menuOnclick+0x70>
 8004dc2:	e7c5      	b.n	8004d50 <oled_menuOnclick+0x40>
				oled_setDisplayedMenu("btScanedDevices", &btScanedDevices, sizeof(btScanedDevices)-(20-btScannedCount-1)*sizeof(btScanedDevices[19]), 0);
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <oled_menuOnclick+0x120>)
 8004dc6:	491b      	ldr	r1, [pc, #108]	; (8004e34 <oled_menuOnclick+0x124>)
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	481b      	ldr	r0, [pc, #108]	; (8004e38 <oled_menuOnclick+0x128>)
 8004dcc:	3201      	adds	r2, #1
 8004dce:	0152      	lsls	r2, r2, #5
 8004dd0:	0023      	movs	r3, r4
 8004dd2:	e7ce      	b.n	8004d72 <oled_menuOnclick+0x62>
	}else if(strcmp(dispmenuname, "btScanedDevices") == 0){
 8004dd4:	4918      	ldr	r1, [pc, #96]	; (8004e38 <oled_menuOnclick+0x128>)
 8004dd6:	0028      	movs	r0, r5
 8004dd8:	f7fb f994 	bl	8000104 <strcmp>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d104      	bne.n	8004dea <oled_menuOnclick+0xda>
		if(menupos == btScannedCount){
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <oled_menuOnclick+0x120>)
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	4294      	cmp	r4, r2
 8004de6:	d1b3      	bne.n	8004d50 <oled_menuOnclick+0x40>
 8004de8:	e7dd      	b.n	8004da6 <oled_menuOnclick+0x96>
	}else if(strcmp(dispmenuname, "organmenu") == 0){
 8004dea:	490b      	ldr	r1, [pc, #44]	; (8004e18 <oled_menuOnclick+0x108>)
 8004dec:	0028      	movs	r0, r5
 8004dee:	f7fb f989 	bl	8000104 <strcmp>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d1ac      	bne.n	8004d50 <oled_menuOnclick+0x40>
		switch(menupos){
 8004df6:	2c02      	cmp	r4, #2
 8004df8:	d1aa      	bne.n	8004d50 <oled_menuOnclick+0x40>
 8004dfa:	e7cf      	b.n	8004d9c <oled_menuOnclick+0x8c>
 8004dfc:	20001940 	.word	0x20001940
 8004e00:	08006474 	.word	0x08006474
 8004e04:	0800647d 	.word	0x0800647d
 8004e08:	08004b55 	.word	0x08004b55
 8004e0c:	200013f8 	.word	0x200013f8
 8004e10:	20001948 	.word	0x20001948
 8004e14:	20000108 	.word	0x20000108
 8004e18:	08006485 	.word	0x08006485
 8004e1c:	20000168 	.word	0x20000168
 8004e20:	0800648f 	.word	0x0800648f
 8004e24:	20000068 	.word	0x20000068
 8004e28:	20000008 	.word	0x20000008
 8004e2c:	0800649c 	.word	0x0800649c
 8004e30:	200016a9 	.word	0x200016a9
 8004e34:	200016b4 	.word	0x200016b4
 8004e38:	080064aa 	.word	0x080064aa

08004e3c <oled_drawMenu>:
void oled_drawMenu(){
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(encoderclick){
 8004e3e:	4bac      	ldr	r3, [pc, #688]	; (80050f0 <oled_drawMenu+0x2b4>)
void oled_drawMenu(){
 8004e40:	b08d      	sub	sp, #52	; 0x34
	if(encoderclick){
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <oled_drawMenu+0x14>
		oled_menuOnclick(encoderpos);
 8004e48:	4baa      	ldr	r3, [pc, #680]	; (80050f4 <oled_drawMenu+0x2b8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	f7ff ff60 	bl	8004d10 <oled_menuOnclick>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8004e50:	4ca9      	ldr	r4, [pc, #676]	; (80050f8 <oled_drawMenu+0x2bc>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	a907      	add	r1, sp, #28
 8004e56:	0020      	movs	r0, r4
 8004e58:	f7fd fdfa 	bl	8002a50 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	a903      	add	r1, sp, #12
 8004e60:	0020      	movs	r0, r4
 8004e62:	f7fd fe1d 	bl	8002aa0 <HAL_RTC_GetDate>
	ssd1306_SetCursor(2,0);
 8004e66:	2100      	movs	r1, #0
 8004e68:	2002      	movs	r0, #2
 8004e6a:	f000 fba3 	bl	80055b4 <ssd1306_SetCursor>
	ssd1306_WriteString(oledHeader, Font_7x10, White);
 8004e6e:	4aa3      	ldr	r2, [pc, #652]	; (80050fc <oled_drawMenu+0x2c0>)
 8004e70:	48a3      	ldr	r0, [pc, #652]	; (8005100 <oled_drawMenu+0x2c4>)
 8004e72:	6811      	ldr	r1, [r2, #0]
 8004e74:	2301      	movs	r3, #1
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	6800      	ldr	r0, [r0, #0]
 8004e7a:	f000 fb87 	bl	800558c <ssd1306_WriteString>
	for(uint8_t i = 0; i <= 128; i++) ssd1306_DrawPixel(i, 13, White);
 8004e7e:	2400      	movs	r4, #0
 8004e80:	0020      	movs	r0, r4
 8004e82:	3401      	adds	r4, #1
 8004e84:	2201      	movs	r2, #1
 8004e86:	210d      	movs	r1, #13
 8004e88:	b2e4      	uxtb	r4, r4
 8004e8a:	f000 fb05 	bl	8005498 <ssd1306_DrawPixel>
 8004e8e:	2c81      	cmp	r4, #129	; 0x81
 8004e90:	d1f6      	bne.n	8004e80 <oled_drawMenu+0x44>
	if(strlen(dispmenu[encoderpos].name) > 9 && encoderpos != encoderposOld){
 8004e92:	4e98      	ldr	r6, [pc, #608]	; (80050f4 <oled_drawMenu+0x2b8>)
 8004e94:	4f9b      	ldr	r7, [pc, #620]	; (8005104 <oled_drawMenu+0x2c8>)
 8004e96:	6833      	ldr	r3, [r6, #0]
 8004e98:	015c      	lsls	r4, r3, #5
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	59e3      	ldr	r3, [r4, r7]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	f7fb f939 	bl	8000118 <strlen>
 8004ea6:	2809      	cmp	r0, #9
 8004ea8:	d914      	bls.n	8004ed4 <oled_drawMenu+0x98>
 8004eaa:	4d97      	ldr	r5, [pc, #604]	; (8005108 <oled_drawMenu+0x2cc>)
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	682a      	ldr	r2, [r5, #0]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <oled_drawMenu+0x98>
		scrollIndex = 0;
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4b95      	ldr	r3, [pc, #596]	; (800510c <oled_drawMenu+0x2d0>)
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 8004eb8:	9801      	ldr	r0, [sp, #4]
		scrollIndex = 0;
 8004eba:	601a      	str	r2, [r3, #0]
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 8004ebc:	f7fb f92c 	bl	8000118 <strlen>
		scrollPause = 0;
 8004ec0:	2200      	movs	r2, #0
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 8004ec2:	4b93      	ldr	r3, [pc, #588]	; (8005110 <oled_drawMenu+0x2d4>)
 8004ec4:	380a      	subs	r0, #10
 8004ec6:	6018      	str	r0, [r3, #0]
		encoderposOld = encoderpos;
 8004ec8:	9b00      	ldr	r3, [sp, #0]
 8004eca:	602b      	str	r3, [r5, #0]
		scrollPause = 0;
 8004ecc:	4b91      	ldr	r3, [pc, #580]	; (8005114 <oled_drawMenu+0x2d8>)
 8004ece:	601a      	str	r2, [r3, #0]
		scrollPauseDone = 0;
 8004ed0:	4b91      	ldr	r3, [pc, #580]	; (8005118 <oled_drawMenu+0x2dc>)
 8004ed2:	601a      	str	r2, [r3, #0]
	if(encoderpos != (signed int)(dispmenusize)-1){
 8004ed4:	4b91      	ldr	r3, [pc, #580]	; (800511c <oled_drawMenu+0x2e0>)
 8004ed6:	9900      	ldr	r1, [sp, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	4291      	cmp	r1, r2
 8004ede:	d074      	beq.n	8004fca <oled_drawMenu+0x18e>
 8004ee0:	193c      	adds	r4, r7, r4
				dispmenu[i].selected = 1;
 8004ee2:	2701      	movs	r7, #1
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 8004ee4:	6831      	ldr	r1, [r6, #0]
 8004ee6:	9b00      	ldr	r3, [sp, #0]
 8004ee8:	1c4a      	adds	r2, r1, #1
 8004eea:	4293      	cmp	r3, r2
 8004eec:	dd0d      	ble.n	8004f0a <oled_drawMenu+0xce>
	if(encoderpos <= 0){
 8004eee:	6833      	ldr	r3, [r6, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dd00      	ble.n	8004ef6 <oled_drawMenu+0xba>
 8004ef4:	e0d3      	b.n	800509e <oled_drawMenu+0x262>
		ssd1306_SetCursor(117,41);
 8004ef6:	2129      	movs	r1, #41	; 0x29
 8004ef8:	2075      	movs	r0, #117	; 0x75
 8004efa:	f000 fb5b 	bl	80055b4 <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 8004efe:	2301      	movs	r3, #1
 8004f00:	4a87      	ldr	r2, [pc, #540]	; (8005120 <oled_drawMenu+0x2e4>)
 8004f02:	6811      	ldr	r1, [r2, #0]
 8004f04:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 8004f06:	2023      	movs	r0, #35	; 0x23
 8004f08:	e0d7      	b.n	80050ba <oled_drawMenu+0x27e>
			if(i == encoderpos){
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d14a      	bne.n	8004fa6 <oled_drawMenu+0x16a>
				dispmenu[i].selected = 1;
 8004f10:	6067      	str	r7, [r4, #4]
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 8004f12:	9b00      	ldr	r3, [sp, #0]
 8004f14:	200d      	movs	r0, #13
 8004f16:	1a59      	subs	r1, r3, r1
 8004f18:	2312      	movs	r3, #18
 8004f1a:	3101      	adds	r1, #1
 8004f1c:	4359      	muls	r1, r3
 8004f1e:	3103      	adds	r1, #3
 8004f20:	b2c9      	uxtb	r1, r1
 8004f22:	f000 fb47 	bl	80055b4 <ssd1306_SetCursor>
			if(strlen(dispmenu[i].name) > 9){
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	0028      	movs	r0, r5
 8004f2a:	f7fb f8f5 	bl	8000118 <strlen>
 8004f2e:	2809      	cmp	r0, #9
 8004f30:	d93f      	bls.n	8004fb2 <oled_drawMenu+0x176>
				if(dispmenu[i].selected){
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d038      	beq.n	8004fac <oled_drawMenu+0x170>
					memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 8004f3a:	2209      	movs	r2, #9
 8004f3c:	4b73      	ldr	r3, [pc, #460]	; (800510c <oled_drawMenu+0x2d0>)
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	1869      	adds	r1, r5, r1
 8004f42:	a804      	add	r0, sp, #16
 8004f44:	f000 fe00 	bl	8005b48 <memcpy>
					memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 8004f48:	0028      	movs	r0, r5
 8004f4a:	f7fb f8e5 	bl	8000118 <strlen>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	2011      	movs	r0, #17
 8004f52:	ab02      	add	r3, sp, #8
 8004f54:	3a09      	subs	r2, #9
 8004f56:	2100      	movs	r1, #0
 8004f58:	18c0      	adds	r0, r0, r3
 8004f5a:	f000 fdfe 	bl	8005b5a <memset>
					ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 8004f5e:	003b      	movs	r3, r7
 8004f60:	68a2      	ldr	r2, [r4, #8]
 8004f62:	a804      	add	r0, sp, #16
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	6852      	ldr	r2, [r2, #4]
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8004f68:	f000 fb10 	bl	800558c <ssd1306_WriteString>
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 8004f6c:	9b00      	ldr	r3, [sp, #0]
 8004f6e:	6832      	ldr	r2, [r6, #0]
 8004f70:	2002      	movs	r0, #2
 8004f72:	1a99      	subs	r1, r3, r2
 8004f74:	2312      	movs	r3, #18
 8004f76:	3101      	adds	r1, #1
 8004f78:	4359      	muls	r1, r3
 8004f7a:	3103      	adds	r1, #3
 8004f7c:	b2c9      	uxtb	r1, r1
 8004f7e:	f000 fb19 	bl	80055b4 <ssd1306_SetCursor>
			if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 8004f82:	68e1      	ldr	r1, [r4, #12]
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	4a66      	ldr	r2, [pc, #408]	; (8005120 <oled_drawMenu+0x2e4>)
 8004f88:	2900      	cmp	r1, #0
 8004f8a:	d01a      	beq.n	8004fc2 <oled_drawMenu+0x186>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d016      	beq.n	8004fbe <oled_drawMenu+0x182>
				ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 8004f90:	7d20      	ldrb	r0, [r4, #20]
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8004f92:	003b      	movs	r3, r7
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	6852      	ldr	r2, [r2, #4]
 8004f98:	f000 faa2 	bl	80054e0 <ssd1306_WriteChar>
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 8004f9c:	9b00      	ldr	r3, [sp, #0]
 8004f9e:	3420      	adds	r4, #32
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	e79e      	b.n	8004ee4 <oled_drawMenu+0xa8>
			}else dispmenu[i].selected = 0;
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6062      	str	r2, [r4, #4]
 8004faa:	e7b2      	b.n	8004f12 <oled_drawMenu+0xd6>
					memcpy(tmp, dispmenu[i].name, 9);
 8004fac:	2209      	movs	r2, #9
 8004fae:	0029      	movs	r1, r5
 8004fb0:	e7c7      	b.n	8004f42 <oled_drawMenu+0x106>
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8004fb2:	68a2      	ldr	r2, [r4, #8]
 8004fb4:	003b      	movs	r3, r7
 8004fb6:	6811      	ldr	r1, [r2, #0]
 8004fb8:	0028      	movs	r0, r5
 8004fba:	6852      	ldr	r2, [r2, #4]
 8004fbc:	e7d4      	b.n	8004f68 <oled_drawMenu+0x12c>
				ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 8004fbe:	7c20      	ldrb	r0, [r4, #16]
 8004fc0:	e7e7      	b.n	8004f92 <oled_drawMenu+0x156>
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8004fc2:	2021      	movs	r0, #33	; 0x21
 8004fc4:	1ac0      	subs	r0, r0, r3
 8004fc6:	b2c0      	uxtb	r0, r0
 8004fc8:	e7e3      	b.n	8004f92 <oled_drawMenu+0x156>
 8004fca:	3c1c      	subs	r4, #28
 8004fcc:	193c      	adds	r4, r7, r4
					dispmenu[i].selected = 1;
 8004fce:	2701      	movs	r7, #1
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 8004fd0:	3b02      	subs	r3, #2
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	6831      	ldr	r1, [r6, #0]
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	dc88      	bgt.n	8004eee <oled_drawMenu+0xb2>
				if((i) == encoderpos){
 8004fdc:	9b00      	ldr	r3, [sp, #0]
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d14b      	bne.n	800507a <oled_drawMenu+0x23e>
					dispmenu[i].selected = 1;
 8004fe2:	6027      	str	r7, [r4, #0]
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 8004fe4:	9b00      	ldr	r3, [sp, #0]
 8004fe6:	200d      	movs	r0, #13
 8004fe8:	1a59      	subs	r1, r3, r1
 8004fea:	2312      	movs	r3, #18
 8004fec:	3102      	adds	r1, #2
 8004fee:	4359      	muls	r1, r3
 8004ff0:	3103      	adds	r1, #3
 8004ff2:	b2c9      	uxtb	r1, r1
 8004ff4:	f000 fade 	bl	80055b4 <ssd1306_SetCursor>
				if(strlen(dispmenu[i].name) > 9){
 8004ff8:	1f23      	subs	r3, r4, #4
 8004ffa:	681d      	ldr	r5, [r3, #0]
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f7fb f88b 	bl	8000118 <strlen>
 8005002:	2809      	cmp	r0, #9
 8005004:	d93f      	bls.n	8005086 <oled_drawMenu+0x24a>
					if(dispmenu[i].selected){
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d038      	beq.n	8005080 <oled_drawMenu+0x244>
						memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 800500e:	2209      	movs	r2, #9
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <oled_drawMenu+0x2d0>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	1869      	adds	r1, r5, r1
 8005016:	a804      	add	r0, sp, #16
 8005018:	f000 fd96 	bl	8005b48 <memcpy>
						memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 800501c:	0028      	movs	r0, r5
 800501e:	f7fb f87b 	bl	8000118 <strlen>
 8005022:	0002      	movs	r2, r0
 8005024:	2011      	movs	r0, #17
 8005026:	ab02      	add	r3, sp, #8
 8005028:	3a09      	subs	r2, #9
 800502a:	2100      	movs	r1, #0
 800502c:	18c0      	adds	r0, r0, r3
 800502e:	f000 fd94 	bl	8005b5a <memset>
						ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 8005032:	003b      	movs	r3, r7
 8005034:	6862      	ldr	r2, [r4, #4]
 8005036:	a804      	add	r0, sp, #16
 8005038:	6811      	ldr	r1, [r2, #0]
 800503a:	6852      	ldr	r2, [r2, #4]
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800503c:	f000 faa6 	bl	800558c <ssd1306_WriteString>
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 8005040:	9b00      	ldr	r3, [sp, #0]
 8005042:	6832      	ldr	r2, [r6, #0]
 8005044:	2002      	movs	r0, #2
 8005046:	1a99      	subs	r1, r3, r2
 8005048:	2312      	movs	r3, #18
 800504a:	3102      	adds	r1, #2
 800504c:	4359      	muls	r1, r3
 800504e:	3103      	adds	r1, #3
 8005050:	b2c9      	uxtb	r1, r1
 8005052:	f000 faaf 	bl	80055b4 <ssd1306_SetCursor>
				if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 8005056:	68a1      	ldr	r1, [r4, #8]
 8005058:	4a31      	ldr	r2, [pc, #196]	; (8005120 <oled_drawMenu+0x2e4>)
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	2900      	cmp	r1, #0
 800505e:	d01a      	beq.n	8005096 <oled_drawMenu+0x25a>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <oled_drawMenu+0x256>
					ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 8005064:	7c20      	ldrb	r0, [r4, #16]
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8005066:	003b      	movs	r3, r7
 8005068:	6811      	ldr	r1, [r2, #0]
 800506a:	6852      	ldr	r2, [r2, #4]
 800506c:	f000 fa38 	bl	80054e0 <ssd1306_WriteChar>
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 8005070:	9b00      	ldr	r3, [sp, #0]
 8005072:	3420      	adds	r4, #32
 8005074:	3301      	adds	r3, #1
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	e7ac      	b.n	8004fd4 <oled_drawMenu+0x198>
				}else dispmenu[i].selected = 0;
 800507a:	2200      	movs	r2, #0
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	e7b1      	b.n	8004fe4 <oled_drawMenu+0x1a8>
						memcpy(tmp, dispmenu[i].name, 9);
 8005080:	2209      	movs	r2, #9
 8005082:	0029      	movs	r1, r5
 8005084:	e7c7      	b.n	8005016 <oled_drawMenu+0x1da>
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	003b      	movs	r3, r7
 800508a:	6811      	ldr	r1, [r2, #0]
 800508c:	0028      	movs	r0, r5
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	e7d4      	b.n	800503c <oled_drawMenu+0x200>
					ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 8005092:	7b20      	ldrb	r0, [r4, #12]
 8005094:	e7e7      	b.n	8005066 <oled_drawMenu+0x22a>
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8005096:	2021      	movs	r0, #33	; 0x21
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	b2c0      	uxtb	r0, r0
 800509c:	e7e3      	b.n	8005066 <oled_drawMenu+0x22a>
	}else if(encoderpos == dispmenusize-1){
 800509e:	4a1f      	ldr	r2, [pc, #124]	; (800511c <oled_drawMenu+0x2e0>)
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	1e51      	subs	r1, r2, #1
 80050a4:	428b      	cmp	r3, r1
 80050a6:	d10f      	bne.n	80050c8 <oled_drawMenu+0x28c>
		ssd1306_SetCursor(117,19);
 80050a8:	2113      	movs	r1, #19
 80050aa:	2075      	movs	r0, #117	; 0x75
 80050ac:	f000 fa82 	bl	80055b4 <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 80050b0:	2301      	movs	r3, #1
 80050b2:	2022      	movs	r0, #34	; 0x22
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <oled_drawMenu+0x2e4>)
 80050b6:	6811      	ldr	r1, [r2, #0]
 80050b8:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 80050ba:	f000 fa11 	bl	80054e0 <ssd1306_WriteChar>
	ssd1306_UpdateScreen(0);
 80050be:	2000      	movs	r0, #0
 80050c0:	f000 f914 	bl	80052ec <ssd1306_UpdateScreen>
}
 80050c4:	b00d      	add	sp, #52	; 0x34
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(encoderpos > 0 && encoderpos < dispmenusize){
 80050c8:	4293      	cmp	r3, r2
 80050ca:	daf8      	bge.n	80050be <oled_drawMenu+0x282>
		ssd1306_SetCursor(117,19);
 80050cc:	2113      	movs	r1, #19
 80050ce:	2075      	movs	r0, #117	; 0x75
 80050d0:	f000 fa70 	bl	80055b4 <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 80050d4:	4c12      	ldr	r4, [pc, #72]	; (8005120 <oled_drawMenu+0x2e4>)
 80050d6:	2301      	movs	r3, #1
 80050d8:	6821      	ldr	r1, [r4, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	2022      	movs	r0, #34	; 0x22
 80050de:	f000 f9ff 	bl	80054e0 <ssd1306_WriteChar>
		ssd1306_SetCursor(117,41);
 80050e2:	2129      	movs	r1, #41	; 0x29
 80050e4:	2075      	movs	r0, #117	; 0x75
 80050e6:	f000 fa65 	bl	80055b4 <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 80050ea:	cc06      	ldmia	r4!, {r1, r2}
 80050ec:	2301      	movs	r3, #1
 80050ee:	e70a      	b.n	8004f06 <oled_drawMenu+0xca>
 80050f0:	200013f8 	.word	0x200013f8
 80050f4:	20001948 	.word	0x20001948
 80050f8:	20001b5c 	.word	0x20001b5c
 80050fc:	200001f0 	.word	0x200001f0
 8005100:	200016ac 	.word	0x200016ac
 8005104:	20000db8 	.word	0x20000db8
 8005108:	20001938 	.word	0x20001938
 800510c:	20001a54 	.word	0x20001a54
 8005110:	20000720 	.word	0x20000720
 8005114:	20001950 	.word	0x20001950
 8005118:	20000718 	.word	0x20000718
 800511c:	2000194c 	.word	0x2000194c
 8005120:	200001f8 	.word	0x200001f8

08005124 <oled_refresh>:
void oled_refresh(){
 8005124:	b510      	push	{r4, lr}
	ssd1306_Fill(0);
 8005126:	2000      	movs	r0, #0
 8005128:	f000 f8d2 	bl	80052d0 <ssd1306_Fill>
	if(oledType == OLED_MENU){
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <oled_refresh+0x28>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d102      	bne.n	800513a <oled_refresh+0x16>
		oled_drawMenu();
 8005134:	f7ff fe82 	bl	8004e3c <oled_drawMenu>
}
 8005138:	bd10      	pop	{r4, pc}
	}else if(oledType == OLED_SPLASH){
 800513a:	2b03      	cmp	r3, #3
 800513c:	d1fc      	bne.n	8005138 <oled_refresh+0x14>
		(*splashFunction)(splashTxt);
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <oled_refresh+0x2c>)
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <oled_refresh+0x30>)
 8005142:	6810      	ldr	r0, [r2, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4798      	blx	r3
}
 8005148:	e7f6      	b.n	8005138 <oled_refresh+0x14>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	20000864 	.word	0x20000864
 8005150:	20001a58 	.word	0x20001a58
 8005154:	2000193c 	.word	0x2000193c

08005158 <MX_RTC_Init>:

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8005158:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 800515a:	480b      	ldr	r0, [pc, #44]	; (8005188 <MX_RTC_Init+0x30>)
{
 800515c:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 8005160:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8005162:	3280      	adds	r2, #128	; 0x80
 8005164:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005166:	2280      	movs	r2, #128	; 0x80
  hrtc.Instance = RTC;
 8005168:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800516a:	2300      	movs	r3, #0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800516c:	05d2      	lsls	r2, r2, #23
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800516e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005170:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005172:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005174:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005176:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005178:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800517a:	f7fd fc11 	bl	80029a0 <HAL_RTC_Init>
 800517e:	2800      	cmp	r0, #0
 8005180:	d001      	beq.n	8005186 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8005182:	f7ff fba2 	bl	80048ca <Error_Handler>
  }

}
 8005186:	bd10      	pop	{r4, pc}
 8005188:	20001b5c 	.word	0x20001b5c
 800518c:	40002800 	.word	0x40002800

08005190 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <HAL_RTC_MspInit+0x2c>)
 8005192:	6802      	ldr	r2, [r0, #0]
{
 8005194:	b082      	sub	sp, #8
  if(rtcHandle->Instance==RTC)
 8005196:	429a      	cmp	r2, r3
 8005198:	d10e      	bne.n	80051b8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <HAL_RTC_MspInit+0x30>)
 800519e:	0212      	lsls	r2, r2, #8
 80051a0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80051a2:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80051a4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 80051a6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80051a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051aa:	00c9      	lsls	r1, r1, #3
 80051ac:	430a      	orrs	r2, r1
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	400b      	ands	r3, r1
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80051b8:	b002      	add	sp, #8
 80051ba:	4770      	bx	lr
 80051bc:	40002800 	.word	0x40002800
 80051c0:	40021000 	.word	0x40021000

080051c4 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 80051c4:	4810      	ldr	r0, [pc, #64]	; (8005208 <MX_SPI1_Init+0x44>)
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <MX_SPI1_Init+0x48>)
{
 80051c8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80051ca:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051cc:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80051ce:	22c0      	movs	r2, #192	; 0xc0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80051d4:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80051da:	3a01      	subs	r2, #1
 80051dc:	3aff      	subs	r2, #255	; 0xff
 80051de:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80051e0:	3afa      	subs	r2, #250	; 0xfa
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80051e2:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051e4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051e6:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051e8:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051ea:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80051ec:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ee:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80051f0:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051f2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051f4:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 80051f6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051f8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80051fa:	f7fd fc73 	bl	8002ae4 <HAL_SPI_Init>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d001      	beq.n	8005206 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 8005202:	f7ff fb62 	bl	80048ca <Error_Handler>
  }

}
 8005206:	bd10      	pop	{r4, pc}
 8005208:	20001b88 	.word	0x20001b88
 800520c:	40013000 	.word	0x40013000

08005210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005210:	b510      	push	{r4, lr}
 8005212:	0004      	movs	r4, r0
 8005214:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005216:	2214      	movs	r2, #20
 8005218:	2100      	movs	r1, #0
 800521a:	a803      	add	r0, sp, #12
 800521c:	f000 fc9d 	bl	8005b5a <memset>
  if(spiHandle->Instance==SPI1)
 8005220:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_SPI_MspInit+0x78>)
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d12c      	bne.n	8005282 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005228:	2080      	movs	r0, #128	; 0x80
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <HAL_SPI_MspInit+0x7c>)
 800522c:	0140      	lsls	r0, r0, #5
 800522e:	6c19      	ldr	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005230:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005232:	4301      	orrs	r1, r0
 8005234:	6419      	str	r1, [r3, #64]	; 0x40
 8005236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005238:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523a:	2001      	movs	r0, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800523c:	9200      	str	r2, [sp, #0]
 800523e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005242:	4301      	orrs	r1, r0
 8005244:	6359      	str	r1, [r3, #52]	; 0x34
 8005246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005248:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524a:	4002      	ands	r2, r0
 800524c:	9201      	str	r2, [sp, #4]
 800524e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005252:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005254:	4322      	orrs	r2, r4
 8005256:	635a      	str	r2, [r3, #52]	; 0x34
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800525c:	4023      	ands	r3, r4
 800525e:	9302      	str	r3, [sp, #8]
 8005260:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005262:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005264:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005266:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005268:	f7fb ff62 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800526c:	2308      	movs	r3, #8
 800526e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005272:	a903      	add	r1, sp, #12
 8005274:	4806      	ldr	r0, [pc, #24]	; (8005290 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800527c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527e:	f7fb ff57 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005282:	b008      	add	sp, #32
 8005284:	bd10      	pop	{r4, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	40013000 	.word	0x40013000
 800528c:	40021000 	.word	0x40021000
 8005290:	50000400 	.word	0x50000400

08005294 <ssd1306_WriteBufferByte>:
#if defined(SSD1306_USE_I2C)

uint8_t screenBuffer[(SSD1306_WIDTH * SSD1306_HEIGHT / 8)], bufferIndex = 0, txStep = 0, intStat = 0;


void ssd1306_WriteBufferByte(uint8_t buff[], uint8_t byte) {
 8005294:	b510      	push	{r4, lr}
	buff[bufferIndex++] = byte;
 8005296:	4a03      	ldr	r2, [pc, #12]	; (80052a4 <ssd1306_WriteBufferByte+0x10>)
 8005298:	7813      	ldrb	r3, [r2, #0]
 800529a:	1c5c      	adds	r4, r3, #1
 800529c:	7014      	strb	r4, [r2, #0]
 800529e:	54c1      	strb	r1, [r0, r3]
}
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	2000069a 	.word	0x2000069a

080052a8 <ssd1306_SendBuffer>:

void ssd1306_SendBuffer(uint8_t memAdd, uint8_t buff[], uint32_t size) {
 80052a8:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, memAdd, 1, buff, size);
 80052aa:	b280      	uxth	r0, r0
 80052ac:	b292      	uxth	r2, r2
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	9100      	str	r1, [sp, #0]
 80052b2:	0002      	movs	r2, r0
 80052b4:	2301      	movs	r3, #1
 80052b6:	2178      	movs	r1, #120	; 0x78
 80052b8:	4803      	ldr	r0, [pc, #12]	; (80052c8 <ssd1306_SendBuffer+0x20>)
 80052ba:	f7fc f98d 	bl	80015d8 <HAL_I2C_Mem_Write_DMA>
	bufferIndex = 0;
 80052be:	2200      	movs	r2, #0
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <ssd1306_SendBuffer+0x24>)
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	bd07      	pop	{r0, r1, r2, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	20001ab8 	.word	0x20001ab8
 80052cc:	2000069a 	.word	0x2000069a

080052d0 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80052d0:	1e42      	subs	r2, r0, #1
 80052d2:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80052d4:	2282      	movs	r2, #130	; 0x82
 80052d6:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80052d8:	4903      	ldr	r1, [pc, #12]	; (80052e8 <ssd1306_Fill+0x18>)
 80052da:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80052dc:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80052de:	5458      	strb	r0, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80052e0:	3301      	adds	r3, #1
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d1fb      	bne.n	80052de <ssd1306_Fill+0xe>
    }
}
 80052e6:	4770      	bx	lr
 80052e8:	2000028a 	.word	0x2000028a

080052ec <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(uint8_t step) {
 80052ec:	0003      	movs	r3, r0
    intStat = 1;
 80052ee:	2001      	movs	r0, #1
 80052f0:	4a0d      	ldr	r2, [pc, #52]	; (8005328 <ssd1306_UpdateScreen+0x3c>)
void ssd1306_UpdateScreen(uint8_t step) {
 80052f2:	b510      	push	{r4, lr}
    intStat = 1;
 80052f4:	7010      	strb	r0, [r2, #0]
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }*/


    if(step % 2){
 80052f6:	4018      	ands	r0, r3
 80052f8:	d00d      	beq.n	8005316 <ssd1306_UpdateScreen+0x2a>
    	//memcpy(screenBuffer, &SSD1306_Buffer[SSD1306_WIDTH*((step+1)/2)], SSD1306_WIDTH);
    	ssd1306_SendBuffer(SSD1306_MEM_DAT, &SSD1306_Buffer[SSD1306_WIDTH*((step-1)/2)], SSD1306_WIDTH);
 80052fa:	2282      	movs	r2, #130	; 0x82
 80052fc:	2040      	movs	r0, #64	; 0x40
 80052fe:	1e59      	subs	r1, r3, #1
 8005300:	1049      	asrs	r1, r1, #1
 8005302:	4351      	muls	r1, r2
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <ssd1306_UpdateScreen+0x40>)
 8005306:	1859      	adds	r1, r3, r1
    }else{
    	screenBuffer[0] = 0xB0 + (step/2);
    	screenBuffer[1] = 0x00;
    	screenBuffer[2] = 0x10;
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 8005308:	f7ff ffce 	bl	80052a8 <ssd1306_SendBuffer>
    }

   /* if(step == 0 && txStep == 0){
    	txStep = 1;
    }else */txStep++;
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <ssd1306_UpdateScreen+0x44>)
 800530e:	7813      	ldrb	r3, [r2, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	7013      	strb	r3, [r2, #0]




    //ssd1306_SendBuffer(SSD1306_MEM_DAT, SSD1306_Buffer, ((SSD1306_WIDTH * SSD1306_HEIGHT) / 8));
}
 8005314:	bd10      	pop	{r4, pc}
    	screenBuffer[0] = 0xB0 + (step/2);
 8005316:	4907      	ldr	r1, [pc, #28]	; (8005334 <ssd1306_UpdateScreen+0x48>)
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	3b50      	subs	r3, #80	; 0x50
 800531c:	700b      	strb	r3, [r1, #0]
    	screenBuffer[2] = 0x10;
 800531e:	2310      	movs	r3, #16
    	screenBuffer[1] = 0x00;
 8005320:	7048      	strb	r0, [r1, #1]
    	screenBuffer[2] = 0x10;
 8005322:	708b      	strb	r3, [r1, #2]
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 8005324:	2203      	movs	r2, #3
 8005326:	e7ef      	b.n	8005308 <ssd1306_UpdateScreen+0x1c>
 8005328:	2000069b 	.word	0x2000069b
 800532c:	2000028a 	.word	0x2000028a
 8005330:	2000069c 	.word	0x2000069c
 8005334:	20001bec 	.word	0x20001bec

08005338 <ssd1306_Init>:
void ssd1306_Init(void) {
 8005338:	b510      	push	{r4, lr}
    HAL_Delay(100);
 800533a:	2064      	movs	r0, #100	; 0x64
 800533c:	f7fb f9d6 	bl	80006ec <HAL_Delay>
    ssd1306_WriteBufferByte(screenBuffer, 0xAE); //display off
 8005340:	4c44      	ldr	r4, [pc, #272]	; (8005454 <ssd1306_Init+0x11c>)
 8005342:	21ae      	movs	r1, #174	; 0xae
 8005344:	0020      	movs	r0, r4
 8005346:	f7ff ffa5 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //Set Memory Addressing Mode
 800534a:	2120      	movs	r1, #32
 800534c:	0020      	movs	r0, r4
 800534e:	f7ff ffa1 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8005352:	2110      	movs	r1, #16
 8005354:	0020      	movs	r0, r4
 8005356:	f7ff ff9d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800535a:	21b0      	movs	r1, #176	; 0xb0
 800535c:	0020      	movs	r0, r4
 800535e:	f7ff ff99 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xC8); //Set COM Output Scan Direction
 8005362:	21c8      	movs	r1, #200	; 0xc8
 8005364:	0020      	movs	r0, r4
 8005366:	f7ff ff95 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //---set low column address
 800536a:	2100      	movs	r1, #0
 800536c:	0020      	movs	r0, r4
 800536e:	f7ff ff91 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); //---set high column address
 8005372:	2110      	movs	r1, #16
 8005374:	0020      	movs	r0, r4
 8005376:	f7ff ff8d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x40); //--set start line address - CHECK
 800537a:	2140      	movs	r1, #64	; 0x40
 800537c:	0020      	movs	r0, r4
 800537e:	f7ff ff89 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x81); //--set contrast control register - CHECK
 8005382:	2181      	movs	r1, #129	; 0x81
 8005384:	0020      	movs	r0, r4
 8005386:	f7ff ff85 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xFF);
 800538a:	21ff      	movs	r1, #255	; 0xff
 800538c:	0020      	movs	r0, r4
 800538e:	f7ff ff81 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA1); //--set segment re-map 0 to 127 - CHECK
 8005392:	21a1      	movs	r1, #161	; 0xa1
 8005394:	0020      	movs	r0, r4
 8005396:	f7ff ff7d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA6); //--set normal color
 800539a:	21a6      	movs	r1, #166	; 0xa6
 800539c:	0020      	movs	r0, r4
 800539e:	f7ff ff79 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80053a2:	21a8      	movs	r1, #168	; 0xa8
 80053a4:	0020      	movs	r0, r4
 80053a6:	f7ff ff75 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x3F); //
 80053aa:	213f      	movs	r1, #63	; 0x3f
 80053ac:	0020      	movs	r0, r4
 80053ae:	f7ff ff71 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80053b2:	21a4      	movs	r1, #164	; 0xa4
 80053b4:	0020      	movs	r0, r4
 80053b6:	f7ff ff6d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD3); //-set display offset - CHECK
 80053ba:	21d3      	movs	r1, #211	; 0xd3
 80053bc:	0020      	movs	r0, r4
 80053be:	f7ff ff69 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //-not offset
 80053c2:	2100      	movs	r1, #0
 80053c4:	0020      	movs	r0, r4
 80053c6:	f7ff ff65 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD5); //--set display clock divide ratio/oscillator frequency
 80053ca:	21d5      	movs	r1, #213	; 0xd5
 80053cc:	0020      	movs	r0, r4
 80053ce:	f7ff ff61 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xF0); //--set divide ratio
 80053d2:	21f0      	movs	r1, #240	; 0xf0
 80053d4:	0020      	movs	r0, r4
 80053d6:	f7ff ff5d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD9); //--set pre-charge period
 80053da:	21d9      	movs	r1, #217	; 0xd9
 80053dc:	0020      	movs	r0, r4
 80053de:	f7ff ff59 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x34); //22
 80053e2:	2134      	movs	r1, #52	; 0x34
 80053e4:	0020      	movs	r0, r4
 80053e6:	f7ff ff55 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDA); //--set com pins hardware configuration - CHECK
 80053ea:	21da      	movs	r1, #218	; 0xda
 80053ec:	0020      	movs	r0, r4
 80053ee:	f7ff ff51 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x12);
 80053f2:	2112      	movs	r1, #18
 80053f4:	0020      	movs	r0, r4
 80053f6:	f7ff ff4d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDB); //--set vcomh
 80053fa:	21db      	movs	r1, #219	; 0xdb
 80053fc:	0020      	movs	r0, r4
 80053fe:	f7ff ff49 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //0x20,0.77xVcc
 8005402:	2120      	movs	r1, #32
 8005404:	0020      	movs	r0, r4
 8005406:	f7ff ff45 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x8D); //--set DC-DC enable
 800540a:	218d      	movs	r1, #141	; 0x8d
 800540c:	0020      	movs	r0, r4
 800540e:	f7ff ff41 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x14); //
 8005412:	2114      	movs	r1, #20
 8005414:	0020      	movs	r0, r4
 8005416:	f7ff ff3d 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xAF); //--turn on SSD1306 panel
 800541a:	21af      	movs	r1, #175	; 0xaf
 800541c:	0020      	movs	r0, r4
 800541e:	f7ff ff39 	bl	8005294 <ssd1306_WriteBufferByte>
    ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, bufferIndex);
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <ssd1306_Init+0x120>)
 8005424:	0021      	movs	r1, r4
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	2000      	movs	r0, #0
 800542a:	f7ff ff3d 	bl	80052a8 <ssd1306_SendBuffer>
    while(HAL_DMA_GetState(&hdma_i2c1_tx) == HAL_DMA_STATE_BUSY);
 800542e:	480b      	ldr	r0, [pc, #44]	; (800545c <ssd1306_Init+0x124>)
 8005430:	f7fb fe78 	bl	8001124 <HAL_DMA_GetState>
 8005434:	2802      	cmp	r0, #2
 8005436:	d0fa      	beq.n	800542e <ssd1306_Init+0xf6>
    ssd1306_Fill(Black);
 8005438:	2000      	movs	r0, #0
 800543a:	f7ff ff49 	bl	80052d0 <ssd1306_Fill>
    ssd1306_UpdateScreen(0);
 800543e:	2000      	movs	r0, #0
 8005440:	f7ff ff54 	bl	80052ec <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8005444:	2200      	movs	r2, #0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <ssd1306_Init+0x128>)
 8005448:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800544a:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800544c:	3201      	adds	r2, #1
 800544e:	715a      	strb	r2, [r3, #5]
}
 8005450:	bd10      	pop	{r4, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	20001bec 	.word	0x20001bec
 8005458:	2000069a 	.word	0x2000069a
 800545c:	20001a5c 	.word	0x20001a5c
 8005460:	20000284 	.word	0x20000284

08005464 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){

	if(hi2c->Instance == I2C1){
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_I2C_MemTxCpltCallback+0x28>)
 8005466:	6802      	ldr	r2, [r0, #0]
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005468:	b510      	push	{r4, lr}
	if(hi2c->Instance == I2C1){
 800546a:	429a      	cmp	r2, r3
 800546c:	d109      	bne.n	8005482 <HAL_I2C_MemTxCpltCallback+0x1e>
		if(intStat == 0){
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <HAL_I2C_MemTxCpltCallback+0x2c>)

		}else if(intStat == 1){
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	2a01      	cmp	r2, #1
 8005474:	d105      	bne.n	8005482 <HAL_I2C_MemTxCpltCallback+0x1e>
			if(txStep < 16){
 8005476:	4907      	ldr	r1, [pc, #28]	; (8005494 <HAL_I2C_MemTxCpltCallback+0x30>)
 8005478:	7808      	ldrb	r0, [r1, #0]
 800547a:	280f      	cmp	r0, #15
 800547c:	d802      	bhi.n	8005484 <HAL_I2C_MemTxCpltCallback+0x20>
				ssd1306_UpdateScreen(txStep);
 800547e:	f7ff ff35 	bl	80052ec <ssd1306_UpdateScreen>
		}

	}


}
 8005482:	bd10      	pop	{r4, pc}
				txStep = 0;
 8005484:	2200      	movs	r2, #0
 8005486:	700a      	strb	r2, [r1, #0]
				intStat = 0;
 8005488:	701a      	strb	r2, [r3, #0]
}
 800548a:	e7fa      	b.n	8005482 <HAL_I2C_MemTxCpltCallback+0x1e>
 800548c:	40005400 	.word	0x40005400
 8005490:	2000069b 	.word	0x2000069b
 8005494:	2000069c 	.word	0x2000069c

08005498 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005498:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800549a:	2881      	cmp	r0, #129	; 0x81
 800549c:	d815      	bhi.n	80054ca <ssd1306_DrawPixel+0x32>
 800549e:	293f      	cmp	r1, #63	; 0x3f
 80054a0:	d813      	bhi.n	80054ca <ssd1306_DrawPixel+0x32>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <ssd1306_DrawPixel+0x40>)
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <ssd1306_DrawPixel+0x18>
        color = (SSD1306_COLOR)!color;
 80054aa:	4253      	negs	r3, r2
 80054ac:	415a      	adcs	r2, r3
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	2382      	movs	r3, #130	; 0x82
 80054b2:	08cd      	lsrs	r5, r1, #3
    }

    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80054b4:	436b      	muls	r3, r5
 80054b6:	1818      	adds	r0, r3, r0
 80054b8:	2307      	movs	r3, #7
 80054ba:	4c08      	ldr	r4, [pc, #32]	; (80054dc <ssd1306_DrawPixel+0x44>)
 80054bc:	4019      	ands	r1, r3
    if(color == White) {
 80054be:	2a01      	cmp	r2, #1
 80054c0:	d104      	bne.n	80054cc <ssd1306_DrawPixel+0x34>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80054c2:	408a      	lsls	r2, r1
 80054c4:	5c23      	ldrb	r3, [r4, r0]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	5422      	strb	r2, [r4, r0]
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 80054ca:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80054cc:	2201      	movs	r2, #1
 80054ce:	408a      	lsls	r2, r1
 80054d0:	5c23      	ldrb	r3, [r4, r0]
 80054d2:	4393      	bics	r3, r2
 80054d4:	5423      	strb	r3, [r4, r0]
 80054d6:	e7f8      	b.n	80054ca <ssd1306_DrawPixel+0x32>
 80054d8:	20000284 	.word	0x20000284
 80054dc:	2000028a 	.word	0x2000028a

080054e0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	b08b      	sub	sp, #44	; 0x2c
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	b2cb      	uxtb	r3, r1
 80054e8:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <ssd1306_WriteChar+0xa8>)
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80054ec:	9108      	str	r1, [sp, #32]
 80054ee:	9209      	str	r2, [sp, #36]	; 0x24
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80054f0:	9903      	ldr	r1, [sp, #12]
 80054f2:	881a      	ldrh	r2, [r3, #0]
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80054f4:	0006      	movs	r6, r0
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	1852      	adds	r2, r2, r1
 80054fa:	2a81      	cmp	r2, #129	; 0x81
 80054fc:	dc41      	bgt.n	8005582 <ssd1306_WriteChar+0xa2>
 80054fe:	aa08      	add	r2, sp, #32
 8005500:	7852      	ldrb	r2, [r2, #1]
 8005502:	9204      	str	r2, [sp, #16]
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005504:	885c      	ldrh	r4, [r3, #2]
 8005506:	18a3      	adds	r3, r4, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005508:	2b3f      	cmp	r3, #63	; 0x3f
 800550a:	dc3a      	bgt.n	8005582 <ssd1306_WriteChar+0xa2>
        return 0;
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800550c:	0033      	movs	r3, r6
 800550e:	3b20      	subs	r3, #32
 8005510:	435a      	muls	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	9207      	str	r2, [sp, #28]
 8005516:	b2e4      	uxtb	r4, r4
 8005518:	9301      	str	r3, [sp, #4]
    for(i = 0; i < Font.FontHeight; i++) {
 800551a:	9b01      	ldr	r3, [sp, #4]
 800551c:	9a04      	ldr	r2, [sp, #16]
 800551e:	4293      	cmp	r3, r2
 8005520:	d308      	bcc.n	8005534 <ssd1306_WriteChar+0x54>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005522:	9a03      	ldr	r2, [sp, #12]
 8005524:	9b02      	ldr	r3, [sp, #8]
 8005526:	4694      	mov	ip, r2
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <ssd1306_WriteChar+0xa8>)
 800552a:	4463      	add	r3, ip
 800552c:	8013      	strh	r3, [r2, #0]

    // Return written char for validation
    return ch;
}
 800552e:	0030      	movs	r0, r6
 8005530:	b00b      	add	sp, #44	; 0x2c
 8005532:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005534:	9a07      	ldr	r2, [sp, #28]
 8005536:	9b01      	ldr	r3, [sp, #4]
        for(j = 0; j < Font.FontWidth; j++) {
 8005538:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800553a:	189b      	adds	r3, r3, r2
 800553c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	5a9b      	ldrh	r3, [r3, r2]
 8005542:	9306      	str	r3, [sp, #24]
 8005544:	466b      	mov	r3, sp
 8005546:	7a1d      	ldrb	r5, [r3, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	429f      	cmp	r7, r3
 800554c:	d305      	bcc.n	800555a <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	3401      	adds	r4, #1
 8005552:	3301      	adds	r3, #1
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	b2e4      	uxtb	r4, r4
 8005558:	e7df      	b.n	800551a <ssd1306_WriteChar+0x3a>
            if((b << j) & 0x8000)  {
 800555a:	9b06      	ldr	r3, [sp, #24]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	40bb      	lsls	r3, r7
 8005560:	0212      	lsls	r2, r2, #8
 8005562:	4213      	tst	r3, r2
 8005564:	d008      	beq.n	8005578 <ssd1306_WriteChar+0x98>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005566:	9a05      	ldr	r2, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005568:	0028      	movs	r0, r5
 800556a:	0021      	movs	r1, r4
 800556c:	3501      	adds	r5, #1
 800556e:	f7ff ff93 	bl	8005498 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005572:	3701      	adds	r7, #1
 8005574:	b2ed      	uxtb	r5, r5
 8005576:	e7e7      	b.n	8005548 <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005578:	9a05      	ldr	r2, [sp, #20]
 800557a:	4253      	negs	r3, r2
 800557c:	415a      	adcs	r2, r3
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	e7f2      	b.n	8005568 <ssd1306_WriteChar+0x88>
        return 0;
 8005582:	2600      	movs	r6, #0
 8005584:	e7d3      	b.n	800552e <ssd1306_WriteChar+0x4e>
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	20000284 	.word	0x20000284

0800558c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800558c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558e:	0004      	movs	r4, r0
 8005590:	001d      	movs	r5, r3
 8005592:	9100      	str	r1, [sp, #0]
 8005594:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 8005596:	7820      	ldrb	r0, [r4, #0]
 8005598:	2800      	cmp	r0, #0
 800559a:	d100      	bne.n	800559e <ssd1306_WriteString+0x12>
        str++;
    }

    // Everything ok
    return *str;
}
 800559c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800559e:	002b      	movs	r3, r5
 80055a0:	9900      	ldr	r1, [sp, #0]
 80055a2:	9a01      	ldr	r2, [sp, #4]
 80055a4:	f7ff ff9c 	bl	80054e0 <ssd1306_WriteChar>
 80055a8:	0003      	movs	r3, r0
 80055aa:	7820      	ldrb	r0, [r4, #0]
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d1f5      	bne.n	800559c <ssd1306_WriteString+0x10>
        str++;
 80055b0:	3401      	adds	r4, #1
 80055b2:	e7f0      	b.n	8005596 <ssd1306_WriteString+0xa>

080055b4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <ssd1306_SetCursor+0x8>)
 80055b6:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 80055b8:	8059      	strh	r1, [r3, #2]
}
 80055ba:	4770      	bx	lr
 80055bc:	20000284 	.word	0x20000284

080055c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c0:	2001      	movs	r0, #1
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <HAL_MspInit+0x38>)
{
 80055c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80055c8:	4301      	orrs	r1, r0
 80055ca:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80055cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d2:	4002      	ands	r2, r0
 80055d4:	9200      	str	r2, [sp, #0]
 80055d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055da:	430a      	orrs	r2, r1
 80055dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80055e0:	4a06      	ldr	r2, [pc, #24]	; (80055fc <HAL_MspInit+0x3c>)
 80055e2:	400b      	ands	r3, r1
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	6811      	ldr	r1, [r2, #0]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6013      	str	r3, [r2, #0]
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD2_STROBE);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055f2:	b002      	add	sp, #8
 80055f4:	4770      	bx	lr
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40010000 	.word	0x40010000

08005600 <NMI_Handler>:
 8005600:	4770      	bx	lr

08005602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005602:	e7fe      	b.n	8005602 <HardFault_Handler>

08005604 <SVC_Handler>:
 8005604:	4770      	bx	lr

08005606 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005606:	4770      	bx	lr

08005608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005608:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800560a:	f7fb f85d 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800560e:	bd10      	pop	{r4, pc}

08005610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005610:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005612:	4802      	ldr	r0, [pc, #8]	; (800561c <DMA1_Channel1_IRQHandler+0xc>)
 8005614:	f7fb fd32 	bl	800107c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005618:	bd10      	pop	{r4, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	20001a5c 	.word	0x20001a5c

08005620 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005620:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005622:	4803      	ldr	r0, [pc, #12]	; (8005630 <DMA1_Channel2_3_IRQHandler+0x10>)
 8005624:	f7fb fd2a 	bl	800107c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA1_Channel2_3_IRQHandler+0x14>)
 800562a:	f7fb fd27 	bl	800107c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800562e:	bd10      	pop	{r4, pc}
 8005630:	200020bc 	.word	0x200020bc
 8005634:	20002118 	.word	0x20002118

08005638 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005638:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800563a:	4802      	ldr	r0, [pc, #8]	; (8005644 <ADC1_COMP_IRQHandler+0xc>)
 800563c:	f7fb f9a8 	bl	8000990 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005640:	bd10      	pop	{r4, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	200006b0 	.word	0x200006b0

08005648 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005648:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800564a:	4802      	ldr	r0, [pc, #8]	; (8005654 <TIM1_CC_IRQHandler+0xc>)
 800564c:	f7fd fad6 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005650:	bd10      	pop	{r4, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	2000203c 	.word	0x2000203c

08005658 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
 8005658:	b510      	push	{r4, lr}
 800565a:	f7ff fff5 	bl	8005648 <TIM1_CC_IRQHandler>
 800565e:	bd10      	pop	{r4, pc}

08005660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005660:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005662:	4802      	ldr	r0, [pc, #8]	; (800566c <TIM2_IRQHandler+0xc>)
 8005664:	f7fd faca 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005668:	bd10      	pop	{r4, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	2000207c 	.word	0x2000207c

08005670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005670:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005672:	4802      	ldr	r0, [pc, #8]	; (800567c <TIM3_IRQHandler+0xc>)
 8005674:	f7fd fac2 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005678:	bd10      	pop	{r4, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	20001ffc 	.word	0x20001ffc

08005680 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005680:	4806      	ldr	r0, [pc, #24]	; (800569c <I2C1_IRQHandler+0x1c>)
{
 8005682:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005684:	6803      	ldr	r3, [r0, #0]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	23e0      	movs	r3, #224	; 0xe0
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	421a      	tst	r2, r3
 800568e:	d002      	beq.n	8005696 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005690:	f7fc fc28 	bl	8001ee4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005694:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005696:	f7fc f845 	bl	8001724 <HAL_I2C_EV_IRQHandler>
}
 800569a:	e7fb      	b.n	8005694 <I2C1_IRQHandler+0x14>
 800569c:	20001ab8 	.word	0x20001ab8

080056a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80056a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80056a2:	4802      	ldr	r0, [pc, #8]	; (80056ac <USART2_IRQHandler+0xc>)
 80056a4:	f7fd fe86 	bl	80033b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	20002174 	.word	0x20002174

080056b0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <_sbrk+0x2c>)
{
 80056b2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80056b4:	6819      	ldr	r1, [r3, #0]
{
 80056b6:	0002      	movs	r2, r0
	if (heap_end == 0)
 80056b8:	2900      	cmp	r1, #0
 80056ba:	d101      	bne.n	80056c0 <_sbrk+0x10>
		heap_end = &end;
 80056bc:	4908      	ldr	r1, [pc, #32]	; (80056e0 <_sbrk+0x30>)
 80056be:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80056c0:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80056c2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80056c4:	1882      	adds	r2, r0, r2
 80056c6:	428a      	cmp	r2, r1
 80056c8:	d906      	bls.n	80056d8 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80056ca:	f000 fa09 	bl	8005ae0 <__errno>
 80056ce:	230c      	movs	r3, #12
 80056d0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80056d2:	2001      	movs	r0, #1
 80056d4:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80056d6:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80056d8:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80056da:	e7fc      	b.n	80056d6 <_sbrk+0x26>
 80056dc:	200006a0 	.word	0x200006a0
 80056e0:	20002204 	.word	0x20002204

080056e4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <SystemInit+0xc>)
 80056e8:	0512      	lsls	r2, r2, #20
 80056ea:	609a      	str	r2, [r3, #8]
#endif
}
 80056ec:	4770      	bx	lr
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80056f4:	b530      	push	{r4, r5, lr}
 80056f6:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056f8:	2210      	movs	r2, #16
 80056fa:	2100      	movs	r1, #0
 80056fc:	a803      	add	r0, sp, #12
 80056fe:	f000 fa2c 	bl	8005b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005702:	220c      	movs	r2, #12
 8005704:	2100      	movs	r1, #0
 8005706:	4668      	mov	r0, sp
 8005708:	f000 fa27 	bl	8005b5a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800570c:	2234      	movs	r2, #52	; 0x34
 800570e:	2100      	movs	r1, #0
 8005710:	a807      	add	r0, sp, #28
 8005712:	f000 fa22 	bl	8005b5a <memset>

  htim1.Instance = TIM1;
 8005716:	4c1b      	ldr	r4, [pc, #108]	; (8005784 <MX_TIM1_Init+0x90>)
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <MX_TIM1_Init+0x94>)
  htim1.Init.Prescaler = 31;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 100;
 800571a:	2264      	movs	r2, #100	; 0x64
  htim1.Instance = TIM1;
 800571c:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 31;
 800571e:	231f      	movs	r3, #31
 8005720:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005722:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005724:	0020      	movs	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005726:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 100;
 8005728:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800572a:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800572c:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800572e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005730:	f7fd fb68 	bl	8002e04 <HAL_TIM_Base_Init>
 8005734:	2800      	cmp	r0, #0
 8005736:	d001      	beq.n	800573c <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8005738:	f7ff f8c7 	bl	80048ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800573c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800573e:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005740:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005742:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005744:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005746:	f7fd fb85 	bl	8002e54 <HAL_TIM_ConfigClockSource>
 800574a:	2800      	cmp	r0, #0
 800574c:	d001      	beq.n	8005752 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800574e:	f7ff f8bc 	bl	80048ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005752:	2500      	movs	r5, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005754:	4669      	mov	r1, sp
 8005756:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005758:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800575a:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800575c:	9502      	str	r5, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800575e:	f7fd fc0f 	bl	8002f80 <HAL_TIMEx_MasterConfigSynchronization>
 8005762:	42a8      	cmp	r0, r5
 8005764:	d001      	beq.n	800576a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8005766:	f7ff f8b0 	bl	80048ca <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800576a:	a907      	add	r1, sp, #28
 800576c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800576e:	950e      	str	r5, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005770:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005772:	f7fd fc2f 	bl	8002fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005776:	2800      	cmp	r0, #0
 8005778:	d001      	beq.n	800577e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800577a:	f7ff f8a6 	bl	80048ca <Error_Handler>
  }

}
 800577e:	b015      	add	sp, #84	; 0x54
 8005780:	bd30      	pop	{r4, r5, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	2000203c 	.word	0x2000203c
 8005788:	40012c00 	.word	0x40012c00

0800578c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800578c:	b510      	push	{r4, lr}
 800578e:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005790:	2210      	movs	r2, #16
 8005792:	2100      	movs	r1, #0
 8005794:	a804      	add	r0, sp, #16
 8005796:	f000 f9e0 	bl	8005b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800579a:	220c      	movs	r2, #12
 800579c:	2100      	movs	r1, #0
 800579e:	a801      	add	r0, sp, #4
 80057a0:	f000 f9db 	bl	8005b5a <memset>

  htim2.Instance = TIM2;
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	4c15      	ldr	r4, [pc, #84]	; (80057fc <MX_TIM2_Init+0x70>)
 80057a8:	05db      	lsls	r3, r3, #23
 80057aa:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 319;
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	33ff      	adds	r3, #255	; 0xff
 80057b0:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b2:	2300      	movs	r3, #0
  htim2.Init.Period = 6600;
 80057b4:	4a12      	ldr	r2, [pc, #72]	; (8005800 <MX_TIM2_Init+0x74>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057b6:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b8:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 6600;
 80057ba:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057bc:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057be:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057c0:	f7fd fb20 	bl	8002e04 <HAL_TIM_Base_Init>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d001      	beq.n	80057cc <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 80057c8:	f7ff f87f 	bl	80048ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057cc:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057ce:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057d2:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057d6:	f7fd fb3d 	bl	8002e54 <HAL_TIM_ConfigClockSource>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d001      	beq.n	80057e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80057de:	f7ff f874 	bl	80048ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057e2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057e4:	a901      	add	r1, sp, #4
 80057e6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057e8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ea:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057ec:	f7fd fbc8 	bl	8002f80 <HAL_TIMEx_MasterConfigSynchronization>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d001      	beq.n	80057f8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80057f4:	f7ff f869 	bl	80048ca <Error_Handler>
  }

}
 80057f8:	b008      	add	sp, #32
 80057fa:	bd10      	pop	{r4, pc}
 80057fc:	2000207c 	.word	0x2000207c
 8005800:	000019c8 	.word	0x000019c8

08005804 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005804:	b510      	push	{r4, lr}
 8005806:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005808:	2210      	movs	r2, #16
 800580a:	2100      	movs	r1, #0
 800580c:	a804      	add	r0, sp, #16
 800580e:	f000 f9a4 	bl	8005b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005812:	220c      	movs	r2, #12
 8005814:	2100      	movs	r1, #0
 8005816:	a801      	add	r0, sp, #4
 8005818:	f000 f99f 	bl	8005b5a <memset>

  htim3.Instance = TIM3;
 800581c:	4c15      	ldr	r4, [pc, #84]	; (8005874 <MX_TIM3_Init+0x70>)
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <MX_TIM3_Init+0x74>)
  htim3.Init.Prescaler = 31999;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 8005820:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 8005822:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 31999;
 8005824:	4b15      	ldr	r3, [pc, #84]	; (800587c <MX_TIM3_Init+0x78>)
  htim3.Init.Period = 1000;
 8005826:	0092      	lsls	r2, r2, #2
  htim3.Init.Prescaler = 31999;
 8005828:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800582a:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800582c:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800582e:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 1000;
 8005830:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005832:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005834:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005836:	f7fd fae5 	bl	8002e04 <HAL_TIM_Base_Init>
 800583a:	2800      	cmp	r0, #0
 800583c:	d001      	beq.n	8005842 <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 800583e:	f7ff f844 	bl	80048ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005842:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005844:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005846:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005848:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800584a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800584c:	f7fd fb02 	bl	8002e54 <HAL_TIM_ConfigClockSource>
 8005850:	2800      	cmp	r0, #0
 8005852:	d001      	beq.n	8005858 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005854:	f7ff f839 	bl	80048ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005858:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800585a:	a901      	add	r1, sp, #4
 800585c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800585e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005860:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005862:	f7fd fb8d 	bl	8002f80 <HAL_TIMEx_MasterConfigSynchronization>
 8005866:	2800      	cmp	r0, #0
 8005868:	d001      	beq.n	800586e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800586a:	f7ff f82e 	bl	80048ca <Error_Handler>
  }

}
 800586e:	b008      	add	sp, #32
 8005870:	bd10      	pop	{r4, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	20001ffc 	.word	0x20001ffc
 8005878:	40000400 	.word	0x40000400
 800587c:	00007cff 	.word	0x00007cff

08005880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005880:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_TIM_Base_MspInit+0x90>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d11b      	bne.n	80058c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800588a:	2080      	movs	r0, #128	; 0x80
 800588c:	4a21      	ldr	r2, [pc, #132]	; (8005914 <HAL_TIM_Base_MspInit+0x94>)
 800588e:	0100      	lsls	r0, r0, #4
 8005890:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005892:	4301      	orrs	r1, r0
 8005894:	6411      	str	r1, [r2, #64]	; 0x40
 8005896:	6c13      	ldr	r3, [r2, #64]	; 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8005898:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800589a:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800589c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800589e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80058a0:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80058a4:	f7fb fa42 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80058a8:	200d      	movs	r0, #13
 80058aa:	f7fb fa6f 	bl	8000d8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80058ae:	2200      	movs	r2, #0
 80058b0:	200e      	movs	r0, #14
 80058b2:	0011      	movs	r1, r2
 80058b4:	f7fb fa3a 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80058b8:	200e      	movs	r0, #14
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80058ba:	f7fb fa67 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80058be:	b005      	add	sp, #20
 80058c0:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM2)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	05d2      	lsls	r2, r2, #23
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10f      	bne.n	80058ea <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058ca:	2001      	movs	r0, #1
 80058cc:	4a11      	ldr	r2, [pc, #68]	; (8005914 <HAL_TIM_Base_MspInit+0x94>)
 80058ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058d0:	4301      	orrs	r1, r0
 80058d2:	63d1      	str	r1, [r2, #60]	; 0x3c
 80058d4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80058d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058d8:	4003      	ands	r3, r0
 80058da:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80058dc:	300e      	adds	r0, #14
 80058de:	0011      	movs	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058e0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80058e2:	f7fb fa23 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058e6:	200f      	movs	r0, #15
 80058e8:	e7e7      	b.n	80058ba <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM3)
 80058ea:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <HAL_TIM_Base_MspInit+0x98>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d1e6      	bne.n	80058be <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058f0:	2002      	movs	r0, #2
 80058f2:	4a08      	ldr	r2, [pc, #32]	; (8005914 <HAL_TIM_Base_MspInit+0x94>)
 80058f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058f6:	4301      	orrs	r1, r0
 80058f8:	63d1      	str	r1, [r2, #60]	; 0x3c
 80058fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80058fc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058fe:	4003      	ands	r3, r0
 8005900:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005902:	300e      	adds	r0, #14
 8005904:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005906:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005908:	f7fb fa10 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800590c:	2010      	movs	r0, #16
 800590e:	e7d4      	b.n	80058ba <HAL_TIM_Base_MspInit+0x3a>
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40021000 	.word	0x40021000
 8005918:	40000400 	.word	0x40000400

0800591c <MX_UCPD1_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800591c:	2080      	movs	r0, #128	; 0x80
 800591e:	4a06      	ldr	r2, [pc, #24]	; (8005938 <MX_UCPD1_Init+0x1c>)
 8005920:	0480      	lsls	r0, r0, #18
 8005922:	6bd1      	ldr	r1, [r2, #60]	; 0x3c

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8005924:	b082      	sub	sp, #8
 8005926:	4301      	orrs	r1, r0
 8005928:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800592a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800592c:	4003      	ands	r3, r0
 800592e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005930:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);

}
 8005932:	b002      	add	sp, #8
 8005934:	4770      	bx	lr
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	40021000 	.word	0x40021000

0800593c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800593c:	b510      	push	{r4, lr}

  huart2.Instance = USART2;
 800593e:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <MX_USART2_UART_Init+0x64>)
 8005940:	4c18      	ldr	r4, [pc, #96]	; (80059a4 <MX_USART2_UART_Init+0x68>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005942:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8005944:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8005946:	23e1      	movs	r3, #225	; 0xe1
 8005948:	025b      	lsls	r3, r3, #9
 800594a:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800594c:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800594e:	0020      	movs	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005950:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005952:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005954:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005956:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005958:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800595a:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800595c:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800595e:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005960:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005962:	f7fe fae7 	bl	8003f34 <HAL_UART_Init>
 8005966:	2800      	cmp	r0, #0
 8005968:	d001      	beq.n	800596e <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
 800596a:	f7fe ffae 	bl	80048ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800596e:	2100      	movs	r1, #0
 8005970:	0020      	movs	r0, r4
 8005972:	f7fe fb71 	bl	8004058 <HAL_UARTEx_SetTxFifoThreshold>
 8005976:	2800      	cmp	r0, #0
 8005978:	d001      	beq.n	800597e <MX_USART2_UART_Init+0x42>
  {
    Error_Handler();
 800597a:	f7fe ffa6 	bl	80048ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800597e:	2100      	movs	r1, #0
 8005980:	0020      	movs	r0, r4
 8005982:	f7fe fb8b 	bl	800409c <HAL_UARTEx_SetRxFifoThreshold>
 8005986:	2800      	cmp	r0, #0
 8005988:	d001      	beq.n	800598e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800598a:	f7fe ff9e 	bl	80048ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800598e:	0020      	movs	r0, r4
 8005990:	f7fe fb46 	bl	8004020 <HAL_UARTEx_DisableFifoMode>
 8005994:	2800      	cmp	r0, #0
 8005996:	d001      	beq.n	800599c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005998:	f7fe ff97 	bl	80048ca <Error_Handler>
  }

}
 800599c:	bd10      	pop	{r4, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	40004400 	.word	0x40004400
 80059a4:	20002174 	.word	0x20002174

080059a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059a8:	b530      	push	{r4, r5, lr}
 80059aa:	0005      	movs	r5, r0
 80059ac:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ae:	2214      	movs	r2, #20
 80059b0:	2100      	movs	r1, #0
 80059b2:	a803      	add	r0, sp, #12
 80059b4:	f000 f8d1 	bl	8005b5a <memset>
  if(uartHandle->Instance==USART2)
 80059b8:	4b2e      	ldr	r3, [pc, #184]	; (8005a74 <HAL_UART_MspInit+0xcc>)
 80059ba:	682a      	ldr	r2, [r5, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d156      	bne.n	8005a6e <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80059c0:	2080      	movs	r0, #128	; 0x80
 80059c2:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <HAL_UART_MspInit+0xd0>)
 80059c4:	0280      	lsls	r0, r0, #10
 80059c6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80059c8:	4301      	orrs	r1, r0
 80059ca:	63d9      	str	r1, [r3, #60]	; 0x3c
 80059cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ce:	4002      	ands	r2, r0
 80059d0:	9201      	str	r2, [sp, #4]
 80059d2:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d4:	2201      	movs	r2, #1
 80059d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059da:	4311      	orrs	r1, r2
 80059dc:	6359      	str	r1, [r3, #52]	; 0x34
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e2:	4013      	ands	r3, r2
 80059e4:	9302      	str	r3, [sp, #8]
 80059e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80059e8:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ea:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80059ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	3b0a      	subs	r3, #10
 80059f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80059f2:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f4:	f7fb fb9c 	bl	8001130 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80059f8:	4c20      	ldr	r4, [pc, #128]	; (8005a7c <HAL_UART_MspInit+0xd4>)
 80059fa:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <HAL_UART_MspInit+0xd8>)
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059fc:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80059fe:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005a00:	2334      	movs	r3, #52	; 0x34
 8005a02:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a08:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a0a:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a0c:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005a0e:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a10:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005a12:	0020      	movs	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a14:	015b      	lsls	r3, r3, #5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a16:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a18:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005a1a:	f7fb fa17 	bl	8000e4c <HAL_DMA_Init>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8005a22:	f7fe ff52 	bl	80048ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <HAL_UART_MspInit+0xdc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005a28:	67ac      	str	r4, [r5, #120]	; 0x78
 8005a2a:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005a2c:	4c16      	ldr	r4, [pc, #88]	; (8005a88 <HAL_UART_MspInit+0xe0>)
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a2e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005a30:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005a32:	2335      	movs	r3, #53	; 0x35
 8005a34:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a36:	3b25      	subs	r3, #37	; 0x25
 8005a38:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a3e:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a40:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005a42:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a44:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a46:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a48:	019b      	lsls	r3, r3, #6
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a4a:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a4c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a4e:	f7fb f9fd 	bl	8000e4c <HAL_DMA_Init>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8005a56:	f7fe ff38 	bl	80048ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	201c      	movs	r0, #28
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005a5e:	676c      	str	r4, [r5, #116]	; 0x74
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a60:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005a62:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a64:	f7fb f962 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a68:	201c      	movs	r0, #28
 8005a6a:	f7fb f98f 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005a6e:	b009      	add	sp, #36	; 0x24
 8005a70:	bd30      	pop	{r4, r5, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	200020bc 	.word	0x200020bc
 8005a80:	4002001c 	.word	0x4002001c
 8005a84:	40020030 	.word	0x40020030
 8005a88:	20002118 	.word	0x20002118

08005a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a8c:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a92:	e003      	b.n	8005a9c <LoopCopyDataInit>

08005a94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005a96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a9a:	3104      	adds	r1, #4

08005a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a9c:	480b      	ldr	r0, [pc, #44]	; (8005acc <LoopForever+0xa>)
  ldr r3, =_edata
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <LoopForever+0xe>)
  adds r2, r0, r1
 8005aa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005aa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005aa4:	d3f6      	bcc.n	8005a94 <CopyDataInit>
  ldr r2, =_sbss
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <LoopForever+0x12>)
  b LoopFillZerobss
 8005aa8:	e002      	b.n	8005ab0 <LoopFillZerobss>

08005aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005aaa:	2300      	movs	r3, #0
  str  r3, [r2]
 8005aac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005aae:	3204      	adds	r2, #4

08005ab0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <LoopForever+0x16>)
  cmp r2, r3
 8005ab2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ab4:	d3f9      	bcc.n	8005aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005ab6:	f7ff fe15 	bl	80056e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005aba:	f000 f817 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005abe:	f7fe fe3f 	bl	8004740 <main>

08005ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8005ac2:	e7fe      	b.n	8005ac2 <LoopForever>
  ldr   r0, =_estack
 8005ac4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8005ac8:	08007bf4 	.word	0x08007bf4
  ldr r0, =_sdata
 8005acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005ad0:	20000268 	.word	0x20000268
  ldr r2, =_sbss
 8005ad4:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 8005ad8:	20002204 	.word	0x20002204

08005adc <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005adc:	e7fe      	b.n	8005adc <CEC_IRQHandler>
	...

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	; (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	20000204 	.word	0x20000204

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	2600      	movs	r6, #0
 8005af0:	4d0c      	ldr	r5, [pc, #48]	; (8005b24 <__libc_init_array+0x38>)
 8005af2:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af4:	1b64      	subs	r4, r4, r5
 8005af6:	10a4      	asrs	r4, r4, #2
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	2600      	movs	r6, #0
 8005afe:	f000 fc6d 	bl	80063dc <_init>
 8005b02:	4d0a      	ldr	r5, [pc, #40]	; (8005b2c <__libc_init_array+0x40>)
 8005b04:	4c0a      	ldr	r4, [pc, #40]	; (8005b30 <__libc_init_array+0x44>)
 8005b06:	1b64      	subs	r4, r4, r5
 8005b08:	10a4      	asrs	r4, r4, #2
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	00b3      	lsls	r3, r6, #2
 8005b12:	58eb      	ldr	r3, [r5, r3]
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	00b3      	lsls	r3, r6, #2
 8005b1c:	58eb      	ldr	r3, [r5, r3]
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08007bec 	.word	0x08007bec
 8005b28:	08007bec 	.word	0x08007bec
 8005b2c:	08007bec 	.word	0x08007bec
 8005b30:	08007bf0 	.word	0x08007bf0

08005b34 <malloc>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <malloc+0x10>)
 8005b38:	0001      	movs	r1, r0
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	f000 f860 	bl	8005c00 <_malloc_r>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	20000204 	.word	0x20000204

08005b48 <memcpy>:
 8005b48:	2300      	movs	r3, #0
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d100      	bne.n	8005b52 <memcpy+0xa>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	5ccc      	ldrb	r4, [r1, r3]
 8005b54:	54c4      	strb	r4, [r0, r3]
 8005b56:	3301      	adds	r3, #1
 8005b58:	e7f8      	b.n	8005b4c <memcpy+0x4>

08005b5a <memset>:
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	1882      	adds	r2, r0, r2
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d100      	bne.n	8005b64 <memset+0xa>
 8005b62:	4770      	bx	lr
 8005b64:	7019      	strb	r1, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	e7f9      	b.n	8005b5e <memset+0x4>
	...

08005b6c <_free_r>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	0005      	movs	r5, r0
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d010      	beq.n	8005b96 <_free_r+0x2a>
 8005b74:	1f0c      	subs	r4, r1, #4
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da00      	bge.n	8005b7e <_free_r+0x12>
 8005b7c:	18e4      	adds	r4, r4, r3
 8005b7e:	0028      	movs	r0, r5
 8005b80:	f000 f8f0 	bl	8005d64 <__malloc_lock>
 8005b84:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <_free_r+0x90>)
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <_free_r+0x2c>
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	6014      	str	r4, [r2, #0]
 8005b90:	0028      	movs	r0, r5
 8005b92:	f000 f8e8 	bl	8005d66 <__malloc_unlock>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d909      	bls.n	8005bb0 <_free_r+0x44>
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	1860      	adds	r0, r4, r1
 8005ba0:	4283      	cmp	r3, r0
 8005ba2:	d1f3      	bne.n	8005b8c <_free_r+0x20>
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	1841      	adds	r1, r0, r1
 8005baa:	6021      	str	r1, [r4, #0]
 8005bac:	e7ee      	b.n	8005b8c <_free_r+0x20>
 8005bae:	0013      	movs	r3, r2
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	d001      	beq.n	8005bba <_free_r+0x4e>
 8005bb6:	42a2      	cmp	r2, r4
 8005bb8:	d9f9      	bls.n	8005bae <_free_r+0x42>
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	1858      	adds	r0, r3, r1
 8005bbe:	42a0      	cmp	r0, r4
 8005bc0:	d10b      	bne.n	8005bda <_free_r+0x6e>
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	1809      	adds	r1, r1, r0
 8005bc6:	1858      	adds	r0, r3, r1
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	4282      	cmp	r2, r0
 8005bcc:	d1e0      	bne.n	8005b90 <_free_r+0x24>
 8005bce:	6810      	ldr	r0, [r2, #0]
 8005bd0:	6852      	ldr	r2, [r2, #4]
 8005bd2:	1841      	adds	r1, r0, r1
 8005bd4:	6019      	str	r1, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e7da      	b.n	8005b90 <_free_r+0x24>
 8005bda:	42a0      	cmp	r0, r4
 8005bdc:	d902      	bls.n	8005be4 <_free_r+0x78>
 8005bde:	230c      	movs	r3, #12
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	e7d5      	b.n	8005b90 <_free_r+0x24>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	1860      	adds	r0, r4, r1
 8005be8:	4282      	cmp	r2, r0
 8005bea:	d103      	bne.n	8005bf4 <_free_r+0x88>
 8005bec:	6810      	ldr	r0, [r2, #0]
 8005bee:	6852      	ldr	r2, [r2, #4]
 8005bf0:	1841      	adds	r1, r0, r1
 8005bf2:	6021      	str	r1, [r4, #0]
 8005bf4:	6062      	str	r2, [r4, #4]
 8005bf6:	605c      	str	r4, [r3, #4]
 8005bf8:	e7ca      	b.n	8005b90 <_free_r+0x24>
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	200006a4 	.word	0x200006a4

08005c00 <_malloc_r>:
 8005c00:	2303      	movs	r3, #3
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	1ccd      	adds	r5, r1, #3
 8005c06:	439d      	bics	r5, r3
 8005c08:	3508      	adds	r5, #8
 8005c0a:	0006      	movs	r6, r0
 8005c0c:	2d0c      	cmp	r5, #12
 8005c0e:	d21e      	bcs.n	8005c4e <_malloc_r+0x4e>
 8005c10:	250c      	movs	r5, #12
 8005c12:	42a9      	cmp	r1, r5
 8005c14:	d81d      	bhi.n	8005c52 <_malloc_r+0x52>
 8005c16:	0030      	movs	r0, r6
 8005c18:	f000 f8a4 	bl	8005d64 <__malloc_lock>
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <_malloc_r+0xb4>)
 8005c1e:	6814      	ldr	r4, [r2, #0]
 8005c20:	0021      	movs	r1, r4
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d119      	bne.n	8005c5a <_malloc_r+0x5a>
 8005c26:	4c24      	ldr	r4, [pc, #144]	; (8005cb8 <_malloc_r+0xb8>)
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <_malloc_r+0x36>
 8005c2e:	0030      	movs	r0, r6
 8005c30:	f000 f844 	bl	8005cbc <_sbrk_r>
 8005c34:	6020      	str	r0, [r4, #0]
 8005c36:	0029      	movs	r1, r5
 8005c38:	0030      	movs	r0, r6
 8005c3a:	f000 f83f 	bl	8005cbc <_sbrk_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d12c      	bne.n	8005c9c <_malloc_r+0x9c>
 8005c42:	230c      	movs	r3, #12
 8005c44:	0030      	movs	r0, r6
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	f000 f88d 	bl	8005d66 <__malloc_unlock>
 8005c4c:	e003      	b.n	8005c56 <_malloc_r+0x56>
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	dadf      	bge.n	8005c12 <_malloc_r+0x12>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	2000      	movs	r0, #0
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
 8005c5a:	680b      	ldr	r3, [r1, #0]
 8005c5c:	1b5b      	subs	r3, r3, r5
 8005c5e:	d41a      	bmi.n	8005c96 <_malloc_r+0x96>
 8005c60:	2b0b      	cmp	r3, #11
 8005c62:	d903      	bls.n	8005c6c <_malloc_r+0x6c>
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	18cc      	adds	r4, r1, r3
 8005c68:	6025      	str	r5, [r4, #0]
 8005c6a:	e003      	b.n	8005c74 <_malloc_r+0x74>
 8005c6c:	428c      	cmp	r4, r1
 8005c6e:	d10e      	bne.n	8005c8e <_malloc_r+0x8e>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	0030      	movs	r0, r6
 8005c76:	f000 f876 	bl	8005d66 <__malloc_unlock>
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	2207      	movs	r2, #7
 8005c7e:	300b      	adds	r0, #11
 8005c80:	1d23      	adds	r3, r4, #4
 8005c82:	4390      	bics	r0, r2
 8005c84:	1ac3      	subs	r3, r0, r3
 8005c86:	d0e7      	beq.n	8005c58 <_malloc_r+0x58>
 8005c88:	425a      	negs	r2, r3
 8005c8a:	50e2      	str	r2, [r4, r3]
 8005c8c:	e7e4      	b.n	8005c58 <_malloc_r+0x58>
 8005c8e:	684b      	ldr	r3, [r1, #4]
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	000c      	movs	r4, r1
 8005c94:	e7ee      	b.n	8005c74 <_malloc_r+0x74>
 8005c96:	000c      	movs	r4, r1
 8005c98:	6849      	ldr	r1, [r1, #4]
 8005c9a:	e7c2      	b.n	8005c22 <_malloc_r+0x22>
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	439c      	bics	r4, r3
 8005ca2:	42a0      	cmp	r0, r4
 8005ca4:	d0e0      	beq.n	8005c68 <_malloc_r+0x68>
 8005ca6:	1a21      	subs	r1, r4, r0
 8005ca8:	0030      	movs	r0, r6
 8005caa:	f000 f807 	bl	8005cbc <_sbrk_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d1da      	bne.n	8005c68 <_malloc_r+0x68>
 8005cb2:	e7c6      	b.n	8005c42 <_malloc_r+0x42>
 8005cb4:	200006a4 	.word	0x200006a4
 8005cb8:	200006a8 	.word	0x200006a8

08005cbc <_sbrk_r>:
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	4c06      	ldr	r4, [pc, #24]	; (8005cdc <_sbrk_r+0x20>)
 8005cc2:	0005      	movs	r5, r0
 8005cc4:	0008      	movs	r0, r1
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	f7ff fcf2 	bl	80056b0 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d103      	bne.n	8005cd8 <_sbrk_r+0x1c>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d000      	beq.n	8005cd8 <_sbrk_r+0x1c>
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	20002200 	.word	0x20002200

08005ce0 <siprintf>:
 8005ce0:	b40e      	push	{r1, r2, r3}
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	b09d      	sub	sp, #116	; 0x74
 8005ce6:	a902      	add	r1, sp, #8
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	6108      	str	r0, [r1, #16]
 8005cec:	480b      	ldr	r0, [pc, #44]	; (8005d1c <siprintf+0x3c>)
 8005cee:	2482      	movs	r4, #130	; 0x82
 8005cf0:	6088      	str	r0, [r1, #8]
 8005cf2:	6148      	str	r0, [r1, #20]
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	4240      	negs	r0, r0
 8005cf8:	ab1f      	add	r3, sp, #124	; 0x7c
 8005cfa:	81c8      	strh	r0, [r1, #14]
 8005cfc:	4808      	ldr	r0, [pc, #32]	; (8005d20 <siprintf+0x40>)
 8005cfe:	cb04      	ldmia	r3!, {r2}
 8005d00:	00a4      	lsls	r4, r4, #2
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	818c      	strh	r4, [r1, #12]
 8005d08:	f000 f890 	bl	8005e2c <_svfiprintf_r>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9a02      	ldr	r2, [sp, #8]
 8005d10:	7013      	strb	r3, [r2, #0]
 8005d12:	b01d      	add	sp, #116	; 0x74
 8005d14:	bc10      	pop	{r4}
 8005d16:	bc08      	pop	{r3}
 8005d18:	b003      	add	sp, #12
 8005d1a:	4718      	bx	r3
 8005d1c:	7fffffff 	.word	0x7fffffff
 8005d20:	20000204 	.word	0x20000204

08005d24 <strcpy>:
 8005d24:	1c03      	adds	r3, r0, #0
 8005d26:	780a      	ldrb	r2, [r1, #0]
 8005d28:	3101      	adds	r1, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d1f9      	bne.n	8005d26 <strcpy+0x2>
 8005d32:	4770      	bx	lr

08005d34 <strstr>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	0002      	movs	r2, r0
 8005d38:	7800      	ldrb	r0, [r0, #0]
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d104      	bne.n	8005d48 <strstr+0x14>
 8005d3e:	7809      	ldrb	r1, [r1, #0]
 8005d40:	2900      	cmp	r1, #0
 8005d42:	d00d      	beq.n	8005d60 <strstr+0x2c>
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	3201      	adds	r2, #1
 8005d48:	7810      	ldrb	r0, [r2, #0]
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0fa      	beq.n	8005d44 <strstr+0x10>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	5cc8      	ldrb	r0, [r1, r3]
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d004      	beq.n	8005d60 <strstr+0x2c>
 8005d56:	5cd4      	ldrb	r4, [r2, r3]
 8005d58:	4284      	cmp	r4, r0
 8005d5a:	d1f4      	bne.n	8005d46 <strstr+0x12>
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	e7f7      	b.n	8005d50 <strstr+0x1c>
 8005d60:	0010      	movs	r0, r2
 8005d62:	e7ef      	b.n	8005d44 <strstr+0x10>

08005d64 <__malloc_lock>:
 8005d64:	4770      	bx	lr

08005d66 <__malloc_unlock>:
 8005d66:	4770      	bx	lr

08005d68 <__ssputs_r>:
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	688e      	ldr	r6, [r1, #8]
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	0007      	movs	r7, r0
 8005d70:	000c      	movs	r4, r1
 8005d72:	9203      	str	r2, [sp, #12]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	429e      	cmp	r6, r3
 8005d78:	d839      	bhi.n	8005dee <__ssputs_r+0x86>
 8005d7a:	2390      	movs	r3, #144	; 0x90
 8005d7c:	898a      	ldrh	r2, [r1, #12]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	421a      	tst	r2, r3
 8005d82:	d034      	beq.n	8005dee <__ssputs_r+0x86>
 8005d84:	2503      	movs	r5, #3
 8005d86:	6909      	ldr	r1, [r1, #16]
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	9302      	str	r3, [sp, #8]
 8005d8e:	6963      	ldr	r3, [r4, #20]
 8005d90:	9802      	ldr	r0, [sp, #8]
 8005d92:	435d      	muls	r5, r3
 8005d94:	0feb      	lsrs	r3, r5, #31
 8005d96:	195d      	adds	r5, r3, r5
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	106d      	asrs	r5, r5, #1
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	181b      	adds	r3, r3, r0
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	d900      	bls.n	8005da6 <__ssputs_r+0x3e>
 8005da4:	001d      	movs	r5, r3
 8005da6:	0553      	lsls	r3, r2, #21
 8005da8:	d532      	bpl.n	8005e10 <__ssputs_r+0xa8>
 8005daa:	0029      	movs	r1, r5
 8005dac:	0038      	movs	r0, r7
 8005dae:	f7ff ff27 	bl	8005c00 <_malloc_r>
 8005db2:	1e06      	subs	r6, r0, #0
 8005db4:	d109      	bne.n	8005dca <__ssputs_r+0x62>
 8005db6:	230c      	movs	r3, #12
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	89a2      	ldrh	r2, [r4, #12]
 8005dc0:	4240      	negs	r0, r0
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	b005      	add	sp, #20
 8005dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dca:	9a02      	ldr	r2, [sp, #8]
 8005dcc:	6921      	ldr	r1, [r4, #16]
 8005dce:	f7ff febb 	bl	8005b48 <memcpy>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <__ssputs_r+0xc0>)
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	6126      	str	r6, [r4, #16]
 8005de2:	18f6      	adds	r6, r6, r3
 8005de4:	6026      	str	r6, [r4, #0]
 8005de6:	6165      	str	r5, [r4, #20]
 8005de8:	9e01      	ldr	r6, [sp, #4]
 8005dea:	1aed      	subs	r5, r5, r3
 8005dec:	60a5      	str	r5, [r4, #8]
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	42b3      	cmp	r3, r6
 8005df2:	d200      	bcs.n	8005df6 <__ssputs_r+0x8e>
 8005df4:	001e      	movs	r6, r3
 8005df6:	0032      	movs	r2, r6
 8005df8:	9903      	ldr	r1, [sp, #12]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	f000 faad 	bl	800635a <memmove>
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	2000      	movs	r0, #0
 8005e04:	1b9b      	subs	r3, r3, r6
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	199e      	adds	r6, r3, r6
 8005e0c:	6026      	str	r6, [r4, #0]
 8005e0e:	e7da      	b.n	8005dc6 <__ssputs_r+0x5e>
 8005e10:	002a      	movs	r2, r5
 8005e12:	0038      	movs	r0, r7
 8005e14:	f000 fab3 	bl	800637e <_realloc_r>
 8005e18:	1e06      	subs	r6, r0, #0
 8005e1a:	d1e0      	bne.n	8005dde <__ssputs_r+0x76>
 8005e1c:	6921      	ldr	r1, [r4, #16]
 8005e1e:	0038      	movs	r0, r7
 8005e20:	f7ff fea4 	bl	8005b6c <_free_r>
 8005e24:	e7c7      	b.n	8005db6 <__ssputs_r+0x4e>
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	fffffb7f 	.word	0xfffffb7f

08005e2c <_svfiprintf_r>:
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2e:	b09f      	sub	sp, #124	; 0x7c
 8005e30:	9002      	str	r0, [sp, #8]
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	898b      	ldrh	r3, [r1, #12]
 8005e36:	000f      	movs	r7, r1
 8005e38:	0016      	movs	r6, r2
 8005e3a:	061b      	lsls	r3, r3, #24
 8005e3c:	d511      	bpl.n	8005e62 <_svfiprintf_r+0x36>
 8005e3e:	690b      	ldr	r3, [r1, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10e      	bne.n	8005e62 <_svfiprintf_r+0x36>
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	f7ff fedb 	bl	8005c00 <_malloc_r>
 8005e4a:	6038      	str	r0, [r7, #0]
 8005e4c:	6138      	str	r0, [r7, #16]
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d105      	bne.n	8005e5e <_svfiprintf_r+0x32>
 8005e52:	230c      	movs	r3, #12
 8005e54:	9a02      	ldr	r2, [sp, #8]
 8005e56:	3801      	subs	r0, #1
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	b01f      	add	sp, #124	; 0x7c
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	2300      	movs	r3, #0
 8005e64:	ad06      	add	r5, sp, #24
 8005e66:	616b      	str	r3, [r5, #20]
 8005e68:	3320      	adds	r3, #32
 8005e6a:	766b      	strb	r3, [r5, #25]
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	76ab      	strb	r3, [r5, #26]
 8005e70:	0034      	movs	r4, r6
 8005e72:	7823      	ldrb	r3, [r4, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d147      	bne.n	8005f08 <_svfiprintf_r+0xdc>
 8005e78:	1ba3      	subs	r3, r4, r6
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	d00d      	beq.n	8005e9a <_svfiprintf_r+0x6e>
 8005e7e:	1ba3      	subs	r3, r4, r6
 8005e80:	0032      	movs	r2, r6
 8005e82:	0039      	movs	r1, r7
 8005e84:	9802      	ldr	r0, [sp, #8]
 8005e86:	f7ff ff6f 	bl	8005d68 <__ssputs_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d100      	bne.n	8005e90 <_svfiprintf_r+0x64>
 8005e8e:	e0b5      	b.n	8005ffc <_svfiprintf_r+0x1d0>
 8005e90:	696a      	ldr	r2, [r5, #20]
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	616b      	str	r3, [r5, #20]
 8005e9a:	7823      	ldrb	r3, [r4, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d100      	bne.n	8005ea2 <_svfiprintf_r+0x76>
 8005ea0:	e0ac      	b.n	8005ffc <_svfiprintf_r+0x1d0>
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4252      	negs	r2, r2
 8005ea8:	606a      	str	r2, [r5, #4]
 8005eaa:	a902      	add	r1, sp, #8
 8005eac:	3254      	adds	r2, #84	; 0x54
 8005eae:	1852      	adds	r2, r2, r1
 8005eb0:	3401      	adds	r4, #1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	60eb      	str	r3, [r5, #12]
 8005eb6:	60ab      	str	r3, [r5, #8]
 8005eb8:	7013      	strb	r3, [r2, #0]
 8005eba:	65ab      	str	r3, [r5, #88]	; 0x58
 8005ebc:	4e58      	ldr	r6, [pc, #352]	; (8006020 <_svfiprintf_r+0x1f4>)
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	7821      	ldrb	r1, [r4, #0]
 8005ec2:	0030      	movs	r0, r6
 8005ec4:	f000 fa3e 	bl	8006344 <memchr>
 8005ec8:	1c62      	adds	r2, r4, #1
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d120      	bne.n	8005f10 <_svfiprintf_r+0xe4>
 8005ece:	6829      	ldr	r1, [r5, #0]
 8005ed0:	06cb      	lsls	r3, r1, #27
 8005ed2:	d504      	bpl.n	8005ede <_svfiprintf_r+0xb2>
 8005ed4:	2353      	movs	r3, #83	; 0x53
 8005ed6:	ae02      	add	r6, sp, #8
 8005ed8:	3020      	adds	r0, #32
 8005eda:	199b      	adds	r3, r3, r6
 8005edc:	7018      	strb	r0, [r3, #0]
 8005ede:	070b      	lsls	r3, r1, #28
 8005ee0:	d504      	bpl.n	8005eec <_svfiprintf_r+0xc0>
 8005ee2:	2353      	movs	r3, #83	; 0x53
 8005ee4:	202b      	movs	r0, #43	; 0x2b
 8005ee6:	ae02      	add	r6, sp, #8
 8005ee8:	199b      	adds	r3, r3, r6
 8005eea:	7018      	strb	r0, [r3, #0]
 8005eec:	7823      	ldrb	r3, [r4, #0]
 8005eee:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef0:	d016      	beq.n	8005f20 <_svfiprintf_r+0xf4>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	210a      	movs	r1, #10
 8005ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef8:	7822      	ldrb	r2, [r4, #0]
 8005efa:	3a30      	subs	r2, #48	; 0x30
 8005efc:	2a09      	cmp	r2, #9
 8005efe:	d955      	bls.n	8005fac <_svfiprintf_r+0x180>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d015      	beq.n	8005f30 <_svfiprintf_r+0x104>
 8005f04:	9309      	str	r3, [sp, #36]	; 0x24
 8005f06:	e013      	b.n	8005f30 <_svfiprintf_r+0x104>
 8005f08:	2b25      	cmp	r3, #37	; 0x25
 8005f0a:	d0b5      	beq.n	8005e78 <_svfiprintf_r+0x4c>
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	e7b0      	b.n	8005e72 <_svfiprintf_r+0x46>
 8005f10:	2301      	movs	r3, #1
 8005f12:	1b80      	subs	r0, r0, r6
 8005f14:	4083      	lsls	r3, r0
 8005f16:	6829      	ldr	r1, [r5, #0]
 8005f18:	0014      	movs	r4, r2
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	e7cd      	b.n	8005ebc <_svfiprintf_r+0x90>
 8005f20:	9b05      	ldr	r3, [sp, #20]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	9005      	str	r0, [sp, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	db39      	blt.n	8005fa0 <_svfiprintf_r+0x174>
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	0014      	movs	r4, r2
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	2b2e      	cmp	r3, #46	; 0x2e
 8005f34:	d10b      	bne.n	8005f4e <_svfiprintf_r+0x122>
 8005f36:	7863      	ldrb	r3, [r4, #1]
 8005f38:	1c62      	adds	r2, r4, #1
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	d13e      	bne.n	8005fbc <_svfiprintf_r+0x190>
 8005f3e:	9b05      	ldr	r3, [sp, #20]
 8005f40:	3402      	adds	r4, #2
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9205      	str	r2, [sp, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db34      	blt.n	8005fb6 <_svfiprintf_r+0x18a>
 8005f4c:	9307      	str	r3, [sp, #28]
 8005f4e:	4e35      	ldr	r6, [pc, #212]	; (8006024 <_svfiprintf_r+0x1f8>)
 8005f50:	7821      	ldrb	r1, [r4, #0]
 8005f52:	2203      	movs	r2, #3
 8005f54:	0030      	movs	r0, r6
 8005f56:	f000 f9f5 	bl	8006344 <memchr>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d006      	beq.n	8005f6c <_svfiprintf_r+0x140>
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	1b80      	subs	r0, r0, r6
 8005f62:	4083      	lsls	r3, r0
 8005f64:	682a      	ldr	r2, [r5, #0]
 8005f66:	3401      	adds	r4, #1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	7821      	ldrb	r1, [r4, #0]
 8005f6e:	2206      	movs	r2, #6
 8005f70:	482d      	ldr	r0, [pc, #180]	; (8006028 <_svfiprintf_r+0x1fc>)
 8005f72:	1c66      	adds	r6, r4, #1
 8005f74:	7629      	strb	r1, [r5, #24]
 8005f76:	f000 f9e5 	bl	8006344 <memchr>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d046      	beq.n	800600c <_svfiprintf_r+0x1e0>
 8005f7e:	4b2b      	ldr	r3, [pc, #172]	; (800602c <_svfiprintf_r+0x200>)
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d12f      	bne.n	8005fe4 <_svfiprintf_r+0x1b8>
 8005f84:	6829      	ldr	r1, [r5, #0]
 8005f86:	9b05      	ldr	r3, [sp, #20]
 8005f88:	2207      	movs	r2, #7
 8005f8a:	05c9      	lsls	r1, r1, #23
 8005f8c:	d528      	bpl.n	8005fe0 <_svfiprintf_r+0x1b4>
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	4393      	bics	r3, r2
 8005f92:	3308      	adds	r3, #8
 8005f94:	9305      	str	r3, [sp, #20]
 8005f96:	696b      	ldr	r3, [r5, #20]
 8005f98:	9a03      	ldr	r2, [sp, #12]
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	616b      	str	r3, [r5, #20]
 8005f9e:	e767      	b.n	8005e70 <_svfiprintf_r+0x44>
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	60eb      	str	r3, [r5, #12]
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	e7c0      	b.n	8005f2e <_svfiprintf_r+0x102>
 8005fac:	434b      	muls	r3, r1
 8005fae:	3401      	adds	r4, #1
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	e7a0      	b.n	8005ef8 <_svfiprintf_r+0xcc>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	425b      	negs	r3, r3
 8005fba:	e7c7      	b.n	8005f4c <_svfiprintf_r+0x120>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	0014      	movs	r4, r2
 8005fc0:	200a      	movs	r0, #10
 8005fc2:	001a      	movs	r2, r3
 8005fc4:	606b      	str	r3, [r5, #4]
 8005fc6:	7821      	ldrb	r1, [r4, #0]
 8005fc8:	3930      	subs	r1, #48	; 0x30
 8005fca:	2909      	cmp	r1, #9
 8005fcc:	d903      	bls.n	8005fd6 <_svfiprintf_r+0x1aa>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0bd      	beq.n	8005f4e <_svfiprintf_r+0x122>
 8005fd2:	9207      	str	r2, [sp, #28]
 8005fd4:	e7bb      	b.n	8005f4e <_svfiprintf_r+0x122>
 8005fd6:	4342      	muls	r2, r0
 8005fd8:	3401      	adds	r4, #1
 8005fda:	1852      	adds	r2, r2, r1
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e7f2      	b.n	8005fc6 <_svfiprintf_r+0x19a>
 8005fe0:	3307      	adds	r3, #7
 8005fe2:	e7d5      	b.n	8005f90 <_svfiprintf_r+0x164>
 8005fe4:	ab05      	add	r3, sp, #20
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	003a      	movs	r2, r7
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <_svfiprintf_r+0x204>)
 8005fec:	0029      	movs	r1, r5
 8005fee:	9802      	ldr	r0, [sp, #8]
 8005ff0:	e000      	b.n	8005ff4 <_svfiprintf_r+0x1c8>
 8005ff2:	bf00      	nop
 8005ff4:	9003      	str	r0, [sp, #12]
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	d1cc      	bne.n	8005f96 <_svfiprintf_r+0x16a>
 8005ffc:	89bb      	ldrh	r3, [r7, #12]
 8005ffe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006000:	065b      	lsls	r3, r3, #25
 8006002:	d400      	bmi.n	8006006 <_svfiprintf_r+0x1da>
 8006004:	e729      	b.n	8005e5a <_svfiprintf_r+0x2e>
 8006006:	2001      	movs	r0, #1
 8006008:	4240      	negs	r0, r0
 800600a:	e726      	b.n	8005e5a <_svfiprintf_r+0x2e>
 800600c:	ab05      	add	r3, sp, #20
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	003a      	movs	r2, r7
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <_svfiprintf_r+0x204>)
 8006014:	0029      	movs	r1, r5
 8006016:	9802      	ldr	r0, [sp, #8]
 8006018:	f000 f87a 	bl	8006110 <_printf_i>
 800601c:	e7ea      	b.n	8005ff4 <_svfiprintf_r+0x1c8>
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	08007b50 	.word	0x08007b50
 8006024:	08007b56 	.word	0x08007b56
 8006028:	08007b5a 	.word	0x08007b5a
 800602c:	00000000 	.word	0x00000000
 8006030:	08005d69 	.word	0x08005d69

08006034 <_printf_common>:
 8006034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006036:	0015      	movs	r5, r2
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	688a      	ldr	r2, [r1, #8]
 800603c:	690b      	ldr	r3, [r1, #16]
 800603e:	9000      	str	r0, [sp, #0]
 8006040:	000c      	movs	r4, r1
 8006042:	4293      	cmp	r3, r2
 8006044:	da00      	bge.n	8006048 <_printf_common+0x14>
 8006046:	0013      	movs	r3, r2
 8006048:	0022      	movs	r2, r4
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	3243      	adds	r2, #67	; 0x43
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	2a00      	cmp	r2, #0
 8006052:	d001      	beq.n	8006058 <_printf_common+0x24>
 8006054:	3301      	adds	r3, #1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	069b      	lsls	r3, r3, #26
 800605c:	d502      	bpl.n	8006064 <_printf_common+0x30>
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	3302      	adds	r3, #2
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	2706      	movs	r7, #6
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	401f      	ands	r7, r3
 800606a:	d027      	beq.n	80060bc <_printf_common+0x88>
 800606c:	0023      	movs	r3, r4
 800606e:	3343      	adds	r3, #67	; 0x43
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	4193      	sbcs	r3, r2
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d430      	bmi.n	80060de <_printf_common+0xaa>
 800607c:	0022      	movs	r2, r4
 800607e:	9901      	ldr	r1, [sp, #4]
 8006080:	3243      	adds	r2, #67	; 0x43
 8006082:	9800      	ldr	r0, [sp, #0]
 8006084:	9e08      	ldr	r6, [sp, #32]
 8006086:	47b0      	blx	r6
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d025      	beq.n	80060d8 <_printf_common+0xa4>
 800608c:	2306      	movs	r3, #6
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	682a      	ldr	r2, [r5, #0]
 8006092:	68e1      	ldr	r1, [r4, #12]
 8006094:	4003      	ands	r3, r0
 8006096:	2500      	movs	r5, #0
 8006098:	2b04      	cmp	r3, #4
 800609a:	d103      	bne.n	80060a4 <_printf_common+0x70>
 800609c:	1a8d      	subs	r5, r1, r2
 800609e:	43eb      	mvns	r3, r5
 80060a0:	17db      	asrs	r3, r3, #31
 80060a2:	401d      	ands	r5, r3
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	6922      	ldr	r2, [r4, #16]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	dd01      	ble.n	80060b0 <_printf_common+0x7c>
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	18ed      	adds	r5, r5, r3
 80060b0:	2700      	movs	r7, #0
 80060b2:	42bd      	cmp	r5, r7
 80060b4:	d120      	bne.n	80060f8 <_printf_common+0xc4>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e010      	b.n	80060dc <_printf_common+0xa8>
 80060ba:	3701      	adds	r7, #1
 80060bc:	68e3      	ldr	r3, [r4, #12]
 80060be:	682a      	ldr	r2, [r5, #0]
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	429f      	cmp	r7, r3
 80060c4:	dad2      	bge.n	800606c <_printf_common+0x38>
 80060c6:	0022      	movs	r2, r4
 80060c8:	2301      	movs	r3, #1
 80060ca:	3219      	adds	r2, #25
 80060cc:	9901      	ldr	r1, [sp, #4]
 80060ce:	9800      	ldr	r0, [sp, #0]
 80060d0:	9e08      	ldr	r6, [sp, #32]
 80060d2:	47b0      	blx	r6
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d1f0      	bne.n	80060ba <_printf_common+0x86>
 80060d8:	2001      	movs	r0, #1
 80060da:	4240      	negs	r0, r0
 80060dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060de:	2030      	movs	r0, #48	; 0x30
 80060e0:	18e1      	adds	r1, r4, r3
 80060e2:	3143      	adds	r1, #67	; 0x43
 80060e4:	7008      	strb	r0, [r1, #0]
 80060e6:	0021      	movs	r1, r4
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	3145      	adds	r1, #69	; 0x45
 80060ec:	7809      	ldrb	r1, [r1, #0]
 80060ee:	18a2      	adds	r2, r4, r2
 80060f0:	3243      	adds	r2, #67	; 0x43
 80060f2:	3302      	adds	r3, #2
 80060f4:	7011      	strb	r1, [r2, #0]
 80060f6:	e7c1      	b.n	800607c <_printf_common+0x48>
 80060f8:	0022      	movs	r2, r4
 80060fa:	2301      	movs	r3, #1
 80060fc:	321a      	adds	r2, #26
 80060fe:	9901      	ldr	r1, [sp, #4]
 8006100:	9800      	ldr	r0, [sp, #0]
 8006102:	9e08      	ldr	r6, [sp, #32]
 8006104:	47b0      	blx	r6
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d0e6      	beq.n	80060d8 <_printf_common+0xa4>
 800610a:	3701      	adds	r7, #1
 800610c:	e7d1      	b.n	80060b2 <_printf_common+0x7e>
	...

08006110 <_printf_i>:
 8006110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006112:	b08b      	sub	sp, #44	; 0x2c
 8006114:	9206      	str	r2, [sp, #24]
 8006116:	000a      	movs	r2, r1
 8006118:	3243      	adds	r2, #67	; 0x43
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	9005      	str	r0, [sp, #20]
 800611e:	9204      	str	r2, [sp, #16]
 8006120:	7e0a      	ldrb	r2, [r1, #24]
 8006122:	000c      	movs	r4, r1
 8006124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006126:	2a6e      	cmp	r2, #110	; 0x6e
 8006128:	d100      	bne.n	800612c <_printf_i+0x1c>
 800612a:	e08f      	b.n	800624c <_printf_i+0x13c>
 800612c:	d817      	bhi.n	800615e <_printf_i+0x4e>
 800612e:	2a63      	cmp	r2, #99	; 0x63
 8006130:	d02c      	beq.n	800618c <_printf_i+0x7c>
 8006132:	d808      	bhi.n	8006146 <_printf_i+0x36>
 8006134:	2a00      	cmp	r2, #0
 8006136:	d100      	bne.n	800613a <_printf_i+0x2a>
 8006138:	e099      	b.n	800626e <_printf_i+0x15e>
 800613a:	2a58      	cmp	r2, #88	; 0x58
 800613c:	d054      	beq.n	80061e8 <_printf_i+0xd8>
 800613e:	0026      	movs	r6, r4
 8006140:	3642      	adds	r6, #66	; 0x42
 8006142:	7032      	strb	r2, [r6, #0]
 8006144:	e029      	b.n	800619a <_printf_i+0x8a>
 8006146:	2a64      	cmp	r2, #100	; 0x64
 8006148:	d001      	beq.n	800614e <_printf_i+0x3e>
 800614a:	2a69      	cmp	r2, #105	; 0x69
 800614c:	d1f7      	bne.n	800613e <_printf_i+0x2e>
 800614e:	6821      	ldr	r1, [r4, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	0608      	lsls	r0, r1, #24
 8006154:	d523      	bpl.n	800619e <_printf_i+0x8e>
 8006156:	1d11      	adds	r1, r2, #4
 8006158:	6019      	str	r1, [r3, #0]
 800615a:	6815      	ldr	r5, [r2, #0]
 800615c:	e025      	b.n	80061aa <_printf_i+0x9a>
 800615e:	2a73      	cmp	r2, #115	; 0x73
 8006160:	d100      	bne.n	8006164 <_printf_i+0x54>
 8006162:	e088      	b.n	8006276 <_printf_i+0x166>
 8006164:	d808      	bhi.n	8006178 <_printf_i+0x68>
 8006166:	2a6f      	cmp	r2, #111	; 0x6f
 8006168:	d029      	beq.n	80061be <_printf_i+0xae>
 800616a:	2a70      	cmp	r2, #112	; 0x70
 800616c:	d1e7      	bne.n	800613e <_printf_i+0x2e>
 800616e:	2220      	movs	r2, #32
 8006170:	6809      	ldr	r1, [r1, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	e003      	b.n	8006180 <_printf_i+0x70>
 8006178:	2a75      	cmp	r2, #117	; 0x75
 800617a:	d020      	beq.n	80061be <_printf_i+0xae>
 800617c:	2a78      	cmp	r2, #120	; 0x78
 800617e:	d1de      	bne.n	800613e <_printf_i+0x2e>
 8006180:	0022      	movs	r2, r4
 8006182:	2178      	movs	r1, #120	; 0x78
 8006184:	3245      	adds	r2, #69	; 0x45
 8006186:	7011      	strb	r1, [r2, #0]
 8006188:	4a6c      	ldr	r2, [pc, #432]	; (800633c <_printf_i+0x22c>)
 800618a:	e030      	b.n	80061ee <_printf_i+0xde>
 800618c:	000e      	movs	r6, r1
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	3642      	adds	r6, #66	; 0x42
 8006192:	1d11      	adds	r1, r2, #4
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	7033      	strb	r3, [r6, #0]
 800619a:	2301      	movs	r3, #1
 800619c:	e079      	b.n	8006292 <_printf_i+0x182>
 800619e:	0649      	lsls	r1, r1, #25
 80061a0:	d5d9      	bpl.n	8006156 <_printf_i+0x46>
 80061a2:	1d11      	adds	r1, r2, #4
 80061a4:	6019      	str	r1, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	5ed5      	ldrsh	r5, [r2, r3]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	da03      	bge.n	80061b6 <_printf_i+0xa6>
 80061ae:	232d      	movs	r3, #45	; 0x2d
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	426d      	negs	r5, r5
 80061b4:	7013      	strb	r3, [r2, #0]
 80061b6:	4b62      	ldr	r3, [pc, #392]	; (8006340 <_printf_i+0x230>)
 80061b8:	270a      	movs	r7, #10
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	e02f      	b.n	800621e <_printf_i+0x10e>
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	0605      	lsls	r5, r0, #24
 80061c4:	d503      	bpl.n	80061ce <_printf_i+0xbe>
 80061c6:	1d08      	adds	r0, r1, #4
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	680d      	ldr	r5, [r1, #0]
 80061cc:	e005      	b.n	80061da <_printf_i+0xca>
 80061ce:	0640      	lsls	r0, r0, #25
 80061d0:	d5f9      	bpl.n	80061c6 <_printf_i+0xb6>
 80061d2:	680d      	ldr	r5, [r1, #0]
 80061d4:	1d08      	adds	r0, r1, #4
 80061d6:	6018      	str	r0, [r3, #0]
 80061d8:	b2ad      	uxth	r5, r5
 80061da:	4b59      	ldr	r3, [pc, #356]	; (8006340 <_printf_i+0x230>)
 80061dc:	2708      	movs	r7, #8
 80061de:	9303      	str	r3, [sp, #12]
 80061e0:	2a6f      	cmp	r2, #111	; 0x6f
 80061e2:	d018      	beq.n	8006216 <_printf_i+0x106>
 80061e4:	270a      	movs	r7, #10
 80061e6:	e016      	b.n	8006216 <_printf_i+0x106>
 80061e8:	3145      	adds	r1, #69	; 0x45
 80061ea:	700a      	strb	r2, [r1, #0]
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <_printf_i+0x230>)
 80061ee:	9203      	str	r2, [sp, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	6821      	ldr	r1, [r4, #0]
 80061f4:	1d10      	adds	r0, r2, #4
 80061f6:	6018      	str	r0, [r3, #0]
 80061f8:	6815      	ldr	r5, [r2, #0]
 80061fa:	0608      	lsls	r0, r1, #24
 80061fc:	d522      	bpl.n	8006244 <_printf_i+0x134>
 80061fe:	07cb      	lsls	r3, r1, #31
 8006200:	d502      	bpl.n	8006208 <_printf_i+0xf8>
 8006202:	2320      	movs	r3, #32
 8006204:	4319      	orrs	r1, r3
 8006206:	6021      	str	r1, [r4, #0]
 8006208:	2710      	movs	r7, #16
 800620a:	2d00      	cmp	r5, #0
 800620c:	d103      	bne.n	8006216 <_printf_i+0x106>
 800620e:	2320      	movs	r3, #32
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	439a      	bics	r2, r3
 8006214:	6022      	str	r2, [r4, #0]
 8006216:	0023      	movs	r3, r4
 8006218:	2200      	movs	r2, #0
 800621a:	3343      	adds	r3, #67	; 0x43
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	60a3      	str	r3, [r4, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db5c      	blt.n	80062e0 <_printf_i+0x1d0>
 8006226:	2204      	movs	r2, #4
 8006228:	6821      	ldr	r1, [r4, #0]
 800622a:	4391      	bics	r1, r2
 800622c:	6021      	str	r1, [r4, #0]
 800622e:	2d00      	cmp	r5, #0
 8006230:	d158      	bne.n	80062e4 <_printf_i+0x1d4>
 8006232:	9e04      	ldr	r6, [sp, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d064      	beq.n	8006302 <_printf_i+0x1f2>
 8006238:	0026      	movs	r6, r4
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	3642      	adds	r6, #66	; 0x42
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	7033      	strb	r3, [r6, #0]
 8006242:	e05e      	b.n	8006302 <_printf_i+0x1f2>
 8006244:	0648      	lsls	r0, r1, #25
 8006246:	d5da      	bpl.n	80061fe <_printf_i+0xee>
 8006248:	b2ad      	uxth	r5, r5
 800624a:	e7d8      	b.n	80061fe <_printf_i+0xee>
 800624c:	6809      	ldr	r1, [r1, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	0608      	lsls	r0, r1, #24
 8006252:	d505      	bpl.n	8006260 <_printf_i+0x150>
 8006254:	1d11      	adds	r1, r2, #4
 8006256:	6019      	str	r1, [r3, #0]
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	6962      	ldr	r2, [r4, #20]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e006      	b.n	800626e <_printf_i+0x15e>
 8006260:	0649      	lsls	r1, r1, #25
 8006262:	d5f7      	bpl.n	8006254 <_printf_i+0x144>
 8006264:	1d11      	adds	r1, r2, #4
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	6813      	ldr	r3, [r2, #0]
 800626a:	8aa2      	ldrh	r2, [r4, #20]
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	9e04      	ldr	r6, [sp, #16]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	e054      	b.n	8006320 <_printf_i+0x210>
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	1d11      	adds	r1, r2, #4
 800627a:	6019      	str	r1, [r3, #0]
 800627c:	6816      	ldr	r6, [r2, #0]
 800627e:	2100      	movs	r1, #0
 8006280:	6862      	ldr	r2, [r4, #4]
 8006282:	0030      	movs	r0, r6
 8006284:	f000 f85e 	bl	8006344 <memchr>
 8006288:	2800      	cmp	r0, #0
 800628a:	d001      	beq.n	8006290 <_printf_i+0x180>
 800628c:	1b80      	subs	r0, r0, r6
 800628e:	6060      	str	r0, [r4, #4]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2300      	movs	r3, #0
 8006296:	9a04      	ldr	r2, [sp, #16]
 8006298:	7013      	strb	r3, [r2, #0]
 800629a:	e041      	b.n	8006320 <_printf_i+0x210>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	0032      	movs	r2, r6
 80062a0:	9906      	ldr	r1, [sp, #24]
 80062a2:	9805      	ldr	r0, [sp, #20]
 80062a4:	9d07      	ldr	r5, [sp, #28]
 80062a6:	47a8      	blx	r5
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d043      	beq.n	8006334 <_printf_i+0x224>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	2500      	movs	r5, #0
 80062b0:	079b      	lsls	r3, r3, #30
 80062b2:	d40f      	bmi.n	80062d4 <_printf_i+0x1c4>
 80062b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	4298      	cmp	r0, r3
 80062ba:	da3d      	bge.n	8006338 <_printf_i+0x228>
 80062bc:	0018      	movs	r0, r3
 80062be:	e03b      	b.n	8006338 <_printf_i+0x228>
 80062c0:	0022      	movs	r2, r4
 80062c2:	2301      	movs	r3, #1
 80062c4:	3219      	adds	r2, #25
 80062c6:	9906      	ldr	r1, [sp, #24]
 80062c8:	9805      	ldr	r0, [sp, #20]
 80062ca:	9e07      	ldr	r6, [sp, #28]
 80062cc:	47b0      	blx	r6
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d030      	beq.n	8006334 <_printf_i+0x224>
 80062d2:	3501      	adds	r5, #1
 80062d4:	68e3      	ldr	r3, [r4, #12]
 80062d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	429d      	cmp	r5, r3
 80062dc:	dbf0      	blt.n	80062c0 <_printf_i+0x1b0>
 80062de:	e7e9      	b.n	80062b4 <_printf_i+0x1a4>
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	d0a9      	beq.n	8006238 <_printf_i+0x128>
 80062e4:	9e04      	ldr	r6, [sp, #16]
 80062e6:	0028      	movs	r0, r5
 80062e8:	0039      	movs	r1, r7
 80062ea:	f7f9 ffb7 	bl	800025c <__aeabi_uidivmod>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	3e01      	subs	r6, #1
 80062f2:	5c5b      	ldrb	r3, [r3, r1]
 80062f4:	0028      	movs	r0, r5
 80062f6:	7033      	strb	r3, [r6, #0]
 80062f8:	0039      	movs	r1, r7
 80062fa:	f7f9 ff29 	bl	8000150 <__udivsi3>
 80062fe:	1e05      	subs	r5, r0, #0
 8006300:	d1f1      	bne.n	80062e6 <_printf_i+0x1d6>
 8006302:	2f08      	cmp	r7, #8
 8006304:	d109      	bne.n	800631a <_printf_i+0x20a>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	07db      	lsls	r3, r3, #31
 800630a:	d506      	bpl.n	800631a <_printf_i+0x20a>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	4293      	cmp	r3, r2
 8006312:	dc02      	bgt.n	800631a <_printf_i+0x20a>
 8006314:	2330      	movs	r3, #48	; 0x30
 8006316:	3e01      	subs	r6, #1
 8006318:	7033      	strb	r3, [r6, #0]
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	1b9b      	subs	r3, r3, r6
 800631e:	6123      	str	r3, [r4, #16]
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	aa09      	add	r2, sp, #36	; 0x24
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	0021      	movs	r1, r4
 8006328:	9b06      	ldr	r3, [sp, #24]
 800632a:	9805      	ldr	r0, [sp, #20]
 800632c:	f7ff fe82 	bl	8006034 <_printf_common>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d1b3      	bne.n	800629c <_printf_i+0x18c>
 8006334:	2001      	movs	r0, #1
 8006336:	4240      	negs	r0, r0
 8006338:	b00b      	add	sp, #44	; 0x2c
 800633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633c:	08007b72 	.word	0x08007b72
 8006340:	08007b61 	.word	0x08007b61

08006344 <memchr>:
 8006344:	b2c9      	uxtb	r1, r1
 8006346:	1882      	adds	r2, r0, r2
 8006348:	4290      	cmp	r0, r2
 800634a:	d101      	bne.n	8006350 <memchr+0xc>
 800634c:	2000      	movs	r0, #0
 800634e:	4770      	bx	lr
 8006350:	7803      	ldrb	r3, [r0, #0]
 8006352:	428b      	cmp	r3, r1
 8006354:	d0fb      	beq.n	800634e <memchr+0xa>
 8006356:	3001      	adds	r0, #1
 8006358:	e7f6      	b.n	8006348 <memchr+0x4>

0800635a <memmove>:
 800635a:	b510      	push	{r4, lr}
 800635c:	4288      	cmp	r0, r1
 800635e:	d902      	bls.n	8006366 <memmove+0xc>
 8006360:	188b      	adds	r3, r1, r2
 8006362:	4298      	cmp	r0, r3
 8006364:	d308      	bcc.n	8006378 <memmove+0x1e>
 8006366:	2300      	movs	r3, #0
 8006368:	429a      	cmp	r2, r3
 800636a:	d007      	beq.n	800637c <memmove+0x22>
 800636c:	5ccc      	ldrb	r4, [r1, r3]
 800636e:	54c4      	strb	r4, [r0, r3]
 8006370:	3301      	adds	r3, #1
 8006372:	e7f9      	b.n	8006368 <memmove+0xe>
 8006374:	5c8b      	ldrb	r3, [r1, r2]
 8006376:	5483      	strb	r3, [r0, r2]
 8006378:	3a01      	subs	r2, #1
 800637a:	d2fb      	bcs.n	8006374 <memmove+0x1a>
 800637c:	bd10      	pop	{r4, pc}

0800637e <_realloc_r>:
 800637e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006380:	0007      	movs	r7, r0
 8006382:	000d      	movs	r5, r1
 8006384:	0016      	movs	r6, r2
 8006386:	2900      	cmp	r1, #0
 8006388:	d105      	bne.n	8006396 <_realloc_r+0x18>
 800638a:	0011      	movs	r1, r2
 800638c:	f7ff fc38 	bl	8005c00 <_malloc_r>
 8006390:	0004      	movs	r4, r0
 8006392:	0020      	movs	r0, r4
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006396:	2a00      	cmp	r2, #0
 8006398:	d103      	bne.n	80063a2 <_realloc_r+0x24>
 800639a:	f7ff fbe7 	bl	8005b6c <_free_r>
 800639e:	0034      	movs	r4, r6
 80063a0:	e7f7      	b.n	8006392 <_realloc_r+0x14>
 80063a2:	f000 f812 	bl	80063ca <_malloc_usable_size_r>
 80063a6:	002c      	movs	r4, r5
 80063a8:	4286      	cmp	r6, r0
 80063aa:	d9f2      	bls.n	8006392 <_realloc_r+0x14>
 80063ac:	0031      	movs	r1, r6
 80063ae:	0038      	movs	r0, r7
 80063b0:	f7ff fc26 	bl	8005c00 <_malloc_r>
 80063b4:	1e04      	subs	r4, r0, #0
 80063b6:	d0ec      	beq.n	8006392 <_realloc_r+0x14>
 80063b8:	0029      	movs	r1, r5
 80063ba:	0032      	movs	r2, r6
 80063bc:	f7ff fbc4 	bl	8005b48 <memcpy>
 80063c0:	0029      	movs	r1, r5
 80063c2:	0038      	movs	r0, r7
 80063c4:	f7ff fbd2 	bl	8005b6c <_free_r>
 80063c8:	e7e3      	b.n	8006392 <_realloc_r+0x14>

080063ca <_malloc_usable_size_r>:
 80063ca:	1f0b      	subs	r3, r1, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1f18      	subs	r0, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da01      	bge.n	80063d8 <_malloc_usable_size_r+0xe>
 80063d4:	580b      	ldr	r3, [r1, r0]
 80063d6:	18c0      	adds	r0, r0, r3
 80063d8:	4770      	bx	lr
	...

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
