
MIDIcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c68  0800c030  0800c030  0001c030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc98  0800dc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dca0  0800dca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dca4  0800dca4  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003e0  20000000  0800dca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000421c  200003e0  0800e088  000203e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200045fc  0800e088  000245fc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dc1e  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005925  00000000  00000000  0004e026  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000119c9  00000000  00000000  0005394b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001610  00000000  00000000  00065318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e30  00000000  00000000  00066928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e234  00000000  00000000  00068758  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007851  00000000  00000000  0007698c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007e1dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005180  00000000  00000000  0007e25c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200003e0 	.word	0x200003e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c014 	.word	0x0800c014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200003e4 	.word	0x200003e4
 8000100:	0800c014 	.word	0x0800c014

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 f859 	bl	8001504 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffb3 	bl	80013c8 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f84b 	bl	8001504 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f841 	bl	8001504 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffd3 	bl	800143c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 ffc9 	bl	800143c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_uldivmod>:
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d111      	bne.n	80004e0 <__aeabi_uldivmod+0x28>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	d10f      	bne.n	80004e0 <__aeabi_uldivmod+0x28>
 80004c0:	2900      	cmp	r1, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_uldivmod+0xe>
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d002      	beq.n	80004ce <__aeabi_uldivmod+0x16>
 80004c8:	2100      	movs	r1, #0
 80004ca:	43c9      	mvns	r1, r1
 80004cc:	1c08      	adds	r0, r1, #0
 80004ce:	b407      	push	{r0, r1, r2}
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <__aeabi_uldivmod+0x24>)
 80004d2:	a102      	add	r1, pc, #8	; (adr r1, 80004dc <__aeabi_uldivmod+0x24>)
 80004d4:	1840      	adds	r0, r0, r1
 80004d6:	9002      	str	r0, [sp, #8]
 80004d8:	bd03      	pop	{r0, r1, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	ffffff5d 	.word	0xffffff5d
 80004e0:	b403      	push	{r0, r1}
 80004e2:	4668      	mov	r0, sp
 80004e4:	b501      	push	{r0, lr}
 80004e6:	9802      	ldr	r0, [sp, #8]
 80004e8:	f000 f824 	bl	8000534 <__udivmoddi4>
 80004ec:	9b01      	ldr	r3, [sp, #4]
 80004ee:	469e      	mov	lr, r3
 80004f0:	b002      	add	sp, #8
 80004f2:	bc0c      	pop	{r2, r3}
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_d2uiz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2200      	movs	r2, #0
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <__aeabi_d2uiz+0x38>)
 80004fe:	0004      	movs	r4, r0
 8000500:	000d      	movs	r5, r1
 8000502:	f7ff ffcf 	bl	80004a4 <__aeabi_dcmpge>
 8000506:	2800      	cmp	r0, #0
 8000508:	d104      	bne.n	8000514 <__aeabi_d2uiz+0x1c>
 800050a:	0020      	movs	r0, r4
 800050c:	0029      	movs	r1, r5
 800050e:	f001 fe11 	bl	8002134 <__aeabi_d2iz>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <__aeabi_d2uiz+0x38>)
 8000516:	2200      	movs	r2, #0
 8000518:	0020      	movs	r0, r4
 800051a:	0029      	movs	r1, r5
 800051c:	f001 fad4 	bl	8001ac8 <__aeabi_dsub>
 8000520:	f001 fe08 	bl	8002134 <__aeabi_d2iz>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	061b      	lsls	r3, r3, #24
 8000528:	469c      	mov	ip, r3
 800052a:	4460      	add	r0, ip
 800052c:	e7f1      	b.n	8000512 <__aeabi_d2uiz+0x1a>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	41e00000 	.word	0x41e00000

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	4657      	mov	r7, sl
 8000538:	464e      	mov	r6, r9
 800053a:	4645      	mov	r5, r8
 800053c:	46de      	mov	lr, fp
 800053e:	b5e0      	push	{r5, r6, r7, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	b083      	sub	sp, #12
 8000544:	000d      	movs	r5, r1
 8000546:	4692      	mov	sl, r2
 8000548:	4699      	mov	r9, r3
 800054a:	428b      	cmp	r3, r1
 800054c:	d82f      	bhi.n	80005ae <__udivmoddi4+0x7a>
 800054e:	d02c      	beq.n	80005aa <__udivmoddi4+0x76>
 8000550:	4649      	mov	r1, r9
 8000552:	4650      	mov	r0, sl
 8000554:	f001 fed4 	bl	8002300 <__clzdi2>
 8000558:	0029      	movs	r1, r5
 800055a:	0006      	movs	r6, r0
 800055c:	0020      	movs	r0, r4
 800055e:	f001 fecf 	bl	8002300 <__clzdi2>
 8000562:	1a33      	subs	r3, r6, r0
 8000564:	4698      	mov	r8, r3
 8000566:	3b20      	subs	r3, #32
 8000568:	469b      	mov	fp, r3
 800056a:	d500      	bpl.n	800056e <__udivmoddi4+0x3a>
 800056c:	e074      	b.n	8000658 <__udivmoddi4+0x124>
 800056e:	4653      	mov	r3, sl
 8000570:	465a      	mov	r2, fp
 8000572:	4093      	lsls	r3, r2
 8000574:	001f      	movs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4642      	mov	r2, r8
 800057a:	4093      	lsls	r3, r2
 800057c:	001e      	movs	r6, r3
 800057e:	42af      	cmp	r7, r5
 8000580:	d829      	bhi.n	80005d6 <__udivmoddi4+0xa2>
 8000582:	d026      	beq.n	80005d2 <__udivmoddi4+0x9e>
 8000584:	465b      	mov	r3, fp
 8000586:	1ba4      	subs	r4, r4, r6
 8000588:	41bd      	sbcs	r5, r7
 800058a:	2b00      	cmp	r3, #0
 800058c:	da00      	bge.n	8000590 <__udivmoddi4+0x5c>
 800058e:	e079      	b.n	8000684 <__udivmoddi4+0x150>
 8000590:	2200      	movs	r2, #0
 8000592:	2300      	movs	r3, #0
 8000594:	9200      	str	r2, [sp, #0]
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2301      	movs	r3, #1
 80005a2:	4642      	mov	r2, r8
 80005a4:	4093      	lsls	r3, r2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	e019      	b.n	80005de <__udivmoddi4+0xaa>
 80005aa:	4282      	cmp	r2, r0
 80005ac:	d9d0      	bls.n	8000550 <__udivmoddi4+0x1c>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <__udivmoddi4+0x8c>
 80005bc:	601c      	str	r4, [r3, #0]
 80005be:	605d      	str	r5, [r3, #4]
 80005c0:	9800      	ldr	r0, [sp, #0]
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	b003      	add	sp, #12
 80005c6:	bc3c      	pop	{r2, r3, r4, r5}
 80005c8:	4690      	mov	r8, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	46a2      	mov	sl, r4
 80005ce:	46ab      	mov	fp, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	d9d6      	bls.n	8000584 <__udivmoddi4+0x50>
 80005d6:	2200      	movs	r2, #0
 80005d8:	2300      	movs	r3, #0
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	4643      	mov	r3, r8
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0e8      	beq.n	80005b6 <__udivmoddi4+0x82>
 80005e4:	07fb      	lsls	r3, r7, #31
 80005e6:	0872      	lsrs	r2, r6, #1
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4646      	mov	r6, r8
 80005ec:	087b      	lsrs	r3, r7, #1
 80005ee:	e00e      	b.n	800060e <__udivmoddi4+0xda>
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	d101      	bne.n	80005f8 <__udivmoddi4+0xc4>
 80005f4:	42a2      	cmp	r2, r4
 80005f6:	d80c      	bhi.n	8000612 <__udivmoddi4+0xde>
 80005f8:	1aa4      	subs	r4, r4, r2
 80005fa:	419d      	sbcs	r5, r3
 80005fc:	2001      	movs	r0, #1
 80005fe:	1924      	adds	r4, r4, r4
 8000600:	416d      	adcs	r5, r5
 8000602:	2100      	movs	r1, #0
 8000604:	3e01      	subs	r6, #1
 8000606:	1824      	adds	r4, r4, r0
 8000608:	414d      	adcs	r5, r1
 800060a:	2e00      	cmp	r6, #0
 800060c:	d006      	beq.n	800061c <__udivmoddi4+0xe8>
 800060e:	42ab      	cmp	r3, r5
 8000610:	d9ee      	bls.n	80005f0 <__udivmoddi4+0xbc>
 8000612:	3e01      	subs	r6, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2e00      	cmp	r6, #0
 800061a:	d1f8      	bne.n	800060e <__udivmoddi4+0xda>
 800061c:	465b      	mov	r3, fp
 800061e:	9800      	ldr	r0, [sp, #0]
 8000620:	9901      	ldr	r1, [sp, #4]
 8000622:	1900      	adds	r0, r0, r4
 8000624:	4169      	adcs	r1, r5
 8000626:	2b00      	cmp	r3, #0
 8000628:	db22      	blt.n	8000670 <__udivmoddi4+0x13c>
 800062a:	002b      	movs	r3, r5
 800062c:	465a      	mov	r2, fp
 800062e:	40d3      	lsrs	r3, r2
 8000630:	002a      	movs	r2, r5
 8000632:	4644      	mov	r4, r8
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	465b      	mov	r3, fp
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	db2c      	blt.n	800069a <__udivmoddi4+0x166>
 8000640:	0026      	movs	r6, r4
 8000642:	409e      	lsls	r6, r3
 8000644:	0033      	movs	r3, r6
 8000646:	0026      	movs	r6, r4
 8000648:	4647      	mov	r7, r8
 800064a:	40be      	lsls	r6, r7
 800064c:	0032      	movs	r2, r6
 800064e:	1a80      	subs	r0, r0, r2
 8000650:	4199      	sbcs	r1, r3
 8000652:	9000      	str	r0, [sp, #0]
 8000654:	9101      	str	r1, [sp, #4]
 8000656:	e7ae      	b.n	80005b6 <__udivmoddi4+0x82>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	4652      	mov	r2, sl
 8000660:	40da      	lsrs	r2, r3
 8000662:	4641      	mov	r1, r8
 8000664:	0013      	movs	r3, r2
 8000666:	464a      	mov	r2, r9
 8000668:	408a      	lsls	r2, r1
 800066a:	0017      	movs	r7, r2
 800066c:	431f      	orrs	r7, r3
 800066e:	e782      	b.n	8000576 <__udivmoddi4+0x42>
 8000670:	4642      	mov	r2, r8
 8000672:	2320      	movs	r3, #32
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	4646      	mov	r6, r8
 800067a:	409a      	lsls	r2, r3
 800067c:	0023      	movs	r3, r4
 800067e:	40f3      	lsrs	r3, r6
 8000680:	4313      	orrs	r3, r2
 8000682:	e7d5      	b.n	8000630 <__udivmoddi4+0xfc>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e782      	b.n	80005a0 <__udivmoddi4+0x6c>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	0026      	movs	r6, r4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	40de      	lsrs	r6, r3
 80006a4:	002f      	movs	r7, r5
 80006a6:	46b4      	mov	ip, r6
 80006a8:	4097      	lsls	r7, r2
 80006aa:	4666      	mov	r6, ip
 80006ac:	003b      	movs	r3, r7
 80006ae:	4333      	orrs	r3, r6
 80006b0:	e7c9      	b.n	8000646 <__udivmoddi4+0x112>
 80006b2:	46c0      	nop			; (mov r8, r8)

080006b4 <__aeabi_ui2f>:
 80006b4:	b510      	push	{r4, lr}
 80006b6:	1e04      	subs	r4, r0, #0
 80006b8:	d027      	beq.n	800070a <__aeabi_ui2f+0x56>
 80006ba:	f001 fe03 	bl	80022c4 <__clzsi2>
 80006be:	239e      	movs	r3, #158	; 0x9e
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	2b96      	cmp	r3, #150	; 0x96
 80006c4:	dc0a      	bgt.n	80006dc <__aeabi_ui2f+0x28>
 80006c6:	2296      	movs	r2, #150	; 0x96
 80006c8:	1ad2      	subs	r2, r2, r3
 80006ca:	4094      	lsls	r4, r2
 80006cc:	0264      	lsls	r4, r4, #9
 80006ce:	0a64      	lsrs	r4, r4, #9
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	0a60      	lsrs	r0, r4, #9
 80006d8:	4318      	orrs	r0, r3
 80006da:	bd10      	pop	{r4, pc}
 80006dc:	2b99      	cmp	r3, #153	; 0x99
 80006de:	dc17      	bgt.n	8000710 <__aeabi_ui2f+0x5c>
 80006e0:	2299      	movs	r2, #153	; 0x99
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	dd27      	ble.n	8000738 <__aeabi_ui2f+0x84>
 80006e8:	4094      	lsls	r4, r2
 80006ea:	0022      	movs	r2, r4
 80006ec:	4c13      	ldr	r4, [pc, #76]	; (800073c <__aeabi_ui2f+0x88>)
 80006ee:	4014      	ands	r4, r2
 80006f0:	0751      	lsls	r1, r2, #29
 80006f2:	d004      	beq.n	80006fe <__aeabi_ui2f+0x4a>
 80006f4:	210f      	movs	r1, #15
 80006f6:	400a      	ands	r2, r1
 80006f8:	2a04      	cmp	r2, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_ui2f+0x4a>
 80006fc:	3404      	adds	r4, #4
 80006fe:	0162      	lsls	r2, r4, #5
 8000700:	d412      	bmi.n	8000728 <__aeabi_ui2f+0x74>
 8000702:	01a4      	lsls	r4, r4, #6
 8000704:	0a64      	lsrs	r4, r4, #9
 8000706:	b2db      	uxtb	r3, r3
 8000708:	e7e3      	b.n	80006d2 <__aeabi_ui2f+0x1e>
 800070a:	2300      	movs	r3, #0
 800070c:	2400      	movs	r4, #0
 800070e:	e7e0      	b.n	80006d2 <__aeabi_ui2f+0x1e>
 8000710:	22b9      	movs	r2, #185	; 0xb9
 8000712:	0021      	movs	r1, r4
 8000714:	1ad2      	subs	r2, r2, r3
 8000716:	4091      	lsls	r1, r2
 8000718:	000a      	movs	r2, r1
 800071a:	1e51      	subs	r1, r2, #1
 800071c:	418a      	sbcs	r2, r1
 800071e:	2105      	movs	r1, #5
 8000720:	1a09      	subs	r1, r1, r0
 8000722:	40cc      	lsrs	r4, r1
 8000724:	4314      	orrs	r4, r2
 8000726:	e7db      	b.n	80006e0 <__aeabi_ui2f+0x2c>
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__aeabi_ui2f+0x88>)
 800072a:	401c      	ands	r4, r3
 800072c:	239f      	movs	r3, #159	; 0x9f
 800072e:	01a4      	lsls	r4, r4, #6
 8000730:	1a1b      	subs	r3, r3, r0
 8000732:	0a64      	lsrs	r4, r4, #9
 8000734:	b2db      	uxtb	r3, r3
 8000736:	e7cc      	b.n	80006d2 <__aeabi_ui2f+0x1e>
 8000738:	0022      	movs	r2, r4
 800073a:	e7d7      	b.n	80006ec <__aeabi_ui2f+0x38>
 800073c:	fbffffff 	.word	0xfbffffff

08000740 <__aeabi_dadd>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	4645      	mov	r5, r8
 8000744:	46de      	mov	lr, fp
 8000746:	4657      	mov	r7, sl
 8000748:	464e      	mov	r6, r9
 800074a:	030c      	lsls	r4, r1, #12
 800074c:	b5e0      	push	{r5, r6, r7, lr}
 800074e:	004e      	lsls	r6, r1, #1
 8000750:	0fc9      	lsrs	r1, r1, #31
 8000752:	4688      	mov	r8, r1
 8000754:	000d      	movs	r5, r1
 8000756:	0a61      	lsrs	r1, r4, #9
 8000758:	0f44      	lsrs	r4, r0, #29
 800075a:	430c      	orrs	r4, r1
 800075c:	00c7      	lsls	r7, r0, #3
 800075e:	0319      	lsls	r1, r3, #12
 8000760:	0058      	lsls	r0, r3, #1
 8000762:	0fdb      	lsrs	r3, r3, #31
 8000764:	469b      	mov	fp, r3
 8000766:	0a4b      	lsrs	r3, r1, #9
 8000768:	0f51      	lsrs	r1, r2, #29
 800076a:	430b      	orrs	r3, r1
 800076c:	0d76      	lsrs	r6, r6, #21
 800076e:	0d40      	lsrs	r0, r0, #21
 8000770:	0019      	movs	r1, r3
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	45d8      	cmp	r8, fp
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x3a>
 8000778:	e0ae      	b.n	80008d8 <__aeabi_dadd+0x198>
 800077a:	1a35      	subs	r5, r6, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	dc00      	bgt.n	8000782 <__aeabi_dadd+0x42>
 8000780:	e0f6      	b.n	8000970 <__aeabi_dadd+0x230>
 8000782:	2800      	cmp	r0, #0
 8000784:	d10f      	bne.n	80007a6 <__aeabi_dadd+0x66>
 8000786:	4313      	orrs	r3, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x4c>
 800078a:	e0db      	b.n	8000944 <__aeabi_dadd+0x204>
 800078c:	1e6b      	subs	r3, r5, #1
 800078e:	2b00      	cmp	r3, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_dadd+0x54>
 8000792:	e137      	b.n	8000a04 <__aeabi_dadd+0x2c4>
 8000794:	1aba      	subs	r2, r7, r2
 8000796:	4297      	cmp	r7, r2
 8000798:	41bf      	sbcs	r7, r7
 800079a:	1a64      	subs	r4, r4, r1
 800079c:	427f      	negs	r7, r7
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2601      	movs	r6, #1
 80007a2:	0017      	movs	r7, r2
 80007a4:	e024      	b.n	80007f0 <__aeabi_dadd+0xb0>
 80007a6:	4bc6      	ldr	r3, [pc, #792]	; (8000ac0 <__aeabi_dadd+0x380>)
 80007a8:	429e      	cmp	r6, r3
 80007aa:	d04d      	beq.n	8000848 <__aeabi_dadd+0x108>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	4319      	orrs	r1, r3
 80007b2:	2d38      	cmp	r5, #56	; 0x38
 80007b4:	dd00      	ble.n	80007b8 <__aeabi_dadd+0x78>
 80007b6:	e107      	b.n	80009c8 <__aeabi_dadd+0x288>
 80007b8:	2d1f      	cmp	r5, #31
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x7e>
 80007bc:	e138      	b.n	8000a30 <__aeabi_dadd+0x2f0>
 80007be:	2020      	movs	r0, #32
 80007c0:	1b43      	subs	r3, r0, r5
 80007c2:	469a      	mov	sl, r3
 80007c4:	000b      	movs	r3, r1
 80007c6:	4650      	mov	r0, sl
 80007c8:	4083      	lsls	r3, r0
 80007ca:	4699      	mov	r9, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	4648      	mov	r0, r9
 80007d0:	40eb      	lsrs	r3, r5
 80007d2:	4318      	orrs	r0, r3
 80007d4:	0003      	movs	r3, r0
 80007d6:	4650      	mov	r0, sl
 80007d8:	4082      	lsls	r2, r0
 80007da:	1e50      	subs	r0, r2, #1
 80007dc:	4182      	sbcs	r2, r0
 80007de:	40e9      	lsrs	r1, r5
 80007e0:	431a      	orrs	r2, r3
 80007e2:	1aba      	subs	r2, r7, r2
 80007e4:	1a61      	subs	r1, r4, r1
 80007e6:	4297      	cmp	r7, r2
 80007e8:	41a4      	sbcs	r4, r4
 80007ea:	0017      	movs	r7, r2
 80007ec:	4264      	negs	r4, r4
 80007ee:	1b0c      	subs	r4, r1, r4
 80007f0:	0223      	lsls	r3, r4, #8
 80007f2:	d562      	bpl.n	80008ba <__aeabi_dadd+0x17a>
 80007f4:	0264      	lsls	r4, r4, #9
 80007f6:	0a65      	lsrs	r5, r4, #9
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0xbe>
 80007fc:	e0df      	b.n	80009be <__aeabi_dadd+0x27e>
 80007fe:	0028      	movs	r0, r5
 8000800:	f001 fd60 	bl	80022c4 <__clzsi2>
 8000804:	0003      	movs	r3, r0
 8000806:	3b08      	subs	r3, #8
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dd00      	ble.n	800080e <__aeabi_dadd+0xce>
 800080c:	e0d2      	b.n	80009b4 <__aeabi_dadd+0x274>
 800080e:	2220      	movs	r2, #32
 8000810:	003c      	movs	r4, r7
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	409d      	lsls	r5, r3
 8000816:	40d4      	lsrs	r4, r2
 8000818:	409f      	lsls	r7, r3
 800081a:	4325      	orrs	r5, r4
 800081c:	429e      	cmp	r6, r3
 800081e:	dd00      	ble.n	8000822 <__aeabi_dadd+0xe2>
 8000820:	e0c4      	b.n	80009ac <__aeabi_dadd+0x26c>
 8000822:	1b9e      	subs	r6, r3, r6
 8000824:	1c73      	adds	r3, r6, #1
 8000826:	2b1f      	cmp	r3, #31
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0xec>
 800082a:	e0f1      	b.n	8000a10 <__aeabi_dadd+0x2d0>
 800082c:	2220      	movs	r2, #32
 800082e:	0038      	movs	r0, r7
 8000830:	0029      	movs	r1, r5
 8000832:	1ad2      	subs	r2, r2, r3
 8000834:	40d8      	lsrs	r0, r3
 8000836:	4091      	lsls	r1, r2
 8000838:	4097      	lsls	r7, r2
 800083a:	002c      	movs	r4, r5
 800083c:	4301      	orrs	r1, r0
 800083e:	1e78      	subs	r0, r7, #1
 8000840:	4187      	sbcs	r7, r0
 8000842:	40dc      	lsrs	r4, r3
 8000844:	2600      	movs	r6, #0
 8000846:	430f      	orrs	r7, r1
 8000848:	077b      	lsls	r3, r7, #29
 800084a:	d009      	beq.n	8000860 <__aeabi_dadd+0x120>
 800084c:	230f      	movs	r3, #15
 800084e:	403b      	ands	r3, r7
 8000850:	2b04      	cmp	r3, #4
 8000852:	d005      	beq.n	8000860 <__aeabi_dadd+0x120>
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	42bb      	cmp	r3, r7
 8000858:	41bf      	sbcs	r7, r7
 800085a:	427f      	negs	r7, r7
 800085c:	19e4      	adds	r4, r4, r7
 800085e:	001f      	movs	r7, r3
 8000860:	0223      	lsls	r3, r4, #8
 8000862:	d52c      	bpl.n	80008be <__aeabi_dadd+0x17e>
 8000864:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <__aeabi_dadd+0x380>)
 8000866:	3601      	adds	r6, #1
 8000868:	429e      	cmp	r6, r3
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x12e>
 800086c:	e09a      	b.n	80009a4 <__aeabi_dadd+0x264>
 800086e:	4645      	mov	r5, r8
 8000870:	4b94      	ldr	r3, [pc, #592]	; (8000ac4 <__aeabi_dadd+0x384>)
 8000872:	08ff      	lsrs	r7, r7, #3
 8000874:	401c      	ands	r4, r3
 8000876:	0760      	lsls	r0, r4, #29
 8000878:	0576      	lsls	r6, r6, #21
 800087a:	0264      	lsls	r4, r4, #9
 800087c:	4307      	orrs	r7, r0
 800087e:	0b24      	lsrs	r4, r4, #12
 8000880:	0d76      	lsrs	r6, r6, #21
 8000882:	2100      	movs	r1, #0
 8000884:	0324      	lsls	r4, r4, #12
 8000886:	0b23      	lsrs	r3, r4, #12
 8000888:	0d0c      	lsrs	r4, r1, #20
 800088a:	4a8f      	ldr	r2, [pc, #572]	; (8000ac8 <__aeabi_dadd+0x388>)
 800088c:	0524      	lsls	r4, r4, #20
 800088e:	431c      	orrs	r4, r3
 8000890:	4014      	ands	r4, r2
 8000892:	0533      	lsls	r3, r6, #20
 8000894:	4323      	orrs	r3, r4
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	07ed      	lsls	r5, r5, #31
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	432b      	orrs	r3, r5
 800089e:	0038      	movs	r0, r7
 80008a0:	0019      	movs	r1, r3
 80008a2:	bc3c      	pop	{r2, r3, r4, r5}
 80008a4:	4690      	mov	r8, r2
 80008a6:	4699      	mov	r9, r3
 80008a8:	46a2      	mov	sl, r4
 80008aa:	46ab      	mov	fp, r5
 80008ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ae:	4664      	mov	r4, ip
 80008b0:	4304      	orrs	r4, r0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x176>
 80008b4:	e211      	b.n	8000cda <__aeabi_dadd+0x59a>
 80008b6:	0004      	movs	r4, r0
 80008b8:	4667      	mov	r7, ip
 80008ba:	077b      	lsls	r3, r7, #29
 80008bc:	d1c6      	bne.n	800084c <__aeabi_dadd+0x10c>
 80008be:	4645      	mov	r5, r8
 80008c0:	0760      	lsls	r0, r4, #29
 80008c2:	08ff      	lsrs	r7, r7, #3
 80008c4:	4307      	orrs	r7, r0
 80008c6:	08e4      	lsrs	r4, r4, #3
 80008c8:	4b7d      	ldr	r3, [pc, #500]	; (8000ac0 <__aeabi_dadd+0x380>)
 80008ca:	429e      	cmp	r6, r3
 80008cc:	d030      	beq.n	8000930 <__aeabi_dadd+0x1f0>
 80008ce:	0324      	lsls	r4, r4, #12
 80008d0:	0576      	lsls	r6, r6, #21
 80008d2:	0b24      	lsrs	r4, r4, #12
 80008d4:	0d76      	lsrs	r6, r6, #21
 80008d6:	e7d4      	b.n	8000882 <__aeabi_dadd+0x142>
 80008d8:	1a33      	subs	r3, r6, r0
 80008da:	469a      	mov	sl, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dd78      	ble.n	80009d2 <__aeabi_dadd+0x292>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d031      	beq.n	8000948 <__aeabi_dadd+0x208>
 80008e4:	4876      	ldr	r0, [pc, #472]	; (8000ac0 <__aeabi_dadd+0x380>)
 80008e6:	4286      	cmp	r6, r0
 80008e8:	d0ae      	beq.n	8000848 <__aeabi_dadd+0x108>
 80008ea:	2080      	movs	r0, #128	; 0x80
 80008ec:	0400      	lsls	r0, r0, #16
 80008ee:	4301      	orrs	r1, r0
 80008f0:	4653      	mov	r3, sl
 80008f2:	2b38      	cmp	r3, #56	; 0x38
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x1b8>
 80008f6:	e0e9      	b.n	8000acc <__aeabi_dadd+0x38c>
 80008f8:	430a      	orrs	r2, r1
 80008fa:	1e51      	subs	r1, r2, #1
 80008fc:	418a      	sbcs	r2, r1
 80008fe:	2100      	movs	r1, #0
 8000900:	19d2      	adds	r2, r2, r7
 8000902:	42ba      	cmp	r2, r7
 8000904:	41bf      	sbcs	r7, r7
 8000906:	1909      	adds	r1, r1, r4
 8000908:	427c      	negs	r4, r7
 800090a:	0017      	movs	r7, r2
 800090c:	190c      	adds	r4, r1, r4
 800090e:	0223      	lsls	r3, r4, #8
 8000910:	d5d3      	bpl.n	80008ba <__aeabi_dadd+0x17a>
 8000912:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <__aeabi_dadd+0x380>)
 8000914:	3601      	adds	r6, #1
 8000916:	429e      	cmp	r6, r3
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x1dc>
 800091a:	e13a      	b.n	8000b92 <__aeabi_dadd+0x452>
 800091c:	2001      	movs	r0, #1
 800091e:	4b69      	ldr	r3, [pc, #420]	; (8000ac4 <__aeabi_dadd+0x384>)
 8000920:	401c      	ands	r4, r3
 8000922:	087b      	lsrs	r3, r7, #1
 8000924:	4007      	ands	r7, r0
 8000926:	431f      	orrs	r7, r3
 8000928:	07e0      	lsls	r0, r4, #31
 800092a:	4307      	orrs	r7, r0
 800092c:	0864      	lsrs	r4, r4, #1
 800092e:	e78b      	b.n	8000848 <__aeabi_dadd+0x108>
 8000930:	0023      	movs	r3, r4
 8000932:	433b      	orrs	r3, r7
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x1f8>
 8000936:	e1cb      	b.n	8000cd0 <__aeabi_dadd+0x590>
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	0312      	lsls	r2, r2, #12
 800093c:	4314      	orrs	r4, r2
 800093e:	0324      	lsls	r4, r4, #12
 8000940:	0b24      	lsrs	r4, r4, #12
 8000942:	e79e      	b.n	8000882 <__aeabi_dadd+0x142>
 8000944:	002e      	movs	r6, r5
 8000946:	e77f      	b.n	8000848 <__aeabi_dadd+0x108>
 8000948:	0008      	movs	r0, r1
 800094a:	4310      	orrs	r0, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x210>
 800094e:	e0b4      	b.n	8000aba <__aeabi_dadd+0x37a>
 8000950:	1e58      	subs	r0, r3, #1
 8000952:	2800      	cmp	r0, #0
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x218>
 8000956:	e0de      	b.n	8000b16 <__aeabi_dadd+0x3d6>
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	42ba      	cmp	r2, r7
 800095c:	419b      	sbcs	r3, r3
 800095e:	1864      	adds	r4, r4, r1
 8000960:	425b      	negs	r3, r3
 8000962:	18e4      	adds	r4, r4, r3
 8000964:	0017      	movs	r7, r2
 8000966:	2601      	movs	r6, #1
 8000968:	0223      	lsls	r3, r4, #8
 800096a:	d5a6      	bpl.n	80008ba <__aeabi_dadd+0x17a>
 800096c:	2602      	movs	r6, #2
 800096e:	e7d5      	b.n	800091c <__aeabi_dadd+0x1dc>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d16e      	bne.n	8000a52 <__aeabi_dadd+0x312>
 8000974:	1c70      	adds	r0, r6, #1
 8000976:	0540      	lsls	r0, r0, #21
 8000978:	0d40      	lsrs	r0, r0, #21
 800097a:	2801      	cmp	r0, #1
 800097c:	dc00      	bgt.n	8000980 <__aeabi_dadd+0x240>
 800097e:	e0f9      	b.n	8000b74 <__aeabi_dadd+0x434>
 8000980:	1ab8      	subs	r0, r7, r2
 8000982:	4684      	mov	ip, r0
 8000984:	4287      	cmp	r7, r0
 8000986:	4180      	sbcs	r0, r0
 8000988:	1ae5      	subs	r5, r4, r3
 800098a:	4240      	negs	r0, r0
 800098c:	1a2d      	subs	r5, r5, r0
 800098e:	0228      	lsls	r0, r5, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_dadd+0x254>
 8000992:	e089      	b.n	8000aa8 <__aeabi_dadd+0x368>
 8000994:	1bd7      	subs	r7, r2, r7
 8000996:	42ba      	cmp	r2, r7
 8000998:	4192      	sbcs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	4252      	negs	r2, r2
 800099e:	1aa5      	subs	r5, r4, r2
 80009a0:	46d8      	mov	r8, fp
 80009a2:	e729      	b.n	80007f8 <__aeabi_dadd+0xb8>
 80009a4:	4645      	mov	r5, r8
 80009a6:	2400      	movs	r4, #0
 80009a8:	2700      	movs	r7, #0
 80009aa:	e76a      	b.n	8000882 <__aeabi_dadd+0x142>
 80009ac:	4c45      	ldr	r4, [pc, #276]	; (8000ac4 <__aeabi_dadd+0x384>)
 80009ae:	1af6      	subs	r6, r6, r3
 80009b0:	402c      	ands	r4, r5
 80009b2:	e749      	b.n	8000848 <__aeabi_dadd+0x108>
 80009b4:	003d      	movs	r5, r7
 80009b6:	3828      	subs	r0, #40	; 0x28
 80009b8:	4085      	lsls	r5, r0
 80009ba:	2700      	movs	r7, #0
 80009bc:	e72e      	b.n	800081c <__aeabi_dadd+0xdc>
 80009be:	0038      	movs	r0, r7
 80009c0:	f001 fc80 	bl	80022c4 <__clzsi2>
 80009c4:	3020      	adds	r0, #32
 80009c6:	e71d      	b.n	8000804 <__aeabi_dadd+0xc4>
 80009c8:	430a      	orrs	r2, r1
 80009ca:	1e51      	subs	r1, r2, #1
 80009cc:	418a      	sbcs	r2, r1
 80009ce:	2100      	movs	r1, #0
 80009d0:	e707      	b.n	80007e2 <__aeabi_dadd+0xa2>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_dadd+0x298>
 80009d6:	e0f3      	b.n	8000bc0 <__aeabi_dadd+0x480>
 80009d8:	1c70      	adds	r0, r6, #1
 80009da:	0543      	lsls	r3, r0, #21
 80009dc:	0d5b      	lsrs	r3, r3, #21
 80009de:	2b01      	cmp	r3, #1
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_dadd+0x2a4>
 80009e2:	e0ad      	b.n	8000b40 <__aeabi_dadd+0x400>
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <__aeabi_dadd+0x380>)
 80009e6:	4298      	cmp	r0, r3
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x2ac>
 80009ea:	e0d1      	b.n	8000b90 <__aeabi_dadd+0x450>
 80009ec:	18ba      	adds	r2, r7, r2
 80009ee:	42ba      	cmp	r2, r7
 80009f0:	41bf      	sbcs	r7, r7
 80009f2:	1864      	adds	r4, r4, r1
 80009f4:	427f      	negs	r7, r7
 80009f6:	19e4      	adds	r4, r4, r7
 80009f8:	07e7      	lsls	r7, r4, #31
 80009fa:	0852      	lsrs	r2, r2, #1
 80009fc:	4317      	orrs	r7, r2
 80009fe:	0864      	lsrs	r4, r4, #1
 8000a00:	0006      	movs	r6, r0
 8000a02:	e721      	b.n	8000848 <__aeabi_dadd+0x108>
 8000a04:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <__aeabi_dadd+0x380>)
 8000a06:	4285      	cmp	r5, r0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x2cc>
 8000a0a:	e093      	b.n	8000b34 <__aeabi_dadd+0x3f4>
 8000a0c:	001d      	movs	r5, r3
 8000a0e:	e6d0      	b.n	80007b2 <__aeabi_dadd+0x72>
 8000a10:	0029      	movs	r1, r5
 8000a12:	3e1f      	subs	r6, #31
 8000a14:	40f1      	lsrs	r1, r6
 8000a16:	2b20      	cmp	r3, #32
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x2dc>
 8000a1a:	e08d      	b.n	8000b38 <__aeabi_dadd+0x3f8>
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	409d      	lsls	r5, r3
 8000a22:	432f      	orrs	r7, r5
 8000a24:	1e7d      	subs	r5, r7, #1
 8000a26:	41af      	sbcs	r7, r5
 8000a28:	2400      	movs	r4, #0
 8000a2a:	430f      	orrs	r7, r1
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e744      	b.n	80008ba <__aeabi_dadd+0x17a>
 8000a30:	002b      	movs	r3, r5
 8000a32:	0008      	movs	r0, r1
 8000a34:	3b20      	subs	r3, #32
 8000a36:	40d8      	lsrs	r0, r3
 8000a38:	0003      	movs	r3, r0
 8000a3a:	2d20      	cmp	r5, #32
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x300>
 8000a3e:	e07d      	b.n	8000b3c <__aeabi_dadd+0x3fc>
 8000a40:	2040      	movs	r0, #64	; 0x40
 8000a42:	1b45      	subs	r5, r0, r5
 8000a44:	40a9      	lsls	r1, r5
 8000a46:	430a      	orrs	r2, r1
 8000a48:	1e51      	subs	r1, r2, #1
 8000a4a:	418a      	sbcs	r2, r1
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	e6c7      	b.n	80007e2 <__aeabi_dadd+0xa2>
 8000a52:	2e00      	cmp	r6, #0
 8000a54:	d050      	beq.n	8000af8 <__aeabi_dadd+0x3b8>
 8000a56:	4e1a      	ldr	r6, [pc, #104]	; (8000ac0 <__aeabi_dadd+0x380>)
 8000a58:	42b0      	cmp	r0, r6
 8000a5a:	d057      	beq.n	8000b0c <__aeabi_dadd+0x3cc>
 8000a5c:	2680      	movs	r6, #128	; 0x80
 8000a5e:	426b      	negs	r3, r5
 8000a60:	4699      	mov	r9, r3
 8000a62:	0436      	lsls	r6, r6, #16
 8000a64:	4334      	orrs	r4, r6
 8000a66:	464b      	mov	r3, r9
 8000a68:	2b38      	cmp	r3, #56	; 0x38
 8000a6a:	dd00      	ble.n	8000a6e <__aeabi_dadd+0x32e>
 8000a6c:	e0d6      	b.n	8000c1c <__aeabi_dadd+0x4dc>
 8000a6e:	2b1f      	cmp	r3, #31
 8000a70:	dd00      	ble.n	8000a74 <__aeabi_dadd+0x334>
 8000a72:	e135      	b.n	8000ce0 <__aeabi_dadd+0x5a0>
 8000a74:	2620      	movs	r6, #32
 8000a76:	1af5      	subs	r5, r6, r3
 8000a78:	0026      	movs	r6, r4
 8000a7a:	40ae      	lsls	r6, r5
 8000a7c:	46b2      	mov	sl, r6
 8000a7e:	003e      	movs	r6, r7
 8000a80:	40de      	lsrs	r6, r3
 8000a82:	46ac      	mov	ip, r5
 8000a84:	0035      	movs	r5, r6
 8000a86:	4656      	mov	r6, sl
 8000a88:	432e      	orrs	r6, r5
 8000a8a:	4665      	mov	r5, ip
 8000a8c:	40af      	lsls	r7, r5
 8000a8e:	1e7d      	subs	r5, r7, #1
 8000a90:	41af      	sbcs	r7, r5
 8000a92:	40dc      	lsrs	r4, r3
 8000a94:	4337      	orrs	r7, r6
 8000a96:	1bd7      	subs	r7, r2, r7
 8000a98:	42ba      	cmp	r2, r7
 8000a9a:	4192      	sbcs	r2, r2
 8000a9c:	1b0c      	subs	r4, r1, r4
 8000a9e:	4252      	negs	r2, r2
 8000aa0:	1aa4      	subs	r4, r4, r2
 8000aa2:	0006      	movs	r6, r0
 8000aa4:	46d8      	mov	r8, fp
 8000aa6:	e6a3      	b.n	80007f0 <__aeabi_dadd+0xb0>
 8000aa8:	4664      	mov	r4, ip
 8000aaa:	4667      	mov	r7, ip
 8000aac:	432c      	orrs	r4, r5
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x372>
 8000ab0:	e6a2      	b.n	80007f8 <__aeabi_dadd+0xb8>
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	2700      	movs	r7, #0
 8000ab8:	e706      	b.n	80008c8 <__aeabi_dadd+0x188>
 8000aba:	001e      	movs	r6, r3
 8000abc:	e6c4      	b.n	8000848 <__aeabi_dadd+0x108>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	000007ff 	.word	0x000007ff
 8000ac4:	ff7fffff 	.word	0xff7fffff
 8000ac8:	800fffff 	.word	0x800fffff
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	dc63      	bgt.n	8000b98 <__aeabi_dadd+0x458>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	1ac3      	subs	r3, r0, r3
 8000ad4:	0008      	movs	r0, r1
 8000ad6:	4098      	lsls	r0, r3
 8000ad8:	469c      	mov	ip, r3
 8000ada:	4683      	mov	fp, r0
 8000adc:	4653      	mov	r3, sl
 8000ade:	0010      	movs	r0, r2
 8000ae0:	40d8      	lsrs	r0, r3
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	4658      	mov	r0, fp
 8000ae6:	4318      	orrs	r0, r3
 8000ae8:	4663      	mov	r3, ip
 8000aea:	409a      	lsls	r2, r3
 8000aec:	1e53      	subs	r3, r2, #1
 8000aee:	419a      	sbcs	r2, r3
 8000af0:	4653      	mov	r3, sl
 8000af2:	4302      	orrs	r2, r0
 8000af4:	40d9      	lsrs	r1, r3
 8000af6:	e703      	b.n	8000900 <__aeabi_dadd+0x1c0>
 8000af8:	0026      	movs	r6, r4
 8000afa:	433e      	orrs	r6, r7
 8000afc:	d006      	beq.n	8000b0c <__aeabi_dadd+0x3cc>
 8000afe:	43eb      	mvns	r3, r5
 8000b00:	4699      	mov	r9, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0c7      	beq.n	8000a96 <__aeabi_dadd+0x356>
 8000b06:	4e94      	ldr	r6, [pc, #592]	; (8000d58 <__aeabi_dadd+0x618>)
 8000b08:	42b0      	cmp	r0, r6
 8000b0a:	d1ac      	bne.n	8000a66 <__aeabi_dadd+0x326>
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	0017      	movs	r7, r2
 8000b10:	0006      	movs	r6, r0
 8000b12:	46d8      	mov	r8, fp
 8000b14:	e698      	b.n	8000848 <__aeabi_dadd+0x108>
 8000b16:	4b90      	ldr	r3, [pc, #576]	; (8000d58 <__aeabi_dadd+0x618>)
 8000b18:	459a      	cmp	sl, r3
 8000b1a:	d00b      	beq.n	8000b34 <__aeabi_dadd+0x3f4>
 8000b1c:	4682      	mov	sl, r0
 8000b1e:	e6e7      	b.n	80008f0 <__aeabi_dadd+0x1b0>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x3e6>
 8000b24:	e09e      	b.n	8000c64 <__aeabi_dadd+0x524>
 8000b26:	0018      	movs	r0, r3
 8000b28:	4310      	orrs	r0, r2
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x3ee>
 8000b2c:	e0e9      	b.n	8000d02 <__aeabi_dadd+0x5c2>
 8000b2e:	001c      	movs	r4, r3
 8000b30:	0017      	movs	r7, r2
 8000b32:	46d8      	mov	r8, fp
 8000b34:	4e88      	ldr	r6, [pc, #544]	; (8000d58 <__aeabi_dadd+0x618>)
 8000b36:	e687      	b.n	8000848 <__aeabi_dadd+0x108>
 8000b38:	2500      	movs	r5, #0
 8000b3a:	e772      	b.n	8000a22 <__aeabi_dadd+0x2e2>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e782      	b.n	8000a46 <__aeabi_dadd+0x306>
 8000b40:	0023      	movs	r3, r4
 8000b42:	433b      	orrs	r3, r7
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x40a>
 8000b48:	e0ab      	b.n	8000ca2 <__aeabi_dadd+0x562>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x410>
 8000b4e:	e0e7      	b.n	8000d20 <__aeabi_dadd+0x5e0>
 8000b50:	000b      	movs	r3, r1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x418>
 8000b56:	e677      	b.n	8000848 <__aeabi_dadd+0x108>
 8000b58:	18ba      	adds	r2, r7, r2
 8000b5a:	42ba      	cmp	r2, r7
 8000b5c:	41bf      	sbcs	r7, r7
 8000b5e:	1864      	adds	r4, r4, r1
 8000b60:	427f      	negs	r7, r7
 8000b62:	19e4      	adds	r4, r4, r7
 8000b64:	0223      	lsls	r3, r4, #8
 8000b66:	d400      	bmi.n	8000b6a <__aeabi_dadd+0x42a>
 8000b68:	e0f2      	b.n	8000d50 <__aeabi_dadd+0x610>
 8000b6a:	4b7c      	ldr	r3, [pc, #496]	; (8000d5c <__aeabi_dadd+0x61c>)
 8000b6c:	0017      	movs	r7, r2
 8000b6e:	401c      	ands	r4, r3
 8000b70:	0006      	movs	r6, r0
 8000b72:	e669      	b.n	8000848 <__aeabi_dadd+0x108>
 8000b74:	0020      	movs	r0, r4
 8000b76:	4338      	orrs	r0, r7
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d1d1      	bne.n	8000b20 <__aeabi_dadd+0x3e0>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d15b      	bne.n	8000c38 <__aeabi_dadd+0x4f8>
 8000b80:	001c      	movs	r4, r3
 8000b82:	4314      	orrs	r4, r2
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x448>
 8000b86:	e0a8      	b.n	8000cda <__aeabi_dadd+0x59a>
 8000b88:	001c      	movs	r4, r3
 8000b8a:	0017      	movs	r7, r2
 8000b8c:	46d8      	mov	r8, fp
 8000b8e:	e65b      	b.n	8000848 <__aeabi_dadd+0x108>
 8000b90:	0006      	movs	r6, r0
 8000b92:	2400      	movs	r4, #0
 8000b94:	2700      	movs	r7, #0
 8000b96:	e697      	b.n	80008c8 <__aeabi_dadd+0x188>
 8000b98:	4650      	mov	r0, sl
 8000b9a:	000b      	movs	r3, r1
 8000b9c:	3820      	subs	r0, #32
 8000b9e:	40c3      	lsrs	r3, r0
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x46a>
 8000ba8:	e095      	b.n	8000cd6 <__aeabi_dadd+0x596>
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	4650      	mov	r0, sl
 8000bae:	1a1b      	subs	r3, r3, r0
 8000bb0:	4099      	lsls	r1, r3
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	1e51      	subs	r1, r2, #1
 8000bb6:	418a      	sbcs	r2, r1
 8000bb8:	464b      	mov	r3, r9
 8000bba:	2100      	movs	r1, #0
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	e69f      	b.n	8000900 <__aeabi_dadd+0x1c0>
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	d130      	bne.n	8000c26 <__aeabi_dadd+0x4e6>
 8000bc4:	0026      	movs	r6, r4
 8000bc6:	433e      	orrs	r6, r7
 8000bc8:	d067      	beq.n	8000c9a <__aeabi_dadd+0x55a>
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	469a      	mov	sl, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d01c      	beq.n	8000c0c <__aeabi_dadd+0x4cc>
 8000bd2:	4e61      	ldr	r6, [pc, #388]	; (8000d58 <__aeabi_dadd+0x618>)
 8000bd4:	42b0      	cmp	r0, r6
 8000bd6:	d060      	beq.n	8000c9a <__aeabi_dadd+0x55a>
 8000bd8:	4653      	mov	r3, sl
 8000bda:	2b38      	cmp	r3, #56	; 0x38
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_dadd+0x4a0>
 8000bde:	e096      	b.n	8000d0e <__aeabi_dadd+0x5ce>
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dadd+0x4a6>
 8000be4:	e09f      	b.n	8000d26 <__aeabi_dadd+0x5e6>
 8000be6:	2620      	movs	r6, #32
 8000be8:	1af3      	subs	r3, r6, r3
 8000bea:	0026      	movs	r6, r4
 8000bec:	409e      	lsls	r6, r3
 8000bee:	469c      	mov	ip, r3
 8000bf0:	46b3      	mov	fp, r6
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	003e      	movs	r6, r7
 8000bf6:	40de      	lsrs	r6, r3
 8000bf8:	0033      	movs	r3, r6
 8000bfa:	465e      	mov	r6, fp
 8000bfc:	431e      	orrs	r6, r3
 8000bfe:	4663      	mov	r3, ip
 8000c00:	409f      	lsls	r7, r3
 8000c02:	1e7b      	subs	r3, r7, #1
 8000c04:	419f      	sbcs	r7, r3
 8000c06:	4653      	mov	r3, sl
 8000c08:	40dc      	lsrs	r4, r3
 8000c0a:	4337      	orrs	r7, r6
 8000c0c:	18bf      	adds	r7, r7, r2
 8000c0e:	4297      	cmp	r7, r2
 8000c10:	4192      	sbcs	r2, r2
 8000c12:	1864      	adds	r4, r4, r1
 8000c14:	4252      	negs	r2, r2
 8000c16:	18a4      	adds	r4, r4, r2
 8000c18:	0006      	movs	r6, r0
 8000c1a:	e678      	b.n	800090e <__aeabi_dadd+0x1ce>
 8000c1c:	4327      	orrs	r7, r4
 8000c1e:	1e7c      	subs	r4, r7, #1
 8000c20:	41a7      	sbcs	r7, r4
 8000c22:	2400      	movs	r4, #0
 8000c24:	e737      	b.n	8000a96 <__aeabi_dadd+0x356>
 8000c26:	4e4c      	ldr	r6, [pc, #304]	; (8000d58 <__aeabi_dadd+0x618>)
 8000c28:	42b0      	cmp	r0, r6
 8000c2a:	d036      	beq.n	8000c9a <__aeabi_dadd+0x55a>
 8000c2c:	2680      	movs	r6, #128	; 0x80
 8000c2e:	425b      	negs	r3, r3
 8000c30:	0436      	lsls	r6, r6, #16
 8000c32:	469a      	mov	sl, r3
 8000c34:	4334      	orrs	r4, r6
 8000c36:	e7cf      	b.n	8000bd8 <__aeabi_dadd+0x498>
 8000c38:	0018      	movs	r0, r3
 8000c3a:	4310      	orrs	r0, r2
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x500>
 8000c3e:	e603      	b.n	8000848 <__aeabi_dadd+0x108>
 8000c40:	1ab8      	subs	r0, r7, r2
 8000c42:	4684      	mov	ip, r0
 8000c44:	4567      	cmp	r7, ip
 8000c46:	41ad      	sbcs	r5, r5
 8000c48:	1ae0      	subs	r0, r4, r3
 8000c4a:	426d      	negs	r5, r5
 8000c4c:	1b40      	subs	r0, r0, r5
 8000c4e:	0205      	lsls	r5, r0, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0x514>
 8000c52:	e62c      	b.n	80008ae <__aeabi_dadd+0x16e>
 8000c54:	1bd7      	subs	r7, r2, r7
 8000c56:	42ba      	cmp	r2, r7
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	1b1c      	subs	r4, r3, r4
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	1aa4      	subs	r4, r4, r2
 8000c60:	46d8      	mov	r8, fp
 8000c62:	e5f1      	b.n	8000848 <__aeabi_dadd+0x108>
 8000c64:	0018      	movs	r0, r3
 8000c66:	4310      	orrs	r0, r2
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x52c>
 8000c6a:	e763      	b.n	8000b34 <__aeabi_dadd+0x3f4>
 8000c6c:	08f8      	lsrs	r0, r7, #3
 8000c6e:	0767      	lsls	r7, r4, #29
 8000c70:	4307      	orrs	r7, r0
 8000c72:	2080      	movs	r0, #128	; 0x80
 8000c74:	08e4      	lsrs	r4, r4, #3
 8000c76:	0300      	lsls	r0, r0, #12
 8000c78:	4204      	tst	r4, r0
 8000c7a:	d008      	beq.n	8000c8e <__aeabi_dadd+0x54e>
 8000c7c:	08dd      	lsrs	r5, r3, #3
 8000c7e:	4205      	tst	r5, r0
 8000c80:	d105      	bne.n	8000c8e <__aeabi_dadd+0x54e>
 8000c82:	08d2      	lsrs	r2, r2, #3
 8000c84:	0759      	lsls	r1, r3, #29
 8000c86:	4311      	orrs	r1, r2
 8000c88:	000f      	movs	r7, r1
 8000c8a:	002c      	movs	r4, r5
 8000c8c:	46d8      	mov	r8, fp
 8000c8e:	0f7b      	lsrs	r3, r7, #29
 8000c90:	00e4      	lsls	r4, r4, #3
 8000c92:	431c      	orrs	r4, r3
 8000c94:	00ff      	lsls	r7, r7, #3
 8000c96:	4e30      	ldr	r6, [pc, #192]	; (8000d58 <__aeabi_dadd+0x618>)
 8000c98:	e5d6      	b.n	8000848 <__aeabi_dadd+0x108>
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	0017      	movs	r7, r2
 8000c9e:	0006      	movs	r6, r0
 8000ca0:	e5d2      	b.n	8000848 <__aeabi_dadd+0x108>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d038      	beq.n	8000d18 <__aeabi_dadd+0x5d8>
 8000ca6:	000b      	movs	r3, r1
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	d100      	bne.n	8000cae <__aeabi_dadd+0x56e>
 8000cac:	e742      	b.n	8000b34 <__aeabi_dadd+0x3f4>
 8000cae:	08f8      	lsrs	r0, r7, #3
 8000cb0:	0767      	lsls	r7, r4, #29
 8000cb2:	4307      	orrs	r7, r0
 8000cb4:	2080      	movs	r0, #128	; 0x80
 8000cb6:	08e4      	lsrs	r4, r4, #3
 8000cb8:	0300      	lsls	r0, r0, #12
 8000cba:	4204      	tst	r4, r0
 8000cbc:	d0e7      	beq.n	8000c8e <__aeabi_dadd+0x54e>
 8000cbe:	08cb      	lsrs	r3, r1, #3
 8000cc0:	4203      	tst	r3, r0
 8000cc2:	d1e4      	bne.n	8000c8e <__aeabi_dadd+0x54e>
 8000cc4:	08d2      	lsrs	r2, r2, #3
 8000cc6:	0749      	lsls	r1, r1, #29
 8000cc8:	4311      	orrs	r1, r2
 8000cca:	000f      	movs	r7, r1
 8000ccc:	001c      	movs	r4, r3
 8000cce:	e7de      	b.n	8000c8e <__aeabi_dadd+0x54e>
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	e5d5      	b.n	8000882 <__aeabi_dadd+0x142>
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e76b      	b.n	8000bb2 <__aeabi_dadd+0x472>
 8000cda:	2500      	movs	r5, #0
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e5f3      	b.n	80008c8 <__aeabi_dadd+0x188>
 8000ce0:	464e      	mov	r6, r9
 8000ce2:	0025      	movs	r5, r4
 8000ce4:	3e20      	subs	r6, #32
 8000ce6:	40f5      	lsrs	r5, r6
 8000ce8:	464b      	mov	r3, r9
 8000cea:	002e      	movs	r6, r5
 8000cec:	2b20      	cmp	r3, #32
 8000cee:	d02d      	beq.n	8000d4c <__aeabi_dadd+0x60c>
 8000cf0:	2540      	movs	r5, #64	; 0x40
 8000cf2:	1aed      	subs	r5, r5, r3
 8000cf4:	40ac      	lsls	r4, r5
 8000cf6:	4327      	orrs	r7, r4
 8000cf8:	1e7c      	subs	r4, r7, #1
 8000cfa:	41a7      	sbcs	r7, r4
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	4337      	orrs	r7, r6
 8000d00:	e6c9      	b.n	8000a96 <__aeabi_dadd+0x356>
 8000d02:	2480      	movs	r4, #128	; 0x80
 8000d04:	2500      	movs	r5, #0
 8000d06:	0324      	lsls	r4, r4, #12
 8000d08:	4e13      	ldr	r6, [pc, #76]	; (8000d58 <__aeabi_dadd+0x618>)
 8000d0a:	2700      	movs	r7, #0
 8000d0c:	e5dc      	b.n	80008c8 <__aeabi_dadd+0x188>
 8000d0e:	4327      	orrs	r7, r4
 8000d10:	1e7c      	subs	r4, r7, #1
 8000d12:	41a7      	sbcs	r7, r4
 8000d14:	2400      	movs	r4, #0
 8000d16:	e779      	b.n	8000c0c <__aeabi_dadd+0x4cc>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4e0e      	ldr	r6, [pc, #56]	; (8000d58 <__aeabi_dadd+0x618>)
 8000d1e:	e593      	b.n	8000848 <__aeabi_dadd+0x108>
 8000d20:	000c      	movs	r4, r1
 8000d22:	0017      	movs	r7, r2
 8000d24:	e590      	b.n	8000848 <__aeabi_dadd+0x108>
 8000d26:	4656      	mov	r6, sl
 8000d28:	0023      	movs	r3, r4
 8000d2a:	3e20      	subs	r6, #32
 8000d2c:	40f3      	lsrs	r3, r6
 8000d2e:	4699      	mov	r9, r3
 8000d30:	4653      	mov	r3, sl
 8000d32:	2b20      	cmp	r3, #32
 8000d34:	d00e      	beq.n	8000d54 <__aeabi_dadd+0x614>
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	4656      	mov	r6, sl
 8000d3a:	1b9b      	subs	r3, r3, r6
 8000d3c:	409c      	lsls	r4, r3
 8000d3e:	4327      	orrs	r7, r4
 8000d40:	1e7c      	subs	r4, r7, #1
 8000d42:	41a7      	sbcs	r7, r4
 8000d44:	464b      	mov	r3, r9
 8000d46:	2400      	movs	r4, #0
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e75f      	b.n	8000c0c <__aeabi_dadd+0x4cc>
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	e7d2      	b.n	8000cf6 <__aeabi_dadd+0x5b6>
 8000d50:	0017      	movs	r7, r2
 8000d52:	e5b2      	b.n	80008ba <__aeabi_dadd+0x17a>
 8000d54:	2400      	movs	r4, #0
 8000d56:	e7f2      	b.n	8000d3e <__aeabi_dadd+0x5fe>
 8000d58:	000007ff 	.word	0x000007ff
 8000d5c:	ff7fffff 	.word	0xff7fffff

08000d60 <__aeabi_ddiv>:
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	4657      	mov	r7, sl
 8000d64:	4645      	mov	r5, r8
 8000d66:	46de      	mov	lr, fp
 8000d68:	464e      	mov	r6, r9
 8000d6a:	b5e0      	push	{r5, r6, r7, lr}
 8000d6c:	004c      	lsls	r4, r1, #1
 8000d6e:	030e      	lsls	r6, r1, #12
 8000d70:	b087      	sub	sp, #28
 8000d72:	4683      	mov	fp, r0
 8000d74:	4692      	mov	sl, r2
 8000d76:	001d      	movs	r5, r3
 8000d78:	4680      	mov	r8, r0
 8000d7a:	0b36      	lsrs	r6, r6, #12
 8000d7c:	0d64      	lsrs	r4, r4, #21
 8000d7e:	0fcf      	lsrs	r7, r1, #31
 8000d80:	2c00      	cmp	r4, #0
 8000d82:	d04f      	beq.n	8000e24 <__aeabi_ddiv+0xc4>
 8000d84:	4b6f      	ldr	r3, [pc, #444]	; (8000f44 <__aeabi_ddiv+0x1e4>)
 8000d86:	429c      	cmp	r4, r3
 8000d88:	d035      	beq.n	8000df6 <__aeabi_ddiv+0x96>
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	0f42      	lsrs	r2, r0, #29
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	00f6      	lsls	r6, r6, #3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	4333      	orrs	r3, r6
 8000d96:	4699      	mov	r9, r3
 8000d98:	00c3      	lsls	r3, r0, #3
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <__aeabi_ddiv+0x1e8>)
 8000d9e:	2600      	movs	r6, #0
 8000da0:	469c      	mov	ip, r3
 8000da2:	2300      	movs	r3, #0
 8000da4:	4464      	add	r4, ip
 8000da6:	9303      	str	r3, [sp, #12]
 8000da8:	032b      	lsls	r3, r5, #12
 8000daa:	0b1b      	lsrs	r3, r3, #12
 8000dac:	469b      	mov	fp, r3
 8000dae:	006b      	lsls	r3, r5, #1
 8000db0:	0fed      	lsrs	r5, r5, #31
 8000db2:	4650      	mov	r0, sl
 8000db4:	0d5b      	lsrs	r3, r3, #21
 8000db6:	9501      	str	r5, [sp, #4]
 8000db8:	d05e      	beq.n	8000e78 <__aeabi_ddiv+0x118>
 8000dba:	4a62      	ldr	r2, [pc, #392]	; (8000f44 <__aeabi_ddiv+0x1e4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d053      	beq.n	8000e68 <__aeabi_ddiv+0x108>
 8000dc0:	465a      	mov	r2, fp
 8000dc2:	00d1      	lsls	r1, r2, #3
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	0f40      	lsrs	r0, r0, #29
 8000dc8:	0412      	lsls	r2, r2, #16
 8000dca:	4302      	orrs	r2, r0
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	4693      	mov	fp, r2
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	00d1      	lsls	r1, r2, #3
 8000dd4:	4a5c      	ldr	r2, [pc, #368]	; (8000f48 <__aeabi_ddiv+0x1e8>)
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4463      	add	r3, ip
 8000ddc:	0038      	movs	r0, r7
 8000dde:	4068      	eors	r0, r5
 8000de0:	4684      	mov	ip, r0
 8000de2:	9002      	str	r0, [sp, #8]
 8000de4:	1ae4      	subs	r4, r4, r3
 8000de6:	4316      	orrs	r6, r2
 8000de8:	2e0f      	cmp	r6, #15
 8000dea:	d900      	bls.n	8000dee <__aeabi_ddiv+0x8e>
 8000dec:	e0b4      	b.n	8000f58 <__aeabi_ddiv+0x1f8>
 8000dee:	4b57      	ldr	r3, [pc, #348]	; (8000f4c <__aeabi_ddiv+0x1ec>)
 8000df0:	00b6      	lsls	r6, r6, #2
 8000df2:	599b      	ldr	r3, [r3, r6]
 8000df4:	469f      	mov	pc, r3
 8000df6:	0003      	movs	r3, r0
 8000df8:	4333      	orrs	r3, r6
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	d16c      	bne.n	8000ed8 <__aeabi_ddiv+0x178>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4698      	mov	r8, r3
 8000e02:	3302      	adds	r3, #2
 8000e04:	2608      	movs	r6, #8
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	e7ce      	b.n	8000da8 <__aeabi_ddiv+0x48>
 8000e0a:	46cb      	mov	fp, r9
 8000e0c:	4641      	mov	r1, r8
 8000e0e:	9a03      	ldr	r2, [sp, #12]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	2a02      	cmp	r2, #2
 8000e14:	d165      	bne.n	8000ee2 <__aeabi_ddiv+0x182>
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	4c4a      	ldr	r4, [pc, #296]	; (8000f44 <__aeabi_ddiv+0x1e4>)
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4698      	mov	r8, r3
 8000e22:	e06b      	b.n	8000efc <__aeabi_ddiv+0x19c>
 8000e24:	0003      	movs	r3, r0
 8000e26:	4333      	orrs	r3, r6
 8000e28:	4699      	mov	r9, r3
 8000e2a:	d04e      	beq.n	8000eca <__aeabi_ddiv+0x16a>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0xd2>
 8000e30:	e1bc      	b.n	80011ac <__aeabi_ddiv+0x44c>
 8000e32:	0030      	movs	r0, r6
 8000e34:	f001 fa46 	bl	80022c4 <__clzsi2>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3b0b      	subs	r3, #11
 8000e3c:	2b1c      	cmp	r3, #28
 8000e3e:	dd00      	ble.n	8000e42 <__aeabi_ddiv+0xe2>
 8000e40:	e1ac      	b.n	800119c <__aeabi_ddiv+0x43c>
 8000e42:	221d      	movs	r2, #29
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	465a      	mov	r2, fp
 8000e48:	0001      	movs	r1, r0
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	3908      	subs	r1, #8
 8000e4e:	408e      	lsls	r6, r1
 8000e50:	0013      	movs	r3, r2
 8000e52:	4333      	orrs	r3, r6
 8000e54:	4699      	mov	r9, r3
 8000e56:	465b      	mov	r3, fp
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	4698      	mov	r8, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4c3c      	ldr	r4, [pc, #240]	; (8000f50 <__aeabi_ddiv+0x1f0>)
 8000e60:	2600      	movs	r6, #0
 8000e62:	1a24      	subs	r4, r4, r0
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	e79f      	b.n	8000da8 <__aeabi_ddiv+0x48>
 8000e68:	4651      	mov	r1, sl
 8000e6a:	465a      	mov	r2, fp
 8000e6c:	4311      	orrs	r1, r2
 8000e6e:	d129      	bne.n	8000ec4 <__aeabi_ddiv+0x164>
 8000e70:	2200      	movs	r2, #0
 8000e72:	4693      	mov	fp, r2
 8000e74:	3202      	adds	r2, #2
 8000e76:	e7b1      	b.n	8000ddc <__aeabi_ddiv+0x7c>
 8000e78:	4659      	mov	r1, fp
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	d01e      	beq.n	8000ebc <__aeabi_ddiv+0x15c>
 8000e7e:	465b      	mov	r3, fp
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_ddiv+0x126>
 8000e84:	e19e      	b.n	80011c4 <__aeabi_ddiv+0x464>
 8000e86:	4658      	mov	r0, fp
 8000e88:	f001 fa1c 	bl	80022c4 <__clzsi2>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	3b0b      	subs	r3, #11
 8000e90:	2b1c      	cmp	r3, #28
 8000e92:	dd00      	ble.n	8000e96 <__aeabi_ddiv+0x136>
 8000e94:	e18f      	b.n	80011b6 <__aeabi_ddiv+0x456>
 8000e96:	0002      	movs	r2, r0
 8000e98:	4659      	mov	r1, fp
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	468b      	mov	fp, r1
 8000ea0:	211d      	movs	r1, #29
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	4651      	mov	r1, sl
 8000ea6:	40d9      	lsrs	r1, r3
 8000ea8:	000b      	movs	r3, r1
 8000eaa:	4659      	mov	r1, fp
 8000eac:	430b      	orrs	r3, r1
 8000eae:	4651      	mov	r1, sl
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <__aeabi_ddiv+0x1f0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	e78f      	b.n	8000ddc <__aeabi_ddiv+0x7c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	469b      	mov	fp, r3
 8000ec2:	e78b      	b.n	8000ddc <__aeabi_ddiv+0x7c>
 8000ec4:	4651      	mov	r1, sl
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	e788      	b.n	8000ddc <__aeabi_ddiv+0x7c>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	4698      	mov	r8, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2604      	movs	r6, #4
 8000ed2:	2400      	movs	r4, #0
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	e767      	b.n	8000da8 <__aeabi_ddiv+0x48>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	46b1      	mov	r9, r6
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	260c      	movs	r6, #12
 8000ee0:	e762      	b.n	8000da8 <__aeabi_ddiv+0x48>
 8000ee2:	2a03      	cmp	r2, #3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x188>
 8000ee6:	e25c      	b.n	80013a2 <__aeabi_ddiv+0x642>
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_ddiv+0x190>
 8000eee:	e1e4      	b.n	80012ba <__aeabi_ddiv+0x55a>
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4698      	mov	r8, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	0312      	lsls	r2, r2, #12
 8000f00:	0b13      	lsrs	r3, r2, #12
 8000f02:	0d0a      	lsrs	r2, r1, #20
 8000f04:	0512      	lsls	r2, r2, #20
 8000f06:	431a      	orrs	r2, r3
 8000f08:	0523      	lsls	r3, r4, #20
 8000f0a:	4c12      	ldr	r4, [pc, #72]	; (8000f54 <__aeabi_ddiv+0x1f4>)
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	4022      	ands	r2, r4
 8000f10:	4313      	orrs	r3, r2
 8000f12:	4662      	mov	r2, ip
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	07d2      	lsls	r2, r2, #31
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	b007      	add	sp, #28
 8000f20:	bc3c      	pop	{r2, r3, r4, r5}
 8000f22:	4690      	mov	r8, r2
 8000f24:	4699      	mov	r9, r3
 8000f26:	46a2      	mov	sl, r4
 8000f28:	46ab      	mov	fp, r5
 8000f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	469c      	mov	ip, r3
 8000f32:	0312      	lsls	r2, r2, #12
 8000f34:	4698      	mov	r8, r3
 8000f36:	4c03      	ldr	r4, [pc, #12]	; (8000f44 <__aeabi_ddiv+0x1e4>)
 8000f38:	e7e0      	b.n	8000efc <__aeabi_ddiv+0x19c>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4c01      	ldr	r4, [pc, #4]	; (8000f44 <__aeabi_ddiv+0x1e4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4698      	mov	r8, r3
 8000f42:	e7db      	b.n	8000efc <__aeabi_ddiv+0x19c>
 8000f44:	000007ff 	.word	0x000007ff
 8000f48:	fffffc01 	.word	0xfffffc01
 8000f4c:	0800c03c 	.word	0x0800c03c
 8000f50:	fffffc0d 	.word	0xfffffc0d
 8000f54:	800fffff 	.word	0x800fffff
 8000f58:	45d9      	cmp	r9, fp
 8000f5a:	d900      	bls.n	8000f5e <__aeabi_ddiv+0x1fe>
 8000f5c:	e139      	b.n	80011d2 <__aeabi_ddiv+0x472>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x202>
 8000f60:	e134      	b.n	80011cc <__aeabi_ddiv+0x46c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	4646      	mov	r6, r8
 8000f66:	464d      	mov	r5, r9
 8000f68:	469a      	mov	sl, r3
 8000f6a:	3c01      	subs	r4, #1
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	0e0a      	lsrs	r2, r1, #24
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	431a      	orrs	r2, r3
 8000f74:	020b      	lsls	r3, r1, #8
 8000f76:	0c17      	lsrs	r7, r2, #16
 8000f78:	9303      	str	r3, [sp, #12]
 8000f7a:	0413      	lsls	r3, r2, #16
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	0039      	movs	r1, r7
 8000f80:	0028      	movs	r0, r5
 8000f82:	4690      	mov	r8, r2
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f7ff f8e3 	bl	8000150 <__udivsi3>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	4683      	mov	fp, r0
 8000f90:	435a      	muls	r2, r3
 8000f92:	0028      	movs	r0, r5
 8000f94:	0039      	movs	r1, r7
 8000f96:	4691      	mov	r9, r2
 8000f98:	f7ff f960 	bl	800025c <__aeabi_uidivmod>
 8000f9c:	0c35      	lsrs	r5, r6, #16
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	430d      	orrs	r5, r1
 8000fa2:	45a9      	cmp	r9, r5
 8000fa4:	d90d      	bls.n	8000fc2 <__aeabi_ddiv+0x262>
 8000fa6:	465b      	mov	r3, fp
 8000fa8:	4445      	add	r5, r8
 8000faa:	3b01      	subs	r3, #1
 8000fac:	45a8      	cmp	r8, r5
 8000fae:	d900      	bls.n	8000fb2 <__aeabi_ddiv+0x252>
 8000fb0:	e13a      	b.n	8001228 <__aeabi_ddiv+0x4c8>
 8000fb2:	45a9      	cmp	r9, r5
 8000fb4:	d800      	bhi.n	8000fb8 <__aeabi_ddiv+0x258>
 8000fb6:	e137      	b.n	8001228 <__aeabi_ddiv+0x4c8>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	425b      	negs	r3, r3
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	4445      	add	r5, r8
 8000fc0:	44e3      	add	fp, ip
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	1aeb      	subs	r3, r5, r3
 8000fc6:	0039      	movs	r1, r7
 8000fc8:	0018      	movs	r0, r3
 8000fca:	9304      	str	r3, [sp, #16]
 8000fcc:	f7ff f8c0 	bl	8000150 <__udivsi3>
 8000fd0:	9b01      	ldr	r3, [sp, #4]
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	4343      	muls	r3, r0
 8000fd6:	0039      	movs	r1, r7
 8000fd8:	9804      	ldr	r0, [sp, #16]
 8000fda:	4699      	mov	r9, r3
 8000fdc:	f7ff f93e 	bl	800025c <__aeabi_uidivmod>
 8000fe0:	0433      	lsls	r3, r6, #16
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c1b      	lsrs	r3, r3, #16
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	4599      	cmp	r9, r3
 8000fea:	d909      	bls.n	8001000 <__aeabi_ddiv+0x2a0>
 8000fec:	4443      	add	r3, r8
 8000fee:	1e6a      	subs	r2, r5, #1
 8000ff0:	4598      	cmp	r8, r3
 8000ff2:	d900      	bls.n	8000ff6 <__aeabi_ddiv+0x296>
 8000ff4:	e11a      	b.n	800122c <__aeabi_ddiv+0x4cc>
 8000ff6:	4599      	cmp	r9, r3
 8000ff8:	d800      	bhi.n	8000ffc <__aeabi_ddiv+0x29c>
 8000ffa:	e117      	b.n	800122c <__aeabi_ddiv+0x4cc>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4443      	add	r3, r8
 8001000:	464a      	mov	r2, r9
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	465a      	mov	r2, fp
 8001006:	0412      	lsls	r2, r2, #16
 8001008:	432a      	orrs	r2, r5
 800100a:	9903      	ldr	r1, [sp, #12]
 800100c:	4693      	mov	fp, r2
 800100e:	0c10      	lsrs	r0, r2, #16
 8001010:	0c0a      	lsrs	r2, r1, #16
 8001012:	4691      	mov	r9, r2
 8001014:	0409      	lsls	r1, r1, #16
 8001016:	465a      	mov	r2, fp
 8001018:	0c09      	lsrs	r1, r1, #16
 800101a:	464e      	mov	r6, r9
 800101c:	000d      	movs	r5, r1
 800101e:	0412      	lsls	r2, r2, #16
 8001020:	0c12      	lsrs	r2, r2, #16
 8001022:	4345      	muls	r5, r0
 8001024:	9105      	str	r1, [sp, #20]
 8001026:	4351      	muls	r1, r2
 8001028:	4372      	muls	r2, r6
 800102a:	4370      	muls	r0, r6
 800102c:	1952      	adds	r2, r2, r5
 800102e:	0c0e      	lsrs	r6, r1, #16
 8001030:	18b2      	adds	r2, r6, r2
 8001032:	4295      	cmp	r5, r2
 8001034:	d903      	bls.n	800103e <__aeabi_ddiv+0x2de>
 8001036:	2580      	movs	r5, #128	; 0x80
 8001038:	026d      	lsls	r5, r5, #9
 800103a:	46ac      	mov	ip, r5
 800103c:	4460      	add	r0, ip
 800103e:	0c15      	lsrs	r5, r2, #16
 8001040:	0409      	lsls	r1, r1, #16
 8001042:	0412      	lsls	r2, r2, #16
 8001044:	0c09      	lsrs	r1, r1, #16
 8001046:	1828      	adds	r0, r5, r0
 8001048:	1852      	adds	r2, r2, r1
 800104a:	4283      	cmp	r3, r0
 800104c:	d200      	bcs.n	8001050 <__aeabi_ddiv+0x2f0>
 800104e:	e0ce      	b.n	80011ee <__aeabi_ddiv+0x48e>
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x2f4>
 8001052:	e0c8      	b.n	80011e6 <__aeabi_ddiv+0x486>
 8001054:	1a1d      	subs	r5, r3, r0
 8001056:	4653      	mov	r3, sl
 8001058:	1a9e      	subs	r6, r3, r2
 800105a:	45b2      	cmp	sl, r6
 800105c:	4192      	sbcs	r2, r2
 800105e:	4252      	negs	r2, r2
 8001060:	1aab      	subs	r3, r5, r2
 8001062:	469a      	mov	sl, r3
 8001064:	4598      	cmp	r8, r3
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x30a>
 8001068:	e117      	b.n	800129a <__aeabi_ddiv+0x53a>
 800106a:	0039      	movs	r1, r7
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f86f 	bl	8000150 <__udivsi3>
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	0005      	movs	r5, r0
 8001076:	4343      	muls	r3, r0
 8001078:	0039      	movs	r1, r7
 800107a:	4650      	mov	r0, sl
 800107c:	9304      	str	r3, [sp, #16]
 800107e:	f7ff f8ed 	bl	800025c <__aeabi_uidivmod>
 8001082:	9804      	ldr	r0, [sp, #16]
 8001084:	040b      	lsls	r3, r1, #16
 8001086:	0c31      	lsrs	r1, r6, #16
 8001088:	4319      	orrs	r1, r3
 800108a:	4288      	cmp	r0, r1
 800108c:	d909      	bls.n	80010a2 <__aeabi_ddiv+0x342>
 800108e:	4441      	add	r1, r8
 8001090:	1e6b      	subs	r3, r5, #1
 8001092:	4588      	cmp	r8, r1
 8001094:	d900      	bls.n	8001098 <__aeabi_ddiv+0x338>
 8001096:	e107      	b.n	80012a8 <__aeabi_ddiv+0x548>
 8001098:	4288      	cmp	r0, r1
 800109a:	d800      	bhi.n	800109e <__aeabi_ddiv+0x33e>
 800109c:	e104      	b.n	80012a8 <__aeabi_ddiv+0x548>
 800109e:	3d02      	subs	r5, #2
 80010a0:	4441      	add	r1, r8
 80010a2:	9b04      	ldr	r3, [sp, #16]
 80010a4:	1acb      	subs	r3, r1, r3
 80010a6:	0018      	movs	r0, r3
 80010a8:	0039      	movs	r1, r7
 80010aa:	9304      	str	r3, [sp, #16]
 80010ac:	f7ff f850 	bl	8000150 <__udivsi3>
 80010b0:	9b01      	ldr	r3, [sp, #4]
 80010b2:	4682      	mov	sl, r0
 80010b4:	4343      	muls	r3, r0
 80010b6:	0039      	movs	r1, r7
 80010b8:	9804      	ldr	r0, [sp, #16]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f7ff f8ce 	bl	800025c <__aeabi_uidivmod>
 80010c0:	9801      	ldr	r0, [sp, #4]
 80010c2:	040b      	lsls	r3, r1, #16
 80010c4:	0431      	lsls	r1, r6, #16
 80010c6:	0c09      	lsrs	r1, r1, #16
 80010c8:	4319      	orrs	r1, r3
 80010ca:	4288      	cmp	r0, r1
 80010cc:	d90d      	bls.n	80010ea <__aeabi_ddiv+0x38a>
 80010ce:	4653      	mov	r3, sl
 80010d0:	4441      	add	r1, r8
 80010d2:	3b01      	subs	r3, #1
 80010d4:	4588      	cmp	r8, r1
 80010d6:	d900      	bls.n	80010da <__aeabi_ddiv+0x37a>
 80010d8:	e0e8      	b.n	80012ac <__aeabi_ddiv+0x54c>
 80010da:	4288      	cmp	r0, r1
 80010dc:	d800      	bhi.n	80010e0 <__aeabi_ddiv+0x380>
 80010de:	e0e5      	b.n	80012ac <__aeabi_ddiv+0x54c>
 80010e0:	2302      	movs	r3, #2
 80010e2:	425b      	negs	r3, r3
 80010e4:	469c      	mov	ip, r3
 80010e6:	4441      	add	r1, r8
 80010e8:	44e2      	add	sl, ip
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	042d      	lsls	r5, r5, #16
 80010ee:	1ace      	subs	r6, r1, r3
 80010f0:	4651      	mov	r1, sl
 80010f2:	4329      	orrs	r1, r5
 80010f4:	9d05      	ldr	r5, [sp, #20]
 80010f6:	464f      	mov	r7, r9
 80010f8:	002a      	movs	r2, r5
 80010fa:	040b      	lsls	r3, r1, #16
 80010fc:	0c08      	lsrs	r0, r1, #16
 80010fe:	0c1b      	lsrs	r3, r3, #16
 8001100:	435a      	muls	r2, r3
 8001102:	4345      	muls	r5, r0
 8001104:	437b      	muls	r3, r7
 8001106:	4378      	muls	r0, r7
 8001108:	195b      	adds	r3, r3, r5
 800110a:	0c17      	lsrs	r7, r2, #16
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	429d      	cmp	r5, r3
 8001110:	d903      	bls.n	800111a <__aeabi_ddiv+0x3ba>
 8001112:	2580      	movs	r5, #128	; 0x80
 8001114:	026d      	lsls	r5, r5, #9
 8001116:	46ac      	mov	ip, r5
 8001118:	4460      	add	r0, ip
 800111a:	0c1d      	lsrs	r5, r3, #16
 800111c:	0412      	lsls	r2, r2, #16
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	0c12      	lsrs	r2, r2, #16
 8001122:	1828      	adds	r0, r5, r0
 8001124:	189b      	adds	r3, r3, r2
 8001126:	4286      	cmp	r6, r0
 8001128:	d200      	bcs.n	800112c <__aeabi_ddiv+0x3cc>
 800112a:	e093      	b.n	8001254 <__aeabi_ddiv+0x4f4>
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3d0>
 800112e:	e08e      	b.n	800124e <__aeabi_ddiv+0x4ee>
 8001130:	2301      	movs	r3, #1
 8001132:	4319      	orrs	r1, r3
 8001134:	4ba0      	ldr	r3, [pc, #640]	; (80013b8 <__aeabi_ddiv+0x658>)
 8001136:	18e3      	adds	r3, r4, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	dc00      	bgt.n	800113e <__aeabi_ddiv+0x3de>
 800113c:	e099      	b.n	8001272 <__aeabi_ddiv+0x512>
 800113e:	074a      	lsls	r2, r1, #29
 8001140:	d000      	beq.n	8001144 <__aeabi_ddiv+0x3e4>
 8001142:	e09e      	b.n	8001282 <__aeabi_ddiv+0x522>
 8001144:	465a      	mov	r2, fp
 8001146:	01d2      	lsls	r2, r2, #7
 8001148:	d506      	bpl.n	8001158 <__aeabi_ddiv+0x3f8>
 800114a:	465a      	mov	r2, fp
 800114c:	4b9b      	ldr	r3, [pc, #620]	; (80013bc <__aeabi_ddiv+0x65c>)
 800114e:	401a      	ands	r2, r3
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	4693      	mov	fp, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	18e3      	adds	r3, r4, r3
 8001158:	4a99      	ldr	r2, [pc, #612]	; (80013c0 <__aeabi_ddiv+0x660>)
 800115a:	4293      	cmp	r3, r2
 800115c:	dd68      	ble.n	8001230 <__aeabi_ddiv+0x4d0>
 800115e:	2301      	movs	r3, #1
 8001160:	9a02      	ldr	r2, [sp, #8]
 8001162:	4c98      	ldr	r4, [pc, #608]	; (80013c4 <__aeabi_ddiv+0x664>)
 8001164:	401a      	ands	r2, r3
 8001166:	2300      	movs	r3, #0
 8001168:	4694      	mov	ip, r2
 800116a:	4698      	mov	r8, r3
 800116c:	2200      	movs	r2, #0
 800116e:	e6c5      	b.n	8000efc <__aeabi_ddiv+0x19c>
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	464b      	mov	r3, r9
 8001174:	0312      	lsls	r2, r2, #12
 8001176:	4213      	tst	r3, r2
 8001178:	d00a      	beq.n	8001190 <__aeabi_ddiv+0x430>
 800117a:	465b      	mov	r3, fp
 800117c:	4213      	tst	r3, r2
 800117e:	d106      	bne.n	800118e <__aeabi_ddiv+0x42e>
 8001180:	431a      	orrs	r2, r3
 8001182:	0312      	lsls	r2, r2, #12
 8001184:	0b12      	lsrs	r2, r2, #12
 8001186:	46ac      	mov	ip, r5
 8001188:	4688      	mov	r8, r1
 800118a:	4c8e      	ldr	r4, [pc, #568]	; (80013c4 <__aeabi_ddiv+0x664>)
 800118c:	e6b6      	b.n	8000efc <__aeabi_ddiv+0x19c>
 800118e:	464b      	mov	r3, r9
 8001190:	431a      	orrs	r2, r3
 8001192:	0312      	lsls	r2, r2, #12
 8001194:	0b12      	lsrs	r2, r2, #12
 8001196:	46bc      	mov	ip, r7
 8001198:	4c8a      	ldr	r4, [pc, #552]	; (80013c4 <__aeabi_ddiv+0x664>)
 800119a:	e6af      	b.n	8000efc <__aeabi_ddiv+0x19c>
 800119c:	0003      	movs	r3, r0
 800119e:	465a      	mov	r2, fp
 80011a0:	3b28      	subs	r3, #40	; 0x28
 80011a2:	409a      	lsls	r2, r3
 80011a4:	2300      	movs	r3, #0
 80011a6:	4691      	mov	r9, r2
 80011a8:	4698      	mov	r8, r3
 80011aa:	e657      	b.n	8000e5c <__aeabi_ddiv+0xfc>
 80011ac:	4658      	mov	r0, fp
 80011ae:	f001 f889 	bl	80022c4 <__clzsi2>
 80011b2:	3020      	adds	r0, #32
 80011b4:	e640      	b.n	8000e38 <__aeabi_ddiv+0xd8>
 80011b6:	0003      	movs	r3, r0
 80011b8:	4652      	mov	r2, sl
 80011ba:	3b28      	subs	r3, #40	; 0x28
 80011bc:	409a      	lsls	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	4693      	mov	fp, r2
 80011c2:	e677      	b.n	8000eb4 <__aeabi_ddiv+0x154>
 80011c4:	f001 f87e 	bl	80022c4 <__clzsi2>
 80011c8:	3020      	adds	r0, #32
 80011ca:	e65f      	b.n	8000e8c <__aeabi_ddiv+0x12c>
 80011cc:	4588      	cmp	r8, r1
 80011ce:	d200      	bcs.n	80011d2 <__aeabi_ddiv+0x472>
 80011d0:	e6c7      	b.n	8000f62 <__aeabi_ddiv+0x202>
 80011d2:	464b      	mov	r3, r9
 80011d4:	07de      	lsls	r6, r3, #31
 80011d6:	085d      	lsrs	r5, r3, #1
 80011d8:	4643      	mov	r3, r8
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	431e      	orrs	r6, r3
 80011de:	4643      	mov	r3, r8
 80011e0:	07db      	lsls	r3, r3, #31
 80011e2:	469a      	mov	sl, r3
 80011e4:	e6c2      	b.n	8000f6c <__aeabi_ddiv+0x20c>
 80011e6:	2500      	movs	r5, #0
 80011e8:	4592      	cmp	sl, r2
 80011ea:	d300      	bcc.n	80011ee <__aeabi_ddiv+0x48e>
 80011ec:	e733      	b.n	8001056 <__aeabi_ddiv+0x2f6>
 80011ee:	9e03      	ldr	r6, [sp, #12]
 80011f0:	4659      	mov	r1, fp
 80011f2:	46b4      	mov	ip, r6
 80011f4:	44e2      	add	sl, ip
 80011f6:	45b2      	cmp	sl, r6
 80011f8:	41ad      	sbcs	r5, r5
 80011fa:	426d      	negs	r5, r5
 80011fc:	4445      	add	r5, r8
 80011fe:	18eb      	adds	r3, r5, r3
 8001200:	3901      	subs	r1, #1
 8001202:	4598      	cmp	r8, r3
 8001204:	d207      	bcs.n	8001216 <__aeabi_ddiv+0x4b6>
 8001206:	4298      	cmp	r0, r3
 8001208:	d900      	bls.n	800120c <__aeabi_ddiv+0x4ac>
 800120a:	e07f      	b.n	800130c <__aeabi_ddiv+0x5ac>
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x4b0>
 800120e:	e0bc      	b.n	800138a <__aeabi_ddiv+0x62a>
 8001210:	1a1d      	subs	r5, r3, r0
 8001212:	468b      	mov	fp, r1
 8001214:	e71f      	b.n	8001056 <__aeabi_ddiv+0x2f6>
 8001216:	4598      	cmp	r8, r3
 8001218:	d1fa      	bne.n	8001210 <__aeabi_ddiv+0x4b0>
 800121a:	9d03      	ldr	r5, [sp, #12]
 800121c:	4555      	cmp	r5, sl
 800121e:	d9f2      	bls.n	8001206 <__aeabi_ddiv+0x4a6>
 8001220:	4643      	mov	r3, r8
 8001222:	468b      	mov	fp, r1
 8001224:	1a1d      	subs	r5, r3, r0
 8001226:	e716      	b.n	8001056 <__aeabi_ddiv+0x2f6>
 8001228:	469b      	mov	fp, r3
 800122a:	e6ca      	b.n	8000fc2 <__aeabi_ddiv+0x262>
 800122c:	0015      	movs	r5, r2
 800122e:	e6e7      	b.n	8001000 <__aeabi_ddiv+0x2a0>
 8001230:	465a      	mov	r2, fp
 8001232:	08c9      	lsrs	r1, r1, #3
 8001234:	0752      	lsls	r2, r2, #29
 8001236:	430a      	orrs	r2, r1
 8001238:	055b      	lsls	r3, r3, #21
 800123a:	4690      	mov	r8, r2
 800123c:	0d5c      	lsrs	r4, r3, #21
 800123e:	465a      	mov	r2, fp
 8001240:	2301      	movs	r3, #1
 8001242:	9902      	ldr	r1, [sp, #8]
 8001244:	0252      	lsls	r2, r2, #9
 8001246:	4019      	ands	r1, r3
 8001248:	0b12      	lsrs	r2, r2, #12
 800124a:	468c      	mov	ip, r1
 800124c:	e656      	b.n	8000efc <__aeabi_ddiv+0x19c>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x4f4>
 8001252:	e76f      	b.n	8001134 <__aeabi_ddiv+0x3d4>
 8001254:	4446      	add	r6, r8
 8001256:	1e4a      	subs	r2, r1, #1
 8001258:	45b0      	cmp	r8, r6
 800125a:	d929      	bls.n	80012b0 <__aeabi_ddiv+0x550>
 800125c:	0011      	movs	r1, r2
 800125e:	4286      	cmp	r6, r0
 8001260:	d000      	beq.n	8001264 <__aeabi_ddiv+0x504>
 8001262:	e765      	b.n	8001130 <__aeabi_ddiv+0x3d0>
 8001264:	9a03      	ldr	r2, [sp, #12]
 8001266:	4293      	cmp	r3, r2
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x50c>
 800126a:	e761      	b.n	8001130 <__aeabi_ddiv+0x3d0>
 800126c:	e762      	b.n	8001134 <__aeabi_ddiv+0x3d4>
 800126e:	2101      	movs	r1, #1
 8001270:	4249      	negs	r1, r1
 8001272:	2001      	movs	r0, #1
 8001274:	1ac2      	subs	r2, r0, r3
 8001276:	2a38      	cmp	r2, #56	; 0x38
 8001278:	dd21      	ble.n	80012be <__aeabi_ddiv+0x55e>
 800127a:	9b02      	ldr	r3, [sp, #8]
 800127c:	4003      	ands	r3, r0
 800127e:	469c      	mov	ip, r3
 8001280:	e638      	b.n	8000ef4 <__aeabi_ddiv+0x194>
 8001282:	220f      	movs	r2, #15
 8001284:	400a      	ands	r2, r1
 8001286:	2a04      	cmp	r2, #4
 8001288:	d100      	bne.n	800128c <__aeabi_ddiv+0x52c>
 800128a:	e75b      	b.n	8001144 <__aeabi_ddiv+0x3e4>
 800128c:	000a      	movs	r2, r1
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	4493      	add	fp, r2
 8001298:	e754      	b.n	8001144 <__aeabi_ddiv+0x3e4>
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <__aeabi_ddiv+0x658>)
 800129c:	18e3      	adds	r3, r4, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dde5      	ble.n	800126e <__aeabi_ddiv+0x50e>
 80012a2:	2201      	movs	r2, #1
 80012a4:	4252      	negs	r2, r2
 80012a6:	e7f2      	b.n	800128e <__aeabi_ddiv+0x52e>
 80012a8:	001d      	movs	r5, r3
 80012aa:	e6fa      	b.n	80010a2 <__aeabi_ddiv+0x342>
 80012ac:	469a      	mov	sl, r3
 80012ae:	e71c      	b.n	80010ea <__aeabi_ddiv+0x38a>
 80012b0:	42b0      	cmp	r0, r6
 80012b2:	d839      	bhi.n	8001328 <__aeabi_ddiv+0x5c8>
 80012b4:	d06e      	beq.n	8001394 <__aeabi_ddiv+0x634>
 80012b6:	0011      	movs	r1, r2
 80012b8:	e73a      	b.n	8001130 <__aeabi_ddiv+0x3d0>
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	e73a      	b.n	8001134 <__aeabi_ddiv+0x3d4>
 80012be:	2a1f      	cmp	r2, #31
 80012c0:	dc3c      	bgt.n	800133c <__aeabi_ddiv+0x5dc>
 80012c2:	2320      	movs	r3, #32
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	000c      	movs	r4, r1
 80012c8:	4658      	mov	r0, fp
 80012ca:	4099      	lsls	r1, r3
 80012cc:	4098      	lsls	r0, r3
 80012ce:	1e4b      	subs	r3, r1, #1
 80012d0:	4199      	sbcs	r1, r3
 80012d2:	465b      	mov	r3, fp
 80012d4:	40d4      	lsrs	r4, r2
 80012d6:	40d3      	lsrs	r3, r2
 80012d8:	4320      	orrs	r0, r4
 80012da:	4308      	orrs	r0, r1
 80012dc:	001a      	movs	r2, r3
 80012de:	0743      	lsls	r3, r0, #29
 80012e0:	d009      	beq.n	80012f6 <__aeabi_ddiv+0x596>
 80012e2:	230f      	movs	r3, #15
 80012e4:	4003      	ands	r3, r0
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d005      	beq.n	80012f6 <__aeabi_ddiv+0x596>
 80012ea:	0001      	movs	r1, r0
 80012ec:	1d08      	adds	r0, r1, #4
 80012ee:	4288      	cmp	r0, r1
 80012f0:	419b      	sbcs	r3, r3
 80012f2:	425b      	negs	r3, r3
 80012f4:	18d2      	adds	r2, r2, r3
 80012f6:	0213      	lsls	r3, r2, #8
 80012f8:	d53a      	bpl.n	8001370 <__aeabi_ddiv+0x610>
 80012fa:	2301      	movs	r3, #1
 80012fc:	9a02      	ldr	r2, [sp, #8]
 80012fe:	2401      	movs	r4, #1
 8001300:	401a      	ands	r2, r3
 8001302:	2300      	movs	r3, #0
 8001304:	4694      	mov	ip, r2
 8001306:	4698      	mov	r8, r3
 8001308:	2200      	movs	r2, #0
 800130a:	e5f7      	b.n	8000efc <__aeabi_ddiv+0x19c>
 800130c:	2102      	movs	r1, #2
 800130e:	4249      	negs	r1, r1
 8001310:	468c      	mov	ip, r1
 8001312:	9d03      	ldr	r5, [sp, #12]
 8001314:	44e3      	add	fp, ip
 8001316:	46ac      	mov	ip, r5
 8001318:	44e2      	add	sl, ip
 800131a:	45aa      	cmp	sl, r5
 800131c:	41ad      	sbcs	r5, r5
 800131e:	426d      	negs	r5, r5
 8001320:	4445      	add	r5, r8
 8001322:	18ed      	adds	r5, r5, r3
 8001324:	1a2d      	subs	r5, r5, r0
 8001326:	e696      	b.n	8001056 <__aeabi_ddiv+0x2f6>
 8001328:	1e8a      	subs	r2, r1, #2
 800132a:	9903      	ldr	r1, [sp, #12]
 800132c:	004d      	lsls	r5, r1, #1
 800132e:	428d      	cmp	r5, r1
 8001330:	4189      	sbcs	r1, r1
 8001332:	4249      	negs	r1, r1
 8001334:	4441      	add	r1, r8
 8001336:	1876      	adds	r6, r6, r1
 8001338:	9503      	str	r5, [sp, #12]
 800133a:	e78f      	b.n	800125c <__aeabi_ddiv+0x4fc>
 800133c:	201f      	movs	r0, #31
 800133e:	4240      	negs	r0, r0
 8001340:	1ac3      	subs	r3, r0, r3
 8001342:	4658      	mov	r0, fp
 8001344:	40d8      	lsrs	r0, r3
 8001346:	0003      	movs	r3, r0
 8001348:	2a20      	cmp	r2, #32
 800134a:	d028      	beq.n	800139e <__aeabi_ddiv+0x63e>
 800134c:	2040      	movs	r0, #64	; 0x40
 800134e:	465d      	mov	r5, fp
 8001350:	1a82      	subs	r2, r0, r2
 8001352:	4095      	lsls	r5, r2
 8001354:	4329      	orrs	r1, r5
 8001356:	1e4a      	subs	r2, r1, #1
 8001358:	4191      	sbcs	r1, r2
 800135a:	4319      	orrs	r1, r3
 800135c:	2307      	movs	r3, #7
 800135e:	2200      	movs	r2, #0
 8001360:	400b      	ands	r3, r1
 8001362:	d009      	beq.n	8001378 <__aeabi_ddiv+0x618>
 8001364:	230f      	movs	r3, #15
 8001366:	2200      	movs	r2, #0
 8001368:	400b      	ands	r3, r1
 800136a:	0008      	movs	r0, r1
 800136c:	2b04      	cmp	r3, #4
 800136e:	d1bd      	bne.n	80012ec <__aeabi_ddiv+0x58c>
 8001370:	0001      	movs	r1, r0
 8001372:	0753      	lsls	r3, r2, #29
 8001374:	0252      	lsls	r2, r2, #9
 8001376:	0b12      	lsrs	r2, r2, #12
 8001378:	08c9      	lsrs	r1, r1, #3
 800137a:	4319      	orrs	r1, r3
 800137c:	2301      	movs	r3, #1
 800137e:	4688      	mov	r8, r1
 8001380:	9902      	ldr	r1, [sp, #8]
 8001382:	2400      	movs	r4, #0
 8001384:	4019      	ands	r1, r3
 8001386:	468c      	mov	ip, r1
 8001388:	e5b8      	b.n	8000efc <__aeabi_ddiv+0x19c>
 800138a:	4552      	cmp	r2, sl
 800138c:	d8be      	bhi.n	800130c <__aeabi_ddiv+0x5ac>
 800138e:	468b      	mov	fp, r1
 8001390:	2500      	movs	r5, #0
 8001392:	e660      	b.n	8001056 <__aeabi_ddiv+0x2f6>
 8001394:	9d03      	ldr	r5, [sp, #12]
 8001396:	429d      	cmp	r5, r3
 8001398:	d3c6      	bcc.n	8001328 <__aeabi_ddiv+0x5c8>
 800139a:	0011      	movs	r1, r2
 800139c:	e762      	b.n	8001264 <__aeabi_ddiv+0x504>
 800139e:	2500      	movs	r5, #0
 80013a0:	e7d8      	b.n	8001354 <__aeabi_ddiv+0x5f4>
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	465b      	mov	r3, fp
 80013a6:	0312      	lsls	r2, r2, #12
 80013a8:	431a      	orrs	r2, r3
 80013aa:	9b01      	ldr	r3, [sp, #4]
 80013ac:	0312      	lsls	r2, r2, #12
 80013ae:	0b12      	lsrs	r2, r2, #12
 80013b0:	469c      	mov	ip, r3
 80013b2:	4688      	mov	r8, r1
 80013b4:	4c03      	ldr	r4, [pc, #12]	; (80013c4 <__aeabi_ddiv+0x664>)
 80013b6:	e5a1      	b.n	8000efc <__aeabi_ddiv+0x19c>
 80013b8:	000003ff 	.word	0x000003ff
 80013bc:	feffffff 	.word	0xfeffffff
 80013c0:	000007fe 	.word	0x000007fe
 80013c4:	000007ff 	.word	0x000007ff

080013c8 <__eqdf2>:
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	464f      	mov	r7, r9
 80013cc:	4646      	mov	r6, r8
 80013ce:	46d6      	mov	lr, sl
 80013d0:	005c      	lsls	r4, r3, #1
 80013d2:	b5c0      	push	{r6, r7, lr}
 80013d4:	031f      	lsls	r7, r3, #12
 80013d6:	0fdb      	lsrs	r3, r3, #31
 80013d8:	469a      	mov	sl, r3
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <__eqdf2+0x70>)
 80013dc:	030e      	lsls	r6, r1, #12
 80013de:	004d      	lsls	r5, r1, #1
 80013e0:	4684      	mov	ip, r0
 80013e2:	4680      	mov	r8, r0
 80013e4:	0b36      	lsrs	r6, r6, #12
 80013e6:	0d6d      	lsrs	r5, r5, #21
 80013e8:	0fc9      	lsrs	r1, r1, #31
 80013ea:	4691      	mov	r9, r2
 80013ec:	0b3f      	lsrs	r7, r7, #12
 80013ee:	0d64      	lsrs	r4, r4, #21
 80013f0:	2001      	movs	r0, #1
 80013f2:	429d      	cmp	r5, r3
 80013f4:	d008      	beq.n	8001408 <__eqdf2+0x40>
 80013f6:	429c      	cmp	r4, r3
 80013f8:	d001      	beq.n	80013fe <__eqdf2+0x36>
 80013fa:	42a5      	cmp	r5, r4
 80013fc:	d00b      	beq.n	8001416 <__eqdf2+0x4e>
 80013fe:	bc1c      	pop	{r2, r3, r4}
 8001400:	4690      	mov	r8, r2
 8001402:	4699      	mov	r9, r3
 8001404:	46a2      	mov	sl, r4
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001408:	4663      	mov	r3, ip
 800140a:	4333      	orrs	r3, r6
 800140c:	d1f7      	bne.n	80013fe <__eqdf2+0x36>
 800140e:	42ac      	cmp	r4, r5
 8001410:	d1f5      	bne.n	80013fe <__eqdf2+0x36>
 8001412:	433a      	orrs	r2, r7
 8001414:	d1f3      	bne.n	80013fe <__eqdf2+0x36>
 8001416:	2001      	movs	r0, #1
 8001418:	42be      	cmp	r6, r7
 800141a:	d1f0      	bne.n	80013fe <__eqdf2+0x36>
 800141c:	45c8      	cmp	r8, r9
 800141e:	d1ee      	bne.n	80013fe <__eqdf2+0x36>
 8001420:	4551      	cmp	r1, sl
 8001422:	d007      	beq.n	8001434 <__eqdf2+0x6c>
 8001424:	2d00      	cmp	r5, #0
 8001426:	d1ea      	bne.n	80013fe <__eqdf2+0x36>
 8001428:	4663      	mov	r3, ip
 800142a:	431e      	orrs	r6, r3
 800142c:	0030      	movs	r0, r6
 800142e:	1e46      	subs	r6, r0, #1
 8001430:	41b0      	sbcs	r0, r6
 8001432:	e7e4      	b.n	80013fe <__eqdf2+0x36>
 8001434:	2000      	movs	r0, #0
 8001436:	e7e2      	b.n	80013fe <__eqdf2+0x36>
 8001438:	000007ff 	.word	0x000007ff

0800143c <__gedf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4645      	mov	r5, r8
 8001440:	46de      	mov	lr, fp
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	031f      	lsls	r7, r3, #12
 800144a:	0b3d      	lsrs	r5, r7, #12
 800144c:	4f2c      	ldr	r7, [pc, #176]	; (8001500 <__gedf2+0xc4>)
 800144e:	030e      	lsls	r6, r1, #12
 8001450:	004c      	lsls	r4, r1, #1
 8001452:	46ab      	mov	fp, r5
 8001454:	005d      	lsls	r5, r3, #1
 8001456:	4684      	mov	ip, r0
 8001458:	0b36      	lsrs	r6, r6, #12
 800145a:	0d64      	lsrs	r4, r4, #21
 800145c:	0fc9      	lsrs	r1, r1, #31
 800145e:	4690      	mov	r8, r2
 8001460:	0d6d      	lsrs	r5, r5, #21
 8001462:	0fdb      	lsrs	r3, r3, #31
 8001464:	42bc      	cmp	r4, r7
 8001466:	d02a      	beq.n	80014be <__gedf2+0x82>
 8001468:	4f25      	ldr	r7, [pc, #148]	; (8001500 <__gedf2+0xc4>)
 800146a:	42bd      	cmp	r5, r7
 800146c:	d02d      	beq.n	80014ca <__gedf2+0x8e>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d10f      	bne.n	8001492 <__gedf2+0x56>
 8001472:	4330      	orrs	r0, r6
 8001474:	0007      	movs	r7, r0
 8001476:	4681      	mov	r9, r0
 8001478:	4278      	negs	r0, r7
 800147a:	4178      	adcs	r0, r7
 800147c:	b2c0      	uxtb	r0, r0
 800147e:	2d00      	cmp	r5, #0
 8001480:	d117      	bne.n	80014b2 <__gedf2+0x76>
 8001482:	465f      	mov	r7, fp
 8001484:	433a      	orrs	r2, r7
 8001486:	d114      	bne.n	80014b2 <__gedf2+0x76>
 8001488:	464b      	mov	r3, r9
 800148a:	2000      	movs	r0, #0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <__gedf2+0x6a>
 8001490:	e006      	b.n	80014a0 <__gedf2+0x64>
 8001492:	2d00      	cmp	r5, #0
 8001494:	d102      	bne.n	800149c <__gedf2+0x60>
 8001496:	4658      	mov	r0, fp
 8001498:	4302      	orrs	r2, r0
 800149a:	d001      	beq.n	80014a0 <__gedf2+0x64>
 800149c:	4299      	cmp	r1, r3
 800149e:	d018      	beq.n	80014d2 <__gedf2+0x96>
 80014a0:	4248      	negs	r0, r1
 80014a2:	2101      	movs	r1, #1
 80014a4:	4308      	orrs	r0, r1
 80014a6:	bc3c      	pop	{r2, r3, r4, r5}
 80014a8:	4690      	mov	r8, r2
 80014aa:	4699      	mov	r9, r3
 80014ac:	46a2      	mov	sl, r4
 80014ae:	46ab      	mov	fp, r5
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d0f2      	beq.n	800149c <__gedf2+0x60>
 80014b6:	2001      	movs	r0, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4318      	orrs	r0, r3
 80014bc:	e7f3      	b.n	80014a6 <__gedf2+0x6a>
 80014be:	0037      	movs	r7, r6
 80014c0:	4307      	orrs	r7, r0
 80014c2:	d0d1      	beq.n	8001468 <__gedf2+0x2c>
 80014c4:	2002      	movs	r0, #2
 80014c6:	4240      	negs	r0, r0
 80014c8:	e7ed      	b.n	80014a6 <__gedf2+0x6a>
 80014ca:	465f      	mov	r7, fp
 80014cc:	4317      	orrs	r7, r2
 80014ce:	d0ce      	beq.n	800146e <__gedf2+0x32>
 80014d0:	e7f8      	b.n	80014c4 <__gedf2+0x88>
 80014d2:	42ac      	cmp	r4, r5
 80014d4:	dce4      	bgt.n	80014a0 <__gedf2+0x64>
 80014d6:	da03      	bge.n	80014e0 <__gedf2+0xa4>
 80014d8:	1e48      	subs	r0, r1, #1
 80014da:	2101      	movs	r1, #1
 80014dc:	4308      	orrs	r0, r1
 80014de:	e7e2      	b.n	80014a6 <__gedf2+0x6a>
 80014e0:	455e      	cmp	r6, fp
 80014e2:	d8dd      	bhi.n	80014a0 <__gedf2+0x64>
 80014e4:	d006      	beq.n	80014f4 <__gedf2+0xb8>
 80014e6:	2000      	movs	r0, #0
 80014e8:	455e      	cmp	r6, fp
 80014ea:	d2dc      	bcs.n	80014a6 <__gedf2+0x6a>
 80014ec:	2301      	movs	r3, #1
 80014ee:	1e48      	subs	r0, r1, #1
 80014f0:	4318      	orrs	r0, r3
 80014f2:	e7d8      	b.n	80014a6 <__gedf2+0x6a>
 80014f4:	45c4      	cmp	ip, r8
 80014f6:	d8d3      	bhi.n	80014a0 <__gedf2+0x64>
 80014f8:	2000      	movs	r0, #0
 80014fa:	45c4      	cmp	ip, r8
 80014fc:	d3f6      	bcc.n	80014ec <__gedf2+0xb0>
 80014fe:	e7d2      	b.n	80014a6 <__gedf2+0x6a>
 8001500:	000007ff 	.word	0x000007ff

08001504 <__ledf2>:
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	464e      	mov	r6, r9
 8001508:	4645      	mov	r5, r8
 800150a:	46de      	mov	lr, fp
 800150c:	4657      	mov	r7, sl
 800150e:	005c      	lsls	r4, r3, #1
 8001510:	b5e0      	push	{r5, r6, r7, lr}
 8001512:	031f      	lsls	r7, r3, #12
 8001514:	0fdb      	lsrs	r3, r3, #31
 8001516:	4699      	mov	r9, r3
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <__ledf2+0xc0>)
 800151a:	030e      	lsls	r6, r1, #12
 800151c:	004d      	lsls	r5, r1, #1
 800151e:	0fc9      	lsrs	r1, r1, #31
 8001520:	4684      	mov	ip, r0
 8001522:	0b36      	lsrs	r6, r6, #12
 8001524:	0d6d      	lsrs	r5, r5, #21
 8001526:	468b      	mov	fp, r1
 8001528:	4690      	mov	r8, r2
 800152a:	0b3f      	lsrs	r7, r7, #12
 800152c:	0d64      	lsrs	r4, r4, #21
 800152e:	429d      	cmp	r5, r3
 8001530:	d020      	beq.n	8001574 <__ledf2+0x70>
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <__ledf2+0xc0>)
 8001534:	429c      	cmp	r4, r3
 8001536:	d022      	beq.n	800157e <__ledf2+0x7a>
 8001538:	2d00      	cmp	r5, #0
 800153a:	d112      	bne.n	8001562 <__ledf2+0x5e>
 800153c:	4330      	orrs	r0, r6
 800153e:	4243      	negs	r3, r0
 8001540:	4143      	adcs	r3, r0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2c00      	cmp	r4, #0
 8001546:	d01f      	beq.n	8001588 <__ledf2+0x84>
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00c      	beq.n	8001566 <__ledf2+0x62>
 800154c:	464b      	mov	r3, r9
 800154e:	2001      	movs	r0, #1
 8001550:	3b01      	subs	r3, #1
 8001552:	4303      	orrs	r3, r0
 8001554:	0018      	movs	r0, r3
 8001556:	bc3c      	pop	{r2, r3, r4, r5}
 8001558:	4690      	mov	r8, r2
 800155a:	4699      	mov	r9, r3
 800155c:	46a2      	mov	sl, r4
 800155e:	46ab      	mov	fp, r5
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001562:	2c00      	cmp	r4, #0
 8001564:	d016      	beq.n	8001594 <__ledf2+0x90>
 8001566:	45cb      	cmp	fp, r9
 8001568:	d017      	beq.n	800159a <__ledf2+0x96>
 800156a:	465b      	mov	r3, fp
 800156c:	4259      	negs	r1, r3
 800156e:	2301      	movs	r3, #1
 8001570:	430b      	orrs	r3, r1
 8001572:	e7ef      	b.n	8001554 <__ledf2+0x50>
 8001574:	0031      	movs	r1, r6
 8001576:	2302      	movs	r3, #2
 8001578:	4301      	orrs	r1, r0
 800157a:	d1eb      	bne.n	8001554 <__ledf2+0x50>
 800157c:	e7d9      	b.n	8001532 <__ledf2+0x2e>
 800157e:	0039      	movs	r1, r7
 8001580:	2302      	movs	r3, #2
 8001582:	4311      	orrs	r1, r2
 8001584:	d1e6      	bne.n	8001554 <__ledf2+0x50>
 8001586:	e7d7      	b.n	8001538 <__ledf2+0x34>
 8001588:	433a      	orrs	r2, r7
 800158a:	d1dd      	bne.n	8001548 <__ledf2+0x44>
 800158c:	2300      	movs	r3, #0
 800158e:	2800      	cmp	r0, #0
 8001590:	d0e0      	beq.n	8001554 <__ledf2+0x50>
 8001592:	e7ea      	b.n	800156a <__ledf2+0x66>
 8001594:	433a      	orrs	r2, r7
 8001596:	d1e6      	bne.n	8001566 <__ledf2+0x62>
 8001598:	e7e7      	b.n	800156a <__ledf2+0x66>
 800159a:	42a5      	cmp	r5, r4
 800159c:	dce5      	bgt.n	800156a <__ledf2+0x66>
 800159e:	db05      	blt.n	80015ac <__ledf2+0xa8>
 80015a0:	42be      	cmp	r6, r7
 80015a2:	d8e2      	bhi.n	800156a <__ledf2+0x66>
 80015a4:	d007      	beq.n	80015b6 <__ledf2+0xb2>
 80015a6:	2300      	movs	r3, #0
 80015a8:	42be      	cmp	r6, r7
 80015aa:	d2d3      	bcs.n	8001554 <__ledf2+0x50>
 80015ac:	4659      	mov	r1, fp
 80015ae:	2301      	movs	r3, #1
 80015b0:	3901      	subs	r1, #1
 80015b2:	430b      	orrs	r3, r1
 80015b4:	e7ce      	b.n	8001554 <__ledf2+0x50>
 80015b6:	45c4      	cmp	ip, r8
 80015b8:	d8d7      	bhi.n	800156a <__ledf2+0x66>
 80015ba:	2300      	movs	r3, #0
 80015bc:	45c4      	cmp	ip, r8
 80015be:	d3f5      	bcc.n	80015ac <__ledf2+0xa8>
 80015c0:	e7c8      	b.n	8001554 <__ledf2+0x50>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff

080015c8 <__aeabi_dmul>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	4657      	mov	r7, sl
 80015cc:	4645      	mov	r5, r8
 80015ce:	46de      	mov	lr, fp
 80015d0:	464e      	mov	r6, r9
 80015d2:	b5e0      	push	{r5, r6, r7, lr}
 80015d4:	030c      	lsls	r4, r1, #12
 80015d6:	4698      	mov	r8, r3
 80015d8:	004e      	lsls	r6, r1, #1
 80015da:	0b23      	lsrs	r3, r4, #12
 80015dc:	b087      	sub	sp, #28
 80015de:	0007      	movs	r7, r0
 80015e0:	4692      	mov	sl, r2
 80015e2:	469b      	mov	fp, r3
 80015e4:	0d76      	lsrs	r6, r6, #21
 80015e6:	0fcd      	lsrs	r5, r1, #31
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	d06b      	beq.n	80016c4 <__aeabi_dmul+0xfc>
 80015ec:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <__aeabi_dmul+0x1dc>)
 80015ee:	429e      	cmp	r6, r3
 80015f0:	d035      	beq.n	800165e <__aeabi_dmul+0x96>
 80015f2:	2480      	movs	r4, #128	; 0x80
 80015f4:	465b      	mov	r3, fp
 80015f6:	0f42      	lsrs	r2, r0, #29
 80015f8:	0424      	lsls	r4, r4, #16
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4314      	orrs	r4, r2
 80015fe:	431c      	orrs	r4, r3
 8001600:	00c3      	lsls	r3, r0, #3
 8001602:	4699      	mov	r9, r3
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <__aeabi_dmul+0x1e0>)
 8001606:	46a3      	mov	fp, r4
 8001608:	469c      	mov	ip, r3
 800160a:	2300      	movs	r3, #0
 800160c:	2700      	movs	r7, #0
 800160e:	4466      	add	r6, ip
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	4643      	mov	r3, r8
 8001614:	031c      	lsls	r4, r3, #12
 8001616:	005a      	lsls	r2, r3, #1
 8001618:	0fdb      	lsrs	r3, r3, #31
 800161a:	4650      	mov	r0, sl
 800161c:	0b24      	lsrs	r4, r4, #12
 800161e:	0d52      	lsrs	r2, r2, #21
 8001620:	4698      	mov	r8, r3
 8001622:	d100      	bne.n	8001626 <__aeabi_dmul+0x5e>
 8001624:	e076      	b.n	8001714 <__aeabi_dmul+0x14c>
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <__aeabi_dmul+0x1dc>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d06d      	beq.n	8001708 <__aeabi_dmul+0x140>
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	0f41      	lsrs	r1, r0, #29
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	430b      	orrs	r3, r1
 8001634:	495c      	ldr	r1, [pc, #368]	; (80017a8 <__aeabi_dmul+0x1e0>)
 8001636:	00e4      	lsls	r4, r4, #3
 8001638:	468c      	mov	ip, r1
 800163a:	431c      	orrs	r4, r3
 800163c:	00c3      	lsls	r3, r0, #3
 800163e:	2000      	movs	r0, #0
 8001640:	4462      	add	r2, ip
 8001642:	4641      	mov	r1, r8
 8001644:	18b6      	adds	r6, r6, r2
 8001646:	4069      	eors	r1, r5
 8001648:	1c72      	adds	r2, r6, #1
 800164a:	9101      	str	r1, [sp, #4]
 800164c:	4694      	mov	ip, r2
 800164e:	4307      	orrs	r7, r0
 8001650:	2f0f      	cmp	r7, #15
 8001652:	d900      	bls.n	8001656 <__aeabi_dmul+0x8e>
 8001654:	e0b0      	b.n	80017b8 <__aeabi_dmul+0x1f0>
 8001656:	4a55      	ldr	r2, [pc, #340]	; (80017ac <__aeabi_dmul+0x1e4>)
 8001658:	00bf      	lsls	r7, r7, #2
 800165a:	59d2      	ldr	r2, [r2, r7]
 800165c:	4697      	mov	pc, r2
 800165e:	465b      	mov	r3, fp
 8001660:	4303      	orrs	r3, r0
 8001662:	4699      	mov	r9, r3
 8001664:	d000      	beq.n	8001668 <__aeabi_dmul+0xa0>
 8001666:	e087      	b.n	8001778 <__aeabi_dmul+0x1b0>
 8001668:	2300      	movs	r3, #0
 800166a:	469b      	mov	fp, r3
 800166c:	3302      	adds	r3, #2
 800166e:	2708      	movs	r7, #8
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	e7ce      	b.n	8001612 <__aeabi_dmul+0x4a>
 8001674:	4642      	mov	r2, r8
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	2802      	cmp	r0, #2
 800167a:	d067      	beq.n	800174c <__aeabi_dmul+0x184>
 800167c:	2803      	cmp	r0, #3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0xba>
 8001680:	e20e      	b.n	8001aa0 <__aeabi_dmul+0x4d8>
 8001682:	2801      	cmp	r0, #1
 8001684:	d000      	beq.n	8001688 <__aeabi_dmul+0xc0>
 8001686:	e162      	b.n	800194e <__aeabi_dmul+0x386>
 8001688:	2300      	movs	r3, #0
 800168a:	2400      	movs	r4, #0
 800168c:	2200      	movs	r2, #0
 800168e:	4699      	mov	r9, r3
 8001690:	9901      	ldr	r1, [sp, #4]
 8001692:	4001      	ands	r1, r0
 8001694:	b2cd      	uxtb	r5, r1
 8001696:	2100      	movs	r1, #0
 8001698:	0312      	lsls	r2, r2, #12
 800169a:	0d0b      	lsrs	r3, r1, #20
 800169c:	0b12      	lsrs	r2, r2, #12
 800169e:	051b      	lsls	r3, r3, #20
 80016a0:	4313      	orrs	r3, r2
 80016a2:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <__aeabi_dmul+0x1e8>)
 80016a4:	0524      	lsls	r4, r4, #20
 80016a6:	4013      	ands	r3, r2
 80016a8:	431c      	orrs	r4, r3
 80016aa:	0064      	lsls	r4, r4, #1
 80016ac:	07ed      	lsls	r5, r5, #31
 80016ae:	0864      	lsrs	r4, r4, #1
 80016b0:	432c      	orrs	r4, r5
 80016b2:	4648      	mov	r0, r9
 80016b4:	0021      	movs	r1, r4
 80016b6:	b007      	add	sp, #28
 80016b8:	bc3c      	pop	{r2, r3, r4, r5}
 80016ba:	4690      	mov	r8, r2
 80016bc:	4699      	mov	r9, r3
 80016be:	46a2      	mov	sl, r4
 80016c0:	46ab      	mov	fp, r5
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	4303      	orrs	r3, r0
 80016c6:	4699      	mov	r9, r3
 80016c8:	d04f      	beq.n	800176a <__aeabi_dmul+0x1a2>
 80016ca:	465b      	mov	r3, fp
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dmul+0x10a>
 80016d0:	e189      	b.n	80019e6 <__aeabi_dmul+0x41e>
 80016d2:	4658      	mov	r0, fp
 80016d4:	f000 fdf6 	bl	80022c4 <__clzsi2>
 80016d8:	0003      	movs	r3, r0
 80016da:	3b0b      	subs	r3, #11
 80016dc:	2b1c      	cmp	r3, #28
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x11a>
 80016e0:	e17a      	b.n	80019d8 <__aeabi_dmul+0x410>
 80016e2:	221d      	movs	r2, #29
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	003a      	movs	r2, r7
 80016e8:	0001      	movs	r1, r0
 80016ea:	465c      	mov	r4, fp
 80016ec:	40da      	lsrs	r2, r3
 80016ee:	3908      	subs	r1, #8
 80016f0:	408c      	lsls	r4, r1
 80016f2:	0013      	movs	r3, r2
 80016f4:	408f      	lsls	r7, r1
 80016f6:	4323      	orrs	r3, r4
 80016f8:	469b      	mov	fp, r3
 80016fa:	46b9      	mov	r9, r7
 80016fc:	2300      	movs	r3, #0
 80016fe:	4e2d      	ldr	r6, [pc, #180]	; (80017b4 <__aeabi_dmul+0x1ec>)
 8001700:	2700      	movs	r7, #0
 8001702:	1a36      	subs	r6, r6, r0
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	e784      	b.n	8001612 <__aeabi_dmul+0x4a>
 8001708:	4653      	mov	r3, sl
 800170a:	4323      	orrs	r3, r4
 800170c:	d12a      	bne.n	8001764 <__aeabi_dmul+0x19c>
 800170e:	2400      	movs	r4, #0
 8001710:	2002      	movs	r0, #2
 8001712:	e796      	b.n	8001642 <__aeabi_dmul+0x7a>
 8001714:	4653      	mov	r3, sl
 8001716:	4323      	orrs	r3, r4
 8001718:	d020      	beq.n	800175c <__aeabi_dmul+0x194>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_dmul+0x158>
 800171e:	e157      	b.n	80019d0 <__aeabi_dmul+0x408>
 8001720:	0020      	movs	r0, r4
 8001722:	f000 fdcf 	bl	80022c4 <__clzsi2>
 8001726:	0003      	movs	r3, r0
 8001728:	3b0b      	subs	r3, #11
 800172a:	2b1c      	cmp	r3, #28
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0x168>
 800172e:	e149      	b.n	80019c4 <__aeabi_dmul+0x3fc>
 8001730:	211d      	movs	r1, #29
 8001732:	1acb      	subs	r3, r1, r3
 8001734:	4651      	mov	r1, sl
 8001736:	0002      	movs	r2, r0
 8001738:	40d9      	lsrs	r1, r3
 800173a:	4653      	mov	r3, sl
 800173c:	3a08      	subs	r2, #8
 800173e:	4094      	lsls	r4, r2
 8001740:	4093      	lsls	r3, r2
 8001742:	430c      	orrs	r4, r1
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <__aeabi_dmul+0x1ec>)
 8001746:	1a12      	subs	r2, r2, r0
 8001748:	2000      	movs	r0, #0
 800174a:	e77a      	b.n	8001642 <__aeabi_dmul+0x7a>
 800174c:	2501      	movs	r5, #1
 800174e:	9b01      	ldr	r3, [sp, #4]
 8001750:	4c14      	ldr	r4, [pc, #80]	; (80017a4 <__aeabi_dmul+0x1dc>)
 8001752:	401d      	ands	r5, r3
 8001754:	2300      	movs	r3, #0
 8001756:	2200      	movs	r2, #0
 8001758:	4699      	mov	r9, r3
 800175a:	e79c      	b.n	8001696 <__aeabi_dmul+0xce>
 800175c:	2400      	movs	r4, #0
 800175e:	2200      	movs	r2, #0
 8001760:	2001      	movs	r0, #1
 8001762:	e76e      	b.n	8001642 <__aeabi_dmul+0x7a>
 8001764:	4653      	mov	r3, sl
 8001766:	2003      	movs	r0, #3
 8001768:	e76b      	b.n	8001642 <__aeabi_dmul+0x7a>
 800176a:	2300      	movs	r3, #0
 800176c:	469b      	mov	fp, r3
 800176e:	3301      	adds	r3, #1
 8001770:	2704      	movs	r7, #4
 8001772:	2600      	movs	r6, #0
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	e74c      	b.n	8001612 <__aeabi_dmul+0x4a>
 8001778:	2303      	movs	r3, #3
 800177a:	4681      	mov	r9, r0
 800177c:	270c      	movs	r7, #12
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	e747      	b.n	8001612 <__aeabi_dmul+0x4a>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	2300      	movs	r3, #0
 8001786:	2500      	movs	r5, #0
 8001788:	0312      	lsls	r2, r2, #12
 800178a:	4699      	mov	r9, r3
 800178c:	4c05      	ldr	r4, [pc, #20]	; (80017a4 <__aeabi_dmul+0x1dc>)
 800178e:	e782      	b.n	8001696 <__aeabi_dmul+0xce>
 8001790:	465c      	mov	r4, fp
 8001792:	464b      	mov	r3, r9
 8001794:	9802      	ldr	r0, [sp, #8]
 8001796:	e76f      	b.n	8001678 <__aeabi_dmul+0xb0>
 8001798:	465c      	mov	r4, fp
 800179a:	464b      	mov	r3, r9
 800179c:	9501      	str	r5, [sp, #4]
 800179e:	9802      	ldr	r0, [sp, #8]
 80017a0:	e76a      	b.n	8001678 <__aeabi_dmul+0xb0>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	fffffc01 	.word	0xfffffc01
 80017ac:	0800c07c 	.word	0x0800c07c
 80017b0:	800fffff 	.word	0x800fffff
 80017b4:	fffffc0d 	.word	0xfffffc0d
 80017b8:	464a      	mov	r2, r9
 80017ba:	4649      	mov	r1, r9
 80017bc:	0c17      	lsrs	r7, r2, #16
 80017be:	0c1a      	lsrs	r2, r3, #16
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	0408      	lsls	r0, r1, #16
 80017c6:	0019      	movs	r1, r3
 80017c8:	0c00      	lsrs	r0, r0, #16
 80017ca:	4341      	muls	r1, r0
 80017cc:	0015      	movs	r5, r2
 80017ce:	4688      	mov	r8, r1
 80017d0:	0019      	movs	r1, r3
 80017d2:	437d      	muls	r5, r7
 80017d4:	4379      	muls	r1, r7
 80017d6:	9503      	str	r5, [sp, #12]
 80017d8:	4689      	mov	r9, r1
 80017da:	0029      	movs	r1, r5
 80017dc:	0015      	movs	r5, r2
 80017de:	4345      	muls	r5, r0
 80017e0:	444d      	add	r5, r9
 80017e2:	9502      	str	r5, [sp, #8]
 80017e4:	4645      	mov	r5, r8
 80017e6:	0c2d      	lsrs	r5, r5, #16
 80017e8:	46aa      	mov	sl, r5
 80017ea:	9d02      	ldr	r5, [sp, #8]
 80017ec:	4455      	add	r5, sl
 80017ee:	45a9      	cmp	r9, r5
 80017f0:	d906      	bls.n	8001800 <__aeabi_dmul+0x238>
 80017f2:	468a      	mov	sl, r1
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	4689      	mov	r9, r1
 80017fa:	44ca      	add	sl, r9
 80017fc:	4651      	mov	r1, sl
 80017fe:	9103      	str	r1, [sp, #12]
 8001800:	0c29      	lsrs	r1, r5, #16
 8001802:	9104      	str	r1, [sp, #16]
 8001804:	4641      	mov	r1, r8
 8001806:	0409      	lsls	r1, r1, #16
 8001808:	042d      	lsls	r5, r5, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	4688      	mov	r8, r1
 800180e:	0029      	movs	r1, r5
 8001810:	0c25      	lsrs	r5, r4, #16
 8001812:	0424      	lsls	r4, r4, #16
 8001814:	4441      	add	r1, r8
 8001816:	0c24      	lsrs	r4, r4, #16
 8001818:	9105      	str	r1, [sp, #20]
 800181a:	0021      	movs	r1, r4
 800181c:	4341      	muls	r1, r0
 800181e:	4688      	mov	r8, r1
 8001820:	0021      	movs	r1, r4
 8001822:	4379      	muls	r1, r7
 8001824:	468a      	mov	sl, r1
 8001826:	4368      	muls	r0, r5
 8001828:	4641      	mov	r1, r8
 800182a:	4450      	add	r0, sl
 800182c:	4681      	mov	r9, r0
 800182e:	0c08      	lsrs	r0, r1, #16
 8001830:	4448      	add	r0, r9
 8001832:	436f      	muls	r7, r5
 8001834:	4582      	cmp	sl, r0
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x278>
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	4689      	mov	r9, r1
 800183e:	444f      	add	r7, r9
 8001840:	0c01      	lsrs	r1, r0, #16
 8001842:	4689      	mov	r9, r1
 8001844:	0039      	movs	r1, r7
 8001846:	4449      	add	r1, r9
 8001848:	9102      	str	r1, [sp, #8]
 800184a:	4641      	mov	r1, r8
 800184c:	040f      	lsls	r7, r1, #16
 800184e:	9904      	ldr	r1, [sp, #16]
 8001850:	0c3f      	lsrs	r7, r7, #16
 8001852:	4688      	mov	r8, r1
 8001854:	0400      	lsls	r0, r0, #16
 8001856:	19c0      	adds	r0, r0, r7
 8001858:	4480      	add	r8, r0
 800185a:	4641      	mov	r1, r8
 800185c:	9104      	str	r1, [sp, #16]
 800185e:	4659      	mov	r1, fp
 8001860:	0c0f      	lsrs	r7, r1, #16
 8001862:	0409      	lsls	r1, r1, #16
 8001864:	0c09      	lsrs	r1, r1, #16
 8001866:	4688      	mov	r8, r1
 8001868:	4359      	muls	r1, r3
 800186a:	468a      	mov	sl, r1
 800186c:	0039      	movs	r1, r7
 800186e:	4351      	muls	r1, r2
 8001870:	4689      	mov	r9, r1
 8001872:	4641      	mov	r1, r8
 8001874:	434a      	muls	r2, r1
 8001876:	4651      	mov	r1, sl
 8001878:	0c09      	lsrs	r1, r1, #16
 800187a:	468b      	mov	fp, r1
 800187c:	437b      	muls	r3, r7
 800187e:	18d2      	adds	r2, r2, r3
 8001880:	445a      	add	r2, fp
 8001882:	4293      	cmp	r3, r2
 8001884:	d903      	bls.n	800188e <__aeabi_dmul+0x2c6>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	469b      	mov	fp, r3
 800188c:	44d9      	add	r9, fp
 800188e:	4651      	mov	r1, sl
 8001890:	0409      	lsls	r1, r1, #16
 8001892:	0c09      	lsrs	r1, r1, #16
 8001894:	468a      	mov	sl, r1
 8001896:	4641      	mov	r1, r8
 8001898:	4361      	muls	r1, r4
 800189a:	437c      	muls	r4, r7
 800189c:	0c13      	lsrs	r3, r2, #16
 800189e:	0412      	lsls	r2, r2, #16
 80018a0:	444b      	add	r3, r9
 80018a2:	4452      	add	r2, sl
 80018a4:	46a1      	mov	r9, r4
 80018a6:	468a      	mov	sl, r1
 80018a8:	003c      	movs	r4, r7
 80018aa:	4641      	mov	r1, r8
 80018ac:	436c      	muls	r4, r5
 80018ae:	434d      	muls	r5, r1
 80018b0:	4651      	mov	r1, sl
 80018b2:	444d      	add	r5, r9
 80018b4:	0c0f      	lsrs	r7, r1, #16
 80018b6:	197d      	adds	r5, r7, r5
 80018b8:	45a9      	cmp	r9, r5
 80018ba:	d903      	bls.n	80018c4 <__aeabi_dmul+0x2fc>
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0249      	lsls	r1, r1, #9
 80018c0:	4688      	mov	r8, r1
 80018c2:	4444      	add	r4, r8
 80018c4:	9f04      	ldr	r7, [sp, #16]
 80018c6:	9903      	ldr	r1, [sp, #12]
 80018c8:	46b8      	mov	r8, r7
 80018ca:	4441      	add	r1, r8
 80018cc:	468b      	mov	fp, r1
 80018ce:	4583      	cmp	fp, r0
 80018d0:	4180      	sbcs	r0, r0
 80018d2:	4241      	negs	r1, r0
 80018d4:	4688      	mov	r8, r1
 80018d6:	4651      	mov	r1, sl
 80018d8:	0408      	lsls	r0, r1, #16
 80018da:	042f      	lsls	r7, r5, #16
 80018dc:	0c00      	lsrs	r0, r0, #16
 80018de:	183f      	adds	r7, r7, r0
 80018e0:	4658      	mov	r0, fp
 80018e2:	9902      	ldr	r1, [sp, #8]
 80018e4:	1810      	adds	r0, r2, r0
 80018e6:	4689      	mov	r9, r1
 80018e8:	4290      	cmp	r0, r2
 80018ea:	4192      	sbcs	r2, r2
 80018ec:	444f      	add	r7, r9
 80018ee:	46ba      	mov	sl, r7
 80018f0:	4252      	negs	r2, r2
 80018f2:	4699      	mov	r9, r3
 80018f4:	4693      	mov	fp, r2
 80018f6:	44c2      	add	sl, r8
 80018f8:	44d1      	add	r9, sl
 80018fa:	44cb      	add	fp, r9
 80018fc:	428f      	cmp	r7, r1
 80018fe:	41bf      	sbcs	r7, r7
 8001900:	45c2      	cmp	sl, r8
 8001902:	4189      	sbcs	r1, r1
 8001904:	4599      	cmp	r9, r3
 8001906:	419b      	sbcs	r3, r3
 8001908:	4593      	cmp	fp, r2
 800190a:	4192      	sbcs	r2, r2
 800190c:	427f      	negs	r7, r7
 800190e:	4249      	negs	r1, r1
 8001910:	0c2d      	lsrs	r5, r5, #16
 8001912:	4252      	negs	r2, r2
 8001914:	430f      	orrs	r7, r1
 8001916:	425b      	negs	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	197f      	adds	r7, r7, r5
 800191c:	18ff      	adds	r7, r7, r3
 800191e:	465b      	mov	r3, fp
 8001920:	193c      	adds	r4, r7, r4
 8001922:	0ddb      	lsrs	r3, r3, #23
 8001924:	9a05      	ldr	r2, [sp, #20]
 8001926:	0264      	lsls	r4, r4, #9
 8001928:	431c      	orrs	r4, r3
 800192a:	0243      	lsls	r3, r0, #9
 800192c:	4313      	orrs	r3, r2
 800192e:	1e5d      	subs	r5, r3, #1
 8001930:	41ab      	sbcs	r3, r5
 8001932:	465a      	mov	r2, fp
 8001934:	0dc0      	lsrs	r0, r0, #23
 8001936:	4303      	orrs	r3, r0
 8001938:	0252      	lsls	r2, r2, #9
 800193a:	4313      	orrs	r3, r2
 800193c:	01e2      	lsls	r2, r4, #7
 800193e:	d556      	bpl.n	80019ee <__aeabi_dmul+0x426>
 8001940:	2001      	movs	r0, #1
 8001942:	085a      	lsrs	r2, r3, #1
 8001944:	4003      	ands	r3, r0
 8001946:	4313      	orrs	r3, r2
 8001948:	07e2      	lsls	r2, r4, #31
 800194a:	4313      	orrs	r3, r2
 800194c:	0864      	lsrs	r4, r4, #1
 800194e:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <__aeabi_dmul+0x4f0>)
 8001950:	4460      	add	r0, ip
 8001952:	2800      	cmp	r0, #0
 8001954:	dd4d      	ble.n	80019f2 <__aeabi_dmul+0x42a>
 8001956:	075a      	lsls	r2, r3, #29
 8001958:	d009      	beq.n	800196e <__aeabi_dmul+0x3a6>
 800195a:	220f      	movs	r2, #15
 800195c:	401a      	ands	r2, r3
 800195e:	2a04      	cmp	r2, #4
 8001960:	d005      	beq.n	800196e <__aeabi_dmul+0x3a6>
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	429a      	cmp	r2, r3
 8001966:	419b      	sbcs	r3, r3
 8001968:	425b      	negs	r3, r3
 800196a:	18e4      	adds	r4, r4, r3
 800196c:	0013      	movs	r3, r2
 800196e:	01e2      	lsls	r2, r4, #7
 8001970:	d504      	bpl.n	800197c <__aeabi_dmul+0x3b4>
 8001972:	2080      	movs	r0, #128	; 0x80
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <__aeabi_dmul+0x4f4>)
 8001976:	00c0      	lsls	r0, r0, #3
 8001978:	4014      	ands	r4, r2
 800197a:	4460      	add	r0, ip
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <__aeabi_dmul+0x4f8>)
 800197e:	4290      	cmp	r0, r2
 8001980:	dd00      	ble.n	8001984 <__aeabi_dmul+0x3bc>
 8001982:	e6e3      	b.n	800174c <__aeabi_dmul+0x184>
 8001984:	2501      	movs	r5, #1
 8001986:	08db      	lsrs	r3, r3, #3
 8001988:	0762      	lsls	r2, r4, #29
 800198a:	431a      	orrs	r2, r3
 800198c:	0264      	lsls	r4, r4, #9
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	4691      	mov	r9, r2
 8001992:	0b22      	lsrs	r2, r4, #12
 8001994:	0544      	lsls	r4, r0, #21
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	401d      	ands	r5, r3
 800199a:	e67c      	b.n	8001696 <__aeabi_dmul+0xce>
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	4659      	mov	r1, fp
 80019a0:	0312      	lsls	r2, r2, #12
 80019a2:	4211      	tst	r1, r2
 80019a4:	d008      	beq.n	80019b8 <__aeabi_dmul+0x3f0>
 80019a6:	4214      	tst	r4, r2
 80019a8:	d106      	bne.n	80019b8 <__aeabi_dmul+0x3f0>
 80019aa:	4322      	orrs	r2, r4
 80019ac:	0312      	lsls	r2, r2, #12
 80019ae:	0b12      	lsrs	r2, r2, #12
 80019b0:	4645      	mov	r5, r8
 80019b2:	4699      	mov	r9, r3
 80019b4:	4c43      	ldr	r4, [pc, #268]	; (8001ac4 <__aeabi_dmul+0x4fc>)
 80019b6:	e66e      	b.n	8001696 <__aeabi_dmul+0xce>
 80019b8:	465b      	mov	r3, fp
 80019ba:	431a      	orrs	r2, r3
 80019bc:	0312      	lsls	r2, r2, #12
 80019be:	0b12      	lsrs	r2, r2, #12
 80019c0:	4c40      	ldr	r4, [pc, #256]	; (8001ac4 <__aeabi_dmul+0x4fc>)
 80019c2:	e668      	b.n	8001696 <__aeabi_dmul+0xce>
 80019c4:	0003      	movs	r3, r0
 80019c6:	4654      	mov	r4, sl
 80019c8:	3b28      	subs	r3, #40	; 0x28
 80019ca:	409c      	lsls	r4, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	e6b9      	b.n	8001744 <__aeabi_dmul+0x17c>
 80019d0:	f000 fc78 	bl	80022c4 <__clzsi2>
 80019d4:	3020      	adds	r0, #32
 80019d6:	e6a6      	b.n	8001726 <__aeabi_dmul+0x15e>
 80019d8:	0003      	movs	r3, r0
 80019da:	3b28      	subs	r3, #40	; 0x28
 80019dc:	409f      	lsls	r7, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	46bb      	mov	fp, r7
 80019e2:	4699      	mov	r9, r3
 80019e4:	e68a      	b.n	80016fc <__aeabi_dmul+0x134>
 80019e6:	f000 fc6d 	bl	80022c4 <__clzsi2>
 80019ea:	3020      	adds	r0, #32
 80019ec:	e674      	b.n	80016d8 <__aeabi_dmul+0x110>
 80019ee:	46b4      	mov	ip, r6
 80019f0:	e7ad      	b.n	800194e <__aeabi_dmul+0x386>
 80019f2:	2501      	movs	r5, #1
 80019f4:	1a2a      	subs	r2, r5, r0
 80019f6:	2a38      	cmp	r2, #56	; 0x38
 80019f8:	dd06      	ble.n	8001a08 <__aeabi_dmul+0x440>
 80019fa:	9b01      	ldr	r3, [sp, #4]
 80019fc:	2400      	movs	r4, #0
 80019fe:	401d      	ands	r5, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	2200      	movs	r2, #0
 8001a04:	4699      	mov	r9, r3
 8001a06:	e646      	b.n	8001696 <__aeabi_dmul+0xce>
 8001a08:	2a1f      	cmp	r2, #31
 8001a0a:	dc21      	bgt.n	8001a50 <__aeabi_dmul+0x488>
 8001a0c:	2520      	movs	r5, #32
 8001a0e:	0020      	movs	r0, r4
 8001a10:	1aad      	subs	r5, r5, r2
 8001a12:	001e      	movs	r6, r3
 8001a14:	40ab      	lsls	r3, r5
 8001a16:	40a8      	lsls	r0, r5
 8001a18:	40d6      	lsrs	r6, r2
 8001a1a:	1e5d      	subs	r5, r3, #1
 8001a1c:	41ab      	sbcs	r3, r5
 8001a1e:	4330      	orrs	r0, r6
 8001a20:	4318      	orrs	r0, r3
 8001a22:	40d4      	lsrs	r4, r2
 8001a24:	0743      	lsls	r3, r0, #29
 8001a26:	d009      	beq.n	8001a3c <__aeabi_dmul+0x474>
 8001a28:	230f      	movs	r3, #15
 8001a2a:	4003      	ands	r3, r0
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d005      	beq.n	8001a3c <__aeabi_dmul+0x474>
 8001a30:	0003      	movs	r3, r0
 8001a32:	1d18      	adds	r0, r3, #4
 8001a34:	4298      	cmp	r0, r3
 8001a36:	419b      	sbcs	r3, r3
 8001a38:	425b      	negs	r3, r3
 8001a3a:	18e4      	adds	r4, r4, r3
 8001a3c:	0223      	lsls	r3, r4, #8
 8001a3e:	d521      	bpl.n	8001a84 <__aeabi_dmul+0x4bc>
 8001a40:	2501      	movs	r5, #1
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	2401      	movs	r4, #1
 8001a46:	401d      	ands	r5, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	e622      	b.n	8001696 <__aeabi_dmul+0xce>
 8001a50:	251f      	movs	r5, #31
 8001a52:	0021      	movs	r1, r4
 8001a54:	426d      	negs	r5, r5
 8001a56:	1a28      	subs	r0, r5, r0
 8001a58:	40c1      	lsrs	r1, r0
 8001a5a:	0008      	movs	r0, r1
 8001a5c:	2a20      	cmp	r2, #32
 8001a5e:	d01d      	beq.n	8001a9c <__aeabi_dmul+0x4d4>
 8001a60:	355f      	adds	r5, #95	; 0x5f
 8001a62:	1aaa      	subs	r2, r5, r2
 8001a64:	4094      	lsls	r4, r2
 8001a66:	4323      	orrs	r3, r4
 8001a68:	1e5c      	subs	r4, r3, #1
 8001a6a:	41a3      	sbcs	r3, r4
 8001a6c:	2507      	movs	r5, #7
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	401d      	ands	r5, r3
 8001a72:	2200      	movs	r2, #0
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d009      	beq.n	8001a8c <__aeabi_dmul+0x4c4>
 8001a78:	220f      	movs	r2, #15
 8001a7a:	2400      	movs	r4, #0
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	0018      	movs	r0, r3
 8001a80:	2a04      	cmp	r2, #4
 8001a82:	d1d6      	bne.n	8001a32 <__aeabi_dmul+0x46a>
 8001a84:	0003      	movs	r3, r0
 8001a86:	0765      	lsls	r5, r4, #29
 8001a88:	0264      	lsls	r4, r4, #9
 8001a8a:	0b22      	lsrs	r2, r4, #12
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	432b      	orrs	r3, r5
 8001a90:	2501      	movs	r5, #1
 8001a92:	4699      	mov	r9, r3
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	2400      	movs	r4, #0
 8001a98:	401d      	ands	r5, r3
 8001a9a:	e5fc      	b.n	8001696 <__aeabi_dmul+0xce>
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	e7e2      	b.n	8001a66 <__aeabi_dmul+0x49e>
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	2501      	movs	r5, #1
 8001aa4:	0312      	lsls	r2, r2, #12
 8001aa6:	4322      	orrs	r2, r4
 8001aa8:	9901      	ldr	r1, [sp, #4]
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	0b12      	lsrs	r2, r2, #12
 8001aae:	400d      	ands	r5, r1
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	4c04      	ldr	r4, [pc, #16]	; (8001ac4 <__aeabi_dmul+0x4fc>)
 8001ab4:	e5ef      	b.n	8001696 <__aeabi_dmul+0xce>
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	000003ff 	.word	0x000003ff
 8001abc:	feffffff 	.word	0xfeffffff
 8001ac0:	000007fe 	.word	0x000007fe
 8001ac4:	000007ff 	.word	0x000007ff

08001ac8 <__aeabi_dsub>:
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	4646      	mov	r6, r8
 8001acc:	46d6      	mov	lr, sl
 8001ace:	464f      	mov	r7, r9
 8001ad0:	030c      	lsls	r4, r1, #12
 8001ad2:	b5c0      	push	{r6, r7, lr}
 8001ad4:	0fcd      	lsrs	r5, r1, #31
 8001ad6:	004e      	lsls	r6, r1, #1
 8001ad8:	0a61      	lsrs	r1, r4, #9
 8001ada:	0f44      	lsrs	r4, r0, #29
 8001adc:	430c      	orrs	r4, r1
 8001ade:	00c1      	lsls	r1, r0, #3
 8001ae0:	0058      	lsls	r0, r3, #1
 8001ae2:	0d40      	lsrs	r0, r0, #21
 8001ae4:	4684      	mov	ip, r0
 8001ae6:	468a      	mov	sl, r1
 8001ae8:	000f      	movs	r7, r1
 8001aea:	0319      	lsls	r1, r3, #12
 8001aec:	0f50      	lsrs	r0, r2, #29
 8001aee:	0a49      	lsrs	r1, r1, #9
 8001af0:	4301      	orrs	r1, r0
 8001af2:	48c6      	ldr	r0, [pc, #792]	; (8001e0c <__aeabi_dsub+0x344>)
 8001af4:	0d76      	lsrs	r6, r6, #21
 8001af6:	46a8      	mov	r8, r5
 8001af8:	0fdb      	lsrs	r3, r3, #31
 8001afa:	00d2      	lsls	r2, r2, #3
 8001afc:	4584      	cmp	ip, r0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x3a>
 8001b00:	e0d8      	b.n	8001cb4 <__aeabi_dsub+0x1ec>
 8001b02:	2001      	movs	r0, #1
 8001b04:	4043      	eors	r3, r0
 8001b06:	42ab      	cmp	r3, r5
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x44>
 8001b0a:	e0a6      	b.n	8001c5a <__aeabi_dsub+0x192>
 8001b0c:	4660      	mov	r0, ip
 8001b0e:	1a35      	subs	r5, r6, r0
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	dc00      	bgt.n	8001b16 <__aeabi_dsub+0x4e>
 8001b14:	e105      	b.n	8001d22 <__aeabi_dsub+0x25a>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d110      	bne.n	8001b3c <__aeabi_dsub+0x74>
 8001b1a:	000b      	movs	r3, r1
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x5a>
 8001b20:	e0d7      	b.n	8001cd2 <__aeabi_dsub+0x20a>
 8001b22:	1e6b      	subs	r3, r5, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x62>
 8001b28:	e14b      	b.n	8001dc2 <__aeabi_dsub+0x2fa>
 8001b2a:	4653      	mov	r3, sl
 8001b2c:	1a9f      	subs	r7, r3, r2
 8001b2e:	45ba      	cmp	sl, r7
 8001b30:	4180      	sbcs	r0, r0
 8001b32:	1a64      	subs	r4, r4, r1
 8001b34:	4240      	negs	r0, r0
 8001b36:	1a24      	subs	r4, r4, r0
 8001b38:	2601      	movs	r6, #1
 8001b3a:	e01e      	b.n	8001b7a <__aeabi_dsub+0xb2>
 8001b3c:	4bb3      	ldr	r3, [pc, #716]	; (8001e0c <__aeabi_dsub+0x344>)
 8001b3e:	429e      	cmp	r6, r3
 8001b40:	d048      	beq.n	8001bd4 <__aeabi_dsub+0x10c>
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	4319      	orrs	r1, r3
 8001b48:	2d38      	cmp	r5, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x86>
 8001b4c:	e119      	b.n	8001d82 <__aeabi_dsub+0x2ba>
 8001b4e:	2d1f      	cmp	r5, #31
 8001b50:	dd00      	ble.n	8001b54 <__aeabi_dsub+0x8c>
 8001b52:	e14c      	b.n	8001dee <__aeabi_dsub+0x326>
 8001b54:	2320      	movs	r3, #32
 8001b56:	000f      	movs	r7, r1
 8001b58:	1b5b      	subs	r3, r3, r5
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	409f      	lsls	r7, r3
 8001b60:	40e8      	lsrs	r0, r5
 8001b62:	1e53      	subs	r3, r2, #1
 8001b64:	419a      	sbcs	r2, r3
 8001b66:	40e9      	lsrs	r1, r5
 8001b68:	4307      	orrs	r7, r0
 8001b6a:	4317      	orrs	r7, r2
 8001b6c:	4653      	mov	r3, sl
 8001b6e:	1bdf      	subs	r7, r3, r7
 8001b70:	1a61      	subs	r1, r4, r1
 8001b72:	45ba      	cmp	sl, r7
 8001b74:	41a4      	sbcs	r4, r4
 8001b76:	4264      	negs	r4, r4
 8001b78:	1b0c      	subs	r4, r1, r4
 8001b7a:	0223      	lsls	r3, r4, #8
 8001b7c:	d400      	bmi.n	8001b80 <__aeabi_dsub+0xb8>
 8001b7e:	e0c5      	b.n	8001d0c <__aeabi_dsub+0x244>
 8001b80:	0264      	lsls	r4, r4, #9
 8001b82:	0a65      	lsrs	r5, r4, #9
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0xc2>
 8001b88:	e0f6      	b.n	8001d78 <__aeabi_dsub+0x2b0>
 8001b8a:	0028      	movs	r0, r5
 8001b8c:	f000 fb9a 	bl	80022c4 <__clzsi2>
 8001b90:	0003      	movs	r3, r0
 8001b92:	3b08      	subs	r3, #8
 8001b94:	2b1f      	cmp	r3, #31
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dsub+0xd2>
 8001b98:	e0e9      	b.n	8001d6e <__aeabi_dsub+0x2a6>
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	003c      	movs	r4, r7
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	409d      	lsls	r5, r3
 8001ba2:	40d4      	lsrs	r4, r2
 8001ba4:	409f      	lsls	r7, r3
 8001ba6:	4325      	orrs	r5, r4
 8001ba8:	429e      	cmp	r6, r3
 8001baa:	dd00      	ble.n	8001bae <__aeabi_dsub+0xe6>
 8001bac:	e0db      	b.n	8001d66 <__aeabi_dsub+0x29e>
 8001bae:	1b9e      	subs	r6, r3, r6
 8001bb0:	1c73      	adds	r3, r6, #1
 8001bb2:	2b1f      	cmp	r3, #31
 8001bb4:	dd00      	ble.n	8001bb8 <__aeabi_dsub+0xf0>
 8001bb6:	e10a      	b.n	8001dce <__aeabi_dsub+0x306>
 8001bb8:	2220      	movs	r2, #32
 8001bba:	0038      	movs	r0, r7
 8001bbc:	1ad2      	subs	r2, r2, r3
 8001bbe:	0029      	movs	r1, r5
 8001bc0:	4097      	lsls	r7, r2
 8001bc2:	002c      	movs	r4, r5
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	40d8      	lsrs	r0, r3
 8001bc8:	1e7a      	subs	r2, r7, #1
 8001bca:	4197      	sbcs	r7, r2
 8001bcc:	40dc      	lsrs	r4, r3
 8001bce:	2600      	movs	r6, #0
 8001bd0:	4301      	orrs	r1, r0
 8001bd2:	430f      	orrs	r7, r1
 8001bd4:	077b      	lsls	r3, r7, #29
 8001bd6:	d009      	beq.n	8001bec <__aeabi_dsub+0x124>
 8001bd8:	230f      	movs	r3, #15
 8001bda:	403b      	ands	r3, r7
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d005      	beq.n	8001bec <__aeabi_dsub+0x124>
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	42bb      	cmp	r3, r7
 8001be4:	41bf      	sbcs	r7, r7
 8001be6:	427f      	negs	r7, r7
 8001be8:	19e4      	adds	r4, r4, r7
 8001bea:	001f      	movs	r7, r3
 8001bec:	0223      	lsls	r3, r4, #8
 8001bee:	d525      	bpl.n	8001c3c <__aeabi_dsub+0x174>
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <__aeabi_dsub+0x344>)
 8001bf2:	3601      	adds	r6, #1
 8001bf4:	429e      	cmp	r6, r3
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x132>
 8001bf8:	e0af      	b.n	8001d5a <__aeabi_dsub+0x292>
 8001bfa:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <__aeabi_dsub+0x348>)
 8001bfc:	2501      	movs	r5, #1
 8001bfe:	401c      	ands	r4, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	0762      	lsls	r2, r4, #29
 8001c04:	08ff      	lsrs	r7, r7, #3
 8001c06:	0264      	lsls	r4, r4, #9
 8001c08:	0576      	lsls	r6, r6, #21
 8001c0a:	4317      	orrs	r7, r2
 8001c0c:	0b24      	lsrs	r4, r4, #12
 8001c0e:	0d76      	lsrs	r6, r6, #21
 8001c10:	401d      	ands	r5, r3
 8001c12:	2100      	movs	r1, #0
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	0b23      	lsrs	r3, r4, #12
 8001c18:	0d0c      	lsrs	r4, r1, #20
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	; (8001e14 <__aeabi_dsub+0x34c>)
 8001c1c:	0524      	lsls	r4, r4, #20
 8001c1e:	431c      	orrs	r4, r3
 8001c20:	4014      	ands	r4, r2
 8001c22:	0533      	lsls	r3, r6, #20
 8001c24:	4323      	orrs	r3, r4
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	07ed      	lsls	r5, r5, #31
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	432b      	orrs	r3, r5
 8001c2e:	0038      	movs	r0, r7
 8001c30:	0019      	movs	r1, r3
 8001c32:	bc1c      	pop	{r2, r3, r4}
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	46a2      	mov	sl, r4
 8001c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3c:	2501      	movs	r5, #1
 8001c3e:	4643      	mov	r3, r8
 8001c40:	0762      	lsls	r2, r4, #29
 8001c42:	08ff      	lsrs	r7, r7, #3
 8001c44:	4317      	orrs	r7, r2
 8001c46:	08e4      	lsrs	r4, r4, #3
 8001c48:	401d      	ands	r5, r3
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <__aeabi_dsub+0x344>)
 8001c4c:	429e      	cmp	r6, r3
 8001c4e:	d036      	beq.n	8001cbe <__aeabi_dsub+0x1f6>
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	0576      	lsls	r6, r6, #21
 8001c54:	0b24      	lsrs	r4, r4, #12
 8001c56:	0d76      	lsrs	r6, r6, #21
 8001c58:	e7db      	b.n	8001c12 <__aeabi_dsub+0x14a>
 8001c5a:	4663      	mov	r3, ip
 8001c5c:	1af3      	subs	r3, r6, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dc00      	bgt.n	8001c64 <__aeabi_dsub+0x19c>
 8001c62:	e094      	b.n	8001d8e <__aeabi_dsub+0x2c6>
 8001c64:	4660      	mov	r0, ip
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d035      	beq.n	8001cd6 <__aeabi_dsub+0x20e>
 8001c6a:	4868      	ldr	r0, [pc, #416]	; (8001e0c <__aeabi_dsub+0x344>)
 8001c6c:	4286      	cmp	r6, r0
 8001c6e:	d0b1      	beq.n	8001bd4 <__aeabi_dsub+0x10c>
 8001c70:	2780      	movs	r7, #128	; 0x80
 8001c72:	043f      	lsls	r7, r7, #16
 8001c74:	4339      	orrs	r1, r7
 8001c76:	2b38      	cmp	r3, #56	; 0x38
 8001c78:	dc00      	bgt.n	8001c7c <__aeabi_dsub+0x1b4>
 8001c7a:	e0fd      	b.n	8001e78 <__aeabi_dsub+0x3b0>
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	0017      	movs	r7, r2
 8001c80:	2100      	movs	r1, #0
 8001c82:	1e7a      	subs	r2, r7, #1
 8001c84:	4197      	sbcs	r7, r2
 8001c86:	4457      	add	r7, sl
 8001c88:	4557      	cmp	r7, sl
 8001c8a:	4180      	sbcs	r0, r0
 8001c8c:	1909      	adds	r1, r1, r4
 8001c8e:	4244      	negs	r4, r0
 8001c90:	190c      	adds	r4, r1, r4
 8001c92:	0223      	lsls	r3, r4, #8
 8001c94:	d53a      	bpl.n	8001d0c <__aeabi_dsub+0x244>
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <__aeabi_dsub+0x344>)
 8001c98:	3601      	adds	r6, #1
 8001c9a:	429e      	cmp	r6, r3
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1d8>
 8001c9e:	e14b      	b.n	8001f38 <__aeabi_dsub+0x470>
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <__aeabi_dsub+0x348>)
 8001ca4:	401c      	ands	r4, r3
 8001ca6:	087b      	lsrs	r3, r7, #1
 8001ca8:	4017      	ands	r7, r2
 8001caa:	431f      	orrs	r7, r3
 8001cac:	07e2      	lsls	r2, r4, #31
 8001cae:	4317      	orrs	r7, r2
 8001cb0:	0864      	lsrs	r4, r4, #1
 8001cb2:	e78f      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	4310      	orrs	r0, r2
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x1f4>
 8001cba:	e724      	b.n	8001b06 <__aeabi_dsub+0x3e>
 8001cbc:	e721      	b.n	8001b02 <__aeabi_dsub+0x3a>
 8001cbe:	0023      	movs	r3, r4
 8001cc0:	433b      	orrs	r3, r7
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x1fe>
 8001cc4:	e1b9      	b.n	800203a <__aeabi_dsub+0x572>
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0312      	lsls	r2, r2, #12
 8001cca:	4314      	orrs	r4, r2
 8001ccc:	0324      	lsls	r4, r4, #12
 8001cce:	0b24      	lsrs	r4, r4, #12
 8001cd0:	e79f      	b.n	8001c12 <__aeabi_dsub+0x14a>
 8001cd2:	002e      	movs	r6, r5
 8001cd4:	e77e      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	4310      	orrs	r0, r2
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x216>
 8001cdc:	e0ca      	b.n	8001e74 <__aeabi_dsub+0x3ac>
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	4684      	mov	ip, r0
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x220>
 8001ce6:	e0e7      	b.n	8001eb8 <__aeabi_dsub+0x3f0>
 8001ce8:	4452      	add	r2, sl
 8001cea:	4552      	cmp	r2, sl
 8001cec:	4180      	sbcs	r0, r0
 8001cee:	1864      	adds	r4, r4, r1
 8001cf0:	4240      	negs	r0, r0
 8001cf2:	1824      	adds	r4, r4, r0
 8001cf4:	0017      	movs	r7, r2
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	0223      	lsls	r3, r4, #8
 8001cfa:	d507      	bpl.n	8001d0c <__aeabi_dsub+0x244>
 8001cfc:	2602      	movs	r6, #2
 8001cfe:	e7cf      	b.n	8001ca0 <__aeabi_dsub+0x1d8>
 8001d00:	4664      	mov	r4, ip
 8001d02:	432c      	orrs	r4, r5
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x240>
 8001d06:	e1b3      	b.n	8002070 <__aeabi_dsub+0x5a8>
 8001d08:	002c      	movs	r4, r5
 8001d0a:	4667      	mov	r7, ip
 8001d0c:	077b      	lsls	r3, r7, #29
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x24a>
 8001d10:	e762      	b.n	8001bd8 <__aeabi_dsub+0x110>
 8001d12:	0763      	lsls	r3, r4, #29
 8001d14:	08ff      	lsrs	r7, r7, #3
 8001d16:	431f      	orrs	r7, r3
 8001d18:	2501      	movs	r5, #1
 8001d1a:	4643      	mov	r3, r8
 8001d1c:	08e4      	lsrs	r4, r4, #3
 8001d1e:	401d      	ands	r5, r3
 8001d20:	e793      	b.n	8001c4a <__aeabi_dsub+0x182>
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d178      	bne.n	8001e18 <__aeabi_dsub+0x350>
 8001d26:	1c75      	adds	r5, r6, #1
 8001d28:	056d      	lsls	r5, r5, #21
 8001d2a:	0d6d      	lsrs	r5, r5, #21
 8001d2c:	2d01      	cmp	r5, #1
 8001d2e:	dc00      	bgt.n	8001d32 <__aeabi_dsub+0x26a>
 8001d30:	e0f2      	b.n	8001f18 <__aeabi_dsub+0x450>
 8001d32:	4650      	mov	r0, sl
 8001d34:	1a80      	subs	r0, r0, r2
 8001d36:	4582      	cmp	sl, r0
 8001d38:	41bf      	sbcs	r7, r7
 8001d3a:	1a65      	subs	r5, r4, r1
 8001d3c:	427f      	negs	r7, r7
 8001d3e:	1bed      	subs	r5, r5, r7
 8001d40:	4684      	mov	ip, r0
 8001d42:	0228      	lsls	r0, r5, #8
 8001d44:	d400      	bmi.n	8001d48 <__aeabi_dsub+0x280>
 8001d46:	e08c      	b.n	8001e62 <__aeabi_dsub+0x39a>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	1a17      	subs	r7, r2, r0
 8001d4c:	42ba      	cmp	r2, r7
 8001d4e:	4192      	sbcs	r2, r2
 8001d50:	1b0c      	subs	r4, r1, r4
 8001d52:	4255      	negs	r5, r2
 8001d54:	1b65      	subs	r5, r4, r5
 8001d56:	4698      	mov	r8, r3
 8001d58:	e714      	b.n	8001b84 <__aeabi_dsub+0xbc>
 8001d5a:	2501      	movs	r5, #1
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	2400      	movs	r4, #0
 8001d60:	401d      	ands	r5, r3
 8001d62:	2700      	movs	r7, #0
 8001d64:	e755      	b.n	8001c12 <__aeabi_dsub+0x14a>
 8001d66:	4c2a      	ldr	r4, [pc, #168]	; (8001e10 <__aeabi_dsub+0x348>)
 8001d68:	1af6      	subs	r6, r6, r3
 8001d6a:	402c      	ands	r4, r5
 8001d6c:	e732      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001d6e:	003d      	movs	r5, r7
 8001d70:	3828      	subs	r0, #40	; 0x28
 8001d72:	4085      	lsls	r5, r0
 8001d74:	2700      	movs	r7, #0
 8001d76:	e717      	b.n	8001ba8 <__aeabi_dsub+0xe0>
 8001d78:	0038      	movs	r0, r7
 8001d7a:	f000 faa3 	bl	80022c4 <__clzsi2>
 8001d7e:	3020      	adds	r0, #32
 8001d80:	e706      	b.n	8001b90 <__aeabi_dsub+0xc8>
 8001d82:	430a      	orrs	r2, r1
 8001d84:	0017      	movs	r7, r2
 8001d86:	2100      	movs	r1, #0
 8001d88:	1e7a      	subs	r2, r7, #1
 8001d8a:	4197      	sbcs	r7, r2
 8001d8c:	e6ee      	b.n	8001b6c <__aeabi_dsub+0xa4>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x2cc>
 8001d92:	e0e5      	b.n	8001f60 <__aeabi_dsub+0x498>
 8001d94:	1c73      	adds	r3, r6, #1
 8001d96:	469c      	mov	ip, r3
 8001d98:	055b      	lsls	r3, r3, #21
 8001d9a:	0d5b      	lsrs	r3, r3, #21
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	dc00      	bgt.n	8001da2 <__aeabi_dsub+0x2da>
 8001da0:	e09f      	b.n	8001ee2 <__aeabi_dsub+0x41a>
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <__aeabi_dsub+0x344>)
 8001da4:	459c      	cmp	ip, r3
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x2e2>
 8001da8:	e0c5      	b.n	8001f36 <__aeabi_dsub+0x46e>
 8001daa:	4452      	add	r2, sl
 8001dac:	4552      	cmp	r2, sl
 8001dae:	4180      	sbcs	r0, r0
 8001db0:	1864      	adds	r4, r4, r1
 8001db2:	4240      	negs	r0, r0
 8001db4:	1824      	adds	r4, r4, r0
 8001db6:	07e7      	lsls	r7, r4, #31
 8001db8:	0852      	lsrs	r2, r2, #1
 8001dba:	4317      	orrs	r7, r2
 8001dbc:	0864      	lsrs	r4, r4, #1
 8001dbe:	4666      	mov	r6, ip
 8001dc0:	e708      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <__aeabi_dsub+0x344>)
 8001dc4:	4285      	cmp	r5, r0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x302>
 8001dc8:	e085      	b.n	8001ed6 <__aeabi_dsub+0x40e>
 8001dca:	001d      	movs	r5, r3
 8001dcc:	e6bc      	b.n	8001b48 <__aeabi_dsub+0x80>
 8001dce:	0029      	movs	r1, r5
 8001dd0:	3e1f      	subs	r6, #31
 8001dd2:	40f1      	lsrs	r1, r6
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x312>
 8001dd8:	e07f      	b.n	8001eda <__aeabi_dsub+0x412>
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	409d      	lsls	r5, r3
 8001de0:	432f      	orrs	r7, r5
 8001de2:	1e7d      	subs	r5, r7, #1
 8001de4:	41af      	sbcs	r7, r5
 8001de6:	2400      	movs	r4, #0
 8001de8:	430f      	orrs	r7, r1
 8001dea:	2600      	movs	r6, #0
 8001dec:	e78e      	b.n	8001d0c <__aeabi_dsub+0x244>
 8001dee:	002b      	movs	r3, r5
 8001df0:	000f      	movs	r7, r1
 8001df2:	3b20      	subs	r3, #32
 8001df4:	40df      	lsrs	r7, r3
 8001df6:	2d20      	cmp	r5, #32
 8001df8:	d071      	beq.n	8001ede <__aeabi_dsub+0x416>
 8001dfa:	2340      	movs	r3, #64	; 0x40
 8001dfc:	1b5d      	subs	r5, r3, r5
 8001dfe:	40a9      	lsls	r1, r5
 8001e00:	430a      	orrs	r2, r1
 8001e02:	1e51      	subs	r1, r2, #1
 8001e04:	418a      	sbcs	r2, r1
 8001e06:	2100      	movs	r1, #0
 8001e08:	4317      	orrs	r7, r2
 8001e0a:	e6af      	b.n	8001b6c <__aeabi_dsub+0xa4>
 8001e0c:	000007ff 	.word	0x000007ff
 8001e10:	ff7fffff 	.word	0xff7fffff
 8001e14:	800fffff 	.word	0x800fffff
 8001e18:	2e00      	cmp	r6, #0
 8001e1a:	d03e      	beq.n	8001e9a <__aeabi_dsub+0x3d2>
 8001e1c:	4eb3      	ldr	r6, [pc, #716]	; (80020ec <__aeabi_dsub+0x624>)
 8001e1e:	45b4      	cmp	ip, r6
 8001e20:	d045      	beq.n	8001eae <__aeabi_dsub+0x3e6>
 8001e22:	2680      	movs	r6, #128	; 0x80
 8001e24:	0436      	lsls	r6, r6, #16
 8001e26:	426d      	negs	r5, r5
 8001e28:	4334      	orrs	r4, r6
 8001e2a:	2d38      	cmp	r5, #56	; 0x38
 8001e2c:	dd00      	ble.n	8001e30 <__aeabi_dsub+0x368>
 8001e2e:	e0a8      	b.n	8001f82 <__aeabi_dsub+0x4ba>
 8001e30:	2d1f      	cmp	r5, #31
 8001e32:	dd00      	ble.n	8001e36 <__aeabi_dsub+0x36e>
 8001e34:	e11f      	b.n	8002076 <__aeabi_dsub+0x5ae>
 8001e36:	2620      	movs	r6, #32
 8001e38:	0027      	movs	r7, r4
 8001e3a:	4650      	mov	r0, sl
 8001e3c:	1b76      	subs	r6, r6, r5
 8001e3e:	40b7      	lsls	r7, r6
 8001e40:	40e8      	lsrs	r0, r5
 8001e42:	4307      	orrs	r7, r0
 8001e44:	4650      	mov	r0, sl
 8001e46:	40b0      	lsls	r0, r6
 8001e48:	1e46      	subs	r6, r0, #1
 8001e4a:	41b0      	sbcs	r0, r6
 8001e4c:	40ec      	lsrs	r4, r5
 8001e4e:	4338      	orrs	r0, r7
 8001e50:	1a17      	subs	r7, r2, r0
 8001e52:	42ba      	cmp	r2, r7
 8001e54:	4192      	sbcs	r2, r2
 8001e56:	1b0c      	subs	r4, r1, r4
 8001e58:	4252      	negs	r2, r2
 8001e5a:	1aa4      	subs	r4, r4, r2
 8001e5c:	4666      	mov	r6, ip
 8001e5e:	4698      	mov	r8, r3
 8001e60:	e68b      	b.n	8001b7a <__aeabi_dsub+0xb2>
 8001e62:	4664      	mov	r4, ip
 8001e64:	4667      	mov	r7, ip
 8001e66:	432c      	orrs	r4, r5
 8001e68:	d000      	beq.n	8001e6c <__aeabi_dsub+0x3a4>
 8001e6a:	e68b      	b.n	8001b84 <__aeabi_dsub+0xbc>
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	2600      	movs	r6, #0
 8001e70:	2700      	movs	r7, #0
 8001e72:	e6ea      	b.n	8001c4a <__aeabi_dsub+0x182>
 8001e74:	001e      	movs	r6, r3
 8001e76:	e6ad      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001e78:	2b1f      	cmp	r3, #31
 8001e7a:	dc60      	bgt.n	8001f3e <__aeabi_dsub+0x476>
 8001e7c:	2720      	movs	r7, #32
 8001e7e:	1af8      	subs	r0, r7, r3
 8001e80:	000f      	movs	r7, r1
 8001e82:	4684      	mov	ip, r0
 8001e84:	4087      	lsls	r7, r0
 8001e86:	0010      	movs	r0, r2
 8001e88:	40d8      	lsrs	r0, r3
 8001e8a:	4307      	orrs	r7, r0
 8001e8c:	4660      	mov	r0, ip
 8001e8e:	4082      	lsls	r2, r0
 8001e90:	1e50      	subs	r0, r2, #1
 8001e92:	4182      	sbcs	r2, r0
 8001e94:	40d9      	lsrs	r1, r3
 8001e96:	4317      	orrs	r7, r2
 8001e98:	e6f5      	b.n	8001c86 <__aeabi_dsub+0x1be>
 8001e9a:	0026      	movs	r6, r4
 8001e9c:	4650      	mov	r0, sl
 8001e9e:	4306      	orrs	r6, r0
 8001ea0:	d005      	beq.n	8001eae <__aeabi_dsub+0x3e6>
 8001ea2:	43ed      	mvns	r5, r5
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	d0d3      	beq.n	8001e50 <__aeabi_dsub+0x388>
 8001ea8:	4e90      	ldr	r6, [pc, #576]	; (80020ec <__aeabi_dsub+0x624>)
 8001eaa:	45b4      	cmp	ip, r6
 8001eac:	d1bd      	bne.n	8001e2a <__aeabi_dsub+0x362>
 8001eae:	000c      	movs	r4, r1
 8001eb0:	0017      	movs	r7, r2
 8001eb2:	4666      	mov	r6, ip
 8001eb4:	4698      	mov	r8, r3
 8001eb6:	e68d      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001eb8:	488c      	ldr	r0, [pc, #560]	; (80020ec <__aeabi_dsub+0x624>)
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d00b      	beq.n	8001ed6 <__aeabi_dsub+0x40e>
 8001ebe:	4663      	mov	r3, ip
 8001ec0:	e6d9      	b.n	8001c76 <__aeabi_dsub+0x1ae>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d000      	beq.n	8001ec8 <__aeabi_dsub+0x400>
 8001ec6:	e096      	b.n	8001ff6 <__aeabi_dsub+0x52e>
 8001ec8:	0008      	movs	r0, r1
 8001eca:	4310      	orrs	r0, r2
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x408>
 8001ece:	e0e2      	b.n	8002096 <__aeabi_dsub+0x5ce>
 8001ed0:	000c      	movs	r4, r1
 8001ed2:	0017      	movs	r7, r2
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	4e85      	ldr	r6, [pc, #532]	; (80020ec <__aeabi_dsub+0x624>)
 8001ed8:	e67c      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001eda:	2500      	movs	r5, #0
 8001edc:	e780      	b.n	8001de0 <__aeabi_dsub+0x318>
 8001ede:	2100      	movs	r1, #0
 8001ee0:	e78e      	b.n	8001e00 <__aeabi_dsub+0x338>
 8001ee2:	0023      	movs	r3, r4
 8001ee4:	4650      	mov	r0, sl
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	2e00      	cmp	r6, #0
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x426>
 8001eec:	e0a8      	b.n	8002040 <__aeabi_dsub+0x578>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x42c>
 8001ef2:	e0de      	b.n	80020b2 <__aeabi_dsub+0x5ea>
 8001ef4:	000b      	movs	r3, r1
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x434>
 8001efa:	e66b      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001efc:	4452      	add	r2, sl
 8001efe:	4552      	cmp	r2, sl
 8001f00:	4180      	sbcs	r0, r0
 8001f02:	1864      	adds	r4, r4, r1
 8001f04:	4240      	negs	r0, r0
 8001f06:	1824      	adds	r4, r4, r0
 8001f08:	0017      	movs	r7, r2
 8001f0a:	0223      	lsls	r3, r4, #8
 8001f0c:	d400      	bmi.n	8001f10 <__aeabi_dsub+0x448>
 8001f0e:	e6fd      	b.n	8001d0c <__aeabi_dsub+0x244>
 8001f10:	4b77      	ldr	r3, [pc, #476]	; (80020f0 <__aeabi_dsub+0x628>)
 8001f12:	4666      	mov	r6, ip
 8001f14:	401c      	ands	r4, r3
 8001f16:	e65d      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001f18:	0025      	movs	r5, r4
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	4305      	orrs	r5, r0
 8001f1e:	2e00      	cmp	r6, #0
 8001f20:	d1cf      	bne.n	8001ec2 <__aeabi_dsub+0x3fa>
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d14f      	bne.n	8001fc6 <__aeabi_dsub+0x4fe>
 8001f26:	000c      	movs	r4, r1
 8001f28:	4314      	orrs	r4, r2
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x466>
 8001f2c:	e0a0      	b.n	8002070 <__aeabi_dsub+0x5a8>
 8001f2e:	000c      	movs	r4, r1
 8001f30:	0017      	movs	r7, r2
 8001f32:	4698      	mov	r8, r3
 8001f34:	e64e      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001f36:	4666      	mov	r6, ip
 8001f38:	2400      	movs	r4, #0
 8001f3a:	2700      	movs	r7, #0
 8001f3c:	e685      	b.n	8001c4a <__aeabi_dsub+0x182>
 8001f3e:	001f      	movs	r7, r3
 8001f40:	0008      	movs	r0, r1
 8001f42:	3f20      	subs	r7, #32
 8001f44:	40f8      	lsrs	r0, r7
 8001f46:	0007      	movs	r7, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x486>
 8001f4c:	e08e      	b.n	800206c <__aeabi_dsub+0x5a4>
 8001f4e:	2040      	movs	r0, #64	; 0x40
 8001f50:	1ac3      	subs	r3, r0, r3
 8001f52:	4099      	lsls	r1, r3
 8001f54:	430a      	orrs	r2, r1
 8001f56:	1e51      	subs	r1, r2, #1
 8001f58:	418a      	sbcs	r2, r1
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4317      	orrs	r7, r2
 8001f5e:	e692      	b.n	8001c86 <__aeabi_dsub+0x1be>
 8001f60:	2e00      	cmp	r6, #0
 8001f62:	d114      	bne.n	8001f8e <__aeabi_dsub+0x4c6>
 8001f64:	0026      	movs	r6, r4
 8001f66:	4650      	mov	r0, sl
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	d062      	beq.n	8002032 <__aeabi_dsub+0x56a>
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d15c      	bne.n	800202c <__aeabi_dsub+0x564>
 8001f72:	1887      	adds	r7, r0, r2
 8001f74:	4297      	cmp	r7, r2
 8001f76:	4192      	sbcs	r2, r2
 8001f78:	1864      	adds	r4, r4, r1
 8001f7a:	4252      	negs	r2, r2
 8001f7c:	18a4      	adds	r4, r4, r2
 8001f7e:	4666      	mov	r6, ip
 8001f80:	e687      	b.n	8001c92 <__aeabi_dsub+0x1ca>
 8001f82:	4650      	mov	r0, sl
 8001f84:	4320      	orrs	r0, r4
 8001f86:	1e44      	subs	r4, r0, #1
 8001f88:	41a0      	sbcs	r0, r4
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	e760      	b.n	8001e50 <__aeabi_dsub+0x388>
 8001f8e:	4e57      	ldr	r6, [pc, #348]	; (80020ec <__aeabi_dsub+0x624>)
 8001f90:	45b4      	cmp	ip, r6
 8001f92:	d04e      	beq.n	8002032 <__aeabi_dsub+0x56a>
 8001f94:	2680      	movs	r6, #128	; 0x80
 8001f96:	0436      	lsls	r6, r6, #16
 8001f98:	425b      	negs	r3, r3
 8001f9a:	4334      	orrs	r4, r6
 8001f9c:	2b38      	cmp	r3, #56	; 0x38
 8001f9e:	dd00      	ble.n	8001fa2 <__aeabi_dsub+0x4da>
 8001fa0:	e07f      	b.n	80020a2 <__aeabi_dsub+0x5da>
 8001fa2:	2b1f      	cmp	r3, #31
 8001fa4:	dd00      	ble.n	8001fa8 <__aeabi_dsub+0x4e0>
 8001fa6:	e08b      	b.n	80020c0 <__aeabi_dsub+0x5f8>
 8001fa8:	2620      	movs	r6, #32
 8001faa:	0027      	movs	r7, r4
 8001fac:	4650      	mov	r0, sl
 8001fae:	1af6      	subs	r6, r6, r3
 8001fb0:	40b7      	lsls	r7, r6
 8001fb2:	40d8      	lsrs	r0, r3
 8001fb4:	4307      	orrs	r7, r0
 8001fb6:	4650      	mov	r0, sl
 8001fb8:	40b0      	lsls	r0, r6
 8001fba:	1e46      	subs	r6, r0, #1
 8001fbc:	41b0      	sbcs	r0, r6
 8001fbe:	4307      	orrs	r7, r0
 8001fc0:	40dc      	lsrs	r4, r3
 8001fc2:	18bf      	adds	r7, r7, r2
 8001fc4:	e7d6      	b.n	8001f74 <__aeabi_dsub+0x4ac>
 8001fc6:	000d      	movs	r5, r1
 8001fc8:	4315      	orrs	r5, r2
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x506>
 8001fcc:	e602      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001fce:	4650      	mov	r0, sl
 8001fd0:	1a80      	subs	r0, r0, r2
 8001fd2:	4582      	cmp	sl, r0
 8001fd4:	41bf      	sbcs	r7, r7
 8001fd6:	1a65      	subs	r5, r4, r1
 8001fd8:	427f      	negs	r7, r7
 8001fda:	1bed      	subs	r5, r5, r7
 8001fdc:	4684      	mov	ip, r0
 8001fde:	0228      	lsls	r0, r5, #8
 8001fe0:	d400      	bmi.n	8001fe4 <__aeabi_dsub+0x51c>
 8001fe2:	e68d      	b.n	8001d00 <__aeabi_dsub+0x238>
 8001fe4:	4650      	mov	r0, sl
 8001fe6:	1a17      	subs	r7, r2, r0
 8001fe8:	42ba      	cmp	r2, r7
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	1b0c      	subs	r4, r1, r4
 8001fee:	4252      	negs	r2, r2
 8001ff0:	1aa4      	subs	r4, r4, r2
 8001ff2:	4698      	mov	r8, r3
 8001ff4:	e5ee      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 8001ff6:	000d      	movs	r5, r1
 8001ff8:	4315      	orrs	r5, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x536>
 8001ffc:	e76b      	b.n	8001ed6 <__aeabi_dsub+0x40e>
 8001ffe:	4650      	mov	r0, sl
 8002000:	0767      	lsls	r7, r4, #29
 8002002:	08c0      	lsrs	r0, r0, #3
 8002004:	4307      	orrs	r7, r0
 8002006:	2080      	movs	r0, #128	; 0x80
 8002008:	08e4      	lsrs	r4, r4, #3
 800200a:	0300      	lsls	r0, r0, #12
 800200c:	4204      	tst	r4, r0
 800200e:	d007      	beq.n	8002020 <__aeabi_dsub+0x558>
 8002010:	08cd      	lsrs	r5, r1, #3
 8002012:	4205      	tst	r5, r0
 8002014:	d104      	bne.n	8002020 <__aeabi_dsub+0x558>
 8002016:	002c      	movs	r4, r5
 8002018:	4698      	mov	r8, r3
 800201a:	08d7      	lsrs	r7, r2, #3
 800201c:	0749      	lsls	r1, r1, #29
 800201e:	430f      	orrs	r7, r1
 8002020:	0f7b      	lsrs	r3, r7, #29
 8002022:	00e4      	lsls	r4, r4, #3
 8002024:	431c      	orrs	r4, r3
 8002026:	00ff      	lsls	r7, r7, #3
 8002028:	4e30      	ldr	r6, [pc, #192]	; (80020ec <__aeabi_dsub+0x624>)
 800202a:	e5d3      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 800202c:	4e2f      	ldr	r6, [pc, #188]	; (80020ec <__aeabi_dsub+0x624>)
 800202e:	45b4      	cmp	ip, r6
 8002030:	d1b4      	bne.n	8001f9c <__aeabi_dsub+0x4d4>
 8002032:	000c      	movs	r4, r1
 8002034:	0017      	movs	r7, r2
 8002036:	4666      	mov	r6, ip
 8002038:	e5cc      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 800203a:	2700      	movs	r7, #0
 800203c:	2400      	movs	r4, #0
 800203e:	e5e8      	b.n	8001c12 <__aeabi_dsub+0x14a>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d039      	beq.n	80020b8 <__aeabi_dsub+0x5f0>
 8002044:	000b      	movs	r3, r1
 8002046:	4313      	orrs	r3, r2
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x584>
 800204a:	e744      	b.n	8001ed6 <__aeabi_dsub+0x40e>
 800204c:	08c0      	lsrs	r0, r0, #3
 800204e:	0767      	lsls	r7, r4, #29
 8002050:	4307      	orrs	r7, r0
 8002052:	2080      	movs	r0, #128	; 0x80
 8002054:	08e4      	lsrs	r4, r4, #3
 8002056:	0300      	lsls	r0, r0, #12
 8002058:	4204      	tst	r4, r0
 800205a:	d0e1      	beq.n	8002020 <__aeabi_dsub+0x558>
 800205c:	08cb      	lsrs	r3, r1, #3
 800205e:	4203      	tst	r3, r0
 8002060:	d1de      	bne.n	8002020 <__aeabi_dsub+0x558>
 8002062:	08d7      	lsrs	r7, r2, #3
 8002064:	0749      	lsls	r1, r1, #29
 8002066:	430f      	orrs	r7, r1
 8002068:	001c      	movs	r4, r3
 800206a:	e7d9      	b.n	8002020 <__aeabi_dsub+0x558>
 800206c:	2100      	movs	r1, #0
 800206e:	e771      	b.n	8001f54 <__aeabi_dsub+0x48c>
 8002070:	2500      	movs	r5, #0
 8002072:	2700      	movs	r7, #0
 8002074:	e5e9      	b.n	8001c4a <__aeabi_dsub+0x182>
 8002076:	002e      	movs	r6, r5
 8002078:	0027      	movs	r7, r4
 800207a:	3e20      	subs	r6, #32
 800207c:	40f7      	lsrs	r7, r6
 800207e:	2d20      	cmp	r5, #32
 8002080:	d02f      	beq.n	80020e2 <__aeabi_dsub+0x61a>
 8002082:	2640      	movs	r6, #64	; 0x40
 8002084:	1b75      	subs	r5, r6, r5
 8002086:	40ac      	lsls	r4, r5
 8002088:	4650      	mov	r0, sl
 800208a:	4320      	orrs	r0, r4
 800208c:	1e44      	subs	r4, r0, #1
 800208e:	41a0      	sbcs	r0, r4
 8002090:	2400      	movs	r4, #0
 8002092:	4338      	orrs	r0, r7
 8002094:	e6dc      	b.n	8001e50 <__aeabi_dsub+0x388>
 8002096:	2480      	movs	r4, #128	; 0x80
 8002098:	2500      	movs	r5, #0
 800209a:	0324      	lsls	r4, r4, #12
 800209c:	4e13      	ldr	r6, [pc, #76]	; (80020ec <__aeabi_dsub+0x624>)
 800209e:	2700      	movs	r7, #0
 80020a0:	e5d3      	b.n	8001c4a <__aeabi_dsub+0x182>
 80020a2:	4650      	mov	r0, sl
 80020a4:	4320      	orrs	r0, r4
 80020a6:	0007      	movs	r7, r0
 80020a8:	1e78      	subs	r0, r7, #1
 80020aa:	4187      	sbcs	r7, r0
 80020ac:	2400      	movs	r4, #0
 80020ae:	18bf      	adds	r7, r7, r2
 80020b0:	e760      	b.n	8001f74 <__aeabi_dsub+0x4ac>
 80020b2:	000c      	movs	r4, r1
 80020b4:	0017      	movs	r7, r2
 80020b6:	e58d      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 80020b8:	000c      	movs	r4, r1
 80020ba:	0017      	movs	r7, r2
 80020bc:	4e0b      	ldr	r6, [pc, #44]	; (80020ec <__aeabi_dsub+0x624>)
 80020be:	e589      	b.n	8001bd4 <__aeabi_dsub+0x10c>
 80020c0:	001e      	movs	r6, r3
 80020c2:	0027      	movs	r7, r4
 80020c4:	3e20      	subs	r6, #32
 80020c6:	40f7      	lsrs	r7, r6
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_dsub+0x61e>
 80020cc:	2640      	movs	r6, #64	; 0x40
 80020ce:	1af3      	subs	r3, r6, r3
 80020d0:	409c      	lsls	r4, r3
 80020d2:	4650      	mov	r0, sl
 80020d4:	4320      	orrs	r0, r4
 80020d6:	1e44      	subs	r4, r0, #1
 80020d8:	41a0      	sbcs	r0, r4
 80020da:	4307      	orrs	r7, r0
 80020dc:	2400      	movs	r4, #0
 80020de:	18bf      	adds	r7, r7, r2
 80020e0:	e748      	b.n	8001f74 <__aeabi_dsub+0x4ac>
 80020e2:	2400      	movs	r4, #0
 80020e4:	e7d0      	b.n	8002088 <__aeabi_dsub+0x5c0>
 80020e6:	2400      	movs	r4, #0
 80020e8:	e7f3      	b.n	80020d2 <__aeabi_dsub+0x60a>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff
 80020f0:	ff7fffff 	.word	0xff7fffff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	4e0e      	ldr	r6, [pc, #56]	; (8002130 <__aeabi_dcmpun+0x3c>)
 80020f8:	030d      	lsls	r5, r1, #12
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	0b2d      	lsrs	r5, r5, #12
 8002102:	0d49      	lsrs	r1, r1, #21
 8002104:	0b24      	lsrs	r4, r4, #12
 8002106:	0d5b      	lsrs	r3, r3, #21
 8002108:	42b1      	cmp	r1, r6
 800210a:	d004      	beq.n	8002116 <__aeabi_dcmpun+0x22>
 800210c:	4908      	ldr	r1, [pc, #32]	; (8002130 <__aeabi_dcmpun+0x3c>)
 800210e:	2000      	movs	r0, #0
 8002110:	428b      	cmp	r3, r1
 8002112:	d008      	beq.n	8002126 <__aeabi_dcmpun+0x32>
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	4305      	orrs	r5, r0
 8002118:	2001      	movs	r0, #1
 800211a:	2d00      	cmp	r5, #0
 800211c:	d1fa      	bne.n	8002114 <__aeabi_dcmpun+0x20>
 800211e:	4904      	ldr	r1, [pc, #16]	; (8002130 <__aeabi_dcmpun+0x3c>)
 8002120:	2000      	movs	r0, #0
 8002122:	428b      	cmp	r3, r1
 8002124:	d1f6      	bne.n	8002114 <__aeabi_dcmpun+0x20>
 8002126:	4314      	orrs	r4, r2
 8002128:	0020      	movs	r0, r4
 800212a:	1e44      	subs	r4, r0, #1
 800212c:	41a0      	sbcs	r0, r4
 800212e:	e7f1      	b.n	8002114 <__aeabi_dcmpun+0x20>
 8002130:	000007ff 	.word	0x000007ff

08002134 <__aeabi_d2iz>:
 8002134:	b530      	push	{r4, r5, lr}
 8002136:	4d13      	ldr	r5, [pc, #76]	; (8002184 <__aeabi_d2iz+0x50>)
 8002138:	030a      	lsls	r2, r1, #12
 800213a:	004b      	lsls	r3, r1, #1
 800213c:	0b12      	lsrs	r2, r2, #12
 800213e:	0d5b      	lsrs	r3, r3, #21
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	2400      	movs	r4, #0
 8002144:	42ab      	cmp	r3, r5
 8002146:	dd10      	ble.n	800216a <__aeabi_d2iz+0x36>
 8002148:	4c0f      	ldr	r4, [pc, #60]	; (8002188 <__aeabi_d2iz+0x54>)
 800214a:	42a3      	cmp	r3, r4
 800214c:	dc0f      	bgt.n	800216e <__aeabi_d2iz+0x3a>
 800214e:	2480      	movs	r4, #128	; 0x80
 8002150:	4d0e      	ldr	r5, [pc, #56]	; (800218c <__aeabi_d2iz+0x58>)
 8002152:	0364      	lsls	r4, r4, #13
 8002154:	4322      	orrs	r2, r4
 8002156:	1aed      	subs	r5, r5, r3
 8002158:	2d1f      	cmp	r5, #31
 800215a:	dd0b      	ble.n	8002174 <__aeabi_d2iz+0x40>
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <__aeabi_d2iz+0x5c>)
 800215e:	1ac3      	subs	r3, r0, r3
 8002160:	40da      	lsrs	r2, r3
 8002162:	4254      	negs	r4, r2
 8002164:	2900      	cmp	r1, #0
 8002166:	d100      	bne.n	800216a <__aeabi_d2iz+0x36>
 8002168:	0014      	movs	r4, r2
 800216a:	0020      	movs	r0, r4
 800216c:	bd30      	pop	{r4, r5, pc}
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <__aeabi_d2iz+0x60>)
 8002170:	18cc      	adds	r4, r1, r3
 8002172:	e7fa      	b.n	800216a <__aeabi_d2iz+0x36>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x64>)
 8002176:	40e8      	lsrs	r0, r5
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	409a      	lsls	r2, r3
 800217e:	4302      	orrs	r2, r0
 8002180:	e7ef      	b.n	8002162 <__aeabi_d2iz+0x2e>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	00000433 	.word	0x00000433
 8002190:	00000413 	.word	0x00000413
 8002194:	7fffffff 	.word	0x7fffffff
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d030      	beq.n	8002204 <__aeabi_i2d+0x68>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c4      	adds	r4, r0, r3
 80021a6:	405c      	eors	r4, r3
 80021a8:	0fc5      	lsrs	r5, r0, #31
 80021aa:	0020      	movs	r0, r4
 80021ac:	f000 f88a 	bl	80022c4 <__clzsi2>
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <__aeabi_i2d+0x74>)
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <__aeabi_i2d+0x78>)
 80021b4:	1a1b      	subs	r3, r3, r0
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	2a1f      	cmp	r2, #31
 80021ba:	dd18      	ble.n	80021ee <__aeabi_i2d+0x52>
 80021bc:	4a16      	ldr	r2, [pc, #88]	; (8002218 <__aeabi_i2d+0x7c>)
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	4094      	lsls	r4, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	055b      	lsls	r3, r3, #21
 80021c8:	0b24      	lsrs	r4, r4, #12
 80021ca:	0d5b      	lsrs	r3, r3, #21
 80021cc:	2100      	movs	r1, #0
 80021ce:	0010      	movs	r0, r2
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	0d0a      	lsrs	r2, r1, #20
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	0512      	lsls	r2, r2, #20
 80021d8:	4322      	orrs	r2, r4
 80021da:	4c10      	ldr	r4, [pc, #64]	; (800221c <__aeabi_i2d+0x80>)
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	4022      	ands	r2, r4
 80021e0:	4313      	orrs	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	07ed      	lsls	r5, r5, #31
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	432b      	orrs	r3, r5
 80021ea:	0019      	movs	r1, r3
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	0021      	movs	r1, r4
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	210b      	movs	r1, #11
 80021f6:	1a08      	subs	r0, r1, r0
 80021f8:	40c4      	lsrs	r4, r0
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	0324      	lsls	r4, r4, #12
 80021fe:	0b24      	lsrs	r4, r4, #12
 8002200:	0d5b      	lsrs	r3, r3, #21
 8002202:	e7e3      	b.n	80021cc <__aeabi_i2d+0x30>
 8002204:	2500      	movs	r5, #0
 8002206:	2300      	movs	r3, #0
 8002208:	2400      	movs	r4, #0
 800220a:	2200      	movs	r2, #0
 800220c:	e7de      	b.n	80021cc <__aeabi_i2d+0x30>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	0000041e 	.word	0x0000041e
 8002214:	00000433 	.word	0x00000433
 8002218:	00000413 	.word	0x00000413
 800221c:	800fffff 	.word	0x800fffff

08002220 <__aeabi_f2d>:
 8002220:	0041      	lsls	r1, r0, #1
 8002222:	0e09      	lsrs	r1, r1, #24
 8002224:	1c4b      	adds	r3, r1, #1
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	b2db      	uxtb	r3, r3
 800222a:	0246      	lsls	r6, r0, #9
 800222c:	0a75      	lsrs	r5, r6, #9
 800222e:	0fc4      	lsrs	r4, r0, #31
 8002230:	2b01      	cmp	r3, #1
 8002232:	dd14      	ble.n	800225e <__aeabi_f2d+0x3e>
 8002234:	23e0      	movs	r3, #224	; 0xe0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	076d      	lsls	r5, r5, #29
 800223a:	0b36      	lsrs	r6, r6, #12
 800223c:	18cb      	adds	r3, r1, r3
 800223e:	2100      	movs	r1, #0
 8002240:	0d0a      	lsrs	r2, r1, #20
 8002242:	0028      	movs	r0, r5
 8002244:	0512      	lsls	r2, r2, #20
 8002246:	4d1c      	ldr	r5, [pc, #112]	; (80022b8 <__aeabi_f2d+0x98>)
 8002248:	4332      	orrs	r2, r6
 800224a:	055b      	lsls	r3, r3, #21
 800224c:	402a      	ands	r2, r5
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	4313      	orrs	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	07e4      	lsls	r4, r4, #31
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	4323      	orrs	r3, r4
 800225a:	0019      	movs	r1, r3
 800225c:	bd70      	pop	{r4, r5, r6, pc}
 800225e:	2900      	cmp	r1, #0
 8002260:	d114      	bne.n	800228c <__aeabi_f2d+0x6c>
 8002262:	2d00      	cmp	r5, #0
 8002264:	d01e      	beq.n	80022a4 <__aeabi_f2d+0x84>
 8002266:	0028      	movs	r0, r5
 8002268:	f000 f82c 	bl	80022c4 <__clzsi2>
 800226c:	280a      	cmp	r0, #10
 800226e:	dc1c      	bgt.n	80022aa <__aeabi_f2d+0x8a>
 8002270:	230b      	movs	r3, #11
 8002272:	002a      	movs	r2, r5
 8002274:	1a1b      	subs	r3, r3, r0
 8002276:	40da      	lsrs	r2, r3
 8002278:	0003      	movs	r3, r0
 800227a:	3315      	adds	r3, #21
 800227c:	409d      	lsls	r5, r3
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <__aeabi_f2d+0x9c>)
 8002280:	0312      	lsls	r2, r2, #12
 8002282:	1a1b      	subs	r3, r3, r0
 8002284:	055b      	lsls	r3, r3, #21
 8002286:	0b16      	lsrs	r6, r2, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	e7d8      	b.n	800223e <__aeabi_f2d+0x1e>
 800228c:	2d00      	cmp	r5, #0
 800228e:	d006      	beq.n	800229e <__aeabi_f2d+0x7e>
 8002290:	0b32      	lsrs	r2, r6, #12
 8002292:	2680      	movs	r6, #128	; 0x80
 8002294:	0336      	lsls	r6, r6, #12
 8002296:	076d      	lsls	r5, r5, #29
 8002298:	4316      	orrs	r6, r2
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <__aeabi_f2d+0xa0>)
 800229c:	e7cf      	b.n	800223e <__aeabi_f2d+0x1e>
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <__aeabi_f2d+0xa0>)
 80022a0:	2600      	movs	r6, #0
 80022a2:	e7cc      	b.n	800223e <__aeabi_f2d+0x1e>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2600      	movs	r6, #0
 80022a8:	e7c9      	b.n	800223e <__aeabi_f2d+0x1e>
 80022aa:	0003      	movs	r3, r0
 80022ac:	002a      	movs	r2, r5
 80022ae:	3b0b      	subs	r3, #11
 80022b0:	409a      	lsls	r2, r3
 80022b2:	2500      	movs	r5, #0
 80022b4:	e7e3      	b.n	800227e <__aeabi_f2d+0x5e>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	800fffff 	.word	0x800fffff
 80022bc:	00000389 	.word	0x00000389
 80022c0:	000007ff 	.word	0x000007ff

080022c4 <__clzsi2>:
 80022c4:	211c      	movs	r1, #28
 80022c6:	2301      	movs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d301      	bcc.n	80022d2 <__clzsi2+0xe>
 80022ce:	0c00      	lsrs	r0, r0, #16
 80022d0:	3910      	subs	r1, #16
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	4298      	cmp	r0, r3
 80022d6:	d301      	bcc.n	80022dc <__clzsi2+0x18>
 80022d8:	0a00      	lsrs	r0, r0, #8
 80022da:	3908      	subs	r1, #8
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	4298      	cmp	r0, r3
 80022e0:	d301      	bcc.n	80022e6 <__clzsi2+0x22>
 80022e2:	0900      	lsrs	r0, r0, #4
 80022e4:	3904      	subs	r1, #4
 80022e6:	a202      	add	r2, pc, #8	; (adr r2, 80022f0 <__clzsi2+0x2c>)
 80022e8:	5c10      	ldrb	r0, [r2, r0]
 80022ea:	1840      	adds	r0, r0, r1
 80022ec:	4770      	bx	lr
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	02020304 	.word	0x02020304
 80022f4:	01010101 	.word	0x01010101
	...

08002300 <__clzdi2>:
 8002300:	b510      	push	{r4, lr}
 8002302:	2900      	cmp	r1, #0
 8002304:	d103      	bne.n	800230e <__clzdi2+0xe>
 8002306:	f7ff ffdd 	bl	80022c4 <__clzsi2>
 800230a:	3020      	adds	r0, #32
 800230c:	e002      	b.n	8002314 <__clzdi2+0x14>
 800230e:	1c08      	adds	r0, r1, #0
 8002310:	f7ff ffd8 	bl	80022c4 <__clzsi2>
 8002314:	bd10      	pop	{r4, pc}
 8002316:	46c0      	nop			; (mov r8, r8)

08002318 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_InitTick+0x44>)
{
 800231a:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 800231c:	6819      	ldr	r1, [r3, #0]
{
 800231e:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 8002320:	2900      	cmp	r1, #0
 8002322:	d101      	bne.n	8002328 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002326:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8002328:	20fa      	movs	r0, #250	; 0xfa
 800232a:	0080      	lsls	r0, r0, #2
 800232c:	f7fd ff10 	bl	8000150 <__udivsi3>
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_InitTick+0x48>)
 8002332:	0001      	movs	r1, r0
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f7fd ff0b 	bl	8000150 <__udivsi3>
 800233a:	f000 fba7 	bl	8002a8c <HAL_SYSTICK_Config>
 800233e:	1e04      	subs	r4, r0, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	2d03      	cmp	r5, #3
 8002344:	d8ee      	bhi.n	8002324 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002346:	0002      	movs	r2, r0
 8002348:	2001      	movs	r0, #1
 800234a:	0029      	movs	r1, r5
 800234c:	4240      	negs	r0, r0
 800234e:	f000 fb51 	bl	80029f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_InitTick+0x4c>)
 8002354:	0020      	movs	r0, r4
 8002356:	601d      	str	r5, [r3, #0]
 8002358:	e7e5      	b.n	8002326 <HAL_InitTick+0xe>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000000 	.word	0x20000000
 8002360:	20000208 	.word	0x20000208
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_Init+0x24>)
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	6811      	ldr	r1, [r2, #0]
{
 8002370:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002372:	430b      	orrs	r3, r1
 8002374:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff ffce 	bl	8002318 <HAL_InitTick>
 800237c:	1e04      	subs	r4, r0, #0
 800237e:	d103      	bne.n	8002388 <HAL_Init+0x20>
  HAL_MspInit();
 8002380:	f007 f948 	bl	8009614 <HAL_MspInit>
}
 8002384:	0020      	movs	r0, r4
 8002386:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002388:	2401      	movs	r4, #1
 800238a:	e7fb      	b.n	8002384 <HAL_Init+0x1c>
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_IncTick+0x10>)
 8002392:	4904      	ldr	r1, [pc, #16]	; (80023a4 <HAL_IncTick+0x14>)
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	185b      	adds	r3, r3, r1
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	4770      	bx	lr
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000828 	.word	0x20000828
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023a8:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <HAL_GetTick+0x8>)
 80023aa:	6818      	ldr	r0, [r3, #0]
}
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000828 	.word	0x20000828

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fff6 	bl	80023a8 <HAL_GetTick>
 80023bc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	1c63      	adds	r3, r4, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <HAL_Delay+0x20>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	1b40      	subs	r0, r0, r5
 80023ce:	4284      	cmp	r4, r0
 80023d0:	d8fa      	bhi.n	80023c8 <HAL_Delay+0x14>
  {
  }
}
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	20000000 	.word	0x20000000

080023d8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d8:	6880      	ldr	r0, [r0, #8]
 80023da:	0740      	lsls	r0, r0, #29
 80023dc:	0fc0      	lsrs	r0, r0, #31
}
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e0:	2300      	movs	r3, #0
{
 80023e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e4:	b085      	sub	sp, #20
 80023e6:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80023ea:	2501      	movs	r5, #1
  if(hadc == NULL)
 80023ec:	4298      	cmp	r0, r3
 80023ee:	d100      	bne.n	80023f2 <HAL_ADC_Init+0x12>
 80023f0:	e09a      	b.n	8002528 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023f2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80023f4:	429d      	cmp	r5, r3
 80023f6:	d105      	bne.n	8002404 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f8:	f003 fe26 	bl	8006048 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023fc:	0023      	movs	r3, r4
 80023fe:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002400:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002402:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002404:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002406:	6826      	ldr	r6, [r4, #0]
 8002408:	055b      	lsls	r3, r3, #21
 800240a:	68b2      	ldr	r2, [r6, #8]
 800240c:	421a      	tst	r2, r3
 800240e:	d100      	bne.n	8002412 <HAL_ADC_Init+0x32>
 8002410:	e0d0      	b.n	80025b4 <HAL_ADC_Init+0x1d4>
 8002412:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2500      	movs	r5, #0
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	d400      	bmi.n	800241c <HAL_ADC_Init+0x3c>
 800241a:	e0d8      	b.n	80025ce <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241c:	0030      	movs	r0, r6
 800241e:	f7ff ffdb 	bl	80023d8 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002422:	2310      	movs	r3, #16
 8002424:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8002426:	401e      	ands	r6, r3
 8002428:	d000      	beq.n	800242c <HAL_ADC_Init+0x4c>
 800242a:	e0be      	b.n	80025aa <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800242c:	2800      	cmp	r0, #0
 800242e:	d000      	beq.n	8002432 <HAL_ADC_Init+0x52>
 8002430:	e0bb      	b.n	80025aa <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002434:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <HAL_ADC_Init+0x248>)
 8002436:	401a      	ands	r2, r3
 8002438:	2302      	movs	r3, #2
 800243a:	4313      	orrs	r3, r2
 800243c:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	07d2      	lsls	r2, r2, #31
 8002444:	d400      	bmi.n	8002448 <HAL_ADC_Init+0x68>
 8002446:	e0cb      	b.n	80025e0 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002448:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800244a:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800244c:	1e78      	subs	r0, r7, #1
 800244e:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002450:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002452:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002454:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002456:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002458:	9001      	str	r0, [sp, #4]
 800245a:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245c:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800245e:	7ea2      	ldrb	r2, [r4, #26]
 8002460:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002462:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002464:	4694      	mov	ip, r2
 8002466:	0352      	lsls	r2, r2, #13
 8002468:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800246a:	2800      	cmp	r0, #0
 800246c:	da66      	bge.n	800253c <HAL_ADC_Init+0x15c>
 800246e:	0047      	lsls	r7, r0, #1
 8002470:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002472:	0022      	movs	r2, r4
 8002474:	322c      	adds	r2, #44	; 0x2c
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800247a:	430a      	orrs	r2, r1
 800247c:	9901      	ldr	r1, [sp, #4]
 800247e:	430a      	orrs	r2, r1
 8002480:	4317      	orrs	r7, r2
 8002482:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	1c62      	adds	r2, r4, #1
 8002486:	7fd2      	ldrb	r2, [r2, #31]
 8002488:	2a01      	cmp	r2, #1
 800248a:	d107      	bne.n	800249c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	4661      	mov	r1, ip
 800248e:	2900      	cmp	r1, #0
 8002490:	d157      	bne.n	8002542 <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0039      	movs	r1, r7
 8002496:	0252      	lsls	r2, r2, #9
 8002498:	4311      	orrs	r1, r2
 800249a:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024a2:	21e0      	movs	r1, #224	; 0xe0
 80024a4:	0049      	lsls	r1, r1, #1
 80024a6:	400a      	ands	r2, r1
 80024a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024aa:	430a      	orrs	r2, r1
 80024ac:	9901      	ldr	r1, [sp, #4]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80024b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024b6:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 80024b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80024ba:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 80024bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024be:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80024c0:	0021      	movs	r1, r4
 80024c2:	313c      	adds	r1, #60	; 0x3c
 80024c4:	7809      	ldrb	r1, [r1, #0]
 80024c6:	2901      	cmp	r1, #1
 80024c8:	d100      	bne.n	80024cc <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80024ca:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	4f57      	ldr	r7, [pc, #348]	; (800262c <HAL_ADC_Init+0x24c>)
 80024d0:	4039      	ands	r1, r7
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4339      	orrs	r1, r7
 80024d6:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	4f55      	ldr	r7, [pc, #340]	; (8002630 <HAL_ADC_Init+0x250>)
 80024dc:	4039      	ands	r1, r7
 80024de:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 80024e0:	2107      	movs	r1, #7
 80024e2:	2770      	movs	r7, #112	; 0x70
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	438a      	bics	r2, r1
 80024ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ec:	430a      	orrs	r2, r1
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024f4:	43ba      	bics	r2, r7
 80024f6:	0109      	lsls	r1, r1, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d12a      	bne.n	8002556 <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002500:	2210      	movs	r2, #16
 8002502:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002504:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002506:	430a      	orrs	r2, r1
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800250a:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <HAL_ADC_Init+0x254>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	9a01      	ldr	r2, [sp, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d13d      	bne.n	8002592 <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002516:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002518:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800251a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800251c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800251e:	4393      	bics	r3, r2
 8002520:	001a      	movs	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	4313      	orrs	r3, r2
 8002526:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002528:	0028      	movs	r0, r5
 800252a:	b005      	add	sp, #20
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 800252e:	9b03      	ldr	r3, [sp, #12]
 8002530:	3b01      	subs	r3, #1
 8002532:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_Init+0x14e>
 800253a:	e76a      	b.n	8002412 <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800253c:	2780      	movs	r7, #128	; 0x80
 800253e:	03bf      	lsls	r7, r7, #14
 8002540:	e797      	b.n	8002472 <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002544:	468c      	mov	ip, r1
 8002546:	2120      	movs	r1, #32
 8002548:	4667      	mov	r7, ip
 800254a:	4339      	orrs	r1, r7
 800254c:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002550:	430a      	orrs	r2, r1
 8002552:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002554:	e7a2      	b.n	800249c <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	0392      	lsls	r2, r2, #14
 800255a:	4290      	cmp	r0, r2
 800255c:	d1d5      	bne.n	800250a <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 800255e:	200f      	movs	r0, #15
 8002560:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002562:	000f      	movs	r7, r1
 8002564:	00b2      	lsls	r2, r6, #2
 8002566:	40d7      	lsrs	r7, r2
 8002568:	003a      	movs	r2, r7
 800256a:	4002      	ands	r2, r0
 800256c:	2a0f      	cmp	r2, #15
 800256e:	d00d      	beq.n	800258c <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002570:	3601      	adds	r6, #1
 8002572:	2e08      	cmp	r6, #8
 8002574:	d1f5      	bne.n	8002562 <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002576:	4830      	ldr	r0, [pc, #192]	; (8002638 <HAL_ADC_Init+0x258>)
 8002578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800257a:	69e2      	ldr	r2, [r4, #28]
 800257c:	1812      	adds	r2, r2, r0
 800257e:	201c      	movs	r0, #28
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	4002      	ands	r2, r0
 8002584:	382c      	subs	r0, #44	; 0x2c
 8002586:	4090      	lsls	r0, r2
 8002588:	0002      	movs	r2, r0
 800258a:	e7bc      	b.n	8002506 <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 800258c:	2e01      	cmp	r6, #1
 800258e:	d0b7      	beq.n	8002500 <HAL_ADC_Init+0x120>
 8002590:	e7f1      	b.n	8002576 <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8002592:	2212      	movs	r2, #18
 8002594:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002598:	4393      	bics	r3, r2
 800259a:	001a      	movs	r2, r3
 800259c:	2310      	movs	r3, #16
 800259e:	4313      	orrs	r3, r2
 80025a0:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025a4:	432b      	orrs	r3, r5
 80025a6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80025a8:	e7be      	b.n	8002528 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80025ac:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	4313      	orrs	r3, r2
 80025b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80025b2:	e7b9      	b.n	8002528 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 80025b4:	68b2      	ldr	r2, [r6, #8]
 80025b6:	4921      	ldr	r1, [pc, #132]	; (800263c <HAL_ADC_Init+0x25c>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_ADC_Init+0x260>)
 80025c0:	4920      	ldr	r1, [pc, #128]	; (8002644 <HAL_ADC_Init+0x264>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	f7fd fdc4 	bl	8000150 <__udivsi3>
 80025c8:	0040      	lsls	r0, r0, #1
 80025ca:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 80025cc:	e7b2      	b.n	8002534 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80025d4:	4313      	orrs	r3, r2
 80025d6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025da:	432b      	orrs	r3, r5
 80025dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80025de:	e71d      	b.n	800241c <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80025e0:	2118      	movs	r1, #24
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	438a      	bics	r2, r1
 80025e6:	68a1      	ldr	r1, [r4, #8]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80025ec:	6861      	ldr	r1, [r4, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	0f88      	lsrs	r0, r1, #30
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	0780      	lsls	r0, r0, #30
 80025f6:	0892      	lsrs	r2, r2, #2
 80025f8:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025fa:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80025fc:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025fe:	004a      	lsls	r2, r1, #1
 8002600:	0852      	lsrs	r2, r2, #1
 8002602:	05c0      	lsls	r0, r0, #23
 8002604:	4282      	cmp	r2, r0
 8002606:	d100      	bne.n	800260a <HAL_ADC_Init+0x22a>
 8002608:	e71e      	b.n	8002448 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	0612      	lsls	r2, r2, #24
 800260e:	4291      	cmp	r1, r2
 8002610:	d100      	bne.n	8002614 <HAL_ADC_Init+0x234>
 8002612:	e719      	b.n	8002448 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <HAL_ADC_Init+0x268>)
 8002616:	4f0d      	ldr	r7, [pc, #52]	; (800264c <HAL_ADC_Init+0x26c>)
 8002618:	6802      	ldr	r2, [r0, #0]
 800261a:	403a      	ands	r2, r7
 800261c:	27f0      	movs	r7, #240	; 0xf0
 800261e:	03bf      	lsls	r7, r7, #14
 8002620:	4039      	ands	r1, r7
 8002622:	430a      	orrs	r2, r1
 8002624:	6002      	str	r2, [r0, #0]
 8002626:	e70f      	b.n	8002448 <HAL_ADC_Init+0x68>
 8002628:	fffffefd 	.word	0xfffffefd
 800262c:	fffe0219 	.word	0xfffe0219
 8002630:	dffffc02 	.word	0xdffffc02
 8002634:	833fffe7 	.word	0x833fffe7
 8002638:	3fffffff 	.word	0x3fffffff
 800263c:	6fffffe8 	.word	0x6fffffe8
 8002640:	20000208 	.word	0x20000208
 8002644:	00030d40 	.word	0x00030d40
 8002648:	40012708 	.word	0x40012708
 800264c:	ffc3ffff 	.word	0xffc3ffff

08002650 <HAL_ADC_ConvCpltCallback>:
 8002650:	4770      	bx	lr

08002652 <HAL_ADC_LevelOutOfWindowCallback>:
 8002652:	4770      	bx	lr

08002654 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_IRQHandler>:
{
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800265a:	6803      	ldr	r3, [r0, #0]
{
 800265c:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800265e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002660:	685e      	ldr	r6, [r3, #4]
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002662:	2302      	movs	r3, #2
 8002664:	421d      	tst	r5, r3
 8002666:	d00f      	beq.n	8002688 <HAL_ADC_IRQHandler+0x30>
 8002668:	421e      	tst	r6, r3
 800266a:	d00d      	beq.n	8002688 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800266e:	06db      	lsls	r3, r3, #27
 8002670:	d404      	bmi.n	800267c <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4313      	orrs	r3, r2
 800267a:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800267c:	0020      	movs	r0, r4
 800267e:	f000 f9b7 	bl	80029f0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 8002682:	2202      	movs	r2, #2
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	601a      	str	r2, [r3, #0]
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002688:	2304      	movs	r3, #4
 800268a:	421d      	tst	r5, r3
 800268c:	d001      	beq.n	8002692 <HAL_ADC_IRQHandler+0x3a>
 800268e:	421e      	tst	r6, r3
 8002690:	d104      	bne.n	800269c <HAL_ADC_IRQHandler+0x44>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8002692:	2308      	movs	r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002694:	421d      	tst	r5, r3
 8002696:	d02a      	beq.n	80026ee <HAL_ADC_IRQHandler+0x96>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 8002698:	421e      	tst	r6, r3
 800269a:	d028      	beq.n	80026ee <HAL_ADC_IRQHandler+0x96>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800269e:	06db      	lsls	r3, r3, #27
 80026a0:	d404      	bmi.n	80026ac <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4313      	orrs	r3, r2
 80026aa:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80026ac:	23c0      	movs	r3, #192	; 0xc0
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	68c2      	ldr	r2, [r0, #12]
 80026b4:	421a      	tst	r2, r3
 80026b6:	d114      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x8a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80026b8:	7ea3      	ldrb	r3, [r4, #26]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	071b      	lsls	r3, r3, #28
 80026c2:	d50e      	bpl.n	80026e2 <HAL_ADC_IRQHandler+0x8a>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c4:	f7ff fe88 	bl	80023d8 <LL_ADC_REG_IsConversionOngoing>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d15a      	bne.n	8002782 <HAL_ADC_IRQHandler+0x12a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026cc:	210c      	movs	r1, #12
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	6853      	ldr	r3, [r2, #4]
 80026d2:	438b      	bics	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80026d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026d8:	4a35      	ldr	r2, [pc, #212]	; (80027b0 <HAL_ADC_IRQHandler+0x158>)
 80026da:	401a      	ands	r2, r3
 80026dc:	2301      	movs	r3, #1
 80026de:	4313      	orrs	r3, r2
 80026e0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80026e2:	0020      	movs	r0, r4
 80026e4:	f7ff ffb4 	bl	8002650 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80026e8:	220c      	movs	r2, #12
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 80026ee:	2780      	movs	r7, #128	; 0x80
 80026f0:	423d      	tst	r5, r7
 80026f2:	d00b      	beq.n	800270c <HAL_ADC_IRQHandler+0xb4>
 80026f4:	423e      	tst	r6, r7
 80026f6:	d009      	beq.n	800270c <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4313      	orrs	r3, r2
 8002700:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002702:	0020      	movs	r0, r4
 8002704:	f7ff ffa5 	bl	8002652 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 800270c:	2780      	movs	r7, #128	; 0x80
 800270e:	007f      	lsls	r7, r7, #1
 8002710:	423d      	tst	r5, r7
 8002712:	d00b      	beq.n	800272c <HAL_ADC_IRQHandler+0xd4>
 8002714:	423e      	tst	r6, r7
 8002716:	d009      	beq.n	800272c <HAL_ADC_IRQHandler+0xd4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	4313      	orrs	r3, r2
 8002720:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002722:	0020      	movs	r0, r4
 8002724:	f000 f962 	bl	80029ec <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 800272c:	2780      	movs	r7, #128	; 0x80
 800272e:	00bf      	lsls	r7, r7, #2
 8002730:	423d      	tst	r5, r7
 8002732:	d00b      	beq.n	800274c <HAL_ADC_IRQHandler+0xf4>
 8002734:	423e      	tst	r6, r7
 8002736:	d009      	beq.n	800274c <HAL_ADC_IRQHandler+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800273c:	02db      	lsls	r3, r3, #11
 800273e:	4313      	orrs	r3, r2
 8002740:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002742:	0020      	movs	r0, r4
 8002744:	f000 f953 	bl	80029ee <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 800274c:	2310      	movs	r3, #16
 800274e:	421d      	tst	r5, r3
 8002750:	d00b      	beq.n	800276a <HAL_ADC_IRQHandler+0x112>
 8002752:	421e      	tst	r6, r3
 8002754:	d009      	beq.n	800276a <HAL_ADC_IRQHandler+0x112>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_ADC_IRQHandler+0x13c>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800275c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	079b      	lsls	r3, r3, #30
 8002762:	d117      	bne.n	8002794 <HAL_ADC_IRQHandler+0x13c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002764:	2210      	movs	r2, #16
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800276a:	2780      	movs	r7, #128	; 0x80
 800276c:	01bf      	lsls	r7, r7, #6
 800276e:	423d      	tst	r5, r7
 8002770:	d006      	beq.n	8002780 <HAL_ADC_IRQHandler+0x128>
 8002772:	423e      	tst	r6, r7
 8002774:	d004      	beq.n	8002780 <HAL_ADC_IRQHandler+0x128>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002776:	0020      	movs	r0, r4
 8002778:	f000 f93b 	bl	80029f2 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	601f      	str	r7, [r3, #0]
}
 8002780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	2320      	movs	r3, #32
 8002784:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002786:	4313      	orrs	r3, r2
 8002788:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	2301      	movs	r3, #1
 800278c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800278e:	4313      	orrs	r3, r2
 8002790:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002792:	e7a6      	b.n	80026e2 <HAL_ADC_IRQHandler+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4313      	orrs	r3, r2
 800279c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800279e:	2302      	movs	r3, #2
 80027a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80027a2:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027a4:	4313      	orrs	r3, r2
 80027a6:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80027a8:	f7ff ff54 	bl	8002654 <HAL_ADC_ErrorCallback>
 80027ac:	e7da      	b.n	8002764 <HAL_ADC_IRQHandler+0x10c>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	fffffefe 	.word	0xfffffefe

080027b4 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027b4:	2300      	movs	r3, #0
{
 80027b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b8:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 80027ba:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	0003      	movs	r3, r0
 80027be:	3354      	adds	r3, #84	; 0x54
 80027c0:	781a      	ldrb	r2, [r3, #0]
{
 80027c2:	0005      	movs	r5, r0
 80027c4:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 80027c6:	2402      	movs	r4, #2
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d100      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1a>
 80027cc:	e0c1      	b.n	8002952 <HAL_ADC_ConfigChannel+0x19e>
 80027ce:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 80027d2:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d4:	f7ff fe00 	bl	80023d8 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	9003      	str	r0, [sp, #12]
 80027da:	2800      	cmp	r0, #0
 80027dc:	d000      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x2c>
 80027de:	e0ef      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x20c>
 80027e0:	2204      	movs	r2, #4
 80027e2:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4694      	mov	ip, r2
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9801      	ldr	r0, [sp, #4]
 80027ec:	692b      	ldr	r3, [r5, #16]
 80027ee:	0609      	lsls	r1, r1, #24
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	42a0      	cmp	r0, r4
 80027f4:	d100      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x44>
 80027f6:	e0b6      	b.n	8002966 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80027f8:	4660      	mov	r0, ip
 80027fa:	4383      	bics	r3, r0
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d113      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002800:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002802:	0353      	lsls	r3, r2, #13
 8002804:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8002806:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8002808:	4303      	orrs	r3, r0
 800280a:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800280c:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	496e      	ldr	r1, [pc, #440]	; (80029cc <HAL_ADC_ConfigChannel+0x218>)
 8002812:	6944      	ldr	r4, [r0, #20]
 8002814:	4019      	ands	r1, r3
 8002816:	4061      	eors	r1, r4
 8002818:	0213      	lsls	r3, r2, #8
 800281a:	400b      	ands	r3, r1
 800281c:	4063      	eors	r3, r4
 800281e:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002820:	2a00      	cmp	r2, #0
 8002822:	db65      	blt.n	80028f0 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002824:	2400      	movs	r4, #0
 8002826:	e091      	b.n	800294c <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002828:	211f      	movs	r1, #31
 800282a:	9b01      	ldr	r3, [sp, #4]
 800282c:	400b      	ands	r3, r1
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	230f      	movs	r3, #15
 8002832:	9802      	ldr	r0, [sp, #8]
 8002834:	4083      	lsls	r3, r0
 8002836:	43db      	mvns	r3, r3
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	9804      	ldr	r0, [sp, #16]
 800283c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800283e:	4003      	ands	r3, r0
 8002840:	9305      	str	r3, [sp, #20]
 8002842:	0350      	lsls	r0, r2, #13
 8002844:	0013      	movs	r3, r2
 8002846:	2800      	cmp	r0, #0
 8002848:	d115      	bne.n	8002876 <HAL_ADC_ConfigChannel+0xc2>
 800284a:	0e90      	lsrs	r0, r2, #26
 800284c:	4008      	ands	r0, r1
 800284e:	9902      	ldr	r1, [sp, #8]
 8002850:	4088      	lsls	r0, r1
 8002852:	9905      	ldr	r1, [sp, #20]
 8002854:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002856:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002858:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800285a:	0889      	lsrs	r1, r1, #2
 800285c:	69e8      	ldr	r0, [r5, #28]
 800285e:	3101      	adds	r1, #1
 8002860:	4281      	cmp	r1, r0
 8002862:	d8d3      	bhi.n	800280c <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8002864:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002866:	6829      	ldr	r1, [r5, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	0f1b      	lsrs	r3, r3, #28
 800286c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800286e:	40a3      	lsls	r3, r4
 8002870:	9c04      	ldr	r4, [sp, #16]
 8002872:	4020      	ands	r0, r4
 8002874:	e7c8      	b.n	8002808 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002876:	9803      	ldr	r0, [sp, #12]
 8002878:	4232      	tst	r2, r6
 800287a:	d1e8      	bne.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 800287c:	0030      	movs	r0, r6
 800287e:	4222      	tst	r2, r4
 8002880:	d1e5      	bne.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 8002882:	4661      	mov	r1, ip
 8002884:	0020      	movs	r0, r4
 8002886:	420a      	tst	r2, r1
 8002888:	d1e1      	bne.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 800288a:	2003      	movs	r0, #3
 800288c:	0711      	lsls	r1, r2, #28
 800288e:	d4de      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 8002890:	4660      	mov	r0, ip
 8002892:	06d1      	lsls	r1, r2, #27
 8002894:	d4db      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 8002896:	2005      	movs	r0, #5
 8002898:	0691      	lsls	r1, r2, #26
 800289a:	d4d8      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 800289c:	3001      	adds	r0, #1
 800289e:	0651      	lsls	r1, r2, #25
 80028a0:	d4d5      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028a2:	3001      	adds	r0, #1
 80028a4:	0611      	lsls	r1, r2, #24
 80028a6:	d4d2      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028a8:	3001      	adds	r0, #1
 80028aa:	05d1      	lsls	r1, r2, #23
 80028ac:	d4cf      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028ae:	3001      	adds	r0, #1
 80028b0:	0591      	lsls	r1, r2, #22
 80028b2:	d4cc      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028b4:	3001      	adds	r0, #1
 80028b6:	0551      	lsls	r1, r2, #21
 80028b8:	d4c9      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028ba:	3001      	adds	r0, #1
 80028bc:	0511      	lsls	r1, r2, #20
 80028be:	d4c6      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028c0:	3001      	adds	r0, #1
 80028c2:	04d1      	lsls	r1, r2, #19
 80028c4:	d4c3      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028c6:	3001      	adds	r0, #1
 80028c8:	0491      	lsls	r1, r2, #18
 80028ca:	d4c0      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028cc:	3001      	adds	r0, #1
 80028ce:	0451      	lsls	r1, r2, #17
 80028d0:	d4bd      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028d2:	3001      	adds	r0, #1
 80028d4:	0411      	lsls	r1, r2, #16
 80028d6:	d4ba      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028d8:	3001      	adds	r0, #1
 80028da:	03d1      	lsls	r1, r2, #15
 80028dc:	d4b7      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028de:	3001      	adds	r0, #1
 80028e0:	0391      	lsls	r1, r2, #14
 80028e2:	d4b4      	bmi.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028e4:	2080      	movs	r0, #128	; 0x80
 80028e6:	02c0      	lsls	r0, r0, #11
 80028e8:	4010      	ands	r0, r2
 80028ea:	d0b0      	beq.n	800284e <HAL_ADC_ConfigChannel+0x9a>
 80028ec:	2012      	movs	r0, #18
 80028ee:	e7ae      	b.n	800284e <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028f0:	21e0      	movs	r1, #224	; 0xe0
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f4:	4837      	ldr	r0, [pc, #220]	; (80029d4 <HAL_ADC_ConfigChannel+0x220>)
 80028f6:	681c      	ldr	r4, [r3, #0]
 80028f8:	0449      	lsls	r1, r1, #17
 80028fa:	4021      	ands	r1, r4
 80028fc:	4282      	cmp	r2, r0
 80028fe:	d117      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x17c>
 8002900:	2080      	movs	r0, #128	; 0x80
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	4204      	tst	r4, r0
 8002906:	d18d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4c33      	ldr	r4, [pc, #204]	; (80029d8 <HAL_ADC_ConfigChannel+0x224>)
 800290c:	4022      	ands	r2, r4
 800290e:	430a      	orrs	r2, r1
 8002910:	4302      	orrs	r2, r0
 8002912:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_ADC_ConfigChannel+0x228>)
 8002916:	4932      	ldr	r1, [pc, #200]	; (80029e0 <HAL_ADC_ConfigChannel+0x22c>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f7fd fc19 	bl	8000150 <__udivsi3>
 800291e:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8002920:	9b07      	ldr	r3, [sp, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d100      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x174>
 8002926:	e77d      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8002928:	9b07      	ldr	r3, [sp, #28]
 800292a:	3b01      	subs	r3, #1
 800292c:	9307      	str	r3, [sp, #28]
 800292e:	e7f7      	b.n	8002920 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002930:	482c      	ldr	r0, [pc, #176]	; (80029e4 <HAL_ADC_ConfigChannel+0x230>)
 8002932:	4282      	cmp	r2, r0
 8002934:	d110      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1a4>
 8002936:	2080      	movs	r0, #128	; 0x80
 8002938:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800293a:	4004      	ands	r4, r0
 800293c:	d000      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x18c>
 800293e:	e771      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4e25      	ldr	r6, [pc, #148]	; (80029d8 <HAL_ADC_ConfigChannel+0x224>)
 8002944:	4032      	ands	r2, r6
 8002946:	430a      	orrs	r2, r1
 8002948:	4302      	orrs	r2, r0
 800294a:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294c:	2300      	movs	r3, #0
 800294e:	3554      	adds	r5, #84	; 0x54
 8002950:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002952:	0020      	movs	r0, r4
 8002954:	b009      	add	sp, #36	; 0x24
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002958:	4823      	ldr	r0, [pc, #140]	; (80029e8 <HAL_ADC_ConfigChannel+0x234>)
 800295a:	4282      	cmp	r2, r0
 800295c:	d000      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x1ac>
 800295e:	e761      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
 8002960:	2080      	movs	r0, #128	; 0x80
 8002962:	03c0      	lsls	r0, r0, #15
 8002964:	e7e9      	b.n	800293a <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002966:	4660      	mov	r0, ip
 8002968:	4383      	bics	r3, r0
 800296a:	428b      	cmp	r3, r1
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800296e:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002970:	0351      	lsls	r1, r2, #13
 8002972:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002974:	0b49      	lsrs	r1, r1, #13
 8002976:	438b      	bics	r3, r1
 8002978:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800297a:	2a00      	cmp	r2, #0
 800297c:	db00      	blt.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
 800297e:	e751      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	4914      	ldr	r1, [pc, #80]	; (80029d4 <HAL_ADC_ConfigChannel+0x220>)
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	428a      	cmp	r2, r1
 8002988:	d108      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 800298a:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800298c:	681c      	ldr	r4, [r3, #0]
 800298e:	0452      	lsls	r2, r2, #17
 8002990:	4911      	ldr	r1, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8002992:	4002      	ands	r2, r0
 8002994:	4021      	ands	r1, r4
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e743      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800299c:	4911      	ldr	r1, [pc, #68]	; (80029e4 <HAL_ADC_ConfigChannel+0x230>)
 800299e:	428a      	cmp	r2, r1
 80029a0:	d103      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80029a2:	22c0      	movs	r2, #192	; 0xc0
 80029a4:	681c      	ldr	r4, [r3, #0]
 80029a6:	0412      	lsls	r2, r2, #16
 80029a8:	e7f2      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029aa:	490f      	ldr	r1, [pc, #60]	; (80029e8 <HAL_ADC_ConfigChannel+0x234>)
 80029ac:	428a      	cmp	r2, r1
 80029ae:	d000      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x1fe>
 80029b0:	e738      	b.n	8002824 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80029b2:	22c0      	movs	r2, #192	; 0xc0
 80029b4:	0452      	lsls	r2, r2, #17
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	4002      	ands	r2, r0
 80029ba:	4807      	ldr	r0, [pc, #28]	; (80029d8 <HAL_ADC_ConfigChannel+0x224>)
 80029bc:	4001      	ands	r1, r0
 80029be:	e7ea      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	2320      	movs	r3, #32
 80029c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80029c4:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c6:	4313      	orrs	r3, r2
 80029c8:	65ab      	str	r3, [r5, #88]	; 0x58
 80029ca:	e7bf      	b.n	800294c <HAL_ADC_ConfigChannel+0x198>
 80029cc:	07ffff00 	.word	0x07ffff00
 80029d0:	40012708 	.word	0x40012708
 80029d4:	b0001000 	.word	0xb0001000
 80029d8:	fe3fffff 	.word	0xfe3fffff
 80029dc:	20000208 	.word	0x20000208
 80029e0:	00030d40 	.word	0x00030d40
 80029e4:	b8004000 	.word	0xb8004000
 80029e8:	b4002000 	.word	0xb4002000

080029ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80029ec:	4770      	bx	lr

080029ee <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADCEx_EndOfSamplingCallback>:
 80029f0:	4770      	bx	lr

080029f2 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80029f2:	4770      	bx	lr

080029f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80029f8:	2800      	cmp	r0, #0
 80029fa:	db12      	blt.n	8002a22 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029fc:	0883      	lsrs	r3, r0, #2
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_NVIC_SetPriority+0x58>)
 8002a00:	2403      	movs	r4, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	189b      	adds	r3, r3, r2
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	4020      	ands	r0, r4
 8002a0a:	40a0      	lsls	r0, r4
 8002a0c:	0014      	movs	r4, r2
 8002a0e:	25c0      	movs	r5, #192	; 0xc0
 8002a10:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a12:	4011      	ands	r1, r2
 8002a14:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a16:	00ad      	lsls	r5, r5, #2
 8002a18:	595e      	ldr	r6, [r3, r5]
 8002a1a:	43a6      	bics	r6, r4
 8002a1c:	4331      	orrs	r1, r6
 8002a1e:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a22:	2403      	movs	r4, #3
 8002a24:	230f      	movs	r3, #15
 8002a26:	b2c0      	uxtb	r0, r0
 8002a28:	4003      	ands	r3, r0
 8002a2a:	4020      	ands	r0, r4
 8002a2c:	40a0      	lsls	r0, r4
 8002a2e:	34fc      	adds	r4, #252	; 0xfc
 8002a30:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a32:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a34:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a36:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a38:	3b08      	subs	r3, #8
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <HAL_NVIC_SetPriority+0x5c>)
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	189b      	adds	r3, r3, r2
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	43aa      	bics	r2, r5
 8002a46:	4311      	orrs	r1, r2
 8002a48:	61d9      	str	r1, [r3, #28]
 8002a4a:	e7e9      	b.n	8002a20 <HAL_NVIC_SetPriority+0x2c>
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a54:	2800      	cmp	r0, #0
 8002a56:	db05      	blt.n	8002a64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a58:	231f      	movs	r3, #31
 8002a5a:	4018      	ands	r0, r3
 8002a5c:	3b1e      	subs	r3, #30
 8002a5e:	4083      	lsls	r3, r0
 8002a60:	4a01      	ldr	r2, [pc, #4]	; (8002a68 <HAL_NVIC_EnableIRQ+0x14>)
 8002a62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a64:	4770      	bx	lr
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	db09      	blt.n	8002a84 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a70:	231f      	movs	r3, #31
 8002a72:	4018      	ands	r0, r3
 8002a74:	3b1e      	subs	r3, #30
 8002a76:	4083      	lsls	r3, r0
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_NVIC_DisableIRQ+0x1c>)
 8002a7a:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a80:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002a84:	4770      	bx	lr
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	e000e104 	.word	0xe000e104

08002a8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_SYSTICK_Config+0x28>)
 8002a8e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a90:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d80d      	bhi.n	8002ab2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a96:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a9e:	6a03      	ldr	r3, [r0, #32]
 8002aa0:	0609      	lsls	r1, r1, #24
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aaa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aac:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aae:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002ab2:	4770      	bx	lr
 8002ab4:	00ffffff 	.word	0x00ffffff
 8002ab8:	e000e010 	.word	0xe000e010
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	db07      	blt.n	8002ad4 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac4:	231f      	movs	r3, #31
 8002ac6:	22c0      	movs	r2, #192	; 0xc0
 8002ac8:	4018      	ands	r0, r3
 8002aca:	3b1e      	subs	r3, #30
 8002acc:	4083      	lsls	r3, r0
 8002ace:	4902      	ldr	r1, [pc, #8]	; (8002ad8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8002ad0:	0052      	lsls	r2, r2, #1
 8002ad2:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002ad4:	4770      	bx	lr
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ade:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002ae0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002ae2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ae4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	d002      	beq.n	8002af0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002aec:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002aee:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002af0:	251c      	movs	r5, #28
 8002af2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002af4:	4e08      	ldr	r6, [pc, #32]	; (8002b18 <DMA_SetConfig+0x3c>)
 8002af6:	4025      	ands	r5, r4
 8002af8:	2401      	movs	r4, #1
 8002afa:	40ac      	lsls	r4, r5
 8002afc:	6877      	ldr	r7, [r6, #4]
 8002afe:	433c      	orrs	r4, r7
 8002b00:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b02:	6804      	ldr	r4, [r0, #0]
 8002b04:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b06:	6883      	ldr	r3, [r0, #8]
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d102      	bne.n	8002b12 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b0c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b0e:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002b12:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b14:	60e2      	str	r2, [r4, #12]
}
 8002b16:	e7fb      	b.n	8002b10 <DMA_SetConfig+0x34>
 8002b18:	40020000 	.word	0x40020000

08002b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b20:	7800      	ldrb	r0, [r0, #0]
 8002b22:	2114      	movs	r1, #20
 8002b24:	3808      	subs	r0, #8
 8002b26:	f7fd fb13 	bl	8000150 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	189b      	adds	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002b38:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002b3a:	231c      	movs	r3, #28
 8002b3c:	4018      	ands	r0, r3
 8002b3e:	3b1b      	subs	r3, #27
 8002b40:	4083      	lsls	r3, r0
 8002b42:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	10008200 	.word	0x10008200
 8002b4c:	40020880 	.word	0x40020880

08002b50 <HAL_DMA_Init>:
{
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b54:	2001      	movs	r0, #1
  if (hdma == NULL)
 8002b56:	2c00      	cmp	r4, #0
 8002b58:	d048      	beq.n	8002bec <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b5a:	6825      	ldr	r5, [r4, #0]
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_DMA_Init+0xa8>)
 8002b5e:	2114      	movs	r1, #20
 8002b60:	18e8      	adds	r0, r5, r3
 8002b62:	f7fd faf5 	bl	8000150 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b66:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b68:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6a:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b6c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6e:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b74:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b76:	4013      	ands	r3, r2
 8002b78:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	682a      	ldr	r2, [r5, #0]
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b82:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6961      	ldr	r1, [r4, #20]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	69a1      	ldr	r1, [r4, #24]
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	69e1      	ldr	r1, [r4, #28]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6a21      	ldr	r1, [r4, #32]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	4313      	orrs	r3, r2
 8002b98:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b9a:	f7ff ffbf 	bl	8002b1c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	68a2      	ldr	r2, [r4, #8]
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d101      	bne.n	8002bac <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bac:	6862      	ldr	r2, [r4, #4]
 8002bae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002bb0:	b2d3      	uxtb	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002bb6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bb8:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bba:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bbc:	2a03      	cmp	r2, #3
 8002bbe:	d816      	bhi.n	8002bee <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bc2:	4810      	ldr	r0, [pc, #64]	; (8002c04 <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bc4:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	3a02      	subs	r2, #2
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	65a2      	str	r2, [r4, #88]	; 0x58
 8002bd2:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bd4:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bd6:	0089      	lsls	r1, r1, #2
 8002bd8:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bda:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bdc:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bde:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be0:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8002be2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be4:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8002be6:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002be8:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8002bea:	77e0      	strb	r0, [r4, #31]
}
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bf2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bf6:	e7f3      	b.n	8002be0 <HAL_DMA_Init+0x90>
 8002bf8:	bffdfff8 	.word	0xbffdfff8
 8002bfc:	ffff800f 	.word	0xffff800f
 8002c00:	1000823f 	.word	0x1000823f
 8002c04:	40020940 	.word	0x40020940

08002c08 <HAL_DMA_Start_IT>:
{
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002c0a:	1d46      	adds	r6, r0, #5
 8002c0c:	7ff5      	ldrb	r5, [r6, #31]
{
 8002c0e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002c10:	2002      	movs	r0, #2
 8002c12:	2d01      	cmp	r5, #1
 8002c14:	d030      	beq.n	8002c78 <HAL_DMA_Start_IT+0x70>
 8002c16:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8002c18:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002c1a:	77f5      	strb	r5, [r6, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8002c1c:	7ffd      	ldrb	r5, [r7, #31]
 8002c1e:	b2ed      	uxtb	r5, r5
 8002c20:	2d01      	cmp	r5, #1
 8002c22:	d127      	bne.n	8002c74 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c24:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c26:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002c28:	6827      	ldr	r7, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	43a8      	bics	r0, r5
 8002c30:	6038      	str	r0, [r7, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c32:	0020      	movs	r0, r4
 8002c34:	f7ff ff52 	bl	8002adc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c40:	220e      	movs	r2, #14
 8002c42:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	03c9      	lsls	r1, r1, #15
 8002c4e:	d504      	bpl.n	8002c5a <HAL_DMA_Start_IT+0x52>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	6810      	ldr	r0, [r2, #0]
 8002c54:	0049      	lsls	r1, r1, #1
 8002c56:	4301      	orrs	r1, r0
 8002c58:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002c5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Start_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	6810      	ldr	r0, [r2, #0]
 8002c64:	0049      	lsls	r1, r1, #1
 8002c66:	4301      	orrs	r1, r0
 8002c68:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c6a:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002c74:	2300      	movs	r3, #0
 8002c76:	77f3      	strb	r3, [r6, #31]
}
 8002c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	438a      	bics	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	220a      	movs	r2, #10
 8002c86:	e7dd      	b.n	8002c44 <HAL_DMA_Start_IT+0x3c>

08002c88 <HAL_DMA_Abort_IT>:
{
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	1d41      	adds	r1, r0, #5
 8002c8e:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c90:	1d84      	adds	r4, r0, #6
 8002c92:	7fe2      	ldrb	r2, [r4, #31]
 8002c94:	2a02      	cmp	r2, #2
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c98:	2204      	movs	r2, #4
 8002c9a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	260e      	movs	r6, #14
 8002ca2:	6802      	ldr	r2, [r0, #0]
 8002ca4:	6815      	ldr	r5, [r2, #0]
 8002ca6:	43b5      	bics	r5, r6
 8002ca8:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002caa:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cac:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8002cae:	439d      	bics	r5, r3
 8002cb0:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cb2:	6832      	ldr	r2, [r6, #0]
 8002cb4:	4d11      	ldr	r5, [pc, #68]	; (8002cfc <HAL_DMA_Abort_IT+0x74>)
 8002cb6:	402a      	ands	r2, r5
 8002cb8:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002cba:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cbc:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002cbe:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002cc0:	4e0f      	ldr	r6, [pc, #60]	; (8002d00 <HAL_DMA_Abort_IT+0x78>)
 8002cc2:	402a      	ands	r2, r5
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	6877      	ldr	r7, [r6, #4]
 8002cc8:	433b      	orrs	r3, r7
 8002cca:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ccc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002cce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002cd0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002cd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd8:	4665      	mov	r5, ip
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	402a      	ands	r2, r5
 8002cde:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ce2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002ce4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002cea:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8002cec:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002cee:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8002cf2:	42a2      	cmp	r2, r4
 8002cf4:	d0d2      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 8002cf6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	0023      	movs	r3, r4
 8002cfa:	e7cf      	b.n	8002c9c <HAL_DMA_Abort_IT+0x14>
 8002cfc:	fffffeff 	.word	0xfffffeff
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_DMA_IRQHandler>:
{
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d06:	211c      	movs	r1, #28
 8002d08:	2704      	movs	r7, #4
 8002d0a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d0e:	4021      	ands	r1, r4
 8002d10:	003c      	movs	r4, r7
 8002d12:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8002d14:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002d16:	6802      	ldr	r2, [r0, #0]
 8002d18:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d1a:	4234      	tst	r4, r6
 8002d1c:	d00f      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x3a>
 8002d1e:	423d      	tst	r5, r7
 8002d20:	d00d      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d22:	6811      	ldr	r1, [r2, #0]
 8002d24:	0689      	lsls	r1, r1, #26
 8002d26:	d402      	bmi.n	8002d2e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	43b9      	bics	r1, r7
 8002d2c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4314      	orrs	r4, r2
 8002d32:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002d34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8002d3a:	4798      	blx	r3
  return;
 8002d3c:	e019      	b.n	8002d72 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d3e:	2702      	movs	r7, #2
 8002d40:	003c      	movs	r4, r7
 8002d42:	408c      	lsls	r4, r1
 8002d44:	4234      	tst	r4, r6
 8002d46:	d015      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x70>
 8002d48:	423d      	tst	r5, r7
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d4c:	6811      	ldr	r1, [r2, #0]
 8002d4e:	0689      	lsls	r1, r1, #26
 8002d50:	d406      	bmi.n	8002d60 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d52:	250a      	movs	r5, #10
 8002d54:	6811      	ldr	r1, [r2, #0]
 8002d56:	43a9      	bics	r1, r5
 8002d58:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	1d82      	adds	r2, r0, #6
 8002d5e:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 8002d64:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002d66:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002d68:	1d43      	adds	r3, r0, #5
 8002d6a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8002d6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d1e3      	bne.n	8002d3a <HAL_DMA_IRQHandler+0x36>
}
 8002d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d74:	2408      	movs	r4, #8
 8002d76:	0027      	movs	r7, r4
 8002d78:	408f      	lsls	r7, r1
 8002d7a:	423e      	tst	r6, r7
 8002d7c:	d0f9      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x6e>
 8002d7e:	4225      	tst	r5, r4
 8002d80:	d0f7      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d82:	250e      	movs	r5, #14
 8002d84:	6814      	ldr	r4, [r2, #0]
 8002d86:	43ac      	bics	r4, r5
 8002d88:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	0015      	movs	r5, r2
 8002d8e:	408d      	lsls	r5, r1
 8002d90:	0029      	movs	r1, r5
 8002d92:	685c      	ldr	r4, [r3, #4]
 8002d94:	4321      	orrs	r1, r4
 8002d96:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d98:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d9a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	1d43      	adds	r3, r0, #5
 8002da2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002da4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002da6:	e7e2      	b.n	8002d6e <HAL_DMA_IRQHandler+0x6a>
 8002da8:	40020000 	.word	0x40020000

08002dac <HAL_DMA_GetState>:
  return hdma->State;
 8002dac:	3006      	adds	r0, #6
 8002dae:	7fc0      	ldrb	r0, [r0, #31]
 8002db0:	b2c0      	uxtb	r0, r0
}
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db6:	680b      	ldr	r3, [r1, #0]
{
 8002db8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dba:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8002dbc:	2300      	movs	r3, #0
{
 8002dbe:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	9a02      	ldr	r2, [sp, #8]
 8002dc2:	40da      	lsrs	r2, r3
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8002dc6:	b005      	add	sp, #20
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	9203      	str	r2, [sp, #12]
 8002dd0:	9903      	ldr	r1, [sp, #12]
 8002dd2:	9a02      	ldr	r2, [sp, #8]
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8002dd8:	d100      	bne.n	8002ddc <HAL_GPIO_Init+0x28>
 8002dda:	e085      	b.n	8002ee8 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ddc:	9a01      	ldr	r2, [sp, #4]
 8002dde:	2110      	movs	r1, #16
 8002de0:	6852      	ldr	r2, [r2, #4]
 8002de2:	0016      	movs	r6, r2
 8002de4:	438e      	bics	r6, r1
 8002de6:	2e02      	cmp	r6, #2
 8002de8:	d10e      	bne.n	8002e08 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dea:	2507      	movs	r5, #7
 8002dec:	401d      	ands	r5, r3
 8002dee:	00ad      	lsls	r5, r5, #2
 8002df0:	3901      	subs	r1, #1
 8002df2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8002df4:	08dc      	lsrs	r4, r3, #3
 8002df6:	00a4      	lsls	r4, r4, #2
 8002df8:	1904      	adds	r4, r0, r4
 8002dfa:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dfc:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dfe:	9901      	ldr	r1, [sp, #4]
 8002e00:	6909      	ldr	r1, [r1, #16]
 8002e02:	40a9      	lsls	r1, r5
 8002e04:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002e06:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e08:	2403      	movs	r4, #3
 8002e0a:	005f      	lsls	r7, r3, #1
 8002e0c:	40bc      	lsls	r4, r7
 8002e0e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002e10:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e12:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e14:	4025      	ands	r5, r4
 8002e16:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e18:	2503      	movs	r5, #3
 8002e1a:	4015      	ands	r5, r2
 8002e1c:	40bd      	lsls	r5, r7
 8002e1e:	4661      	mov	r1, ip
 8002e20:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002e22:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e24:	2e01      	cmp	r6, #1
 8002e26:	d80f      	bhi.n	8002e48 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e28:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8002e2a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e2c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e2e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e30:	40bd      	lsls	r5, r7
 8002e32:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002e34:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e36:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e38:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e3a:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e3c:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e3e:	2101      	movs	r1, #1
 8002e40:	400d      	ands	r5, r1
 8002e42:	409d      	lsls	r5, r3
 8002e44:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002e46:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002e48:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e4a:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e4c:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e4e:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e50:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e52:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e54:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e56:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002e58:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e5a:	420a      	tst	r2, r1
 8002e5c:	d044      	beq.n	8002ee8 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e5e:	2603      	movs	r6, #3
 8002e60:	240f      	movs	r4, #15
 8002e62:	4922      	ldr	r1, [pc, #136]	; (8002eec <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8002e64:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e66:	401e      	ands	r6, r3
 8002e68:	00ad      	lsls	r5, r5, #2
 8002e6a:	00f6      	lsls	r6, r6, #3
 8002e6c:	186d      	adds	r5, r5, r1
 8002e6e:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e70:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8002e72:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e74:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e76:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e78:	2400      	movs	r4, #0
 8002e7a:	4288      	cmp	r0, r1
 8002e7c:	d00c      	beq.n	8002e98 <HAL_GPIO_Init+0xe4>
 8002e7e:	491c      	ldr	r1, [pc, #112]	; (8002ef0 <HAL_GPIO_Init+0x13c>)
 8002e80:	3401      	adds	r4, #1
 8002e82:	4288      	cmp	r0, r1
 8002e84:	d008      	beq.n	8002e98 <HAL_GPIO_Init+0xe4>
 8002e86:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <HAL_GPIO_Init+0x140>)
 8002e88:	3401      	adds	r4, #1
 8002e8a:	4288      	cmp	r0, r1
 8002e8c:	d004      	beq.n	8002e98 <HAL_GPIO_Init+0xe4>
 8002e8e:	491a      	ldr	r1, [pc, #104]	; (8002ef8 <HAL_GPIO_Init+0x144>)
 8002e90:	3403      	adds	r4, #3
 8002e92:	4288      	cmp	r0, r1
 8002e94:	d100      	bne.n	8002e98 <HAL_GPIO_Init+0xe4>
 8002e96:	3c02      	subs	r4, #2
 8002e98:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002e9a:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e9c:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002e9e:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8002ea0:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8002ea2:	4c16      	ldr	r4, [pc, #88]	; (8002efc <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8002ea4:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8002ea6:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8002ea8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eaa:	03d1      	lsls	r1, r2, #15
 8002eac:	d401      	bmi.n	8002eb2 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8002eae:	003e      	movs	r6, r7
 8002eb0:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8002eb2:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8002eb4:	4e12      	ldr	r6, [pc, #72]	; (8002f00 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8002eb6:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8002eb8:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8002eba:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ebc:	0391      	lsls	r1, r2, #14
 8002ebe:	d401      	bmi.n	8002ec4 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8002ec0:	402c      	ands	r4, r5
 8002ec2:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8002ec4:	4c09      	ldr	r4, [pc, #36]	; (8002eec <HAL_GPIO_Init+0x138>)
 8002ec6:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8002ec8:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8002eca:	9e00      	ldr	r6, [sp, #0]
 8002ecc:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ece:	02d1      	lsls	r1, r2, #11
 8002ed0:	d401      	bmi.n	8002ed6 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8002ed2:	003e      	movs	r6, r7
 8002ed4:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8002ed6:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8002ed8:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8002eda:	9f00      	ldr	r7, [sp, #0]
 8002edc:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ede:	0292      	lsls	r2, r2, #10
 8002ee0:	d401      	bmi.n	8002ee6 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8002ee2:	402e      	ands	r6, r5
 8002ee4:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8002ee6:	6067      	str	r7, [r4, #4]
    position++;
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e769      	b.n	8002dc0 <HAL_GPIO_Init+0xc>
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	50000400 	.word	0x50000400
 8002ef4:	50000800 	.word	0x50000800
 8002ef8:	50000c00 	.word	0x50000c00
 8002efc:	40021804 	.word	0x40021804
 8002f00:	40021808 	.word	0x40021808

08002f04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f04:	6900      	ldr	r0, [r0, #16]
 8002f06:	4008      	ands	r0, r1
 8002f08:	1e41      	subs	r1, r0, #1
 8002f0a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002f0c:	b2c0      	uxtb	r0, r0
}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f10:	2a00      	cmp	r2, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f14:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f16:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f18:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002f1a:	e7fc      	b.n	8002f16 <HAL_GPIO_WritePin+0x6>

08002f1c <HAL_GPIO_EXTI_Rising_Callback>:
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f22:	4d08      	ldr	r5, [pc, #32]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8002f24:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f26:	68eb      	ldr	r3, [r5, #12]
 8002f28:	4218      	tst	r0, r3
 8002f2a:	d002      	beq.n	8002f32 <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f2c:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f2e:	f7ff fff5 	bl	8002f1c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002f32:	692b      	ldr	r3, [r5, #16]
 8002f34:	4223      	tst	r3, r4
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f38:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	f004 f99e 	bl	800727c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	40021800 	.word	0x40021800

08002f48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f48:	6803      	ldr	r3, [r0, #0]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	0792      	lsls	r2, r2, #30
 8002f4e:	d501      	bpl.n	8002f54 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f50:	2200      	movs	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	2201      	movs	r2, #1
 8002f56:	6999      	ldr	r1, [r3, #24]
 8002f58:	4211      	tst	r1, r2
 8002f5a:	d102      	bne.n	8002f62 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	619a      	str	r2, [r3, #24]
  }
}
 8002f62:	4770      	bx	lr

08002f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f68:	0589      	lsls	r1, r1, #22
 8002f6a:	4333      	orrs	r3, r6
 8002f6c:	0d89      	lsrs	r1, r1, #22
 8002f6e:	4319      	orrs	r1, r3
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	6804      	ldr	r4, [r0, #0]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	0d70      	lsrs	r0, r6, #21
 8002f78:	4018      	ands	r0, r3
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <I2C_TransferConfig+0x28>)
 8002f7c:	6865      	ldr	r5, [r4, #4]
 8002f7e:	0412      	lsls	r2, r2, #16
 8002f80:	4318      	orrs	r0, r3
 8002f82:	4385      	bics	r5, r0
 8002f84:	4311      	orrs	r1, r2
 8002f86:	4329      	orrs	r1, r5
 8002f88:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	03ff63ff 	.word	0x03ff63ff

08002f90 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f90:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f94:	4c16      	ldr	r4, [pc, #88]	; (8002ff0 <I2C_Enable_IRQ+0x60>)
 8002f96:	2204      	movs	r2, #4
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	d002      	beq.n	8002fa2 <I2C_Enable_IRQ+0x12>
 8002f9c:	4c15      	ldr	r4, [pc, #84]	; (8002ff4 <I2C_Enable_IRQ+0x64>)
 8002f9e:	42a3      	cmp	r3, r4
 8002fa0:	d114      	bne.n	8002fcc <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 8002fa2:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fa4:	4211      	tst	r1, r2
 8002fa6:	d000      	beq.n	8002faa <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fa8:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002faa:	2211      	movs	r2, #17
 8002fac:	400a      	ands	r2, r1
 8002fae:	2a11      	cmp	r2, #17
 8002fb0:	d101      	bne.n	8002fb6 <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fb2:	327f      	adds	r2, #127	; 0x7f
 8002fb4:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002fb6:	2212      	movs	r2, #18
 8002fb8:	4011      	ands	r1, r2
 8002fba:	4291      	cmp	r1, r2
 8002fbc:	d101      	bne.n	8002fc2 <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002fbe:	324e      	adds	r2, #78	; 0x4e
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fc0:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002fc2:	6802      	ldr	r2, [r0, #0]
 8002fc4:	6811      	ldr	r1, [r2, #0]
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 8002fcc:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fce:	4211      	tst	r1, r2
 8002fd0:	d000      	beq.n	8002fd4 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fd2:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fd4:	07ca      	lsls	r2, r1, #31
 8002fd6:	d501      	bpl.n	8002fdc <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fd8:	22f2      	movs	r2, #242	; 0xf2
 8002fda:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fdc:	078a      	lsls	r2, r1, #30
 8002fde:	d501      	bpl.n	8002fe4 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fe0:	22f4      	movs	r2, #244	; 0xf4
 8002fe2:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002fe4:	2212      	movs	r2, #18
 8002fe6:	4011      	ands	r1, r2
 8002fe8:	4291      	cmp	r1, r2
 8002fea:	d1ea      	bne.n	8002fc2 <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 8002fec:	320e      	adds	r2, #14
 8002fee:	e7e7      	b.n	8002fc0 <I2C_Enable_IRQ+0x30>
 8002ff0:	08003a1d 	.word	0x08003a1d
 8002ff4:	0800393d 	.word	0x0800393d

08002ff8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ff8:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8002ffa:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ffc:	07ca      	lsls	r2, r1, #31
 8002ffe:	d508      	bpl.n	8003012 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003000:	0003      	movs	r3, r0
 8003002:	3341      	adds	r3, #65	; 0x41
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	2328      	movs	r3, #40	; 0x28
 8003008:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800300a:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800300c:	2a28      	cmp	r2, #40	; 0x28
 800300e:	d000      	beq.n	8003012 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003010:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003012:	078a      	lsls	r2, r1, #30
 8003014:	d508      	bpl.n	8003028 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003016:	0002      	movs	r2, r0
 8003018:	2428      	movs	r4, #40	; 0x28
 800301a:	3241      	adds	r2, #65	; 0x41
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	4022      	ands	r2, r4
 8003020:	42a2      	cmp	r2, r4
 8003022:	d116      	bne.n	8003052 <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003024:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003026:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003028:	074a      	lsls	r2, r1, #29
 800302a:	d501      	bpl.n	8003030 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800302c:	22b8      	movs	r2, #184	; 0xb8
 800302e:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003030:	2211      	movs	r2, #17
 8003032:	400a      	ands	r2, r1
 8003034:	2a11      	cmp	r2, #17
 8003036:	d101      	bne.n	800303c <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003038:	327f      	adds	r2, #127	; 0x7f
 800303a:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800303c:	2212      	movs	r2, #18
 800303e:	4011      	ands	r1, r2
 8003040:	4291      	cmp	r1, r2
 8003042:	d101      	bne.n	8003048 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003044:	324e      	adds	r2, #78	; 0x4e
 8003046:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003048:	6801      	ldr	r1, [r0, #0]
 800304a:	680a      	ldr	r2, [r1, #0]
 800304c:	439a      	bics	r2, r3
 800304e:	600a      	str	r2, [r1, #0]
}
 8003050:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003052:	22f4      	movs	r2, #244	; 0xf4
 8003054:	e7e7      	b.n	8003026 <I2C_Disable_IRQ+0x2e>

08003056 <I2C_WaitOnFlagUntilTimeout>:
{
 8003056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003058:	0004      	movs	r4, r0
 800305a:	000e      	movs	r6, r1
 800305c:	0017      	movs	r7, r2
 800305e:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	6993      	ldr	r3, [r2, #24]
 8003064:	4033      	ands	r3, r6
 8003066:	1b9b      	subs	r3, r3, r6
 8003068:	4259      	negs	r1, r3
 800306a:	414b      	adcs	r3, r1
 800306c:	42bb      	cmp	r3, r7
 800306e:	d001      	beq.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
 8003072:	e017      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003074:	1c6b      	adds	r3, r5, #1
 8003076:	d0f4      	beq.n	8003062 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7ff f996 	bl	80023a8 <HAL_GetTick>
 800307c:	9b06      	ldr	r3, [sp, #24]
 800307e:	1ac0      	subs	r0, r0, r3
 8003080:	4285      	cmp	r5, r0
 8003082:	d301      	bcc.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003084:	2d00      	cmp	r5, #0
 8003086:	d1eb      	bne.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	2220      	movs	r2, #32
 800308a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800308c:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	4313      	orrs	r3, r2
 8003090:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003092:	0023      	movs	r3, r4
 8003094:	3341      	adds	r3, #65	; 0x41
 8003096:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	0022      	movs	r2, r4
 800309a:	2300      	movs	r3, #0
 800309c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800309e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80030a2:	7023      	strb	r3, [r4, #0]
}
 80030a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030a8 <I2C_IsAcknowledgeFailed>:
{
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030aa:	6803      	ldr	r3, [r0, #0]
{
 80030ac:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ae:	6998      	ldr	r0, [r3, #24]
 80030b0:	2310      	movs	r3, #16
{
 80030b2:	000e      	movs	r6, r1
 80030b4:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b6:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d118      	bne.n	80030f0 <I2C_IsAcknowledgeFailed+0x48>
}
 80030be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80030c0:	1c72      	adds	r2, r6, #1
 80030c2:	d016      	beq.n	80030f2 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7ff f970 	bl	80023a8 <HAL_GetTick>
 80030c8:	1bc0      	subs	r0, r0, r7
 80030ca:	4286      	cmp	r6, r0
 80030cc:	d301      	bcc.n	80030d2 <I2C_IsAcknowledgeFailed+0x2a>
 80030ce:	2e00      	cmp	r6, #0
 80030d0:	d10e      	bne.n	80030f0 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	2220      	movs	r2, #32
 80030d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030d6:	4313      	orrs	r3, r2
 80030d8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030da:	0023      	movs	r3, r4
 80030dc:	3341      	adds	r3, #65	; 0x41
 80030de:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	0022      	movs	r2, r4
 80030e2:	2300      	movs	r3, #0
 80030e4:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80030e6:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80030ea:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80030ec:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80030ee:	e7e6      	b.n	80030be <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	422a      	tst	r2, r5
 80030f6:	d0e3      	beq.n	80030c0 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80030fa:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fe:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003100:	f7ff ff22 	bl	8002f48 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <I2C_IsAcknowledgeFailed+0x78>)
 8003108:	6853      	ldr	r3, [r2, #4]
 800310a:	400b      	ands	r3, r1
 800310c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800310e:	2304      	movs	r3, #4
 8003110:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003112:	4313      	orrs	r3, r2
 8003114:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	0023      	movs	r3, r4
 8003118:	3341      	adds	r3, #65	; 0x41
 800311a:	701d      	strb	r5, [r3, #0]
 800311c:	e7e0      	b.n	80030e0 <I2C_IsAcknowledgeFailed+0x38>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	fe00e800 	.word	0xfe00e800

08003124 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	0004      	movs	r4, r0
 8003128:	000d      	movs	r5, r1
 800312a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800312c:	2702      	movs	r7, #2
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	423b      	tst	r3, r7
 8003134:	d001      	beq.n	800313a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	0032      	movs	r2, r6
 800313c:	0029      	movs	r1, r5
 800313e:	0020      	movs	r0, r4
 8003140:	f7ff ffb2 	bl	80030a8 <I2C_IsAcknowledgeFailed>
 8003144:	2800      	cmp	r0, #0
 8003146:	d115      	bne.n	8003174 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003148:	1c6b      	adds	r3, r5, #1
 800314a:	d0f0      	beq.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7ff f92c 	bl	80023a8 <HAL_GetTick>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	4285      	cmp	r5, r0
 8003154:	d301      	bcc.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003156:	2d00      	cmp	r5, #0
 8003158:	d1e9      	bne.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	2220      	movs	r2, #32
 800315c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800315e:	4313      	orrs	r3, r2
 8003160:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003162:	0023      	movs	r3, r4
 8003164:	3341      	adds	r3, #65	; 0x41
 8003166:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	0022      	movs	r2, r4
 800316a:	2300      	movs	r3, #0
 800316c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800316e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003172:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	e7df      	b.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003178 <I2C_RequestMemoryWrite>:
{
 8003178:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800317a:	0014      	movs	r4, r2
 800317c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <I2C_RequestMemoryWrite+0x60>)
{
 8003182:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	045b      	lsls	r3, r3, #17
 800318a:	f7ff feeb 	bl	8002f64 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	9a07      	ldr	r2, [sp, #28]
 8003190:	9906      	ldr	r1, [sp, #24]
 8003192:	0028      	movs	r0, r5
 8003194:	f7ff ffc6 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8003198:	2800      	cmp	r0, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 800319c:	2001      	movs	r0, #1
}
 800319e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80031a0:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a2:	2e01      	cmp	r6, #1
 80031a4:	d10d      	bne.n	80031c2 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a6:	b2e4      	uxtb	r4, r4
 80031a8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031aa:	9b07      	ldr	r3, [sp, #28]
 80031ac:	2200      	movs	r2, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	9b06      	ldr	r3, [sp, #24]
 80031b4:	0028      	movs	r0, r5
 80031b6:	f7ff ff4e 	bl	8003056 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	1e43      	subs	r3, r0, #1
 80031bc:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80031be:	b2c0      	uxtb	r0, r0
 80031c0:	e7ed      	b.n	800319e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031c2:	0a22      	lsrs	r2, r4, #8
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c6:	9906      	ldr	r1, [sp, #24]
 80031c8:	9a07      	ldr	r2, [sp, #28]
 80031ca:	0028      	movs	r0, r5
 80031cc:	f7ff ffaa 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d1e3      	bne.n	800319c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	e7e6      	b.n	80031a6 <I2C_RequestMemoryWrite+0x2e>
 80031d8:	80002000 	.word	0x80002000

080031dc <HAL_I2C_Init>:
{
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	0004      	movs	r4, r0
    return HAL_ERROR;
 80031e0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80031e2:	2c00      	cmp	r4, #0
 80031e4:	d03f      	beq.n	8003266 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031e6:	0025      	movs	r5, r4
 80031e8:	3541      	adds	r5, #65	; 0x41
 80031ea:	782b      	ldrb	r3, [r5, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80031f2:	0022      	movs	r2, r4
 80031f4:	3240      	adds	r2, #64	; 0x40
 80031f6:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80031f8:	0020      	movs	r0, r4
 80031fa:	f003 fd5f 	bl	8006cbc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fe:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003200:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003202:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003204:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003206:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68a6      	ldr	r6, [r4, #8]
 800320c:	438a      	bics	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003210:	6861      	ldr	r1, [r4, #4]
 8003212:	4a1a      	ldr	r2, [pc, #104]	; (800327c <HAL_I2C_Init+0xa0>)
 8003214:	400a      	ands	r2, r1
 8003216:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_I2C_Init+0xa4>)
 800321c:	4011      	ands	r1, r2
 800321e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	2801      	cmp	r0, #1
 8003222:	d121      	bne.n	8003268 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0209      	lsls	r1, r1, #8
 8003228:	4331      	orrs	r1, r6
 800322a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800322c:	6858      	ldr	r0, [r3, #4]
 800322e:	4915      	ldr	r1, [pc, #84]	; (8003284 <HAL_I2C_Init+0xa8>)
 8003230:	4301      	orrs	r1, r0
 8003232:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003234:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003236:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003238:	400a      	ands	r2, r1
 800323a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800323c:	6961      	ldr	r1, [r4, #20]
 800323e:	6922      	ldr	r2, [r4, #16]
 8003240:	430a      	orrs	r2, r1
 8003242:	69a1      	ldr	r1, [r4, #24]
 8003244:	0209      	lsls	r1, r1, #8
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800324a:	6a21      	ldr	r1, [r4, #32]
 800324c:	69e2      	ldr	r2, [r4, #28]
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003252:	2201      	movs	r2, #1
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800325a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003260:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	3442      	adds	r4, #66	; 0x42
 8003264:	7020      	strb	r0, [r4, #0]
}
 8003266:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003268:	2184      	movs	r1, #132	; 0x84
 800326a:	0209      	lsls	r1, r1, #8
 800326c:	4331      	orrs	r1, r6
 800326e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003270:	2802      	cmp	r0, #2
 8003272:	d1db      	bne.n	800322c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	0109      	lsls	r1, r1, #4
 8003278:	6059      	str	r1, [r3, #4]
 800327a:	e7d7      	b.n	800322c <HAL_I2C_Init+0x50>
 800327c:	f0ffffff 	.word	0xf0ffffff
 8003280:	ffff7fff 	.word	0xffff7fff
 8003284:	02008000 	.word	0x02008000

08003288 <HAL_I2C_Mem_Write_DMA>:
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	0007      	movs	r7, r0
{
 800328c:	b089      	sub	sp, #36	; 0x24
 800328e:	9307      	str	r3, [sp, #28]
 8003290:	ab0e      	add	r3, sp, #56	; 0x38
 8003292:	9206      	str	r2, [sp, #24]
 8003294:	cb04      	ldmia	r3!, {r2}
 8003296:	9105      	str	r1, [sp, #20]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	9202      	str	r2, [sp, #8]
 800329c:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	3741      	adds	r7, #65	; 0x41
 80032a0:	783b      	ldrb	r3, [r7, #0]
{
 80032a2:	0004      	movs	r4, r0
    return HAL_BUSY;
 80032a4:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d171      	bne.n	800338e <HAL_I2C_Mem_Write_DMA+0x106>
    if ((pData == NULL) || (Size == 0U))
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_I2C_Mem_Write_DMA+0x2c>
 80032ae:	9b04      	ldr	r3, [sp, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <HAL_I2C_Mem_Write_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80032ba:	2501      	movs	r5, #1
 80032bc:	e067      	b.n	800338e <HAL_I2C_Mem_Write_DMA+0x106>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032be:	6803      	ldr	r3, [r0, #0]
 80032c0:	699e      	ldr	r6, [r3, #24]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	401e      	ands	r6, r3
 80032c8:	d161      	bne.n	800338e <HAL_I2C_Mem_Write_DMA+0x106>
    __HAL_LOCK(hi2c);
 80032ca:	0003      	movs	r3, r0
 80032cc:	3340      	adds	r3, #64	; 0x40
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	2a01      	cmp	r2, #1
 80032d2:	d05c      	beq.n	800338e <HAL_I2C_Mem_Write_DMA+0x106>
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80032d8:	f7ff f866 	bl	80023a8 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032dc:	2321      	movs	r3, #33	; 0x21
 80032de:	703b      	strb	r3, [r7, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80032e0:	0023      	movs	r3, r4
 80032e2:	3342      	adds	r3, #66	; 0x42
 80032e4:	9303      	str	r3, [sp, #12]
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	9a03      	ldr	r2, [sp, #12]
 80032ea:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 80032ec:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ee:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80032f0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032f2:	466b      	mov	r3, sp
 80032f4:	8a1b      	ldrh	r3, [r3, #16]
 80032f6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_I2C_Mem_Write_DMA+0x13c>)
 80032fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_I2C_Mem_Write_DMA+0x140>)
 80032fe:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003300:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d915      	bls.n	8003332 <HAL_I2C_Mem_Write_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003306:	23ff      	movs	r3, #255	; 0xff
 8003308:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 800330e:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003310:	2319      	movs	r3, #25
 8003312:	9001      	str	r0, [sp, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	9a06      	ldr	r2, [sp, #24]
 8003318:	9b07      	ldr	r3, [sp, #28]
 800331a:	9905      	ldr	r1, [sp, #20]
 800331c:	0020      	movs	r0, r4
 800331e:	f7ff ff2b 	bl	8003178 <I2C_RequestMemoryWrite>
 8003322:	0027      	movs	r7, r4
 8003324:	0006      	movs	r6, r0
 8003326:	3740      	adds	r7, #64	; 0x40
 8003328:	2800      	cmp	r0, #0
 800332a:	d007      	beq.n	800333c <HAL_I2C_Mem_Write_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 800332c:	2300      	movs	r3, #0
 800332e:	703b      	strb	r3, [r7, #0]
 8003330:	e7c3      	b.n	80032ba <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003334:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	049b      	lsls	r3, r3, #18
 800333a:	e7e8      	b.n	800330e <HAL_I2C_Mem_Write_DMA+0x86>
    if (hi2c->hdmatx != NULL)
 800333c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800333e:	2800      	cmp	r0, #0
 8003340:	d028      	beq.n	8003394 <HAL_I2C_Mem_Write_DMA+0x10c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_I2C_Mem_Write_DMA+0x144>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003344:	6822      	ldr	r2, [r4, #0]
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003346:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_I2C_Mem_Write_DMA+0x148>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800334a:	6306      	str	r6, [r0, #48]	; 0x30
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800334c:	6343      	str	r3, [r0, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = NULL;
 800334e:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003350:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003352:	3228      	adds	r2, #40	; 0x28
 8003354:	9902      	ldr	r1, [sp, #8]
 8003356:	f7ff fc57 	bl	8002c08 <HAL_DMA_Start_IT>
 800335a:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 800335c:	d126      	bne.n	80033ac <HAL_I2C_Mem_Write_DMA+0x124>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800335e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003360:	9000      	str	r0, [sp, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	9b04      	ldr	r3, [sp, #16]
 8003366:	9905      	ldr	r1, [sp, #20]
 8003368:	0020      	movs	r0, r4
 800336a:	f7ff fdfb 	bl	8002f64 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800336e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003370:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003372:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800337a:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 800337c:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800337e:	f7ff fe07 	bl	8002f90 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	01db      	lsls	r3, r3, #7
 8003388:	6811      	ldr	r1, [r2, #0]
 800338a:	430b      	orrs	r3, r1
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	0028      	movs	r0, r5
 8003390:	b009      	add	sp, #36	; 0x24
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 8003394:	0023      	movs	r3, r4
 8003396:	2220      	movs	r2, #32
 8003398:	3341      	adds	r3, #65	; 0x41
 800339a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033a4:	4313      	orrs	r3, r2
 80033a6:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80033a8:	7038      	strb	r0, [r7, #0]
 80033aa:	e786      	b.n	80032ba <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 80033ac:	0023      	movs	r3, r4
 80033ae:	2220      	movs	r2, #32
 80033b0:	3341      	adds	r3, #65	; 0x41
 80033b2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033b8:	2310      	movs	r3, #16
 80033ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033bc:	4313      	orrs	r3, r2
 80033be:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80033c0:	703e      	strb	r6, [r7, #0]
 80033c2:	e77a      	b.n	80032ba <HAL_I2C_Mem_Write_DMA+0x32>
 80033c4:	ffff0000 	.word	0xffff0000
 80033c8:	08003a1d 	.word	0x08003a1d
 80033cc:	08003b45 	.word	0x08003b45
 80033d0:	08003b2d 	.word	0x08003b2d

080033d4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033d4:	6803      	ldr	r3, [r0, #0]
{
 80033d6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033d8:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033da:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80033dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d000      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80033e2:	4798      	blx	r3
}
 80033e4:	bd10      	pop	{r4, pc}

080033e6 <HAL_I2C_MasterTxCpltCallback>:
 80033e6:	4770      	bx	lr

080033e8 <HAL_I2C_MasterRxCpltCallback>:
 80033e8:	4770      	bx	lr

080033ea <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	0003      	movs	r3, r0
{
 80033ec:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	2500      	movs	r5, #0
 80033f0:	2220      	movs	r2, #32
 80033f2:	0006      	movs	r6, r0
 80033f4:	3342      	adds	r3, #66	; 0x42
 80033f6:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033f8:	3b01      	subs	r3, #1
 80033fa:	7819      	ldrb	r1, [r3, #0]
{
 80033fc:	0004      	movs	r4, r0
 80033fe:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8003400:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003402:	2921      	cmp	r1, #33	; 0x21
 8003404:	d10a      	bne.n	800341c <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003406:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8003408:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800340a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800340c:	3920      	subs	r1, #32
 800340e:	f7ff fdf3 	bl	8002ff8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003412:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003414:	0020      	movs	r0, r4
 8003416:	f7ff ffe6 	bl	80033e6 <HAL_I2C_MasterTxCpltCallback>
}
 800341a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800341c:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 800341e:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003420:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003422:	2102      	movs	r1, #2
 8003424:	f7ff fde8 	bl	8002ff8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003428:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800342a:	0020      	movs	r0, r4
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003430:	e7f3      	b.n	800341a <I2C_ITMasterSeqCplt+0x30>

08003432 <HAL_I2C_SlaveTxCpltCallback>:
 8003432:	4770      	bx	lr

08003434 <HAL_I2C_SlaveRxCpltCallback>:
 8003434:	4770      	bx	lr

08003436 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	0003      	movs	r3, r0
{
 8003438:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	2500      	movs	r5, #0
 800343c:	3342      	adds	r3, #66	; 0x42
 800343e:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003440:	3b01      	subs	r3, #1
 8003442:	781a      	ldrb	r2, [r3, #0]
{
 8003444:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003446:	2a29      	cmp	r2, #41	; 0x29
 8003448:	d10d      	bne.n	8003466 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800344a:	3a01      	subs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800344e:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003450:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003452:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003454:	f7ff fdd0 	bl	8002ff8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003458:	0023      	movs	r3, r4
 800345a:	3340      	adds	r3, #64	; 0x40
 800345c:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800345e:	0020      	movs	r0, r4
 8003460:	f7ff ffe7 	bl	8003432 <HAL_I2C_SlaveTxCpltCallback>
}
 8003464:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	2a2a      	cmp	r2, #42	; 0x2a
 800346a:	d1fb      	bne.n	8003464 <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800346c:	3a02      	subs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003470:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003472:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003474:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003476:	f7ff fdbf 	bl	8002ff8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800347a:	0023      	movs	r3, r4
 800347c:	3340      	adds	r3, #64	; 0x40
 800347e:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003480:	0020      	movs	r0, r4
 8003482:	f7ff ffd7 	bl	8003434 <HAL_I2C_SlaveRxCpltCallback>
}
 8003486:	e7ed      	b.n	8003464 <I2C_ITSlaveSeqCplt+0x2e>

08003488 <HAL_I2C_AddrCallback>:
}
 8003488:	4770      	bx	lr

0800348a <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800348a:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800348c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800348e:	3341      	adds	r3, #65	; 0x41
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003494:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003496:	401a      	ands	r2, r3
 8003498:	6803      	ldr	r3, [r0, #0]
 800349a:	2a28      	cmp	r2, #40	; 0x28
 800349c:	d137      	bne.n	800350e <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800349e:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80034a0:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80034a2:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80034a4:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80034a6:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80034a8:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80034aa:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ac:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80034ae:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 80034b0:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80034b2:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b4:	2902      	cmp	r1, #2
 80034b6:	d121      	bne.n	80034fc <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80034b8:	0592      	lsls	r2, r2, #22
 80034ba:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80034bc:	09d1      	lsrs	r1, r2, #7
 80034be:	404e      	eors	r6, r1
 80034c0:	2106      	movs	r1, #6
 80034c2:	400e      	ands	r6, r1
 80034c4:	d110      	bne.n	80034e8 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 80034c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80034c8:	3101      	adds	r1, #1
 80034ca:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80034cc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80034ce:	2902      	cmp	r1, #2
 80034d0:	d109      	bne.n	80034e6 <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d2:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 80034d4:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d6:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80034d8:	0003      	movs	r3, r0
 80034da:	3340      	adds	r3, #64	; 0x40
 80034dc:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034de:	0029      	movs	r1, r5
 80034e0:	0020      	movs	r0, r4
 80034e2:	f7ff ffd1 	bl	8003488 <HAL_I2C_AddrCallback>
}
 80034e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034e8:	2104      	movs	r1, #4
 80034ea:	f7ff fd85 	bl	8002ff8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80034ee:	0023      	movs	r3, r4
 80034f0:	2200      	movs	r2, #0
 80034f2:	3340      	adds	r3, #64	; 0x40
 80034f4:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034f6:	9a01      	ldr	r2, [sp, #4]
 80034f8:	403a      	ands	r2, r7
 80034fa:	e7f0      	b.n	80034de <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034fc:	2104      	movs	r1, #4
 80034fe:	f7ff fd7b 	bl	8002ff8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003502:	0023      	movs	r3, r4
 8003504:	2200      	movs	r2, #0
 8003506:	3340      	adds	r3, #64	; 0x40
 8003508:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800350a:	0032      	movs	r2, r6
 800350c:	e7e7      	b.n	80034de <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800350e:	2208      	movs	r2, #8
 8003510:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	3440      	adds	r4, #64	; 0x40
 8003516:	7023      	strb	r3, [r4, #0]
 8003518:	e7e5      	b.n	80034e6 <I2C_ITAddrCplt.isra.8+0x5c>

0800351a <HAL_I2C_ListenCpltCallback>:
 800351a:	4770      	bx	lr

0800351c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <I2C_ITListenCplt+0x64>)
{
 800351e:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003520:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003522:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003524:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	6303      	str	r3, [r0, #48]	; 0x30
{
 8003528:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	2020      	movs	r0, #32
 800352c:	3241      	adds	r2, #65	; 0x41
 800352e:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003532:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8003534:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003536:	4211      	tst	r1, r2
 8003538:	d012      	beq.n	8003560 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003548:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800354e:	3b01      	subs	r3, #1
 8003550:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003552:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003554:	3b01      	subs	r3, #1
 8003556:	b29b      	uxth	r3, r3
 8003558:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800355a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800355c:	431a      	orrs	r2, r3
 800355e:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003560:	2107      	movs	r1, #7
 8003562:	0020      	movs	r0, r4
 8003564:	f7ff fd48 	bl	8002ff8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	2210      	movs	r2, #16
 800356a:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800356c:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800356e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003570:	0023      	movs	r3, r4
 8003572:	2200      	movs	r2, #0
 8003574:	3340      	adds	r3, #64	; 0x40
 8003576:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003578:	f7ff ffcf 	bl	800351a <HAL_I2C_ListenCpltCallback>
}
 800357c:	bd10      	pop	{r4, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	ffff0000 	.word	0xffff0000

08003584 <HAL_I2C_MemRxCpltCallback>:
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_ErrorCallback>:
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_AbortCpltCallback>:
}
 8003588:	4770      	bx	lr
	...

0800358c <I2C_ITError>:
{
 800358c:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358e:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003590:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003592:	2600      	movs	r6, #0
 8003594:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003596:	3541      	adds	r5, #65	; 0x41
 8003598:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800359a:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800359e:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035a0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80035a2:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80035a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80035a6:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 80035a8:	4311      	orrs	r1, r2
 80035aa:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d822      	bhi.n	80035f6 <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035b0:	2103      	movs	r1, #3
 80035b2:	f7ff fd21 	bl	8002ff8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035b6:	2328      	movs	r3, #40	; 0x28
 80035b8:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 80035bc:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035be:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 80035c0:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	01d2      	lsls	r2, r2, #7
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035ca:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035cc:	d01e      	beq.n	800360c <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035ce:	4925      	ldr	r1, [pc, #148]	; (8003664 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 80035d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035d2:	400a      	ands	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d00c      	beq.n	80035f4 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 80035dc:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035de:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80035e0:	0023      	movs	r3, r4
 80035e2:	3340      	adds	r3, #64	; 0x40
 80035e4:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035e6:	f7ff fb4f 	bl	8002c88 <HAL_DMA_Abort_IT>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d002      	beq.n	80035f4 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035f2:	4798      	blx	r3
}
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035f6:	2107      	movs	r1, #7
 80035f8:	f7ff fcfe 	bl	8002ff8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035fc:	782b      	ldrb	r3, [r5, #0]
 80035fe:	2b60      	cmp	r3, #96	; 0x60
 8003600:	d001      	beq.n	8003606 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003602:	2320      	movs	r3, #32
 8003604:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	6323      	str	r3, [r4, #48]	; 0x30
 800360a:	e7d8      	b.n	80035be <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800360c:	2080      	movs	r0, #128	; 0x80
 800360e:	0200      	lsls	r0, r0, #8
 8003610:	4002      	ands	r2, r0
 8003612:	d011      	beq.n	8003638 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4815      	ldr	r0, [pc, #84]	; (800366c <I2C_ITError+0xe0>)
 8003618:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800361a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800361c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800361e:	2800      	cmp	r0, #0
 8003620:	d0e8      	beq.n	80035f4 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <I2C_ITError+0xdc>)
 8003624:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003626:	0023      	movs	r3, r4
 8003628:	3340      	adds	r3, #64	; 0x40
 800362a:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800362c:	f7ff fb2c 	bl	8002c88 <HAL_DMA_Abort_IT>
 8003630:	2800      	cmp	r0, #0
 8003632:	d0df      	beq.n	80035f4 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003634:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003636:	e7db      	b.n	80035f0 <I2C_ITError+0x64>
 8003638:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800363a:	7829      	ldrb	r1, [r5, #0]
 800363c:	3340      	adds	r3, #64	; 0x40
 800363e:	2960      	cmp	r1, #96	; 0x60
 8003640:	d106      	bne.n	8003650 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	3940      	subs	r1, #64	; 0x40
 8003644:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003646:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8003648:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800364a:	f7ff ff9d 	bl	8003588 <HAL_I2C_AbortCpltCallback>
 800364e:	e7d1      	b.n	80035f4 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 8003650:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8003652:	0020      	movs	r0, r4
 8003654:	f7ff ff97 	bl	8003586 <HAL_I2C_ErrorCallback>
}
 8003658:	e7cc      	b.n	80035f4 <I2C_ITError+0x68>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	ffff0000 	.word	0xffff0000
 8003660:	08003765 	.word	0x08003765
 8003664:	ffffbfff 	.word	0xffffbfff
 8003668:	08003bed 	.word	0x08003bed
 800366c:	ffff7fff 	.word	0xffff7fff

08003670 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003670:	2220      	movs	r2, #32
{
 8003672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003674:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003676:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003678:	6803      	ldr	r3, [r0, #0]
{
 800367a:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800367c:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800367e:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003680:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003682:	f7ff fcb9 	bl	8002ff8 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	022d      	lsls	r5, r5, #8
 800368a:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800368c:	4933      	ldr	r1, [pc, #204]	; (800375c <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800368e:	432a      	orrs	r2, r5
 8003690:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003692:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003694:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 8003696:	400a      	ands	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800369a:	f7ff fc55 	bl	8002f48 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800369e:	0473      	lsls	r3, r6, #17
 80036a0:	d538      	bpl.n	8003714 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 80036a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80036b0:	2304      	movs	r3, #4
 80036b2:	421f      	tst	r7, r3
 80036b4:	d010      	beq.n	80036d8 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80036b6:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80036c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036c2:	3301      	adds	r3, #1
 80036c4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80036c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 80036cc:	3b01      	subs	r3, #1
 80036ce:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80036d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80036d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036de:	2304      	movs	r3, #4
 80036e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80036e2:	4313      	orrs	r3, r2
 80036e4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80036f4:	6363      	str	r3, [r4, #52]	; 0x34
 80036f6:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f8:	429e      	cmp	r6, r3
 80036fa:	d00f      	beq.n	800371c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80036fe:	0020      	movs	r0, r4
 8003700:	f7ff ff44 	bl	800358c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003704:	782b      	ldrb	r3, [r5, #0]
 8003706:	2b28      	cmp	r3, #40	; 0x28
 8003708:	d103      	bne.n	8003712 <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800370a:	0039      	movs	r1, r7
 800370c:	0020      	movs	r0, r4
 800370e:	f7ff ff05 	bl	800351c <I2C_ITListenCplt>
}
 8003712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003714:	422e      	tst	r6, r5
 8003716:	d0cb      	beq.n	80036b0 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8003718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800371a:	e7c3      	b.n	80036a4 <I2C_ITSlaveCplt+0x34>
 800371c:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800371e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <I2C_ITSlaveCplt+0xf0>)
 8003722:	3740      	adds	r7, #64	; 0x40
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003728:	0020      	movs	r0, r4
 800372a:	f7ff fe84 	bl	8003436 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003730:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	2320      	movs	r3, #32
 8003736:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003738:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 800373a:	f7ff feee 	bl	800351a <HAL_I2C_ListenCpltCallback>
 800373e:	e7e8      	b.n	8003712 <I2C_ITSlaveCplt+0xa2>
 8003740:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003742:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003744:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003748:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800374a:	2a22      	cmp	r2, #34	; 0x22
 800374c:	d102      	bne.n	8003754 <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800374e:	f7ff fe71 	bl	8003434 <HAL_I2C_SlaveRxCpltCallback>
 8003752:	e7de      	b.n	8003712 <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003754:	f7ff fe6d 	bl	8003432 <HAL_I2C_SlaveTxCpltCallback>
}
 8003758:	e7db      	b.n	8003712 <I2C_ITSlaveCplt+0xa2>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	fe00e800 	.word	0xfe00e800
 8003760:	ffff0000 	.word	0xffff0000

08003764 <I2C_Slave_ISR_IT>:
{
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003766:	0007      	movs	r7, r0
 8003768:	3740      	adds	r7, #64	; 0x40
{
 800376a:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800376c:	783a      	ldrb	r2, [r7, #0]
{
 800376e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003770:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8003772:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8003774:	2002      	movs	r0, #2
 8003776:	2a01      	cmp	r2, #1
 8003778:	d021      	beq.n	80037be <I2C_Slave_ISR_IT+0x5a>
 800377a:	2201      	movs	r2, #1
 800377c:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800377e:	320f      	adds	r2, #15
 8003780:	4211      	tst	r1, r2
 8003782:	d03b      	beq.n	80037fc <I2C_Slave_ISR_IT+0x98>
 8003784:	4216      	tst	r6, r2
 8003786:	d039      	beq.n	80037fc <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 8003788:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800378a:	2900      	cmp	r1, #0
 800378c:	d128      	bne.n	80037e0 <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800378e:	0022      	movs	r2, r4
 8003790:	3241      	adds	r2, #65	; 0x41
 8003792:	7811      	ldrb	r1, [r2, #0]
 8003794:	2928      	cmp	r1, #40	; 0x28
 8003796:	d113      	bne.n	80037c0 <I2C_Slave_ISR_IT+0x5c>
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	0489      	lsls	r1, r1, #18
 800379c:	428b      	cmp	r3, r1
 800379e:	d10f      	bne.n	80037c0 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037a0:	0029      	movs	r1, r5
 80037a2:	0020      	movs	r0, r4
 80037a4:	f7ff feba 	bl	800351c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037a8:	2320      	movs	r3, #32
 80037aa:	421d      	tst	r5, r3
 80037ac:	d005      	beq.n	80037ba <I2C_Slave_ISR_IT+0x56>
 80037ae:	421e      	tst	r6, r3
 80037b0:	d003      	beq.n	80037ba <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80037b2:	0029      	movs	r1, r5
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7ff ff5b 	bl	8003670 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 80037ba:	2000      	movs	r0, #0
 80037bc:	7038      	strb	r0, [r7, #0]
}
 80037be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c0:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037c2:	7810      	ldrb	r0, [r2, #0]
 80037c4:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c6:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037c8:	2829      	cmp	r0, #41	; 0x29
 80037ca:	d1ed      	bne.n	80037a8 <I2C_Slave_ISR_IT+0x44>
 80037cc:	482c      	ldr	r0, [pc, #176]	; (8003880 <I2C_Slave_ISR_IT+0x11c>)
 80037ce:	4283      	cmp	r3, r0
 80037d0:	d0ea      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 80037d2:	0020      	movs	r0, r4
 80037d4:	f7ff fbb8 	bl	8002f48 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80037d8:	0020      	movs	r0, r4
 80037da:	f7ff fe2c 	bl	8003436 <I2C_ITSlaveSeqCplt>
 80037de:	e7e3      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e0:	6821      	ldr	r1, [r4, #0]
 80037e2:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e4:	2204      	movs	r2, #4
 80037e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037e8:	430a      	orrs	r2, r1
 80037ea:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <I2C_Slave_ISR_IT+0x120>)
 80037ee:	4213      	tst	r3, r2
 80037f0:	d1da      	bne.n	80037a8 <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037f4:	0020      	movs	r0, r4
 80037f6:	f7ff fec9 	bl	800358c <I2C_ITError>
 80037fa:	e7d5      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037fc:	2204      	movs	r2, #4
 80037fe:	4215      	tst	r5, r2
 8003800:	d01a      	beq.n	8003838 <I2C_Slave_ISR_IT+0xd4>
 8003802:	4216      	tst	r6, r2
 8003804:	d018      	beq.n	8003838 <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 8003806:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003808:	2900      	cmp	r1, #0
 800380a:	d00e      	beq.n	800382a <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800380c:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003814:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 8003816:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003818:	3201      	adds	r2, #1
 800381a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800381c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800381e:	3a01      	subs	r2, #1
 8003820:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003822:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003824:	3a01      	subs	r2, #1
 8003826:	b292      	uxth	r2, r2
 8003828:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800382a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800382c:	2a00      	cmp	r2, #0
 800382e:	d1bb      	bne.n	80037a8 <I2C_Slave_ISR_IT+0x44>
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <I2C_Slave_ISR_IT+0x11c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d1d0      	bne.n	80037d8 <I2C_Slave_ISR_IT+0x74>
 8003836:	e7b7      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003838:	2208      	movs	r2, #8
 800383a:	4215      	tst	r5, r2
 800383c:	d005      	beq.n	800384a <I2C_Slave_ISR_IT+0xe6>
 800383e:	4216      	tst	r6, r2
 8003840:	d003      	beq.n	800384a <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003842:	0020      	movs	r0, r4
 8003844:	f7ff fe21 	bl	800348a <I2C_ITAddrCplt.isra.8>
 8003848:	e7ae      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800384a:	2202      	movs	r2, #2
 800384c:	4215      	tst	r5, r2
 800384e:	d0ab      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x44>
 8003850:	4216      	tst	r6, r2
 8003852:	d0a9      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 8003854:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003856:	2a00      	cmp	r2, #0
 8003858:	d00d      	beq.n	8003876 <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800385a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003860:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003862:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003864:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003866:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003868:	3b01      	subs	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800386e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	8523      	strh	r3, [r4, #40]	; 0x28
 8003874:	e798      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003876:	4a03      	ldr	r2, [pc, #12]	; (8003884 <I2C_Slave_ISR_IT+0x120>)
 8003878:	4213      	tst	r3, r2
 800387a:	d000      	beq.n	800387e <I2C_Slave_ISR_IT+0x11a>
 800387c:	e794      	b.n	80037a8 <I2C_Slave_ISR_IT+0x44>
 800387e:	e7ab      	b.n	80037d8 <I2C_Slave_ISR_IT+0x74>
 8003880:	ffff0000 	.word	0xffff0000
 8003884:	feffffff 	.word	0xfeffffff

08003888 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003888:	2220      	movs	r2, #32
 800388a:	6803      	ldr	r3, [r0, #0]
{
 800388c:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388e:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8003890:	685a      	ldr	r2, [r3, #4]
{
 8003892:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 8003894:	4827      	ldr	r0, [pc, #156]	; (8003934 <I2C_ITMasterCplt+0xac>)
 8003896:	4002      	ands	r2, r0
 8003898:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	2200      	movs	r2, #0
 800389c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800389e:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <I2C_ITMasterCplt+0xb0>)
 80038a2:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80038a4:	2210      	movs	r2, #16
 80038a6:	4211      	tst	r1, r2
 80038a8:	d004      	beq.n	80038b4 <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038aa:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ac:	2304      	movs	r3, #4
 80038ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80038b0:	4313      	orrs	r3, r2
 80038b2:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 80038b4:	0020      	movs	r0, r4
 80038b6:	f7ff fb47 	bl	8002f48 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80038ba:	2103      	movs	r1, #3
 80038bc:	0020      	movs	r0, r4
 80038be:	f7ff fb9b 	bl	8002ff8 <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80038c2:	0022      	movs	r2, r4
 80038c4:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 80038c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80038c8:	7811      	ldrb	r1, [r2, #0]
 80038ca:	2960      	cmp	r1, #96	; 0x60
 80038cc:	d001      	beq.n	80038d2 <I2C_ITMasterCplt+0x4a>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80038d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80038d4:	0020      	movs	r0, r4
 80038d6:	f7ff fe59 	bl	800358c <I2C_ITError>
}
 80038da:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038dc:	7811      	ldrb	r1, [r2, #0]
 80038de:	2921      	cmp	r1, #33	; 0x21
 80038e0:	d112      	bne.n	8003908 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	3901      	subs	r1, #1
 80038e4:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e6:	0022      	movs	r2, r4
 80038e8:	0021      	movs	r1, r4
 80038ea:	3242      	adds	r2, #66	; 0x42
 80038ec:	7810      	ldrb	r0, [r2, #0]
 80038ee:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80038f2:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f4:	2840      	cmp	r0, #64	; 0x40
 80038f6:	d103      	bne.n	8003900 <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038f8:	0020      	movs	r0, r4
 80038fa:	f005 fddd 	bl	80094b8 <HAL_I2C_MemTxCpltCallback>
 80038fe:	e7ec      	b.n	80038da <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003900:	0020      	movs	r0, r4
 8003902:	f7ff fd70 	bl	80033e6 <HAL_I2C_MasterTxCpltCallback>
 8003906:	e7e8      	b.n	80038da <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003908:	7811      	ldrb	r1, [r2, #0]
 800390a:	2922      	cmp	r1, #34	; 0x22
 800390c:	d1e5      	bne.n	80038da <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	3902      	subs	r1, #2
 8003910:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003912:	0022      	movs	r2, r4
 8003914:	0021      	movs	r1, r4
 8003916:	3242      	adds	r2, #66	; 0x42
 8003918:	7810      	ldrb	r0, [r2, #0]
 800391a:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800391e:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003920:	2840      	cmp	r0, #64	; 0x40
 8003922:	d103      	bne.n	800392c <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003924:	0020      	movs	r0, r4
 8003926:	f7ff fe2d 	bl	8003584 <HAL_I2C_MemRxCpltCallback>
 800392a:	e7d6      	b.n	80038da <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800392c:	0020      	movs	r0, r4
 800392e:	f7ff fd5b 	bl	80033e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003932:	e7d2      	b.n	80038da <I2C_ITMasterCplt+0x52>
 8003934:	fe00e800 	.word	0xfe00e800
 8003938:	ffff0000 	.word	0xffff0000

0800393c <I2C_Slave_ISR_DMA>:
{
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800393e:	0005      	movs	r5, r0
 8003940:	3540      	adds	r5, #64	; 0x40
 8003942:	782b      	ldrb	r3, [r5, #0]
{
 8003944:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003946:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003948:	2002      	movs	r0, #2
 800394a:	2b01      	cmp	r3, #1
 800394c:	d02d      	beq.n	80039aa <I2C_Slave_ISR_DMA+0x6e>
 800394e:	2301      	movs	r3, #1
 8003950:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003952:	330f      	adds	r3, #15
 8003954:	4219      	tst	r1, r3
 8003956:	d04b      	beq.n	80039f0 <I2C_Slave_ISR_DMA+0xb4>
 8003958:	421a      	tst	r2, r3
 800395a:	d049      	beq.n	80039f0 <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800395c:	20c0      	movs	r0, #192	; 0xc0
 800395e:	0200      	lsls	r0, r0, #8
 8003960:	4202      	tst	r2, r0
 8003962:	d042      	beq.n	80039ea <I2C_Slave_ISR_DMA+0xae>
      if (hi2c->hdmarx != NULL)
 8003964:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 8003966:	1e03      	subs	r3, r0, #0
      if (hi2c->hdmarx != NULL)
 8003968:	d006      	beq.n	8003978 <I2C_Slave_ISR_DMA+0x3c>
  uint32_t treatdmanack = 0U;
 800396a:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800396c:	0417      	lsls	r7, r2, #16
 800396e:	d503      	bpl.n	8003978 <I2C_Slave_ISR_DMA+0x3c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003970:	6803      	ldr	r3, [r0, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8003974:	4258      	negs	r0, r3
 8003976:	4143      	adcs	r3, r0
      if (hi2c->hdmatx != NULL)
 8003978:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800397a:	2800      	cmp	r0, #0
 800397c:	d005      	beq.n	800398a <I2C_Slave_ISR_DMA+0x4e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800397e:	0452      	lsls	r2, r2, #17
 8003980:	d503      	bpl.n	800398a <I2C_Slave_ISR_DMA+0x4e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	6852      	ldr	r2, [r2, #4]
 8003986:	2a00      	cmp	r2, #0
 8003988:	d001      	beq.n	800398e <I2C_Slave_ISR_DMA+0x52>
      if (treatdmanack == 1U)
 800398a:	2b01      	cmp	r3, #1
 800398c:	d11e      	bne.n	80039cc <I2C_Slave_ISR_DMA+0x90>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800398e:	0023      	movs	r3, r4
 8003990:	3341      	adds	r3, #65	; 0x41
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	2a28      	cmp	r2, #40	; 0x28
 8003996:	d109      	bne.n	80039ac <I2C_Slave_ISR_DMA+0x70>
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0492      	lsls	r2, r2, #18
 800399c:	4296      	cmp	r6, r2
 800399e:	d105      	bne.n	80039ac <I2C_Slave_ISR_DMA+0x70>
          I2C_ITListenCplt(hi2c, ITFlags);
 80039a0:	0020      	movs	r0, r4
 80039a2:	f7ff fdbb 	bl	800351c <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 80039a6:	2000      	movs	r0, #0
 80039a8:	7028      	strb	r0, [r5, #0]
}
 80039aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ac:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039ae:	7819      	ldrb	r1, [r3, #0]
 80039b0:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b2:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039b4:	2929      	cmp	r1, #41	; 0x29
 80039b6:	d1f6      	bne.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <I2C_Slave_ISR_DMA+0xd8>)
 80039ba:	428e      	cmp	r6, r1
 80039bc:	d0f3      	beq.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
          I2C_Flush_TXDR(hi2c);
 80039be:	0020      	movs	r0, r4
 80039c0:	f7ff fac2 	bl	8002f48 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 80039c4:	0020      	movs	r0, r4
 80039c6:	f7ff fd36 	bl	8003436 <I2C_ITSlaveSeqCplt>
 80039ca:	e7ec      	b.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039cc:	2210      	movs	r2, #16
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d2:	2304      	movs	r3, #4
 80039d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80039d6:	4313      	orrs	r3, r2
 80039d8:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <I2C_Slave_ISR_DMA+0xdc>)
 80039dc:	421e      	tst	r6, r3
 80039de:	d1e2      	bne.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7ff fdd2 	bl	800358c <I2C_ITError>
 80039e8:	e7dd      	b.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	61d3      	str	r3, [r2, #28]
 80039ee:	e7da      	b.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039f0:	2308      	movs	r3, #8
 80039f2:	4219      	tst	r1, r3
 80039f4:	d005      	beq.n	8003a02 <I2C_Slave_ISR_DMA+0xc6>
 80039f6:	421a      	tst	r2, r3
 80039f8:	d003      	beq.n	8003a02 <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039fa:	0020      	movs	r0, r4
 80039fc:	f7ff fd45 	bl	800348a <I2C_ITAddrCplt.isra.8>
 8003a00:	e7d1      	b.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a02:	2320      	movs	r3, #32
 8003a04:	4219      	tst	r1, r3
 8003a06:	d0ce      	beq.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
 8003a08:	421a      	tst	r2, r3
 8003a0a:	d0cc      	beq.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f7ff fe2f 	bl	8003670 <I2C_ITSlaveCplt>
 8003a12:	e7c8      	b.n	80039a6 <I2C_Slave_ISR_DMA+0x6a>
 8003a14:	ffff0000 	.word	0xffff0000
 8003a18:	feffffff 	.word	0xfeffffff

08003a1c <I2C_Master_ISR_DMA>:
{
 8003a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8003a1e:	0005      	movs	r5, r0
 8003a20:	3540      	adds	r5, #64	; 0x40
 8003a22:	782b      	ldrb	r3, [r5, #0]
{
 8003a24:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8003a26:	2002      	movs	r0, #2
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d015      	beq.n	8003a58 <I2C_Master_ISR_DMA+0x3c>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a30:	330f      	adds	r3, #15
 8003a32:	4219      	tst	r1, r3
 8003a34:	d011      	beq.n	8003a5a <I2C_Master_ISR_DMA+0x3e>
 8003a36:	421a      	tst	r2, r3
 8003a38:	d00f      	beq.n	8003a5a <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a3c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3e:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a42:	3b0c      	subs	r3, #12
 8003a44:	4313      	orrs	r3, r2
 8003a46:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a48:	2112      	movs	r1, #18
 8003a4a:	f7ff faa1 	bl	8002f90 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8003a4e:	0020      	movs	r0, r4
 8003a50:	f7ff fa7a 	bl	8002f48 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8003a54:	2000      	movs	r0, #0
 8003a56:	7028      	strb	r0, [r5, #0]
}
 8003a58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003a5a:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a5c:	0608      	lsls	r0, r1, #24
 8003a5e:	d544      	bpl.n	8003aea <I2C_Master_ISR_DMA+0xce>
 8003a60:	421a      	tst	r2, r3
 8003a62:	d042      	beq.n	8003aea <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	6811      	ldr	r1, [r2, #0]
 8003a68:	4399      	bics	r1, r3
 8003a6a:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 8003a6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02f      	beq.n	8003ad2 <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a72:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a76:	0589      	lsls	r1, r1, #22
 8003a78:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7a:	2bff      	cmp	r3, #255	; 0xff
 8003a7c:	d91b      	bls.n	8003ab6 <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7e:	23ff      	movs	r3, #255	; 0xff
 8003a80:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003a86:	2000      	movs	r0, #0
 8003a88:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003a8a:	9000      	str	r0, [sp, #0]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	0020      	movs	r0, r4
 8003a90:	f7ff fa68 	bl	8002f64 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8003a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a9e:	0023      	movs	r3, r4
 8003aa0:	3341      	adds	r3, #65	; 0x41
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003aa6:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa8:	2a22      	cmp	r2, #34	; 0x22
 8003aaa:	d10f      	bne.n	8003acc <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e7ce      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8003ab6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ab8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8003aba:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <I2C_Master_ISR_DMA+0x10c>)
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 8003ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ac4:	e7df      	b.n	8003a86 <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	049b      	lsls	r3, r3, #18
 8003aca:	e7dc      	b.n	8003a86 <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	01d2      	lsls	r2, r2, #7
 8003ad0:	e7ee      	b.n	8003ab0 <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ad2:	6853      	ldr	r3, [r2, #4]
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	d403      	bmi.n	8003ae0 <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 8003ad8:	0020      	movs	r0, r4
 8003ada:	f7ff fc86 	bl	80033ea <I2C_ITMasterSeqCplt>
 8003ade:	e7b9      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	f7ff fd52 	bl	800358c <I2C_ITError>
 8003ae8:	e7b4      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003aea:	4219      	tst	r1, r3
 8003aec:	d012      	beq.n	8003b14 <I2C_Master_ISR_DMA+0xf8>
 8003aee:	421a      	tst	r2, r3
 8003af0:	d010      	beq.n	8003b14 <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 8003af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f3      	bne.n	8003ae0 <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	0192      	lsls	r2, r2, #6
 8003afe:	d4a9      	bmi.n	8003a54 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <I2C_Master_ISR_DMA+0x10c>)
 8003b04:	4291      	cmp	r1, r2
 8003b06:	d1e7      	bne.n	8003ad8 <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	01d2      	lsls	r2, r2, #7
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e79f      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b14:	2320      	movs	r3, #32
 8003b16:	4219      	tst	r1, r3
 8003b18:	d09c      	beq.n	8003a54 <I2C_Master_ISR_DMA+0x38>
 8003b1a:	421a      	tst	r2, r3
 8003b1c:	d100      	bne.n	8003b20 <I2C_Master_ISR_DMA+0x104>
 8003b1e:	e799      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7ff feb1 	bl	8003888 <I2C_ITMasterCplt>
 8003b26:	e795      	b.n	8003a54 <I2C_Master_ISR_DMA+0x38>
 8003b28:	ffff0000 	.word	0xffff0000

08003b2c <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b2c:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003b30:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b32:	6802      	ldr	r2, [r0, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	6851      	ldr	r1, [r2, #4]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	f7ff fd25 	bl	800358c <I2C_ITError>
}
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <I2C_DMAMasterTransmitCplt>:
{
 8003b44:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b46:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b48:	4911      	ldr	r1, [pc, #68]	; (8003b90 <I2C_DMAMasterTransmitCplt+0x4c>)
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8003b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003b58:	2112      	movs	r1, #18
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f7ff fa18 	bl	8002f90 <I2C_Enable_IRQ>
}
 8003b60:	e013      	b.n	8003b8a <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b64:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003b66:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8003b6a:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b6c:	2bff      	cmp	r3, #255	; 0xff
 8003b6e:	d90d      	bls.n	8003b8c <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b70:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8003b72:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8003b74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b76:	3228      	adds	r2, #40	; 0x28
 8003b78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b7a:	f7ff f845 	bl	8002c08 <HAL_DMA_Start_IT>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d0ea      	beq.n	8003b58 <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003b82:	2110      	movs	r1, #16
 8003b84:	0020      	movs	r0, r4
 8003b86:	f7ff fd01 	bl	800358c <I2C_ITError>
}
 8003b8a:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8003b8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b8e:	e7f0      	b.n	8003b72 <I2C_DMAMasterTransmitCplt+0x2e>
 8003b90:	ffffbfff 	.word	0xffffbfff

08003b94 <HAL_I2C_ER_IRQHandler>:
{
 8003b94:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b96:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b98:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003b9a:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b9c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b9e:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ba0:	4229      	tst	r1, r5
 8003ba2:	d006      	beq.n	8003bb2 <HAL_I2C_ER_IRQHandler+0x1e>
 8003ba4:	0614      	lsls	r4, r2, #24
 8003ba6:	d504      	bpl.n	8003bb2 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ba8:	2401      	movs	r4, #1
 8003baa:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003bac:	4334      	orrs	r4, r6
 8003bae:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bb0:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003bb2:	2580      	movs	r5, #128	; 0x80
 8003bb4:	00ed      	lsls	r5, r5, #3
 8003bb6:	4229      	tst	r1, r5
 8003bb8:	d006      	beq.n	8003bc8 <HAL_I2C_ER_IRQHandler+0x34>
 8003bba:	0614      	lsls	r4, r2, #24
 8003bbc:	d504      	bpl.n	8003bc8 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003bbe:	2408      	movs	r4, #8
 8003bc0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003bc2:	4334      	orrs	r4, r6
 8003bc4:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bc6:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003bc8:	2480      	movs	r4, #128	; 0x80
 8003bca:	00a4      	lsls	r4, r4, #2
 8003bcc:	4221      	tst	r1, r4
 8003bce:	d006      	beq.n	8003bde <HAL_I2C_ER_IRQHandler+0x4a>
 8003bd0:	0612      	lsls	r2, r2, #24
 8003bd2:	d504      	bpl.n	8003bde <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bdc:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003bde:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8003be0:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003be2:	4219      	tst	r1, r3
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8003be6:	f7ff fcd1 	bl	800358c <I2C_ITError>
}
 8003bea:	bd70      	pop	{r4, r5, r6, pc}

08003bec <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003bec:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bee:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003bf0:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003bf2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003bf4:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003bf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003bf8:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	3341      	adds	r3, #65	; 0x41
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	2a60      	cmp	r2, #96	; 0x60
 8003c02:	d104      	bne.n	8003c0e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	3a40      	subs	r2, #64	; 0x40
 8003c06:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c08:	f7ff fcbe 	bl	8003588 <HAL_I2C_AbortCpltCallback>
}
 8003c0c:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8003c0e:	f7ff fcba 	bl	8003586 <HAL_I2C_ErrorCallback>
}
 8003c12:	e7fb      	b.n	8003c0c <I2C_DMAAbort+0x20>

08003c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	0004      	movs	r4, r0
 8003c18:	3441      	adds	r4, #65	; 0x41
 8003c1a:	7822      	ldrb	r2, [r4, #0]
{
 8003c1c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c22:	2a20      	cmp	r2, #32
 8003c24:	d118      	bne.n	8003c58 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8003c26:	001d      	movs	r5, r3
 8003c28:	3540      	adds	r5, #64	; 0x40
 8003c2a:	782e      	ldrb	r6, [r5, #0]
 8003c2c:	2e01      	cmp	r6, #1
 8003c2e:	d013      	beq.n	8003c58 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8003c30:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c32:	3022      	adds	r0, #34	; 0x22
 8003c34:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003c36:	681e      	ldr	r6, [r3, #0]
 8003c38:	3823      	subs	r0, #35	; 0x23
 8003c3a:	4386      	bics	r6, r0
 8003c3c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c3e:	681e      	ldr	r6, [r3, #0]
 8003c40:	4f06      	ldr	r7, [pc, #24]	; (8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8003c42:	403e      	ands	r6, r7
 8003c44:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c46:	681e      	ldr	r6, [r3, #0]
 8003c48:	4331      	orrs	r1, r6
 8003c4a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	4308      	orrs	r0, r1
 8003c50:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003c52:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003c56:	7028      	strb	r0, [r5, #0]
  }
}
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	ffffefff 	.word	0xffffefff

08003c60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c62:	0005      	movs	r5, r0
 8003c64:	3541      	adds	r5, #65	; 0x41
 8003c66:	782a      	ldrb	r2, [r5, #0]
{
 8003c68:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6e:	2a20      	cmp	r2, #32
 8003c70:	d117      	bne.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003c72:	001c      	movs	r4, r3
 8003c74:	3440      	adds	r4, #64	; 0x40
 8003c76:	7826      	ldrb	r6, [r4, #0]
 8003c78:	2e01      	cmp	r6, #1
 8003c7a:	d012      	beq.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8003c7c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7e:	3022      	adds	r0, #34	; 0x22
 8003c80:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003c82:	681e      	ldr	r6, [r3, #0]
 8003c84:	3823      	subs	r0, #35	; 0x23
 8003c86:	4386      	bics	r6, r0
 8003c88:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003c8a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003c8c:	4f05      	ldr	r7, [pc, #20]	; (8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8003c8e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003c90:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003c92:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003c94:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	4308      	orrs	r0, r1
 8003c9a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003c9c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003ca0:	7020      	strb	r0, [r4, #0]
  }
}
 8003ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca4:	fffff0ff 	.word	0xfffff0ff

08003ca8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003ca8:	b513      	push	{r0, r1, r4, lr}
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2401      	movs	r4, #1
 8003cac:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8003cae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003cb0:	4321      	orrs	r1, r4
 8003cb2:	6411      	str	r1, [r2, #64]	; 0x40
 8003cb4:	6c13      	ldr	r3, [r2, #64]	; 0x40

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb8:	4023      	ands	r3, r4
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	4318      	orrs	r0, r3
 8003cc2:	6010      	str	r0, [r2, #0]
}
 8003cc4:	bd13      	pop	{r0, r1, r4, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cd0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cd2:	4c10      	ldr	r4, [pc, #64]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8003cd4:	4910      	ldr	r1, [pc, #64]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8003cd6:	6823      	ldr	r3, [r4, #0]
{
 8003cd8:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cda:	400b      	ands	r3, r1
 8003cdc:	4303      	orrs	r3, r0
 8003cde:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce0:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003ce2:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d10c      	bne.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	4358      	muls	r0, r3
 8003cf4:	f7fc fa2c 	bl	8000150 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf8:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003cfa:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cfc:	00d2      	lsls	r2, r2, #3
 8003cfe:	6960      	ldr	r0, [r4, #20]
 8003d00:	4010      	ands	r0, r2
 8003d02:	d100      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8003d04:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	e7f7      	b.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8003d0e:	2003      	movs	r0, #3
 8003d10:	e7f8      	b.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x34>
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	40007000 	.word	0x40007000
 8003d18:	fffff9ff 	.word	0xfffff9ff
 8003d1c:	20000208 	.word	0x20000208
 8003d20:	000f4240 	.word	0x000f4240

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d26:	0004      	movs	r4, r0
 8003d28:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8003d2e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8003d30:	b005      	add	sp, #20
 8003d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d34:	6803      	ldr	r3, [r0, #0]
 8003d36:	07db      	lsls	r3, r3, #31
 8003d38:	d410      	bmi.n	8003d5c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	079b      	lsls	r3, r3, #30
 8003d3e:	d45c      	bmi.n	8003dfa <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	071b      	lsls	r3, r3, #28
 8003d44:	d500      	bpl.n	8003d48 <HAL_RCC_OscConfig+0x24>
 8003d46:	e0c2      	b.n	8003ece <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	075b      	lsls	r3, r3, #29
 8003d4c:	d500      	bpl.n	8003d50 <HAL_RCC_OscConfig+0x2c>
 8003d4e:	e0f4      	b.n	8003f3a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d50:	69e2      	ldr	r2, [r4, #28]
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d000      	beq.n	8003d58 <HAL_RCC_OscConfig+0x34>
 8003d56:	e173      	b.n	8004040 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e7e9      	b.n	8003d30 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5c:	2238      	movs	r2, #56	; 0x38
 8003d5e:	4dac      	ldr	r5, [pc, #688]	; (8004010 <HAL_RCC_OscConfig+0x2ec>)
 8003d60:	68ab      	ldr	r3, [r5, #8]
 8003d62:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d6a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d6c:	0793      	lsls	r3, r2, #30
 8003d6e:	d108      	bne.n	8003d82 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	039b      	lsls	r3, r3, #14
 8003d74:	d5e1      	bpl.n	8003d3a <HAL_RCC_OscConfig+0x16>
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1de      	bne.n	8003d3a <HAL_RCC_OscConfig+0x16>
 8003d7c:	e7d7      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d0f6      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	0252      	lsls	r2, r2, #9
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_RCC_OscConfig+0x8c>
 8003d8c:	682a      	ldr	r2, [r5, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d92:	f7fe fb09 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d96:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003d98:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	02b6      	lsls	r6, r6, #10
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	4233      	tst	r3, r6
 8003da0:	d1cb      	bne.n	8003d3a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da2:	f7fe fb01 	bl	80023a8 <HAL_GetTick>
 8003da6:	1bc0      	subs	r0, r0, r7
 8003da8:	2864      	cmp	r0, #100	; 0x64
 8003daa:	d9f7      	bls.n	8003d9c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8003dac:	2003      	movs	r0, #3
 8003dae:	e7bf      	b.n	8003d30 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	21a0      	movs	r1, #160	; 0xa0
 8003db2:	02c9      	lsls	r1, r1, #11
 8003db4:	428b      	cmp	r3, r1
 8003db6:	d108      	bne.n	8003dca <HAL_RCC_OscConfig+0xa6>
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	6829      	ldr	r1, [r5, #0]
 8003dbc:	02db      	lsls	r3, r3, #11
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	602a      	str	r2, [r5, #0]
 8003dc8:	e7e3      	b.n	8003d92 <HAL_RCC_OscConfig+0x6e>
 8003dca:	682a      	ldr	r2, [r5, #0]
 8003dcc:	4991      	ldr	r1, [pc, #580]	; (8004014 <HAL_RCC_OscConfig+0x2f0>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	602a      	str	r2, [r5, #0]
 8003dd2:	682a      	ldr	r2, [r5, #0]
 8003dd4:	4990      	ldr	r1, [pc, #576]	; (8004018 <HAL_RCC_OscConfig+0x2f4>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1d9      	bne.n	8003d92 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003dde:	f7fe fae3 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003de4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de6:	02b6      	lsls	r6, r6, #10
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	4233      	tst	r3, r6
 8003dec:	d0a5      	beq.n	8003d3a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dee:	f7fe fadb 	bl	80023a8 <HAL_GetTick>
 8003df2:	1bc0      	subs	r0, r0, r7
 8003df4:	2864      	cmp	r0, #100	; 0x64
 8003df6:	d9f7      	bls.n	8003de8 <HAL_RCC_OscConfig+0xc4>
 8003df8:	e7d8      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	2338      	movs	r3, #56	; 0x38
 8003dfc:	4d84      	ldr	r5, [pc, #528]	; (8004010 <HAL_RCC_OscConfig+0x2ec>)
 8003dfe:	68aa      	ldr	r2, [r5, #8]
 8003e00:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e02:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d129      	bne.n	8003e5c <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e08:	2103      	movs	r1, #3
 8003e0a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e0c:	2a02      	cmp	r2, #2
 8003e0e:	d127      	bne.n	8003e60 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e10:	682a      	ldr	r2, [r5, #0]
 8003e12:	0552      	lsls	r2, r2, #21
 8003e14:	d503      	bpl.n	8003e1e <HAL_RCC_OscConfig+0xfa>
 8003e16:	68e2      	ldr	r2, [r4, #12]
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	d100      	bne.n	8003e1e <HAL_RCC_OscConfig+0xfa>
 8003e1c:	e787      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1e:	6869      	ldr	r1, [r5, #4]
 8003e20:	6962      	ldr	r2, [r4, #20]
 8003e22:	487e      	ldr	r0, [pc, #504]	; (800401c <HAL_RCC_OscConfig+0x2f8>)
 8003e24:	0212      	lsls	r2, r2, #8
 8003e26:	4001      	ands	r1, r0
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	4a7b      	ldr	r2, [pc, #492]	; (8004020 <HAL_RCC_OscConfig+0x2fc>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	6922      	ldr	r2, [r4, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	4a79      	ldr	r2, [pc, #484]	; (8004024 <HAL_RCC_OscConfig+0x300>)
 8003e40:	049b      	lsls	r3, r3, #18
 8003e42:	0f5b      	lsrs	r3, r3, #29
 8003e44:	40da      	lsrs	r2, r3
 8003e46:	0013      	movs	r3, r2
 8003e48:	4a77      	ldr	r2, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x304>)
 8003e4a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x308>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	f7fe fa62 	bl	8002318 <HAL_InitTick>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d100      	bne.n	8003e5a <HAL_RCC_OscConfig+0x136>
 8003e58:	e772      	b.n	8003d40 <HAL_RCC_OscConfig+0x1c>
 8003e5a:	e768      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0d7      	beq.n	8003e10 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e60:	68e3      	ldr	r3, [r4, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	4a6d      	ldr	r2, [pc, #436]	; (8004020 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e72:	4313      	orrs	r3, r2
 8003e74:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	682a      	ldr	r2, [r5, #0]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e80:	f7fe fa92 	bl	80023a8 <HAL_GetTick>
 8003e84:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	4233      	tst	r3, r6
 8003e8a:	d007      	beq.n	8003e9c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	686a      	ldr	r2, [r5, #4]
 8003e8e:	6963      	ldr	r3, [r4, #20]
 8003e90:	4962      	ldr	r1, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x2f8>)
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	400a      	ands	r2, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	606b      	str	r3, [r5, #4]
 8003e9a:	e751      	b.n	8003d40 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fa84 	bl	80023a8 <HAL_GetTick>
 8003ea0:	1bc0      	subs	r0, r0, r7
 8003ea2:	2802      	cmp	r0, #2
 8003ea4:	d9ef      	bls.n	8003e86 <HAL_RCC_OscConfig+0x162>
 8003ea6:	e781      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	4a61      	ldr	r2, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eac:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4013      	ands	r3, r2
 8003eb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fa79 	bl	80023a8 <HAL_GetTick>
 8003eb6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb8:	00f6      	lsls	r6, r6, #3
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	4233      	tst	r3, r6
 8003ebe:	d100      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x19e>
 8003ec0:	e73e      	b.n	8003d40 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fe fa71 	bl	80023a8 <HAL_GetTick>
 8003ec6:	1bc0      	subs	r0, r0, r7
 8003ec8:	2802      	cmp	r0, #2
 8003eca:	d9f6      	bls.n	8003eba <HAL_RCC_OscConfig+0x196>
 8003ecc:	e76e      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003ece:	2138      	movs	r1, #56	; 0x38
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <HAL_RCC_OscConfig+0x2ec>)
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	001d      	movs	r5, r3
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	2a18      	cmp	r2, #24
 8003eda:	d108      	bne.n	8003eee <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ede:	079b      	lsls	r3, r3, #30
 8003ee0:	d400      	bmi.n	8003ee4 <HAL_RCC_OscConfig+0x1c0>
 8003ee2:	e731      	b.n	8003d48 <HAL_RCC_OscConfig+0x24>
 8003ee4:	69a3      	ldr	r3, [r4, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d000      	beq.n	8003eec <HAL_RCC_OscConfig+0x1c8>
 8003eea:	e72d      	b.n	8003d48 <HAL_RCC_OscConfig+0x24>
 8003eec:	e71f      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eee:	69a2      	ldr	r2, [r4, #24]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8003ef6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef8:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8003efa:	4313      	orrs	r3, r2
 8003efc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003efe:	f7fe fa53 	bl	80023a8 <HAL_GetTick>
 8003f02:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f04:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003f06:	4233      	tst	r3, r6
 8003f08:	d000      	beq.n	8003f0c <HAL_RCC_OscConfig+0x1e8>
 8003f0a:	e71d      	b.n	8003d48 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fa4c 	bl	80023a8 <HAL_GetTick>
 8003f10:	1bc0      	subs	r0, r0, r7
 8003f12:	2802      	cmp	r0, #2
 8003f14:	d9f6      	bls.n	8003f04 <HAL_RCC_OscConfig+0x1e0>
 8003f16:	e749      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8003f18:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1a:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8003f1c:	439a      	bics	r2, r3
 8003f1e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003f20:	f7fe fa42 	bl	80023a8 <HAL_GetTick>
 8003f24:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f26:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003f28:	4233      	tst	r3, r6
 8003f2a:	d100      	bne.n	8003f2e <HAL_RCC_OscConfig+0x20a>
 8003f2c:	e70c      	b.n	8003d48 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fa3b 	bl	80023a8 <HAL_GetTick>
 8003f32:	1bc0      	subs	r0, r0, r7
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d9f6      	bls.n	8003f26 <HAL_RCC_OscConfig+0x202>
 8003f38:	e738      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003f3a:	2138      	movs	r1, #56	; 0x38
 8003f3c:	4b34      	ldr	r3, [pc, #208]	; (8004010 <HAL_RCC_OscConfig+0x2ec>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	001d      	movs	r5, r3
 8003f42:	400a      	ands	r2, r1
 8003f44:	2a20      	cmp	r2, #32
 8003f46:	d108      	bne.n	8003f5a <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	079b      	lsls	r3, r3, #30
 8003f4c:	d400      	bmi.n	8003f50 <HAL_RCC_OscConfig+0x22c>
 8003f4e:	e6ff      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c>
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d000      	beq.n	8003f58 <HAL_RCC_OscConfig+0x234>
 8003f56:	e6fb      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c>
 8003f58:	e6e9      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	0552      	lsls	r2, r2, #21
 8003f60:	4213      	tst	r3, r2
 8003f62:	d100      	bne.n	8003f66 <HAL_RCC_OscConfig+0x242>
 8003f64:	e0f6      	b.n	8004154 <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f68:	2780      	movs	r7, #128	; 0x80
 8003f6a:	4e32      	ldr	r6, [pc, #200]	; (8004034 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8003f6c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	007f      	lsls	r7, r7, #1
 8003f72:	423b      	tst	r3, r7
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d122      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x29e>
 8003f7c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8003f82:	f7fe fa11 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f86:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003f88:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003f8c:	423b      	tst	r3, r7
 8003f8e:	d038      	beq.n	8004002 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8003f90:	9b00      	ldr	r3, [sp, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d000      	beq.n	8003f98 <HAL_RCC_OscConfig+0x274>
 8003f96:	e6db      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003f9a:	4a27      	ldr	r2, [pc, #156]	; (8004038 <HAL_RCC_OscConfig+0x314>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003fa0:	e6d6      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa2:	6833      	ldr	r3, [r6, #0]
 8003fa4:	433b      	orrs	r3, r7
 8003fa6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f9fe 	bl	80023a8 <HAL_GetTick>
 8003fac:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fae:	6833      	ldr	r3, [r6, #0]
 8003fb0:	423b      	tst	r3, r7
 8003fb2:	d1e0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fe f9f8 	bl	80023a8 <HAL_GetTick>
 8003fb8:	9b01      	ldr	r3, [sp, #4]
 8003fba:	1ac0      	subs	r0, r0, r3
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	d9f6      	bls.n	8003fae <HAL_RCC_OscConfig+0x28a>
 8003fc0:	e6f4      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2b0>
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	65eb      	str	r3, [r5, #92]	; 0x5c
 8003fce:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e7d4      	b.n	8003f7e <HAL_RCC_OscConfig+0x25a>
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	65ea      	str	r2, [r5, #92]	; 0x5c
 8003fda:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003fdc:	3103      	adds	r1, #3
 8003fde:	438a      	bics	r2, r1
 8003fe0:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1cd      	bne.n	8003f82 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f9df 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fea:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8003fec:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003ff0:	423b      	tst	r3, r7
 8003ff2:	d0cd      	beq.n	8003f90 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fe f9d8 	bl	80023a8 <HAL_GetTick>
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_RCC_OscConfig+0x318>)
 8003ffa:	1b80      	subs	r0, r0, r6
 8003ffc:	4298      	cmp	r0, r3
 8003ffe:	d9f6      	bls.n	8003fee <HAL_RCC_OscConfig+0x2ca>
 8004000:	e6d4      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fe f9d1 	bl	80023a8 <HAL_GetTick>
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_RCC_OscConfig+0x318>)
 8004008:	1b80      	subs	r0, r0, r6
 800400a:	4298      	cmp	r0, r3
 800400c:	d9bd      	bls.n	8003f8a <HAL_RCC_OscConfig+0x266>
 800400e:	e6cd      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
 8004010:	40021000 	.word	0x40021000
 8004014:	fffeffff 	.word	0xfffeffff
 8004018:	fffbffff 	.word	0xfffbffff
 800401c:	ffff80ff 	.word	0xffff80ff
 8004020:	ffffc7ff 	.word	0xffffc7ff
 8004024:	00f42400 	.word	0x00f42400
 8004028:	20000208 	.word	0x20000208
 800402c:	20000004 	.word	0x20000004
 8004030:	fffffeff 	.word	0xfffffeff
 8004034:	40007000 	.word	0x40007000
 8004038:	efffffff 	.word	0xefffffff
 800403c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004040:	2038      	movs	r0, #56	; 0x38
 8004042:	4b49      	ldr	r3, [pc, #292]	; (8004168 <HAL_RCC_OscConfig+0x444>)
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	001d      	movs	r5, r3
 8004048:	4001      	ands	r1, r0
 800404a:	2910      	cmp	r1, #16
 800404c:	d054      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4946      	ldr	r1, [pc, #280]	; (800416c <HAL_RCC_OscConfig+0x448>)
 8004052:	400b      	ands	r3, r1
 8004054:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004056:	2a02      	cmp	r2, #2
 8004058:	d137      	bne.n	80040ca <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 800405a:	f7fe f9a5 	bl	80023a8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004060:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004062:	04b6      	lsls	r6, r6, #18
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	4233      	tst	r3, r6
 8004068:	d129      	bne.n	80040be <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800406c:	6a23      	ldr	r3, [r4, #32]
 800406e:	68ea      	ldr	r2, [r5, #12]
 8004070:	430b      	orrs	r3, r1
 8004072:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x44c>)
 8004074:	400a      	ands	r2, r1
 8004076:	4313      	orrs	r3, r2
 8004078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800407a:	4313      	orrs	r3, r2
 800407c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800407e:	4313      	orrs	r3, r2
 8004080:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004082:	4313      	orrs	r3, r2
 8004084:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004086:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004088:	0212      	lsls	r2, r2, #8
 800408a:	4313      	orrs	r3, r2
 800408c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	682a      	ldr	r2, [r5, #0]
 8004092:	045b      	lsls	r3, r3, #17
 8004094:	4313      	orrs	r3, r2
 8004096:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	68ea      	ldr	r2, [r5, #12]
 800409c:	055b      	lsls	r3, r3, #21
 800409e:	4313      	orrs	r3, r2
 80040a0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80040a2:	f7fe f981 	bl	80023a8 <HAL_GetTick>
 80040a6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	04a4      	lsls	r4, r4, #18
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	4223      	tst	r3, r4
 80040ae:	d000      	beq.n	80040b2 <HAL_RCC_OscConfig+0x38e>
 80040b0:	e652      	b.n	8003d58 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b2:	f7fe f979 	bl	80023a8 <HAL_GetTick>
 80040b6:	1b80      	subs	r0, r0, r6
 80040b8:	2802      	cmp	r0, #2
 80040ba:	d9f6      	bls.n	80040aa <HAL_RCC_OscConfig+0x386>
 80040bc:	e676      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe f973 	bl	80023a8 <HAL_GetTick>
 80040c2:	1bc0      	subs	r0, r0, r7
 80040c4:	2802      	cmp	r0, #2
 80040c6:	d9cd      	bls.n	8004064 <HAL_RCC_OscConfig+0x340>
 80040c8:	e670      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80040ca:	2203      	movs	r2, #3
 80040cc:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ce:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80040d0:	4393      	bics	r3, r2
 80040d2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80040d4:	68eb      	ldr	r3, [r5, #12]
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80040da:	4013      	ands	r3, r2
 80040dc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80040de:	f7fe f963 	bl	80023a8 <HAL_GetTick>
 80040e2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	4223      	tst	r3, r4
 80040e8:	d100      	bne.n	80040ec <HAL_RCC_OscConfig+0x3c8>
 80040ea:	e635      	b.n	8003d58 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe f95c 	bl	80023a8 <HAL_GetTick>
 80040f0:	1b80      	subs	r0, r0, r6
 80040f2:	2802      	cmp	r0, #2
 80040f4:	d9f6      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3c0>
 80040f6:	e659      	b.n	8003dac <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	2a01      	cmp	r2, #1
 80040fa:	d100      	bne.n	80040fe <HAL_RCC_OscConfig+0x3da>
 80040fc:	e617      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 80040fe:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	2303      	movs	r3, #3
 8004102:	6a22      	ldr	r2, [r4, #32]
 8004104:	4003      	ands	r3, r0
 8004106:	4293      	cmp	r3, r2
 8004108:	d000      	beq.n	800410c <HAL_RCC_OscConfig+0x3e8>
 800410a:	e610      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800410c:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004110:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	4293      	cmp	r3, r2
 8004114:	d000      	beq.n	8004118 <HAL_RCC_OscConfig+0x3f4>
 8004116:	e60a      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004118:	22fe      	movs	r2, #254	; 0xfe
 800411a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800411c:	01d2      	lsls	r2, r2, #7
 800411e:	4002      	ands	r2, r0
 8004120:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d000      	beq.n	8004128 <HAL_RCC_OscConfig+0x404>
 8004126:	e602      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004128:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800412c:	039b      	lsls	r3, r3, #14
 800412e:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004130:	4293      	cmp	r3, r2
 8004132:	d000      	beq.n	8004136 <HAL_RCC_OscConfig+0x412>
 8004134:	e5fb      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004136:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004138:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800413a:	051b      	lsls	r3, r3, #20
 800413c:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800413e:	4293      	cmp	r3, r2
 8004140:	d000      	beq.n	8004144 <HAL_RCC_OscConfig+0x420>
 8004142:	e5f4      	b.n	8003d2e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004144:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004146:	0f40      	lsrs	r0, r0, #29
 8004148:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800414a:	1ac0      	subs	r0, r0, r3
 800414c:	1e43      	subs	r3, r0, #1
 800414e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004150:	b2c0      	uxtb	r0, r0
 8004152:	e5ed      	b.n	8003d30 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004156:	4313      	orrs	r3, r2
 8004158:	63eb      	str	r3, [r5, #60]	; 0x3c
 800415a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800415c:	4013      	ands	r3, r2
 800415e:	9303      	str	r3, [sp, #12]
 8004160:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	e700      	b.n	8003f68 <HAL_RCC_OscConfig+0x244>
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	40021000 	.word	0x40021000
 800416c:	feffffff 	.word	0xfeffffff
 8004170:	11c1808c 	.word	0x11c1808c
 8004174:	eefeffff 	.word	0xeefeffff

08004178 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004178:	2338      	movs	r3, #56	; 0x38
 800417a:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x80>)
{
 800417c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800417e:	6891      	ldr	r1, [r2, #8]
 8004180:	0014      	movs	r4, r2
 8004182:	4219      	tst	r1, r3
 8004184:	d108      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004186:	2101      	movs	r1, #1
 8004188:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800418a:	481c      	ldr	r0, [pc, #112]	; (80041fc <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800418c:	049b      	lsls	r3, r3, #18
 800418e:	0f5b      	lsrs	r3, r3, #29
 8004190:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8004192:	f7fb ffdd 	bl	8000150 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004196:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004198:	6891      	ldr	r1, [r2, #8]
 800419a:	4019      	ands	r1, r3
 800419c:	2908      	cmp	r1, #8
 800419e:	d025      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041a0:	6891      	ldr	r1, [r2, #8]
 80041a2:	4019      	ands	r1, r3
 80041a4:	2910      	cmp	r1, #16
 80041a6:	d115      	bne.n	80041d4 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041a8:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041aa:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041ac:	43db      	mvns	r3, r3
 80041ae:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b0:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b2:	0649      	lsls	r1, r1, #25
 80041b4:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b6:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b8:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ba:	4015      	ands	r5, r2
    switch (pllsource)
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	480f      	ldr	r0, [pc, #60]	; (8004200 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041c2:	f7fb ffc5 	bl	8000150 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041c6:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041c8:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041ca:	0f49      	lsrs	r1, r1, #29
 80041cc:	3101      	adds	r1, #1
 80041ce:	e7e0      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041d0:	480a      	ldr	r0, [pc, #40]	; (80041fc <HAL_RCC_GetSysClockFreq+0x84>)
 80041d2:	e7f6      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80041d4:	6891      	ldr	r1, [r2, #8]
 80041d6:	4019      	ands	r1, r3
 80041d8:	2920      	cmp	r1, #32
 80041da:	d009      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80041dc:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 80041de:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b18      	cmp	r3, #24
 80041e4:	d1d7      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 80041e6:	20fa      	movs	r0, #250	; 0xfa
 80041e8:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80041ea:	e7d4      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <HAL_RCC_GetSysClockFreq+0x88>)
 80041ee:	e7d2      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 80041f0:	2080      	movs	r0, #128	; 0x80
 80041f2:	0200      	lsls	r0, r0, #8
 80041f4:	e7cf      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1e>
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	40021000 	.word	0x40021000
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200

08004204 <HAL_RCC_ClockConfig>:
{
 8004204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004206:	0005      	movs	r5, r0
 8004208:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800420a:	2800      	cmp	r0, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800420e:	2001      	movs	r0, #1
}
 8004210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004212:	2707      	movs	r7, #7
 8004214:	4c4a      	ldr	r4, [pc, #296]	; (8004340 <HAL_RCC_ClockConfig+0x13c>)
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	403b      	ands	r3, r7
 800421a:	428b      	cmp	r3, r1
 800421c:	d32a      	bcc.n	8004274 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421e:	6829      	ldr	r1, [r5, #0]
 8004220:	078b      	lsls	r3, r1, #30
 8004222:	d43b      	bmi.n	800429c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004224:	07cb      	lsls	r3, r1, #31
 8004226:	d448      	bmi.n	80042ba <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	2707      	movs	r7, #7
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	403b      	ands	r3, r7
 800422e:	429e      	cmp	r6, r3
 8004230:	d20a      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	43bb      	bics	r3, r7
 8004236:	4333      	orrs	r3, r6
 8004238:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800423a:	f7fe f8b5 	bl	80023a8 <HAL_GetTick>
 800423e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	403b      	ands	r3, r7
 8004244:	429e      	cmp	r6, r3
 8004246:	d16b      	bne.n	8004320 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	4c3e      	ldr	r4, [pc, #248]	; (8004344 <HAL_RCC_ClockConfig+0x140>)
 800424c:	075b      	lsls	r3, r3, #29
 800424e:	d46f      	bmi.n	8004330 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004250:	f7ff ff92 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004254:	68a3      	ldr	r3, [r4, #8]
 8004256:	4a3c      	ldr	r2, [pc, #240]	; (8004348 <HAL_RCC_ClockConfig+0x144>)
 8004258:	051b      	lsls	r3, r3, #20
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	589b      	ldr	r3, [r3, r2]
 8004260:	221f      	movs	r2, #31
 8004262:	4013      	ands	r3, r2
 8004264:	40d8      	lsrs	r0, r3
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCC_ClockConfig+0x148>)
 8004268:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_ClockConfig+0x14c>)
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	f7fe f853 	bl	8002318 <HAL_InitTick>
 8004272:	e7cd      	b.n	8004210 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	43bb      	bics	r3, r7
 8004278:	430b      	orrs	r3, r1
 800427a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800427c:	f7fe f894 	bl	80023a8 <HAL_GetTick>
 8004280:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	403b      	ands	r3, r7
 8004286:	429e      	cmp	r6, r3
 8004288:	d0c9      	beq.n	800421e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428a:	f7fe f88d 	bl	80023a8 <HAL_GetTick>
 800428e:	9b01      	ldr	r3, [sp, #4]
 8004290:	1ac0      	subs	r0, r0, r3
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCC_ClockConfig+0x150>)
 8004294:	4298      	cmp	r0, r3
 8004296:	d9f4      	bls.n	8004282 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004298:	2003      	movs	r0, #3
 800429a:	e7b9      	b.n	8004210 <HAL_RCC_ClockConfig+0xc>
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	074b      	lsls	r3, r1, #29
 80042a0:	d504      	bpl.n	80042ac <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042a2:	23e0      	movs	r3, #224	; 0xe0
 80042a4:	6890      	ldr	r0, [r2, #8]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	4303      	orrs	r3, r0
 80042aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	6893      	ldr	r3, [r2, #8]
 80042ae:	482a      	ldr	r0, [pc, #168]	; (8004358 <HAL_RCC_ClockConfig+0x154>)
 80042b0:	4003      	ands	r3, r0
 80042b2:	68a8      	ldr	r0, [r5, #8]
 80042b4:	4303      	orrs	r3, r0
 80042b6:	6093      	str	r3, [r2, #8]
 80042b8:	e7b4      	b.n	8004224 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	686a      	ldr	r2, [r5, #4]
 80042bc:	4f21      	ldr	r7, [pc, #132]	; (8004344 <HAL_RCC_ClockConfig+0x140>)
 80042be:	2a01      	cmp	r2, #1
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	039b      	lsls	r3, r3, #14
 80042c6:	d5a2      	bpl.n	800420e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c8:	2107      	movs	r1, #7
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	438b      	bics	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80042d2:	f7fe f869 	bl	80023a8 <HAL_GetTick>
 80042d6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d8:	2338      	movs	r3, #56	; 0x38
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	401a      	ands	r2, r3
 80042de:	686b      	ldr	r3, [r5, #4]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d0a0      	beq.n	8004228 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fe f85f 	bl	80023a8 <HAL_GetTick>
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	1ac0      	subs	r0, r0, r3
 80042ee:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_ClockConfig+0x150>)
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d9f1      	bls.n	80042d8 <HAL_RCC_ClockConfig+0xd4>
 80042f4:	e7d0      	b.n	8004298 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f6:	2a02      	cmp	r2, #2
 80042f8:	d103      	bne.n	8004302 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	d4e3      	bmi.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
 8004300:	e785      	b.n	800420e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004302:	2a00      	cmp	r2, #0
 8004304:	d103      	bne.n	800430e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	055b      	lsls	r3, r3, #21
 800430a:	d4dd      	bmi.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
 800430c:	e77f      	b.n	800420e <HAL_RCC_ClockConfig+0xa>
 800430e:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004310:	2a03      	cmp	r2, #3
 8004312:	d103      	bne.n	800431c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004314:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004316:	4219      	tst	r1, r3
 8004318:	d1d6      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
 800431a:	e778      	b.n	800420e <HAL_RCC_ClockConfig+0xa>
 800431c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800431e:	e7fa      	b.n	8004316 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe f842 	bl	80023a8 <HAL_GetTick>
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	1ac0      	subs	r0, r0, r3
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x150>)
 800432a:	4298      	cmp	r0, r3
 800432c:	d988      	bls.n	8004240 <HAL_RCC_ClockConfig+0x3c>
 800432e:	e7b3      	b.n	8004298 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_RCC_ClockConfig+0x158>)
 8004334:	4013      	ands	r3, r2
 8004336:	68ea      	ldr	r2, [r5, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60a3      	str	r3, [r4, #8]
 800433c:	e788      	b.n	8004250 <HAL_RCC_ClockConfig+0x4c>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	40022000 	.word	0x40022000
 8004344:	40021000 	.word	0x40021000
 8004348:	0800da34 	.word	0x0800da34
 800434c:	20000208 	.word	0x20000208
 8004350:	20000004 	.word	0x20000004
 8004354:	00001388 	.word	0x00001388
 8004358:	fffff0ff 	.word	0xfffff0ff
 800435c:	ffff8fff 	.word	0xffff8fff

08004360 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004362:	4a07      	ldr	r2, [pc, #28]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	045b      	lsls	r3, r3, #17
 8004368:	0f5b      	lsrs	r3, r3, #29
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	221f      	movs	r2, #31
 8004370:	4013      	ands	r3, r2
 8004372:	4a04      	ldr	r2, [pc, #16]	; (8004384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004374:	6810      	ldr	r0, [r2, #0]
 8004376:	40d8      	lsrs	r0, r3
}
 8004378:	4770      	bx	lr
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	40021000 	.word	0x40021000
 8004380:	0800da74 	.word	0x0800da74
 8004384:	20000208 	.word	0x20000208

08004388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438c:	682b      	ldr	r3, [r5, #0]
{
 800438e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004390:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004392:	039b      	lsls	r3, r3, #14
 8004394:	d550      	bpl.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	4c6f      	ldr	r4, [pc, #444]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	0552      	lsls	r2, r2, #21
 800439c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800439e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	4213      	tst	r3, r2
 80043a2:	d108      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043a6:	4313      	orrs	r3, r2
 80043a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80043aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ac:	4013      	ands	r3, r2
 80043ae:	9303      	str	r3, [sp, #12]
 80043b0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b6:	2780      	movs	r7, #128	; 0x80
 80043b8:	4e68      	ldr	r6, [pc, #416]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ba:	007f      	lsls	r7, r7, #1
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	433b      	orrs	r3, r7
 80043c0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c2:	f7fd fff1 	bl	80023a8 <HAL_GetTick>
 80043c6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	423b      	tst	r3, r7
 80043cc:	d026      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ce:	23c0      	movs	r3, #192	; 0xc0
 80043d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043d6:	d00f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80043d8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00c      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043e0:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043e4:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	0252      	lsls	r2, r2, #9
 80043ea:	430a      	orrs	r2, r1
 80043ec:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043f0:	495c      	ldr	r1, [pc, #368]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f6:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043f8:	07db      	lsls	r3, r3, #31
 80043fa:	d507      	bpl.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd ffd4 	bl	80023a8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004400:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004402:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004404:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004406:	423b      	tst	r3, r7
 8004408:	d100      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800440a:	e09d      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800440e:	4a54      	ldr	r2, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004410:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004412:	4013      	ands	r3, r2
 8004414:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004416:	4313      	orrs	r3, r2
 8004418:	65e3      	str	r3, [r4, #92]	; 0x5c
 800441a:	e006      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fd ffc4 	bl	80023a8 <HAL_GetTick>
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	1ac0      	subs	r0, r0, r3
 8004424:	2802      	cmp	r0, #2
 8004426:	d9cf      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8004428:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d103      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004432:	4a4d      	ldr	r2, [pc, #308]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004434:	4013      	ands	r3, r2
 8004436:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	07da      	lsls	r2, r3, #31
 800443c:	d506      	bpl.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800443e:	2403      	movs	r4, #3
 8004440:	4945      	ldr	r1, [pc, #276]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004444:	43a2      	bics	r2, r4
 8004446:	686c      	ldr	r4, [r5, #4]
 8004448:	4322      	orrs	r2, r4
 800444a:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800444c:	079a      	lsls	r2, r3, #30
 800444e:	d506      	bpl.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004450:	240c      	movs	r4, #12
 8004452:	4941      	ldr	r1, [pc, #260]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004456:	43a2      	bics	r2, r4
 8004458:	68ac      	ldr	r4, [r5, #8]
 800445a:	4322      	orrs	r2, r4
 800445c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445e:	069a      	lsls	r2, r3, #26
 8004460:	d506      	bpl.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004462:	493d      	ldr	r1, [pc, #244]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	4c41      	ldr	r4, [pc, #260]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004466:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004468:	4022      	ands	r2, r4
 800446a:	68ec      	ldr	r4, [r5, #12]
 800446c:	4322      	orrs	r2, r4
 800446e:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004470:	059a      	lsls	r2, r3, #22
 8004472:	d506      	bpl.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004474:	4938      	ldr	r1, [pc, #224]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	4c3e      	ldr	r4, [pc, #248]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004478:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800447a:	4022      	ands	r2, r4
 800447c:	69ac      	ldr	r4, [r5, #24]
 800447e:	4322      	orrs	r2, r4
 8004480:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004482:	055a      	lsls	r2, r3, #21
 8004484:	d506      	bpl.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004486:	4934      	ldr	r1, [pc, #208]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	4c3a      	ldr	r4, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800448a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800448c:	4022      	ands	r2, r4
 800448e:	69ec      	ldr	r4, [r5, #28]
 8004490:	4322      	orrs	r2, r4
 8004492:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004494:	065a      	lsls	r2, r3, #25
 8004496:	d506      	bpl.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004498:	492f      	ldr	r1, [pc, #188]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	4c37      	ldr	r4, [pc, #220]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800449c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800449e:	4022      	ands	r2, r4
 80044a0:	692c      	ldr	r4, [r5, #16]
 80044a2:	4322      	orrs	r2, r4
 80044a4:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a6:	045a      	lsls	r2, r3, #17
 80044a8:	d50f      	bpl.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044aa:	492b      	ldr	r1, [pc, #172]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6a2c      	ldr	r4, [r5, #32]
 80044ae:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	0892      	lsrs	r2, r2, #2
 80044b4:	4322      	orrs	r2, r4
 80044b6:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80044b8:	2280      	movs	r2, #128	; 0x80
 80044ba:	05d2      	lsls	r2, r2, #23
 80044bc:	4294      	cmp	r4, r2
 80044be:	d104      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044c0:	2280      	movs	r2, #128	; 0x80
 80044c2:	68cc      	ldr	r4, [r1, #12]
 80044c4:	0252      	lsls	r2, r2, #9
 80044c6:	4322      	orrs	r2, r4
 80044c8:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ca:	031a      	lsls	r2, r3, #12
 80044cc:	d506      	bpl.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ce:	2440      	movs	r4, #64	; 0x40
 80044d0:	4921      	ldr	r1, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80044d4:	43a2      	bics	r2, r4
 80044d6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80044d8:	4322      	orrs	r2, r4
 80044da:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044dc:	029a      	lsls	r2, r3, #10
 80044de:	d50f      	bpl.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044e0:	491d      	ldr	r1, [pc, #116]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	4e26      	ldr	r6, [pc, #152]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80044e4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80044e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80044e8:	4032      	ands	r2, r6
 80044ea:	4322      	orrs	r2, r4
 80044ec:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	03d2      	lsls	r2, r2, #15
 80044f2:	4294      	cmp	r4, r2
 80044f4:	d104      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	68cc      	ldr	r4, [r1, #12]
 80044fa:	0452      	lsls	r2, r2, #17
 80044fc:	4322      	orrs	r2, r4
 80044fe:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004500:	025a      	lsls	r2, r3, #9
 8004502:	d50d      	bpl.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004504:	4c14      	ldr	r4, [pc, #80]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	4e1e      	ldr	r6, [pc, #120]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004508:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800450a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800450c:	4031      	ands	r1, r6
 800450e:	4311      	orrs	r1, r2
 8004510:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	0449      	lsls	r1, r1, #17
 8004516:	428a      	cmp	r2, r1
 8004518:	d102      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800451a:	68e1      	ldr	r1, [r4, #12]
 800451c:	430a      	orrs	r2, r1
 800451e:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004520:	051b      	lsls	r3, r3, #20
 8004522:	d50f      	bpl.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	4c17      	ldr	r4, [pc, #92]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004528:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800452a:	696a      	ldr	r2, [r5, #20]
 800452c:	4023      	ands	r3, r4
 800452e:	4313      	orrs	r3, r2
 8004530:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	01db      	lsls	r3, r3, #7
 8004536:	429a      	cmp	r2, r3
 8004538:	d104      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	68ca      	ldr	r2, [r1, #12]
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	4313      	orrs	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8004544:	b005      	add	sp, #20
 8004546:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd ff2e 	bl	80023a8 <HAL_GetTick>
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800454e:	1b80      	subs	r0, r0, r6
 8004550:	4298      	cmp	r0, r3
 8004552:	d800      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004554:	e756      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004556:	e767      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
 8004560:	fffffcff 	.word	0xfffffcff
 8004564:	fffeffff 	.word	0xfffeffff
 8004568:	efffffff 	.word	0xefffffff
 800456c:	fffff3ff 	.word	0xfffff3ff
 8004570:	fff3ffff 	.word	0xfff3ffff
 8004574:	ffcfffff 	.word	0xffcfffff
 8004578:	ffffcfff 	.word	0xffffcfff
 800457c:	ffbfffff 	.word	0xffbfffff
 8004580:	feffffff 	.word	0xfeffffff
 8004584:	ffff3fff 	.word	0xffff3fff
 8004588:	00001388 	.word	0x00001388

0800458c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800458c:	21a0      	movs	r1, #160	; 0xa0
 800458e:	6802      	ldr	r2, [r0, #0]
{
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004592:	68d3      	ldr	r3, [r2, #12]
{
 8004594:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004596:	438b      	bics	r3, r1
 8004598:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800459a:	f7fd ff05 	bl	80023a8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800459e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80045a0:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80045a2:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045a4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	422b      	tst	r3, r5
 80045ac:	d001      	beq.n	80045b2 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80045ae:	2000      	movs	r0, #0
}
 80045b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045b2:	f7fd fef9 	bl	80023a8 <HAL_GetTick>
 80045b6:	1b80      	subs	r0, r0, r6
 80045b8:	42b8      	cmp	r0, r7
 80045ba:	d9f4      	bls.n	80045a6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80045bc:	2003      	movs	r0, #3
 80045be:	e7f7      	b.n	80045b0 <HAL_RTC_WaitForSynchro+0x24>

080045c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80045c2:	2740      	movs	r7, #64	; 0x40
 80045c4:	6803      	ldr	r3, [r0, #0]
{
 80045c6:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80045c8:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 80045ca:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80045cc:	423a      	tst	r2, r7
 80045ce:	d10c      	bne.n	80045ea <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045d8:	f7fd fee6 	bl	80023a8 <HAL_GetTick>
 80045dc:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	423b      	tst	r3, r7
 80045e4:	d101      	bne.n	80045ea <RTC_EnterInitMode+0x2a>
 80045e6:	2c03      	cmp	r4, #3
 80045e8:	d101      	bne.n	80045ee <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 80045ea:	0020      	movs	r0, r4
 80045ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80045ee:	f7fd fedb 	bl	80023a8 <HAL_GetTick>
 80045f2:	23fa      	movs	r3, #250	; 0xfa
 80045f4:	1b80      	subs	r0, r0, r6
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4298      	cmp	r0, r3
 80045fa:	d9f0      	bls.n	80045de <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045fc:	002b      	movs	r3, r5
 80045fe:	2403      	movs	r4, #3
 8004600:	3329      	adds	r3, #41	; 0x29
 8004602:	701c      	strb	r4, [r3, #0]
 8004604:	e7eb      	b.n	80045de <RTC_EnterInitMode+0x1e>
	...

08004608 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004608:	2280      	movs	r2, #128	; 0x80
{
 800460a:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800460c:	4c0f      	ldr	r4, [pc, #60]	; (800464c <RTC_ExitInitMode+0x44>)
{
 800460e:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004610:	68e3      	ldr	r3, [r4, #12]
 8004612:	4393      	bics	r3, r2
 8004614:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004616:	69a3      	ldr	r3, [r4, #24]
 8004618:	3a60      	subs	r2, #96	; 0x60
 800461a:	4213      	tst	r3, r2
 800461c:	d107      	bne.n	800462e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800461e:	f7ff ffb5 	bl	800458c <HAL_RTC_WaitForSynchro>
 8004622:	2800      	cmp	r0, #0
 8004624:	d002      	beq.n	800462c <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004626:	2003      	movs	r0, #3
 8004628:	3529      	adds	r5, #41	; 0x29
 800462a:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800462c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800462e:	69a3      	ldr	r3, [r4, #24]
 8004630:	4393      	bics	r3, r2
 8004632:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004634:	f7ff ffaa 	bl	800458c <HAL_RTC_WaitForSynchro>
 8004638:	2800      	cmp	r0, #0
 800463a:	d002      	beq.n	8004642 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800463c:	2003      	movs	r0, #3
 800463e:	3529      	adds	r5, #41	; 0x29
 8004640:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004642:	2320      	movs	r3, #32
 8004644:	69a2      	ldr	r2, [r4, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61a3      	str	r3, [r4, #24]
 800464a:	e7ef      	b.n	800462c <RTC_ExitInitMode+0x24>
 800464c:	40002800 	.word	0x40002800

08004650 <HAL_RTC_Init>:
{
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004654:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8004656:	2c00      	cmp	r4, #0
 8004658:	d047      	beq.n	80046ea <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800465a:	0025      	movs	r5, r4
 800465c:	3529      	adds	r5, #41	; 0x29
 800465e:	782b      	ldrb	r3, [r5, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d108      	bne.n	8004678 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8004666:	0022      	movs	r2, r4
 8004668:	3228      	adds	r2, #40	; 0x28
 800466a:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800466c:	2388      	movs	r3, #136	; 0x88
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8004672:	0020      	movs	r0, r4
 8004674:	f004 fdb6 	bl	80091e4 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004678:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467a:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 800467c:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467e:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8004680:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004682:	625a      	str	r2, [r3, #36]	; 0x24
 8004684:	3a77      	subs	r2, #119	; 0x77
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004688:	f7ff ff9a 	bl	80045c0 <RTC_EnterInitMode>
    if(status == HAL_OK)
 800468c:	2800      	cmp	r0, #0
 800468e:	d125      	bne.n	80046dc <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	4916      	ldr	r1, [pc, #88]	; (80046ec <HAL_RTC_Init+0x9c>)
 8004694:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004696:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004698:	400a      	ands	r2, r1
 800469a:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800469c:	68a2      	ldr	r2, [r4, #8]
 800469e:	6999      	ldr	r1, [r3, #24]
 80046a0:	4302      	orrs	r2, r0
 80046a2:	69e0      	ldr	r0, [r4, #28]
 80046a4:	4302      	orrs	r2, r0
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80046aa:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 80046ac:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80046ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046b0:	68e2      	ldr	r2, [r4, #12]
 80046b2:	6919      	ldr	r1, [r3, #16]
 80046b4:	0412      	lsls	r2, r2, #16
 80046b6:	430a      	orrs	r2, r1
 80046b8:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80046ba:	f7ff ffa5 	bl	8004608 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80046be:	2800      	cmp	r0, #0
 80046c0:	d10c      	bne.n	80046dc <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80046c2:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80046c4:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80046c6:	6993      	ldr	r3, [r2, #24]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	08db      	lsrs	r3, r3, #3
 80046cc:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80046ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d0:	6991      	ldr	r1, [r2, #24]
 80046d2:	4333      	orrs	r3, r6
 80046d4:	69a6      	ldr	r6, [r4, #24]
 80046d6:	4333      	orrs	r3, r6
 80046d8:	430b      	orrs	r3, r1
 80046da:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 80046e6:	2301      	movs	r3, #1
 80046e8:	702b      	strb	r3, [r5, #0]
}
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	fb8fffbf 	.word	0xfb8fffbf

080046f0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80046f0:	230a      	movs	r3, #10
 80046f2:	0902      	lsrs	r2, r0, #4
 80046f4:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80046f6:	220f      	movs	r2, #15
 80046f8:	4010      	ands	r0, r2
 80046fa:	1818      	adds	r0, r3, r0
 80046fc:	b2c0      	uxtb	r0, r0
}
 80046fe:	4770      	bx	lr

08004700 <HAL_RTC_GetTime>:
{
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004704:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004706:	6801      	ldr	r1, [r0, #0]
 8004708:	688b      	ldr	r3, [r1, #8]
 800470a:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800470c:	690b      	ldr	r3, [r1, #16]
 800470e:	045b      	lsls	r3, r3, #17
 8004710:	0c5b      	lsrs	r3, r3, #17
 8004712:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004714:	680b      	ldr	r3, [r1, #0]
 8004716:	490d      	ldr	r1, [pc, #52]	; (800474c <HAL_RTC_GetTime+0x4c>)
 8004718:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800471a:	0298      	lsls	r0, r3, #10
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800471c:	0a1e      	lsrs	r6, r3, #8
 800471e:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004720:	0e80      	lsrs	r0, r0, #26
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004722:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004724:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004726:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004728:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800472a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800472c:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800472e:	2a00      	cmp	r2, #0
 8004730:	d10a      	bne.n	8004748 <HAL_RTC_GetTime+0x48>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004732:	f7ff ffdd 	bl	80046f0 <RTC_Bcd2ToByte>
 8004736:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004738:	0030      	movs	r0, r6
 800473a:	f7ff ffd9 	bl	80046f0 <RTC_Bcd2ToByte>
 800473e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004740:	0028      	movs	r0, r5
 8004742:	f7ff ffd5 	bl	80046f0 <RTC_Bcd2ToByte>
 8004746:	70a0      	strb	r0, [r4, #2]
}
 8004748:	2000      	movs	r0, #0
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	007f7f7f 	.word	0x007f7f7f

08004750 <HAL_RTC_GetDate>:
{
 8004750:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004752:	253f      	movs	r5, #63	; 0x3f
{
 8004754:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004756:	6803      	ldr	r3, [r0, #0]
 8004758:	490d      	ldr	r1, [pc, #52]	; (8004790 <HAL_RTC_GetDate+0x40>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800475e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004760:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004762:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004764:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004766:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004768:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800476a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800476c:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800476e:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004770:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8004772:	2a00      	cmp	r2, #0
 8004774:	d10a      	bne.n	800478c <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004776:	f7ff ffbb 	bl	80046f0 <RTC_Bcd2ToByte>
 800477a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800477c:	0030      	movs	r0, r6
 800477e:	f7ff ffb7 	bl	80046f0 <RTC_Bcd2ToByte>
 8004782:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004784:	0028      	movs	r0, r5
 8004786:	f7ff ffb3 	bl	80046f0 <RTC_Bcd2ToByte>
 800478a:	70a0      	strb	r0, [r4, #2]
}
 800478c:	2000      	movs	r0, #0
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	00ffff3f 	.word	0x00ffff3f

08004794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8004798:	2001      	movs	r0, #1
  if (hspi == NULL)
 800479a:	2c00      	cmp	r4, #0
 800479c:	d04b      	beq.n	8004836 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479e:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a4:	355d      	adds	r5, #93	; 0x5d
 80047a6:	782b      	ldrb	r3, [r5, #0]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ae:	0022      	movs	r2, r4
 80047b0:	325c      	adds	r2, #92	; 0x5c
 80047b2:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b4:	0020      	movs	r0, r4
 80047b6:	f004 fd55 	bl	8009264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047ba:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80047c0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	4393      	bics	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
 80047ca:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047cc:	68e2      	ldr	r2, [r4, #12]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d931      	bls.n	8004838 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047d4:	26f0      	movs	r6, #240	; 0xf0
 80047d6:	0136      	lsls	r6, r6, #4
 80047d8:	42b2      	cmp	r2, r6
 80047da:	d133      	bne.n	8004844 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047dc:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80047de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d103      	bne.n	80047ec <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d92f      	bls.n	8004848 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80047e8:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80047ea:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80047ec:	68a7      	ldr	r7, [r4, #8]
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	69a0      	ldr	r0, [r4, #24]
 80047f2:	433b      	orrs	r3, r7
 80047f4:	6927      	ldr	r7, [r4, #16]
 80047f6:	433b      	orrs	r3, r7
 80047f8:	6967      	ldr	r7, [r4, #20]
 80047fa:	433b      	orrs	r3, r7
 80047fc:	69e7      	ldr	r7, [r4, #28]
 80047fe:	433b      	orrs	r3, r7
 8004800:	6a27      	ldr	r7, [r4, #32]
 8004802:	433b      	orrs	r3, r7
 8004804:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004806:	433b      	orrs	r3, r7
 8004808:	2780      	movs	r7, #128	; 0x80
 800480a:	00bf      	lsls	r7, r7, #2
 800480c:	4007      	ands	r7, r0
 800480e:	433b      	orrs	r3, r7
 8004810:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004814:	0c00      	lsrs	r0, r0, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800481a:	431a      	orrs	r2, r3
 800481c:	2304      	movs	r3, #4
 800481e:	4018      	ands	r0, r3
 8004820:	4310      	orrs	r0, r2
 8004822:	4306      	orrs	r6, r0
 8004824:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004826:	69cb      	ldr	r3, [r1, #28]
 8004828:	4a08      	ldr	r2, [pc, #32]	; (800484c <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482c:	4013      	ands	r3, r2
 800482e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004830:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004832:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004834:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8004836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004838:	2680      	movs	r6, #128	; 0x80
 800483a:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800483c:	429a      	cmp	r2, r3
 800483e:	d0ce      	beq.n	80047de <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004840:	62a0      	str	r0, [r4, #40]	; 0x28
 8004842:	e7cc      	b.n	80047de <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004844:	0006      	movs	r6, r0
 8004846:	e7fb      	b.n	8004840 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004848:	2301      	movs	r3, #1
 800484a:	e7ce      	b.n	80047ea <HAL_SPI_Init+0x56>
 800484c:	fffff7ff 	.word	0xfffff7ff

08004850 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004850:	2201      	movs	r2, #1
 8004852:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	4807      	ldr	r0, [pc, #28]	; (8004874 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	4311      	orrs	r1, r2
 800485a:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	2906      	cmp	r1, #6
 8004862:	d005      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x20>
 8004864:	3807      	subs	r0, #7
 8004866:	4281      	cmp	r1, r0
 8004868:	d002      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x20>
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004870:	2000      	movs	r0, #0
 8004872:	4770      	bx	lr
 8004874:	00010007 	.word	0x00010007

08004878 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	2101      	movs	r1, #1
 800487a:	6803      	ldr	r3, [r0, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	438a      	bics	r2, r1
 8004880:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004882:	6a18      	ldr	r0, [r3, #32]
 8004884:	4a05      	ldr	r2, [pc, #20]	; (800489c <HAL_TIM_Base_Stop_IT+0x24>)
 8004886:	4210      	tst	r0, r2
 8004888:	d106      	bne.n	8004898 <HAL_TIM_Base_Stop_IT+0x20>
 800488a:	6a18      	ldr	r0, [r3, #32]
 800488c:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_TIM_Base_Stop_IT+0x28>)
 800488e:	4210      	tst	r0, r2
 8004890:	d102      	bne.n	8004898 <HAL_TIM_Base_Stop_IT+0x20>
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	438a      	bics	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004898:	2000      	movs	r0, #0
 800489a:	4770      	bx	lr
 800489c:	00001111 	.word	0x00001111
 80048a0:	00000444 	.word	0x00000444

080048a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_TriggerCallback>:
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	2202      	movs	r2, #2
 80048ae:	6803      	ldr	r3, [r0, #0]
{
 80048b0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b2:	6919      	ldr	r1, [r3, #16]
{
 80048b4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b6:	4211      	tst	r1, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	4211      	tst	r1, r2
 80048be:	d00b      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c0:	3a05      	subs	r2, #5
 80048c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	3204      	adds	r2, #4
 80048c8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ca:	079b      	lsls	r3, r3, #30
 80048cc:	d100      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x24>
 80048ce:	e086      	b.n	80049de <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048d0:	f7ff ffe9 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d4:	2300      	movs	r3, #0
 80048d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d8:	2204      	movs	r2, #4
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	4211      	tst	r1, r2
 80048e0:	d011      	beq.n	8004906 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048e2:	68d9      	ldr	r1, [r3, #12]
 80048e4:	4211      	tst	r1, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e8:	3a09      	subs	r2, #9
 80048ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ec:	3207      	adds	r2, #7
 80048ee:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	23c0      	movs	r3, #192	; 0xc0
 80048f4:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	421a      	tst	r2, r3
 80048fa:	d100      	bne.n	80048fe <HAL_TIM_IRQHandler+0x52>
 80048fc:	e075      	b.n	80049ea <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	f7ff ffd2 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	2300      	movs	r3, #0
 8004904:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004906:	2208      	movs	r2, #8
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	6919      	ldr	r1, [r3, #16]
 800490c:	4211      	tst	r1, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004910:	68d9      	ldr	r1, [r3, #12]
 8004912:	4211      	tst	r1, r2
 8004914:	d00b      	beq.n	800492e <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004916:	3a11      	subs	r2, #17
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491c:	320d      	adds	r2, #13
 800491e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004920:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004922:	079b      	lsls	r3, r3, #30
 8004924:	d067      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	f7ff ffbe 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	2300      	movs	r3, #0
 800492c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800492e:	2210      	movs	r2, #16
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	6919      	ldr	r1, [r3, #16]
 8004934:	4211      	tst	r1, r2
 8004936:	d010      	beq.n	800495a <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	4211      	tst	r1, r2
 800493c:	d00d      	beq.n	800495a <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800493e:	3a21      	subs	r2, #33	; 0x21
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	3219      	adds	r2, #25
 8004944:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	23c0      	movs	r3, #192	; 0xc0
 800494a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800494e:	421a      	tst	r2, r3
 8004950:	d057      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	f7ff ffa8 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	2300      	movs	r3, #0
 8004958:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495a:	2201      	movs	r2, #1
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6919      	ldr	r1, [r3, #16]
 8004960:	4211      	tst	r1, r2
 8004962:	d007      	beq.n	8004974 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004964:	68d9      	ldr	r1, [r3, #12]
 8004966:	4211      	tst	r1, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800496a:	3a03      	subs	r2, #3
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496e:	0020      	movs	r0, r4
 8004970:	f002 fb36 	bl	8006fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6919      	ldr	r1, [r3, #16]
 800497a:	4211      	tst	r1, r2
 800497c:	d008      	beq.n	8004990 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497e:	68d9      	ldr	r1, [r3, #12]
 8004980:	4211      	tst	r1, r2
 8004982:	d005      	beq.n	8004990 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004984:	3a02      	subs	r2, #2
 8004986:	3aff      	subs	r2, #255	; 0xff
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	0020      	movs	r0, r4
 800498c:	f000 f9dd 	bl	8004d4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	05d2      	lsls	r2, r2, #23
 8004996:	d507      	bpl.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	0612      	lsls	r2, r2, #24
 800499c:	d504      	bpl.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80049a4:	f000 f9d2 	bl	8004d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6919      	ldr	r1, [r3, #16]
 80049ae:	4211      	tst	r1, r2
 80049b0:	d007      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b2:	68d9      	ldr	r1, [r3, #12]
 80049b4:	4211      	tst	r1, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049b8:	3a81      	subs	r2, #129	; 0x81
 80049ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049bc:	0020      	movs	r0, r4
 80049be:	f7ff ff74 	bl	80048aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049c2:	2220      	movs	r2, #32
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	6919      	ldr	r1, [r3, #16]
 80049c8:	4211      	tst	r1, r2
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	4211      	tst	r1, r2
 80049d0:	d004      	beq.n	80049dc <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d2:	3a41      	subs	r2, #65	; 0x41
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d6:	0020      	movs	r0, r4
 80049d8:	f000 f9b6 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049dc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	f7ff ff61 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff ff60 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80049e8:	e774      	b.n	80048d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	f7ff ff5b 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ee:	0020      	movs	r0, r4
 80049f0:	f7ff ff5a 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80049f4:	e785      	b.n	8004902 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	f7ff ff55 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fa:	0020      	movs	r0, r4
 80049fc:	f7ff ff54 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a00:	e793      	b.n	800492a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	f7ff ff4f 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	0020      	movs	r0, r4
 8004a08:	f7ff ff4e 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a0c:	e7a3      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	fffffeff 	.word	0xfffffeff

08004a14 <HAL_TIM_Base_GetState>:
 8004a14:	303d      	adds	r0, #61	; 0x3d
 8004a16:	7800      	ldrb	r0, [r0, #0]
 8004a18:	b2c0      	uxtb	r0, r0
 8004a1a:	4770      	bx	lr

08004a1c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <TIM_Base_SetConfig+0x84>)
{
 8004a1e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004a20:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a22:	4290      	cmp	r0, r2
 8004a24:	d006      	beq.n	8004a34 <TIM_Base_SetConfig+0x18>
 8004a26:	2480      	movs	r4, #128	; 0x80
 8004a28:	05e4      	lsls	r4, r4, #23
 8004a2a:	42a0      	cmp	r0, r4
 8004a2c:	d002      	beq.n	8004a34 <TIM_Base_SetConfig+0x18>
 8004a2e:	4c1d      	ldr	r4, [pc, #116]	; (8004aa4 <TIM_Base_SetConfig+0x88>)
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d10c      	bne.n	8004a4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	2470      	movs	r4, #112	; 0x70
 8004a36:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004a38:	684c      	ldr	r4, [r1, #4]
 8004a3a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3c:	4290      	cmp	r0, r2
 8004a3e:	d012      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a40:	2480      	movs	r4, #128	; 0x80
 8004a42:	05e4      	lsls	r4, r4, #23
 8004a44:	42a0      	cmp	r0, r4
 8004a46:	d00e      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a48:	4c16      	ldr	r4, [pc, #88]	; (8004aa4 <TIM_Base_SetConfig+0x88>)
 8004a4a:	42a0      	cmp	r0, r4
 8004a4c:	d00b      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a4e:	4c16      	ldr	r4, [pc, #88]	; (8004aa8 <TIM_Base_SetConfig+0x8c>)
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d008      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a54:	4c15      	ldr	r4, [pc, #84]	; (8004aac <TIM_Base_SetConfig+0x90>)
 8004a56:	42a0      	cmp	r0, r4
 8004a58:	d005      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a5a:	4c15      	ldr	r4, [pc, #84]	; (8004ab0 <TIM_Base_SetConfig+0x94>)
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d002      	beq.n	8004a66 <TIM_Base_SetConfig+0x4a>
 8004a60:	4c14      	ldr	r4, [pc, #80]	; (8004ab4 <TIM_Base_SetConfig+0x98>)
 8004a62:	42a0      	cmp	r0, r4
 8004a64:	d103      	bne.n	8004a6e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a66:	4c14      	ldr	r4, [pc, #80]	; (8004ab8 <TIM_Base_SetConfig+0x9c>)
 8004a68:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6a:	68cc      	ldr	r4, [r1, #12]
 8004a6c:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6e:	2480      	movs	r4, #128	; 0x80
 8004a70:	43a3      	bics	r3, r4
 8004a72:	694c      	ldr	r4, [r1, #20]
 8004a74:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8004a76:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	688b      	ldr	r3, [r1, #8]
 8004a7a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	680b      	ldr	r3, [r1, #0]
 8004a7e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a80:	4290      	cmp	r0, r2
 8004a82:	d008      	beq.n	8004a96 <TIM_Base_SetConfig+0x7a>
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <TIM_Base_SetConfig+0x90>)
 8004a86:	4298      	cmp	r0, r3
 8004a88:	d005      	beq.n	8004a96 <TIM_Base_SetConfig+0x7a>
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <TIM_Base_SetConfig+0x94>)
 8004a8c:	4298      	cmp	r0, r3
 8004a8e:	d002      	beq.n	8004a96 <TIM_Base_SetConfig+0x7a>
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <TIM_Base_SetConfig+0x98>)
 8004a92:	4298      	cmp	r0, r3
 8004a94:	d101      	bne.n	8004a9a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a96:	690b      	ldr	r3, [r1, #16]
 8004a98:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	6143      	str	r3, [r0, #20]
}
 8004a9e:	bd10      	pop	{r4, pc}
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40002000 	.word	0x40002000
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800
 8004ab8:	fffffcff 	.word	0xfffffcff

08004abc <HAL_TIM_Base_Init>:
{
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
  if (htim == NULL)
 8004ac2:	2c00      	cmp	r4, #0
 8004ac4:	d014      	beq.n	8004af0 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	0025      	movs	r5, r4
 8004ac8:	353d      	adds	r5, #61	; 0x3d
 8004aca:	782b      	ldrb	r3, [r5, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	0022      	movs	r2, r4
 8004ad4:	323c      	adds	r2, #60	; 0x3c
 8004ad6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8004ad8:	0020      	movs	r0, r4
 8004ada:	f004 ff2d 	bl	8009938 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ade:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	1d21      	adds	r1, r4, #4
 8004ae6:	f7ff ff99 	bl	8004a1c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	2301      	movs	r3, #1
  return HAL_OK;
 8004aec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	702b      	strb	r3, [r5, #0]
}
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004af4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	4d03      	ldr	r5, [pc, #12]	; (8004b08 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afa:	430a      	orrs	r2, r1
 8004afc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afe:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b00:	4313      	orrs	r3, r2
 8004b02:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b04:	6083      	str	r3, [r0, #8]
}
 8004b06:	bd30      	pop	{r4, r5, pc}
 8004b08:	ffff00ff 	.word	0xffff00ff

08004b0c <HAL_TIM_ConfigClockSource>:
{
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004b0e:	0005      	movs	r5, r0
 8004b10:	2302      	movs	r3, #2
 8004b12:	353c      	adds	r5, #60	; 0x3c
 8004b14:	782a      	ldrb	r2, [r5, #0]
{
 8004b16:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004b18:	0018      	movs	r0, r3
 8004b1a:	2a01      	cmp	r2, #1
 8004b1c:	d016      	beq.n	8004b4c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8004b20:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8004b22:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8004b26:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004b2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b2c:	4a3f      	ldr	r2, [pc, #252]	; (8004c2c <HAL_TIM_ConfigClockSource+0x120>)
 8004b2e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004b30:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b32:	680b      	ldr	r3, [r1, #0]
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d063      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xf4>
 8004b38:	d814      	bhi.n	8004b64 <HAL_TIM_ConfigClockSource+0x58>
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d00b      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x4a>
 8004b3e:	d806      	bhi.n	8004b4e <HAL_TIM_ConfigClockSource+0x42>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004b46:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004b4a:	7028      	strb	r0, [r5, #0]
}
 8004b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d001      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x4a>
 8004b52:	2b30      	cmp	r3, #48	; 0x30
 8004b54:	d1f6      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b56:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8004b58:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5a:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	430b      	orrs	r3, r1
 8004b62:	e019      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8004b64:	2b60      	cmp	r3, #96	; 0x60
 8004b66:	d034      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xc6>
 8004b68:	d818      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x90>
 8004b6a:	2b50      	cmp	r3, #80	; 0x50
 8004b6c:	d1ea      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	684a      	ldr	r2, [r1, #4]
 8004b70:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004b72:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b74:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b76:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b78:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b7a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b80:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b82:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b84:	240a      	movs	r4, #10
 8004b86:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004b88:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004b8a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b8c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004b8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b90:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <HAL_TIM_ConfigClockSource+0x124>)
 8004b92:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b94:	2357      	movs	r3, #87	; 0x57
 8004b96:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8004b98:	6083      	str	r3, [r0, #8]
 8004b9a:	e7d3      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004b9c:	2b70      	cmp	r3, #112	; 0x70
 8004b9e:	d00d      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xb0>
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	0192      	lsls	r2, r2, #6
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d1cd      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	68cb      	ldr	r3, [r1, #12]
 8004baa:	684a      	ldr	r2, [r1, #4]
 8004bac:	6889      	ldr	r1, [r1, #8]
 8004bae:	f7ff ffa1 	bl	8004af4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	6891      	ldr	r1, [r2, #8]
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	68cb      	ldr	r3, [r1, #12]
 8004bbe:	684a      	ldr	r2, [r1, #4]
 8004bc0:	6889      	ldr	r1, [r1, #8]
 8004bc2:	f7ff ff97 	bl	8004af4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc6:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6093      	str	r3, [r2, #8]
      break;
 8004bd0:	e7b8      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd2:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd4:	684b      	ldr	r3, [r1, #4]
 8004bd6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd8:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bda:	4f16      	ldr	r7, [pc, #88]	; (8004c34 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	43a1      	bics	r1, r4
 8004bde:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be2:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be4:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be6:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be8:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8004bea:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bec:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bee:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf0:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004bf4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004bf6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <HAL_TIM_ConfigClockSource+0x124>)
 8004bfa:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfc:	2367      	movs	r3, #103	; 0x67
 8004bfe:	e7ca      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c00:	684a      	ldr	r2, [r1, #4]
 8004c02:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c04:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c06:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c08:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c10:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c12:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c16:	240a      	movs	r4, #10
 8004c18:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004c1a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004c1c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c1e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c22:	4a03      	ldr	r2, [pc, #12]	; (8004c30 <HAL_TIM_ConfigClockSource+0x124>)
 8004c24:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c26:	2347      	movs	r3, #71	; 0x47
 8004c28:	e7b5      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x8a>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	ffce0088 	.word	0xffce0088
 8004c30:	ffcfff8f 	.word	0xffcfff8f
 8004c34:	ffff0fff 	.word	0xffff0fff

08004c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c38:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	343c      	adds	r4, #60	; 0x3c
 8004c40:	7825      	ldrb	r5, [r4, #0]
{
 8004c42:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004c44:	0010      	movs	r0, r2
 8004c46:	2d01      	cmp	r5, #1
 8004c48:	d01a      	beq.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4a:	001d      	movs	r5, r3
 8004c4c:	353d      	adds	r5, #61	; 0x3d
 8004c4e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c50:	4e0c      	ldr	r6, [pc, #48]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004c56:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c58:	42b2      	cmp	r2, r6
 8004c5a:	d103      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c5c:	4e0a      	ldr	r6, [pc, #40]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004c5e:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c60:	684e      	ldr	r6, [r1, #4]
 8004c62:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c64:	2670      	movs	r6, #112	; 0x70
 8004c66:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c68:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6a:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c6c:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6e:	2680      	movs	r6, #128	; 0x80
 8004c70:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c72:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c74:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c76:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004c78:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8004c7a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004c7e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	ff0fffff 	.word	0xff0fffff

08004c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c8c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8e:	0004      	movs	r4, r0
 8004c90:	343c      	adds	r4, #60	; 0x3c
 8004c92:	7823      	ldrb	r3, [r4, #0]
{
 8004c94:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004c96:	2002      	movs	r0, #2
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d039      	beq.n	8004d10 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c9c:	68c8      	ldr	r0, [r1, #12]
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ca0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ca2:	4003      	ands	r3, r0
 8004ca4:	6888      	ldr	r0, [r1, #8]
 8004ca6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ca8:	481b      	ldr	r0, [pc, #108]	; (8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004caa:	4003      	ands	r3, r0
 8004cac:	6848      	ldr	r0, [r1, #4]
 8004cae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cb0:	481a      	ldr	r0, [pc, #104]	; (8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8004cb2:	4003      	ands	r3, r0
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cb8:	4819      	ldr	r0, [pc, #100]	; (8004d20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004cba:	4003      	ands	r3, r0
 8004cbc:	6908      	ldr	r0, [r1, #16]
 8004cbe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cc0:	4818      	ldr	r0, [pc, #96]	; (8004d24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004cc2:	4003      	ands	r3, r0
 8004cc4:	6948      	ldr	r0, [r1, #20]
 8004cc6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cc8:	4817      	ldr	r0, [pc, #92]	; (8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004cca:	4003      	ands	r3, r0
 8004ccc:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8004cce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cd0:	4816      	ldr	r0, [pc, #88]	; (8004d2c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004cd2:	4003      	ands	r3, r0
 8004cd4:	6988      	ldr	r0, [r1, #24]
 8004cd6:	0400      	lsls	r0, r0, #16
 8004cd8:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004cda:	4815      	ldr	r0, [pc, #84]	; (8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004cdc:	4282      	cmp	r2, r0
 8004cde:	d114      	bne.n	8004d0a <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ce0:	4814      	ldr	r0, [pc, #80]	; (8004d34 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004ce2:	4003      	ands	r3, r0
 8004ce4:	69c8      	ldr	r0, [r1, #28]
 8004ce6:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ce8:	4813      	ldr	r0, [pc, #76]	; (8004d38 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004cea:	4018      	ands	r0, r3
 8004cec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004cee:	051b      	lsls	r3, r3, #20
 8004cf0:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cf2:	4812      	ldr	r0, [pc, #72]	; (8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004cf4:	4003      	ands	r3, r0
 8004cf6:	6a08      	ldr	r0, [r1, #32]
 8004cf8:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cfa:	4811      	ldr	r0, [pc, #68]	; (8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004cfc:	4003      	ands	r3, r0
 8004cfe:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d02:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d04:	480f      	ldr	r0, [pc, #60]	; (8004d44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004d06:	4003      	ands	r3, r0
 8004d08:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004d0a:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8004d0c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004d0e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	fffffcff 	.word	0xfffffcff
 8004d18:	fffffbff 	.word	0xfffffbff
 8004d1c:	fffff7ff 	.word	0xfffff7ff
 8004d20:	ffffefff 	.word	0xffffefff
 8004d24:	ffffdfff 	.word	0xffffdfff
 8004d28:	ffffbfff 	.word	0xffffbfff
 8004d2c:	fff0ffff 	.word	0xfff0ffff
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	efffffff 	.word	0xefffffff
 8004d38:	ff0fffff 	.word	0xff0fffff
 8004d3c:	feffffff 	.word	0xfeffffff
 8004d40:	fdffffff 	.word	0xfdffffff
 8004d44:	dfffffff 	.word	0xdfffffff

08004d48 <HAL_TIMEx_CommutCallback>:
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIMEx_BreakCallback>:
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d4c:	4770      	bx	lr
	...

08004d50 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d50:	6803      	ldr	r3, [r0, #0]
 8004d52:	4907      	ldr	r1, [pc, #28]	; (8004d70 <UART_EndRxTransfer+0x20>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	4905      	ldr	r1, [pc, #20]	; (8004d74 <UART_EndRxTransfer+0x24>)
 8004d5e:	400a      	ands	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	0003      	movs	r3, r0
 8004d64:	2220      	movs	r2, #32
 8004d66:	3308      	adds	r3, #8
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8004d6e:	4770      	bx	lr
 8004d70:	fffffedf 	.word	0xfffffedf
 8004d74:	effffffe 	.word	0xeffffffe

08004d78 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d78:	1d03      	adds	r3, r0, #4
 8004d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8004d7c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d7e:	2b21      	cmp	r3, #33	; 0x21
 8004d80:	d10d      	bne.n	8004d9e <UART_TxISR_16BIT+0x26>
  {
    if (huart->TxXferCount == 0U)
 8004d82:	0001      	movs	r1, r0
 8004d84:	3156      	adds	r1, #86	; 0x56
 8004d86:	880a      	ldrh	r2, [r1, #0]
 8004d88:	6803      	ldr	r3, [r0, #0]
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	d108      	bne.n	8004da0 <UART_TxISR_16BIT+0x28>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	438a      	bics	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d9e:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004da0:	6d04      	ldr	r4, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004da2:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8004da4:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004da6:	05d2      	lsls	r2, r2, #23
 8004da8:	0dd2      	lsrs	r2, r2, #23
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004dac:	6504      	str	r4, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004dae:	880b      	ldrh	r3, [r1, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	800b      	strh	r3, [r1, #0]
}
 8004db6:	e7f2      	b.n	8004d9e <UART_TxISR_16BIT+0x26>

08004db8 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db8:	1d03      	adds	r3, r0, #4
 8004dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8004dbc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dbe:	2b21      	cmp	r3, #33	; 0x21
 8004dc0:	d113      	bne.n	8004dea <UART_TxISR_16BIT_FIFOEN+0x32>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004dc2:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8004dc4:	0004      	movs	r4, r0
        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004dc6:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004dc8:	336a      	adds	r3, #106	; 0x6a
 8004dca:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8004dcc:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d00b      	beq.n	8004dea <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8004dd2:	8821      	ldrh	r1, [r4, #0]
 8004dd4:	6803      	ldr	r3, [r0, #0]
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	d108      	bne.n	8004dec <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	490c      	ldr	r1, [pc, #48]	; (8004e10 <UART_TxISR_16BIT_FIFOEN+0x58>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	6819      	ldr	r1, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
      {
        /* Nothing to do */
      }
    }
  }
}
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004dec:	69d9      	ldr	r1, [r3, #28]
 8004dee:	4229      	tst	r1, r5
 8004df0:	d00a      	beq.n	8004e08 <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8004df2:	6d06      	ldr	r6, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004df4:	8831      	ldrh	r1, [r6, #0]
        huart->pTxBuffPtr += 2U;
 8004df6:	3602      	adds	r6, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004df8:	05c9      	lsls	r1, r1, #23
 8004dfa:	0dc9      	lsrs	r1, r1, #23
 8004dfc:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004dfe:	6506      	str	r6, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004e00:	8823      	ldrh	r3, [r4, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	b292      	uxth	r2, r2
 8004e0c:	e7df      	b.n	8004dce <UART_TxISR_16BIT_FIFOEN+0x16>
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	ff7fffff 	.word	0xff7fffff

08004e14 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e14:	1d03      	adds	r3, r0, #4
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8004e18:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e1a:	2b21      	cmp	r3, #33	; 0x21
 8004e1c:	d10d      	bne.n	8004e3a <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 8004e1e:	0001      	movs	r1, r0
 8004e20:	3156      	adds	r1, #86	; 0x56
 8004e22:	880a      	ldrh	r2, [r1, #0]
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d108      	bne.n	8004e3c <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	438a      	bics	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004e3e:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8004e40:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e42:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004e44:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004e46:	880b      	ldrh	r3, [r1, #0]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	800b      	strh	r3, [r1, #0]
}
 8004e4e:	e7f4      	b.n	8004e3a <UART_TxISR_8BIT+0x26>

08004e50 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e50:	1d03      	adds	r3, r0, #4
 8004e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8004e54:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e56:	2b21      	cmp	r3, #33	; 0x21
 8004e58:	d113      	bne.n	8004e82 <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e5a:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8004e5c:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004e5e:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e60:	336a      	adds	r3, #106	; 0x6a
 8004e62:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8004e64:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	d00b      	beq.n	8004e82 <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8004e6a:	8821      	ldrh	r1, [r4, #0]
 8004e6c:	6803      	ldr	r3, [r0, #0]
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d108      	bne.n	8004e84 <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	490b      	ldr	r1, [pc, #44]	; (8004ea4 <UART_TxISR_8BIT_FIFOEN+0x54>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e7a:	2240      	movs	r2, #64	; 0x40
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004e84:	69d9      	ldr	r1, [r3, #28]
 8004e86:	4229      	tst	r1, r5
 8004e88:	d008      	beq.n	8004e9c <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e8a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004e8c:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8004e8e:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e90:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004e92:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004e94:	8823      	ldrh	r3, [r4, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	e7e1      	b.n	8004e66 <UART_TxISR_8BIT_FIFOEN+0x16>
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	ff7fffff 	.word	0xff7fffff

08004ea8 <HAL_UART_Transmit_IT>:
{
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8004eaa:	1d06      	adds	r6, r0, #4
 8004eac:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8004eae:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004eb0:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb2:	2c20      	cmp	r4, #32
 8004eb4:	d137      	bne.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
      return HAL_ERROR;
 8004eb6:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d034      	beq.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	d032      	beq.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec0:	2480      	movs	r4, #128	; 0x80
 8004ec2:	689d      	ldr	r5, [r3, #8]
 8004ec4:	0164      	lsls	r4, r4, #5
 8004ec6:	42a5      	cmp	r5, r4
 8004ec8:	d104      	bne.n	8004ed4 <HAL_UART_Transmit_IT+0x2c>
 8004eca:	691c      	ldr	r4, [r3, #16]
 8004ecc:	2c00      	cmp	r4, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Transmit_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ed0:	4201      	tst	r1, r0
 8004ed2:	d128      	bne.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
    __HAL_LOCK(huart);
 8004ed4:	001c      	movs	r4, r3
 8004ed6:	347c      	adds	r4, #124	; 0x7c
 8004ed8:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8004eda:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004edc:	2f01      	cmp	r7, #1
 8004ede:	d022      	beq.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
 8004ee0:	3801      	subs	r0, #1
 8004ee2:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8004ee4:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	3154      	adds	r1, #84	; 0x54
 8004eea:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8004eec:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8004eee:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	3134      	adds	r1, #52	; 0x34
    huart->TxISR       = NULL;
 8004ef2:	671a      	str	r2, [r3, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	600a      	str	r2, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef6:	3221      	adds	r2, #33	; 0x21
 8004ef8:	67f2      	str	r2, [r6, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004efa:	2080      	movs	r0, #128	; 0x80
 8004efc:	2280      	movs	r2, #128	; 0x80
 8004efe:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004f00:	0580      	lsls	r0, r0, #22
 8004f02:	0152      	lsls	r2, r2, #5
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	4286      	cmp	r6, r0
 8004f08:	d110      	bne.n	8004f2c <HAL_UART_Transmit_IT+0x84>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0a:	4295      	cmp	r5, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_UART_Transmit_IT+0x80>
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_UART_Transmit_IT+0x80>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_UART_Transmit_IT+0xa4>)
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004f16:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f18:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8004f1a:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8004f22:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f24:	608b      	str	r3, [r1, #8]
}
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_UART_Transmit_IT+0xa8>)
 8004f2a:	e7f4      	b.n	8004f16 <HAL_UART_Transmit_IT+0x6e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2c:	4295      	cmp	r5, r2
 8004f2e:	d10b      	bne.n	8004f48 <HAL_UART_Transmit_IT+0xa0>
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d108      	bne.n	8004f48 <HAL_UART_Transmit_IT+0xa0>
        huart->TxISR = UART_TxISR_16BIT;
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <HAL_UART_Transmit_IT+0xac>)
        huart->TxISR = UART_TxISR_8BIT;
 8004f38:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f3a:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8004f3c:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f3e:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8004f40:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
 8004f46:	e7ee      	b.n	8004f26 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT;
 8004f48:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <HAL_UART_Transmit_IT+0xb0>)
 8004f4a:	e7f5      	b.n	8004f38 <HAL_UART_Transmit_IT+0x90>
 8004f4c:	08004db9 	.word	0x08004db9
 8004f50:	08004e51 	.word	0x08004e51
 8004f54:	08004d79 	.word	0x08004d79
 8004f58:	08004e15 	.word	0x08004e15

08004f5c <HAL_UART_Receive_IT>:
{
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f5e:	0006      	movs	r6, r0
 8004f60:	3608      	adds	r6, #8
 8004f62:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8004f64:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004f66:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f68:	2c20      	cmp	r4, #32
 8004f6a:	d151      	bne.n	8005010 <HAL_UART_Receive_IT+0xb4>
      return HAL_ERROR;
 8004f6c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d04e      	beq.n	8005010 <HAL_UART_Receive_IT+0xb4>
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	d04c      	beq.n	8005010 <HAL_UART_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f76:	2580      	movs	r5, #128	; 0x80
 8004f78:	689c      	ldr	r4, [r3, #8]
 8004f7a:	016d      	lsls	r5, r5, #5
 8004f7c:	42ac      	cmp	r4, r5
 8004f7e:	d104      	bne.n	8004f8a <HAL_UART_Receive_IT+0x2e>
 8004f80:	691d      	ldr	r5, [r3, #16]
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f86:	4201      	tst	r1, r0
 8004f88:	d142      	bne.n	8005010 <HAL_UART_Receive_IT+0xb4>
    __HAL_LOCK(huart);
 8004f8a:	001d      	movs	r5, r3
 8004f8c:	357c      	adds	r5, #124	; 0x7c
 8004f8e:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 8004f90:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004f92:	2f01      	cmp	r7, #1
 8004f94:	d03c      	beq.n	8005010 <HAL_UART_Receive_IT+0xb4>
 8004f96:	3801      	subs	r0, #1
 8004f98:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8004f9a:	6599      	str	r1, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004f9c:	0019      	movs	r1, r3
    huart->RxISR       = NULL;
 8004f9e:	2000      	movs	r0, #0
    UART_MASK_COMPUTATION(huart);
 8004fa0:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 8004fa2:	315c      	adds	r1, #92	; 0x5c
 8004fa4:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8004fa6:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8004fa8:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 8004faa:	66d8      	str	r0, [r3, #108]	; 0x6c
 8004fac:	3104      	adds	r1, #4
    UART_MASK_COMPUTATION(huart);
 8004fae:	42bc      	cmp	r4, r7
 8004fb0:	d131      	bne.n	8005016 <HAL_UART_Receive_IT+0xba>
 8004fb2:	6918      	ldr	r0, [r3, #16]
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d12c      	bne.n	8005012 <HAL_UART_Receive_IT+0xb6>
 8004fb8:	4828      	ldr	r0, [pc, #160]	; (800505c <HAL_UART_Receive_IT+0x100>)
 8004fba:	8008      	strh	r0, [r1, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	3188      	adds	r1, #136	; 0x88
 8004fc2:	6008      	str	r0, [r1, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc4:	2122      	movs	r1, #34	; 0x22
 8004fc6:	67f1      	str	r1, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	3001      	adds	r0, #1
 8004fcc:	688e      	ldr	r6, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004fce:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	4330      	orrs	r0, r6
 8004fd2:	6088      	str	r0, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004fd4:	2680      	movs	r6, #128	; 0x80
 8004fd6:	2080      	movs	r0, #128	; 0x80
 8004fd8:	05b6      	lsls	r6, r6, #22
 8004fda:	0140      	lsls	r0, r0, #5
 8004fdc:	42b7      	cmp	r7, r6
 8004fde:	d12c      	bne.n	800503a <HAL_UART_Receive_IT+0xde>
 8004fe0:	001e      	movs	r6, r3
 8004fe2:	3668      	adds	r6, #104	; 0x68
 8004fe4:	8836      	ldrh	r6, [r6, #0]
 8004fe6:	4296      	cmp	r6, r2
 8004fe8:	d827      	bhi.n	800503a <HAL_UART_Receive_IT+0xde>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fea:	4284      	cmp	r4, r0
 8004fec:	d123      	bne.n	8005036 <HAL_UART_Receive_IT+0xda>
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d120      	bne.n	8005036 <HAL_UART_Receive_IT+0xda>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_UART_Receive_IT+0x104>)
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ff6:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff8:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8004ffa:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffc:	680a      	ldr	r2, [r1, #0]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8005002:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005004:	600b      	str	r3, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	688a      	ldr	r2, [r1, #8]
 800500a:	055b      	lsls	r3, r3, #21
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
}
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8005012:	20ff      	movs	r0, #255	; 0xff
 8005014:	e7d1      	b.n	8004fba <HAL_UART_Receive_IT+0x5e>
 8005016:	2c00      	cmp	r4, #0
 8005018:	d104      	bne.n	8005024 <HAL_UART_Receive_IT+0xc8>
 800501a:	6918      	ldr	r0, [r3, #16]
 800501c:	2800      	cmp	r0, #0
 800501e:	d0f8      	beq.n	8005012 <HAL_UART_Receive_IT+0xb6>
 8005020:	207f      	movs	r0, #127	; 0x7f
 8005022:	e7ca      	b.n	8004fba <HAL_UART_Receive_IT+0x5e>
 8005024:	2780      	movs	r7, #128	; 0x80
 8005026:	057f      	lsls	r7, r7, #21
 8005028:	42bc      	cmp	r4, r7
 800502a:	d1c6      	bne.n	8004fba <HAL_UART_Receive_IT+0x5e>
 800502c:	6918      	ldr	r0, [r3, #16]
 800502e:	2800      	cmp	r0, #0
 8005030:	d0f6      	beq.n	8005020 <HAL_UART_Receive_IT+0xc4>
 8005032:	203f      	movs	r0, #63	; 0x3f
 8005034:	e7c1      	b.n	8004fba <HAL_UART_Receive_IT+0x5e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005036:	4a0b      	ldr	r2, [pc, #44]	; (8005064 <HAL_UART_Receive_IT+0x108>)
 8005038:	e7dd      	b.n	8004ff6 <HAL_UART_Receive_IT+0x9a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	4284      	cmp	r4, r0
 800503c:	d10c      	bne.n	8005058 <HAL_UART_Receive_IT+0xfc>
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	2a00      	cmp	r2, #0
 8005042:	d109      	bne.n	8005058 <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_16BIT;
 8005044:	4a08      	ldr	r2, [pc, #32]	; (8005068 <HAL_UART_Receive_IT+0x10c>)
        huart->RxISR = UART_RxISR_8BIT;
 8005046:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005048:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800504a:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800504c:	680a      	ldr	r2, [r1, #0]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8005052:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005054:	600b      	str	r3, [r1, #0]
 8005056:	e7db      	b.n	8005010 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_UART_Receive_IT+0x110>)
 800505a:	e7f4      	b.n	8005046 <HAL_UART_Receive_IT+0xea>
 800505c:	000001ff 	.word	0x000001ff
 8005060:	080051e1 	.word	0x080051e1
 8005064:	08005135 	.word	0x08005135
 8005068:	080050d5 	.word	0x080050d5
 800506c:	08005071 	.word	0x08005071

08005070 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005070:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005072:	0004      	movs	r4, r0
 8005074:	3408      	adds	r4, #8
 8005076:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005078:	6803      	ldr	r3, [r0, #0]
 800507a:	2a22      	cmp	r2, #34	; 0x22
 800507c:	d123      	bne.n	80050c6 <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800507e:	0002      	movs	r2, r0
 8005080:	3260      	adds	r2, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	4013      	ands	r3, r2
 8005088:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800508a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800508c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800508e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005090:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8005092:	3301      	adds	r3, #1
 8005094:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005096:	8813      	ldrh	r3, [r2, #0]
 8005098:	3b01      	subs	r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800509e:	8813      	ldrh	r3, [r2, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10e      	bne.n	80050c4 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a6:	6802      	ldr	r2, [r0, #0]
 80050a8:	4d09      	ldr	r5, [pc, #36]	; (80050d0 <UART_RxISR_8BIT+0x60>)
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	4029      	ands	r1, r5
 80050ae:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	6891      	ldr	r1, [r2, #8]
 80050b2:	3523      	adds	r5, #35	; 0x23
 80050b4:	35ff      	adds	r5, #255	; 0xff
 80050b6:	43a9      	bics	r1, r5
 80050b8:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ba:	2220      	movs	r2, #32
 80050bc:	67e2      	str	r2, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050be:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050c0:	f002 f8f4 	bl	80072ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050c6:	2208      	movs	r2, #8
 80050c8:	6999      	ldr	r1, [r3, #24]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	619a      	str	r2, [r3, #24]
}
 80050ce:	e7f9      	b.n	80050c4 <UART_RxISR_8BIT+0x54>
 80050d0:	fffffedf 	.word	0xfffffedf

080050d4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d4:	0001      	movs	r1, r0
 80050d6:	3108      	adds	r1, #8
 80050d8:	6fca      	ldr	r2, [r1, #124]	; 0x7c
{
 80050da:	b570      	push	{r4, r5, r6, lr}
 80050dc:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050de:	2a22      	cmp	r2, #34	; 0x22
 80050e0:	d121      	bne.n	8005126 <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 80050e2:	0005      	movs	r5, r0
 80050e4:	3560      	adds	r5, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80050e8:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050ea:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80050ec:	402c      	ands	r4, r5
 80050ee:	8014      	strh	r4, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80050f0:	0004      	movs	r4, r0
    huart->pRxBuffPtr += 2U;
 80050f2:	3202      	adds	r2, #2
 80050f4:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80050f6:	345e      	adds	r4, #94	; 0x5e
 80050f8:	8822      	ldrh	r2, [r4, #0]
 80050fa:	3a01      	subs	r2, #1
 80050fc:	b292      	uxth	r2, r2
 80050fe:	8022      	strh	r2, [r4, #0]

    if (huart->RxXferCount == 0U)
 8005100:	8822      	ldrh	r2, [r4, #0]
 8005102:	b292      	uxth	r2, r2
 8005104:	2a00      	cmp	r2, #0
 8005106:	d10d      	bne.n	8005124 <UART_RxISR_16BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005108:	681c      	ldr	r4, [r3, #0]
 800510a:	4d09      	ldr	r5, [pc, #36]	; (8005130 <UART_RxISR_16BIT+0x5c>)
 800510c:	402c      	ands	r4, r5
 800510e:	601c      	str	r4, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005110:	689c      	ldr	r4, [r3, #8]
 8005112:	3523      	adds	r5, #35	; 0x23
 8005114:	35ff      	adds	r5, #255	; 0xff
 8005116:	43ac      	bics	r4, r5
 8005118:	609c      	str	r4, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511a:	2320      	movs	r3, #32
 800511c:	67cb      	str	r3, [r1, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800511e:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005120:	f002 f8c4 	bl	80072ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005124:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005126:	2208      	movs	r2, #8
 8005128:	6999      	ldr	r1, [r3, #24]
 800512a:	430a      	orrs	r2, r1
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	e7f9      	b.n	8005124 <UART_RxISR_16BIT+0x50>
 8005130:	fffffedf 	.word	0xfffffedf

08005134 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005136:	0007      	movs	r7, r0
 8005138:	3708      	adds	r7, #8
 800513a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 800513c:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800513e:	2b22      	cmp	r3, #34	; 0x22
 8005140:	d140      	bne.n	80051c4 <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8005142:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005144:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 8005146:	3360      	adds	r3, #96	; 0x60
 8005148:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800514a:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 800514c:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800514e:	8835      	ldrh	r5, [r6, #0]
 8005150:	0022      	movs	r2, r4
 8005152:	325e      	adds	r2, #94	; 0x5e
 8005154:	2d00      	cmp	r5, #0
 8005156:	d112      	bne.n	800517e <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005158:	8813      	ldrh	r3, [r2, #0]
 800515a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <UART_RxISR_8BIT_FIFOEN+0x48>
 8005160:	8832      	ldrh	r2, [r6, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d90a      	bls.n	800517c <UART_RxISR_8BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	4919      	ldr	r1, [pc, #100]	; (80051d0 <UART_RxISR_8BIT_FIFOEN+0x9c>)
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	400a      	ands	r2, r1
 800516e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <UART_RxISR_8BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005172:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8005174:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005176:	2220      	movs	r2, #32
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800517c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800517e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005180:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005184:	400b      	ands	r3, r1
 8005186:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005188:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 800518a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800518c:	3301      	adds	r3, #1
 800518e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005190:	8813      	ldrh	r3, [r2, #0]
 8005192:	3b01      	subs	r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
      if (huart->RxXferCount == 0U)
 8005198:	8813      	ldrh	r3, [r2, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10e      	bne.n	80051be <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	480d      	ldr	r0, [pc, #52]	; (80051d8 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	4001      	ands	r1, r0
 80051a8:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051aa:	6891      	ldr	r1, [r2, #8]
 80051ac:	480b      	ldr	r0, [pc, #44]	; (80051dc <UART_RxISR_8BIT_FIFOEN+0xa8>)
 80051ae:	4001      	ands	r1, r0
 80051b0:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80051b2:	2220      	movs	r2, #32
        HAL_UART_RxCpltCallback(huart);
 80051b4:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80051b6:	67fa      	str	r2, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 80051b8:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80051ba:	f002 f877 	bl	80072ac <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80051be:	3d01      	subs	r5, #1
 80051c0:	b2ad      	uxth	r5, r5
 80051c2:	e7c5      	b.n	8005150 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c4:	2308      	movs	r3, #8
 80051c6:	6802      	ldr	r2, [r0, #0]
 80051c8:	6991      	ldr	r1, [r2, #24]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6193      	str	r3, [r2, #24]
}
 80051ce:	e7d5      	b.n	800517c <UART_RxISR_8BIT_FIFOEN+0x48>
 80051d0:	efffffff 	.word	0xefffffff
 80051d4:	08005071 	.word	0x08005071
 80051d8:	fffffeff 	.word	0xfffffeff
 80051dc:	effffffe 	.word	0xeffffffe

080051e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e2:	0007      	movs	r7, r0
 80051e4:	3708      	adds	r7, #8
 80051e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 80051e8:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ea:	2b22      	cmp	r3, #34	; 0x22
 80051ec:	d140      	bne.n	8005270 <UART_RxISR_16BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 80051ee:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80051f0:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 80051f2:	3360      	adds	r3, #96	; 0x60
 80051f4:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80051f6:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 80051f8:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80051fa:	8835      	ldrh	r5, [r6, #0]
 80051fc:	0021      	movs	r1, r4
 80051fe:	315e      	adds	r1, #94	; 0x5e
 8005200:	2d00      	cmp	r5, #0
 8005202:	d112      	bne.n	800522a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005204:	880b      	ldrh	r3, [r1, #0]
 8005206:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <UART_RxISR_16BIT_FIFOEN+0x48>
 800520c:	8832      	ldrh	r2, [r6, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d90a      	bls.n	8005228 <UART_RxISR_16BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	4919      	ldr	r1, [pc, #100]	; (800527c <UART_RxISR_16BIT_FIFOEN+0x9c>)
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	400a      	ands	r2, r1
 800521a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800521c:	4a18      	ldr	r2, [pc, #96]	; (8005280 <UART_RxISR_16BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800521e:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8005220:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005222:	2220      	movs	r2, #32
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005228:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800522a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800522c:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800522e:	4694      	mov	ip, r2
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005230:	6a58      	ldr	r0, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8005232:	9a01      	ldr	r2, [sp, #4]
 8005234:	4010      	ands	r0, r2
 8005236:	4662      	mov	r2, ip
 8005238:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800523a:	3202      	adds	r2, #2
 800523c:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800523e:	880a      	ldrh	r2, [r1, #0]
 8005240:	3a01      	subs	r2, #1
 8005242:	b292      	uxth	r2, r2
 8005244:	800a      	strh	r2, [r1, #0]
      if (huart->RxXferCount == 0U)
 8005246:	880a      	ldrh	r2, [r1, #0]
 8005248:	b292      	uxth	r2, r2
 800524a:	2a00      	cmp	r2, #0
 800524c:	d10d      	bne.n	800526a <UART_RxISR_16BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	480c      	ldr	r0, [pc, #48]	; (8005284 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 8005252:	4001      	ands	r1, r0
 8005254:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	480b      	ldr	r0, [pc, #44]	; (8005288 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 800525a:	4001      	ands	r1, r0
 800525c:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800525e:	2320      	movs	r3, #32
        HAL_UART_RxCpltCallback(huart);
 8005260:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8005262:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 8005264:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8005266:	f002 f821 	bl	80072ac <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800526a:	3d01      	subs	r5, #1
 800526c:	b2ad      	uxth	r5, r5
 800526e:	e7c5      	b.n	80051fc <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005270:	2308      	movs	r3, #8
 8005272:	6802      	ldr	r2, [r0, #0]
 8005274:	6991      	ldr	r1, [r2, #24]
 8005276:	430b      	orrs	r3, r1
 8005278:	6193      	str	r3, [r2, #24]
}
 800527a:	e7d5      	b.n	8005228 <UART_RxISR_16BIT_FIFOEN+0x48>
 800527c:	efffffff 	.word	0xefffffff
 8005280:	080050d5 	.word	0x080050d5
 8005284:	fffffeff 	.word	0xfffffeff
 8005288:	effffffe 	.word	0xeffffffe

0800528c <HAL_UART_ErrorCallback>:
 800528c:	4770      	bx	lr
	...

08005290 <HAL_UART_IRQHandler>:
{
 8005290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005292:	6802      	ldr	r2, [r0, #0]
{
 8005294:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005296:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005298:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800529a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800529c:	071d      	lsls	r5, r3, #28
 800529e:	d10d      	bne.n	80052bc <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052a0:	2520      	movs	r5, #32
 80052a2:	422b      	tst	r3, r5
 80052a4:	d100      	bne.n	80052a8 <HAL_UART_IRQHandler+0x18>
 80052a6:	e080      	b.n	80053aa <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052a8:	4229      	tst	r1, r5
 80052aa:	d102      	bne.n	80052b2 <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052ac:	00c5      	lsls	r5, r0, #3
 80052ae:	d400      	bmi.n	80052b2 <HAL_UART_IRQHandler+0x22>
 80052b0:	e07b      	b.n	80053aa <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 80052b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      huart->TxISR(huart);
 80052b4:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d16d      	bne.n	8005396 <HAL_UART_IRQHandler+0x106>
 80052ba:	e06d      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052bc:	4d55      	ldr	r5, [pc, #340]	; (8005414 <HAL_UART_IRQHandler+0x184>)
 80052be:	4005      	ands	r5, r0
 80052c0:	9500      	str	r5, [sp, #0]
 80052c2:	d104      	bne.n	80052ce <HAL_UART_IRQHandler+0x3e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80052c4:	3521      	adds	r5, #33	; 0x21
 80052c6:	35ff      	adds	r5, #255	; 0xff
 80052c8:	4229      	tst	r1, r5
 80052ca:	d100      	bne.n	80052ce <HAL_UART_IRQHandler+0x3e>
 80052cc:	e06d      	b.n	80053aa <HAL_UART_IRQHandler+0x11a>
 80052ce:	0025      	movs	r5, r4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d0:	2601      	movs	r6, #1
 80052d2:	3588      	adds	r5, #136	; 0x88
 80052d4:	4233      	tst	r3, r6
 80052d6:	d005      	beq.n	80052e4 <HAL_UART_IRQHandler+0x54>
 80052d8:	05cf      	lsls	r7, r1, #23
 80052da:	d503      	bpl.n	80052e4 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052dc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052de:	682f      	ldr	r7, [r5, #0]
 80052e0:	433e      	orrs	r6, r7
 80052e2:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e4:	2602      	movs	r6, #2
 80052e6:	4233      	tst	r3, r6
 80052e8:	d00c      	beq.n	8005304 <HAL_UART_IRQHandler+0x74>
 80052ea:	07c7      	lsls	r7, r0, #31
 80052ec:	d50a      	bpl.n	8005304 <HAL_UART_IRQHandler+0x74>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ee:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052f0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f2:	3788      	adds	r7, #136	; 0x88
 80052f4:	683e      	ldr	r6, [r7, #0]
 80052f6:	9701      	str	r7, [sp, #4]
 80052f8:	46b4      	mov	ip, r6
 80052fa:	2604      	movs	r6, #4
 80052fc:	4667      	mov	r7, ip
 80052fe:	433e      	orrs	r6, r7
 8005300:	9f01      	ldr	r7, [sp, #4]
 8005302:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	2604      	movs	r6, #4
 8005306:	4233      	tst	r3, r6
 8005308:	d00c      	beq.n	8005324 <HAL_UART_IRQHandler+0x94>
 800530a:	07c7      	lsls	r7, r0, #31
 800530c:	d50a      	bpl.n	8005324 <HAL_UART_IRQHandler+0x94>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530e:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005310:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005312:	3788      	adds	r7, #136	; 0x88
 8005314:	683e      	ldr	r6, [r7, #0]
 8005316:	9701      	str	r7, [sp, #4]
 8005318:	46b4      	mov	ip, r6
 800531a:	2602      	movs	r6, #2
 800531c:	4667      	mov	r7, ip
 800531e:	433e      	orrs	r6, r7
 8005320:	9f01      	ldr	r7, [sp, #4]
 8005322:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005324:	071e      	lsls	r6, r3, #28
 8005326:	d509      	bpl.n	800533c <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005328:	068e      	lsls	r6, r1, #26
 800532a:	d402      	bmi.n	8005332 <HAL_UART_IRQHandler+0xa2>
 800532c:	9e00      	ldr	r6, [sp, #0]
 800532e:	2e00      	cmp	r6, #0
 8005330:	d004      	beq.n	800533c <HAL_UART_IRQHandler+0xac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005332:	2608      	movs	r6, #8
 8005334:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005336:	682a      	ldr	r2, [r5, #0]
 8005338:	4316      	orrs	r6, r2
 800533a:	602e      	str	r6, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533c:	682a      	ldr	r2, [r5, #0]
 800533e:	2a00      	cmp	r2, #0
 8005340:	d02a      	beq.n	8005398 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005342:	2220      	movs	r2, #32
 8005344:	4213      	tst	r3, r2
 8005346:	d008      	beq.n	800535a <HAL_UART_IRQHandler+0xca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005348:	4211      	tst	r1, r2
 800534a:	d101      	bne.n	8005350 <HAL_UART_IRQHandler+0xc0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800534c:	00c3      	lsls	r3, r0, #3
 800534e:	d504      	bpl.n	800535a <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8005350:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8005356:	0020      	movs	r0, r4
 8005358:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800535c:	682e      	ldr	r6, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535e:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8005360:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005362:	065b      	lsls	r3, r3, #25
 8005364:	d402      	bmi.n	800536c <HAL_UART_IRQHandler+0xdc>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005366:	2308      	movs	r3, #8
 8005368:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800536a:	d01a      	beq.n	80053a2 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 800536c:	f7ff fcf0 	bl	8004d50 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	420a      	tst	r2, r1
 8005378:	d00f      	beq.n	800539a <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800537c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537e:	438a      	bics	r2, r1
 8005380:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005382:	2800      	cmp	r0, #0
 8005384:	d009      	beq.n	800539a <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_UART_IRQHandler+0x188>)
 8005388:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538a:	f7fd fc7d 	bl	8002c88 <HAL_DMA_Abort_IT>
 800538e:	2800      	cmp	r0, #0
 8005390:	d002      	beq.n	8005398 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005392:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005394:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005396:	4798      	blx	r3
}
 8005398:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800539a:	0020      	movs	r0, r4
 800539c:	f7ff ff76 	bl	800528c <HAL_UART_ErrorCallback>
 80053a0:	e7fa      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 80053a2:	f7ff ff73 	bl	800528c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	602e      	str	r6, [r5, #0]
 80053a8:	e7f6      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053aa:	2580      	movs	r5, #128	; 0x80
 80053ac:	036d      	lsls	r5, r5, #13
 80053ae:	422b      	tst	r3, r5
 80053b0:	d006      	beq.n	80053c0 <HAL_UART_IRQHandler+0x130>
 80053b2:	0246      	lsls	r6, r0, #9
 80053b4:	d504      	bpl.n	80053c0 <HAL_UART_IRQHandler+0x130>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053b6:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80053b8:	0020      	movs	r0, r4
 80053ba:	f000 fd95 	bl	8005ee8 <HAL_UARTEx_WakeupCallback>
    return;
 80053be:	e7eb      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053c0:	2580      	movs	r5, #128	; 0x80
 80053c2:	422b      	tst	r3, r5
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0x142>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053c6:	4229      	tst	r1, r5
 80053c8:	d101      	bne.n	80053ce <HAL_UART_IRQHandler+0x13e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053ca:	0200      	lsls	r0, r0, #8
 80053cc:	d501      	bpl.n	80053d2 <HAL_UART_IRQHandler+0x142>
    if (huart->TxISR != NULL)
 80053ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80053d0:	e770      	b.n	80052b4 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053d2:	2040      	movs	r0, #64	; 0x40
 80053d4:	4203      	tst	r3, r0
 80053d6:	d00d      	beq.n	80053f4 <HAL_UART_IRQHandler+0x164>
 80053d8:	4201      	tst	r1, r0
 80053da:	d00b      	beq.n	80053f4 <HAL_UART_IRQHandler+0x164>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	4383      	bics	r3, r0
 80053e0:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	2220      	movs	r2, #32
 80053e4:	1d23      	adds	r3, r4, #4
 80053e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->TxISR = NULL;
 80053e8:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 80053ea:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80053ec:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80053ee:	f002 f801 	bl	80073f4 <HAL_UART_TxCpltCallback>
 80053f2:	e7d1      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	d505      	bpl.n	8005404 <HAL_UART_IRQHandler+0x174>
 80053f8:	004a      	lsls	r2, r1, #1
 80053fa:	d503      	bpl.n	8005404 <HAL_UART_IRQHandler+0x174>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053fc:	0020      	movs	r0, r4
 80053fe:	f000 fd75 	bl	8005eec <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005402:	e7c9      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	d5c7      	bpl.n	8005398 <HAL_UART_IRQHandler+0x108>
 8005408:	2900      	cmp	r1, #0
 800540a:	dac5      	bge.n	8005398 <HAL_UART_IRQHandler+0x108>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800540c:	0020      	movs	r0, r4
 800540e:	f000 fd6c 	bl	8005eea <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005412:	e7c1      	b.n	8005398 <HAL_UART_IRQHandler+0x108>
 8005414:	10000001 	.word	0x10000001
 8005418:	0800541d 	.word	0x0800541d

0800541c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800541c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	0002      	movs	r2, r0
{
 8005422:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005424:	325e      	adds	r2, #94	; 0x5e
 8005426:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005428:	3a08      	subs	r2, #8
 800542a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800542c:	f7ff ff2e 	bl	800528c <HAL_UART_ErrorCallback>
}
 8005430:	bd10      	pop	{r4, pc}
	...

08005434 <UART_SetConfig>:
{
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005438:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800543a:	69c1      	ldr	r1, [r0, #28]
 800543c:	6883      	ldr	r3, [r0, #8]
 800543e:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005440:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005442:	4303      	orrs	r3, r0
 8005444:	6960      	ldr	r0, [r4, #20]
 8005446:	4303      	orrs	r3, r0
 8005448:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800544c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544e:	4da4      	ldr	r5, [pc, #656]	; (80056e0 <UART_SetConfig+0x2ac>)
 8005450:	4028      	ands	r0, r5
 8005452:	4303      	orrs	r3, r0
 8005454:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005456:	6853      	ldr	r3, [r2, #4]
 8005458:	48a2      	ldr	r0, [pc, #648]	; (80056e4 <UART_SetConfig+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800545a:	4da3      	ldr	r5, [pc, #652]	; (80056e8 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545c:	4003      	ands	r3, r0
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	4303      	orrs	r3, r0
 8005462:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005464:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005466:	42aa      	cmp	r2, r5
 8005468:	d001      	beq.n	800546e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800546a:	6a23      	ldr	r3, [r4, #32]
 800546c:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800546e:	6893      	ldr	r3, [r2, #8]
 8005470:	4e9e      	ldr	r6, [pc, #632]	; (80056ec <UART_SetConfig+0x2b8>)
 8005472:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005474:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005476:	4303      	orrs	r3, r0
 8005478:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800547a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800547c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547e:	43b0      	bics	r0, r6
 8005480:	4318      	orrs	r0, r3
 8005482:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005484:	489a      	ldr	r0, [pc, #616]	; (80056f0 <UART_SetConfig+0x2bc>)
 8005486:	4282      	cmp	r2, r0
 8005488:	d117      	bne.n	80054ba <UART_SetConfig+0x86>
 800548a:	2003      	movs	r0, #3
 800548c:	4a99      	ldr	r2, [pc, #612]	; (80056f4 <UART_SetConfig+0x2c0>)
 800548e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005490:	4002      	ands	r2, r0
 8005492:	4899      	ldr	r0, [pc, #612]	; (80056f8 <UART_SetConfig+0x2c4>)
 8005494:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	0212      	lsls	r2, r2, #8
 800549a:	4291      	cmp	r1, r2
 800549c:	d000      	beq.n	80054a0 <UART_SetConfig+0x6c>
 800549e:	e289      	b.n	80059b4 <UART_SetConfig+0x580>
    switch (clocksource)
 80054a0:	2808      	cmp	r0, #8
 80054a2:	d82b      	bhi.n	80054fc <UART_SetConfig+0xc8>
 80054a4:	f7fa fe4a 	bl	800013c <__gnu_thumb1_case_uhi>
 80054a8:	002a037d 	.word	0x002a037d
 80054ac:	002a021a 	.word	0x002a021a
 80054b0:	002a024e 	.word	0x002a024e
 80054b4:	002a002a 	.word	0x002a002a
 80054b8:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ba:	4890      	ldr	r0, [pc, #576]	; (80056fc <UART_SetConfig+0x2c8>)
 80054bc:	4282      	cmp	r2, r0
 80054be:	d105      	bne.n	80054cc <UART_SetConfig+0x98>
 80054c0:	200c      	movs	r0, #12
 80054c2:	4a8c      	ldr	r2, [pc, #560]	; (80056f4 <UART_SetConfig+0x2c0>)
 80054c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80054c6:	4002      	ands	r2, r0
 80054c8:	488d      	ldr	r0, [pc, #564]	; (8005700 <UART_SetConfig+0x2cc>)
 80054ca:	e7e3      	b.n	8005494 <UART_SetConfig+0x60>
 80054cc:	488d      	ldr	r0, [pc, #564]	; (8005704 <UART_SetConfig+0x2d0>)
 80054ce:	4282      	cmp	r2, r0
 80054d0:	d100      	bne.n	80054d4 <UART_SetConfig+0xa0>
 80054d2:	e361      	b.n	8005b98 <UART_SetConfig+0x764>
 80054d4:	488c      	ldr	r0, [pc, #560]	; (8005708 <UART_SetConfig+0x2d4>)
 80054d6:	4282      	cmp	r2, r0
 80054d8:	d100      	bne.n	80054dc <UART_SetConfig+0xa8>
 80054da:	e35d      	b.n	8005b98 <UART_SetConfig+0x764>
 80054dc:	2010      	movs	r0, #16
 80054de:	42aa      	cmp	r2, r5
 80054e0:	d1d9      	bne.n	8005496 <UART_SetConfig+0x62>
 80054e2:	21c0      	movs	r1, #192	; 0xc0
 80054e4:	2080      	movs	r0, #128	; 0x80
 80054e6:	4a83      	ldr	r2, [pc, #524]	; (80056f4 <UART_SetConfig+0x2c0>)
 80054e8:	0109      	lsls	r1, r1, #4
 80054ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80054ec:	00c0      	lsls	r0, r0, #3
 80054ee:	400a      	ands	r2, r1
 80054f0:	4282      	cmp	r2, r0
 80054f2:	d100      	bne.n	80054f6 <UART_SetConfig+0xc2>
 80054f4:	e09c      	b.n	8005630 <UART_SetConfig+0x1fc>
 80054f6:	d80d      	bhi.n	8005514 <UART_SetConfig+0xe0>
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	d04e      	beq.n	800559a <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 80054fc:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80054fe:	0021      	movs	r1, r4
 8005500:	2301      	movs	r3, #1
 8005502:	316a      	adds	r1, #106	; 0x6a
 8005504:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 8005506:	3902      	subs	r1, #2
 8005508:	800b      	strh	r3, [r1, #0]
  huart->RxISR = NULL;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 800550e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8005510:	6723      	str	r3, [r4, #112]	; 0x70
}
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005514:	2080      	movs	r0, #128	; 0x80
 8005516:	0100      	lsls	r0, r0, #4
 8005518:	4282      	cmp	r2, r0
 800551a:	d06e      	beq.n	80055fa <UART_SetConfig+0x1c6>
 800551c:	428a      	cmp	r2, r1
 800551e:	d1ed      	bne.n	80054fc <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005520:	2b00      	cmp	r3, #0
 8005522:	d100      	bne.n	8005526 <UART_SetConfig+0xf2>
 8005524:	e0c7      	b.n	80056b6 <UART_SetConfig+0x282>
 8005526:	2b01      	cmp	r3, #1
 8005528:	d100      	bne.n	800552c <UART_SetConfig+0xf8>
 800552a:	e0c7      	b.n	80056bc <UART_SetConfig+0x288>
 800552c:	2b02      	cmp	r3, #2
 800552e:	d100      	bne.n	8005532 <UART_SetConfig+0xfe>
 8005530:	e0c8      	b.n	80056c4 <UART_SetConfig+0x290>
 8005532:	2b03      	cmp	r3, #3
 8005534:	d100      	bne.n	8005538 <UART_SetConfig+0x104>
 8005536:	e0c8      	b.n	80056ca <UART_SetConfig+0x296>
 8005538:	2b04      	cmp	r3, #4
 800553a:	d100      	bne.n	800553e <UART_SetConfig+0x10a>
 800553c:	e0c7      	b.n	80056ce <UART_SetConfig+0x29a>
 800553e:	2b05      	cmp	r3, #5
 8005540:	d100      	bne.n	8005544 <UART_SetConfig+0x110>
 8005542:	e0c7      	b.n	80056d4 <UART_SetConfig+0x2a0>
 8005544:	2b06      	cmp	r3, #6
 8005546:	d100      	bne.n	800554a <UART_SetConfig+0x116>
 8005548:	e0c6      	b.n	80056d8 <UART_SetConfig+0x2a4>
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	2b07      	cmp	r3, #7
 800554e:	d100      	bne.n	8005552 <UART_SetConfig+0x11e>
 8005550:	e0c4      	b.n	80056dc <UART_SetConfig+0x2a8>
 8005552:	2b08      	cmp	r3, #8
 8005554:	d100      	bne.n	8005558 <UART_SetConfig+0x124>
 8005556:	e0f7      	b.n	8005748 <UART_SetConfig+0x314>
 8005558:	2b09      	cmp	r3, #9
 800555a:	d100      	bne.n	800555e <UART_SetConfig+0x12a>
 800555c:	e0f6      	b.n	800574c <UART_SetConfig+0x318>
 800555e:	2b0a      	cmp	r3, #10
 8005560:	d100      	bne.n	8005564 <UART_SetConfig+0x130>
 8005562:	e0f5      	b.n	8005750 <UART_SetConfig+0x31c>
 8005564:	2b0b      	cmp	r3, #11
 8005566:	d000      	beq.n	800556a <UART_SetConfig+0x136>
 8005568:	e0a6      	b.n	80056b8 <UART_SetConfig+0x284>
 800556a:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800556c:	2003      	movs	r0, #3
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	4350      	muls	r0, r2
 8005572:	4288      	cmp	r0, r1
 8005574:	d8c2      	bhi.n	80054fc <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005576:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005578:	4288      	cmp	r0, r1
 800557a:	d3bf      	bcc.n	80054fc <UART_SetConfig+0xc8>
        switch (clocksource)
 800557c:	2b08      	cmp	r3, #8
 800557e:	d900      	bls.n	8005582 <UART_SetConfig+0x14e>
 8005580:	e1a9      	b.n	80058d6 <UART_SetConfig+0x4a2>
 8005582:	0018      	movs	r0, r3
 8005584:	f7fa fdda 	bl	800013c <__gnu_thumb1_case_uhi>
 8005588:	01a700e6 	.word	0x01a700e6
 800558c:	01a70138 	.word	0x01a70138
 8005590:	01a7016e 	.word	0x01a7016e
 8005594:	01a701a7 	.word	0x01a701a7
 8005598:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800559a:	f7fe fee1 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
 800559e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a0:	2101      	movs	r1, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d021      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055a6:	1849      	adds	r1, r1, r1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d01e      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055ac:	3102      	adds	r1, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d01b      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055b2:	3102      	adds	r1, #2
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d018      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055b8:	3102      	adds	r1, #2
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d015      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055be:	3102      	adds	r1, #2
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	d012      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055c4:	3102      	adds	r1, #2
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d00f      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055ca:	3104      	adds	r1, #4
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	d00c      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055d0:	3110      	adds	r1, #16
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d009      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055d6:	3120      	adds	r1, #32
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d006      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055dc:	3140      	adds	r1, #64	; 0x40
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d003      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055e2:	397f      	subs	r1, #127	; 0x7f
 80055e4:	2b0b      	cmp	r3, #11
 80055e6:	d100      	bne.n	80055ea <UART_SetConfig+0x1b6>
 80055e8:	31ff      	adds	r1, #255	; 0xff
 80055ea:	f7fa fdb1 	bl	8000150 <__udivsi3>
        break;
 80055ee:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055f0:	0001      	movs	r1, r0
 80055f2:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 80055f4:	4291      	cmp	r1, r2
 80055f6:	d1b9      	bne.n	800556c <UART_SetConfig+0x138>
 80055f8:	e781      	b.n	80054fe <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d059      	beq.n	80056b2 <UART_SetConfig+0x27e>
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d043      	beq.n	800568a <UART_SetConfig+0x256>
 8005602:	2b02      	cmp	r3, #2
 8005604:	d043      	beq.n	800568e <UART_SetConfig+0x25a>
 8005606:	2b03      	cmp	r3, #3
 8005608:	d043      	beq.n	8005692 <UART_SetConfig+0x25e>
 800560a:	2b04      	cmp	r3, #4
 800560c:	d043      	beq.n	8005696 <UART_SetConfig+0x262>
 800560e:	2b05      	cmp	r3, #5
 8005610:	d043      	beq.n	800569a <UART_SetConfig+0x266>
 8005612:	2b06      	cmp	r3, #6
 8005614:	d043      	beq.n	800569e <UART_SetConfig+0x26a>
 8005616:	2b07      	cmp	r3, #7
 8005618:	d043      	beq.n	80056a2 <UART_SetConfig+0x26e>
 800561a:	2b08      	cmp	r3, #8
 800561c:	d043      	beq.n	80056a6 <UART_SetConfig+0x272>
 800561e:	2b09      	cmp	r3, #9
 8005620:	d043      	beq.n	80056aa <UART_SetConfig+0x276>
 8005622:	2b0a      	cmp	r3, #10
 8005624:	d043      	beq.n	80056ae <UART_SetConfig+0x27a>
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d143      	bne.n	80056b2 <UART_SetConfig+0x27e>
 800562a:	4938      	ldr	r1, [pc, #224]	; (800570c <UART_SetConfig+0x2d8>)
 800562c:	2302      	movs	r3, #2
 800562e:	e79d      	b.n	800556c <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005630:	f7fe fda2 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8005634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005636:	2101      	movs	r1, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d021      	beq.n	8005680 <UART_SetConfig+0x24c>
 800563c:	1849      	adds	r1, r1, r1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d01e      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005642:	3102      	adds	r1, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d01b      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005648:	3102      	adds	r1, #2
 800564a:	2b03      	cmp	r3, #3
 800564c:	d018      	beq.n	8005680 <UART_SetConfig+0x24c>
 800564e:	3102      	adds	r1, #2
 8005650:	2b04      	cmp	r3, #4
 8005652:	d015      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005654:	3102      	adds	r1, #2
 8005656:	2b05      	cmp	r3, #5
 8005658:	d012      	beq.n	8005680 <UART_SetConfig+0x24c>
 800565a:	3102      	adds	r1, #2
 800565c:	2b06      	cmp	r3, #6
 800565e:	d00f      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005660:	3104      	adds	r1, #4
 8005662:	2b07      	cmp	r3, #7
 8005664:	d00c      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005666:	3110      	adds	r1, #16
 8005668:	2b08      	cmp	r3, #8
 800566a:	d009      	beq.n	8005680 <UART_SetConfig+0x24c>
 800566c:	3120      	adds	r1, #32
 800566e:	2b09      	cmp	r3, #9
 8005670:	d006      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005672:	3140      	adds	r1, #64	; 0x40
 8005674:	2b0a      	cmp	r3, #10
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x24c>
 8005678:	397f      	subs	r1, #127	; 0x7f
 800567a:	2b0b      	cmp	r3, #11
 800567c:	d100      	bne.n	8005680 <UART_SetConfig+0x24c>
 800567e:	31ff      	adds	r1, #255	; 0xff
 8005680:	f7fa fd66 	bl	8000150 <__udivsi3>
        break;
 8005684:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005686:	0001      	movs	r1, r0
        break;
 8005688:	e7b3      	b.n	80055f2 <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800568a:	4921      	ldr	r1, [pc, #132]	; (8005710 <UART_SetConfig+0x2dc>)
 800568c:	e7ce      	b.n	800562c <UART_SetConfig+0x1f8>
 800568e:	4921      	ldr	r1, [pc, #132]	; (8005714 <UART_SetConfig+0x2e0>)
 8005690:	e76c      	b.n	800556c <UART_SetConfig+0x138>
 8005692:	4921      	ldr	r1, [pc, #132]	; (8005718 <UART_SetConfig+0x2e4>)
 8005694:	e7ca      	b.n	800562c <UART_SetConfig+0x1f8>
 8005696:	4921      	ldr	r1, [pc, #132]	; (800571c <UART_SetConfig+0x2e8>)
 8005698:	e7c8      	b.n	800562c <UART_SetConfig+0x1f8>
 800569a:	4921      	ldr	r1, [pc, #132]	; (8005720 <UART_SetConfig+0x2ec>)
 800569c:	e7c6      	b.n	800562c <UART_SetConfig+0x1f8>
 800569e:	4921      	ldr	r1, [pc, #132]	; (8005724 <UART_SetConfig+0x2f0>)
 80056a0:	e7c4      	b.n	800562c <UART_SetConfig+0x1f8>
 80056a2:	4921      	ldr	r1, [pc, #132]	; (8005728 <UART_SetConfig+0x2f4>)
 80056a4:	e7c2      	b.n	800562c <UART_SetConfig+0x1f8>
 80056a6:	4921      	ldr	r1, [pc, #132]	; (800572c <UART_SetConfig+0x2f8>)
 80056a8:	e7c0      	b.n	800562c <UART_SetConfig+0x1f8>
 80056aa:	4921      	ldr	r1, [pc, #132]	; (8005730 <UART_SetConfig+0x2fc>)
 80056ac:	e7be      	b.n	800562c <UART_SetConfig+0x1f8>
 80056ae:	4921      	ldr	r1, [pc, #132]	; (8005734 <UART_SetConfig+0x300>)
 80056b0:	e7bc      	b.n	800562c <UART_SetConfig+0x1f8>
 80056b2:	4921      	ldr	r1, [pc, #132]	; (8005738 <UART_SetConfig+0x304>)
 80056b4:	e7ba      	b.n	800562c <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	0209      	lsls	r1, r1, #8
 80056ba:	e001      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056bc:	2180      	movs	r1, #128	; 0x80
 80056be:	01c9      	lsls	r1, r1, #7
 80056c0:	2308      	movs	r3, #8
 80056c2:	e753      	b.n	800556c <UART_SetConfig+0x138>
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0189      	lsls	r1, r1, #6
 80056c8:	e7fa      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056ca:	491c      	ldr	r1, [pc, #112]	; (800573c <UART_SetConfig+0x308>)
 80056cc:	e7f8      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056ce:	2180      	movs	r1, #128	; 0x80
 80056d0:	0149      	lsls	r1, r1, #5
 80056d2:	e7f5      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056d4:	491a      	ldr	r1, [pc, #104]	; (8005740 <UART_SetConfig+0x30c>)
 80056d6:	e7f3      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056d8:	491a      	ldr	r1, [pc, #104]	; (8005744 <UART_SetConfig+0x310>)
 80056da:	e7f1      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056dc:	0109      	lsls	r1, r1, #4
 80056de:	e7ef      	b.n	80056c0 <UART_SetConfig+0x28c>
 80056e0:	cfff69f3 	.word	0xcfff69f3
 80056e4:	ffffcfff 	.word	0xffffcfff
 80056e8:	40008000 	.word	0x40008000
 80056ec:	11fff4ff 	.word	0x11fff4ff
 80056f0:	40013800 	.word	0x40013800
 80056f4:	40021000 	.word	0x40021000
 80056f8:	0800c0bc 	.word	0x0800c0bc
 80056fc:	40004400 	.word	0x40004400
 8005700:	0800c0c0 	.word	0x0800c0c0
 8005704:	40004800 	.word	0x40004800
 8005708:	40004c00 	.word	0x40004c00
 800570c:	0000f424 	.word	0x0000f424
 8005710:	007a1200 	.word	0x007a1200
 8005714:	003d0900 	.word	0x003d0900
 8005718:	0028b0aa 	.word	0x0028b0aa
 800571c:	001e8480 	.word	0x001e8480
 8005720:	00186a00 	.word	0x00186a00
 8005724:	00145855 	.word	0x00145855
 8005728:	000f4240 	.word	0x000f4240
 800572c:	0007a120 	.word	0x0007a120
 8005730:	0003d090 	.word	0x0003d090
 8005734:	0001e848 	.word	0x0001e848
 8005738:	00f42400 	.word	0x00f42400
 800573c:	00001555 	.word	0x00001555
 8005740:	00000ccc 	.word	0x00000ccc
 8005744:	00000aaa 	.word	0x00000aaa
 8005748:	00c9      	lsls	r1, r1, #3
 800574a:	e70f      	b.n	800556c <UART_SetConfig+0x138>
 800574c:	0089      	lsls	r1, r1, #2
 800574e:	e7b7      	b.n	80056c0 <UART_SetConfig+0x28c>
 8005750:	0049      	lsls	r1, r1, #1
 8005752:	e7b5      	b.n	80056c0 <UART_SetConfig+0x28c>
            pclk = HAL_RCC_GetPCLK1Freq();
 8005754:	f7fe fe04 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800575a:	2201      	movs	r2, #1
 800575c:	2300      	movs	r3, #0
 800575e:	2900      	cmp	r1, #0
 8005760:	d02e      	beq.n	80057c0 <UART_SetConfig+0x38c>
 8005762:	2202      	movs	r2, #2
 8005764:	2300      	movs	r3, #0
 8005766:	2901      	cmp	r1, #1
 8005768:	d02a      	beq.n	80057c0 <UART_SetConfig+0x38c>
 800576a:	2204      	movs	r2, #4
 800576c:	2300      	movs	r3, #0
 800576e:	2902      	cmp	r1, #2
 8005770:	d026      	beq.n	80057c0 <UART_SetConfig+0x38c>
 8005772:	2206      	movs	r2, #6
 8005774:	2300      	movs	r3, #0
 8005776:	2903      	cmp	r1, #3
 8005778:	d022      	beq.n	80057c0 <UART_SetConfig+0x38c>
 800577a:	2208      	movs	r2, #8
 800577c:	2300      	movs	r3, #0
 800577e:	2904      	cmp	r1, #4
 8005780:	d01e      	beq.n	80057c0 <UART_SetConfig+0x38c>
 8005782:	220a      	movs	r2, #10
 8005784:	2300      	movs	r3, #0
 8005786:	2905      	cmp	r1, #5
 8005788:	d01a      	beq.n	80057c0 <UART_SetConfig+0x38c>
 800578a:	220c      	movs	r2, #12
 800578c:	2300      	movs	r3, #0
 800578e:	2906      	cmp	r1, #6
 8005790:	d016      	beq.n	80057c0 <UART_SetConfig+0x38c>
 8005792:	2210      	movs	r2, #16
 8005794:	2300      	movs	r3, #0
 8005796:	2907      	cmp	r1, #7
 8005798:	d012      	beq.n	80057c0 <UART_SetConfig+0x38c>
 800579a:	2220      	movs	r2, #32
 800579c:	2300      	movs	r3, #0
 800579e:	2908      	cmp	r1, #8
 80057a0:	d00e      	beq.n	80057c0 <UART_SetConfig+0x38c>
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	2300      	movs	r3, #0
 80057a6:	2909      	cmp	r1, #9
 80057a8:	d00a      	beq.n	80057c0 <UART_SetConfig+0x38c>
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	2300      	movs	r3, #0
 80057ae:	290a      	cmp	r1, #10
 80057b0:	d006      	beq.n	80057c0 <UART_SetConfig+0x38c>
 80057b2:	2201      	movs	r2, #1
 80057b4:	2300      	movs	r3, #0
 80057b6:	290b      	cmp	r1, #11
 80057b8:	d102      	bne.n	80057c0 <UART_SetConfig+0x38c>
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	2300      	movs	r3, #0
 80057be:	0052      	lsls	r2, r2, #1
 80057c0:	2100      	movs	r1, #0
 80057c2:	f7fa fe79 	bl	80004b8 <__aeabi_uldivmod>
 80057c6:	2700      	movs	r7, #0
 80057c8:	6865      	ldr	r5, [r4, #4]
 80057ca:	0e06      	lsrs	r6, r0, #24
 80057cc:	020b      	lsls	r3, r1, #8
 80057ce:	4333      	orrs	r3, r6
 80057d0:	0202      	lsls	r2, r0, #8
 80057d2:	086e      	lsrs	r6, r5, #1
 80057d4:	1992      	adds	r2, r2, r6
 80057d6:	417b      	adcs	r3, r7
 80057d8:	0010      	movs	r0, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	003b      	movs	r3, r7
 80057e0:	f7fa fe6a 	bl	80004b8 <__aeabi_uldivmod>
            break;
 80057e4:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e6:	4b96      	ldr	r3, [pc, #600]	; (8005a40 <UART_SetConfig+0x60c>)
 80057e8:	4996      	ldr	r1, [pc, #600]	; (8005a44 <UART_SetConfig+0x610>)
 80057ea:	18c3      	adds	r3, r0, r3
 80057ec:	428b      	cmp	r3, r1
 80057ee:	d900      	bls.n	80057f2 <UART_SetConfig+0x3be>
 80057f0:	e684      	b.n	80054fc <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	60d8      	str	r0, [r3, #12]
 80057f6:	e682      	b.n	80054fe <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d030      	beq.n	8005860 <UART_SetConfig+0x42c>
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d01a      	beq.n	8005838 <UART_SetConfig+0x404>
 8005802:	2b02      	cmp	r3, #2
 8005804:	d01a      	beq.n	800583c <UART_SetConfig+0x408>
 8005806:	2b03      	cmp	r3, #3
 8005808:	d01a      	beq.n	8005840 <UART_SetConfig+0x40c>
 800580a:	2b04      	cmp	r3, #4
 800580c:	d01a      	beq.n	8005844 <UART_SetConfig+0x410>
 800580e:	2b05      	cmp	r3, #5
 8005810:	d01a      	beq.n	8005848 <UART_SetConfig+0x414>
 8005812:	2b06      	cmp	r3, #6
 8005814:	d01a      	beq.n	800584c <UART_SetConfig+0x418>
 8005816:	2b07      	cmp	r3, #7
 8005818:	d01a      	beq.n	8005850 <UART_SetConfig+0x41c>
 800581a:	2b08      	cmp	r3, #8
 800581c:	d01a      	beq.n	8005854 <UART_SetConfig+0x420>
 800581e:	2b09      	cmp	r3, #9
 8005820:	d01a      	beq.n	8005858 <UART_SetConfig+0x424>
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d01a      	beq.n	800585c <UART_SetConfig+0x428>
 8005826:	2b0b      	cmp	r3, #11
 8005828:	d11a      	bne.n	8005860 <UART_SetConfig+0x42c>
 800582a:	4887      	ldr	r0, [pc, #540]	; (8005a48 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582c:	2100      	movs	r1, #0
 800582e:	2700      	movs	r7, #0
 8005830:	0856      	lsrs	r6, r2, #1
 8005832:	1980      	adds	r0, r0, r6
 8005834:	4179      	adcs	r1, r7
 8005836:	e7d2      	b.n	80057de <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005838:	4884      	ldr	r0, [pc, #528]	; (8005a4c <UART_SetConfig+0x618>)
 800583a:	e7f7      	b.n	800582c <UART_SetConfig+0x3f8>
 800583c:	4884      	ldr	r0, [pc, #528]	; (8005a50 <UART_SetConfig+0x61c>)
 800583e:	e7f5      	b.n	800582c <UART_SetConfig+0x3f8>
 8005840:	4884      	ldr	r0, [pc, #528]	; (8005a54 <UART_SetConfig+0x620>)
 8005842:	e7f3      	b.n	800582c <UART_SetConfig+0x3f8>
 8005844:	4884      	ldr	r0, [pc, #528]	; (8005a58 <UART_SetConfig+0x624>)
 8005846:	e7f1      	b.n	800582c <UART_SetConfig+0x3f8>
 8005848:	4884      	ldr	r0, [pc, #528]	; (8005a5c <UART_SetConfig+0x628>)
 800584a:	e7ef      	b.n	800582c <UART_SetConfig+0x3f8>
 800584c:	4884      	ldr	r0, [pc, #528]	; (8005a60 <UART_SetConfig+0x62c>)
 800584e:	e7ed      	b.n	800582c <UART_SetConfig+0x3f8>
 8005850:	4884      	ldr	r0, [pc, #528]	; (8005a64 <UART_SetConfig+0x630>)
 8005852:	e7eb      	b.n	800582c <UART_SetConfig+0x3f8>
 8005854:	4884      	ldr	r0, [pc, #528]	; (8005a68 <UART_SetConfig+0x634>)
 8005856:	e7e9      	b.n	800582c <UART_SetConfig+0x3f8>
 8005858:	4884      	ldr	r0, [pc, #528]	; (8005a6c <UART_SetConfig+0x638>)
 800585a:	e7e7      	b.n	800582c <UART_SetConfig+0x3f8>
 800585c:	4884      	ldr	r0, [pc, #528]	; (8005a70 <UART_SetConfig+0x63c>)
 800585e:	e7e5      	b.n	800582c <UART_SetConfig+0x3f8>
 8005860:	4884      	ldr	r0, [pc, #528]	; (8005a74 <UART_SetConfig+0x640>)
 8005862:	e7e3      	b.n	800582c <UART_SetConfig+0x3f8>
            pclk = HAL_RCC_GetSysClockFreq();
 8005864:	f7fe fc88 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8005868:	e776      	b.n	8005758 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800586a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d018      	beq.n	80058a2 <UART_SetConfig+0x46e>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d019      	beq.n	80058a8 <UART_SetConfig+0x474>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d01a      	beq.n	80058ae <UART_SetConfig+0x47a>
 8005878:	2b03      	cmp	r3, #3
 800587a:	d01b      	beq.n	80058b4 <UART_SetConfig+0x480>
 800587c:	2b04      	cmp	r3, #4
 800587e:	d01b      	beq.n	80058b8 <UART_SetConfig+0x484>
 8005880:	2b05      	cmp	r3, #5
 8005882:	d01c      	beq.n	80058be <UART_SetConfig+0x48a>
 8005884:	2b06      	cmp	r3, #6
 8005886:	d01c      	beq.n	80058c2 <UART_SetConfig+0x48e>
 8005888:	2080      	movs	r0, #128	; 0x80
 800588a:	2b07      	cmp	r3, #7
 800588c:	d01b      	beq.n	80058c6 <UART_SetConfig+0x492>
 800588e:	2b08      	cmp	r3, #8
 8005890:	d01b      	beq.n	80058ca <UART_SetConfig+0x496>
 8005892:	2b09      	cmp	r3, #9
 8005894:	d01b      	beq.n	80058ce <UART_SetConfig+0x49a>
 8005896:	2b0a      	cmp	r3, #10
 8005898:	d01b      	beq.n	80058d2 <UART_SetConfig+0x49e>
 800589a:	2b0b      	cmp	r3, #11
 800589c:	d102      	bne.n	80058a4 <UART_SetConfig+0x470>
 800589e:	0200      	lsls	r0, r0, #8
 80058a0:	e7c4      	b.n	800582c <UART_SetConfig+0x3f8>
 80058a2:	2080      	movs	r0, #128	; 0x80
 80058a4:	0400      	lsls	r0, r0, #16
 80058a6:	e7c1      	b.n	800582c <UART_SetConfig+0x3f8>
 80058a8:	2080      	movs	r0, #128	; 0x80
 80058aa:	03c0      	lsls	r0, r0, #15
 80058ac:	e7be      	b.n	800582c <UART_SetConfig+0x3f8>
 80058ae:	2080      	movs	r0, #128	; 0x80
 80058b0:	0380      	lsls	r0, r0, #14
 80058b2:	e7bb      	b.n	800582c <UART_SetConfig+0x3f8>
 80058b4:	4870      	ldr	r0, [pc, #448]	; (8005a78 <UART_SetConfig+0x644>)
 80058b6:	e7b9      	b.n	800582c <UART_SetConfig+0x3f8>
 80058b8:	2080      	movs	r0, #128	; 0x80
 80058ba:	0340      	lsls	r0, r0, #13
 80058bc:	e7b6      	b.n	800582c <UART_SetConfig+0x3f8>
 80058be:	486f      	ldr	r0, [pc, #444]	; (8005a7c <UART_SetConfig+0x648>)
 80058c0:	e7b4      	b.n	800582c <UART_SetConfig+0x3f8>
 80058c2:	486f      	ldr	r0, [pc, #444]	; (8005a80 <UART_SetConfig+0x64c>)
 80058c4:	e7b2      	b.n	800582c <UART_SetConfig+0x3f8>
 80058c6:	0300      	lsls	r0, r0, #12
 80058c8:	e7b0      	b.n	800582c <UART_SetConfig+0x3f8>
 80058ca:	02c0      	lsls	r0, r0, #11
 80058cc:	e7ae      	b.n	800582c <UART_SetConfig+0x3f8>
 80058ce:	0280      	lsls	r0, r0, #10
 80058d0:	e7ac      	b.n	800582c <UART_SetConfig+0x3f8>
 80058d2:	0240      	lsls	r0, r0, #9
 80058d4:	e7aa      	b.n	800582c <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 80058d6:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80058d8:	2000      	movs	r0, #0
 80058da:	e784      	b.n	80057e6 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02f      	beq.n	8005940 <UART_SetConfig+0x50c>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d019      	beq.n	8005918 <UART_SetConfig+0x4e4>
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d019      	beq.n	800591c <UART_SetConfig+0x4e8>
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d019      	beq.n	8005920 <UART_SetConfig+0x4ec>
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d019      	beq.n	8005924 <UART_SetConfig+0x4f0>
 80058f0:	2b05      	cmp	r3, #5
 80058f2:	d019      	beq.n	8005928 <UART_SetConfig+0x4f4>
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d019      	beq.n	800592c <UART_SetConfig+0x4f8>
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d019      	beq.n	8005930 <UART_SetConfig+0x4fc>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d019      	beq.n	8005934 <UART_SetConfig+0x500>
 8005900:	2b09      	cmp	r3, #9
 8005902:	d019      	beq.n	8005938 <UART_SetConfig+0x504>
 8005904:	2b0a      	cmp	r3, #10
 8005906:	d019      	beq.n	800593c <UART_SetConfig+0x508>
 8005908:	2b0b      	cmp	r3, #11
 800590a:	d119      	bne.n	8005940 <UART_SetConfig+0x50c>
 800590c:	485d      	ldr	r0, [pc, #372]	; (8005a84 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	1818      	adds	r0, r3, r0
 8005916:	e173      	b.n	8005c00 <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005918:	484b      	ldr	r0, [pc, #300]	; (8005a48 <UART_SetConfig+0x614>)
 800591a:	e7f8      	b.n	800590e <UART_SetConfig+0x4da>
 800591c:	485a      	ldr	r0, [pc, #360]	; (8005a88 <UART_SetConfig+0x654>)
 800591e:	e7f6      	b.n	800590e <UART_SetConfig+0x4da>
 8005920:	485a      	ldr	r0, [pc, #360]	; (8005a8c <UART_SetConfig+0x658>)
 8005922:	e7f4      	b.n	800590e <UART_SetConfig+0x4da>
 8005924:	485a      	ldr	r0, [pc, #360]	; (8005a90 <UART_SetConfig+0x65c>)
 8005926:	e7f2      	b.n	800590e <UART_SetConfig+0x4da>
 8005928:	485a      	ldr	r0, [pc, #360]	; (8005a94 <UART_SetConfig+0x660>)
 800592a:	e7f0      	b.n	800590e <UART_SetConfig+0x4da>
 800592c:	485a      	ldr	r0, [pc, #360]	; (8005a98 <UART_SetConfig+0x664>)
 800592e:	e7ee      	b.n	800590e <UART_SetConfig+0x4da>
 8005930:	485a      	ldr	r0, [pc, #360]	; (8005a9c <UART_SetConfig+0x668>)
 8005932:	e7ec      	b.n	800590e <UART_SetConfig+0x4da>
 8005934:	485a      	ldr	r0, [pc, #360]	; (8005aa0 <UART_SetConfig+0x66c>)
 8005936:	e7ea      	b.n	800590e <UART_SetConfig+0x4da>
 8005938:	485a      	ldr	r0, [pc, #360]	; (8005aa4 <UART_SetConfig+0x670>)
 800593a:	e7e8      	b.n	800590e <UART_SetConfig+0x4da>
 800593c:	485a      	ldr	r0, [pc, #360]	; (8005aa8 <UART_SetConfig+0x674>)
 800593e:	e7e6      	b.n	800590e <UART_SetConfig+0x4da>
 8005940:	484b      	ldr	r0, [pc, #300]	; (8005a70 <UART_SetConfig+0x63c>)
 8005942:	e7e4      	b.n	800590e <UART_SetConfig+0x4da>
        pclk = HAL_RCC_GetSysClockFreq();
 8005944:	f7fe fc18 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8005948:	e12d      	b.n	8005ba6 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594a:	2b00      	cmp	r3, #0
 800594c:	d018      	beq.n	8005980 <UART_SetConfig+0x54c>
 800594e:	2b01      	cmp	r3, #1
 8005950:	d019      	beq.n	8005986 <UART_SetConfig+0x552>
 8005952:	2b02      	cmp	r3, #2
 8005954:	d01a      	beq.n	800598c <UART_SetConfig+0x558>
 8005956:	2b03      	cmp	r3, #3
 8005958:	d01b      	beq.n	8005992 <UART_SetConfig+0x55e>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d01b      	beq.n	8005996 <UART_SetConfig+0x562>
 800595e:	2b05      	cmp	r3, #5
 8005960:	d01c      	beq.n	800599c <UART_SetConfig+0x568>
 8005962:	2b06      	cmp	r3, #6
 8005964:	d01c      	beq.n	80059a0 <UART_SetConfig+0x56c>
 8005966:	2080      	movs	r0, #128	; 0x80
 8005968:	2b07      	cmp	r3, #7
 800596a:	d01b      	beq.n	80059a4 <UART_SetConfig+0x570>
 800596c:	2b08      	cmp	r3, #8
 800596e:	d01b      	beq.n	80059a8 <UART_SetConfig+0x574>
 8005970:	2b09      	cmp	r3, #9
 8005972:	d01b      	beq.n	80059ac <UART_SetConfig+0x578>
 8005974:	2b0a      	cmp	r3, #10
 8005976:	d01b      	beq.n	80059b0 <UART_SetConfig+0x57c>
 8005978:	2b0b      	cmp	r3, #11
 800597a:	d102      	bne.n	8005982 <UART_SetConfig+0x54e>
 800597c:	0040      	lsls	r0, r0, #1
 800597e:	e7c6      	b.n	800590e <UART_SetConfig+0x4da>
 8005980:	2080      	movs	r0, #128	; 0x80
 8005982:	0240      	lsls	r0, r0, #9
 8005984:	e7c3      	b.n	800590e <UART_SetConfig+0x4da>
 8005986:	2080      	movs	r0, #128	; 0x80
 8005988:	0200      	lsls	r0, r0, #8
 800598a:	e7c0      	b.n	800590e <UART_SetConfig+0x4da>
 800598c:	2080      	movs	r0, #128	; 0x80
 800598e:	01c0      	lsls	r0, r0, #7
 8005990:	e7bd      	b.n	800590e <UART_SetConfig+0x4da>
 8005992:	4846      	ldr	r0, [pc, #280]	; (8005aac <UART_SetConfig+0x678>)
 8005994:	e7bb      	b.n	800590e <UART_SetConfig+0x4da>
 8005996:	2080      	movs	r0, #128	; 0x80
 8005998:	0180      	lsls	r0, r0, #6
 800599a:	e7b8      	b.n	800590e <UART_SetConfig+0x4da>
 800599c:	4844      	ldr	r0, [pc, #272]	; (8005ab0 <UART_SetConfig+0x67c>)
 800599e:	e7b6      	b.n	800590e <UART_SetConfig+0x4da>
 80059a0:	4844      	ldr	r0, [pc, #272]	; (8005ab4 <UART_SetConfig+0x680>)
 80059a2:	e7b4      	b.n	800590e <UART_SetConfig+0x4da>
 80059a4:	0140      	lsls	r0, r0, #5
 80059a6:	e7b2      	b.n	800590e <UART_SetConfig+0x4da>
 80059a8:	0100      	lsls	r0, r0, #4
 80059aa:	e7b0      	b.n	800590e <UART_SetConfig+0x4da>
 80059ac:	00c0      	lsls	r0, r0, #3
 80059ae:	e7ae      	b.n	800590e <UART_SetConfig+0x4da>
 80059b0:	0080      	lsls	r0, r0, #2
 80059b2:	e7ac      	b.n	800590e <UART_SetConfig+0x4da>
    switch (clocksource)
 80059b4:	2808      	cmp	r0, #8
 80059b6:	d900      	bls.n	80059ba <UART_SetConfig+0x586>
 80059b8:	e0eb      	b.n	8005b92 <UART_SetConfig+0x75e>
 80059ba:	f7fa fbb5 	bl	8000128 <__gnu_thumb1_case_uqi>
 80059be:	ea05      	.short	0xea05
 80059c0:	eab3ea7f 	.word	0xeab3ea7f
 80059c4:	eaea      	.short	0xeaea
 80059c6:	b6          	.byte	0xb6
 80059c7:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c8:	f7fe fcca 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ce:	2101      	movs	r1, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d021      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059d4:	1849      	adds	r1, r1, r1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d01e      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059da:	3102      	adds	r1, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d01b      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059e0:	3102      	adds	r1, #2
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d018      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059e6:	3102      	adds	r1, #2
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d015      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059ec:	3102      	adds	r1, #2
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d012      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059f2:	3102      	adds	r1, #2
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d00f      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059f8:	3104      	adds	r1, #4
 80059fa:	2b07      	cmp	r3, #7
 80059fc:	d00c      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 80059fe:	3110      	adds	r1, #16
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d009      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 8005a04:	3120      	adds	r1, #32
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d006      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 8005a0a:	3140      	adds	r1, #64	; 0x40
 8005a0c:	2b0a      	cmp	r3, #10
 8005a0e:	d003      	beq.n	8005a18 <UART_SetConfig+0x5e4>
 8005a10:	397f      	subs	r1, #127	; 0x7f
 8005a12:	2b0b      	cmp	r3, #11
 8005a14:	d100      	bne.n	8005a18 <UART_SetConfig+0x5e4>
 8005a16:	31ff      	adds	r1, #255	; 0xff
 8005a18:	6865      	ldr	r5, [r4, #4]
 8005a1a:	f7fa fb99 	bl	8000150 <__udivsi3>
 8005a1e:	0029      	movs	r1, r5
 8005a20:	086b      	lsrs	r3, r5, #1
 8005a22:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a24:	f7fa fb94 	bl	8000150 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a28:	2200      	movs	r2, #0
 8005a2a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	4822      	ldr	r0, [pc, #136]	; (8005ab8 <UART_SetConfig+0x684>)
 8005a30:	3910      	subs	r1, #16
 8005a32:	4281      	cmp	r1, r0
 8005a34:	d900      	bls.n	8005a38 <UART_SetConfig+0x604>
 8005a36:	e561      	b.n	80054fc <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	60cb      	str	r3, [r1, #12]
 8005a3c:	e55f      	b.n	80054fe <UART_SetConfig+0xca>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	fffffd00 	.word	0xfffffd00
 8005a44:	000ffcff 	.word	0x000ffcff
 8005a48:	00f42400 	.word	0x00f42400
 8005a4c:	7a120000 	.word	0x7a120000
 8005a50:	3d090000 	.word	0x3d090000
 8005a54:	28b0aa00 	.word	0x28b0aa00
 8005a58:	1e848000 	.word	0x1e848000
 8005a5c:	186a0000 	.word	0x186a0000
 8005a60:	14585500 	.word	0x14585500
 8005a64:	0f424000 	.word	0x0f424000
 8005a68:	07a12000 	.word	0x07a12000
 8005a6c:	03d09000 	.word	0x03d09000
 8005a70:	01e84800 	.word	0x01e84800
 8005a74:	f4240000 	.word	0xf4240000
 8005a78:	00155500 	.word	0x00155500
 8005a7c:	000ccc00 	.word	0x000ccc00
 8005a80:	000aaa00 	.word	0x000aaa00
 8005a84:	0001e848 	.word	0x0001e848
 8005a88:	007a1200 	.word	0x007a1200
 8005a8c:	00516154 	.word	0x00516154
 8005a90:	003d0900 	.word	0x003d0900
 8005a94:	0030d400 	.word	0x0030d400
 8005a98:	0028b0aa 	.word	0x0028b0aa
 8005a9c:	001e8480 	.word	0x001e8480
 8005aa0:	000f4240 	.word	0x000f4240
 8005aa4:	0007a120 	.word	0x0007a120
 8005aa8:	0003d090 	.word	0x0003d090
 8005aac:	00002aaa 	.word	0x00002aaa
 8005ab0:	00001998 	.word	0x00001998
 8005ab4:	00001554 	.word	0x00001554
 8005ab8:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02f      	beq.n	8005b20 <UART_SetConfig+0x6ec>
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d019      	beq.n	8005af8 <UART_SetConfig+0x6c4>
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d019      	beq.n	8005afc <UART_SetConfig+0x6c8>
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d019      	beq.n	8005b00 <UART_SetConfig+0x6cc>
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d019      	beq.n	8005b04 <UART_SetConfig+0x6d0>
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d019      	beq.n	8005b08 <UART_SetConfig+0x6d4>
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d019      	beq.n	8005b0c <UART_SetConfig+0x6d8>
 8005ad8:	2b07      	cmp	r3, #7
 8005ada:	d019      	beq.n	8005b10 <UART_SetConfig+0x6dc>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d019      	beq.n	8005b14 <UART_SetConfig+0x6e0>
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d019      	beq.n	8005b18 <UART_SetConfig+0x6e4>
 8005ae4:	2b0a      	cmp	r3, #10
 8005ae6:	d019      	beq.n	8005b1c <UART_SetConfig+0x6e8>
 8005ae8:	2b0b      	cmp	r3, #11
 8005aea:	d119      	bne.n	8005b20 <UART_SetConfig+0x6ec>
 8005aec:	484e      	ldr	r0, [pc, #312]	; (8005c28 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	6861      	ldr	r1, [r4, #4]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	1818      	adds	r0, r3, r0
 8005af6:	e795      	b.n	8005a24 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af8:	484c      	ldr	r0, [pc, #304]	; (8005c2c <UART_SetConfig+0x7f8>)
 8005afa:	e7f8      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005afc:	484c      	ldr	r0, [pc, #304]	; (8005c30 <UART_SetConfig+0x7fc>)
 8005afe:	e7f6      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b00:	484c      	ldr	r0, [pc, #304]	; (8005c34 <UART_SetConfig+0x800>)
 8005b02:	e7f4      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b04:	484c      	ldr	r0, [pc, #304]	; (8005c38 <UART_SetConfig+0x804>)
 8005b06:	e7f2      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b08:	484c      	ldr	r0, [pc, #304]	; (8005c3c <UART_SetConfig+0x808>)
 8005b0a:	e7f0      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b0c:	484c      	ldr	r0, [pc, #304]	; (8005c40 <UART_SetConfig+0x80c>)
 8005b0e:	e7ee      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b10:	484c      	ldr	r0, [pc, #304]	; (8005c44 <UART_SetConfig+0x810>)
 8005b12:	e7ec      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b14:	484c      	ldr	r0, [pc, #304]	; (8005c48 <UART_SetConfig+0x814>)
 8005b16:	e7ea      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b18:	484c      	ldr	r0, [pc, #304]	; (8005c4c <UART_SetConfig+0x818>)
 8005b1a:	e7e8      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b1c:	484c      	ldr	r0, [pc, #304]	; (8005c50 <UART_SetConfig+0x81c>)
 8005b1e:	e7e6      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b20:	484c      	ldr	r0, [pc, #304]	; (8005c54 <UART_SetConfig+0x820>)
 8005b22:	e7e4      	b.n	8005aee <UART_SetConfig+0x6ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b24:	f7fe fb28 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8005b28:	e750      	b.n	80059cc <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d018      	beq.n	8005b60 <UART_SetConfig+0x72c>
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d018      	beq.n	8005b64 <UART_SetConfig+0x730>
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d019      	beq.n	8005b6a <UART_SetConfig+0x736>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d01a      	beq.n	8005b70 <UART_SetConfig+0x73c>
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d01a      	beq.n	8005b74 <UART_SetConfig+0x740>
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d01b      	beq.n	8005b7a <UART_SetConfig+0x746>
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d01b      	beq.n	8005b7e <UART_SetConfig+0x74a>
 8005b46:	2080      	movs	r0, #128	; 0x80
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d01a      	beq.n	8005b82 <UART_SetConfig+0x74e>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d01a      	beq.n	8005b86 <UART_SetConfig+0x752>
 8005b50:	2b09      	cmp	r3, #9
 8005b52:	d01a      	beq.n	8005b8a <UART_SetConfig+0x756>
 8005b54:	2b0a      	cmp	r3, #10
 8005b56:	d01a      	beq.n	8005b8e <UART_SetConfig+0x75a>
 8005b58:	2b0b      	cmp	r3, #11
 8005b5a:	d0c8      	beq.n	8005aee <UART_SetConfig+0x6ba>
 8005b5c:	0200      	lsls	r0, r0, #8
 8005b5e:	e7c6      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b60:	2080      	movs	r0, #128	; 0x80
 8005b62:	e7fb      	b.n	8005b5c <UART_SetConfig+0x728>
 8005b64:	2080      	movs	r0, #128	; 0x80
 8005b66:	01c0      	lsls	r0, r0, #7
 8005b68:	e7c1      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b6a:	2080      	movs	r0, #128	; 0x80
 8005b6c:	0180      	lsls	r0, r0, #6
 8005b6e:	e7be      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b70:	4839      	ldr	r0, [pc, #228]	; (8005c58 <UART_SetConfig+0x824>)
 8005b72:	e7bc      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b74:	2080      	movs	r0, #128	; 0x80
 8005b76:	0140      	lsls	r0, r0, #5
 8005b78:	e7b9      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b7a:	4838      	ldr	r0, [pc, #224]	; (8005c5c <UART_SetConfig+0x828>)
 8005b7c:	e7b7      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b7e:	4838      	ldr	r0, [pc, #224]	; (8005c60 <UART_SetConfig+0x82c>)
 8005b80:	e7b5      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b82:	0100      	lsls	r0, r0, #4
 8005b84:	e7b3      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b86:	00c0      	lsls	r0, r0, #3
 8005b88:	e7b1      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b8a:	0080      	lsls	r0, r0, #2
 8005b8c:	e7af      	b.n	8005aee <UART_SetConfig+0x6ba>
 8005b8e:	0040      	lsls	r0, r0, #1
 8005b90:	e7ad      	b.n	8005aee <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 8005b92:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e749      	b.n	8005a2c <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d000      	beq.n	8005ba2 <UART_SetConfig+0x76e>
 8005ba0:	e712      	b.n	80059c8 <UART_SetConfig+0x594>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba2:	f7fe fbdd 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba8:	2101      	movs	r1, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d021      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bae:	1849      	adds	r1, r1, r1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d01e      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bb4:	3102      	adds	r1, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d01b      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bba:	3102      	adds	r1, #2
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d018      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bc0:	3102      	adds	r1, #2
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d015      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bc6:	3102      	adds	r1, #2
 8005bc8:	2b05      	cmp	r3, #5
 8005bca:	d012      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bcc:	3102      	adds	r1, #2
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d00f      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bd2:	3104      	adds	r1, #4
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	d00c      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bd8:	3110      	adds	r1, #16
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d009      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bde:	3120      	adds	r1, #32
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d006      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005be4:	3140      	adds	r1, #64	; 0x40
 8005be6:	2b0a      	cmp	r3, #10
 8005be8:	d003      	beq.n	8005bf2 <UART_SetConfig+0x7be>
 8005bea:	397f      	subs	r1, #127	; 0x7f
 8005bec:	2b0b      	cmp	r3, #11
 8005bee:	d100      	bne.n	8005bf2 <UART_SetConfig+0x7be>
 8005bf0:	31ff      	adds	r1, #255	; 0xff
 8005bf2:	f7fa faad 	bl	8000150 <__udivsi3>
 8005bf6:	6865      	ldr	r5, [r4, #4]
 8005bf8:	0040      	lsls	r0, r0, #1
 8005bfa:	0029      	movs	r1, r5
 8005bfc:	086b      	lsrs	r3, r5, #1
 8005bfe:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c00:	f7fa faa6 	bl	8000150 <__udivsi3>
 8005c04:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c06:	0003      	movs	r3, r0
 8005c08:	4a16      	ldr	r2, [pc, #88]	; (8005c64 <UART_SetConfig+0x830>)
 8005c0a:	3b10      	subs	r3, #16
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d900      	bls.n	8005c12 <UART_SetConfig+0x7de>
 8005c10:	e474      	b.n	80054fc <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c12:	230f      	movs	r3, #15
 8005c14:	0002      	movs	r2, r0
 8005c16:	439a      	bics	r2, r3
 8005c18:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c1a:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8005c1c:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c1e:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8005c20:	4318      	orrs	r0, r3
 8005c22:	60d0      	str	r0, [r2, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	e46a      	b.n	80054fe <UART_SetConfig+0xca>
 8005c28:	0000f424 	.word	0x0000f424
 8005c2c:	007a1200 	.word	0x007a1200
 8005c30:	003d0900 	.word	0x003d0900
 8005c34:	0028b0aa 	.word	0x0028b0aa
 8005c38:	001e8480 	.word	0x001e8480
 8005c3c:	00186a00 	.word	0x00186a00
 8005c40:	00145855 	.word	0x00145855
 8005c44:	000f4240 	.word	0x000f4240
 8005c48:	0007a120 	.word	0x0007a120
 8005c4c:	0003d090 	.word	0x0003d090
 8005c50:	0001e848 	.word	0x0001e848
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	00001555 	.word	0x00001555
 8005c5c:	00000ccc 	.word	0x00000ccc
 8005c60:	00000aaa 	.word	0x00000aaa
 8005c64:	0000ffef 	.word	0x0000ffef

08005c68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8005c6a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c6c:	07da      	lsls	r2, r3, #31
 8005c6e:	d506      	bpl.n	8005c7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c70:	6801      	ldr	r1, [r0, #0]
 8005c72:	4c28      	ldr	r4, [pc, #160]	; (8005d14 <UART_AdvFeatureConfig+0xac>)
 8005c74:	684a      	ldr	r2, [r1, #4]
 8005c76:	4022      	ands	r2, r4
 8005c78:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005c7a:	4322      	orrs	r2, r4
 8005c7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c7e:	079a      	lsls	r2, r3, #30
 8005c80:	d506      	bpl.n	8005c90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c82:	6801      	ldr	r1, [r0, #0]
 8005c84:	4c24      	ldr	r4, [pc, #144]	; (8005d18 <UART_AdvFeatureConfig+0xb0>)
 8005c86:	684a      	ldr	r2, [r1, #4]
 8005c88:	4022      	ands	r2, r4
 8005c8a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005c8c:	4322      	orrs	r2, r4
 8005c8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c90:	075a      	lsls	r2, r3, #29
 8005c92:	d506      	bpl.n	8005ca2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c94:	6801      	ldr	r1, [r0, #0]
 8005c96:	4c21      	ldr	r4, [pc, #132]	; (8005d1c <UART_AdvFeatureConfig+0xb4>)
 8005c98:	684a      	ldr	r2, [r1, #4]
 8005c9a:	4022      	ands	r2, r4
 8005c9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005c9e:	4322      	orrs	r2, r4
 8005ca0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca2:	071a      	lsls	r2, r3, #28
 8005ca4:	d506      	bpl.n	8005cb4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca6:	6801      	ldr	r1, [r0, #0]
 8005ca8:	4c1d      	ldr	r4, [pc, #116]	; (8005d20 <UART_AdvFeatureConfig+0xb8>)
 8005caa:	684a      	ldr	r2, [r1, #4]
 8005cac:	4022      	ands	r2, r4
 8005cae:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005cb0:	4322      	orrs	r2, r4
 8005cb2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb4:	06da      	lsls	r2, r3, #27
 8005cb6:	d506      	bpl.n	8005cc6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb8:	6801      	ldr	r1, [r0, #0]
 8005cba:	4c1a      	ldr	r4, [pc, #104]	; (8005d24 <UART_AdvFeatureConfig+0xbc>)
 8005cbc:	688a      	ldr	r2, [r1, #8]
 8005cbe:	4022      	ands	r2, r4
 8005cc0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005cc2:	4322      	orrs	r2, r4
 8005cc4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cc6:	069a      	lsls	r2, r3, #26
 8005cc8:	d506      	bpl.n	8005cd8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cca:	6801      	ldr	r1, [r0, #0]
 8005ccc:	4c16      	ldr	r4, [pc, #88]	; (8005d28 <UART_AdvFeatureConfig+0xc0>)
 8005cce:	688a      	ldr	r2, [r1, #8]
 8005cd0:	4022      	ands	r2, r4
 8005cd2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005cd4:	4322      	orrs	r2, r4
 8005cd6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd8:	065a      	lsls	r2, r3, #25
 8005cda:	d510      	bpl.n	8005cfe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cdc:	6801      	ldr	r1, [r0, #0]
 8005cde:	4d13      	ldr	r5, [pc, #76]	; (8005d2c <UART_AdvFeatureConfig+0xc4>)
 8005ce0:	684a      	ldr	r2, [r1, #4]
 8005ce2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ce4:	402a      	ands	r2, r5
 8005ce6:	4322      	orrs	r2, r4
 8005ce8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	0352      	lsls	r2, r2, #13
 8005cee:	4294      	cmp	r4, r2
 8005cf0:	d105      	bne.n	8005cfe <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cf2:	684a      	ldr	r2, [r1, #4]
 8005cf4:	4c0e      	ldr	r4, [pc, #56]	; (8005d30 <UART_AdvFeatureConfig+0xc8>)
 8005cf6:	4022      	ands	r2, r4
 8005cf8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005cfa:	4322      	orrs	r2, r4
 8005cfc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cfe:	061b      	lsls	r3, r3, #24
 8005d00:	d506      	bpl.n	8005d10 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d02:	6802      	ldr	r2, [r0, #0]
 8005d04:	490b      	ldr	r1, [pc, #44]	; (8005d34 <UART_AdvFeatureConfig+0xcc>)
 8005d06:	6853      	ldr	r3, [r2, #4]
 8005d08:	400b      	ands	r3, r1
 8005d0a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6053      	str	r3, [r2, #4]
}
 8005d10:	bd30      	pop	{r4, r5, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	fffdffff 	.word	0xfffdffff
 8005d18:	fffeffff 	.word	0xfffeffff
 8005d1c:	fffbffff 	.word	0xfffbffff
 8005d20:	ffff7fff 	.word	0xffff7fff
 8005d24:	ffffefff 	.word	0xffffefff
 8005d28:	ffffdfff 	.word	0xffffdfff
 8005d2c:	ffefffff 	.word	0xffefffff
 8005d30:	ff9fffff 	.word	0xff9fffff
 8005d34:	fff7ffff 	.word	0xfff7ffff

08005d38 <UART_WaitOnFlagUntilTimeout>:
{
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	0004      	movs	r4, r0
 8005d3c:	000e      	movs	r6, r1
 8005d3e:	0015      	movs	r5, r2
 8005d40:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	69d3      	ldr	r3, [r2, #28]
 8005d46:	4033      	ands	r3, r6
 8005d48:	1b9b      	subs	r3, r3, r6
 8005d4a:	4259      	negs	r1, r3
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	42ab      	cmp	r3, r5
 8005d50:	d001      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005d52:	2000      	movs	r0, #0
 8005d54:	e01e      	b.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	9b06      	ldr	r3, [sp, #24]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	d0f3      	beq.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5c:	f7fc fb24 	bl	80023a8 <HAL_GetTick>
 8005d60:	9b06      	ldr	r3, [sp, #24]
 8005d62:	1bc0      	subs	r0, r0, r7
 8005d64:	4283      	cmp	r3, r0
 8005d66:	d301      	bcc.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x34>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ea      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d6c:	0022      	movs	r2, r4
 8005d6e:	ca08      	ldmia	r2!, {r3}
 8005d70:	4809      	ldr	r0, [pc, #36]	; (8005d98 <UART_WaitOnFlagUntilTimeout+0x60>)
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	4001      	ands	r1, r0
 8005d76:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	30a3      	adds	r0, #163	; 0xa3
 8005d7c:	30ff      	adds	r0, #255	; 0xff
 8005d7e:	4381      	bics	r1, r0
 8005d80:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005d82:	2320      	movs	r3, #32
 8005d84:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005d86:	0022      	movs	r2, r4
 8005d88:	3208      	adds	r2, #8
 8005d8a:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	347c      	adds	r4, #124	; 0x7c
 8005d90:	7023      	strb	r3, [r4, #0]
 8005d92:	3002      	adds	r0, #2
}
 8005d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	fffffe5f 	.word	0xfffffe5f

08005d9c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	0003      	movs	r3, r0
{
 8005d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	2600      	movs	r6, #0
{
 8005da2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	3388      	adds	r3, #136	; 0x88
 8005da6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8005da8:	f7fc fafe 	bl	80023a8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dac:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005dae:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	071b      	lsls	r3, r3, #28
 8005db4:	d417      	bmi.n	8005de6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	075b      	lsls	r3, r3, #29
 8005dbc:	d50a      	bpl.n	8005dd4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <UART_CheckIdleState+0x64>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	03c9      	lsls	r1, r1, #15
 8005dc8:	002b      	movs	r3, r5
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f7ff ffb4 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d113      	bne.n	8005dfc <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005dd6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005dd8:	1d22      	adds	r2, r4, #4
 8005dda:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005ddc:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	3204      	adds	r2, #4
 8005de0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005de2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005de4:	e00b      	b.n	8005dfe <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <UART_CheckIdleState+0x64>)
 8005dea:	0032      	movs	r2, r6
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	0389      	lsls	r1, r1, #14
 8005df0:	0003      	movs	r3, r0
 8005df2:	0020      	movs	r0, r4
 8005df4:	f7ff ffa0 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0dc      	beq.n	8005db6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005dfc:	2003      	movs	r0, #3
}
 8005dfe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005e00:	01ffffff 	.word	0x01ffffff

08005e04 <HAL_UART_Init>:
{
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005e0a:	2001      	movs	r0, #1
}
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0e:	1d05      	adds	r5, r0, #4
 8005e10:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8005e16:	0002      	movs	r2, r0
 8005e18:	327c      	adds	r2, #124	; 0x7c
 8005e1a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005e1c:	f003 fe36 	bl	8009a8c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005e22:	2101      	movs	r1, #1
 8005e24:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005e26:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005e28:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e2a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005e2c:	438b      	bics	r3, r1
 8005e2e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e30:	f7ff fb00 	bl	8005434 <UART_SetConfig>
 8005e34:	2801      	cmp	r0, #1
 8005e36:	d0e8      	beq.n	8005e0a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8005e3e:	0020      	movs	r0, r4
 8005e40:	f7ff ff12 	bl	8005c68 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	4908      	ldr	r1, [pc, #32]	; (8005e68 <HAL_UART_Init+0x64>)
 8005e48:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005e4a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	438a      	bics	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6819      	ldr	r1, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005e60:	f7ff ff9c 	bl	8005d9c <UART_CheckIdleState>
 8005e64:	e7d2      	b.n	8005e0c <HAL_UART_Init+0x8>
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	ffffb7ff 	.word	0xffffb7ff

08005e6c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e6c:	2301      	movs	r3, #1
{
 8005e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e70:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e72:	aa02      	add	r2, sp, #8
 8005e74:	7013      	strb	r3, [r2, #0]
 8005e76:	7053      	strb	r3, [r2, #1]
 8005e78:	7093      	strb	r3, [r2, #2]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	a902      	add	r1, sp, #8
 8005e7e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e80:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e82:	2200      	movs	r2, #0
 8005e84:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e86:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e88:	718a      	strb	r2, [r1, #6]
 8005e8a:	71ca      	strb	r2, [r1, #7]
 8005e8c:	710e      	strb	r6, [r1, #4]
 8005e8e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e90:	70a5      	strb	r5, [r4, #2]
 8005e92:	2104      	movs	r1, #4
 8005e94:	0007      	movs	r7, r0
 8005e96:	0005      	movs	r5, r0
 8005e98:	3208      	adds	r2, #8
 8005e9a:	7022      	strb	r2, [r4, #0]
 8005e9c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e9e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005ea0:	7061      	strb	r1, [r4, #1]
 8005ea2:	70e1      	strb	r1, [r4, #3]
 8005ea4:	7163      	strb	r3, [r4, #5]
 8005ea6:	71a3      	strb	r3, [r4, #6]
 8005ea8:	71e3      	strb	r3, [r4, #7]
 8005eaa:	376a      	adds	r7, #106	; 0x6a
 8005eac:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d103      	bne.n	8005eba <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8005eb2:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8005eb4:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eb6:	b007      	add	sp, #28
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ebe:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ec0:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ec2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005ec4:	aa02      	add	r2, sp, #8
 8005ec6:	5cd0      	ldrb	r0, [r2, r3]
 8005ec8:	5ce1      	ldrb	r1, [r4, r3]
 8005eca:	00c0      	lsls	r0, r0, #3
 8005ecc:	f7fa f9ca 	bl	8000264 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ed0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005ed2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ed4:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005ed6:	401e      	ands	r6, r3
 8005ed8:	ab02      	add	r3, sp, #8
 8005eda:	5d98      	ldrb	r0, [r3, r6]
 8005edc:	5da1      	ldrb	r1, [r4, r6]
 8005ede:	00c0      	lsls	r0, r0, #3
 8005ee0:	f7fa f9c0 	bl	8000264 <__divsi3>
 8005ee4:	8028      	strh	r0, [r5, #0]
}
 8005ee6:	e7e6      	b.n	8005eb6 <UARTEx_SetNbDataToProcess+0x4a>

08005ee8 <HAL_UARTEx_WakeupCallback>:
 8005ee8:	4770      	bx	lr

08005eea <HAL_UARTEx_RxFifoFullCallback>:
 8005eea:	4770      	bx	lr

08005eec <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005eec:	4770      	bx	lr

08005eee <HAL_UARTEx_EnableFifoMode>:
{
 8005eee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8005ef0:	0004      	movs	r4, r0
 8005ef2:	347c      	adds	r4, #124	; 0x7c
 8005ef4:	7822      	ldrb	r2, [r4, #0]
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	2a01      	cmp	r2, #1
 8005efa:	d014      	beq.n	8005f26 <HAL_UARTEx_EnableFifoMode+0x38>
 8005efc:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	1d05      	adds	r5, r0, #4
 8005f00:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 8005f02:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f06:	6803      	ldr	r3, [r0, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	43b1      	bics	r1, r6
 8005f0e:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	0589      	lsls	r1, r1, #22
 8005f14:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005f16:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f18:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8005f1a:	f7ff ffa7 	bl	8005e6c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	2320      	movs	r3, #32
 8005f20:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005f22:	2300      	movs	r3, #0
 8005f24:	7023      	strb	r3, [r4, #0]
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	bd70      	pop	{r4, r5, r6, pc}

08005f2a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8005f2c:	0005      	movs	r5, r0
 8005f2e:	357c      	adds	r5, #124	; 0x7c
 8005f30:	782b      	ldrb	r3, [r5, #0]
{
 8005f32:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8005f34:	2002      	movs	r0, #2
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d017      	beq.n	8005f6a <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f3c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8005f3e:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8005f40:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8005f42:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f46:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	4383      	bics	r3, r0
 8005f4c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f4e:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005f50:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	4319      	orrs	r1, r3
 8005f58:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005f5a:	f7ff ff87 	bl	8005e6c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8005f60:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f62:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005f64:	2320      	movs	r3, #32
 8005f66:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005f68:	7028      	strb	r0, [r5, #0]
}
 8005f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f6c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8005f6e:	0005      	movs	r5, r0
 8005f70:	357c      	adds	r5, #124	; 0x7c
 8005f72:	782b      	ldrb	r3, [r5, #0]
{
 8005f74:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8005f76:	2002      	movs	r0, #2
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d017      	beq.n	8005fac <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8005f7e:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8005f80:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8005f82:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4382      	bics	r2, r0
 8005f8e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	4807      	ldr	r0, [pc, #28]	; (8005fb0 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8005f94:	4002      	ands	r2, r0
 8005f96:	4311      	orrs	r1, r2
 8005f98:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005f9a:	0020      	movs	r0, r4
 8005f9c:	f7ff ff66 	bl	8005e6c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fa0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8005fa2:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fa4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8005faa:	7028      	strb	r0, [r5, #0]
}
 8005fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	f1ffffff 	.word	0xf1ffffff

08005fb4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8005fb6:	220c      	movs	r2, #12
 8005fb8:	2100      	movs	r1, #0
 8005fba:	a801      	add	r0, sp, #4
 8005fbc:	f003 fe0d 	bl	8009bda <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005fc0:	4c1f      	ldr	r4, [pc, #124]	; (8006040 <MX_ADC1_Init+0x8c>)
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <MX_ADC1_Init+0x90>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005fc4:	2280      	movs	r2, #128	; 0x80
  hadc1.Instance = ADC1;
 8005fc6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005fc8:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005fca:	0392      	lsls	r2, r2, #14
 8005fcc:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fce:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005fd0:	05db      	lsls	r3, r3, #23
 8005fd2:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005fd4:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fd6:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 2;
 8005fd8:	3a02      	subs	r2, #2
 8005fda:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005fdc:	1c62      	adds	r2, r4, #1
 8005fde:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005fe0:	0022      	movs	r2, r4
 8005fe2:	322c      	adds	r2, #44	; 0x2c
 8005fe4:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
 8005fe6:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005fe8:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8005fea:	323c      	adds	r2, #60	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005fec:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005fee:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005ff0:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005ff2:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ff4:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ff6:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ff8:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005ffa:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005ffc:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8005ffe:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006000:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006002:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006004:	f7fc f9ec 	bl	80023e0 <HAL_ADC_Init>
 8006008:	2800      	cmp	r0, #0
 800600a:	d001      	beq.n	8006010 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 800600c:	f001 f9f3 	bl	80073f6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006010:	2301      	movs	r3, #1
 8006012:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006014:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006016:	a901      	add	r1, sp, #4
 8006018:	0020      	movs	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800601a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800601c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800601e:	f7fc fbc9 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8006022:	2800      	cmp	r0, #0
 8006024:	d001      	beq.n	800602a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8006026:	f001 f9e6 	bl	80073f6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800602a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800602c:	a901      	add	r1, sp, #4
 800602e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006030:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006032:	f7fc fbbf 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8006036:	2800      	cmp	r0, #0
 8006038:	d001      	beq.n	800603e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800603a:	f001 f9dc 	bl	80073f6 <Error_Handler>
  }

}
 800603e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8006040:	2000082c 	.word	0x2000082c
 8006044:	40012400 	.word	0x40012400

08006048 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006048:	b510      	push	{r4, lr}
 800604a:	0004      	movs	r4, r0
 800604c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800604e:	2214      	movs	r2, #20
 8006050:	2100      	movs	r1, #0
 8006052:	a803      	add	r0, sp, #12
 8006054:	f003 fdc1 	bl	8009bda <memset>
  if(adcHandle->Instance==ADC1)
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_ADC_MspInit+0x64>)
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d122      	bne.n	80060a6 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006060:	2080      	movs	r0, #128	; 0x80
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_ADC_MspInit+0x68>)
 8006064:	0340      	lsls	r0, r0, #13
 8006066:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006068:	4301      	orrs	r1, r0
 800606a:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800606c:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800606e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006070:	4002      	ands	r2, r0
 8006072:	9201      	str	r2, [sp, #4]
 8006074:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006078:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607a:	430a      	orrs	r2, r1
 800607c:	635a      	str	r2, [r3, #52]	; 0x34
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006080:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006082:	400b      	ands	r3, r1
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 8006088:	2321      	movs	r3, #33	; 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800608a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 800608c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800608e:	3b1e      	subs	r3, #30
 8006090:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006092:	f7fc fe8f 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8006096:	2200      	movs	r2, #0
 8006098:	200c      	movs	r0, #12
 800609a:	0011      	movs	r1, r2
 800609c:	f7fc fcaa 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80060a0:	200c      	movs	r0, #12
 80060a2:	f7fc fcd7 	bl	8002a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80060a6:	b008      	add	sp, #32
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	40012400 	.word	0x40012400
 80060b0:	40021000 	.word	0x40021000

080060b4 <bluetooth_refreshSelfInfo>:
uint8_t bluetooth_refreshSelfInfo(){

	//Neimplementovane

	return 1;
}
 80060b4:	2001      	movs	r0, #1
 80060b6:	4770      	bx	lr

080060b8 <bluetoothFifoFlush>:


//Vymazani bt bufferu
void bluetoothFifoFlush(){
 80060b8:	b510      	push	{r4, lr}
	memset(btFifo, 0, btFifoIndex);
 80060ba:	4c04      	ldr	r4, [pc, #16]	; (80060cc <bluetoothFifoFlush+0x14>)
 80060bc:	2100      	movs	r1, #0
 80060be:	8822      	ldrh	r2, [r4, #0]
 80060c0:	4803      	ldr	r0, [pc, #12]	; (80060d0 <bluetoothFifoFlush+0x18>)
 80060c2:	f003 fd8a 	bl	8009bda <memset>
	btFifoIndex = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	8023      	strh	r3, [r4, #0]
}
 80060ca:	bd10      	pop	{r4, pc}
 80060cc:	20002cf4 	.word	0x20002cf4
 80060d0:	200023f5 	.word	0x200023f5

080060d4 <bluetoothMsgFifoFlush>:

//Vymazani bufferu pro bt zpravy
void bluetoothMsgFifoFlush(){
 80060d4:	b510      	push	{r4, lr}
	memset(btMsgFifo, 0, btMsgFifoIndex);
 80060d6:	4c04      	ldr	r4, [pc, #16]	; (80060e8 <bluetoothMsgFifoFlush+0x14>)
 80060d8:	2100      	movs	r1, #0
 80060da:	8822      	ldrh	r2, [r4, #0]
 80060dc:	4803      	ldr	r0, [pc, #12]	; (80060ec <bluetoothMsgFifoFlush+0x18>)
 80060de:	f003 fd7c 	bl	8009bda <memset>
	btMsgFifoIndex = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	8023      	strh	r3, [r4, #0]
}
 80060e6:	bd10      	pop	{r4, pc}
 80060e8:	20003820 	.word	0x20003820
 80060ec:	20002d55 	.word	0x20002d55

080060f0 <bluetoothDecodeMsg>:
uint8_t bluetoothDecodeMsg(){
 80060f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(strstr((char *)btMsgFifo, "%BONDED") != 0){
 80060f2:	4c35      	ldr	r4, [pc, #212]	; (80061c8 <bluetoothDecodeMsg+0xd8>)
 80060f4:	4935      	ldr	r1, [pc, #212]	; (80061cc <bluetoothDecodeMsg+0xdc>)
 80060f6:	0020      	movs	r0, r4
 80060f8:	f003 fe94 	bl	8009e24 <strstr>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d002      	beq.n	8006106 <bluetoothDecodeMsg+0x16>
		btStreamOpen = 1;
 8006100:	2201      	movs	r2, #1
 8006102:	4b33      	ldr	r3, [pc, #204]	; (80061d0 <bluetoothDecodeMsg+0xe0>)
 8006104:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%CONNECT") != 0){
 8006106:	4933      	ldr	r1, [pc, #204]	; (80061d4 <bluetoothDecodeMsg+0xe4>)
 8006108:	0020      	movs	r0, r4
 800610a:	f003 fe8b 	bl	8009e24 <strstr>
 800610e:	2800      	cmp	r0, #0
 8006110:	d01b      	beq.n	800614a <bluetoothDecodeMsg+0x5a>
		sscanf((char *)index+9, "%*d,%02X%02X%02X%02X%02X%02X", &btPairReq.mac[0], &btPairReq.mac[1], &btPairReq.mac[2], &btPairReq.mac[3], &btPairReq.mac[4], &btPairReq.mac[5]);
 8006112:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <bluetoothDecodeMsg+0xe8>)
 8006114:	4a31      	ldr	r2, [pc, #196]	; (80061dc <bluetoothDecodeMsg+0xec>)
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <bluetoothDecodeMsg+0xf0>)
 800611a:	4932      	ldr	r1, [pc, #200]	; (80061e4 <bluetoothDecodeMsg+0xf4>)
 800611c:	9302      	str	r3, [sp, #8]
 800611e:	4b32      	ldr	r3, [pc, #200]	; (80061e8 <bluetoothDecodeMsg+0xf8>)
 8006120:	3009      	adds	r0, #9
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	4b31      	ldr	r3, [pc, #196]	; (80061ec <bluetoothDecodeMsg+0xfc>)
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <bluetoothDecodeMsg+0x100>)
 800612a:	f003 fe3b 	bl	8009da4 <siscanf>
		sprintf(btPairReq.name, "%02X-%02X-%02X-%02X-%02X-%02X", btPairReq.mac[0], btPairReq.mac[1], btPairReq.mac[2], btPairReq.mac[3], btPairReq.mac[4], btPairReq.mac[5]);
 800612e:	4831      	ldr	r0, [pc, #196]	; (80061f4 <bluetoothDecodeMsg+0x104>)
 8006130:	4931      	ldr	r1, [pc, #196]	; (80061f8 <bluetoothDecodeMsg+0x108>)
 8006132:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006138:	9302      	str	r3, [sp, #8]
 800613a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006144:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006146:	f003 fe0b 	bl	8009d60 <siprintf>
	if(strstr((char *)btMsgFifo, "%DISCONNECT") != 0){
 800614a:	492c      	ldr	r1, [pc, #176]	; (80061fc <bluetoothDecodeMsg+0x10c>)
 800614c:	0020      	movs	r0, r4
 800614e:	f003 fe69 	bl	8009e24 <strstr>
 8006152:	2800      	cmp	r0, #0
 8006154:	d005      	beq.n	8006162 <bluetoothDecodeMsg+0x72>
		oledType = OLED_MENU;
 8006156:	2202      	movs	r2, #2
 8006158:	4b29      	ldr	r3, [pc, #164]	; (8006200 <bluetoothDecodeMsg+0x110>)
 800615a:	601a      	str	r2, [r3, #0]
		btStreamOpen = 0;
 800615c:	2200      	movs	r2, #0
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <bluetoothDecodeMsg+0xe0>)
 8006160:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%KEY:") != 0){
 8006162:	4928      	ldr	r1, [pc, #160]	; (8006204 <bluetoothDecodeMsg+0x114>)
 8006164:	0020      	movs	r0, r4
 8006166:	f003 fe5d 	bl	8009e24 <strstr>
 800616a:	2800      	cmp	r0, #0
 800616c:	d008      	beq.n	8006180 <bluetoothDecodeMsg+0x90>
		sscanf((char *)index+5, "%06ld", &btPairReq.pin);
 800616e:	4926      	ldr	r1, [pc, #152]	; (8006208 <bluetoothDecodeMsg+0x118>)
 8006170:	3005      	adds	r0, #5
 8006172:	4a26      	ldr	r2, [pc, #152]	; (800620c <bluetoothDecodeMsg+0x11c>)
 8006174:	f003 fe16 	bl	8009da4 <siscanf>
		oled_setDisplayedSplash(oled_BtDevPairRequestSplash, &btPairReq);
 8006178:	491e      	ldr	r1, [pc, #120]	; (80061f4 <bluetoothDecodeMsg+0x104>)
 800617a:	4825      	ldr	r0, [pc, #148]	; (8006210 <bluetoothDecodeMsg+0x120>)
 800617c:	f002 f944 	bl	8008408 <oled_setDisplayedSplash>
	if(strstr((char *)btMsgFifo, "%STREAM_OPEN") != 0){
 8006180:	4924      	ldr	r1, [pc, #144]	; (8006214 <bluetoothDecodeMsg+0x124>)
 8006182:	0020      	movs	r0, r4
 8006184:	f003 fe4e 	bl	8009e24 <strstr>
 8006188:	2800      	cmp	r0, #0
 800618a:	d002      	beq.n	8006192 <bluetoothDecodeMsg+0xa2>
		btStreamOpen = 1;
 800618c:	2201      	movs	r2, #1
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <bluetoothDecodeMsg+0xe0>)
 8006190:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%SECURED") != 0){
 8006192:	4921      	ldr	r1, [pc, #132]	; (8006218 <bluetoothDecodeMsg+0x128>)
 8006194:	0020      	movs	r0, r4
 8006196:	f003 fe45 	bl	8009e24 <strstr>
 800619a:	2800      	cmp	r0, #0
 800619c:	d002      	beq.n	80061a4 <bluetoothDecodeMsg+0xb4>
		btStreamOpen = 1;
 800619e:	2201      	movs	r2, #1
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <bluetoothDecodeMsg+0xe0>)
 80061a2:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%KEY_REQ") != 0){
 80061a4:	491d      	ldr	r1, [pc, #116]	; (800621c <bluetoothDecodeMsg+0x12c>)
 80061a6:	0020      	movs	r0, r4
 80061a8:	f003 fe3c 	bl	8009e24 <strstr>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d005      	beq.n	80061bc <bluetoothDecodeMsg+0xcc>
		btPairReq.pin = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	4910      	ldr	r1, [pc, #64]	; (80061f4 <bluetoothDecodeMsg+0x104>)
		oled_setDisplayedSplash(oled_BtDevKeyRequestSplash, &btPairReq);
 80061b4:	481a      	ldr	r0, [pc, #104]	; (8006220 <bluetoothDecodeMsg+0x130>)
		btPairReq.pin = 0;
 80061b6:	658b      	str	r3, [r1, #88]	; 0x58
		oled_setDisplayedSplash(oled_BtDevKeyRequestSplash, &btPairReq);
 80061b8:	f002 f926 	bl	8008408 <oled_setDisplayedSplash>
	bluetoothMsgFifoFlush();
 80061bc:	f7ff ff8a 	bl	80060d4 <bluetoothMsgFifoFlush>
}
 80061c0:	2001      	movs	r0, #1
 80061c2:	b004      	add	sp, #16
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20002d55 	.word	0x20002d55
 80061cc:	0800c0d5 	.word	0x0800c0d5
 80061d0:	200029f4 	.word	0x200029f4
 80061d4:	0800c0dd 	.word	0x0800c0dd
 80061d8:	20002638 	.word	0x20002638
 80061dc:	20002624 	.word	0x20002624
 80061e0:	20002634 	.word	0x20002634
 80061e4:	0800c0e6 	.word	0x0800c0e6
 80061e8:	20002630 	.word	0x20002630
 80061ec:	2000262c 	.word	0x2000262c
 80061f0:	20002628 	.word	0x20002628
 80061f4:	200025f0 	.word	0x200025f0
 80061f8:	0800c103 	.word	0x0800c103
 80061fc:	0800c121 	.word	0x0800c121
 8006200:	200009e8 	.word	0x200009e8
 8006204:	0800c12d 	.word	0x0800c12d
 8006208:	0800c354 	.word	0x0800c354
 800620c:	20002648 	.word	0x20002648
 8006210:	08008ab1 	.word	0x08008ab1
 8006214:	0800c133 	.word	0x0800c133
 8006218:	0800c140 	.word	0x0800c140
 800621c:	0800c149 	.word	0x0800c149
 8006220:	08008c5d 	.word	0x08008c5d

08006224 <bluetoothCMD_ACK>:
}



//Rutina pro odeslani prikazu a kontrolu odpovedi v podobe stringu ale bez zaznamenani odpovedi
uint8_t bluetoothCMD_ACK(char *cmd, char *ack){
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	0004      	movs	r4, r0
 8006228:	000e      	movs	r6, r1

	//Vycisti se buffer
	bluetoothFifoFlush();
 800622a:	f7ff ff45 	bl	80060b8 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 800622e:	7823      	ldrb	r3, [r4, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d11f      	bne.n	8006274 <bluetoothCMD_ACK+0x50>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Ceka se nez se vrati vyzadana odpoved nebo nez nastane timeout
	uint32_t now = HAL_GetTick();
 8006234:	f7fc f8b8 	bl	80023a8 <HAL_GetTick>
 8006238:	0004      	movs	r4, r0
	while(strstr((char *)btFifo, ack) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 800623a:	4f18      	ldr	r7, [pc, #96]	; (800629c <bluetoothCMD_ACK+0x78>)
 800623c:	0031      	movs	r1, r6
 800623e:	0038      	movs	r0, r7
 8006240:	f003 fdf0 	bl	8009e24 <strstr>
 8006244:	4d16      	ldr	r5, [pc, #88]	; (80062a0 <bluetoothCMD_ACK+0x7c>)
 8006246:	2800      	cmp	r0, #0
 8006248:	d021      	beq.n	800628e <bluetoothCMD_ACK+0x6a>

	//Odpoved se zkopiruje
	memcpy(btMsgFifo, btFifo, btFifoIndex);
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <bluetoothCMD_ACK+0x80>)
 800624c:	0039      	movs	r1, r7
 800624e:	881e      	ldrh	r6, [r3, #0]
 8006250:	4815      	ldr	r0, [pc, #84]	; (80062a8 <bluetoothCMD_ACK+0x84>)
 8006252:	0032      	movs	r2, r6
 8006254:	f003 fcb8 	bl	8009bc8 <memcpy>
	btMsgFifoIndex = btFifoIndex;
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <bluetoothCMD_ACK+0x88>)
 800625a:	801e      	strh	r6, [r3, #0]
	//Radeji se dekoduje, pokud do ni prisel napriklad jeste nejaky prikaz
	bluetoothDecodeMsg();
 800625c:	f7ff ff48 	bl	80060f0 <bluetoothDecodeMsg>
	//Vycisti se buffer
	bluetoothFifoFlush();
 8006260:	f7ff ff2a 	bl	80060b8 <bluetoothFifoFlush>

	//Pokud byl timeout, vrati 0
	if(HAL_GetTick() - now >= BT_TIMEOUT) return 0;
 8006264:	f7fc f8a0 	bl	80023a8 <HAL_GetTick>
 8006268:	2300      	movs	r3, #0
 800626a:	1b04      	subs	r4, r0, r4
 800626c:	42a5      	cmp	r5, r4
 800626e:	415b      	adcs	r3, r3
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e00a      	b.n	800628a <bluetoothCMD_ACK+0x66>
 8006274:	0020      	movs	r0, r4
 8006276:	f7f9 ff4f 	bl	8000118 <strlen>
 800627a:	0021      	movs	r1, r4
 800627c:	b282      	uxth	r2, r0
 800627e:	480c      	ldr	r0, [pc, #48]	; (80062b0 <bluetoothCMD_ACK+0x8c>)
 8006280:	f7fe fe12 	bl	8004ea8 <HAL_UART_Transmit_IT>
 8006284:	2300      	movs	r3, #0
 8006286:	4298      	cmp	r0, r3
 8006288:	d0d4      	beq.n	8006234 <bluetoothCMD_ACK+0x10>

	return 1;

}
 800628a:	0018      	movs	r0, r3
 800628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while(strstr((char *)btFifo, ack) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 800628e:	f7fc f88b 	bl	80023a8 <HAL_GetTick>
 8006292:	1b00      	subs	r0, r0, r4
 8006294:	42a8      	cmp	r0, r5
 8006296:	d9d0      	bls.n	800623a <bluetoothCMD_ACK+0x16>
 8006298:	e7d7      	b.n	800624a <bluetoothCMD_ACK+0x26>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	200023f5 	.word	0x200023f5
 80062a0:	000007cf 	.word	0x000007cf
 80062a4:	20002cf4 	.word	0x20002cf4
 80062a8:	20002d55 	.word	0x20002d55
 80062ac:	20003820 	.word	0x20003820
 80062b0:	2000456c 	.word	0x2000456c

080062b4 <bluetoothEnterCMD>:
uint8_t bluetoothEnterCMD(){
 80062b4:	b510      	push	{r4, lr}
	if(!bluetoothCMD_ACK("$$$", "CMD>")) return 0;
 80062b6:	4905      	ldr	r1, [pc, #20]	; (80062cc <bluetoothEnterCMD+0x18>)
 80062b8:	4805      	ldr	r0, [pc, #20]	; (80062d0 <bluetoothEnterCMD+0x1c>)
 80062ba:	f7ff ffb3 	bl	8006224 <bluetoothCMD_ACK>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d002      	beq.n	80062c8 <bluetoothEnterCMD+0x14>
	btCmdMode = 1;
 80062c2:	2001      	movs	r0, #1
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <bluetoothEnterCMD+0x20>)
 80062c6:	7018      	strb	r0, [r3, #0]
}
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	0800c152 	.word	0x0800c152
 80062d0:	0800c157 	.word	0x0800c157
 80062d4:	20002d54 	.word	0x20002d54

080062d8 <bluetoothLeaveCMD>:
uint8_t bluetoothLeaveCMD(){
 80062d8:	b510      	push	{r4, lr}
	if(!bluetoothCMD_ACK("---\r", BT_END)) return 0;
 80062da:	4905      	ldr	r1, [pc, #20]	; (80062f0 <bluetoothLeaveCMD+0x18>)
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <bluetoothLeaveCMD+0x1c>)
 80062de:	f7ff ffa1 	bl	8006224 <bluetoothCMD_ACK>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d003      	beq.n	80062ee <bluetoothLeaveCMD+0x16>
	btCmdMode = 0;
 80062e6:	2200      	movs	r2, #0
	return 1;
 80062e8:	2001      	movs	r0, #1
	btCmdMode = 0;
 80062ea:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <bluetoothLeaveCMD+0x20>)
 80062ec:	701a      	strb	r2, [r3, #0]
}
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	0800c2c5 	.word	0x0800c2c5
 80062f4:	0800c2cb 	.word	0x0800c2cb
 80062f8:	20002d54 	.word	0x20002d54

080062fc <bluetoothInit>:
uint8_t bluetoothInit(){
 80062fc:	b570      	push	{r4, r5, r6, lr}
	btFifoIndex = 0;
 80062fe:	2400      	movs	r4, #0
	btCmdMode = 1;
 8006300:	2501      	movs	r5, #1
	btFifoIndex = 0;
 8006302:	4b42      	ldr	r3, [pc, #264]	; (800640c <bluetoothInit+0x110>)
	workerDesert(&workerBtEnterPairingKey);
 8006304:	4842      	ldr	r0, [pc, #264]	; (8006410 <bluetoothInit+0x114>)
	btFifoIndex = 0;
 8006306:	801c      	strh	r4, [r3, #0]
	btMsgFifoIndex = 0;
 8006308:	4b42      	ldr	r3, [pc, #264]	; (8006414 <bluetoothInit+0x118>)
 800630a:	801c      	strh	r4, [r3, #0]
	btCmdMode = 1;
 800630c:	4b42      	ldr	r3, [pc, #264]	; (8006418 <bluetoothInit+0x11c>)
 800630e:	701d      	strb	r5, [r3, #0]
	btStatusMsg = 0;
 8006310:	4b42      	ldr	r3, [pc, #264]	; (800641c <bluetoothInit+0x120>)
 8006312:	701c      	strb	r4, [r3, #0]
	btStreamOpen = 0;
 8006314:	4b42      	ldr	r3, [pc, #264]	; (8006420 <bluetoothInit+0x124>)
 8006316:	701c      	strb	r4, [r3, #0]
	btNullCounter = 0;
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <bluetoothInit+0x128>)
 800631a:	701c      	strb	r4, [r3, #0]
	btComMessageFlag = 0;
 800631c:	4b42      	ldr	r3, [pc, #264]	; (8006428 <bluetoothInit+0x12c>)
 800631e:	701c      	strb	r4, [r3, #0]
	btComMessageSizeFlag = 0;
 8006320:	4b42      	ldr	r3, [pc, #264]	; (800642c <bluetoothInit+0x130>)
 8006322:	701c      	strb	r4, [r3, #0]
	btMessageLen = 0;
 8006324:	4b42      	ldr	r3, [pc, #264]	; (8006430 <bluetoothInit+0x134>)
 8006326:	801c      	strh	r4, [r3, #0]
	btMsgReceivedFlag = 0;
 8006328:	4b42      	ldr	r3, [pc, #264]	; (8006434 <bluetoothInit+0x138>)
 800632a:	701c      	strb	r4, [r3, #0]
	workerDesert(&workerBtEnterPairingKey);
 800632c:	f001 f869 	bl	8007402 <workerDesert>
	workerDesert(&workerBtBondDev);
 8006330:	4841      	ldr	r0, [pc, #260]	; (8006438 <bluetoothInit+0x13c>)
 8006332:	f001 f866 	bl	8007402 <workerDesert>
	workerDesert(&workerBtScanDev);
 8006336:	4841      	ldr	r0, [pc, #260]	; (800643c <bluetoothInit+0x140>)
 8006338:	f001 f863 	bl	8007402 <workerDesert>
	HAL_UART_Receive_IT(&huart2, &btFifoByte, 1);
 800633c:	002a      	movs	r2, r5
 800633e:	4940      	ldr	r1, [pc, #256]	; (8006440 <bluetoothInit+0x144>)
 8006340:	4840      	ldr	r0, [pc, #256]	; (8006444 <bluetoothInit+0x148>)
 8006342:	f7fe fe0b 	bl	8004f5c <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_RESET);
 8006346:	2180      	movs	r1, #128	; 0x80
 8006348:	0022      	movs	r2, r4
 800634a:	0049      	lsls	r1, r1, #1
 800634c:	483e      	ldr	r0, [pc, #248]	; (8006448 <bluetoothInit+0x14c>)
 800634e:	f7fc fddf 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_MODE_GPIO_Port, BT_MODE_Pin, GPIO_PIN_SET);
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	002a      	movs	r2, r5
 8006356:	0089      	lsls	r1, r1, #2
 8006358:	483b      	ldr	r0, [pc, #236]	; (8006448 <bluetoothInit+0x14c>)
 800635a:	f7fc fdd9 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800635e:	200a      	movs	r0, #10
 8006360:	f7fc f828 	bl	80023b4 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_SET);
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	002a      	movs	r2, r5
 8006368:	0049      	lsls	r1, r1, #1
 800636a:	4837      	ldr	r0, [pc, #220]	; (8006448 <bluetoothInit+0x14c>)
 800636c:	f7fc fdd0 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006370:	2064      	movs	r0, #100	; 0x64
 8006372:	f7fc f81f 	bl	80023b4 <HAL_Delay>
	if(!bluetoothEnterCMD()) return 0;
 8006376:	f7ff ff9d 	bl	80062b4 <bluetoothEnterCMD>
 800637a:	42a0      	cmp	r0, r4
 800637c:	d101      	bne.n	8006382 <bluetoothInit+0x86>
 800637e:	2000      	movs	r0, #0
}
 8006380:	bd70      	pop	{r4, r5, r6, pc}
	if(!bluetoothCMD_ACK("GS\r", "C0")){
 8006382:	4932      	ldr	r1, [pc, #200]	; (800644c <bluetoothInit+0x150>)
 8006384:	4832      	ldr	r0, [pc, #200]	; (8006450 <bluetoothInit+0x154>)
 8006386:	f7ff ff4d 	bl	8006224 <bluetoothCMD_ACK>
 800638a:	4c32      	ldr	r4, [pc, #200]	; (8006454 <bluetoothInit+0x158>)
 800638c:	2800      	cmp	r0, #0
 800638e:	d029      	beq.n	80063e4 <bluetoothInit+0xe8>
	if(!bluetoothCMD_ACK("GN\r", "MIDIController")){
 8006390:	4931      	ldr	r1, [pc, #196]	; (8006458 <bluetoothInit+0x15c>)
 8006392:	4832      	ldr	r0, [pc, #200]	; (800645c <bluetoothInit+0x160>)
 8006394:	f7ff ff46 	bl	8006224 <bluetoothCMD_ACK>
 8006398:	2800      	cmp	r0, #0
 800639a:	d030      	beq.n	80063fe <bluetoothInit+0x102>
	if(!bluetoothCMD_ACK("SGA,0\r", BT_AOK)) return 0;
 800639c:	0021      	movs	r1, r4
 800639e:	4830      	ldr	r0, [pc, #192]	; (8006460 <bluetoothInit+0x164>)
 80063a0:	f7ff ff40 	bl	8006224 <bluetoothCMD_ACK>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d0ea      	beq.n	800637e <bluetoothInit+0x82>
	if(!bluetoothCMD_ACK("SGC,0\r", BT_AOK)) return 0;
 80063a8:	0021      	movs	r1, r4
 80063aa:	482e      	ldr	r0, [pc, #184]	; (8006464 <bluetoothInit+0x168>)
 80063ac:	f7ff ff3a 	bl	8006224 <bluetoothCMD_ACK>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d0e4      	beq.n	800637e <bluetoothInit+0x82>
	if(!bluetoothCMD_ACK("SDA,0180\r", BT_AOK)) return 0;
 80063b4:	0021      	movs	r1, r4
 80063b6:	482c      	ldr	r0, [pc, #176]	; (8006468 <bluetoothInit+0x16c>)
 80063b8:	f7ff ff34 	bl	8006224 <bluetoothCMD_ACK>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0de      	beq.n	800637e <bluetoothInit+0x82>
	if(!bluetoothCMD_ACK("SDN,Vojtech Vosahlo\r", BT_AOK)) return 0;
 80063c0:	0021      	movs	r1, r4
 80063c2:	482a      	ldr	r0, [pc, #168]	; (800646c <bluetoothInit+0x170>)
 80063c4:	f7ff ff2e 	bl	8006224 <bluetoothCMD_ACK>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d0d8      	beq.n	800637e <bluetoothInit+0x82>
	if(!bluetoothCMD_ACK("SA,5\r", BT_AOK)) return 0;
 80063cc:	0021      	movs	r1, r4
 80063ce:	4828      	ldr	r0, [pc, #160]	; (8006470 <bluetoothInit+0x174>)
 80063d0:	f7ff ff28 	bl	8006224 <bluetoothCMD_ACK>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d0d2      	beq.n	800637e <bluetoothInit+0x82>
	if(!bluetoothLeaveCMD()) return 0;
 80063d8:	f7ff ff7e 	bl	80062d8 <bluetoothLeaveCMD>
 80063dc:	1e43      	subs	r3, r0, #1
 80063de:	4198      	sbcs	r0, r3
	if(!bluetoothEnterCMD()) return 0;
 80063e0:	b2c0      	uxtb	r0, r0
 80063e2:	e7cd      	b.n	8006380 <bluetoothInit+0x84>
		if(!bluetoothCMD_ACK("SS,C0\r", BT_AOK)) return 0;
 80063e4:	0021      	movs	r1, r4
 80063e6:	4823      	ldr	r0, [pc, #140]	; (8006474 <bluetoothInit+0x178>)
 80063e8:	f7ff ff1c 	bl	8006224 <bluetoothCMD_ACK>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d0c6      	beq.n	800637e <bluetoothInit+0x82>
		if(!bluetoothCMD_ACK("R,1\r", "REBOOT")) return 0;
 80063f0:	4921      	ldr	r1, [pc, #132]	; (8006478 <bluetoothInit+0x17c>)
 80063f2:	4822      	ldr	r0, [pc, #136]	; (800647c <bluetoothInit+0x180>)
 80063f4:	f7ff ff16 	bl	8006224 <bluetoothCMD_ACK>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d1c9      	bne.n	8006390 <bluetoothInit+0x94>
 80063fc:	e7bf      	b.n	800637e <bluetoothInit+0x82>
		if(!bluetoothCMD_ACK("SN,MIDIController\r", BT_AOK)) return 0;
 80063fe:	0021      	movs	r1, r4
 8006400:	481f      	ldr	r0, [pc, #124]	; (8006480 <bluetoothInit+0x184>)
 8006402:	f7ff ff0f 	bl	8006224 <bluetoothCMD_ACK>
 8006406:	2800      	cmp	r0, #0
 8006408:	d1c8      	bne.n	800639c <bluetoothInit+0xa0>
 800640a:	e7b8      	b.n	800637e <bluetoothInit+0x82>
 800640c:	20002cf4 	.word	0x20002cf4
 8006410:	200009ee 	.word	0x200009ee
 8006414:	20003820 	.word	0x20003820
 8006418:	20002d54 	.word	0x20002d54
 800641c:	200029f5 	.word	0x200029f5
 8006420:	200029f4 	.word	0x200029f4
 8006424:	20002cb0 	.word	0x20002cb0
 8006428:	20002651 	.word	0x20002651
 800642c:	20002650 	.word	0x20002650
 8006430:	200008a0 	.word	0x200008a0
 8006434:	200009f8 	.word	0x200009f8
 8006438:	20002652 	.word	0x20002652
 800643c:	200009f1 	.word	0x200009f1
 8006440:	200008a4 	.word	0x200008a4
 8006444:	2000456c 	.word	0x2000456c
 8006448:	50000400 	.word	0x50000400
 800644c:	0800c24e 	.word	0x0800c24e
 8006450:	0800c251 	.word	0x0800c251
 8006454:	0800c268 	.word	0x0800c268
 8006458:	0800c255 	.word	0x0800c255
 800645c:	0800c264 	.word	0x0800c264
 8006460:	0800c27f 	.word	0x0800c27f
 8006464:	0800c299 	.word	0x0800c299
 8006468:	0800c2a0 	.word	0x0800c2a0
 800646c:	0800c2aa 	.word	0x0800c2aa
 8006470:	0800c2bf 	.word	0x0800c2bf
 8006474:	0800c26c 	.word	0x0800c26c
 8006478:	0800c273 	.word	0x0800c273
 800647c:	0800c27a 	.word	0x0800c27a
 8006480:	0800c286 	.word	0x0800c286

08006484 <bluetoothCMD_Until>:

//Rutina pro odeslani prikazu a zastaveni na terminatoru, vrati zpet i text odpovedi
uint8_t bluetoothCMD_Until(char *cmd, char *terminator, char (*recvBuffer)[]){
 8006484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006486:	0004      	movs	r4, r0
 8006488:	000f      	movs	r7, r1
 800648a:	9201      	str	r2, [sp, #4]

	//Vycisti se buffer
	bluetoothFifoFlush();
 800648c:	f7ff fe14 	bl	80060b8 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 8006490:	7823      	ldrb	r3, [r4, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d11b      	bne.n	80064ce <bluetoothCMD_Until+0x4a>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Ceka se nez se vrati terminator nebo nez nastane timeout
	uint32_t now = HAL_GetTick();
 8006496:	f7fb ff87 	bl	80023a8 <HAL_GetTick>
 800649a:	0004      	movs	r4, r0
	while(strstr((char *)btFifo, terminator) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 800649c:	4d15      	ldr	r5, [pc, #84]	; (80064f4 <bluetoothCMD_Until+0x70>)
 800649e:	0039      	movs	r1, r7
 80064a0:	0028      	movs	r0, r5
 80064a2:	f003 fcbf 	bl	8009e24 <strstr>
 80064a6:	4e14      	ldr	r6, [pc, #80]	; (80064f8 <bluetoothCMD_Until+0x74>)
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d01d      	beq.n	80064e8 <bluetoothCMD_Until+0x64>

	//Odpoved se okopiruje do bufferu na vraceni
	memcpy(recvBuffer, (char *)btFifo, btFifoIndex-1);
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <bluetoothCMD_Until+0x78>)
 80064ae:	0029      	movs	r1, r5
 80064b0:	881a      	ldrh	r2, [r3, #0]
 80064b2:	9801      	ldr	r0, [sp, #4]
 80064b4:	3a01      	subs	r2, #1
 80064b6:	f003 fb87 	bl	8009bc8 <memcpy>

	//Vycisti se buffer
	bluetoothFifoFlush();
 80064ba:	f7ff fdfd 	bl	80060b8 <bluetoothFifoFlush>

	//Pokud byl timeout, vrati 0
	if(HAL_GetTick() - now >= BT_TIMEOUT) return 0;
 80064be:	f7fb ff73 	bl	80023a8 <HAL_GetTick>
 80064c2:	2300      	movs	r3, #0
 80064c4:	1b04      	subs	r4, r0, r4
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	415b      	adcs	r3, r3
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e00a      	b.n	80064e4 <bluetoothCMD_Until+0x60>
 80064ce:	0020      	movs	r0, r4
 80064d0:	f7f9 fe22 	bl	8000118 <strlen>
 80064d4:	0021      	movs	r1, r4
 80064d6:	b282      	uxth	r2, r0
 80064d8:	4809      	ldr	r0, [pc, #36]	; (8006500 <bluetoothCMD_Until+0x7c>)
 80064da:	f7fe fce5 	bl	8004ea8 <HAL_UART_Transmit_IT>
 80064de:	2300      	movs	r3, #0
 80064e0:	4298      	cmp	r0, r3
 80064e2:	d0d8      	beq.n	8006496 <bluetoothCMD_Until+0x12>

	return 1;
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	while(strstr((char *)btFifo, terminator) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 80064e8:	f7fb ff5e 	bl	80023a8 <HAL_GetTick>
 80064ec:	1b00      	subs	r0, r0, r4
 80064ee:	42b0      	cmp	r0, r6
 80064f0:	d9d4      	bls.n	800649c <bluetoothCMD_Until+0x18>
 80064f2:	e7db      	b.n	80064ac <bluetoothCMD_Until+0x28>
 80064f4:	200023f5 	.word	0x200023f5
 80064f8:	000007cf 	.word	0x000007cf
 80064fc:	20002cf4 	.word	0x20002cf4
 8006500:	2000456c 	.word	0x2000456c

08006504 <bluetoothCMD_Time>:

//Rutina pro odeslani prikazu a zaznamenavani odpovedi po nejaky cas
uint8_t bluetoothCMD_Time(char *cmd, uint8_t s, char (*recvBuffer)[]){
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	0006      	movs	r6, r0
 8006508:	000c      	movs	r4, r1
 800650a:	0015      	movs	r5, r2

	//Vycisti se buffer
	bluetoothFifoFlush();
 800650c:	f7ff fdd4 	bl	80060b8 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 8006510:	7833      	ldrb	r3, [r6, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d115      	bne.n	8006542 <bluetoothCMD_Time+0x3e>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Pocka se zadany cas
	uint32_t now = HAL_GetTick();
 8006516:	f7fb ff47 	bl	80023a8 <HAL_GetTick>

	while(HAL_GetTick() - now < (s*1000));
 800651a:	23fa      	movs	r3, #250	; 0xfa
	uint32_t now = HAL_GetTick();
 800651c:	0006      	movs	r6, r0
	while(HAL_GetTick() - now < (s*1000));
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	435c      	muls	r4, r3
 8006522:	f7fb ff41 	bl	80023a8 <HAL_GetTick>
 8006526:	1b80      	subs	r0, r0, r6
 8006528:	42a0      	cmp	r0, r4
 800652a:	d3fa      	bcc.n	8006522 <bluetoothCMD_Time+0x1e>

	//Odpoved se okopiruje do bufferu na vraceni
	memcpy(recvBuffer, (char *)btFifo, btFifoIndex-1);
 800652c:	4b0b      	ldr	r3, [pc, #44]	; (800655c <bluetoothCMD_Time+0x58>)
 800652e:	490c      	ldr	r1, [pc, #48]	; (8006560 <bluetoothCMD_Time+0x5c>)
 8006530:	881a      	ldrh	r2, [r3, #0]
 8006532:	0028      	movs	r0, r5
 8006534:	3a01      	subs	r2, #1
 8006536:	f003 fb47 	bl	8009bc8 <memcpy>

	//Vycisti se buffer
	bluetoothFifoFlush();
 800653a:	f7ff fdbd 	bl	80060b8 <bluetoothFifoFlush>

	return 1;
 800653e:	2301      	movs	r3, #1
 8006540:	e00a      	b.n	8006558 <bluetoothCMD_Time+0x54>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 8006542:	0030      	movs	r0, r6
 8006544:	f7f9 fde8 	bl	8000118 <strlen>
 8006548:	0031      	movs	r1, r6
 800654a:	b282      	uxth	r2, r0
 800654c:	4805      	ldr	r0, [pc, #20]	; (8006564 <bluetoothCMD_Time+0x60>)
 800654e:	f7fe fcab 	bl	8004ea8 <HAL_UART_Transmit_IT>
 8006552:	2300      	movs	r3, #0
 8006554:	4298      	cmp	r0, r3
 8006556:	d0de      	beq.n	8006516 <bluetoothCMD_Time+0x12>
}
 8006558:	0018      	movs	r0, r3
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	20002cf4 	.word	0x20002cf4
 8006560:	200023f5 	.word	0x200023f5
 8006564:	2000456c 	.word	0x2000456c

08006568 <bluetoothConnect>:

	return 1;
}

//Rutina pro pripojeni k zarizeni
uint8_t bluetoothConnect(char * mac){
 8006568:	b570      	push	{r4, r5, r6, lr}
	//Vstoupi do CMD modu
	if(!btCmdMode) bluetoothEnterCMD();
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <bluetoothConnect+0x48>)
uint8_t bluetoothConnect(char * mac){
 800656c:	0005      	movs	r5, r0
	if(!btCmdMode) bluetoothEnterCMD();
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <bluetoothConnect+0x10>
 8006574:	f7ff fe9e 	bl	80062b4 <bluetoothEnterCMD>
	//Okopiruje si MAC
	char * cmd = (char *) malloc(50);
 8006578:	2032      	movs	r0, #50	; 0x32
 800657a:	f003 fb11 	bl	8009ba0 <malloc>
 800657e:	0004      	movs	r4, r0
	//Vysle prikaz pro pripojeni
	sprintf(cmd, "C,0,%s\r", mac);
 8006580:	002a      	movs	r2, r5
 8006582:	490c      	ldr	r1, [pc, #48]	; (80065b4 <bluetoothConnect+0x4c>)
 8006584:	f003 fbec 	bl	8009d60 <siprintf>
	sprintf(oledHeader, "%s" ,cmd);
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <bluetoothConnect+0x50>)
 800658a:	0021      	movs	r1, r4
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f003 fc41 	bl	8009e14 <strcpy>
	//Pokud se pripojeni nepovedlo, vrati 0
	if(!bluetoothCMD_ACK(cmd, "%STREAM_OPEN")){
 8006592:	0020      	movs	r0, r4
 8006594:	4909      	ldr	r1, [pc, #36]	; (80065bc <bluetoothConnect+0x54>)
 8006596:	f7ff fe45 	bl	8006224 <bluetoothCMD_ACK>
 800659a:	1e04      	subs	r4, r0, #0
 800659c:	d103      	bne.n	80065a6 <bluetoothConnect+0x3e>
		//Odejde z CMD modu
		bluetoothLeaveCMD();
 800659e:	f7ff fe9b 	bl	80062d8 <bluetoothLeaveCMD>

	//Odejde z CMD modu
	//bluetoothLeaveCMD();

	return 1;
}
 80065a2:	0020      	movs	r0, r4
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
	}else btStreamOpen = 1;
 80065a6:	2401      	movs	r4, #1
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <bluetoothConnect+0x58>)
 80065aa:	701c      	strb	r4, [r3, #0]
	return 1;
 80065ac:	e7f9      	b.n	80065a2 <bluetoothConnect+0x3a>
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	20002d54 	.word	0x20002d54
 80065b4:	0800c0cd 	.word	0x0800c0cd
 80065b8:	20002a00 	.word	0x20002a00
 80065bc:	0800c133 	.word	0x0800c133
 80065c0:	200029f4 	.word	0x200029f4

080065c4 <countOccurances>:

	return 1;
}

//Rutina pro pocitani vyskytu v textu
uint32_t countOccurances(char * buff, char * what){
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	000c      	movs	r4, r1
	uint32_t count = 0;
 80065c8:	2500      	movs	r5, #0
	const char * tmp = buff;
	while((tmp = strstr(tmp, what)))
 80065ca:	0021      	movs	r1, r4
 80065cc:	f003 fc2a 	bl	8009e24 <strstr>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d101      	bne.n	80065d8 <countOccurances+0x14>
		count++;
		tmp++;
	}

	return count;
}
 80065d4:	0028      	movs	r0, r5
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
		count++;
 80065d8:	3501      	adds	r5, #1
		tmp++;
 80065da:	3001      	adds	r0, #1
 80065dc:	e7f5      	b.n	80065ca <countOccurances+0x6>

080065de <replacechar>:

//Rutina pro nahrazeni charakteru v textu
uint32_t replacechar(char *str, char orig, char rep){
 80065de:	b570      	push	{r4, r5, r6, lr}
 80065e0:	000d      	movs	r5, r1
 80065e2:	0016      	movs	r6, r2
    char *ix = str;
    uint32_t n = 0;
 80065e4:	2400      	movs	r4, #0
    while((ix = strchr(ix, orig)) != NULL) {
 80065e6:	0029      	movs	r1, r5
 80065e8:	f003 fc06 	bl	8009df8 <strchr>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d101      	bne.n	80065f4 <replacechar+0x16>
        *ix++ = rep;
        n++;
    }
    return n;
}
 80065f0:	0020      	movs	r0, r4
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
        *ix++ = rep;
 80065f4:	1c58      	adds	r0, r3, #1
 80065f6:	701e      	strb	r6, [r3, #0]
        n++;
 80065f8:	3401      	adds	r4, #1
 80065fa:	e7f4      	b.n	80065e6 <replacechar+0x8>

080065fc <splitString>:

//Rutina pro rozdeleni stringu na substringy
uint32_t splitString(char * string, char * delim, char ** array){
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	0016      	movs	r6, r2
 8006600:	000d      	movs	r5, r1

	uint32_t count = 0;
	char * token = strtok(string, delim);
 8006602:	f003 fc27 	bl	8009e54 <strtok>
	array[count++] = token;

	while( token != NULL ) {
 8006606:	2401      	movs	r4, #1
	array[count++] = token;
 8006608:	6030      	str	r0, [r6, #0]
	while( token != NULL ) {
 800660a:	2800      	cmp	r0, #0
 800660c:	d101      	bne.n	8006612 <splitString+0x16>
	      token = strtok(NULL, delim);
	      array[count++] = token;
	}

	return count;
}
 800660e:	0020      	movs	r0, r4
 8006610:	bd70      	pop	{r4, r5, r6, pc}
	      token = strtok(NULL, delim);
 8006612:	0029      	movs	r1, r5
 8006614:	2000      	movs	r0, #0
 8006616:	f003 fc1d 	bl	8009e54 <strtok>
	      array[count++] = token;
 800661a:	00a3      	lsls	r3, r4, #2
 800661c:	50f0      	str	r0, [r6, r3]
 800661e:	3401      	adds	r4, #1
 8006620:	e7f3      	b.n	800660a <splitString+0xe>
	...

08006624 <bluetoothGetScannedDevices>:
	memset(buff, 0, 300);
 8006624:	2296      	movs	r2, #150	; 0x96
uint8_t bluetoothGetScannedDevices(){
 8006626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006628:	b0e9      	sub	sp, #420	; 0x1a4
	memset(buff, 0, 300);
 800662a:	0052      	lsls	r2, r2, #1
 800662c:	2100      	movs	r1, #0
 800662e:	a81d      	add	r0, sp, #116	; 0x74
 8006630:	f003 fad3 	bl	8009bda <memset>
	if(!bluetoothEnterCMD()) return 0;
 8006634:	f7ff fe3e 	bl	80062b4 <bluetoothEnterCMD>
 8006638:	2800      	cmp	r0, #0
 800663a:	d102      	bne.n	8006642 <bluetoothGetScannedDevices+0x1e>
		if(!bluetoothLeaveCMD()) return 0;
 800663c:	2000      	movs	r0, #0
}
 800663e:	b069      	add	sp, #420	; 0x1a4
 8006640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!bluetoothCMD_Time("F\r", 30, &buff)){
 8006642:	aa1d      	add	r2, sp, #116	; 0x74
 8006644:	211e      	movs	r1, #30
 8006646:	4892      	ldr	r0, [pc, #584]	; (8006890 <bluetoothGetScannedDevices+0x26c>)
 8006648:	f7ff ff5c 	bl	8006504 <bluetoothCMD_Time>
 800664c:	2800      	cmp	r0, #0
 800664e:	d102      	bne.n	8006656 <bluetoothGetScannedDevices+0x32>
		if(!bluetoothLeaveCMD()) return 0;
 8006650:	f7ff fe42 	bl	80062d8 <bluetoothLeaveCMD>
 8006654:	e7f2      	b.n	800663c <bluetoothGetScannedDevices+0x18>
	btScannedCount = countOccurances(buff, "%")/2;
 8006656:	498f      	ldr	r1, [pc, #572]	; (8006894 <bluetoothGetScannedDevices+0x270>)
 8006658:	a81d      	add	r0, sp, #116	; 0x74
 800665a:	f7ff ffb3 	bl	80065c4 <countOccurances>
 800665e:	4c8e      	ldr	r4, [pc, #568]	; (8006898 <bluetoothGetScannedDevices+0x274>)
 8006660:	0840      	lsrs	r0, r0, #1
 8006662:	7020      	strb	r0, [r4, #0]
	replacechar(buff, '\r', ' ');
 8006664:	2220      	movs	r2, #32
 8006666:	210d      	movs	r1, #13
 8006668:	a81d      	add	r0, sp, #116	; 0x74
 800666a:	f7ff ffb8 	bl	80065de <replacechar>
	splitString(buff, "\n", devices);
 800666e:	aa09      	add	r2, sp, #36	; 0x24
 8006670:	498a      	ldr	r1, [pc, #552]	; (800689c <bluetoothGetScannedDevices+0x278>)
 8006672:	a81d      	add	r0, sp, #116	; 0x74
 8006674:	f7ff ffc2 	bl	80065fc <splitString>
	if(btScannedCount != 0){
 8006678:	7823      	ldrb	r3, [r4, #0]
 800667a:	2600      	movs	r6, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d000      	beq.n	8006682 <bluetoothGetScannedDevices+0x5e>
 8006680:	e08e      	b.n	80067a0 <bluetoothGetScannedDevices+0x17c>
	if(!bluetoothCMD_Until("X\r", BT_CMD, &buff)){
 8006682:	aa1d      	add	r2, sp, #116	; 0x74
 8006684:	4986      	ldr	r1, [pc, #536]	; (80068a0 <bluetoothGetScannedDevices+0x27c>)
 8006686:	4887      	ldr	r0, [pc, #540]	; (80068a4 <bluetoothGetScannedDevices+0x280>)
 8006688:	f7ff fefc 	bl	8006484 <bluetoothCMD_Until>
 800668c:	2800      	cmp	r0, #0
 800668e:	d0df      	beq.n	8006650 <bluetoothGetScannedDevices+0x2c>
	if(!bluetoothLeaveCMD()) return 0;
 8006690:	f7ff fe22 	bl	80062d8 <bluetoothLeaveCMD>
 8006694:	2800      	cmp	r0, #0
 8006696:	d0d1      	beq.n	800663c <bluetoothGetScannedDevices+0x18>
	if(btScannedCount == 0) return 0;
 8006698:	4b7f      	ldr	r3, [pc, #508]	; (8006898 <bluetoothGetScannedDevices+0x274>)
 800669a:	7818      	ldrb	r0, [r3, #0]
 800669c:	1e43      	subs	r3, r0, #1
 800669e:	4198      	sbcs	r0, r3
	if(!bluetoothEnterCMD()) return 0;
 80066a0:	b2c0      	uxtb	r0, r0
 80066a2:	e7cc      	b.n	800663e <bluetoothGetScannedDevices+0x1a>
			if(strstr((char *)devices[i+1], ",,") - (char *)devices[i+1] < 16 && strstr((char *)devices[i+1], ",,")){
 80066a4:	1c73      	adds	r3, r6, #1
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	aa09      	add	r2, sp, #36	; 0x24
 80066aa:	589f      	ldr	r7, [r3, r2]
 80066ac:	497e      	ldr	r1, [pc, #504]	; (80068a8 <bluetoothGetScannedDevices+0x284>)
 80066ae:	0038      	movs	r0, r7
 80066b0:	f003 fbb8 	bl	8009e24 <strstr>
 80066b4:	4c7d      	ldr	r4, [pc, #500]	; (80068ac <bluetoothGetScannedDevices+0x288>)
 80066b6:	1bc3      	subs	r3, r0, r7
 80066b8:	2b0f      	cmp	r3, #15
 80066ba:	dc37      	bgt.n	800672c <bluetoothGetScannedDevices+0x108>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d100      	bne.n	80066c2 <bluetoothGetScannedDevices+0x9e>
 80066c0:	e086      	b.n	80067d0 <bluetoothGetScannedDevices+0x1ac>
 80066c2:	205c      	movs	r0, #92	; 0x5c
 80066c4:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,,%[^,],%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].uuid, &btScanned[i].rssi);
 80066c6:	0001      	movs	r1, r0
 80066c8:	3154      	adds	r1, #84	; 0x54
 80066ca:	1861      	adds	r1, r4, r1
 80066cc:	1825      	adds	r5, r4, r0
 80066ce:	9106      	str	r1, [sp, #24]
 80066d0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80066d2:	0003      	movs	r3, r0
 80066d4:	9105      	str	r1, [sp, #20]
 80066d6:	0001      	movs	r1, r0
 80066d8:	314c      	adds	r1, #76	; 0x4c
 80066da:	1861      	adds	r1, r4, r1
 80066dc:	9104      	str	r1, [sp, #16]
 80066de:	0001      	movs	r1, r0
 80066e0:	3148      	adds	r1, #72	; 0x48
 80066e2:	1861      	adds	r1, r4, r1
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	0001      	movs	r1, r0
 80066e8:	3144      	adds	r1, #68	; 0x44
 80066ea:	1861      	adds	r1, r4, r1
 80066ec:	0002      	movs	r2, r0
 80066ee:	9102      	str	r1, [sp, #8]
 80066f0:	0001      	movs	r1, r0
 80066f2:	3338      	adds	r3, #56	; 0x38
 80066f4:	303c      	adds	r0, #60	; 0x3c
 80066f6:	3234      	adds	r2, #52	; 0x34
 80066f8:	3140      	adds	r1, #64	; 0x40
 80066fa:	18e3      	adds	r3, r4, r3
 80066fc:	18a2      	adds	r2, r4, r2
 80066fe:	1861      	adds	r1, r4, r1
 8006700:	1824      	adds	r4, r4, r0
 8006702:	9101      	str	r1, [sp, #4]
 8006704:	9400      	str	r4, [sp, #0]
 8006706:	496a      	ldr	r1, [pc, #424]	; (80068b0 <bluetoothGetScannedDevices+0x28c>)
 8006708:	0038      	movs	r0, r7
 800670a:	f003 fb4b 	bl	8009da4 <siscanf>
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 800670e:	0028      	movs	r0, r5
 8006710:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006712:	4968      	ldr	r1, [pc, #416]	; (80068b4 <bluetoothGetScannedDevices+0x290>)
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006718:	9302      	str	r3, [sp, #8]
 800671a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006724:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 8006726:	f003 fb1b 	bl	8009d60 <siprintf>
 800672a:	e024      	b.n	8006776 <bluetoothGetScannedDevices+0x152>
 800672c:	205c      	movs	r0, #92	; 0x5c
 800672e:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%[^,],,%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].name, &btScanned[i].rssi);
 8006730:	0001      	movs	r1, r0
 8006732:	3154      	adds	r1, #84	; 0x54
 8006734:	1861      	adds	r1, r4, r1
 8006736:	9106      	str	r1, [sp, #24]
 8006738:	1821      	adds	r1, r4, r0
 800673a:	9105      	str	r1, [sp, #20]
 800673c:	0001      	movs	r1, r0
 800673e:	314c      	adds	r1, #76	; 0x4c
 8006740:	1861      	adds	r1, r4, r1
 8006742:	9104      	str	r1, [sp, #16]
 8006744:	0001      	movs	r1, r0
 8006746:	3148      	adds	r1, #72	; 0x48
 8006748:	1861      	adds	r1, r4, r1
 800674a:	9103      	str	r1, [sp, #12]
 800674c:	0001      	movs	r1, r0
 800674e:	3144      	adds	r1, #68	; 0x44
 8006750:	1861      	adds	r1, r4, r1
 8006752:	0003      	movs	r3, r0
 8006754:	0002      	movs	r2, r0
 8006756:	9102      	str	r1, [sp, #8]
 8006758:	0001      	movs	r1, r0
 800675a:	3338      	adds	r3, #56	; 0x38
 800675c:	303c      	adds	r0, #60	; 0x3c
 800675e:	3234      	adds	r2, #52	; 0x34
 8006760:	3140      	adds	r1, #64	; 0x40
 8006762:	1861      	adds	r1, r4, r1
 8006764:	18e3      	adds	r3, r4, r3
 8006766:	18a2      	adds	r2, r4, r2
 8006768:	1824      	adds	r4, r4, r0
 800676a:	9101      	str	r1, [sp, #4]
 800676c:	9400      	str	r4, [sp, #0]
 800676e:	4952      	ldr	r1, [pc, #328]	; (80068b8 <bluetoothGetScannedDevices+0x294>)
 8006770:	0038      	movs	r0, r7
 8006772:	f003 fb17 	bl	8009da4 <siscanf>
			btScanedDevices[i].font = &Font_11x18;
 8006776:	4951      	ldr	r1, [pc, #324]	; (80068bc <bluetoothGetScannedDevices+0x298>)
 8006778:	0170      	lsls	r0, r6, #5
 800677a:	4a51      	ldr	r2, [pc, #324]	; (80068c0 <bluetoothGetScannedDevices+0x29c>)
 800677c:	180b      	adds	r3, r1, r0
 800677e:	609a      	str	r2, [r3, #8]
			btScanedDevices[i].name = btScanned[i].name;
 8006780:	225c      	movs	r2, #92	; 0x5c
 8006782:	4372      	muls	r2, r6
 8006784:	4c49      	ldr	r4, [pc, #292]	; (80068ac <bluetoothGetScannedDevices+0x288>)
		for(i = 0; i < btScannedCount; i++){
 8006786:	3601      	adds	r6, #1
			btScanedDevices[i].name = btScanned[i].name;
 8006788:	1912      	adds	r2, r2, r4
 800678a:	5042      	str	r2, [r0, r1]
			btScanedDevices[i].selected = 0;
 800678c:	2200      	movs	r2, #0
 800678e:	605a      	str	r2, [r3, #4]
			btScanedDevices[i].hasSpecialSelector = 0;
 8006790:	60da      	str	r2, [r3, #12]
			btScanedDevices[i].specharNotSelected = 0;
 8006792:	611a      	str	r2, [r3, #16]
			btScanedDevices[i].specharSelected = 0;
 8006794:	615a      	str	r2, [r3, #20]
			btScanedDevices[i].submenuLevel = 3;
 8006796:	3203      	adds	r2, #3
 8006798:	619a      	str	r2, [r3, #24]
			btScanedDevices[i].parentItem = &bluetoothmenu[0].name;
 800679a:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <bluetoothGetScannedDevices+0x2a0>)
		for(i = 0; i < btScannedCount; i++){
 800679c:	b2f6      	uxtb	r6, r6
			btScanedDevices[i].parentItem = &bluetoothmenu[0].name;
 800679e:	61da      	str	r2, [r3, #28]
		for(i = 0; i < btScannedCount; i++){
 80067a0:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <bluetoothGetScannedDevices+0x274>)
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	4296      	cmp	r6, r2
 80067a6:	d200      	bcs.n	80067aa <bluetoothGetScannedDevices+0x186>
 80067a8:	e77c      	b.n	80066a4 <bluetoothGetScannedDevices+0x80>
		btScanedDevices[btScannedCount].font = &Font_11x18;
 80067aa:	4944      	ldr	r1, [pc, #272]	; (80068bc <bluetoothGetScannedDevices+0x298>)
 80067ac:	0152      	lsls	r2, r2, #5
 80067ae:	4844      	ldr	r0, [pc, #272]	; (80068c0 <bluetoothGetScannedDevices+0x29c>)
 80067b0:	188b      	adds	r3, r1, r2
 80067b2:	6098      	str	r0, [r3, #8]
		btScanedDevices[btScannedCount].name = "Zpet";
 80067b4:	4844      	ldr	r0, [pc, #272]	; (80068c8 <bluetoothGetScannedDevices+0x2a4>)
 80067b6:	5050      	str	r0, [r2, r1]
		btScanedDevices[btScannedCount].hasSpecialSelector = 1;
 80067b8:	2101      	movs	r1, #1
		btScanedDevices[btScannedCount].selected = 0;
 80067ba:	2200      	movs	r2, #0
		btScanedDevices[btScannedCount].hasSpecialSelector = 1;
 80067bc:	60d9      	str	r1, [r3, #12]
		btScanedDevices[btScannedCount].specharNotSelected = 36;
 80067be:	3123      	adds	r1, #35	; 0x23
 80067c0:	6119      	str	r1, [r3, #16]
		btScanedDevices[btScannedCount].specharSelected = 37;
 80067c2:	3101      	adds	r1, #1
 80067c4:	6159      	str	r1, [r3, #20]
		btScanedDevices[btScannedCount].submenuLevel = 3;
 80067c6:	3922      	subs	r1, #34	; 0x22
		btScanedDevices[btScannedCount].selected = 0;
 80067c8:	605a      	str	r2, [r3, #4]
		btScanedDevices[btScannedCount].submenuLevel = 3;
 80067ca:	6199      	str	r1, [r3, #24]
		btScanedDevices[btScannedCount].parentItem = 0;
 80067cc:	61da      	str	r2, [r3, #28]
 80067ce:	e758      	b.n	8006682 <bluetoothGetScannedDevices+0x5e>
			}else if(strstr((char *)devices[i+1], "Brcst") - (char *)devices[i+1] >= 16){
 80067d0:	493e      	ldr	r1, [pc, #248]	; (80068cc <bluetoothGetScannedDevices+0x2a8>)
 80067d2:	0038      	movs	r0, r7
 80067d4:	f003 fb26 	bl	8009e24 <strstr>
 80067d8:	1bc0      	subs	r0, r0, r7
 80067da:	280f      	cmp	r0, #15
 80067dc:	dd30      	ble.n	8006840 <bluetoothGetScannedDevices+0x21c>
 80067de:	255c      	movs	r5, #92	; 0x5c
 80067e0:	4375      	muls	r5, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%02X,%*[^%]", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, &btScanned[i].rssi);
 80067e2:	0029      	movs	r1, r5
 80067e4:	3154      	adds	r1, #84	; 0x54
 80067e6:	1861      	adds	r1, r4, r1
 80067e8:	9105      	str	r1, [sp, #20]
 80067ea:	0029      	movs	r1, r5
 80067ec:	314c      	adds	r1, #76	; 0x4c
 80067ee:	1861      	adds	r1, r4, r1
 80067f0:	9104      	str	r1, [sp, #16]
 80067f2:	0029      	movs	r1, r5
 80067f4:	3148      	adds	r1, #72	; 0x48
 80067f6:	1861      	adds	r1, r4, r1
 80067f8:	9103      	str	r1, [sp, #12]
 80067fa:	0029      	movs	r1, r5
 80067fc:	3144      	adds	r1, #68	; 0x44
 80067fe:	1861      	adds	r1, r4, r1
 8006800:	9102      	str	r1, [sp, #8]
 8006802:	0029      	movs	r1, r5
 8006804:	3140      	adds	r1, #64	; 0x40
 8006806:	1861      	adds	r1, r4, r1
 8006808:	9101      	str	r1, [sp, #4]
 800680a:	0029      	movs	r1, r5
 800680c:	002b      	movs	r3, r5
 800680e:	002a      	movs	r2, r5
 8006810:	313c      	adds	r1, #60	; 0x3c
 8006812:	1861      	adds	r1, r4, r1
 8006814:	3338      	adds	r3, #56	; 0x38
 8006816:	3234      	adds	r2, #52	; 0x34
 8006818:	18e3      	adds	r3, r4, r3
 800681a:	18a2      	adds	r2, r4, r2
 800681c:	9100      	str	r1, [sp, #0]
 800681e:	0038      	movs	r0, r7
 8006820:	492b      	ldr	r1, [pc, #172]	; (80068d0 <bluetoothGetScannedDevices+0x2ac>)
 8006822:	f003 fabf 	bl	8009da4 <siscanf>
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 8006826:	1960      	adds	r0, r4, r5
 8006828:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800682a:	4922      	ldr	r1, [pc, #136]	; (80068b4 <bluetoothGetScannedDevices+0x290>)
 800682c:	9303      	str	r3, [sp, #12]
 800682e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006830:	9302      	str	r3, [sp, #8]
 8006832:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800683c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800683e:	e772      	b.n	8006726 <bluetoothGetScannedDevices+0x102>
 8006840:	205c      	movs	r0, #92	; 0x5c
 8006842:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%[^,],%[^,],%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].name, btScanned[i].uuid, &btScanned[i].rssi);
 8006844:	0001      	movs	r1, r0
 8006846:	3154      	adds	r1, #84	; 0x54
 8006848:	1861      	adds	r1, r4, r1
 800684a:	9107      	str	r1, [sp, #28]
 800684c:	1821      	adds	r1, r4, r0
 800684e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8006850:	9105      	str	r1, [sp, #20]
 8006852:	0001      	movs	r1, r0
 8006854:	314c      	adds	r1, #76	; 0x4c
 8006856:	1861      	adds	r1, r4, r1
 8006858:	9104      	str	r1, [sp, #16]
 800685a:	0001      	movs	r1, r0
 800685c:	3148      	adds	r1, #72	; 0x48
 800685e:	1861      	adds	r1, r4, r1
 8006860:	9103      	str	r1, [sp, #12]
 8006862:	0001      	movs	r1, r0
 8006864:	3144      	adds	r1, #68	; 0x44
 8006866:	1861      	adds	r1, r4, r1
 8006868:	0003      	movs	r3, r0
 800686a:	0002      	movs	r2, r0
 800686c:	9102      	str	r1, [sp, #8]
 800686e:	0001      	movs	r1, r0
 8006870:	3338      	adds	r3, #56	; 0x38
 8006872:	303c      	adds	r0, #60	; 0x3c
 8006874:	3234      	adds	r2, #52	; 0x34
 8006876:	3140      	adds	r1, #64	; 0x40
 8006878:	1861      	adds	r1, r4, r1
 800687a:	18e3      	adds	r3, r4, r3
 800687c:	18a2      	adds	r2, r4, r2
 800687e:	1824      	adds	r4, r4, r0
 8006880:	9101      	str	r1, [sp, #4]
 8006882:	9506      	str	r5, [sp, #24]
 8006884:	9400      	str	r4, [sp, #0]
 8006886:	4913      	ldr	r1, [pc, #76]	; (80068d4 <bluetoothGetScannedDevices+0x2b0>)
 8006888:	0038      	movs	r0, r7
 800688a:	f003 fa8b 	bl	8009da4 <siscanf>
 800688e:	e772      	b.n	8006776 <bluetoothGetScannedDevices+0x152>
 8006890:	0800c17f 	.word	0x0800c17f
 8006894:	0800c182 	.word	0x0800c182
 8006898:	200029fe 	.word	0x200029fe
 800689c:	0800c2c9 	.word	0x0800c2c9
 80068a0:	0800c152 	.word	0x0800c152
 80068a4:	0800c24b 	.word	0x0800c24b
 80068a8:	0800c184 	.word	0x0800c184
 80068ac:	20001680 	.word	0x20001680
 80068b0:	0800c187 	.word	0x0800c187
 80068b4:	0800c103 	.word	0x0800c103
 80068b8:	0800c1b4 	.word	0x0800c1b4
 80068bc:	20002a30 	.word	0x20002a30
 80068c0:	200001e8 	.word	0x200001e8
 80068c4:	20000008 	.word	0x20000008
 80068c8:	0800c246 	.word	0x0800c246
 80068cc:	0800c1e1 	.word	0x0800c1e1
 80068d0:	0800c1e7 	.word	0x0800c1e7
 80068d4:	0800c214 	.word	0x0800c214

080068d8 <bluetoothGetBondedDevices>:
	memset(buff, 0, 300);
 80068d8:	2296      	movs	r2, #150	; 0x96
uint8_t bluetoothGetBondedDevices(){
 80068da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068dc:	b0e7      	sub	sp, #412	; 0x19c
	memset(buff, 0, 300);
 80068de:	0052      	lsls	r2, r2, #1
 80068e0:	2100      	movs	r1, #0
 80068e2:	a81b      	add	r0, sp, #108	; 0x6c
 80068e4:	f003 f979 	bl	8009bda <memset>
	if(!bluetoothEnterCMD()) return 0;
 80068e8:	f7ff fce4 	bl	80062b4 <bluetoothEnterCMD>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d103      	bne.n	80068f8 <bluetoothGetBondedDevices+0x20>
 80068f0:	2400      	movs	r4, #0
}
 80068f2:	0020      	movs	r0, r4
 80068f4:	b067      	add	sp, #412	; 0x19c
 80068f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!bluetoothCMD_Until("LB\r", BT_END, &buff)){
 80068f8:	aa1b      	add	r2, sp, #108	; 0x6c
 80068fa:	4941      	ldr	r1, [pc, #260]	; (8006a00 <bluetoothGetBondedDevices+0x128>)
 80068fc:	4841      	ldr	r0, [pc, #260]	; (8006a04 <bluetoothGetBondedDevices+0x12c>)
 80068fe:	f7ff fdc1 	bl	8006484 <bluetoothCMD_Until>
 8006902:	1e04      	subs	r4, r0, #0
 8006904:	d102      	bne.n	800690c <bluetoothGetBondedDevices+0x34>
		if(!bluetoothLeaveCMD()) return 0;
 8006906:	f7ff fce7 	bl	80062d8 <bluetoothLeaveCMD>
 800690a:	e7f2      	b.n	80068f2 <bluetoothGetBondedDevices+0x1a>
	btBondedCount = countOccurances(buff, "\n");
 800690c:	4d3e      	ldr	r5, [pc, #248]	; (8006a08 <bluetoothGetBondedDevices+0x130>)
 800690e:	a81b      	add	r0, sp, #108	; 0x6c
 8006910:	0029      	movs	r1, r5
 8006912:	f7ff fe57 	bl	80065c4 <countOccurances>
 8006916:	4c3d      	ldr	r4, [pc, #244]	; (8006a0c <bluetoothGetBondedDevices+0x134>)
	replacechar(buff, '\r', ' ');
 8006918:	2220      	movs	r2, #32
	btBondedCount = countOccurances(buff, "\n");
 800691a:	7020      	strb	r0, [r4, #0]
	replacechar(buff, '\r', ' ');
 800691c:	210d      	movs	r1, #13
 800691e:	a81b      	add	r0, sp, #108	; 0x6c
 8006920:	f7ff fe5d 	bl	80065de <replacechar>
	splitString(buff, "\n", devices);
 8006924:	0029      	movs	r1, r5
 8006926:	aa07      	add	r2, sp, #28
 8006928:	a81b      	add	r0, sp, #108	; 0x6c
 800692a:	f7ff fe67 	bl	80065fc <splitString>
	if(btBondedCount != 0){
 800692e:	7823      	ldrb	r3, [r4, #0]
 8006930:	2500      	movs	r5, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d14c      	bne.n	80069d0 <bluetoothGetBondedDevices+0xf8>
	if(!bluetoothLeaveCMD()) return 0;
 8006936:	f7ff fccf 	bl	80062d8 <bluetoothLeaveCMD>
 800693a:	2800      	cmp	r0, #0
 800693c:	d0d8      	beq.n	80068f0 <bluetoothGetBondedDevices+0x18>
	if(btBondedCount == 0) return 0;
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <bluetoothGetBondedDevices+0x134>)
 8006940:	781c      	ldrb	r4, [r3, #0]
 8006942:	1e63      	subs	r3, r4, #1
 8006944:	419c      	sbcs	r4, r3
	if(!bluetoothEnterCMD()) return 0;
 8006946:	b2e4      	uxtb	r4, r4
 8006948:	e7d3      	b.n	80068f2 <bluetoothGetBondedDevices+0x1a>
 800694a:	265c      	movs	r6, #92	; 0x5c
 800694c:	436e      	muls	r6, r5
			sscanf((char *)devices[i], "%*d,%02X%02X%02X%02X%02X%02X,%d", &btBonded[i].mac[0], &btBonded[i].mac[1], &btBonded[i].mac[2], &btBonded[i].mac[3], &btBonded[i].mac[4], &btBonded[i].mac[5], &btBonded[i].mactype);
 800694e:	0031      	movs	r1, r6
 8006950:	4c2f      	ldr	r4, [pc, #188]	; (8006a10 <bluetoothGetBondedDevices+0x138>)
 8006952:	314c      	adds	r1, #76	; 0x4c
 8006954:	1909      	adds	r1, r1, r4
 8006956:	9104      	str	r1, [sp, #16]
 8006958:	0031      	movs	r1, r6
 800695a:	3148      	adds	r1, #72	; 0x48
 800695c:	1909      	adds	r1, r1, r4
 800695e:	9103      	str	r1, [sp, #12]
 8006960:	0031      	movs	r1, r6
 8006962:	3144      	adds	r1, #68	; 0x44
 8006964:	1909      	adds	r1, r1, r4
 8006966:	9102      	str	r1, [sp, #8]
 8006968:	0031      	movs	r1, r6
 800696a:	3140      	adds	r1, #64	; 0x40
 800696c:	1909      	adds	r1, r1, r4
 800696e:	9101      	str	r1, [sp, #4]
 8006970:	0031      	movs	r1, r6
 8006972:	0033      	movs	r3, r6
 8006974:	0032      	movs	r2, r6
 8006976:	313c      	adds	r1, #60	; 0x3c
 8006978:	1909      	adds	r1, r1, r4
 800697a:	9100      	str	r1, [sp, #0]
 800697c:	00a8      	lsls	r0, r5, #2
 800697e:	3338      	adds	r3, #56	; 0x38
 8006980:	3234      	adds	r2, #52	; 0x34
 8006982:	af07      	add	r7, sp, #28
 8006984:	191b      	adds	r3, r3, r4
 8006986:	1912      	adds	r2, r2, r4
 8006988:	4922      	ldr	r1, [pc, #136]	; (8006a14 <bluetoothGetBondedDevices+0x13c>)
			sprintf(btBonded[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btBonded[i].mac[0], btBonded[i].mac[1], btBonded[i].mac[2], btBonded[i].mac[3], btBonded[i].mac[4], btBonded[i].mac[5]);
 800698a:	1934      	adds	r4, r6, r4
			sscanf((char *)devices[i], "%*d,%02X%02X%02X%02X%02X%02X,%d", &btBonded[i].mac[0], &btBonded[i].mac[1], &btBonded[i].mac[2], &btBonded[i].mac[3], &btBonded[i].mac[4], &btBonded[i].mac[5], &btBonded[i].mactype);
 800698c:	59c0      	ldr	r0, [r0, r7]
 800698e:	f003 fa09 	bl	8009da4 <siscanf>
			sprintf(btBonded[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btBonded[i].mac[0], btBonded[i].mac[1], btBonded[i].mac[2], btBonded[i].mac[3], btBonded[i].mac[4], btBonded[i].mac[5]);
 8006992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006994:	4920      	ldr	r1, [pc, #128]	; (8006a18 <bluetoothGetBondedDevices+0x140>)
 8006996:	9303      	str	r3, [sp, #12]
 8006998:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800699a:	0020      	movs	r0, r4
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80069aa:	f003 f9d9 	bl	8009d60 <siprintf>
			btBondedDevicesMenu[i].font = &Font_11x18;
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <bluetoothGetBondedDevices+0x144>)
 80069b0:	0169      	lsls	r1, r5, #5
 80069b2:	1853      	adds	r3, r2, r1
			btBondedDevicesMenu[i].name = btBonded[i].name;
 80069b4:	508c      	str	r4, [r1, r2]
			btBondedDevicesMenu[i].selected = 0;
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]
			btBondedDevicesMenu[i].hasSpecialSelector = 0;
 80069ba:	60da      	str	r2, [r3, #12]
			btBondedDevicesMenu[i].specharNotSelected = 0;
 80069bc:	611a      	str	r2, [r3, #16]
			btBondedDevicesMenu[i].specharSelected = 0;
 80069be:	615a      	str	r2, [r3, #20]
			btBondedDevicesMenu[i].submenuLevel = 3;
 80069c0:	3203      	adds	r2, #3
			btBondedDevicesMenu[i].font = &Font_11x18;
 80069c2:	4817      	ldr	r0, [pc, #92]	; (8006a20 <bluetoothGetBondedDevices+0x148>)
			btBondedDevicesMenu[i].submenuLevel = 3;
 80069c4:	619a      	str	r2, [r3, #24]
			btBondedDevicesMenu[i].parentItem = &bluetoothmenu[0].name;
 80069c6:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <bluetoothGetBondedDevices+0x14c>)
		for(i = 0; i < btBondedCount; i++){
 80069c8:	3501      	adds	r5, #1
			btBondedDevicesMenu[i].font = &Font_11x18;
 80069ca:	6098      	str	r0, [r3, #8]
			btBondedDevicesMenu[i].parentItem = &bluetoothmenu[0].name;
 80069cc:	61da      	str	r2, [r3, #28]
		for(i = 0; i < btBondedCount; i++){
 80069ce:	b2ed      	uxtb	r5, r5
 80069d0:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <bluetoothGetBondedDevices+0x134>)
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	4295      	cmp	r5, r2
 80069d6:	d3b8      	bcc.n	800694a <bluetoothGetBondedDevices+0x72>
		btBondedDevicesMenu[btBondedCount].font = &Font_11x18;
 80069d8:	4910      	ldr	r1, [pc, #64]	; (8006a1c <bluetoothGetBondedDevices+0x144>)
 80069da:	0152      	lsls	r2, r2, #5
 80069dc:	4810      	ldr	r0, [pc, #64]	; (8006a20 <bluetoothGetBondedDevices+0x148>)
 80069de:	188b      	adds	r3, r1, r2
 80069e0:	6098      	str	r0, [r3, #8]
		btBondedDevicesMenu[btBondedCount].name = "Zpet";
 80069e2:	4811      	ldr	r0, [pc, #68]	; (8006a28 <bluetoothGetBondedDevices+0x150>)
 80069e4:	5050      	str	r0, [r2, r1]
		btBondedDevicesMenu[btBondedCount].hasSpecialSelector = 1;
 80069e6:	2101      	movs	r1, #1
		btBondedDevicesMenu[btBondedCount].selected = 0;
 80069e8:	2200      	movs	r2, #0
		btBondedDevicesMenu[btBondedCount].hasSpecialSelector = 1;
 80069ea:	60d9      	str	r1, [r3, #12]
		btBondedDevicesMenu[btBondedCount].specharNotSelected = 36;
 80069ec:	3123      	adds	r1, #35	; 0x23
 80069ee:	6119      	str	r1, [r3, #16]
		btBondedDevicesMenu[btBondedCount].specharSelected = 37;
 80069f0:	3101      	adds	r1, #1
 80069f2:	6159      	str	r1, [r3, #20]
		btBondedDevicesMenu[btBondedCount].submenuLevel = 3;
 80069f4:	3922      	subs	r1, #34	; 0x22
		btBondedDevicesMenu[btBondedCount].selected = 0;
 80069f6:	605a      	str	r2, [r3, #4]
		btBondedDevicesMenu[btBondedCount].submenuLevel = 3;
 80069f8:	6199      	str	r1, [r3, #24]
		btBondedDevicesMenu[btBondedCount].parentItem = 0;
 80069fa:	61da      	str	r2, [r3, #28]
 80069fc:	e79b      	b.n	8006936 <bluetoothGetBondedDevices+0x5e>
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	0800c2c5 	.word	0x0800c2c5
 8006a04:	0800c15b 	.word	0x0800c15b
 8006a08:	0800c2c9 	.word	0x0800c2c9
 8006a0c:	20002f58 	.word	0x20002f58
 8006a10:	2000265c 	.word	0x2000265c
 8006a14:	0800c15f 	.word	0x0800c15f
 8006a18:	0800c103 	.word	0x0800c103
 8006a1c:	200008a8 	.word	0x200008a8
 8006a20:	200001e8 	.word	0x200001e8
 8006a24:	20000008 	.word	0x20000008
 8006a28:	0800c246 	.word	0x0800c246

08006a2c <bluetoothConnectKnown>:
uint8_t bluetoothConnectKnown(){
 8006a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2e:	b089      	sub	sp, #36	; 0x24
	bluetoothGetScannedDevices();
 8006a30:	f7ff fdf8 	bl	8006624 <bluetoothGetScannedDevices>
	bluetoothGetBondedDevices();
 8006a34:	f7ff ff50 	bl	80068d8 <bluetoothGetBondedDevices>
 8006a38:	215c      	movs	r1, #92	; 0x5c
	for(uint8_t b = 0; b < btBondedCount; b++){
 8006a3a:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <bluetoothConnectKnown+0xc4>)
 8006a3c:	9107      	str	r1, [sp, #28]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
	int8_t selected = -1;
 8006a40:	2701      	movs	r7, #1
	for(uint8_t b = 0; b < btBondedCount; b++){
 8006a42:	9304      	str	r3, [sp, #16]
		for(uint8_t s = 0; s < btScannedCount; s++){
 8006a44:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <bluetoothConnectKnown+0xc8>)
	int8_t selected = -1;
 8006a46:	427f      	negs	r7, r7
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <bluetoothConnectKnown+0xcc>)
 8006a4c:	434a      	muls	r2, r1
 8006a4e:	18d2      	adds	r2, r2, r3
	for(uint8_t b = 0; b < btBondedCount; b++){
 8006a50:	2300      	movs	r3, #0
				if(btScanned[s].mac[i] == btBonded[b].mac[i]){
 8006a52:	492a      	ldr	r1, [pc, #168]	; (8006afc <bluetoothConnectKnown+0xd0>)
	int8_t match = 0;
 8006a54:	001c      	movs	r4, r3
				if(btScanned[s].mac[i] == btBonded[b].mac[i]){
 8006a56:	468c      	mov	ip, r1
	for(uint8_t b = 0; b < btBondedCount; b++){
 8006a58:	9804      	ldr	r0, [sp, #16]
 8006a5a:	b2d9      	uxtb	r1, r3
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	d91e      	bls.n	8006a9e <bluetoothConnectKnown+0x72>
 8006a60:	9907      	ldr	r1, [sp, #28]
 8006a62:	4825      	ldr	r0, [pc, #148]	; (8006af8 <bluetoothConnectKnown+0xcc>)
 8006a64:	4359      	muls	r1, r3
 8006a66:	9105      	str	r1, [sp, #20]
					selected = b;
 8006a68:	b259      	sxtb	r1, r3
 8006a6a:	9106      	str	r1, [sp, #24]
 8006a6c:	e00f      	b.n	8006a8e <bluetoothConnectKnown+0x62>
 8006a6e:	2400      	movs	r4, #0
 8006a70:	0021      	movs	r1, r4
				if(btScanned[s].mac[i] == btBonded[b].mac[i]){
 8006a72:	9d05      	ldr	r5, [sp, #20]
 8006a74:	1846      	adds	r6, r0, r1
 8006a76:	194d      	adds	r5, r1, r5
 8006a78:	4465      	add	r5, ip
 8006a7a:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8006a7c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006a7e:	42ae      	cmp	r6, r5
 8006a80:	d101      	bne.n	8006a86 <bluetoothConnectKnown+0x5a>
					match++;
 8006a82:	3401      	adds	r4, #1
 8006a84:	b264      	sxtb	r4, r4
				if(match == 6){
 8006a86:	2c06      	cmp	r4, #6
 8006a88:	d105      	bne.n	8006a96 <bluetoothConnectKnown+0x6a>
					selected = b;
 8006a8a:	9f06      	ldr	r7, [sp, #24]
 8006a8c:	305c      	adds	r0, #92	; 0x5c
		for(uint8_t s = 0; s < btScannedCount; s++){
 8006a8e:	4290      	cmp	r0, r2
 8006a90:	d1ed      	bne.n	8006a6e <bluetoothConnectKnown+0x42>
 8006a92:	3301      	adds	r3, #1
 8006a94:	e7e0      	b.n	8006a58 <bluetoothConnectKnown+0x2c>
 8006a96:	3104      	adds	r1, #4
			for(uint8_t i = 0; i < 6; i++){
 8006a98:	2918      	cmp	r1, #24
 8006a9a:	d1ea      	bne.n	8006a72 <bluetoothConnectKnown+0x46>
 8006a9c:	e7f6      	b.n	8006a8c <bluetoothConnectKnown+0x60>
	if(selected != -1){
 8006a9e:	1c7b      	adds	r3, r7, #1
 8006aa0:	d102      	bne.n	8006aa8 <bluetoothConnectKnown+0x7c>
	}else return 0;
 8006aa2:	2000      	movs	r0, #0
}
 8006aa4:	b009      	add	sp, #36	; 0x24
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		char * mac = (char*) malloc(20);
 8006aa8:	2014      	movs	r0, #20
 8006aaa:	f003 f879 	bl	8009ba0 <malloc>
		sprintf(mac, "%02X%02X%02X%02X%02X%02X", btBonded[match].mac[0], btBonded[match].mac[1], btBonded[match].mac[2], btBonded[match].mac[3], btBonded[match].mac[4], btBonded[match].mac[5]);
 8006aae:	235c      	movs	r3, #92	; 0x5c
		char * mac = (char*) malloc(20);
 8006ab0:	0005      	movs	r5, r0
		sprintf(mac, "%02X%02X%02X%02X%02X%02X", btBonded[match].mac[0], btBonded[match].mac[1], btBonded[match].mac[2], btBonded[match].mac[3], btBonded[match].mac[4], btBonded[match].mac[5]);
 8006ab2:	4363      	muls	r3, r4
 8006ab4:	4c11      	ldr	r4, [pc, #68]	; (8006afc <bluetoothConnectKnown+0xd0>)
 8006ab6:	4912      	ldr	r1, [pc, #72]	; (8006b00 <bluetoothConnectKnown+0xd4>)
 8006ab8:	18e4      	adds	r4, r4, r3
 8006aba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006abc:	9303      	str	r3, [sp, #12]
 8006abe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006acc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006ace:	f003 f947 	bl	8009d60 <siprintf>
		sprintf(oledHeader, "%s" ,mac);
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <bluetoothConnectKnown+0xd8>)
 8006ad4:	0029      	movs	r1, r5
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	f003 f99c 	bl	8009e14 <strcpy>
		if(!bluetoothConnect(mac)) return 0;
 8006adc:	0028      	movs	r0, r5
 8006ade:	f7ff fd43 	bl	8006568 <bluetoothConnect>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d0dd      	beq.n	8006aa2 <bluetoothConnectKnown+0x76>
	bluetoothLeaveCMD();
 8006ae6:	f7ff fbf7 	bl	80062d8 <bluetoothLeaveCMD>
	return 1;
 8006aea:	2001      	movs	r0, #1
 8006aec:	e7da      	b.n	8006aa4 <bluetoothConnectKnown+0x78>
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	20002f58 	.word	0x20002f58
 8006af4:	200029fe 	.word	0x200029fe
 8006af8:	20001680 	.word	0x20001680
 8006afc:	2000265c 	.word	0x2000265c
 8006b00:	0800c0ea 	.word	0x0800c0ea
 8006b04:	20002a00 	.word	0x20002a00

08006b08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006b08:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <MX_DMA_Init+0x28>)
 8006b0e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006b10:	4301      	orrs	r1, r0
 8006b12:	6391      	str	r1, [r2, #56]	; 0x38
 8006b14:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006b16:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b18:	4003      	ands	r3, r0
 8006b1a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006b22:	f7fb ff67 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006b26:	2009      	movs	r0, #9
 8006b28:	f7fb ff94 	bl	8002a54 <HAL_NVIC_EnableIRQ>

}
 8006b2c:	bd07      	pop	{r0, r1, r2, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	40021000 	.word	0x40021000

08006b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b36:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b38:	2702      	movs	r7, #2
{
 8006b3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b3c:	2214      	movs	r2, #20
 8006b3e:	2100      	movs	r1, #0
 8006b40:	a803      	add	r0, sp, #12
 8006b42:	f003 f84a 	bl	8009bda <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b46:	2108      	movs	r1, #8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8006b48:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4a:	4b3c      	ldr	r3, [pc, #240]	; (8006c3c <MX_GPIO_Init+0x108>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8006b4c:	4d3c      	ldr	r5, [pc, #240]	; (8006c40 <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8006b50:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b52:	4332      	orrs	r2, r6
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34
 8006b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                          |KB_R5_Pin|BQ_OTG_Pin|BT_RST_Pin|BT_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b5a:	4032      	ands	r2, r6
 8006b5c:	9200      	str	r2, [sp, #0]
 8006b5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b62:	433a      	orrs	r2, r7
 8006b64:	635a      	str	r2, [r3, #52]	; 0x34
 8006b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b68:	403a      	ands	r2, r7
 8006b6a:	9201      	str	r2, [sp, #4]
 8006b6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b70:	430a      	orrs	r2, r1
 8006b72:	635a      	str	r2, [r3, #52]	; 0x34
 8006b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8006b76:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b78:	400b      	ands	r3, r1
 8006b7a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8006b7c:	310a      	adds	r1, #10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b7e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8006b80:	f7fc f9c6 	bl	8002f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8006b84:	2200      	movs	r2, #0
 8006b86:	0028      	movs	r0, r5
 8006b88:	492e      	ldr	r1, [pc, #184]	; (8006c44 <MX_GPIO_Init+0x110>)
 8006b8a:	f7fc f9c1 	bl	8002f10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 8006b90:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b92:	a903      	add	r1, sp, #12
 8006b94:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 8006b96:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b98:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b9a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b9e:	f7fc f909 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8006ba2:	4b29      	ldr	r3, [pc, #164]	; (8006c48 <MX_GPIO_Init+0x114>)
                          |KB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8006ba6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006baa:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bb2:	f7fc f8ff 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8006bb6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8006bb8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8006bba:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8006bbc:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8006bbe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006bc0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bc2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8006bc4:	f7fc f8f6 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	01db      	lsls	r3, r3, #7
 8006bcc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bce:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8006bd0:	a903      	add	r1, sp, #12
 8006bd2:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bd4:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 8006bd6:	3705      	adds	r7, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8006bda:	f7fc f8eb 	bl	8002db4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bde:	a903      	add	r1, sp, #12
 8006be0:	481b      	ldr	r0, [pc, #108]	; (8006c50 <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 8006be2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006be4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be8:	f7fc f8e4 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8006bec:	2310      	movs	r3, #16
 8006bee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bf0:	4b18      	ldr	r3, [pc, #96]	; (8006c54 <MX_GPIO_Init+0x120>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8006bf2:	a903      	add	r1, sp, #12
 8006bf4:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bf6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8006bfa:	f7fc f8db 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 8006bfe:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 8006c00:	a903      	add	r1, sp, #12
 8006c02:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 8006c04:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c06:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 8006c0c:	f7fc f8d2 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BT_RST_Pin|BT_MODE_Pin;
 8006c10:	23c0      	movs	r3, #192	; 0xc0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006c16:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006c1a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c1c:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1e:	3b0e      	subs	r3, #14
 8006c20:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c24:	f7fc f8c6 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8006c28:	0022      	movs	r2, r4
 8006c2a:	0021      	movs	r1, r4
 8006c2c:	0038      	movs	r0, r7
 8006c2e:	f7fb fee1 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006c32:	0038      	movs	r0, r7
 8006c34:	f7fb ff0e 	bl	8002a54 <HAL_NVIC_EnableIRQ>

}
 8006c38:	b009      	add	sp, #36	; 0x24
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	50000400 	.word	0x50000400
 8006c44:	00001f26 	.word	0x00001f26
 8006c48:	00001c06 	.word	0x00001c06
 8006c4c:	10210000 	.word	0x10210000
 8006c50:	50000c00 	.word	0x50000c00
 8006c54:	10110000 	.word	0x10110000

08006c58 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006c58:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <MX_I2C1_Init+0x58>)
 8006c5c:	4c15      	ldr	r4, [pc, #84]	; (8006cb4 <MX_I2C1_Init+0x5c>)
  hi2c1.Init.Timing = 0x00300B29;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c5e:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8006c60:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00300B29;
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <MX_I2C1_Init+0x60>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c64:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00300B29;
 8006c66:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006c68:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c6a:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8006c6c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c6e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006c70:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c72:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c74:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c76:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c78:	f7fc fab0 	bl	80031dc <HAL_I2C_Init>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8006c80:	f000 fbb9 	bl	80073f6 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c84:	2100      	movs	r1, #0
 8006c86:	0020      	movs	r0, r4
 8006c88:	f7fc ffc4 	bl	8003c14 <HAL_I2CEx_ConfigAnalogFilter>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d001      	beq.n	8006c94 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8006c90:	f000 fbb1 	bl	80073f6 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006c94:	2100      	movs	r1, #0
 8006c96:	0020      	movs	r0, r4
 8006c98:	f7fc ffe2 	bl	8003c60 <HAL_I2CEx_ConfigDigitalFilter>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d001      	beq.n	8006ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006ca0:	f000 fba9 	bl	80073f6 <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8006ca4:	2080      	movs	r0, #128	; 0x80
 8006ca6:	0340      	lsls	r0, r0, #13
 8006ca8:	f7fc fffe 	bl	8003ca8 <HAL_I2CEx_EnableFastModePlus>

}
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	40005400 	.word	0x40005400
 8006cb4:	20003b20 	.word	0x20003b20
 8006cb8:	00300b29 	.word	0x00300b29

08006cbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006cbc:	b530      	push	{r4, r5, lr}
 8006cbe:	0005      	movs	r5, r0
 8006cc0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc2:	2214      	movs	r2, #20
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	a803      	add	r0, sp, #12
 8006cc8:	f002 ff87 	bl	8009bda <memset>
  if(i2cHandle->Instance==I2C1)
 8006ccc:	4b22      	ldr	r3, [pc, #136]	; (8006d58 <HAL_I2C_MspInit+0x9c>)
 8006cce:	682a      	ldr	r2, [r5, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d13f      	bne.n	8006d54 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4c21      	ldr	r4, [pc, #132]	; (8006d5c <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd8:	4821      	ldr	r0, [pc, #132]	; (8006d60 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	6362      	str	r2, [r4, #52]	; 0x34
 8006ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ce8:	23c0      	movs	r3, #192	; 0xc0
 8006cea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cec:	3bae      	subs	r3, #174	; 0xae
 8006cee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf0:	3b11      	subs	r3, #17
 8006cf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006cf6:	3305      	adds	r3, #5
 8006cf8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cfa:	f7fc f85b 	bl	8002db4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cfe:	2180      	movs	r1, #128	; 0x80
 8006d00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006d02:	0389      	lsls	r1, r1, #14
 8006d04:	430a      	orrs	r2, r1
 8006d06:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8006d0a:	4c16      	ldr	r4, [pc, #88]	; (8006d64 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d0c:	400b      	ands	r3, r1
 8006d0e:	9302      	str	r3, [sp, #8]
 8006d10:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <HAL_I2C_MspInit+0xac>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d14:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8006d16:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8006d18:	230b      	movs	r3, #11
 8006d1a:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d1c:	3305      	adds	r3, #5
 8006d1e:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d24:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d26:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006d28:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d2a:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d2c:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d2e:	019b      	lsls	r3, r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d30:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d32:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d34:	f7fb ff0c 	bl	8002b50 <HAL_DMA_Init>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 8006d3c:	f000 fb5b 	bl	80073f6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d40:	2200      	movs	r2, #0
 8006d42:	2017      	movs	r0, #23
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006d44:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d46:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006d48:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006d4a:	f7fb fe53 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006d4e:	2017      	movs	r0, #23
 8006d50:	f7fb fe80 	bl	8002a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006d54:	b009      	add	sp, #36	; 0x24
 8006d56:	bd30      	pop	{r4, r5, pc}
 8006d58:	40005400 	.word	0x40005400
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	50000400 	.word	0x50000400
 8006d64:	20003ac4 	.word	0x20003ac4
 8006d68:	40020008 	.word	0x40020008

08006d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d6c:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d6e:	2680      	movs	r6, #128	; 0x80
{
 8006d70:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d72:	2238      	movs	r2, #56	; 0x38
 8006d74:	2100      	movs	r1, #0
 8006d76:	a812      	add	r0, sp, #72	; 0x48
 8006d78:	f002 ff2f 	bl	8009bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	2100      	movs	r1, #0
 8006d80:	a801      	add	r0, sp, #4
 8006d82:	f002 ff2a 	bl	8009bda <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d86:	00b6      	lsls	r6, r6, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d88:	2234      	movs	r2, #52	; 0x34
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	a805      	add	r0, sp, #20
 8006d8e:	f002 ff24 	bl	8009bda <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d92:	0030      	movs	r0, r6
 8006d94:	f7fc ff9c 	bl	8003cd0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006d98:	230a      	movs	r3, #10
 8006d9a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d9c:	33f6      	adds	r3, #246	; 0xf6
 8006d9e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006da0:	3bc0      	subs	r3, #192	; 0xc0
 8006da2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006da4:	3b3f      	subs	r3, #63	; 0x3f
 8006da6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006da8:	3307      	adds	r3, #7
 8006daa:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	049b      	lsls	r3, r3, #18
 8006db6:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006db8:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006dba:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dbc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006dbe:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006dc0:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006dc2:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006dc4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dc6:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006dc8:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006dca:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006dcc:	f7fc ffaa 	bl	8003d24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dd0:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006dd2:	0029      	movs	r1, r5
 8006dd4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dd6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dd8:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006dda:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ddc:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006dde:	f7fd fa11 	bl	8004204 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <SystemClock_Config+0x90>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006de4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8006de6:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006de8:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006dea:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006dec:	940d      	str	r4, [sp, #52]	; 0x34
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8006dee:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006df0:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006df2:	f7fd fac9 	bl	8004388 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8006df6:	b020      	add	sp, #128	; 0x80
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	00224042 	.word	0x00224042

08006e00 <main>:
{
 8006e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8006e02:	f7fb fab1 	bl	8002368 <HAL_Init>
  SystemClock_Config();
 8006e06:	f7ff ffb1 	bl	8006d6c <SystemClock_Config>
  MX_GPIO_Init();
 8006e0a:	f7ff fe93 	bl	8006b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8006e0e:	f7ff fe7b 	bl	8006b08 <MX_DMA_Init>
  MX_ADC1_Init();
 8006e12:	f7ff f8cf 	bl	8005fb4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8006e16:	f7ff ff1f 	bl	8006c58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006e1a:	f002 f9fd 	bl	8009218 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8006e1e:	f002 fdef 	bl	8009a00 <MX_UCPD1_Init>
  MX_TIM2_Init();
 8006e22:	f002 fce5 	bl	80097f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8006e26:	f002 fc95 	bl	8009754 <MX_TIM1_Init>
  MX_RTC_Init();
 8006e2a:	f002 f9bf 	bl	80091ac <MX_RTC_Init>
  MX_TIM3_Init();
 8006e2e:	f002 fd1b 	bl	8009868 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8006e32:	f002 fdf5 	bl	8009a20 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8006e36:	f002 fd55 	bl	80098e4 <MX_TIM6_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8006e3a:	20a0      	movs	r0, #160	; 0xa0
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	2102      	movs	r1, #2
 8006e40:	05c0      	lsls	r0, r0, #23
 8006e42:	f7fc f865 	bl	8002f10 <HAL_GPIO_WritePin>
  HAL_RTC_Init(&hrtc);
 8006e46:	4848      	ldr	r0, [pc, #288]	; (8006f68 <main+0x168>)
 8006e48:	f7fd fc02 	bl	8004650 <HAL_RTC_Init>
  oled_begin();
 8006e4c:	f001 faf0 	bl	8008430 <oled_begin>
  HAL_TIM_Base_Start_IT(&htim1);
 8006e50:	4846      	ldr	r0, [pc, #280]	; (8006f6c <main+0x16c>)
 8006e52:	f7fd fcfd 	bl	8004850 <HAL_TIM_Base_Start_IT>
  bluetoothInit();
 8006e56:	f7ff fa51 	bl	80062fc <bluetoothInit>
  if(bluetoothConnectKnown()){
 8006e5a:	f7ff fde7 	bl	8006a2c <bluetoothConnectKnown>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d00a      	beq.n	8006e78 <main+0x78>
  	  btStreamOpen = 1;
 8006e62:	2201      	movs	r2, #1
 8006e64:	4b42      	ldr	r3, [pc, #264]	; (8006f70 <main+0x170>)
  	  sprintf(oledHeader, "Conn");
 8006e66:	4943      	ldr	r1, [pc, #268]	; (8006f74 <main+0x174>)
  	  btStreamOpen = 1;
 8006e68:	701a      	strb	r2, [r3, #0]
  	  btCmdMode = 0;
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	4b42      	ldr	r3, [pc, #264]	; (8006f78 <main+0x178>)
 8006e6e:	701a      	strb	r2, [r3, #0]
  	  sprintf(oledHeader, "Conn");
 8006e70:	4b42      	ldr	r3, [pc, #264]	; (8006f7c <main+0x17c>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	f002 ffce 	bl	8009e14 <strcpy>
  oledType = OLED_MENU;
 8006e78:	2202      	movs	r2, #2
	 		  decodeMessage(uartMsgDecodeBuff, btMessageLen+6, ((uartMsgDecodeBuff[6] & 0x04) >> 2));
 8006e7a:	2501      	movs	r5, #1
  oledType = OLED_MENU;
 8006e7c:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <main+0x180>)
 8006e7e:	601a      	str	r2, [r3, #0]
	 	  if(workerBtScanDev.assert){
 8006e80:	4c40      	ldr	r4, [pc, #256]	; (8006f84 <main+0x184>)
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00d      	beq.n	8006ea4 <main+0xa4>
	 		 bluetoothGetScannedDevices();
 8006e88:	f7ff fbcc 	bl	8006624 <bluetoothGetScannedDevices>
	 		 oled_setDisplayedMenu("btScanedDevices", &btScanedDevices, sizeof(btScanedDevices)-(20-btScannedCount-1)*sizeof(btScanedDevices[19]), 0);
 8006e8c:	4b3e      	ldr	r3, [pc, #248]	; (8006f88 <main+0x188>)
 8006e8e:	483f      	ldr	r0, [pc, #252]	; (8006f8c <main+0x18c>)
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	493f      	ldr	r1, [pc, #252]	; (8006f90 <main+0x190>)
 8006e94:	3201      	adds	r2, #1
 8006e96:	0152      	lsls	r2, r2, #5
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f001 fa7b 	bl	8008394 <oled_setDisplayedMenu>
	 		 workerDesert(&workerBtScanDev);
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	f000 faaf 	bl	8007402 <workerDesert>
	 	  if(workerBtBondDev.assert){
 8006ea4:	4c3b      	ldr	r4, [pc, #236]	; (8006f94 <main+0x194>)
 8006ea6:	7823      	ldrb	r3, [r4, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <main+0xc8>
	 		 bluetoothGetBondedDevices();
 8006eac:	f7ff fd14 	bl	80068d8 <bluetoothGetBondedDevices>
	 		 oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 8006eb0:	4b39      	ldr	r3, [pc, #228]	; (8006f98 <main+0x198>)
 8006eb2:	483a      	ldr	r0, [pc, #232]	; (8006f9c <main+0x19c>)
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	493a      	ldr	r1, [pc, #232]	; (8006fa0 <main+0x1a0>)
 8006eb8:	3201      	adds	r2, #1
 8006eba:	0152      	lsls	r2, r2, #5
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f001 fa69 	bl	8008394 <oled_setDisplayedMenu>
	 		 workerDesert(&workerBtBondDev);
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f000 fa9d 	bl	8007402 <workerDesert>
	 	  if(btMsgReceivedFlag){
 8006ec8:	4c36      	ldr	r4, [pc, #216]	; (8006fa4 <main+0x1a4>)
 8006eca:	7823      	ldrb	r3, [r4, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <main+0xe8>
	 		  decodeMessage(uartMsgDecodeBuff, btMessageLen+6, ((uartMsgDecodeBuff[6] & 0x04) >> 2));
 8006ed0:	4b35      	ldr	r3, [pc, #212]	; (8006fa8 <main+0x1a8>)
 8006ed2:	4836      	ldr	r0, [pc, #216]	; (8006fac <main+0x1ac>)
 8006ed4:	8819      	ldrh	r1, [r3, #0]
 8006ed6:	7982      	ldrb	r2, [r0, #6]
 8006ed8:	3106      	adds	r1, #6
 8006eda:	1092      	asrs	r2, r2, #2
 8006edc:	402a      	ands	r2, r5
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	f000 fcfa 	bl	80078d8 <decodeMessage>
	 		  btMsgReceivedFlag = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	7023      	strb	r3, [r4, #0]
	 	  if(workerBtEnterPairingKey.assert){
 8006ee8:	4c31      	ldr	r4, [pc, #196]	; (8006fb0 <main+0x1b0>)
 8006eea:	7823      	ldrb	r3, [r4, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d017      	beq.n	8006f20 <main+0x120>
	 		  if(!btCmdMode) bluetoothEnterCMD();
 8006ef0:	4e21      	ldr	r6, [pc, #132]	; (8006f78 <main+0x178>)
 8006ef2:	7833      	ldrb	r3, [r6, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <main+0xfc>
 8006ef8:	f7ff f9dc 	bl	80062b4 <bluetoothEnterCMD>
	 		  sprintf(pin, "%06ld\r", btPairReq.pin);
 8006efc:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <main+0x1b4>)
 8006efe:	492e      	ldr	r1, [pc, #184]	; (8006fb8 <main+0x1b8>)
 8006f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f02:	a801      	add	r0, sp, #4
 8006f04:	f002 ff2c 	bl	8009d60 <siprintf>
	 		  bluetoothCMD_ACK(pin, "");
 8006f08:	492c      	ldr	r1, [pc, #176]	; (8006fbc <main+0x1bc>)
 8006f0a:	a801      	add	r0, sp, #4
 8006f0c:	f7ff f98a 	bl	8006224 <bluetoothCMD_ACK>
	 		 if(btCmdMode) bluetoothLeaveCMD();
 8006f10:	7833      	ldrb	r3, [r6, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <main+0x11a>
 8006f16:	f7ff f9df 	bl	80062d8 <bluetoothLeaveCMD>
	 		 workerDesert(&workerBtEnterPairingKey);
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	f000 fa71 	bl	8007402 <workerDesert>
	 	 if(workerBtConnect.assert){
 8006f20:	4c27      	ldr	r4, [pc, #156]	; (8006fc0 <main+0x1c0>)
 8006f22:	7823      	ldrb	r3, [r4, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <main+0x134>
	 		 bluetoothConnect(workerBtConnectMAC);
 8006f28:	4b26      	ldr	r3, [pc, #152]	; (8006fc4 <main+0x1c4>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	f7ff fb1c 	bl	8006568 <bluetoothConnect>
	 		 workerBtConnect.assert = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	7023      	strb	r3, [r4, #0]
	 	if(workerGetSongs.assert){
 8006f34:	4c24      	ldr	r4, [pc, #144]	; (8006fc8 <main+0x1c8>)
 8006f36:	7823      	ldrb	r3, [r4, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0a1      	beq.n	8006e80 <main+0x80>
	 		if(workerGetSongs.status == WORKER_OK){
 8006f3c:	7863      	ldrb	r3, [r4, #1]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d10b      	bne.n	8006f5a <main+0x15a>
	 			oled_setDisplayedMenu("songmenu",&songMenu, (songMenuSize+1)*sizeof(struct menuitem), 1);
 8006f42:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <main+0x1cc>)
 8006f44:	4922      	ldr	r1, [pc, #136]	; (8006fd0 <main+0x1d0>)
 8006f46:	781a      	ldrb	r2, [r3, #0]
 8006f48:	4822      	ldr	r0, [pc, #136]	; (8006fd4 <main+0x1d4>)
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	0152      	lsls	r2, r2, #5
 8006f4e:	002b      	movs	r3, r5
 8006f50:	f001 fa20 	bl	8008394 <oled_setDisplayedMenu>
	 			workerGetSongs.assert = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	7023      	strb	r3, [r4, #0]
 8006f58:	e792      	b.n	8006e80 <main+0x80>
	 		}else if(workerGetSongs.status == WORKER_ERR){
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d190      	bne.n	8006e80 <main+0x80>
	 			oled_setDisplayedSplash(oled_ErrorSplash, "pri nacitani pisni");
 8006f5e:	491e      	ldr	r1, [pc, #120]	; (8006fd8 <main+0x1d8>)
 8006f60:	481e      	ldr	r0, [pc, #120]	; (8006fdc <main+0x1dc>)
 8006f62:	f001 fa51 	bl	8008408 <oled_setDisplayedSplash>
 8006f66:	e7f5      	b.n	8006f54 <main+0x154>
 8006f68:	20003fcc 	.word	0x20003fcc
 8006f6c:	200044ec 	.word	0x200044ec
 8006f70:	200029f4 	.word	0x200029f4
 8006f74:	0800c2d0 	.word	0x0800c2d0
 8006f78:	20002d54 	.word	0x20002d54
 8006f7c:	20002a00 	.word	0x20002a00
 8006f80:	200009e8 	.word	0x200009e8
 8006f84:	200009f1 	.word	0x200009f1
 8006f88:	200029fe 	.word	0x200029fe
 8006f8c:	0800c2d5 	.word	0x0800c2d5
 8006f90:	20002a30 	.word	0x20002a30
 8006f94:	20002652 	.word	0x20002652
 8006f98:	20002f58 	.word	0x20002f58
 8006f9c:	0800c2e5 	.word	0x0800c2e5
 8006fa0:	200008a8 	.word	0x200008a8
 8006fa4:	200009f8 	.word	0x200009f8
 8006fa8:	200008a0 	.word	0x200008a0
 8006fac:	20003e9c 	.word	0x20003e9c
 8006fb0:	200009ee 	.word	0x200009ee
 8006fb4:	200025f0 	.word	0x200025f0
 8006fb8:	0800c2f9 	.word	0x0800c2f9
 8006fbc:	0800c2ca 	.word	0x0800c2ca
 8006fc0:	200009ec 	.word	0x200009ec
 8006fc4:	20003ab4 	.word	0x20003ab4
 8006fc8:	200025e9 	.word	0x200025e9
 8006fcc:	200009f0 	.word	0x200009f0
 8006fd0:	20000a00 	.word	0x20000a00
 8006fd4:	0800c300 	.word	0x0800c300
 8006fd8:	0800c309 	.word	0x0800c309
 8006fdc:	08008a59 	.word	0x08008a59

08006fe0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(htim->Instance == TIM2){
 8006fe2:	2380      	movs	r3, #128	; 0x80
 8006fe4:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006fe6:	0004      	movs	r4, r0
	if(htim->Instance == TIM2){
 8006fe8:	05db      	lsls	r3, r3, #23
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d101      	bne.n	8006ff2 <HAL_TIM_PeriodElapsedCallback+0x12>
		//Obnovi se oled displej
		oled_refresh();
 8006fee:	f001 fd11 	bl	8008a14 <oled_refresh>
	}

	if(htim->Instance == TIM1){
 8006ff2:	4b8a      	ldr	r3, [pc, #552]	; (800721c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d17f      	bne.n	80070fa <HAL_TIM_PeriodElapsedCallback+0x11a>
		midiControl_checkKeyboard();
 8006ffa:	f000 faa1 	bl	8007540 <midiControl_checkKeyboard>

		if(keypad.changed){
 8006ffe:	4a88      	ldr	r2, [pc, #544]	; (8007220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8007000:	7c53      	ldrb	r3, [r2, #17]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d079      	beq.n	80070fa <HAL_TIM_PeriodElapsedCallback+0x11a>
			if(keypad.up){
 8007006:	7b15      	ldrb	r5, [r2, #12]
 8007008:	4986      	ldr	r1, [pc, #536]	; (8007224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800700a:	4b87      	ldr	r3, [pc, #540]	; (8007228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800700c:	2d00      	cmp	r5, #0
 800700e:	d100      	bne.n	8007012 <HAL_TIM_PeriodElapsedCallback+0x32>
 8007010:	e0d4      	b.n	80071bc <HAL_TIM_PeriodElapsedCallback+0x1dc>
				encoderpos--;
 8007012:	6808      	ldr	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 8007014:	4e85      	ldr	r6, [pc, #532]	; (800722c <HAL_TIM_PeriodElapsedCallback+0x24c>)
				encoderpos--;
 8007016:	3801      	subs	r0, #1
 8007018:	6008      	str	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	6030      	str	r0, [r6, #0]
				keyboardVertPos++;
 800701e:	3001      	adds	r0, #1
			}else if(keypad.down){
				encoderpos++;
				keyboardVertPosOld = keyboardVertPos;
				keyboardVertPos--;
 8007020:	6018      	str	r0, [r3, #0]
			}

			if(keypad.right){
 8007022:	7bd0      	ldrb	r0, [r2, #15]
 8007024:	4b82      	ldr	r3, [pc, #520]	; (8007230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8007026:	2800      	cmp	r0, #0
 8007028:	d100      	bne.n	800702c <HAL_TIM_PeriodElapsedCallback+0x4c>
 800702a:	e0d3      	b.n	80071d4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
				keyboardSidePos++;
 800702c:	681e      	ldr	r6, [r3, #0]
 800702e:	3601      	adds	r6, #1
			}else if(keypad.left){
				keyboardSidePos--;
 8007030:	601e      	str	r6, [r3, #0]
			}

			keypadClicks.zero |= keypad.zero;
 8007032:	4b80      	ldr	r3, [pc, #512]	; (8007234 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8007034:	7a57      	ldrb	r7, [r2, #9]
 8007036:	7a5e      	ldrb	r6, [r3, #9]
 8007038:	433e      	orrs	r6, r7
 800703a:	725e      	strb	r6, [r3, #9]
			keypadClicks.one |= keypad.one;
 800703c:	7817      	ldrb	r7, [r2, #0]
 800703e:	781e      	ldrb	r6, [r3, #0]
 8007040:	433e      	orrs	r6, r7
 8007042:	701e      	strb	r6, [r3, #0]
			keypadClicks.two |= keypad.two;
 8007044:	7857      	ldrb	r7, [r2, #1]
 8007046:	785e      	ldrb	r6, [r3, #1]
 8007048:	433e      	orrs	r6, r7
 800704a:	705e      	strb	r6, [r3, #1]
			keypadClicks.three |= keypad.three;
 800704c:	7897      	ldrb	r7, [r2, #2]
 800704e:	789e      	ldrb	r6, [r3, #2]
 8007050:	433e      	orrs	r6, r7
 8007052:	709e      	strb	r6, [r3, #2]
			keypadClicks.four |= keypad.four;
 8007054:	78d7      	ldrb	r7, [r2, #3]
 8007056:	78de      	ldrb	r6, [r3, #3]
 8007058:	433e      	orrs	r6, r7
 800705a:	70de      	strb	r6, [r3, #3]
			keypadClicks.five |= keypad.five;
 800705c:	7917      	ldrb	r7, [r2, #4]
 800705e:	791e      	ldrb	r6, [r3, #4]
 8007060:	433e      	orrs	r6, r7
 8007062:	711e      	strb	r6, [r3, #4]
			keypadClicks.six |= keypad.six;
 8007064:	7957      	ldrb	r7, [r2, #5]
 8007066:	795e      	ldrb	r6, [r3, #5]
 8007068:	433e      	orrs	r6, r7
 800706a:	715e      	strb	r6, [r3, #5]
			keypadClicks.seven |= keypad.seven;
 800706c:	7997      	ldrb	r7, [r2, #6]
 800706e:	799e      	ldrb	r6, [r3, #6]
 8007070:	433e      	orrs	r6, r7
 8007072:	719e      	strb	r6, [r3, #6]
			keypadClicks.eight |= keypad.eight;
 8007074:	79d7      	ldrb	r7, [r2, #7]
 8007076:	79de      	ldrb	r6, [r3, #7]
 8007078:	433e      	orrs	r6, r7
 800707a:	71de      	strb	r6, [r3, #7]
			keypadClicks.nine |= keypad.nine;
 800707c:	7a17      	ldrb	r7, [r2, #8]
 800707e:	7a1e      	ldrb	r6, [r3, #8]
 8007080:	433e      	orrs	r6, r7
 8007082:	721e      	strb	r6, [r3, #8]
			keypadClicks.down |= keypad.down;
 8007084:	7b5e      	ldrb	r6, [r3, #13]
 8007086:	7b57      	ldrb	r7, [r2, #13]
 8007088:	433e      	orrs	r6, r7
 800708a:	735e      	strb	r6, [r3, #13]
			keypadClicks.up |= keypad.up;
 800708c:	7b1e      	ldrb	r6, [r3, #12]
 800708e:	4335      	orrs	r5, r6
 8007090:	731d      	strb	r5, [r3, #12]
			keypadClicks.left |= keypad.left;
 8007092:	7b96      	ldrb	r6, [r2, #14]
 8007094:	7b9d      	ldrb	r5, [r3, #14]
 8007096:	4335      	orrs	r5, r6
 8007098:	739d      	strb	r5, [r3, #14]
			keypadClicks.right |= keypad.right;
 800709a:	7bdd      	ldrb	r5, [r3, #15]
 800709c:	4328      	orrs	r0, r5
 800709e:	73d8      	strb	r0, [r3, #15]
			keypadClicks.enter |= keypad.enter;
 80070a0:	7c10      	ldrb	r0, [r2, #16]
 80070a2:	7c1d      	ldrb	r5, [r3, #16]
 80070a4:	4305      	orrs	r5, r0
 80070a6:	741d      	strb	r5, [r3, #16]
			keypadClicks.mf1 |= keypad.mf1;
 80070a8:	7a96      	ldrb	r6, [r2, #10]
 80070aa:	7a9d      	ldrb	r5, [r3, #10]
 80070ac:	4335      	orrs	r5, r6
 80070ae:	729d      	strb	r5, [r3, #10]
			keypadClicks.power |= keypad.power;
 80070b0:	7ad6      	ldrb	r6, [r2, #11]
 80070b2:	7add      	ldrb	r5, [r3, #11]
 80070b4:	4335      	orrs	r5, r6
 80070b6:	72dd      	strb	r5, [r3, #11]

			//Dopocita se pozice v dispmenu
			if(encoderpos >= (signed int)(dispmenusize)-1){
 80070b8:	4b5f      	ldr	r3, [pc, #380]	; (8007238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80070ba:	680d      	ldr	r5, [r1, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	dd00      	ble.n	80070c6 <HAL_TIM_PeriodElapsedCallback+0xe6>
 80070c4:	e08d      	b.n	80071e2 <HAL_TIM_PeriodElapsedCallback+0x202>
				encoderpos = (signed int)(dispmenusize)-1;
			}else if(encoderpos < (signed int)0){
				encoderpos = 0;
 80070c6:	600b      	str	r3, [r1, #0]
			}

			if(keyboardSidePos >= keyboardSidePosMax){
 80070c8:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80070ca:	4d5c      	ldr	r5, [pc, #368]	; (800723c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80070cc:	6819      	ldr	r1, [r3, #0]
 80070ce:	682d      	ldr	r5, [r5, #0]
 80070d0:	42a9      	cmp	r1, r5
 80070d2:	da00      	bge.n	80070d6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80070d4:	e08a      	b.n	80071ec <HAL_TIM_PeriodElapsedCallback+0x20c>
				keyboardSidePos = keyboardSidePosMax;
 80070d6:	601d      	str	r5, [r3, #0]
			}else if(keyboardSidePos < 0){
				keyboardSidePos = 0;
			}

			if(keyboardVertPos >= keyboardVertPosMax){
 80070d8:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80070da:	4d59      	ldr	r5, [pc, #356]	; (8007240 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	682d      	ldr	r5, [r5, #0]
 80070e0:	42a9      	cmp	r1, r5
 80070e2:	da00      	bge.n	80070e6 <HAL_TIM_PeriodElapsedCallback+0x106>
 80070e4:	e088      	b.n	80071f8 <HAL_TIM_PeriodElapsedCallback+0x218>
				keyboardVertPos = keyboardVertPosMax;
 80070e6:	601d      	str	r5, [r3, #0]
			}else if(keyboardVertPos < 0){
				keyboardVertPos = 0;
			}


			if(keypad.enter > 0){
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PeriodElapsedCallback+0x116>
				encoderclick = 1;
 80070ec:	2101      	movs	r1, #1
 80070ee:	4b55      	ldr	r3, [pc, #340]	; (8007244 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80070f0:	6019      	str	r1, [r3, #0]
				keypad.enter = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	7413      	strb	r3, [r2, #16]
			}

			keypad.changed = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	7453      	strb	r3, [r2, #17]
		}


	}

	if(htim->Instance == TIM3){
 80070fa:	4b53      	ldr	r3, [pc, #332]	; (8007248 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d135      	bne.n	800716e <HAL_TIM_PeriodElapsedCallback+0x18e>

		//Tady se dela scrollovani
		if(scrollPauseDone){
 8007102:	4a52      	ldr	r2, [pc, #328]	; (800724c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8007104:	4b52      	ldr	r3, [pc, #328]	; (8007250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8007106:	6811      	ldr	r1, [r2, #0]
 8007108:	2900      	cmp	r1, #0
 800710a:	d100      	bne.n	800710e <HAL_TIM_PeriodElapsedCallback+0x12e>
 800710c:	e07d      	b.n	800720a <HAL_TIM_PeriodElapsedCallback+0x22a>
			if(scrollIndex <= scrollMax){
 800710e:	4851      	ldr	r0, [pc, #324]	; (8007254 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8007110:	4d51      	ldr	r5, [pc, #324]	; (8007258 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007112:	6801      	ldr	r1, [r0, #0]
 8007114:	682d      	ldr	r5, [r5, #0]
 8007116:	42a9      	cmp	r1, r5
 8007118:	dd00      	ble.n	800711c <HAL_TIM_PeriodElapsedCallback+0x13c>
 800711a:	e073      	b.n	8007204 <HAL_TIM_PeriodElapsedCallback+0x224>
				scrollIndex++;
 800711c:	3101      	adds	r1, #1
 800711e:	6001      	str	r1, [r0, #0]
			}else{
				scrollPauseDone = 0;
			}
		}else scrollPause++;

		if(scrollPause == OLED_MENU_SCROLL_PAUSE){
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	2902      	cmp	r1, #2
 8007124:	d109      	bne.n	800713a <HAL_TIM_PeriodElapsedCallback+0x15a>
			if(scrollIndex > 0){
 8007126:	494b      	ldr	r1, [pc, #300]	; (8007254 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8007128:	6808      	ldr	r0, [r1, #0]
 800712a:	2800      	cmp	r0, #0
 800712c:	dc00      	bgt.n	8007130 <HAL_TIM_PeriodElapsedCallback+0x150>
 800712e:	e070      	b.n	8007212 <HAL_TIM_PeriodElapsedCallback+0x232>
				scrollPauseDone = 0;
 8007130:	2000      	movs	r0, #0
			}else scrollPauseDone = 1;
 8007132:	6010      	str	r0, [r2, #0]

			scrollPause = 0;
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
			scrollIndex = 0;
 8007138:	600a      	str	r2, [r1, #0]
		}

		if(loadingStat < 4){
 800713a:	4a48      	ldr	r2, [pc, #288]	; (800725c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800713c:	6813      	ldr	r3, [r2, #0]
 800713e:	2b03      	cmp	r3, #3
 8007140:	dc69      	bgt.n	8007216 <HAL_TIM_PeriodElapsedCallback+0x236>
			loadingStat <<= 1;
 8007142:	005b      	lsls	r3, r3, #1
		}else loadingStat = 1;
 8007144:	6013      	str	r3, [r2, #0]

		loadingToggle = ~loadingToggle;
 8007146:	4a46      	ldr	r2, [pc, #280]	; (8007260 <HAL_TIM_PeriodElapsedCallback+0x280>)

		if(btStatusMsg){
 8007148:	4e46      	ldr	r6, [pc, #280]	; (8007264 <HAL_TIM_PeriodElapsedCallback+0x284>)
		loadingToggle = ~loadingToggle;
 800714a:	6813      	ldr	r3, [r2, #0]
 800714c:	4d46      	ldr	r5, [pc, #280]	; (8007268 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800714e:	43db      	mvns	r3, r3
 8007150:	6013      	str	r3, [r2, #0]
		if(btStatusMsg){
 8007152:	7833      	ldrb	r3, [r6, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_TIM_PeriodElapsedCallback+0x18c>
			btStatusMsgWD++;
 8007158:	882b      	ldrh	r3, [r5, #0]
 800715a:	3301      	adds	r3, #1
 800715c:	b29b      	uxth	r3, r3
 800715e:	802b      	strh	r3, [r5, #0]

			if(btStatusMsgWD >= 2){
 8007160:	2b01      	cmp	r3, #1
 8007162:	d92a      	bls.n	80071ba <HAL_TIM_PeriodElapsedCallback+0x1da>
				bluetoothMsgFifoFlush();
 8007164:	f7fe ffb6 	bl	80060d4 <bluetoothMsgFifoFlush>
				btStatusMsg = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	7033      	strb	r3, [r6, #0]
				btStatusMsgWD = 0;
			}
		}else btStatusMsgWD = 0;
 800716c:	802b      	strh	r3, [r5, #0]

	}

	if(htim->Instance == TIM6){
 800716e:	4b3f      	ldr	r3, [pc, #252]	; (800726c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d121      	bne.n	80071ba <HAL_TIM_PeriodElapsedCallback+0x1da>
		HAL_TIM_Base_Stop_IT(&htim6);
 8007176:	483e      	ldr	r0, [pc, #248]	; (8007270 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007178:	f7fd fb7e 	bl	8004878 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_DisableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800717c:	2011      	movs	r0, #17
 800717e:	f7fb fc75 	bl	8002a6c <HAL_NVIC_DisableIRQ>

	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8007182:	2180      	movs	r1, #128	; 0x80
 8007184:	483b      	ldr	r0, [pc, #236]	; (8007274 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007186:	01c9      	lsls	r1, r1, #7
 8007188:	f7fb febc 	bl	8002f04 <HAL_GPIO_ReadPin>
 800718c:	0002      	movs	r2, r0
 800718e:	4250      	negs	r0, r2
 8007190:	4150      	adcs	r0, r2
		keypad.changed = 1;
 8007192:	2201      	movs	r2, #1
	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8007194:	4b22      	ldr	r3, [pc, #136]	; (8007220 <HAL_TIM_PeriodElapsedCallback+0x240>)
		keypad.changed = 1;
 8007196:	745a      	strb	r2, [r3, #17]
		x++;
 8007198:	4a37      	ldr	r2, [pc, #220]	; (8007278 <HAL_TIM_PeriodElapsedCallback+0x298>)
	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 800719a:	7418      	strb	r0, [r3, #16]
		x++;
 800719c:	6813      	ldr	r3, [r2, #0]

		//sprintf(oledHeader, "%d %d", x,  keypad.enter);

		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800719e:	2007      	movs	r0, #7
		x++;
 80071a0:	3301      	adds	r3, #1
 80071a2:	6013      	str	r3, [r2, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80071a4:	f7fb fc8c 	bl	8002ac0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80071a8:	2007      	movs	r0, #7
 80071aa:	f7fb fc53 	bl	8002a54 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80071ae:	2007      	movs	r0, #7
 80071b0:	f7fb fc86 	bl	8002ac0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80071b4:	2011      	movs	r0, #17
 80071b6:	f7fb fc4d 	bl	8002a54 <HAL_NVIC_EnableIRQ>
	}

}
 80071ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}else if(keypad.down){
 80071bc:	7b50      	ldrb	r0, [r2, #13]
 80071be:	2800      	cmp	r0, #0
 80071c0:	d100      	bne.n	80071c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 80071c2:	e72e      	b.n	8007022 <HAL_TIM_PeriodElapsedCallback+0x42>
				encoderpos++;
 80071c4:	6808      	ldr	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 80071c6:	4e19      	ldr	r6, [pc, #100]	; (800722c <HAL_TIM_PeriodElapsedCallback+0x24c>)
				encoderpos++;
 80071c8:	3001      	adds	r0, #1
 80071ca:	6008      	str	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	6030      	str	r0, [r6, #0]
				keyboardVertPos--;
 80071d0:	3801      	subs	r0, #1
 80071d2:	e725      	b.n	8007020 <HAL_TIM_PeriodElapsedCallback+0x40>
			}else if(keypad.left){
 80071d4:	7b96      	ldrb	r6, [r2, #14]
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d100      	bne.n	80071dc <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80071da:	e72a      	b.n	8007032 <HAL_TIM_PeriodElapsedCallback+0x52>
				keyboardSidePos--;
 80071dc:	681e      	ldr	r6, [r3, #0]
 80071de:	3e01      	subs	r6, #1
 80071e0:	e726      	b.n	8007030 <HAL_TIM_PeriodElapsedCallback+0x50>
			}else if(encoderpos < (signed int)0){
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	db00      	blt.n	80071e8 <HAL_TIM_PeriodElapsedCallback+0x208>
 80071e6:	e76f      	b.n	80070c8 <HAL_TIM_PeriodElapsedCallback+0xe8>
				encoderpos = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e76c      	b.n	80070c6 <HAL_TIM_PeriodElapsedCallback+0xe6>
			}else if(keyboardSidePos < 0){
 80071ec:	2900      	cmp	r1, #0
 80071ee:	db00      	blt.n	80071f2 <HAL_TIM_PeriodElapsedCallback+0x212>
 80071f0:	e772      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0xf8>
				keyboardSidePos = 0;
 80071f2:	2100      	movs	r1, #0
 80071f4:	6019      	str	r1, [r3, #0]
 80071f6:	e76f      	b.n	80070d8 <HAL_TIM_PeriodElapsedCallback+0xf8>
			}else if(keyboardVertPos < 0){
 80071f8:	2900      	cmp	r1, #0
 80071fa:	db00      	blt.n	80071fe <HAL_TIM_PeriodElapsedCallback+0x21e>
 80071fc:	e774      	b.n	80070e8 <HAL_TIM_PeriodElapsedCallback+0x108>
				keyboardVertPos = 0;
 80071fe:	2100      	movs	r1, #0
 8007200:	6019      	str	r1, [r3, #0]
 8007202:	e771      	b.n	80070e8 <HAL_TIM_PeriodElapsedCallback+0x108>
				scrollPauseDone = 0;
 8007204:	2100      	movs	r1, #0
 8007206:	6011      	str	r1, [r2, #0]
 8007208:	e78a      	b.n	8007120 <HAL_TIM_PeriodElapsedCallback+0x140>
		}else scrollPause++;
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	3101      	adds	r1, #1
 800720e:	6019      	str	r1, [r3, #0]
 8007210:	e786      	b.n	8007120 <HAL_TIM_PeriodElapsedCallback+0x140>
			}else scrollPauseDone = 1;
 8007212:	2001      	movs	r0, #1
 8007214:	e78d      	b.n	8007132 <HAL_TIM_PeriodElapsedCallback+0x152>
		}else loadingStat = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	e794      	b.n	8007144 <HAL_TIM_PeriodElapsedCallback+0x164>
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	40012c00 	.word	0x40012c00
 8007220:	20002a08 	.word	0x20002a08
 8007224:	2000381c 	.word	0x2000381c
 8007228:	20002f50 	.word	0x20002f50
 800722c:	20002658 	.word	0x20002658
 8007230:	20002a04 	.word	0x20002a04
 8007234:	20002a1a 	.word	0x20002a1a
 8007238:	20003824 	.word	0x20003824
 800723c:	20002cb8 	.word	0x20002cb8
 8007240:	200009fc 	.word	0x200009fc
 8007244:	2000264c 	.word	0x2000264c
 8007248:	40000400 	.word	0x40000400
 800724c:	20000894 	.word	0x20000894
 8007250:	20003828 	.word	0x20003828
 8007254:	2000382c 	.word	0x2000382c
 8007258:	2000089c 	.word	0x2000089c
 800725c:	200029f8 	.word	0x200029f8
 8007260:	20002cf0 	.word	0x20002cf0
 8007264:	200029f5 	.word	0x200029f5
 8007268:	20002a2c 	.word	0x20002a2c
 800726c:	40001000 	.word	0x40001000
 8007270:	200044ac 	.word	0x200044ac
 8007274:	50000400 	.word	0x50000400
 8007278:	200003fc 	.word	0x200003fc

0800727c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_14 && HAL_TIM_Base_GetState(&htim6) != HAL_TIM_STATE_BUSY){
 800727c:	2380      	movs	r3, #128	; 0x80
{
 800727e:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_14 && HAL_TIM_Base_GetState(&htim6) != HAL_TIM_STATE_BUSY){
 8007280:	01db      	lsls	r3, r3, #7
 8007282:	4298      	cmp	r0, r3
 8007284:	d10e      	bne.n	80072a4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8007286:	4c08      	ldr	r4, [pc, #32]	; (80072a8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8007288:	0020      	movs	r0, r4
 800728a:	f7fd fbc3 	bl	8004a14 <HAL_TIM_Base_GetState>
 800728e:	2802      	cmp	r0, #2
 8007290:	d008      	beq.n	80072a4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
		HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8007292:	2011      	movs	r0, #17
 8007294:	f7fb fbde 	bl	8002a54 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim6);
 8007298:	0020      	movs	r0, r4
 800729a:	f7fd fad9 	bl	8004850 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800729e:	2007      	movs	r0, #7
 80072a0:	f7fb fbe4 	bl	8002a6c <HAL_NVIC_DisableIRQ>
	}
}
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	200044ac 	.word	0x200044ac

080072ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(huart->Instance == USART2){
 80072ae:	6802      	ldr	r2, [r0, #0]
 80072b0:	4b41      	ldr	r3, [pc, #260]	; (80073b8 <HAL_UART_RxCpltCallback+0x10c>)
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d122      	bne.n	80072fc <HAL_UART_RxCpltCallback+0x50>
			//Pokud dostal status message od modulu
			if((btFifoByte == '%' || btStatusMsg) && !btCmdMode){
 80072b6:	4d41      	ldr	r5, [pc, #260]	; (80073bc <HAL_UART_RxCpltCallback+0x110>)
 80072b8:	7828      	ldrb	r0, [r5, #0]
 80072ba:	2825      	cmp	r0, #37	; 0x25
 80072bc:	d003      	beq.n	80072c6 <HAL_UART_RxCpltCallback+0x1a>
 80072be:	4b40      	ldr	r3, [pc, #256]	; (80073c0 <HAL_UART_RxCpltCallback+0x114>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01b      	beq.n	80072fe <HAL_UART_RxCpltCallback+0x52>
 80072c6:	4b3f      	ldr	r3, [pc, #252]	; (80073c4 <HAL_UART_RxCpltCallback+0x118>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d117      	bne.n	80072fe <HAL_UART_RxCpltCallback+0x52>
				if(btFifoByte == '%') btStatusMsg = ~btStatusMsg;
 80072ce:	2825      	cmp	r0, #37	; 0x25
 80072d0:	d108      	bne.n	80072e4 <HAL_UART_RxCpltCallback+0x38>
 80072d2:	4a3b      	ldr	r2, [pc, #236]	; (80073c0 <HAL_UART_RxCpltCallback+0x114>)
 80072d4:	7813      	ldrb	r3, [r2, #0]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	7013      	strb	r3, [r2, #0]
				if(btFifoByte == '%' && !btStatusMsg) bluetoothDecodeMsg();
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_UART_RxCpltCallback+0x38>
 80072e0:	f7fe ff06 	bl	80060f0 <bluetoothDecodeMsg>
				btMsgFifo[btMsgFifoIndex++] = btFifoByte;
 80072e4:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <HAL_UART_RxCpltCallback+0x11c>)
 80072e6:	8813      	ldrh	r3, [r2, #0]
 80072e8:	1c59      	adds	r1, r3, #1
 80072ea:	8011      	strh	r1, [r2, #0]
 80072ec:	7829      	ldrb	r1, [r5, #0]
 80072ee:	4a37      	ldr	r2, [pc, #220]	; (80073cc <HAL_UART_RxCpltCallback+0x120>)
 80072f0:	54d1      	strb	r1, [r2, r3]
					btComMessageSizeFlag = 0;
				}

			}

			HAL_UART_Receive_IT(&huart2, &btFifoByte, 1);
 80072f2:	2201      	movs	r2, #1
 80072f4:	0029      	movs	r1, r5
 80072f6:	4836      	ldr	r0, [pc, #216]	; (80073d0 <HAL_UART_RxCpltCallback+0x124>)
 80072f8:	f7fd fe30 	bl	8004f5c <HAL_UART_Receive_IT>
	}
}
 80072fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}else if(!btStatusMsg){
 80072fe:	4b30      	ldr	r3, [pc, #192]	; (80073c0 <HAL_UART_RxCpltCallback+0x114>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f5      	bne.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
				if(!btCmdMode && btFifoByte == 0 && btNullCounter < 4 && btComMessageSizeFlag < 2){
 8007306:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <HAL_UART_RxCpltCallback+0x118>)
 8007308:	4c32      	ldr	r4, [pc, #200]	; (80073d4 <HAL_UART_RxCpltCallback+0x128>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	4a32      	ldr	r2, [pc, #200]	; (80073d8 <HAL_UART_RxCpltCallback+0x12c>)
 800730e:	4e33      	ldr	r6, [pc, #204]	; (80073dc <HAL_UART_RxCpltCallback+0x130>)
 8007310:	2b00      	cmp	r3, #0
 8007312:	d12e      	bne.n	8007372 <HAL_UART_RxCpltCallback+0xc6>
 8007314:	2800      	cmp	r0, #0
 8007316:	d12c      	bne.n	8007372 <HAL_UART_RxCpltCallback+0xc6>
 8007318:	7823      	ldrb	r3, [r4, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d829      	bhi.n	8007372 <HAL_UART_RxCpltCallback+0xc6>
 800731e:	4f30      	ldr	r7, [pc, #192]	; (80073e0 <HAL_UART_RxCpltCallback+0x134>)
 8007320:	783f      	ldrb	r7, [r7, #0]
 8007322:	2f01      	cmp	r7, #1
 8007324:	d825      	bhi.n	8007372 <HAL_UART_RxCpltCallback+0xc6>
					btNullCounter++;
 8007326:	3301      	adds	r3, #1
 8007328:	7023      	strb	r3, [r4, #0]
				btFifo[btFifoIndex++] = btFifoByte;
 800732a:	8837      	ldrh	r7, [r6, #0]
 800732c:	492d      	ldr	r1, [pc, #180]	; (80073e4 <HAL_UART_RxCpltCallback+0x138>)
 800732e:	1c7b      	adds	r3, r7, #1
				if(btMessageLen > 0 && (btFifoIndex) >= btMessageLen+btComMessageStartIndex+6 && btNullCounter == 4 && btComMessageSizeFlag == 2){
 8007330:	8812      	ldrh	r2, [r2, #0]
				btFifo[btFifoIndex++] = btFifoByte;
 8007332:	b29b      	uxth	r3, r3
 8007334:	8033      	strh	r3, [r6, #0]
 8007336:	55c8      	strb	r0, [r1, r7]
				if(btMessageLen > 0 && (btFifoIndex) >= btMessageLen+btComMessageStartIndex+6 && btNullCounter == 4 && btComMessageSizeFlag == 2){
 8007338:	2a00      	cmp	r2, #0
 800733a:	d0da      	beq.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
 800733c:	482a      	ldr	r0, [pc, #168]	; (80073e8 <HAL_UART_RxCpltCallback+0x13c>)
 800733e:	8807      	ldrh	r7, [r0, #0]
 8007340:	18b8      	adds	r0, r7, r2
 8007342:	3005      	adds	r0, #5
 8007344:	4298      	cmp	r0, r3
 8007346:	dad4      	bge.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
 8007348:	7823      	ldrb	r3, [r4, #0]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d1d1      	bne.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
 800734e:	4e24      	ldr	r6, [pc, #144]	; (80073e0 <HAL_UART_RxCpltCallback+0x134>)
 8007350:	7833      	ldrb	r3, [r6, #0]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d1cd      	bne.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
					memcpy(uartMsgDecodeBuff, btFifo+btComMessageStartIndex, btMessageLen+6);
 8007356:	3206      	adds	r2, #6
 8007358:	19c9      	adds	r1, r1, r7
 800735a:	4824      	ldr	r0, [pc, #144]	; (80073ec <HAL_UART_RxCpltCallback+0x140>)
 800735c:	f002 fc34 	bl	8009bc8 <memcpy>
					btMsgReceivedFlag = 1;
 8007360:	2201      	movs	r2, #1
 8007362:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <HAL_UART_RxCpltCallback+0x144>)
 8007364:	701a      	strb	r2, [r3, #0]
					bluetoothFifoFlush();
 8007366:	f7fe fea7 	bl	80060b8 <bluetoothFifoFlush>
					btNullCounter = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	7023      	strb	r3, [r4, #0]
					btComMessageSizeFlag = 0;
 800736e:	7033      	strb	r3, [r6, #0]
 8007370:	e7bf      	b.n	80072f2 <HAL_UART_RxCpltCallback+0x46>
				}else if(btNullCounter == 4 && btComMessageSizeFlag < 2){
 8007372:	7823      	ldrb	r3, [r4, #0]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d1d8      	bne.n	800732a <HAL_UART_RxCpltCallback+0x7e>
 8007378:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <HAL_UART_RxCpltCallback+0x134>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d80a      	bhi.n	8007396 <HAL_UART_RxCpltCallback+0xea>
					btMsgReceivedFlag = 0;
 8007380:	2700      	movs	r7, #0
 8007382:	46bc      	mov	ip, r7
 8007384:	4661      	mov	r1, ip
 8007386:	4f1a      	ldr	r7, [pc, #104]	; (80073f0 <HAL_UART_RxCpltCallback+0x144>)
					btComMessageSizeFlag++;
 8007388:	3301      	adds	r3, #1
					btMsgReceivedFlag = 0;
 800738a:	7039      	strb	r1, [r7, #0]
					btComMessageSizeFlag++;
 800738c:	4914      	ldr	r1, [pc, #80]	; (80073e0 <HAL_UART_RxCpltCallback+0x134>)
 800738e:	700b      	strb	r3, [r1, #0]
					btMessageLen = 0;
 8007390:	4663      	mov	r3, ip
					btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 8007392:	8013      	strh	r3, [r2, #0]
 8007394:	e7c9      	b.n	800732a <HAL_UART_RxCpltCallback+0x7e>
				}else if(btNullCounter == 4 && btComMessageSizeFlag == 2 && btMessageLen == 0){
 8007396:	2b02      	cmp	r3, #2
 8007398:	d1c7      	bne.n	800732a <HAL_UART_RxCpltCallback+0x7e>
 800739a:	8813      	ldrh	r3, [r2, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1c4      	bne.n	800732a <HAL_UART_RxCpltCallback+0x7e>
					btComMessageStartIndex = btFifoIndex-6;
 80073a0:	8833      	ldrh	r3, [r6, #0]
 80073a2:	4f11      	ldr	r7, [pc, #68]	; (80073e8 <HAL_UART_RxCpltCallback+0x13c>)
 80073a4:	3b06      	subs	r3, #6
					btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 80073a6:	490f      	ldr	r1, [pc, #60]	; (80073e4 <HAL_UART_RxCpltCallback+0x138>)
					btComMessageStartIndex = btFifoIndex-6;
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	803b      	strh	r3, [r7, #0]
					btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 80073ac:	18cb      	adds	r3, r1, r3
 80073ae:	791f      	ldrb	r7, [r3, #4]
 80073b0:	795b      	ldrb	r3, [r3, #5]
 80073b2:	023f      	lsls	r7, r7, #8
 80073b4:	433b      	orrs	r3, r7
 80073b6:	e7ec      	b.n	8007392 <HAL_UART_RxCpltCallback+0xe6>
 80073b8:	40004400 	.word	0x40004400
 80073bc:	200008a4 	.word	0x200008a4
 80073c0:	200029f5 	.word	0x200029f5
 80073c4:	20002d54 	.word	0x20002d54
 80073c8:	20003820 	.word	0x20003820
 80073cc:	20002d55 	.word	0x20002d55
 80073d0:	2000456c 	.word	0x2000456c
 80073d4:	20002cb0 	.word	0x20002cb0
 80073d8:	200008a0 	.word	0x200008a0
 80073dc:	20002cf4 	.word	0x20002cf4
 80073e0:	20002650 	.word	0x20002650
 80073e4:	200023f5 	.word	0x200023f5
 80073e8:	200008a2 	.word	0x200008a2
 80073ec:	20003e9c 	.word	0x20003e9c
 80073f0:	200009f8 	.word	0x200009f8

080073f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

}
 80073f4:	4770      	bx	lr

080073f6 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80073f6:	4770      	bx	lr

080073f8 <workerAssert>:
#include "oled.h"


//Funkce pro jednodussi ovladani workeru - aktivace
void workerAssert(struct worker * wrk){
	wrk->assert = 1;
 80073f8:	2301      	movs	r3, #1
 80073fa:	7003      	strb	r3, [r0, #0]
	wrk->status = WORKER_WAITING;
 80073fc:	2300      	movs	r3, #0
 80073fe:	7043      	strb	r3, [r0, #1]
}
 8007400:	4770      	bx	lr

08007402 <workerDesert>:

//Funkce pro jednodussi ovladani workeru - deaktivace
void workerDesert(struct worker * wrk){
	wrk->assert = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	7003      	strb	r3, [r0, #0]
	wrk->status = WORKER_WAITING;
 8007406:	7043      	strb	r3, [r0, #1]
}
 8007408:	4770      	bx	lr

0800740a <midiController_current_On>:
void midiController_display_getState(){

}

//Rutina pro zapnuti proudoveho zdroje
void midiController_current_On(){
 800740a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char msg[2];
	msg[0] = INTERNAL_CURR;
	msg[1] = INTERNAL_CURR_ON;
 800740c:	2001      	movs	r0, #1
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 2);
 800740e:	2102      	movs	r1, #2
	msg[0] = INTERNAL_CURR;
 8007410:	2203      	movs	r2, #3
 8007412:	ab03      	add	r3, sp, #12
 8007414:	701a      	strb	r2, [r3, #0]
	msg[1] = INTERNAL_CURR_ON;
 8007416:	7058      	strb	r0, [r3, #1]
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 2);
 8007418:	2200      	movs	r2, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	9101      	str	r1, [sp, #4]
 800741e:	0003      	movs	r3, r0
 8007420:	f000 f9c6 	bl	80077b0 <sendMsg>
}
 8007424:	b005      	add	sp, #20
 8007426:	bd00      	pop	{pc}

08007428 <midiController_current_Off>:

//Rutina pro vypnuti proudoveho zdroje
void midiController_current_Off(){
 8007428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char msg[2];
	msg[0] = INTERNAL_CURR;
 800742a:	2203      	movs	r2, #3
 800742c:	ab03      	add	r3, sp, #12
 800742e:	701a      	strb	r2, [r3, #0]
	msg[1] = INTERNAL_CURR_OFF;
 8007430:	2200      	movs	r2, #0
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 2);
 8007432:	2102      	movs	r1, #2
	msg[1] = INTERNAL_CURR_OFF;
 8007434:	705a      	strb	r2, [r3, #1]
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 2);
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	2301      	movs	r3, #1
 800743a:	9101      	str	r1, [sp, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f000 f9b7 	bl	80077b0 <sendMsg>
}
 8007442:	b005      	add	sp, #20
 8007444:	bd00      	pop	{pc}
	...

08007448 <midiController_record>:


//Rutina pro spusteni nahravani
void midiController_record(uint8_t initiator, char * songname){
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	0004      	movs	r4, r0
 800744c:	b09d      	sub	sp, #116	; 0x74
 800744e:	000f      	movs	r7, r1
	//Spusteno z PC
	if(initiator == ADDRESS_PC){
 8007450:	2801      	cmp	r0, #1
 8007452:	d804      	bhi.n	800745e <midiController_record+0x16>
		//Jen se zobrazi obrazovka nahravani
		oled_setDisplayedSplash(oled_recordingSplash, songname);
 8007454:	4810      	ldr	r0, [pc, #64]	; (8007498 <midiController_record+0x50>)
 8007456:	f000 ffd7 	bl	8008408 <oled_setDisplayedSplash>
		memcpy(&msg[2], songname, strlen(songname));
		sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
	}


}
 800745a:	b01d      	add	sp, #116	; 0x74
 800745c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(initiator == ADDRESS_MAIN){
 800745e:	2802      	cmp	r0, #2
 8007460:	d1fb      	bne.n	800745a <midiController_record+0x12>
		msg[0] = INTERNAL_COM;
 8007462:	2500      	movs	r5, #0
 8007464:	ae03      	add	r6, sp, #12
		msg[1] = INTERNAL_COM_REC;
 8007466:	7070      	strb	r0, [r6, #1]
		memcpy(&msg[2], songname, strlen(songname));
 8007468:	0008      	movs	r0, r1
		msg[0] = INTERNAL_COM;
 800746a:	7035      	strb	r5, [r6, #0]
		memcpy(&msg[2], songname, strlen(songname));
 800746c:	f7f8 fe54 	bl	8000118 <strlen>
 8007470:	0002      	movs	r2, r0
 8007472:	200e      	movs	r0, #14
 8007474:	0039      	movs	r1, r7
 8007476:	4468      	add	r0, sp
 8007478:	f002 fba6 	bl	8009bc8 <memcpy>
		sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
 800747c:	0038      	movs	r0, r7
 800747e:	f7f8 fe4b 	bl	8000118 <strlen>
 8007482:	3002      	adds	r0, #2
 8007484:	b280      	uxth	r0, r0
 8007486:	9001      	str	r0, [sp, #4]
 8007488:	9600      	str	r6, [sp, #0]
 800748a:	2301      	movs	r3, #1
 800748c:	002a      	movs	r2, r5
 800748e:	0029      	movs	r1, r5
 8007490:	0020      	movs	r0, r4
 8007492:	f000 f98d 	bl	80077b0 <sendMsg>
}
 8007496:	e7e0      	b.n	800745a <midiController_record+0x12>
 8007498:	0800908d 	.word	0x0800908d

0800749c <midiController_play>:

void midiController_play(uint8_t initiator, char * songname){
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	0005      	movs	r5, r0
 80074a0:	b09d      	sub	sp, #116	; 0x74
 80074a2:	000c      	movs	r4, r1
	//Spusteno z PC
	if(initiator == 0x00){
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d10f      	bne.n	80074c8 <midiController_play+0x2c>
		memset(selectedSong, 0, 40);
 80074a8:	4e17      	ldr	r6, [pc, #92]	; (8007508 <midiController_play+0x6c>)
 80074aa:	0001      	movs	r1, r0
 80074ac:	2228      	movs	r2, #40	; 0x28
 80074ae:	0030      	movs	r0, r6
 80074b0:	f002 fb93 	bl	8009bda <memset>
		sprintf(selectedSong, "%s", songname);
 80074b4:	0021      	movs	r1, r4
 80074b6:	0030      	movs	r0, r6
 80074b8:	f002 fcac 	bl	8009e14 <strcpy>
		//Jen se zobrazi obrazovka prehravani
		oled_setDisplayedSplash(oled_playingSplash, songname);
	}else if(initiator == 0x01){
	//Spusteno ovladacem
		//Jen se zobrazi obrazovka prehravani
		oled_setDisplayedSplash(oled_playingSplash, songname);
 80074bc:	0021      	movs	r1, r4
 80074be:	4813      	ldr	r0, [pc, #76]	; (800750c <midiController_play+0x70>)
 80074c0:	f000 ffa2 	bl	8008408 <oled_setDisplayedSplash>
		memcpy(&msg[2], songname, strlen(songname));
		sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
	}


}
 80074c4:	b01d      	add	sp, #116	; 0x74
 80074c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(initiator == 0x01){
 80074c8:	2801      	cmp	r0, #1
 80074ca:	d0f7      	beq.n	80074bc <midiController_play+0x20>
	}else if(initiator == 0x02){
 80074cc:	2802      	cmp	r0, #2
 80074ce:	d1f9      	bne.n	80074c4 <midiController_play+0x28>
		msg[1] = INTERNAL_COM_PLAY;
 80074d0:	2301      	movs	r3, #1
		msg[0] = INTERNAL_COM;
 80074d2:	2600      	movs	r6, #0
 80074d4:	af03      	add	r7, sp, #12
		memcpy(&msg[2], songname, strlen(songname));
 80074d6:	0008      	movs	r0, r1
		msg[1] = INTERNAL_COM_PLAY;
 80074d8:	707b      	strb	r3, [r7, #1]
		msg[0] = INTERNAL_COM;
 80074da:	703e      	strb	r6, [r7, #0]
		memcpy(&msg[2], songname, strlen(songname));
 80074dc:	f7f8 fe1c 	bl	8000118 <strlen>
 80074e0:	0002      	movs	r2, r0
 80074e2:	200e      	movs	r0, #14
 80074e4:	0021      	movs	r1, r4
 80074e6:	4468      	add	r0, sp
 80074e8:	f002 fb6e 	bl	8009bc8 <memcpy>
		sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
 80074ec:	0020      	movs	r0, r4
 80074ee:	f7f8 fe13 	bl	8000118 <strlen>
 80074f2:	3002      	adds	r0, #2
 80074f4:	b280      	uxth	r0, r0
 80074f6:	9001      	str	r0, [sp, #4]
 80074f8:	9700      	str	r7, [sp, #0]
 80074fa:	2301      	movs	r3, #1
 80074fc:	0032      	movs	r2, r6
 80074fe:	0031      	movs	r1, r6
 8007500:	0028      	movs	r0, r5
 8007502:	f000 f955 	bl	80077b0 <sendMsg>
}
 8007506:	e7dd      	b.n	80074c4 <midiController_play+0x28>
 8007508:	20002cbd 	.word	0x20002cbd
 800750c:	08008f6d 	.word	0x08008f6d

08007510 <midiController_stop>:

void midiController_stop(uint8_t initiator){
 8007510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//Spusteno z hlavni jednotky
	if(initiator == ADDRESS_MAIN){
 8007512:	2802      	cmp	r0, #2
 8007514:	d10b      	bne.n	800752e <midiController_stop+0x1e>
		//Posle se zprava do PC o zastaveni
		char msg[2] = {INTERNAL_COM, INTERNAL_COM_STOP};
 8007516:	2100      	movs	r1, #0
 8007518:	ab03      	add	r3, sp, #12
 800751a:	7019      	strb	r1, [r3, #0]
 800751c:	7059      	strb	r1, [r3, #1]
		sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, 2);
 800751e:	000a      	movs	r2, r1
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	9001      	str	r0, [sp, #4]
 8007524:	2301      	movs	r3, #1
 8007526:	f000 f943 	bl	80077b0 <sendMsg>
		//Vrati se do menu, zapne OLED refresh a vypne LED
		oledType = OLED_MENU;
		oled_refreshResume();
	}

}
 800752a:	b005      	add	sp, #20
 800752c:	bd00      	pop	{pc}
		oledType = OLED_MENU;
 800752e:	2202      	movs	r2, #2
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <midiController_stop+0x2c>)
 8007532:	601a      	str	r2, [r3, #0]
		oled_refreshResume();
 8007534:	f001 fa8a 	bl	8008a4c <oled_refreshResume>
}
 8007538:	e7f7      	b.n	800752a <midiController_stop+0x1a>
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	200009e8 	.word	0x200009e8

08007540 <midiControl_checkKeyboard>:

uint32_t midiControl_checkKeyboard(){
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8007542:	2200      	movs	r2, #0
 8007544:	2102      	movs	r1, #2
 8007546:	4895      	ldr	r0, [pc, #596]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007548:	f7fb fce2 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800754c:	2201      	movs	r2, #1
 800754e:	2104      	movs	r1, #4
 8007550:	4892      	ldr	r0, [pc, #584]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007552:	f7fb fcdd 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	2201      	movs	r2, #1
 800755a:	00c9      	lsls	r1, r1, #3
 800755c:	488f      	ldr	r0, [pc, #572]	; (800779c <midiControl_checkKeyboard+0x25c>)
 800755e:	f7fb fcd7 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	2201      	movs	r2, #1
 8007566:	0109      	lsls	r1, r1, #4
 8007568:	488c      	ldr	r0, [pc, #560]	; (800779c <midiControl_checkKeyboard+0x25c>)
 800756a:	f7fb fcd1 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800756e:	2180      	movs	r1, #128	; 0x80

	keyboardState = 0;
 8007570:	2500      	movs	r5, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8007572:	2201      	movs	r2, #1
 8007574:	0149      	lsls	r1, r1, #5
 8007576:	4889      	ldr	r0, [pc, #548]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007578:	f7fb fcca 	bl	8002f10 <HAL_GPIO_WritePin>
	keyboardState = 0;
 800757c:	4c88      	ldr	r4, [pc, #544]	; (80077a0 <midiControl_checkKeyboard+0x260>)

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 800757e:	2101      	movs	r1, #1
 8007580:	4888      	ldr	r0, [pc, #544]	; (80077a4 <midiControl_checkKeyboard+0x264>)
	keyboardState = 0;
 8007582:	6025      	str	r5, [r4, #0]
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8007584:	f7fb fcbe 	bl	8002f04 <HAL_GPIO_ReadPin>
 8007588:	2102      	movs	r1, #2
 800758a:	4247      	negs	r7, r0
 800758c:	4147      	adcs	r7, r0
 800758e:	4885      	ldr	r0, [pc, #532]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 8007590:	f7fb fcb8 	bl	8002f04 <HAL_GPIO_ReadPin>
 8007594:	0003      	movs	r3, r0
 8007596:	4258      	negs	r0, r3
 8007598:	4158      	adcs	r0, r3
 800759a:	0040      	lsls	r0, r0, #1
 800759c:	4307      	orrs	r7, r0
 800759e:	2104      	movs	r1, #4
 80075a0:	4880      	ldr	r0, [pc, #512]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80075a2:	f7fb fcaf 	bl	8002f04 <HAL_GPIO_ReadPin>
 80075a6:	0003      	movs	r3, r0
 80075a8:	4258      	negs	r0, r3
 80075aa:	4158      	adcs	r0, r3
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	0080      	lsls	r0, r0, #2
 80075b0:	4338      	orrs	r0, r7
 80075b2:	4318      	orrs	r0, r3
 80075b4:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80075b6:	2201      	movs	r2, #1
 80075b8:	2102      	movs	r1, #2
 80075ba:	4878      	ldr	r0, [pc, #480]	; (800779c <midiControl_checkKeyboard+0x25c>)
 80075bc:	f7fb fca8 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80075c0:	002a      	movs	r2, r5
 80075c2:	2104      	movs	r1, #4
 80075c4:	4875      	ldr	r0, [pc, #468]	; (800779c <midiControl_checkKeyboard+0x25c>)
 80075c6:	f7fb fca3 	bl	8002f10 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 3;
 80075ca:	2101      	movs	r1, #1
 80075cc:	4875      	ldr	r0, [pc, #468]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80075ce:	f7fb fc99 	bl	8002f04 <HAL_GPIO_ReadPin>
 80075d2:	2102      	movs	r1, #2
 80075d4:	4247      	negs	r7, r0
 80075d6:	4147      	adcs	r7, r0
 80075d8:	4872      	ldr	r0, [pc, #456]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80075da:	f7fb fc93 	bl	8002f04 <HAL_GPIO_ReadPin>
 80075de:	0003      	movs	r3, r0
 80075e0:	4258      	negs	r0, r3
 80075e2:	4158      	adcs	r0, r3
 80075e4:	0040      	lsls	r0, r0, #1
 80075e6:	4307      	orrs	r7, r0
 80075e8:	2104      	movs	r1, #4
 80075ea:	486e      	ldr	r0, [pc, #440]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80075ec:	f7fb fc8a 	bl	8002f04 <HAL_GPIO_ReadPin>
 80075f0:	0003      	movs	r3, r0
 80075f2:	4258      	negs	r0, r3
 80075f4:	4158      	adcs	r0, r3
 80075f6:	0080      	lsls	r0, r0, #2
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	4338      	orrs	r0, r7
 80075fc:	00c0      	lsls	r0, r0, #3
 80075fe:	4318      	orrs	r0, r3
 8007600:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8007602:	2201      	movs	r2, #1
 8007604:	2104      	movs	r1, #4
 8007606:	4865      	ldr	r0, [pc, #404]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007608:	f7fb fc82 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	002a      	movs	r2, r5
 8007610:	00c9      	lsls	r1, r1, #3
 8007612:	4862      	ldr	r0, [pc, #392]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007614:	f7fb fc7c 	bl	8002f10 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8007618:	2101      	movs	r1, #1
 800761a:	4862      	ldr	r0, [pc, #392]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 800761c:	f7fb fc72 	bl	8002f04 <HAL_GPIO_ReadPin>
 8007620:	2102      	movs	r1, #2
 8007622:	4247      	negs	r7, r0
 8007624:	4147      	adcs	r7, r0
 8007626:	485f      	ldr	r0, [pc, #380]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 8007628:	f7fb fc6c 	bl	8002f04 <HAL_GPIO_ReadPin>
 800762c:	0003      	movs	r3, r0
 800762e:	4258      	negs	r0, r3
 8007630:	4158      	adcs	r0, r3
 8007632:	0040      	lsls	r0, r0, #1
 8007634:	4307      	orrs	r7, r0
 8007636:	2104      	movs	r1, #4
 8007638:	485a      	ldr	r0, [pc, #360]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 800763a:	f7fb fc63 	bl	8002f04 <HAL_GPIO_ReadPin>
 800763e:	0003      	movs	r3, r0
 8007640:	4258      	negs	r0, r3
 8007642:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8007644:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8007646:	0080      	lsls	r0, r0, #2
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	4338      	orrs	r0, r7
 800764c:	0180      	lsls	r0, r0, #6
 800764e:	4318      	orrs	r0, r3
 8007650:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8007652:	2201      	movs	r2, #1
 8007654:	00c9      	lsls	r1, r1, #3
 8007656:	4851      	ldr	r0, [pc, #324]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007658:	f7fb fc5a 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	002a      	movs	r2, r5
 8007660:	0109      	lsls	r1, r1, #4
 8007662:	484e      	ldr	r0, [pc, #312]	; (800779c <midiControl_checkKeyboard+0x25c>)
 8007664:	f7fb fc54 	bl	8002f10 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8007668:	2101      	movs	r1, #1
 800766a:	484e      	ldr	r0, [pc, #312]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 800766c:	f7fb fc4a 	bl	8002f04 <HAL_GPIO_ReadPin>
 8007670:	2102      	movs	r1, #2
 8007672:	4247      	negs	r7, r0
 8007674:	4147      	adcs	r7, r0
 8007676:	484b      	ldr	r0, [pc, #300]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 8007678:	f7fb fc44 	bl	8002f04 <HAL_GPIO_ReadPin>
 800767c:	0003      	movs	r3, r0
 800767e:	4258      	negs	r0, r3
 8007680:	4158      	adcs	r0, r3
 8007682:	0040      	lsls	r0, r0, #1
 8007684:	4307      	orrs	r7, r0
 8007686:	2104      	movs	r1, #4
 8007688:	4846      	ldr	r0, [pc, #280]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 800768a:	f7fb fc3b 	bl	8002f04 <HAL_GPIO_ReadPin>
 800768e:	0003      	movs	r3, r0
 8007690:	4258      	negs	r0, r3
 8007692:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8007694:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8007696:	0080      	lsls	r0, r0, #2
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	4338      	orrs	r0, r7
 800769c:	0240      	lsls	r0, r0, #9
 800769e:	4318      	orrs	r0, r3
 80076a0:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80076a2:	2201      	movs	r2, #1
 80076a4:	0109      	lsls	r1, r1, #4
 80076a6:	483d      	ldr	r0, [pc, #244]	; (800779c <midiControl_checkKeyboard+0x25c>)
 80076a8:	f7fb fc32 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	002a      	movs	r2, r5
 80076b0:	0149      	lsls	r1, r1, #5
 80076b2:	483a      	ldr	r0, [pc, #232]	; (800779c <midiControl_checkKeyboard+0x25c>)
 80076b4:	f7fb fc2c 	bl	8002f10 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 80076b8:	2101      	movs	r1, #1
 80076ba:	483a      	ldr	r0, [pc, #232]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80076bc:	f7fb fc22 	bl	8002f04 <HAL_GPIO_ReadPin>
 80076c0:	2102      	movs	r1, #2
 80076c2:	4247      	negs	r7, r0
 80076c4:	4147      	adcs	r7, r0
 80076c6:	4837      	ldr	r0, [pc, #220]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80076c8:	f7fb fc1c 	bl	8002f04 <HAL_GPIO_ReadPin>
 80076cc:	0003      	movs	r3, r0
 80076ce:	4258      	negs	r0, r3
 80076d0:	4158      	adcs	r0, r3
 80076d2:	0040      	lsls	r0, r0, #1
 80076d4:	4307      	orrs	r7, r0
 80076d6:	2104      	movs	r1, #4
 80076d8:	4832      	ldr	r0, [pc, #200]	; (80077a4 <midiControl_checkKeyboard+0x264>)
 80076da:	f7fb fc13 	bl	8002f04 <HAL_GPIO_ReadPin>
 80076de:	0003      	movs	r3, r0
 80076e0:	4258      	negs	r0, r3
 80076e2:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80076e4:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 80076e6:	0080      	lsls	r0, r0, #2
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	4338      	orrs	r0, r7
 80076ec:	0300      	lsls	r0, r0, #12
 80076ee:	4318      	orrs	r0, r3
 80076f0:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80076f2:	2201      	movs	r2, #1
 80076f4:	0149      	lsls	r1, r1, #5
 80076f6:	4829      	ldr	r0, [pc, #164]	; (800779c <midiControl_checkKeyboard+0x25c>)
 80076f8:	f7fb fc0a 	bl	8002f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80076fc:	20a0      	movs	r0, #160	; 0xa0
 80076fe:	002a      	movs	r2, r5
 8007700:	2102      	movs	r1, #2
 8007702:	05c0      	lsls	r0, r0, #23
 8007704:	f7fb fc04 	bl	8002f10 <HAL_GPIO_WritePin>

	keyboardState |= (/*(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | */(((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	4824      	ldr	r0, [pc, #144]	; (800779c <midiControl_checkKeyboard+0x25c>)
 800770c:	0189      	lsls	r1, r1, #6
 800770e:	f7fb fbf9 	bl	8002f04 <HAL_GPIO_ReadPin>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	0400      	lsls	r0, r0, #16
 8007716:	4318      	orrs	r0, r3
 8007718:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800771a:	20a0      	movs	r0, #160	; 0xa0
 800771c:	2201      	movs	r2, #1
 800771e:	05c0      	lsls	r0, r0, #23
 8007720:	2102      	movs	r1, #2
 8007722:	f7fb fbf5 	bl	8002f10 <HAL_GPIO_WritePin>

	if(keyboardState != keyboardStateOld){
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	4c1f      	ldr	r4, [pc, #124]	; (80077a8 <midiControl_checkKeyboard+0x268>)
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	4298      	cmp	r0, r3
 800772e:	d033      	beq.n	8007798 <midiControl_checkKeyboard+0x258>
		keypad.one = (keyboardState & 0x4) >> 2;
 8007730:	2201      	movs	r2, #1
 8007732:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <midiControl_checkKeyboard+0x26c>)
 8007734:	0881      	lsrs	r1, r0, #2
 8007736:	4011      	ands	r1, r2
 8007738:	7019      	strb	r1, [r3, #0]
		keypad.two = (keyboardState & 0x2) >> 1;
 800773a:	0841      	lsrs	r1, r0, #1
 800773c:	4011      	ands	r1, r2
 800773e:	7059      	strb	r1, [r3, #1]
		keypad.three = (keyboardState & 0x1);
 8007740:	0001      	movs	r1, r0
 8007742:	4011      	ands	r1, r2
 8007744:	7099      	strb	r1, [r3, #2]

		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8007746:	0941      	lsrs	r1, r0, #5
 8007748:	4011      	ands	r1, r2
 800774a:	70d9      	strb	r1, [r3, #3]
		keypad.five = ((keyboardState >> 3) & 0x2) >> 1;
 800774c:	0901      	lsrs	r1, r0, #4
 800774e:	4011      	ands	r1, r2
 8007750:	7119      	strb	r1, [r3, #4]
		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8007752:	08c1      	lsrs	r1, r0, #3
		keypad.six = ((keyboardState >> 3) & 0x1);
 8007754:	4011      	ands	r1, r2
 8007756:	7159      	strb	r1, [r3, #5]

		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8007758:	0a01      	lsrs	r1, r0, #8
 800775a:	4011      	ands	r1, r2
 800775c:	7199      	strb	r1, [r3, #6]
		keypad.eight = ((keyboardState >> 6) & 0x2) >> 1;
 800775e:	09c1      	lsrs	r1, r0, #7
 8007760:	4011      	ands	r1, r2
 8007762:	71d9      	strb	r1, [r3, #7]
		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8007764:	0981      	lsrs	r1, r0, #6
		keypad.nine = ((keyboardState >> 6) & 0x1);
 8007766:	4011      	ands	r1, r2
 8007768:	7219      	strb	r1, [r3, #8]

		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 800776a:	0ac1      	lsrs	r1, r0, #11
 800776c:	4011      	ands	r1, r2
 800776e:	7299      	strb	r1, [r3, #10]
		keypad.zero = ((keyboardState >> 9) & 0x2) >> 1;
 8007770:	0a81      	lsrs	r1, r0, #10
 8007772:	4011      	ands	r1, r2
 8007774:	7259      	strb	r1, [r3, #9]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 8007776:	0c01      	lsrs	r1, r0, #16
 8007778:	4011      	ands	r1, r2
 800777a:	72d9      	strb	r1, [r3, #11]
		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 800777c:	0a41      	lsrs	r1, r0, #9

		keypad.up = ((keyboardState >> 9) & 0x1);
 800777e:	4011      	ands	r1, r2
 8007780:	7319      	strb	r1, [r3, #12]
		keypad.down = ((keyboardState >> 12) & 0x4) >> 2;
 8007782:	0b81      	lsrs	r1, r0, #14
 8007784:	4011      	ands	r1, r2
 8007786:	7359      	strb	r1, [r3, #13]
		keypad.left = ((keyboardState >> 12) & 0x2) >> 1;
 8007788:	0b41      	lsrs	r1, r0, #13
 800778a:	4011      	ands	r1, r2
 800778c:	7399      	strb	r1, [r3, #14]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 800778e:	0b01      	lsrs	r1, r0, #12
		keypad.right = ((keyboardState >> 12) & 0x1);
 8007790:	4011      	ands	r1, r2
 8007792:	73d9      	strb	r1, [r3, #15]
		//keypad.enter |= (((keyboardState >> 12) & 0x8) >> 3) & 0x01;

		keypad.changed = 1;
 8007794:	745a      	strb	r2, [r3, #17]

		keyboardStateOld = keyboardState;
 8007796:	6020      	str	r0, [r4, #0]
	}


	return keyboardState;
}
 8007798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	50000400 	.word	0x50000400
 80077a0:	200009f4 	.word	0x200009f4
 80077a4:	50000c00 	.word	0x50000c00
 80077a8:	20001db0 	.word	0x20001db0
 80077ac:	20002a08 	.word	0x20002a08

080077b0 <sendMsg>:

	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
	free(buffer);
}

void sendMsg(uint8_t src, uint8_t dest, uint8_t broadcast, uint8_t type, char * msg, uint16_t len){
 80077b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b2:	b085      	sub	sp, #20
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	ab0a      	add	r3, sp, #40	; 0x28
 80077b8:	9200      	str	r2, [sp, #0]
 80077ba:	cb04      	ldmia	r3!, {r2}
 80077bc:	9001      	str	r0, [sp, #4]
 80077be:	881f      	ldrh	r7, [r3, #0]
 80077c0:	000e      	movs	r6, r1
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 80077c2:	1dfc      	adds	r4, r7, #7
 80077c4:	0020      	movs	r0, r4
void sendMsg(uint8_t src, uint8_t dest, uint8_t broadcast, uint8_t type, char * msg, uint16_t len){
 80077c6:	9203      	str	r2, [sp, #12]
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 80077c8:	f002 f9ea 	bl	8009ba0 <malloc>
	buffer[0] = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	7003      	strb	r3, [r0, #0]
	buffer[1] = 0;
 80077d0:	7043      	strb	r3, [r0, #1]
	buffer[2] = 0;
 80077d2:	7083      	strb	r3, [r0, #2]
	buffer[3] = 0;
 80077d4:	70c3      	strb	r3, [r0, #3]
	buffer[4] = ((len+1) >> 4) & 0xff;
 80077d6:	1c7b      	adds	r3, r7, #1
 80077d8:	111a      	asrs	r2, r3, #4
 80077da:	7102      	strb	r2, [r0, #4]
	buffer[5] = (len+1) & 0xff;
	buffer[6] = ((type & 0x07) << 5) | ((src & 0x3) << 3) | ((broadcast & 0x01) << 2) | (dest & 0x03);
 80077dc:	2204      	movs	r2, #4
 80077de:	2118      	movs	r1, #24
	buffer[5] = (len+1) & 0xff;
 80077e0:	7143      	strb	r3, [r0, #5]
	buffer[6] = ((type & 0x07) << 5) | ((src & 0x3) << 3) | ((broadcast & 0x01) << 2) | (dest & 0x03);
 80077e2:	9b00      	ldr	r3, [sp, #0]
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 80077e4:	0005      	movs	r5, r0
	buffer[6] = ((type & 0x07) << 5) | ((src & 0x3) << 3) | ((broadcast & 0x01) << 2) | (dest & 0x03);
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4013      	ands	r3, r2
 80077ea:	3a01      	subs	r2, #1
 80077ec:	4032      	ands	r2, r6
 80077ee:	4313      	orrs	r3, r2
 80077f0:	9a02      	ldr	r2, [sp, #8]
 80077f2:	0152      	lsls	r2, r2, #5
 80077f4:	4313      	orrs	r3, r2
 80077f6:	9a01      	ldr	r2, [sp, #4]
 80077f8:	00d2      	lsls	r2, r2, #3
 80077fa:	400a      	ands	r2, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	7183      	strb	r3, [r0, #6]
	memcpy(&buffer[7], msg, len);
 8007800:	003a      	movs	r2, r7
 8007802:	3007      	adds	r0, #7
 8007804:	9903      	ldr	r1, [sp, #12]
 8007806:	f002 f9df 	bl	8009bc8 <memcpy>

	if(broadcast){
 800780a:	9b00      	ldr	r3, [sp, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <sendMsg+0x7c>
		//CDC_Transmit_FS(buffer, len+6);
		if(btStreamOpen && !btCmdMode) HAL_UART_Transmit_IT(&huart2, buffer, len+7);
	}else if(dest == ADDRESS_MAIN){
		if(btStreamOpen && !btCmdMode) HAL_UART_Transmit_IT(&huart2, buffer, len+7);
	}else if(dest == ADDRESS_OTHER){
		if(btStreamOpen && !btCmdMode) HAL_UART_Transmit_IT(&huart2, buffer, len+7);
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <sendMsg+0x8c>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <sendMsg+0x88>
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <sendMsg+0x90>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10b      	bne.n	8007838 <sendMsg+0x88>
 8007820:	b2a2      	uxth	r2, r4
 8007822:	0029      	movs	r1, r5
 8007824:	4807      	ldr	r0, [pc, #28]	; (8007844 <sendMsg+0x94>)
 8007826:	f7fd fb3f 	bl	8004ea8 <HAL_UART_Transmit_IT>
	}

}
 800782a:	e005      	b.n	8007838 <sendMsg+0x88>
	}else if(dest == ADDRESS_PC){
 800782c:	2e00      	cmp	r6, #0
 800782e:	d0ef      	beq.n	8007810 <sendMsg+0x60>
	}else if(dest == ADDRESS_MAIN){
 8007830:	2e02      	cmp	r6, #2
 8007832:	d0ed      	beq.n	8007810 <sendMsg+0x60>
	}else if(dest == ADDRESS_OTHER){
 8007834:	2e03      	cmp	r6, #3
 8007836:	d0eb      	beq.n	8007810 <sendMsg+0x60>
}
 8007838:	b005      	add	sp, #20
 800783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783c:	200029f4 	.word	0x200029f4
 8007840:	20002d54 	.word	0x20002d54
 8007844:	2000456c 	.word	0x2000456c

08007848 <msgAOK>:
void msgAOK(uint8_t aokType, uint8_t recType, uint16_t recSize, uint16_t dataSize, char * msg){
 8007848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784a:	0007      	movs	r7, r0
 800784c:	b085      	sub	sp, #20
	char * buffer = (char*)malloc(dataSize);
 800784e:	0018      	movs	r0, r3
void msgAOK(uint8_t aokType, uint8_t recType, uint16_t recSize, uint16_t dataSize, char * msg){
 8007850:	000e      	movs	r6, r1
 8007852:	001d      	movs	r5, r3
 8007854:	9203      	str	r2, [sp, #12]
	char * buffer = (char*)malloc(dataSize);
 8007856:	f002 f9a3 	bl	8009ba0 <malloc>
	buffer[0] = 0x80 | (aokType & 0x7f);
 800785a:	2380      	movs	r3, #128	; 0x80
	char * buffer = (char*)malloc(dataSize);
 800785c:	0004      	movs	r4, r0
	buffer[0] = 0x80 | (aokType & 0x7f);
 800785e:	425b      	negs	r3, r3
 8007860:	431f      	orrs	r7, r3
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8007862:	9b03      	ldr	r3, [sp, #12]
	buffer[0] = 0x80 | (aokType & 0x7f);
 8007864:	7007      	strb	r7, [r0, #0]
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8007866:	3b06      	subs	r3, #6
 8007868:	121a      	asrs	r2, r3, #8
	buffer[1] = recType;
 800786a:	7046      	strb	r6, [r0, #1]
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 800786c:	7082      	strb	r2, [r0, #2]
	buffer[3] = (recSize-6) & 0xff;
 800786e:	70c3      	strb	r3, [r0, #3]
	memcpy(&buffer[4], msg, dataSize);
 8007870:	002a      	movs	r2, r5
 8007872:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007874:	3004      	adds	r0, #4
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, dataSize+5);
 8007876:	3505      	adds	r5, #5
	memcpy(&buffer[4], msg, dataSize);
 8007878:	f002 f9a6 	bl	8009bc8 <memcpy>
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, dataSize+5);
 800787c:	b2ad      	uxth	r5, r5
 800787e:	06f1      	lsls	r1, r6, #27
 8007880:	0f89      	lsrs	r1, r1, #30
 8007882:	2307      	movs	r3, #7
 8007884:	2200      	movs	r2, #0
 8007886:	9501      	str	r5, [sp, #4]
 8007888:	9400      	str	r4, [sp, #0]
 800788a:	2002      	movs	r0, #2
 800788c:	f7ff ff90 	bl	80077b0 <sendMsg>
	free(buffer);
 8007890:	0020      	movs	r0, r4
 8007892:	f002 f98f 	bl	8009bb4 <free>
}
 8007896:	b005      	add	sp, #20
 8007898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800789a <msgERR>:
void msgERR(uint8_t errType, uint8_t recType, uint16_t recSize){
 800789a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800789c:	0016      	movs	r6, r2
 800789e:	0007      	movs	r7, r0
	char * buffer = (char*)malloc(5);
 80078a0:	2005      	movs	r0, #5
void msgERR(uint8_t errType, uint8_t recType, uint16_t recSize){
 80078a2:	000d      	movs	r5, r1
	char * buffer = (char*)malloc(5);
 80078a4:	f002 f97c 	bl	8009ba0 <malloc>
	buffer[0] = 0x7f & (errType & 0x7f);
 80078a8:	237f      	movs	r3, #127	; 0x7f
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 80078aa:	3e06      	subs	r6, #6
	buffer[0] = 0x7f & (errType & 0x7f);
 80078ac:	401f      	ands	r7, r3
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 80078ae:	1233      	asrs	r3, r6, #8
 80078b0:	7083      	strb	r3, [r0, #2]
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 80078b2:	2305      	movs	r3, #5
	char * buffer = (char*)malloc(5);
 80078b4:	0004      	movs	r4, r0
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 80078b6:	06e9      	lsls	r1, r5, #27
	buffer[0] = 0x7f & (errType & 0x7f);
 80078b8:	7007      	strb	r7, [r0, #0]
	buffer[1] = recType;
 80078ba:	7045      	strb	r5, [r0, #1]
	buffer[3] = (recSize-6) & 0xff;
 80078bc:	70c6      	strb	r6, [r0, #3]
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 80078be:	0f89      	lsrs	r1, r1, #30
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	9000      	str	r0, [sp, #0]
 80078c4:	3302      	adds	r3, #2
 80078c6:	2200      	movs	r2, #0
 80078c8:	2002      	movs	r0, #2
 80078ca:	f7ff ff71 	bl	80077b0 <sendMsg>
	free(buffer);
 80078ce:	0020      	movs	r0, r4
 80078d0:	f002 f970 	bl	8009bb4 <free>
}
 80078d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

080078d8 <decodeMessage>:
void decodeMessage(char * msg, uint16_t len, uint8_t broadcast){
 80078d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char msgType = msg[6];
 80078da:	7984      	ldrb	r4, [r0, #6]
void decodeMessage(char * msg, uint16_t len, uint8_t broadcast){
 80078dc:	000d      	movs	r5, r1
	if((msgType & 0xE0) == 0x20){
 80078de:	221f      	movs	r2, #31
 80078e0:	0021      	movs	r1, r4
void decodeMessage(char * msg, uint16_t len, uint8_t broadcast){
 80078e2:	0003      	movs	r3, r0
	if((msgType & 0xE0) == 0x20){
 80078e4:	4391      	bics	r1, r2
 80078e6:	2920      	cmp	r1, #32
 80078e8:	d13d      	bne.n	8007966 <decodeMessage+0x8e>
		if(msg[7] == INTERNAL_COM){
 80078ea:	79c6      	ldrb	r6, [r0, #7]
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	d12d      	bne.n	800794c <decodeMessage+0x74>
			if(msg[8] == INTERNAL_COM_PLAY){
 80078f0:	7a1a      	ldrb	r2, [r3, #8]
	uint8_t src = ((msg[6] & 0x18) >> 3);
 80078f2:	06e0      	lsls	r0, r4, #27
 80078f4:	0f80      	lsrs	r0, r0, #30
			if(msg[8] == INTERNAL_COM_PLAY){
 80078f6:	2a01      	cmp	r2, #1
 80078f8:	d104      	bne.n	8007904 <decodeMessage+0x2c>
				midiController_play(src, &msg[9]);
 80078fa:	3309      	adds	r3, #9
 80078fc:	0019      	movs	r1, r3
 80078fe:	f7ff fdcd 	bl	800749c <midiController_play>
}
 8007902:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			}else if(msg[8] == INTERNAL_COM_STOP){
 8007904:	2a00      	cmp	r2, #0
 8007906:	d102      	bne.n	800790e <decodeMessage+0x36>
				midiController_stop(src);
 8007908:	f7ff fe02 	bl	8007510 <midiController_stop>
 800790c:	e7f9      	b.n	8007902 <decodeMessage+0x2a>
			}else if(msg[8] == INTERNAL_COM_REC){
 800790e:	2a02      	cmp	r2, #2
 8007910:	d10b      	bne.n	800792a <decodeMessage+0x52>
				midiController_record(src, &msg[9]);
 8007912:	3309      	adds	r3, #9
 8007914:	0019      	movs	r1, r3
 8007916:	f7ff fd97 	bl	8007448 <midiController_record>
				msgAOK(0, msgType, len, 0, NULL);
 800791a:	0033      	movs	r3, r6
 800791c:	002a      	movs	r2, r5
 800791e:	0021      	movs	r1, r4
 8007920:	0030      	movs	r0, r6
 8007922:	9600      	str	r6, [sp, #0]
				msgAOK(0, msgType, len, 0, NULL);
 8007924:	f7ff ff90 	bl	8007848 <msgAOK>
 8007928:	e7eb      	b.n	8007902 <decodeMessage+0x2a>
			}else if(msg[8] == INTERNAL_COM_KEEPALIVE){
 800792a:	2aab      	cmp	r2, #171	; 0xab
 800792c:	d11b      	bne.n	8007966 <decodeMessage+0x8e>
				if(src == ADDRESS_CONTROLLER){
 800792e:	2801      	cmp	r0, #1
 8007930:	d104      	bne.n	800793c <decodeMessage+0x64>
					aliveRemote = 1;
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <decodeMessage+0x9c>)
 8007934:	7018      	strb	r0, [r3, #0]
					aliveRemoteCounter = 0;
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <decodeMessage+0xa0>)
 8007938:	701e      	strb	r6, [r3, #0]
 800793a:	e7e2      	b.n	8007902 <decodeMessage+0x2a>
				}else if(src == ADDRESS_PC){
 800793c:	2800      	cmp	r0, #0
 800793e:	d1e0      	bne.n	8007902 <decodeMessage+0x2a>
					alivePC = 1;
 8007940:	2201      	movs	r2, #1
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <decodeMessage+0xa4>)
 8007944:	701a      	strb	r2, [r3, #0]
					alivePCCounter = 0;
 8007946:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <decodeMessage+0xa8>)
 8007948:	7018      	strb	r0, [r3, #0]
 800794a:	e7da      	b.n	8007902 <decodeMessage+0x2a>
		}else if(msg[7] == INTERNAL_CURR){
 800794c:	2e03      	cmp	r6, #3
 800794e:	d10a      	bne.n	8007966 <decodeMessage+0x8e>
			if(msg[8] == INTERNAL_CURR_ON){
 8007950:	7a00      	ldrb	r0, [r0, #8]
 8007952:	2801      	cmp	r0, #1
 8007954:	d105      	bne.n	8007962 <decodeMessage+0x8a>
				msgAOK(0, msgType, len, 0, NULL);
 8007956:	2000      	movs	r0, #0
				msgAOK(0, msgType, len, 0, NULL);
 8007958:	9000      	str	r0, [sp, #0]
 800795a:	0003      	movs	r3, r0
 800795c:	002a      	movs	r2, r5
 800795e:	0021      	movs	r1, r4
 8007960:	e7e0      	b.n	8007924 <decodeMessage+0x4c>
			}else if(msg[8] == INTERNAL_CURR_OFF){
 8007962:	2800      	cmp	r0, #0
 8007964:	d0f8      	beq.n	8007958 <decodeMessage+0x80>
	}else msgERR(0, msgType, len);
 8007966:	002a      	movs	r2, r5
 8007968:	0021      	movs	r1, r4
 800796a:	2000      	movs	r0, #0
 800796c:	f7ff ff95 	bl	800789a <msgERR>
}
 8007970:	e7c7      	b.n	8007902 <decodeMessage+0x2a>
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	20002cbc 	.word	0x20002cbc
 8007978:	20002f59 	.word	0x20002f59
 800797c:	200023f4 	.word	0x200023f4
 8007980:	20002cec 	.word	0x20002cec

08007984 <oled_StartSplash>:
void oled_refreshResume(){
	refreshHalt = 0;
}

//Funkce vykreslujici zapinaci obrazovku
void oled_StartSplash(){
 8007984:	b510      	push	{r4, lr}
	//Vypisou se texty
	ssd1306_SetCursor(3, 10);
 8007986:	210a      	movs	r1, #10
 8007988:	2003      	movs	r0, #3
 800798a:	f001 fe3d 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString("MIDIControl", Font_11x18, White);
 800798e:	4c0f      	ldr	r4, [pc, #60]	; (80079cc <oled_StartSplash+0x48>)
 8007990:	2301      	movs	r3, #1
 8007992:	6821      	ldr	r1, [r4, #0]
 8007994:	6862      	ldr	r2, [r4, #4]
 8007996:	480e      	ldr	r0, [pc, #56]	; (80079d0 <oled_StartSplash+0x4c>)
 8007998:	f001 fe22 	bl	80095e0 <ssd1306_WriteString>

	ssd1306_SetCursor(42,30);
 800799c:	211e      	movs	r1, #30
 800799e:	202a      	movs	r0, #42	; 0x2a
 80079a0:	f001 fe32 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString("BASE", Font_11x18, White);
 80079a4:	cc06      	ldmia	r4!, {r1, r2}
 80079a6:	2301      	movs	r3, #1
 80079a8:	480a      	ldr	r0, [pc, #40]	; (80079d4 <oled_StartSplash+0x50>)
 80079aa:	f001 fe19 	bl	80095e0 <ssd1306_WriteString>

	char * version = "Verze 1.1";
	ssd1306_SetCursor((128-(strlen(version)-1)*7)/2,50);
 80079ae:	2132      	movs	r1, #50	; 0x32
 80079b0:	2024      	movs	r0, #36	; 0x24
 80079b2:	f001 fe29 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(version, Font_7x10, White);
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <oled_StartSplash+0x54>)
 80079b8:	2301      	movs	r3, #1
 80079ba:	6811      	ldr	r1, [r2, #0]
 80079bc:	4807      	ldr	r0, [pc, #28]	; (80079dc <oled_StartSplash+0x58>)
 80079be:	6852      	ldr	r2, [r2, #4]
 80079c0:	f001 fe0e 	bl	80095e0 <ssd1306_WriteString>

	//Vyporada se s kliknutim tlacitka
	encoderclick = 0;
 80079c4:	2200      	movs	r2, #0
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <oled_StartSplash+0x5c>)
 80079c8:	601a      	str	r2, [r3, #0]
}
 80079ca:	bd10      	pop	{r4, pc}
 80079cc:	200001e8 	.word	0x200001e8
 80079d0:	0800c361 	.word	0x0800c361
 80079d4:	0800c36d 	.word	0x0800c36d
 80079d8:	200001f0 	.word	0x200001f0
 80079dc:	0800c372 	.word	0x0800c372
 80079e0:	2000264c 	.word	0x2000264c

080079e4 <oled_BtDevInfoSplash>:
	}
}


//Funkce vykreslujici ze struktry info obrazovku o zarizeni
void oled_BtDevInfoSplash(struct btDevice * dev){
 80079e4:	b530      	push	{r4, r5, lr}
 80079e6:	b08d      	sub	sp, #52	; 0x34
 80079e8:	0004      	movs	r4, r0

	//Nastavi se scrollovani pokud je jmeno delsi nez obrazovka
	if(strlen(dev->name) > 9){
 80079ea:	f7f8 fb95 	bl	8000118 <strlen>
 80079ee:	4d38      	ldr	r5, [pc, #224]	; (8007ad0 <oled_BtDevInfoSplash+0xec>)
 80079f0:	0003      	movs	r3, r0
 80079f2:	2809      	cmp	r0, #9
 80079f4:	d95e      	bls.n	8007ab4 <oled_BtDevInfoSplash+0xd0>
		scrollMax = (strlen(dev->name) - 10);
 80079f6:	3b0a      	subs	r3, #10
 80079f8:	0018      	movs	r0, r3
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <oled_BtDevInfoSplash+0xf0>)
		ssd1306_SetCursor(14, 1);
 80079fc:	2101      	movs	r1, #1
		scrollMax = (strlen(dev->name) - 10);
 80079fe:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 8007a00:	200e      	movs	r0, #14
 8007a02:	f001 fe01 	bl	8009608 <ssd1306_SetCursor>
		char tmp[10];
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 8007a06:	4b34      	ldr	r3, [pc, #208]	; (8007ad8 <oled_BtDevInfoSplash+0xf4>)
 8007a08:	2209      	movs	r2, #9
 8007a0a:	6819      	ldr	r1, [r3, #0]
 8007a0c:	a805      	add	r0, sp, #20
 8007a0e:	1861      	adds	r1, r4, r1
 8007a10:	f002 f8da 	bl	8009bc8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 8007a14:	0020      	movs	r0, r4
 8007a16:	f7f8 fb7f 	bl	8000118 <strlen>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	201d      	movs	r0, #29
 8007a1e:	3a09      	subs	r2, #9
 8007a20:	2100      	movs	r1, #0
 8007a22:	4468      	add	r0, sp
 8007a24:	f002 f8d9 	bl	8009bda <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 8007a28:	cd06      	ldmia	r5!, {r1, r2}
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	a805      	add	r0, sp, #20
	}else{
		ssd1306_SetCursor((128-(strlen(dev->name)-1)*9)/2, 1);
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8007a2e:	f001 fdd7 	bl	80095e0 <ssd1306_WriteString>
	}

	//Vypisou se udaje
	char msg[25];
	sprintf(msg, "%02X-%02X-%02X-%02X-%02X-%02X", dev->mac[0], dev->mac[1], dev->mac[2], dev->mac[3], dev->mac[4], dev->mac[5]);
 8007a32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a3a:	4928      	ldr	r1, [pc, #160]	; (8007adc <oled_BtDevInfoSplash+0xf8>)
 8007a3c:	9302      	str	r3, [sp, #8]
 8007a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a40:	a805      	add	r0, sp, #20
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a4a:	f002 f989 	bl	8009d60 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg)-1)*7)/2, 30);
 8007a4e:	a805      	add	r0, sp, #20
 8007a50:	f7f8 fb62 	bl	8000118 <strlen>
 8007a54:	00c3      	lsls	r3, r0, #3
 8007a56:	1ac0      	subs	r0, r0, r3
 8007a58:	3087      	adds	r0, #135	; 0x87
 8007a5a:	0840      	lsrs	r0, r0, #1
 8007a5c:	b2c0      	uxtb	r0, r0
 8007a5e:	211e      	movs	r1, #30
 8007a60:	f001 fdd2 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8007a64:	4d1e      	ldr	r5, [pc, #120]	; (8007ae0 <oled_BtDevInfoSplash+0xfc>)
 8007a66:	2301      	movs	r3, #1
 8007a68:	6829      	ldr	r1, [r5, #0]
 8007a6a:	686a      	ldr	r2, [r5, #4]
 8007a6c:	a805      	add	r0, sp, #20
 8007a6e:	f001 fdb7 	bl	80095e0 <ssd1306_WriteString>

	//Vypise se RSSI
	sprintf(msg, "RSSI: %ddB", dev->rssi);
 8007a72:	2254      	movs	r2, #84	; 0x54
 8007a74:	491b      	ldr	r1, [pc, #108]	; (8007ae4 <oled_BtDevInfoSplash+0x100>)
 8007a76:	56a2      	ldrsb	r2, [r4, r2]
 8007a78:	a805      	add	r0, sp, #20
 8007a7a:	f002 f971 	bl	8009d60 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg)-1)*7)/2, 43);
 8007a7e:	a805      	add	r0, sp, #20
 8007a80:	f7f8 fb4a 	bl	8000118 <strlen>
 8007a84:	00c3      	lsls	r3, r0, #3
 8007a86:	1ac0      	subs	r0, r0, r3
 8007a88:	3087      	adds	r0, #135	; 0x87
 8007a8a:	0840      	lsrs	r0, r0, #1
 8007a8c:	b2c0      	uxtb	r0, r0
 8007a8e:	212b      	movs	r1, #43	; 0x2b
 8007a90:	f001 fdba 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8007a94:	cd06      	ldmia	r5!, {r1, r2}
 8007a96:	2301      	movs	r3, #1
 8007a98:	a805      	add	r0, sp, #20
 8007a9a:	f001 fda1 	bl	80095e0 <ssd1306_WriteString>


	//Pokud se klikne, vrati se do menu
	if(encoderclick){
 8007a9e:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <oled_BtDevInfoSplash+0x104>)
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	d004      	beq.n	8007ab0 <oled_BtDevInfoSplash+0xcc>
		oledType = OLED_MENU;
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	4a10      	ldr	r2, [pc, #64]	; (8007aec <oled_BtDevInfoSplash+0x108>)
 8007aaa:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
	}
}
 8007ab0:	b00d      	add	sp, #52	; 0x34
 8007ab2:	bd30      	pop	{r4, r5, pc}
		ssd1306_SetCursor((128-(strlen(dev->name)-1)*9)/2, 1);
 8007ab4:	2009      	movs	r0, #9
 8007ab6:	4240      	negs	r0, r0
 8007ab8:	4358      	muls	r0, r3
 8007aba:	3089      	adds	r0, #137	; 0x89
 8007abc:	0840      	lsrs	r0, r0, #1
 8007abe:	b2c0      	uxtb	r0, r0
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	f001 fda1 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8007ac6:	cd06      	ldmia	r5!, {r1, r2}
 8007ac8:	2301      	movs	r3, #1
 8007aca:	0020      	movs	r0, r4
 8007acc:	e7af      	b.n	8007a2e <oled_BtDevInfoSplash+0x4a>
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	200001e8 	.word	0x200001e8
 8007ad4:	2000089c 	.word	0x2000089c
 8007ad8:	2000382c 	.word	0x2000382c
 8007adc:	0800c103 	.word	0x0800c103
 8007ae0:	200001f0 	.word	0x200001f0
 8007ae4:	0800c31c 	.word	0x0800c31c
 8007ae8:	2000264c 	.word	0x2000264c
 8007aec:	200009e8 	.word	0x200009e8

08007af0 <oled_LoadingSplash>:
void oled_LoadingSplash(char * msg){
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	0004      	movs	r4, r0
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 15);
 8007af4:	f7f8 fb10 	bl	8000118 <strlen>
 8007af8:	0003      	movs	r3, r0
 8007afa:	200b      	movs	r0, #11
 8007afc:	4240      	negs	r0, r0
 8007afe:	4358      	muls	r0, r3
 8007b00:	308b      	adds	r0, #139	; 0x8b
 8007b02:	0840      	lsrs	r0, r0, #1
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8007b04:	2601      	movs	r6, #1
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 15);
 8007b06:	b2c0      	uxtb	r0, r0
 8007b08:	210f      	movs	r1, #15
 8007b0a:	f001 fd7d 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8007b0e:	0020      	movs	r0, r4
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8007b10:	2421      	movs	r4, #33	; 0x21
	ssd1306_WriteString(msg, Font_11x18, White);
 8007b12:	4a1a      	ldr	r2, [pc, #104]	; (8007b7c <oled_LoadingSplash+0x8c>)
 8007b14:	2301      	movs	r3, #1
 8007b16:	6811      	ldr	r1, [r2, #0]
 8007b18:	6852      	ldr	r2, [r2, #4]
 8007b1a:	f001 fd61 	bl	80095e0 <ssd1306_WriteString>
	ssd1306_SetCursor(42,35);
 8007b1e:	2123      	movs	r1, #35	; 0x23
 8007b20:	202a      	movs	r0, #42	; 0x2a
 8007b22:	f001 fd71 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8007b26:	4f16      	ldr	r7, [pc, #88]	; (8007b80 <oled_LoadingSplash+0x90>)
 8007b28:	4d16      	ldr	r5, [pc, #88]	; (8007b84 <oled_LoadingSplash+0x94>)
 8007b2a:	6838      	ldr	r0, [r7, #0]
 8007b2c:	0033      	movs	r3, r6
 8007b2e:	4030      	ands	r0, r6
 8007b30:	1a20      	subs	r0, r4, r0
 8007b32:	686a      	ldr	r2, [r5, #4]
 8007b34:	6829      	ldr	r1, [r5, #0]
 8007b36:	b2c0      	uxtb	r0, r0
 8007b38:	f001 fcfc 	bl	8009534 <ssd1306_WriteChar>
	ssd1306_SetCursor(64,35);
 8007b3c:	2123      	movs	r1, #35	; 0x23
 8007b3e:	2040      	movs	r0, #64	; 0x40
 8007b40:	f001 fd62 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>1) & 0x01), Icon_11x18, White);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	6829      	ldr	r1, [r5, #0]
 8007b48:	1058      	asrs	r0, r3, #1
 8007b4a:	4030      	ands	r0, r6
 8007b4c:	1a20      	subs	r0, r4, r0
 8007b4e:	0033      	movs	r3, r6
 8007b50:	686a      	ldr	r2, [r5, #4]
 8007b52:	b2c0      	uxtb	r0, r0
 8007b54:	f001 fcee 	bl	8009534 <ssd1306_WriteChar>
	ssd1306_SetCursor(86,35);
 8007b58:	2123      	movs	r1, #35	; 0x23
 8007b5a:	2056      	movs	r0, #86	; 0x56
 8007b5c:	f001 fd54 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>2) & 0x01), Icon_11x18, White);
 8007b60:	cd06      	ldmia	r5!, {r1, r2}
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	0033      	movs	r3, r6
 8007b66:	1080      	asrs	r0, r0, #2
 8007b68:	4030      	ands	r0, r6
 8007b6a:	1a20      	subs	r0, r4, r0
 8007b6c:	b2c0      	uxtb	r0, r0
 8007b6e:	f001 fce1 	bl	8009534 <ssd1306_WriteChar>
	encoderclick = 0;
 8007b72:	2200      	movs	r2, #0
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <oled_LoadingSplash+0x98>)
 8007b76:	601a      	str	r2, [r3, #0]
}
 8007b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	200001e8 	.word	0x200001e8
 8007b80:	200029f8 	.word	0x200029f8
 8007b84:	200001f8 	.word	0x200001f8
 8007b88:	2000264c 	.word	0x2000264c

08007b8c <oled_BtDevKeyEnterSplash>:
}


void oled_BtDevKeyEnterSplash(struct btDevice * dev){

	keyboardSidePosMax = 5;
 8007b8c:	2305      	movs	r3, #5
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 8007b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	keyboardSidePosMax = 5;
 8007b90:	4cc5      	ldr	r4, [pc, #788]	; (8007ea8 <oled_BtDevKeyEnterSplash+0x31c>)
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 8007b92:	b091      	sub	sp, #68	; 0x44

	char msg[25];

	sprintf(msg, "Vlozte PIN");
 8007b94:	49c5      	ldr	r1, [pc, #788]	; (8007eac <oled_BtDevKeyEnterSplash+0x320>)
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 8007b96:	0007      	movs	r7, r0
	sprintf(msg, "Vlozte PIN");
 8007b98:	a809      	add	r0, sp, #36	; 0x24
	keyboardSidePosMax = 5;
 8007b9a:	6023      	str	r3, [r4, #0]
	sprintf(msg, "Vlozte PIN");
 8007b9c:	f002 f93a 	bl	8009e14 <strcpy>
	ssd1306_SetCursor((128-((float)strlen(msg)-0.5)*11)/2, 1);
 8007ba0:	a809      	add	r0, sp, #36	; 0x24
 8007ba2:	f7f8 fab9 	bl	8000118 <strlen>
 8007ba6:	f7f8 fd85 	bl	80006b4 <__aeabi_ui2f>
 8007baa:	f7fa fb39 	bl	8002220 <__aeabi_f2d>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4bbf      	ldr	r3, [pc, #764]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007bb2:	f7f9 ff89 	bl	8001ac8 <__aeabi_dsub>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4bbe      	ldr	r3, [pc, #760]	; (8007eb4 <oled_BtDevKeyEnterSplash+0x328>)
 8007bba:	f7f9 fd05 	bl	80015c8 <__aeabi_dmul>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	000b      	movs	r3, r1
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	49bc      	ldr	r1, [pc, #752]	; (8007eb8 <oled_BtDevKeyEnterSplash+0x32c>)
 8007bc6:	f7f9 ff7f 	bl	8001ac8 <__aeabi_dsub>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4bb8      	ldr	r3, [pc, #736]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007bce:	f7f9 fcfb 	bl	80015c8 <__aeabi_dmul>
 8007bd2:	f7f8 fc91 	bl	80004f8 <__aeabi_d2uiz>
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	b2c0      	uxtb	r0, r0
 8007bda:	f001 fd15 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8007bde:	4db7      	ldr	r5, [pc, #732]	; (8007ebc <oled_BtDevKeyEnterSplash+0x330>)
 8007be0:	2301      	movs	r3, #1
 8007be2:	6829      	ldr	r1, [r5, #0]
 8007be4:	686a      	ldr	r2, [r5, #4]
 8007be6:	a809      	add	r0, sp, #36	; 0x24
 8007be8:	f001 fcfa 	bl	80095e0 <ssd1306_WriteString>


	sprintf(msg, "%06ld", dev->pin);
 8007bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bee:	49b4      	ldr	r1, [pc, #720]	; (8007ec0 <oled_BtDevKeyEnterSplash+0x334>)
 8007bf0:	a809      	add	r0, sp, #36	; 0x24
 8007bf2:	f002 f8b5 	bl	8009d60 <siprintf>
	ssd1306_SetCursor((128-((float)strlen(msg)-0.5)*11)/2, 28);
 8007bf6:	a809      	add	r0, sp, #36	; 0x24
 8007bf8:	f7f8 fa8e 	bl	8000118 <strlen>
 8007bfc:	f7f8 fd5a 	bl	80006b4 <__aeabi_ui2f>
 8007c00:	f7fa fb0e 	bl	8002220 <__aeabi_f2d>
 8007c04:	2200      	movs	r2, #0
 8007c06:	4baa      	ldr	r3, [pc, #680]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007c08:	f7f9 ff5e 	bl	8001ac8 <__aeabi_dsub>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4ba9      	ldr	r3, [pc, #676]	; (8007eb4 <oled_BtDevKeyEnterSplash+0x328>)
 8007c10:	f7f9 fcda 	bl	80015c8 <__aeabi_dmul>
 8007c14:	0002      	movs	r2, r0
 8007c16:	000b      	movs	r3, r1
 8007c18:	2000      	movs	r0, #0
 8007c1a:	49a7      	ldr	r1, [pc, #668]	; (8007eb8 <oled_BtDevKeyEnterSplash+0x32c>)
 8007c1c:	f7f9 ff54 	bl	8001ac8 <__aeabi_dsub>
 8007c20:	2200      	movs	r2, #0
 8007c22:	4ba3      	ldr	r3, [pc, #652]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007c24:	f7f9 fcd0 	bl	80015c8 <__aeabi_dmul>
 8007c28:	f7f8 fc66 	bl	80004f8 <__aeabi_d2uiz>
 8007c2c:	211c      	movs	r1, #28
 8007c2e:	b2c0      	uxtb	r0, r0
 8007c30:	f001 fcea 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8007c34:	cd06      	ldmia	r5!, {r1, r2}
 8007c36:	2301      	movs	r3, #1
 8007c38:	a809      	add	r0, sp, #36	; 0x24
 8007c3a:	f001 fcd1 	bl	80095e0 <ssd1306_WriteString>

	if(loadingToggle){
 8007c3e:	4ba1      	ldr	r3, [pc, #644]	; (8007ec4 <oled_BtDevKeyEnterSplash+0x338>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d000      	beq.n	8007c48 <oled_BtDevKeyEnterSplash+0xbc>
 8007c46:	e0a1      	b.n	8007d8c <oled_BtDevKeyEnterSplash+0x200>
			}
		}
	}


	uint8_t digit = (dev->pin / (long int)pow(10, keyboardSidePosMax-keyboardSidePos)) - (dev->pin/(long int)pow(10, keyboardSidePosMax-keyboardSidePos+1))*10;
 8007c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c4a:	4d9f      	ldr	r5, [pc, #636]	; (8007ec8 <oled_BtDevKeyEnterSplash+0x33c>)
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	682a      	ldr	r2, [r5, #0]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	1a98      	subs	r0, r3, r2
 8007c54:	f7fa faa2 	bl	800219c <__aeabi_i2d>
 8007c58:	0002      	movs	r2, r0
 8007c5a:	000b      	movs	r3, r1
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	499b      	ldr	r1, [pc, #620]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007c60:	f003 f99e 	bl	800afa0 <pow>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	682a      	ldr	r2, [r5, #0]
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	9103      	str	r1, [sp, #12]
 8007c6c:	1a98      	subs	r0, r3, r2
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f7fa fa94 	bl	800219c <__aeabi_i2d>
 8007c74:	000b      	movs	r3, r1
 8007c76:	0002      	movs	r2, r0
 8007c78:	4994      	ldr	r1, [pc, #592]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8007c7e:	f003 f98f 	bl	800afa0 <pow>
 8007c82:	f7fa fa57 	bl	8002134 <__aeabi_d2iz>
 8007c86:	0001      	movs	r1, r0
 8007c88:	0030      	movs	r0, r6
 8007c8a:	260a      	movs	r6, #10
 8007c8c:	f7f8 faea 	bl	8000264 <__divsi3>
 8007c90:	4276      	negs	r6, r6
 8007c92:	4346      	muls	r6, r0
 8007c94:	9802      	ldr	r0, [sp, #8]
 8007c96:	9903      	ldr	r1, [sp, #12]
 8007c98:	f7fa fa4c 	bl	8002134 <__aeabi_d2iz>
 8007c9c:	0001      	movs	r1, r0
 8007c9e:	9800      	ldr	r0, [sp, #0]
 8007ca0:	f7f8 fae0 	bl	8000264 <__divsi3>

	if(keypadClicks.down){
 8007ca4:	4b8a      	ldr	r3, [pc, #552]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
	uint8_t digit = (dev->pin / (long int)pow(10, keyboardSidePosMax-keyboardSidePos)) - (dev->pin/(long int)pow(10, keyboardSidePosMax-keyboardSidePos+1))*10;
 8007ca6:	1836      	adds	r6, r6, r0
	if(keypadClicks.down){
 8007ca8:	7b5b      	ldrb	r3, [r3, #13]
	uint8_t digit = (dev->pin / (long int)pow(10, keyboardSidePosMax-keyboardSidePos)) - (dev->pin/(long int)pow(10, keyboardSidePosMax-keyboardSidePos+1))*10;
 8007caa:	b2f6      	uxtb	r6, r6
	if(keypadClicks.down){
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d100      	bne.n	8007cb2 <oled_BtDevKeyEnterSplash+0x126>
 8007cb0:	e06e      	b.n	8007d90 <oled_BtDevKeyEnterSplash+0x204>
		//keyboardVertPos = digit;
		if(digit > 0){
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	d016      	beq.n	8007ce4 <oled_BtDevKeyEnterSplash+0x158>
			dev->pin -= pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	1ac0      	subs	r0, r0, r3
 8007cbc:	f7fa fa6e 	bl	800219c <__aeabi_i2d>
 8007cc0:	0002      	movs	r2, r0
 8007cc2:	000b      	movs	r3, r1
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4981      	ldr	r1, [pc, #516]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007cc8:	f003 f96a 	bl	800afa0 <pow>
 8007ccc:	0004      	movs	r4, r0
 8007cce:	000d      	movs	r5, r1
 8007cd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cd2:	f7fa fa63 	bl	800219c <__aeabi_i2d>
 8007cd6:	0022      	movs	r2, r4
 8007cd8:	002b      	movs	r3, r5
 8007cda:	f7f9 fef5 	bl	8001ac8 <__aeabi_dsub>
 8007cde:	f7fa fa29 	bl	8002134 <__aeabi_d2iz>
 8007ce2:	65b8      	str	r0, [r7, #88]	; 0x58
		}

		keypadClicks.down = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4a7a      	ldr	r2, [pc, #488]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007ce8:	7353      	strb	r3, [r2, #13]
	}else if(keypadClicks.nine){
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
		keypadClicks.nine = 0;
	}

	if(encoderclick){
 8007cea:	4c7a      	ldr	r4, [pc, #488]	; (8007ed4 <oled_BtDevKeyEnterSplash+0x348>)
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <oled_BtDevKeyEnterSplash+0x176>
		 workerAssert(&workerBtEnterPairingKey);
 8007cf2:	4879      	ldr	r0, [pc, #484]	; (8007ed8 <oled_BtDevKeyEnterSplash+0x34c>)
 8007cf4:	f7ff fb80 	bl	80073f8 <workerAssert>
		oledType = OLED_MENU;
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	4b78      	ldr	r3, [pc, #480]	; (8007edc <oled_BtDevKeyEnterSplash+0x350>)
 8007cfc:	601a      	str	r2, [r3, #0]
		encoderclick = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6023      	str	r3, [r4, #0]
	}
}
 8007d02:	b011      	add	sp, #68	; 0x44
 8007d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ssd1306_DrawPixel(x+(128-((float)strlen(msg)-0.5)*11)/2+keyboardSidePos*11, y+48, White);
 8007d06:	a809      	add	r0, sp, #36	; 0x24
 8007d08:	f7f8 fa06 	bl	8000118 <strlen>
 8007d0c:	f7f8 fcd2 	bl	80006b4 <__aeabi_ui2f>
 8007d10:	f7fa fa86 	bl	8002220 <__aeabi_f2d>
 8007d14:	2200      	movs	r2, #0
 8007d16:	4b66      	ldr	r3, [pc, #408]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007d18:	f7f9 fed6 	bl	8001ac8 <__aeabi_dsub>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4b65      	ldr	r3, [pc, #404]	; (8007eb4 <oled_BtDevKeyEnterSplash+0x328>)
 8007d20:	f7f9 fc52 	bl	80015c8 <__aeabi_dmul>
 8007d24:	0002      	movs	r2, r0
 8007d26:	000b      	movs	r3, r1
 8007d28:	2000      	movs	r0, #0
 8007d2a:	4963      	ldr	r1, [pc, #396]	; (8007eb8 <oled_BtDevKeyEnterSplash+0x32c>)
 8007d2c:	f7f9 fecc 	bl	8001ac8 <__aeabi_dsub>
 8007d30:	2200      	movs	r2, #0
 8007d32:	4b5f      	ldr	r3, [pc, #380]	; (8007eb0 <oled_BtDevKeyEnterSplash+0x324>)
 8007d34:	f7f9 fc48 	bl	80015c8 <__aeabi_dmul>
 8007d38:	9000      	str	r0, [sp, #0]
 8007d3a:	9101      	str	r1, [sp, #4]
 8007d3c:	0028      	movs	r0, r5
 8007d3e:	f7fa fa2d 	bl	800219c <__aeabi_i2d>
 8007d42:	0002      	movs	r2, r0
 8007d44:	000b      	movs	r3, r1
 8007d46:	9800      	ldr	r0, [sp, #0]
 8007d48:	9901      	ldr	r1, [sp, #4]
 8007d4a:	f7f8 fcf9 	bl	8000740 <__aeabi_dadd>
 8007d4e:	4b5e      	ldr	r3, [pc, #376]	; (8007ec8 <oled_BtDevKeyEnterSplash+0x33c>)
 8007d50:	9000      	str	r0, [sp, #0]
 8007d52:	9101      	str	r1, [sp, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	230b      	movs	r3, #11
 8007d58:	4358      	muls	r0, r3
 8007d5a:	f7fa fa1f 	bl	800219c <__aeabi_i2d>
 8007d5e:	0002      	movs	r2, r0
 8007d60:	000b      	movs	r3, r1
 8007d62:	9800      	ldr	r0, [sp, #0]
 8007d64:	9901      	ldr	r1, [sp, #4]
 8007d66:	f7f8 fceb 	bl	8000740 <__aeabi_dadd>
 8007d6a:	f7f8 fbc5 	bl	80004f8 <__aeabi_d2uiz>
 8007d6e:	0031      	movs	r1, r6
 8007d70:	3601      	adds	r6, #1
 8007d72:	b2c0      	uxtb	r0, r0
 8007d74:	2201      	movs	r2, #1
 8007d76:	b2f6      	uxtb	r6, r6
 8007d78:	f001 fbb8 	bl	80094ec <ssd1306_DrawPixel>
			for(int y = 0; y < 3; y++){
 8007d7c:	2e33      	cmp	r6, #51	; 0x33
 8007d7e:	d1c2      	bne.n	8007d06 <oled_BtDevKeyEnterSplash+0x17a>
		for(int x = 0; x < 11; x++){
 8007d80:	3501      	adds	r5, #1
 8007d82:	2d0b      	cmp	r5, #11
 8007d84:	d100      	bne.n	8007d88 <oled_BtDevKeyEnterSplash+0x1fc>
 8007d86:	e75f      	b.n	8007c48 <oled_BtDevKeyEnterSplash+0xbc>
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 8007d88:	2630      	movs	r6, #48	; 0x30
 8007d8a:	e7bc      	b.n	8007d06 <oled_BtDevKeyEnterSplash+0x17a>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	e7fb      	b.n	8007d88 <oled_BtDevKeyEnterSplash+0x1fc>
	}else if(keypadClicks.up){
 8007d90:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007d92:	7b1b      	ldrb	r3, [r3, #12]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01c      	beq.n	8007dd4 <oled_BtDevKeyEnterSplash+0x248>
		if(digit < 9){
 8007d9a:	2e08      	cmp	r6, #8
 8007d9c:	d816      	bhi.n	8007dcc <oled_BtDevKeyEnterSplash+0x240>
			dev->pin += pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	1ac0      	subs	r0, r0, r3
 8007da4:	f7fa f9fa 	bl	800219c <__aeabi_i2d>
 8007da8:	0002      	movs	r2, r0
 8007daa:	000b      	movs	r3, r1
 8007dac:	2000      	movs	r0, #0
 8007dae:	4947      	ldr	r1, [pc, #284]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007db0:	f003 f8f6 	bl	800afa0 <pow>
 8007db4:	0004      	movs	r4, r0
 8007db6:	000d      	movs	r5, r1
 8007db8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007dba:	f7fa f9ef 	bl	800219c <__aeabi_i2d>
 8007dbe:	0022      	movs	r2, r4
 8007dc0:	002b      	movs	r3, r5
 8007dc2:	f7f8 fcbd 	bl	8000740 <__aeabi_dadd>
 8007dc6:	f7fa f9b5 	bl	8002134 <__aeabi_d2iz>
 8007dca:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.up = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4a40      	ldr	r2, [pc, #256]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007dd0:	7313      	strb	r3, [r2, #12]
 8007dd2:	e78a      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.zero){
 8007dd4:	4b3e      	ldr	r3, [pc, #248]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007dd6:	7a5b      	ldrb	r3, [r3, #9]
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d026      	beq.n	8007e2c <oled_BtDevKeyEnterSplash+0x2a0>
			dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos));
 8007dde:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007de0:	f7fa f9dc 	bl	800219c <__aeabi_i2d>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	9002      	str	r0, [sp, #8]
 8007de8:	9103      	str	r1, [sp, #12]
 8007dea:	6820      	ldr	r0, [r4, #0]
 8007dec:	1ac0      	subs	r0, r0, r3
 8007dee:	f7fa f9d5 	bl	800219c <__aeabi_i2d>
 8007df2:	0002      	movs	r2, r0
 8007df4:	000b      	movs	r3, r1
 8007df6:	2000      	movs	r0, #0
 8007df8:	4934      	ldr	r1, [pc, #208]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007dfa:	f003 f8d1 	bl	800afa0 <pow>
 8007dfe:	0004      	movs	r4, r0
 8007e00:	000d      	movs	r5, r1
 8007e02:	0030      	movs	r0, r6
 8007e04:	f7fa f9ca 	bl	800219c <__aeabi_i2d>
 8007e08:	0022      	movs	r2, r4
 8007e0a:	002b      	movs	r3, r5
 8007e0c:	f7f9 fbdc 	bl	80015c8 <__aeabi_dmul>
 8007e10:	0002      	movs	r2, r0
 8007e12:	000b      	movs	r3, r1
 8007e14:	9802      	ldr	r0, [sp, #8]
 8007e16:	9903      	ldr	r1, [sp, #12]
 8007e18:	f7f9 fe56 	bl	8001ac8 <__aeabi_dsub>
 8007e1c:	f7fa f98a 	bl	8002134 <__aeabi_d2iz>
			keypadClicks.zero = 0;
 8007e20:	466a      	mov	r2, sp
 8007e22:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007e24:	7812      	ldrb	r2, [r2, #0]
			dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos));
 8007e26:	65b8      	str	r0, [r7, #88]	; 0x58
			keypadClicks.zero = 0;
 8007e28:	725a      	strb	r2, [r3, #9]
 8007e2a:	e75e      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.one){
 8007e2c:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d054      	beq.n	8007ee0 <oled_BtDevKeyEnterSplash+0x354>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007e36:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e38:	f7fa f9b0 	bl	800219c <__aeabi_i2d>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	682a      	ldr	r2, [r5, #0]
 8007e40:	9000      	str	r0, [sp, #0]
 8007e42:	9101      	str	r1, [sp, #4]
 8007e44:	1a98      	subs	r0, r3, r2
 8007e46:	f7fa f9a9 	bl	800219c <__aeabi_i2d>
 8007e4a:	0002      	movs	r2, r0
 8007e4c:	000b      	movs	r3, r1
 8007e4e:	2000      	movs	r0, #0
 8007e50:	491e      	ldr	r1, [pc, #120]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007e52:	f003 f8a5 	bl	800afa0 <pow>
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	9004      	str	r0, [sp, #16]
 8007e5a:	9105      	str	r1, [sp, #20]
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	1ac0      	subs	r0, r0, r3
 8007e60:	f7fa f99c 	bl	800219c <__aeabi_i2d>
 8007e64:	0002      	movs	r2, r0
 8007e66:	000b      	movs	r3, r1
 8007e68:	2000      	movs	r0, #0
 8007e6a:	4918      	ldr	r1, [pc, #96]	; (8007ecc <oled_BtDevKeyEnterSplash+0x340>)
 8007e6c:	f003 f898 	bl	800afa0 <pow>
 8007e70:	0004      	movs	r4, r0
 8007e72:	0030      	movs	r0, r6
 8007e74:	000d      	movs	r5, r1
 8007e76:	f7fa f991 	bl	800219c <__aeabi_i2d>
 8007e7a:	9a04      	ldr	r2, [sp, #16]
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	f7f9 fba3 	bl	80015c8 <__aeabi_dmul>
 8007e82:	0002      	movs	r2, r0
 8007e84:	000b      	movs	r3, r1
 8007e86:	9800      	ldr	r0, [sp, #0]
 8007e88:	9901      	ldr	r1, [sp, #4]
 8007e8a:	f7f9 fe1d 	bl	8001ac8 <__aeabi_dsub>
 8007e8e:	0022      	movs	r2, r4
 8007e90:	002b      	movs	r3, r5
 8007e92:	f7f8 fc55 	bl	8000740 <__aeabi_dadd>
 8007e96:	f7fa f94d 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.one = 0;
 8007e9a:	466a      	mov	r2, sp
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <oled_BtDevKeyEnterSplash+0x344>)
 8007e9e:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007ea0:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.one = 0;
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e721      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	20002cb8 	.word	0x20002cb8
 8007eac:	0800c327 	.word	0x0800c327
 8007eb0:	3fe00000 	.word	0x3fe00000
 8007eb4:	40260000 	.word	0x40260000
 8007eb8:	40600000 	.word	0x40600000
 8007ebc:	200001e8 	.word	0x200001e8
 8007ec0:	0800c354 	.word	0x0800c354
 8007ec4:	20002cf0 	.word	0x20002cf0
 8007ec8:	20002a04 	.word	0x20002a04
 8007ecc:	40240000 	.word	0x40240000
 8007ed0:	20002a1a 	.word	0x20002a1a
 8007ed4:	2000264c 	.word	0x2000264c
 8007ed8:	200009ee 	.word	0x200009ee
 8007edc:	200009e8 	.word	0x200009e8
	}else if(keypadClicks.two){
 8007ee0:	4bd4      	ldr	r3, [pc, #848]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	9302      	str	r3, [sp, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d041      	beq.n	8007f6e <oled_BtDevKeyEnterSplash+0x3e2>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 2*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007eea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007eec:	f7fa f956 	bl	800219c <__aeabi_i2d>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	682a      	ldr	r2, [r5, #0]
 8007ef4:	9002      	str	r0, [sp, #8]
 8007ef6:	9103      	str	r1, [sp, #12]
 8007ef8:	1a98      	subs	r0, r3, r2
 8007efa:	f7fa f94f 	bl	800219c <__aeabi_i2d>
 8007efe:	0002      	movs	r2, r0
 8007f00:	000b      	movs	r3, r1
 8007f02:	2000      	movs	r0, #0
 8007f04:	49cc      	ldr	r1, [pc, #816]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8007f06:	f003 f84b 	bl	800afa0 <pow>
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	9004      	str	r0, [sp, #16]
 8007f0e:	9105      	str	r1, [sp, #20]
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1ac0      	subs	r0, r0, r3
 8007f14:	f7fa f942 	bl	800219c <__aeabi_i2d>
 8007f18:	0002      	movs	r2, r0
 8007f1a:	000b      	movs	r3, r1
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	49c6      	ldr	r1, [pc, #792]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8007f20:	f003 f83e 	bl	800afa0 <pow>
 8007f24:	0004      	movs	r4, r0
 8007f26:	0030      	movs	r0, r6
 8007f28:	000d      	movs	r5, r1
 8007f2a:	f7fa f937 	bl	800219c <__aeabi_i2d>
 8007f2e:	9a04      	ldr	r2, [sp, #16]
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	f7f9 fb49 	bl	80015c8 <__aeabi_dmul>
 8007f36:	0002      	movs	r2, r0
 8007f38:	000b      	movs	r3, r1
 8007f3a:	9802      	ldr	r0, [sp, #8]
 8007f3c:	9903      	ldr	r1, [sp, #12]
 8007f3e:	f7f9 fdc3 	bl	8001ac8 <__aeabi_dsub>
 8007f42:	0022      	movs	r2, r4
 8007f44:	9002      	str	r0, [sp, #8]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	002b      	movs	r3, r5
 8007f4a:	0020      	movs	r0, r4
 8007f4c:	0029      	movs	r1, r5
 8007f4e:	f7f8 fbf7 	bl	8000740 <__aeabi_dadd>
 8007f52:	0002      	movs	r2, r0
 8007f54:	000b      	movs	r3, r1
 8007f56:	9802      	ldr	r0, [sp, #8]
 8007f58:	9903      	ldr	r1, [sp, #12]
 8007f5a:	f7f8 fbf1 	bl	8000740 <__aeabi_dadd>
 8007f5e:	f7fa f8e9 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.two = 0;
 8007f62:	466a      	mov	r2, sp
 8007f64:	4bb3      	ldr	r3, [pc, #716]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8007f66:	7812      	ldrb	r2, [r2, #0]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 2*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007f68:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.two = 0;
 8007f6a:	705a      	strb	r2, [r3, #1]
 8007f6c:	e6bd      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.three){
 8007f6e:	4bb1      	ldr	r3, [pc, #708]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8007f70:	789b      	ldrb	r3, [r3, #2]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d041      	beq.n	8007ffc <oled_BtDevKeyEnterSplash+0x470>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 3*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007f78:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f7a:	f7fa f90f 	bl	800219c <__aeabi_i2d>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	682a      	ldr	r2, [r5, #0]
 8007f82:	9000      	str	r0, [sp, #0]
 8007f84:	9101      	str	r1, [sp, #4]
 8007f86:	1a98      	subs	r0, r3, r2
 8007f88:	f7fa f908 	bl	800219c <__aeabi_i2d>
 8007f8c:	0002      	movs	r2, r0
 8007f8e:	000b      	movs	r3, r1
 8007f90:	2000      	movs	r0, #0
 8007f92:	49a9      	ldr	r1, [pc, #676]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8007f94:	f003 f804 	bl	800afa0 <pow>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	9004      	str	r0, [sp, #16]
 8007f9c:	9105      	str	r1, [sp, #20]
 8007f9e:	6820      	ldr	r0, [r4, #0]
 8007fa0:	1ac0      	subs	r0, r0, r3
 8007fa2:	f7fa f8fb 	bl	800219c <__aeabi_i2d>
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	000b      	movs	r3, r1
 8007faa:	2000      	movs	r0, #0
 8007fac:	49a2      	ldr	r1, [pc, #648]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8007fae:	f002 fff7 	bl	800afa0 <pow>
 8007fb2:	9006      	str	r0, [sp, #24]
 8007fb4:	9107      	str	r1, [sp, #28]
 8007fb6:	0030      	movs	r0, r6
 8007fb8:	f7fa f8f0 	bl	800219c <__aeabi_i2d>
 8007fbc:	9a04      	ldr	r2, [sp, #16]
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	f7f9 fb02 	bl	80015c8 <__aeabi_dmul>
 8007fc4:	0002      	movs	r2, r0
 8007fc6:	000b      	movs	r3, r1
 8007fc8:	9800      	ldr	r0, [sp, #0]
 8007fca:	9901      	ldr	r1, [sp, #4]
 8007fcc:	f7f9 fd7c 	bl	8001ac8 <__aeabi_dsub>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	0004      	movs	r4, r0
 8007fd4:	000d      	movs	r5, r1
 8007fd6:	9806      	ldr	r0, [sp, #24]
 8007fd8:	9907      	ldr	r1, [sp, #28]
 8007fda:	4b98      	ldr	r3, [pc, #608]	; (800823c <oled_BtDevKeyEnterSplash+0x6b0>)
 8007fdc:	f7f9 faf4 	bl	80015c8 <__aeabi_dmul>
 8007fe0:	0002      	movs	r2, r0
 8007fe2:	000b      	movs	r3, r1
 8007fe4:	0020      	movs	r0, r4
 8007fe6:	0029      	movs	r1, r5
 8007fe8:	f7f8 fbaa 	bl	8000740 <__aeabi_dadd>
 8007fec:	f7fa f8a2 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.three = 0;
 8007ff0:	466a      	mov	r2, sp
 8007ff2:	4b90      	ldr	r3, [pc, #576]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8007ff4:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 3*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8007ff6:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.three = 0;
 8007ff8:	709a      	strb	r2, [r3, #2]
 8007ffa:	e676      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.four){
 8007ffc:	4b8d      	ldr	r3, [pc, #564]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8007ffe:	78db      	ldrb	r3, [r3, #3]
 8008000:	9302      	str	r3, [sp, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d041      	beq.n	800808a <oled_BtDevKeyEnterSplash+0x4fe>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 4*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008006:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008008:	f7fa f8c8 	bl	800219c <__aeabi_i2d>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	682a      	ldr	r2, [r5, #0]
 8008010:	9002      	str	r0, [sp, #8]
 8008012:	9103      	str	r1, [sp, #12]
 8008014:	1a98      	subs	r0, r3, r2
 8008016:	f7fa f8c1 	bl	800219c <__aeabi_i2d>
 800801a:	0002      	movs	r2, r0
 800801c:	000b      	movs	r3, r1
 800801e:	2000      	movs	r0, #0
 8008020:	4985      	ldr	r1, [pc, #532]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8008022:	f002 ffbd 	bl	800afa0 <pow>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	9004      	str	r0, [sp, #16]
 800802a:	9105      	str	r1, [sp, #20]
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	1ac0      	subs	r0, r0, r3
 8008030:	f7fa f8b4 	bl	800219c <__aeabi_i2d>
 8008034:	0002      	movs	r2, r0
 8008036:	000b      	movs	r3, r1
 8008038:	2000      	movs	r0, #0
 800803a:	497f      	ldr	r1, [pc, #508]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 800803c:	f002 ffb0 	bl	800afa0 <pow>
 8008040:	9006      	str	r0, [sp, #24]
 8008042:	9107      	str	r1, [sp, #28]
 8008044:	0030      	movs	r0, r6
 8008046:	f7fa f8a9 	bl	800219c <__aeabi_i2d>
 800804a:	9a04      	ldr	r2, [sp, #16]
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	f7f9 fabb 	bl	80015c8 <__aeabi_dmul>
 8008052:	0002      	movs	r2, r0
 8008054:	000b      	movs	r3, r1
 8008056:	9802      	ldr	r0, [sp, #8]
 8008058:	9903      	ldr	r1, [sp, #12]
 800805a:	f7f9 fd35 	bl	8001ac8 <__aeabi_dsub>
 800805e:	2200      	movs	r2, #0
 8008060:	0004      	movs	r4, r0
 8008062:	000d      	movs	r5, r1
 8008064:	9806      	ldr	r0, [sp, #24]
 8008066:	9907      	ldr	r1, [sp, #28]
 8008068:	4b75      	ldr	r3, [pc, #468]	; (8008240 <oled_BtDevKeyEnterSplash+0x6b4>)
 800806a:	f7f9 faad 	bl	80015c8 <__aeabi_dmul>
 800806e:	0002      	movs	r2, r0
 8008070:	000b      	movs	r3, r1
 8008072:	0020      	movs	r0, r4
 8008074:	0029      	movs	r1, r5
 8008076:	f7f8 fb63 	bl	8000740 <__aeabi_dadd>
 800807a:	f7fa f85b 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.four = 0;
 800807e:	466a      	mov	r2, sp
 8008080:	4b6c      	ldr	r3, [pc, #432]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8008082:	7812      	ldrb	r2, [r2, #0]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 4*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008084:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.four = 0;
 8008086:	70da      	strb	r2, [r3, #3]
 8008088:	e62f      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.five){
 800808a:	4b6a      	ldr	r3, [pc, #424]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d041      	beq.n	8008118 <oled_BtDevKeyEnterSplash+0x58c>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 5*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008094:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008096:	f7fa f881 	bl	800219c <__aeabi_i2d>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	682a      	ldr	r2, [r5, #0]
 800809e:	9000      	str	r0, [sp, #0]
 80080a0:	9101      	str	r1, [sp, #4]
 80080a2:	1a98      	subs	r0, r3, r2
 80080a4:	f7fa f87a 	bl	800219c <__aeabi_i2d>
 80080a8:	0002      	movs	r2, r0
 80080aa:	000b      	movs	r3, r1
 80080ac:	2000      	movs	r0, #0
 80080ae:	4962      	ldr	r1, [pc, #392]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 80080b0:	f002 ff76 	bl	800afa0 <pow>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	9004      	str	r0, [sp, #16]
 80080b8:	9105      	str	r1, [sp, #20]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1ac0      	subs	r0, r0, r3
 80080be:	f7fa f86d 	bl	800219c <__aeabi_i2d>
 80080c2:	0002      	movs	r2, r0
 80080c4:	000b      	movs	r3, r1
 80080c6:	2000      	movs	r0, #0
 80080c8:	495b      	ldr	r1, [pc, #364]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 80080ca:	f002 ff69 	bl	800afa0 <pow>
 80080ce:	9006      	str	r0, [sp, #24]
 80080d0:	9107      	str	r1, [sp, #28]
 80080d2:	0030      	movs	r0, r6
 80080d4:	f7fa f862 	bl	800219c <__aeabi_i2d>
 80080d8:	9a04      	ldr	r2, [sp, #16]
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	f7f9 fa74 	bl	80015c8 <__aeabi_dmul>
 80080e0:	0002      	movs	r2, r0
 80080e2:	000b      	movs	r3, r1
 80080e4:	9800      	ldr	r0, [sp, #0]
 80080e6:	9901      	ldr	r1, [sp, #4]
 80080e8:	f7f9 fcee 	bl	8001ac8 <__aeabi_dsub>
 80080ec:	2200      	movs	r2, #0
 80080ee:	0004      	movs	r4, r0
 80080f0:	000d      	movs	r5, r1
 80080f2:	9806      	ldr	r0, [sp, #24]
 80080f4:	9907      	ldr	r1, [sp, #28]
 80080f6:	4b53      	ldr	r3, [pc, #332]	; (8008244 <oled_BtDevKeyEnterSplash+0x6b8>)
 80080f8:	f7f9 fa66 	bl	80015c8 <__aeabi_dmul>
 80080fc:	0002      	movs	r2, r0
 80080fe:	000b      	movs	r3, r1
 8008100:	0020      	movs	r0, r4
 8008102:	0029      	movs	r1, r5
 8008104:	f7f8 fb1c 	bl	8000740 <__aeabi_dadd>
 8008108:	f7fa f814 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.five = 0;
 800810c:	466a      	mov	r2, sp
 800810e:	4b49      	ldr	r3, [pc, #292]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 8008110:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 5*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008112:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.five = 0;
 8008114:	711a      	strb	r2, [r3, #4]
 8008116:	e5e8      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.six){
 8008118:	4b46      	ldr	r3, [pc, #280]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 800811a:	795b      	ldrb	r3, [r3, #5]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d041      	beq.n	80081a4 <oled_BtDevKeyEnterSplash+0x618>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 6*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008120:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008122:	f7fa f83b 	bl	800219c <__aeabi_i2d>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	682a      	ldr	r2, [r5, #0]
 800812a:	9002      	str	r0, [sp, #8]
 800812c:	9103      	str	r1, [sp, #12]
 800812e:	1a98      	subs	r0, r3, r2
 8008130:	f7fa f834 	bl	800219c <__aeabi_i2d>
 8008134:	0002      	movs	r2, r0
 8008136:	000b      	movs	r3, r1
 8008138:	2000      	movs	r0, #0
 800813a:	493f      	ldr	r1, [pc, #252]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 800813c:	f002 ff30 	bl	800afa0 <pow>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	9004      	str	r0, [sp, #16]
 8008144:	9105      	str	r1, [sp, #20]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	f7fa f827 	bl	800219c <__aeabi_i2d>
 800814e:	0002      	movs	r2, r0
 8008150:	000b      	movs	r3, r1
 8008152:	2000      	movs	r0, #0
 8008154:	4938      	ldr	r1, [pc, #224]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 8008156:	f002 ff23 	bl	800afa0 <pow>
 800815a:	9006      	str	r0, [sp, #24]
 800815c:	9107      	str	r1, [sp, #28]
 800815e:	0030      	movs	r0, r6
 8008160:	f7fa f81c 	bl	800219c <__aeabi_i2d>
 8008164:	9a04      	ldr	r2, [sp, #16]
 8008166:	9b05      	ldr	r3, [sp, #20]
 8008168:	f7f9 fa2e 	bl	80015c8 <__aeabi_dmul>
 800816c:	0002      	movs	r2, r0
 800816e:	000b      	movs	r3, r1
 8008170:	9802      	ldr	r0, [sp, #8]
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	f7f9 fca8 	bl	8001ac8 <__aeabi_dsub>
 8008178:	2200      	movs	r2, #0
 800817a:	0004      	movs	r4, r0
 800817c:	000d      	movs	r5, r1
 800817e:	9806      	ldr	r0, [sp, #24]
 8008180:	9907      	ldr	r1, [sp, #28]
 8008182:	4b31      	ldr	r3, [pc, #196]	; (8008248 <oled_BtDevKeyEnterSplash+0x6bc>)
 8008184:	f7f9 fa20 	bl	80015c8 <__aeabi_dmul>
 8008188:	0002      	movs	r2, r0
 800818a:	000b      	movs	r3, r1
 800818c:	0020      	movs	r0, r4
 800818e:	0029      	movs	r1, r5
 8008190:	f7f8 fad6 	bl	8000740 <__aeabi_dadd>
 8008194:	f7f9 ffce 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.six = 0;
 8008198:	466a      	mov	r2, sp
 800819a:	4b26      	ldr	r3, [pc, #152]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 800819c:	7812      	ldrb	r2, [r2, #0]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 6*pow(10,(keyboardSidePosMax-keyboardSidePos));
 800819e:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.six = 0;
 80081a0:	715a      	strb	r2, [r3, #5]
 80081a2:	e5a2      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.seven){
 80081a4:	4b23      	ldr	r3, [pc, #140]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
 80081a6:	799b      	ldrb	r3, [r3, #6]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d055      	beq.n	8008258 <oled_BtDevKeyEnterSplash+0x6cc>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 7*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80081ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80081ae:	f7f9 fff5 	bl	800219c <__aeabi_i2d>
 80081b2:	4d26      	ldr	r5, [pc, #152]	; (800824c <oled_BtDevKeyEnterSplash+0x6c0>)
 80081b4:	4c26      	ldr	r4, [pc, #152]	; (8008250 <oled_BtDevKeyEnterSplash+0x6c4>)
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	9000      	str	r0, [sp, #0]
 80081bc:	9101      	str	r1, [sp, #4]
 80081be:	1a98      	subs	r0, r3, r2
 80081c0:	f7f9 ffec 	bl	800219c <__aeabi_i2d>
 80081c4:	0002      	movs	r2, r0
 80081c6:	000b      	movs	r3, r1
 80081c8:	2000      	movs	r0, #0
 80081ca:	491b      	ldr	r1, [pc, #108]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 80081cc:	f002 fee8 	bl	800afa0 <pow>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	9002      	str	r0, [sp, #8]
 80081d4:	9103      	str	r1, [sp, #12]
 80081d6:	6828      	ldr	r0, [r5, #0]
 80081d8:	1ac0      	subs	r0, r0, r3
 80081da:	f7f9 ffdf 	bl	800219c <__aeabi_i2d>
 80081de:	0002      	movs	r2, r0
 80081e0:	000b      	movs	r3, r1
 80081e2:	2000      	movs	r0, #0
 80081e4:	4914      	ldr	r1, [pc, #80]	; (8008238 <oled_BtDevKeyEnterSplash+0x6ac>)
 80081e6:	f002 fedb 	bl	800afa0 <pow>
 80081ea:	9004      	str	r0, [sp, #16]
 80081ec:	9105      	str	r1, [sp, #20]
 80081ee:	0030      	movs	r0, r6
 80081f0:	f7f9 ffd4 	bl	800219c <__aeabi_i2d>
 80081f4:	9a02      	ldr	r2, [sp, #8]
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	f7f9 f9e6 	bl	80015c8 <__aeabi_dmul>
 80081fc:	0002      	movs	r2, r0
 80081fe:	000b      	movs	r3, r1
 8008200:	9800      	ldr	r0, [sp, #0]
 8008202:	9901      	ldr	r1, [sp, #4]
 8008204:	f7f9 fc60 	bl	8001ac8 <__aeabi_dsub>
 8008208:	2200      	movs	r2, #0
 800820a:	0004      	movs	r4, r0
 800820c:	000d      	movs	r5, r1
 800820e:	9804      	ldr	r0, [sp, #16]
 8008210:	9905      	ldr	r1, [sp, #20]
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <oled_BtDevKeyEnterSplash+0x6c8>)
 8008214:	f7f9 f9d8 	bl	80015c8 <__aeabi_dmul>
 8008218:	0002      	movs	r2, r0
 800821a:	000b      	movs	r3, r1
 800821c:	0020      	movs	r0, r4
 800821e:	0029      	movs	r1, r5
 8008220:	f7f8 fa8e 	bl	8000740 <__aeabi_dadd>
 8008224:	f7f9 ff86 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.seven = 0;
 8008228:	2200      	movs	r2, #0
 800822a:	4b02      	ldr	r3, [pc, #8]	; (8008234 <oled_BtDevKeyEnterSplash+0x6a8>)
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 7*pow(10,(keyboardSidePosMax-keyboardSidePos));
 800822c:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.seven = 0;
 800822e:	719a      	strb	r2, [r3, #6]
 8008230:	e55b      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	20002a1a 	.word	0x20002a1a
 8008238:	40240000 	.word	0x40240000
 800823c:	40080000 	.word	0x40080000
 8008240:	40100000 	.word	0x40100000
 8008244:	40140000 	.word	0x40140000
 8008248:	40180000 	.word	0x40180000
 800824c:	20002cb8 	.word	0x20002cb8
 8008250:	20002a04 	.word	0x20002a04
 8008254:	401c0000 	.word	0x401c0000
	}else if(keypadClicks.eight){
 8008258:	4b48      	ldr	r3, [pc, #288]	; (800837c <oled_BtDevKeyEnterSplash+0x7f0>)
 800825a:	79db      	ldrb	r3, [r3, #7]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d042      	beq.n	80082e8 <oled_BtDevKeyEnterSplash+0x75c>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 8*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008262:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008264:	f7f9 ff9a 	bl	800219c <__aeabi_i2d>
 8008268:	4d45      	ldr	r5, [pc, #276]	; (8008380 <oled_BtDevKeyEnterSplash+0x7f4>)
 800826a:	4c46      	ldr	r4, [pc, #280]	; (8008384 <oled_BtDevKeyEnterSplash+0x7f8>)
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	9000      	str	r0, [sp, #0]
 8008272:	9101      	str	r1, [sp, #4]
 8008274:	1a98      	subs	r0, r3, r2
 8008276:	f7f9 ff91 	bl	800219c <__aeabi_i2d>
 800827a:	0002      	movs	r2, r0
 800827c:	000b      	movs	r3, r1
 800827e:	2000      	movs	r0, #0
 8008280:	4941      	ldr	r1, [pc, #260]	; (8008388 <oled_BtDevKeyEnterSplash+0x7fc>)
 8008282:	f002 fe8d 	bl	800afa0 <pow>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9103      	str	r1, [sp, #12]
 800828c:	6828      	ldr	r0, [r5, #0]
 800828e:	1ac0      	subs	r0, r0, r3
 8008290:	f7f9 ff84 	bl	800219c <__aeabi_i2d>
 8008294:	0002      	movs	r2, r0
 8008296:	000b      	movs	r3, r1
 8008298:	2000      	movs	r0, #0
 800829a:	493b      	ldr	r1, [pc, #236]	; (8008388 <oled_BtDevKeyEnterSplash+0x7fc>)
 800829c:	f002 fe80 	bl	800afa0 <pow>
 80082a0:	9004      	str	r0, [sp, #16]
 80082a2:	9105      	str	r1, [sp, #20]
 80082a4:	0030      	movs	r0, r6
 80082a6:	f7f9 ff79 	bl	800219c <__aeabi_i2d>
 80082aa:	9a02      	ldr	r2, [sp, #8]
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	f7f9 f98b 	bl	80015c8 <__aeabi_dmul>
 80082b2:	0002      	movs	r2, r0
 80082b4:	000b      	movs	r3, r1
 80082b6:	9800      	ldr	r0, [sp, #0]
 80082b8:	9901      	ldr	r1, [sp, #4]
 80082ba:	f7f9 fc05 	bl	8001ac8 <__aeabi_dsub>
 80082be:	2200      	movs	r2, #0
 80082c0:	0004      	movs	r4, r0
 80082c2:	000d      	movs	r5, r1
 80082c4:	9804      	ldr	r0, [sp, #16]
 80082c6:	9905      	ldr	r1, [sp, #20]
 80082c8:	4b30      	ldr	r3, [pc, #192]	; (800838c <oled_BtDevKeyEnterSplash+0x800>)
 80082ca:	f7f9 f97d 	bl	80015c8 <__aeabi_dmul>
 80082ce:	0002      	movs	r2, r0
 80082d0:	000b      	movs	r3, r1
 80082d2:	0020      	movs	r0, r4
 80082d4:	0029      	movs	r1, r5
 80082d6:	f7f8 fa33 	bl	8000740 <__aeabi_dadd>
 80082da:	f7f9 ff2b 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.eight = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	4a26      	ldr	r2, [pc, #152]	; (800837c <oled_BtDevKeyEnterSplash+0x7f0>)
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 8*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80082e2:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.eight = 0;
 80082e4:	71d3      	strb	r3, [r2, #7]
 80082e6:	e500      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
	}else if(keypadClicks.nine){
 80082e8:	4b24      	ldr	r3, [pc, #144]	; (800837c <oled_BtDevKeyEnterSplash+0x7f0>)
 80082ea:	7a1b      	ldrb	r3, [r3, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d100      	bne.n	80082f2 <oled_BtDevKeyEnterSplash+0x766>
 80082f0:	e4fb      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80082f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80082f4:	f7f9 ff52 	bl	800219c <__aeabi_i2d>
 80082f8:	4d21      	ldr	r5, [pc, #132]	; (8008380 <oled_BtDevKeyEnterSplash+0x7f4>)
 80082fa:	4c22      	ldr	r4, [pc, #136]	; (8008384 <oled_BtDevKeyEnterSplash+0x7f8>)
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	9002      	str	r0, [sp, #8]
 8008302:	9103      	str	r1, [sp, #12]
 8008304:	1a98      	subs	r0, r3, r2
 8008306:	f7f9 ff49 	bl	800219c <__aeabi_i2d>
 800830a:	0002      	movs	r2, r0
 800830c:	000b      	movs	r3, r1
 800830e:	2000      	movs	r0, #0
 8008310:	491d      	ldr	r1, [pc, #116]	; (8008388 <oled_BtDevKeyEnterSplash+0x7fc>)
 8008312:	f002 fe45 	bl	800afa0 <pow>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	9004      	str	r0, [sp, #16]
 800831a:	9105      	str	r1, [sp, #20]
 800831c:	6828      	ldr	r0, [r5, #0]
 800831e:	1ac0      	subs	r0, r0, r3
 8008320:	f7f9 ff3c 	bl	800219c <__aeabi_i2d>
 8008324:	0002      	movs	r2, r0
 8008326:	000b      	movs	r3, r1
 8008328:	2000      	movs	r0, #0
 800832a:	4917      	ldr	r1, [pc, #92]	; (8008388 <oled_BtDevKeyEnterSplash+0x7fc>)
 800832c:	f002 fe38 	bl	800afa0 <pow>
 8008330:	9006      	str	r0, [sp, #24]
 8008332:	9107      	str	r1, [sp, #28]
 8008334:	0030      	movs	r0, r6
 8008336:	f7f9 ff31 	bl	800219c <__aeabi_i2d>
 800833a:	9a04      	ldr	r2, [sp, #16]
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	f7f9 f943 	bl	80015c8 <__aeabi_dmul>
 8008342:	0002      	movs	r2, r0
 8008344:	000b      	movs	r3, r1
 8008346:	9802      	ldr	r0, [sp, #8]
 8008348:	9903      	ldr	r1, [sp, #12]
 800834a:	f7f9 fbbd 	bl	8001ac8 <__aeabi_dsub>
 800834e:	2200      	movs	r2, #0
 8008350:	0004      	movs	r4, r0
 8008352:	000d      	movs	r5, r1
 8008354:	9806      	ldr	r0, [sp, #24]
 8008356:	9907      	ldr	r1, [sp, #28]
 8008358:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <oled_BtDevKeyEnterSplash+0x804>)
 800835a:	f7f9 f935 	bl	80015c8 <__aeabi_dmul>
 800835e:	0002      	movs	r2, r0
 8008360:	000b      	movs	r3, r1
 8008362:	0020      	movs	r0, r4
 8008364:	0029      	movs	r1, r5
 8008366:	f7f8 f9eb 	bl	8000740 <__aeabi_dadd>
 800836a:	f7f9 fee3 	bl	8002134 <__aeabi_d2iz>
		keypadClicks.nine = 0;
 800836e:	466a      	mov	r2, sp
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <oled_BtDevKeyEnterSplash+0x7f0>)
 8008372:	7812      	ldrb	r2, [r2, #0]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8008374:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.nine = 0;
 8008376:	721a      	strb	r2, [r3, #8]
 8008378:	e4b7      	b.n	8007cea <oled_BtDevKeyEnterSplash+0x15e>
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	20002a1a 	.word	0x20002a1a
 8008380:	20002cb8 	.word	0x20002cb8
 8008384:	20002a04 	.word	0x20002a04
 8008388:	40240000 	.word	0x40240000
 800838c:	40200000 	.word	0x40200000
 8008390:	40220000 	.word	0x40220000

08008394 <oled_setDisplayedMenu>:
void oled_setDisplayedMenu(char *menuname ,struct menuitem (*menu)[], int menusize, int issubmenu){
 8008394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008396:	000f      	movs	r7, r1
 8008398:	0015      	movs	r5, r2
 800839a:	0004      	movs	r4, r0
 800839c:	9301      	str	r3, [sp, #4]
	dispmenuname = malloc(strlen(menuname)+1);
 800839e:	f7f7 febb 	bl	8000118 <strlen>
 80083a2:	3001      	adds	r0, #1
 80083a4:	f001 fbfc 	bl	8009ba0 <malloc>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <oled_setDisplayedMenu+0x58>)
	dispmenusize = menusize/sizeof(struct menuitem);
 80083aa:	096a      	lsrs	r2, r5, #5
	dispmenuname = malloc(strlen(menuname)+1);
 80083ac:	6018      	str	r0, [r3, #0]
	dispmenusize = menusize/sizeof(struct menuitem);
 80083ae:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <oled_setDisplayedMenu+0x5c>)
	dispmenuname = malloc(strlen(menuname)+1);
 80083b0:	0006      	movs	r6, r0
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 80083b2:	0020      	movs	r0, r4
	dispmenusize = menusize/sizeof(struct menuitem);
 80083b4:	601a      	str	r2, [r3, #0]
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 80083b6:	f7f7 feaf 	bl	8000118 <strlen>
 80083ba:	0021      	movs	r1, r4
 80083bc:	1c42      	adds	r2, r0, #1
 80083be:	0030      	movs	r0, r6
 80083c0:	f001 fc02 	bl	8009bc8 <memcpy>
	memcpy(&dispmenu, menu, menusize);
 80083c4:	002a      	movs	r2, r5
 80083c6:	0039      	movs	r1, r7
 80083c8:	480a      	ldr	r0, [pc, #40]	; (80083f4 <oled_setDisplayedMenu+0x60>)
 80083ca:	f001 fbfd 	bl	8009bc8 <memcpy>
	dispmenusubmenu = issubmenu;
 80083ce:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <oled_setDisplayedMenu+0x64>)
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	601a      	str	r2, [r3, #0]
	encoderposOld = -1;
 80083d4:	2201      	movs	r2, #1
 80083d6:	4b09      	ldr	r3, [pc, #36]	; (80083fc <oled_setDisplayedMenu+0x68>)
 80083d8:	4252      	negs	r2, r2
 80083da:	601a      	str	r2, [r3, #0]
	encoderpos = 0;
 80083dc:	2200      	movs	r2, #0
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <oled_setDisplayedMenu+0x6c>)
 80083e0:	601a      	str	r2, [r3, #0]
	oledType = OLED_MENU;
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <oled_setDisplayedMenu+0x70>)
 80083e4:	3202      	adds	r2, #2
 80083e6:	601a      	str	r2, [r3, #0]
}
 80083e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	20002f54 	.word	0x20002f54
 80083f0:	20003824 	.word	0x20003824
 80083f4:	20001db4 	.word	0x20001db4
 80083f8:	20002cb4 	.word	0x20002cb4
 80083fc:	20002ce8 	.word	0x20002ce8
 8008400:	2000381c 	.word	0x2000381c
 8008404:	200009e8 	.word	0x200009e8

08008408 <oled_setDisplayedSplash>:
	loadingStat = 1;
 8008408:	2201      	movs	r2, #1
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <oled_setDisplayedSplash+0x18>)
 800840c:	601a      	str	r2, [r3, #0]
	splashFunction = funct;
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <oled_setDisplayedSplash+0x1c>)
	oledType = OLED_SPLASH;
 8008410:	3202      	adds	r2, #2
	splashFunction = funct;
 8008412:	6018      	str	r0, [r3, #0]
	splashParams = params;
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <oled_setDisplayedSplash+0x20>)
 8008416:	6019      	str	r1, [r3, #0]
	oledType = OLED_SPLASH;
 8008418:	4b04      	ldr	r3, [pc, #16]	; (800842c <oled_setDisplayedSplash+0x24>)
 800841a:	601a      	str	r2, [r3, #0]
}
 800841c:	4770      	bx	lr
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	200029f8 	.word	0x200029f8
 8008424:	20002f4c 	.word	0x20002f4c
 8008428:	20003abc 	.word	0x20003abc
 800842c:	200009e8 	.word	0x200009e8

08008430 <oled_begin>:
void oled_begin(){
 8008430:	b510      	push	{r4, lr}
	ssd1306_Init();
 8008432:	f000 ffab 	bl	800938c <ssd1306_Init>
	oled_setDisplayedMenu("mainmenu", &mainmenu, sizeof(mainmenu), 0);
 8008436:	2300      	movs	r3, #0
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	4911      	ldr	r1, [pc, #68]	; (8008480 <oled_begin+0x50>)
 800843c:	4811      	ldr	r0, [pc, #68]	; (8008484 <oled_begin+0x54>)
 800843e:	f7ff ffa9 	bl	8008394 <oled_setDisplayedMenu>
	oled_setDisplayedSplash(oled_StartSplash, "");
 8008442:	4911      	ldr	r1, [pc, #68]	; (8008488 <oled_begin+0x58>)
 8008444:	4811      	ldr	r0, [pc, #68]	; (800848c <oled_begin+0x5c>)
 8008446:	f7ff ffdf 	bl	8008408 <oled_setDisplayedSplash>
	refreshHalt = 0;
 800844a:	2300      	movs	r3, #0
	encoderposOld = -1;
 800844c:	2101      	movs	r1, #1
	refreshHalt = 0;
 800844e:	4a10      	ldr	r2, [pc, #64]	; (8008490 <oled_begin+0x60>)
	encoderposOld = -1;
 8008450:	4249      	negs	r1, r1
	refreshHalt = 0;
 8008452:	6013      	str	r3, [r2, #0]
	encoderpos = 0;
 8008454:	4a0f      	ldr	r2, [pc, #60]	; (8008494 <oled_begin+0x64>)
	HAL_TIM_Base_Start_IT(&htim2);
 8008456:	4810      	ldr	r0, [pc, #64]	; (8008498 <oled_begin+0x68>)
	encoderpos = 0;
 8008458:	6013      	str	r3, [r2, #0]
	encoderposOld = -1;
 800845a:	4a10      	ldr	r2, [pc, #64]	; (800849c <oled_begin+0x6c>)
 800845c:	6011      	str	r1, [r2, #0]
	scrollPause = 0;
 800845e:	4a10      	ldr	r2, [pc, #64]	; (80084a0 <oled_begin+0x70>)
 8008460:	6013      	str	r3, [r2, #0]
	scrollPauseDone = 0;
 8008462:	4a10      	ldr	r2, [pc, #64]	; (80084a4 <oled_begin+0x74>)
 8008464:	6013      	str	r3, [r2, #0]
	loadingToggle = 0;
 8008466:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <oled_begin+0x78>)
 8008468:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 800846a:	f7fc f9f1 	bl	8004850 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800846e:	480f      	ldr	r0, [pc, #60]	; (80084ac <oled_begin+0x7c>)
 8008470:	f7fc f9ee 	bl	8004850 <HAL_TIM_Base_Start_IT>
	oledHeader = (char*)malloc(50);
 8008474:	2032      	movs	r0, #50	; 0x32
 8008476:	f001 fb93 	bl	8009ba0 <malloc>
 800847a:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <oled_begin+0x80>)
 800847c:	6018      	str	r0, [r3, #0]
}
 800847e:	bd10      	pop	{r4, pc}
 8008480:	200000c8 	.word	0x200000c8
 8008484:	0800c37c 	.word	0x0800c37c
 8008488:	0800c2ca 	.word	0x0800c2ca
 800848c:	08007985 	.word	0x08007985
 8008490:	200025ec 	.word	0x200025ec
 8008494:	2000381c 	.word	0x2000381c
 8008498:	2000452c 	.word	0x2000452c
 800849c:	20002ce8 	.word	0x20002ce8
 80084a0:	20003828 	.word	0x20003828
 80084a4:	20000894 	.word	0x20000894
 80084a8:	20002cf0 	.word	0x20002cf0
 80084ac:	2000446c 	.word	0x2000446c
 80084b0:	20002a00 	.word	0x20002a00

080084b4 <oled_menuOnclick>:
void oled_menuOnclick(int menupos){
 80084b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 80084b6:	4e71      	ldr	r6, [pc, #452]	; (800867c <oled_menuOnclick+0x1c8>)
void oled_menuOnclick(int menupos){
 80084b8:	b0d1      	sub	sp, #324	; 0x144
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 80084ba:	6835      	ldr	r5, [r6, #0]
void oled_menuOnclick(int menupos){
 80084bc:	0004      	movs	r4, r0
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 80084be:	0028      	movs	r0, r5
 80084c0:	f7f7 fe2a 	bl	8000118 <strlen>
 80084c4:	0029      	movs	r1, r5
 80084c6:	1c42      	adds	r2, r0, #1
 80084c8:	a810      	add	r0, sp, #64	; 0x40
 80084ca:	f001 fb7d 	bl	8009bc8 <memcpy>
	if(strcmp(dispmenuname, "mainmenu") == 0){
 80084ce:	4f6c      	ldr	r7, [pc, #432]	; (8008680 <oled_menuOnclick+0x1cc>)
 80084d0:	0028      	movs	r0, r5
 80084d2:	0039      	movs	r1, r7
 80084d4:	f7f7 fe16 	bl	8000104 <strcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d12d      	bne.n	8008538 <oled_menuOnclick+0x84>
		switch(menupos){
 80084dc:	2c01      	cmp	r4, #1
 80084de:	d021      	beq.n	8008524 <oled_menuOnclick+0x70>
 80084e0:	2c02      	cmp	r4, #2
 80084e2:	d022      	beq.n	800852a <oled_menuOnclick+0x76>
				oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 1);
 80084e4:	2301      	movs	r3, #1
		switch(menupos){
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	d000      	beq.n	80084ec <oled_menuOnclick+0x38>
 80084ea:	e091      	b.n	8008610 <oled_menuOnclick+0x15c>
				msg[1] = 0x04;
 80084ec:	2304      	movs	r3, #4
				msg[0] = 0x00;
 80084ee:	ad03      	add	r5, sp, #12
				workerAssert(&workerGetSongs);
 80084f0:	4864      	ldr	r0, [pc, #400]	; (8008684 <oled_menuOnclick+0x1d0>)
				msg[1] = 0x04;
 80084f2:	706b      	strb	r3, [r5, #1]
				msg[0] = 0x00;
 80084f4:	702c      	strb	r4, [r5, #0]
				workerAssert(&workerGetSongs);
 80084f6:	f7fe ff7f 	bl	80073f8 <workerAssert>
				sendMsg(ADDRESS_MAIN, ADDRESS_PC, 0, INTERNAL, msg, 2);
 80084fa:	2002      	movs	r0, #2
 80084fc:	9500      	str	r5, [sp, #0]
 80084fe:	9001      	str	r0, [sp, #4]
 8008500:	2301      	movs	r3, #1
 8008502:	0022      	movs	r2, r4
 8008504:	0021      	movs	r1, r4
 8008506:	f7ff f953 	bl	80077b0 <sendMsg>
	encoderclick = 0;
 800850a:	2400      	movs	r4, #0
 800850c:	4b5e      	ldr	r3, [pc, #376]	; (8008688 <oled_menuOnclick+0x1d4>)
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 800850e:	a910      	add	r1, sp, #64	; 0x40
 8008510:	6830      	ldr	r0, [r6, #0]
	encoderclick = 0;
 8008512:	601c      	str	r4, [r3, #0]
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 8008514:	f7f7 fdf6 	bl	8000104 <strcmp>
 8008518:	42a0      	cmp	r0, r4
 800851a:	d001      	beq.n	8008520 <oled_menuOnclick+0x6c>
 800851c:	4b5b      	ldr	r3, [pc, #364]	; (800868c <oled_menuOnclick+0x1d8>)
 800851e:	601c      	str	r4, [r3, #0]
}
 8008520:	b051      	add	sp, #324	; 0x144
 8008522:	bdf0      	pop	{r4, r5, r6, r7, pc}
	refreshHalt = 1;
 8008524:	4b5a      	ldr	r3, [pc, #360]	; (8008690 <oled_menuOnclick+0x1dc>)
 8008526:	601c      	str	r4, [r3, #0]
 8008528:	e7ef      	b.n	800850a <oled_menuOnclick+0x56>
				oled_setDisplayedMenu("organmenu",&organmenu, sizeof(organmenu), 1);
 800852a:	2301      	movs	r3, #1
 800852c:	2260      	movs	r2, #96	; 0x60
 800852e:	4959      	ldr	r1, [pc, #356]	; (8008694 <oled_menuOnclick+0x1e0>)
 8008530:	4859      	ldr	r0, [pc, #356]	; (8008698 <oled_menuOnclick+0x1e4>)
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8008532:	f7ff ff2f 	bl	8008394 <oled_setDisplayedMenu>
					break;
 8008536:	e7e8      	b.n	800850a <oled_menuOnclick+0x56>
	}else if(strcmp(dispmenuname, "settingsmenu") == 0){
 8008538:	4958      	ldr	r1, [pc, #352]	; (800869c <oled_menuOnclick+0x1e8>)
 800853a:	0028      	movs	r0, r5
 800853c:	f7f7 fde2 	bl	8000104 <strcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	d10e      	bne.n	8008562 <oled_menuOnclick+0xae>
		switch(menupos){
 8008544:	2c00      	cmp	r4, #0
 8008546:	d007      	beq.n	8008558 <oled_menuOnclick+0xa4>
 8008548:	db01      	blt.n	800854e <oled_menuOnclick+0x9a>
 800854a:	2c02      	cmp	r4, #2
 800854c:	dddd      	ble.n	800850a <oled_menuOnclick+0x56>
				oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 800854e:	2300      	movs	r3, #0
			oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	4953      	ldr	r1, [pc, #332]	; (80086a0 <oled_menuOnclick+0x1ec>)
				oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 8008554:	0038      	movs	r0, r7
 8008556:	e7ec      	b.n	8008532 <oled_menuOnclick+0x7e>
				oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 1);
 8008558:	2301      	movs	r3, #1
			oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 0);
 800855a:	2280      	movs	r2, #128	; 0x80
 800855c:	4951      	ldr	r1, [pc, #324]	; (80086a4 <oled_menuOnclick+0x1f0>)
 800855e:	4852      	ldr	r0, [pc, #328]	; (80086a8 <oled_menuOnclick+0x1f4>)
 8008560:	e7e7      	b.n	8008532 <oled_menuOnclick+0x7e>
	}else if(strcmp(dispmenuname, "bluetoothmenu") == 0){
 8008562:	4951      	ldr	r1, [pc, #324]	; (80086a8 <oled_menuOnclick+0x1f4>)
 8008564:	0028      	movs	r0, r5
 8008566:	f7f7 fdcd 	bl	8000104 <strcmp>
 800856a:	1e03      	subs	r3, r0, #0
 800856c:	d116      	bne.n	800859c <oled_menuOnclick+0xe8>
		switch(menupos){
 800856e:	2c01      	cmp	r4, #1
 8008570:	d00b      	beq.n	800858a <oled_menuOnclick+0xd6>
 8008572:	2c02      	cmp	r4, #2
 8008574:	d00f      	beq.n	8008596 <oled_menuOnclick+0xe2>
 8008576:	2c00      	cmp	r4, #0
 8008578:	d14a      	bne.n	8008610 <oled_menuOnclick+0x15c>
				oled_setDisplayedSplash(oled_LoadingSplash, "Skenuji");
 800857a:	484c      	ldr	r0, [pc, #304]	; (80086ac <oled_menuOnclick+0x1f8>)
 800857c:	494c      	ldr	r1, [pc, #304]	; (80086b0 <oled_menuOnclick+0x1fc>)
 800857e:	f7ff ff43 	bl	8008408 <oled_setDisplayedSplash>
				workerAssert(&workerBtScanDev);
 8008582:	484c      	ldr	r0, [pc, #304]	; (80086b4 <oled_menuOnclick+0x200>)
				workerAssert(&workerBtBondDev);
 8008584:	f7fe ff38 	bl	80073f8 <workerAssert>
			break;
 8008588:	e7bf      	b.n	800850a <oled_menuOnclick+0x56>
				oled_setDisplayedSplash(oled_LoadingSplash, "Nacitam");
 800858a:	4848      	ldr	r0, [pc, #288]	; (80086ac <oled_menuOnclick+0x1f8>)
 800858c:	494a      	ldr	r1, [pc, #296]	; (80086b8 <oled_menuOnclick+0x204>)
 800858e:	f7ff ff3b 	bl	8008408 <oled_setDisplayedSplash>
				workerAssert(&workerBtBondDev);
 8008592:	484a      	ldr	r0, [pc, #296]	; (80086bc <oled_menuOnclick+0x208>)
 8008594:	e7f6      	b.n	8008584 <oled_menuOnclick+0xd0>
				bluetooth_refreshSelfInfo();
 8008596:	f7fd fd8d 	bl	80060b4 <bluetooth_refreshSelfInfo>
			break;
 800859a:	e7b6      	b.n	800850a <oled_menuOnclick+0x56>
	}else if(strcmp(dispmenuname, "songmenu") == 0){
 800859c:	4948      	ldr	r1, [pc, #288]	; (80086c0 <oled_menuOnclick+0x20c>)
 800859e:	0028      	movs	r0, r5
 80085a0:	f7f7 fdb0 	bl	8000104 <strcmp>
 80085a4:	1e03      	subs	r3, r0, #0
 80085a6:	d116      	bne.n	80085d6 <oled_menuOnclick+0x122>
		if(menupos == songMenuSize){
 80085a8:	4a46      	ldr	r2, [pc, #280]	; (80086c4 <oled_menuOnclick+0x210>)
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	4294      	cmp	r4, r2
 80085ae:	d0cf      	beq.n	8008550 <oled_menuOnclick+0x9c>
			memset(selectedSong, 0, 40);
 80085b0:	4c45      	ldr	r4, [pc, #276]	; (80086c8 <oled_menuOnclick+0x214>)
 80085b2:	0001      	movs	r1, r0
 80085b4:	2228      	movs	r2, #40	; 0x28
 80085b6:	0020      	movs	r0, r4
 80085b8:	f001 fb0f 	bl	8009bda <memset>
			sprintf(selectedSong, "%s", songMenu[encoderpos].name);
 80085bc:	4b33      	ldr	r3, [pc, #204]	; (800868c <oled_menuOnclick+0x1d8>)
 80085be:	4a43      	ldr	r2, [pc, #268]	; (80086cc <oled_menuOnclick+0x218>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	0020      	movs	r0, r4
 80085c4:	015b      	lsls	r3, r3, #5
 80085c6:	5899      	ldr	r1, [r3, r2]
 80085c8:	f001 fc24 	bl	8009e14 <strcpy>
			midiController_play(ADDRESS_MAIN, selectedSong);
 80085cc:	0021      	movs	r1, r4
 80085ce:	2002      	movs	r0, #2
 80085d0:	f7fe ff64 	bl	800749c <midiController_play>
 80085d4:	e799      	b.n	800850a <oled_menuOnclick+0x56>
	}else if(strcmp(dispmenuname, "btScanedDevices") == 0){
 80085d6:	493e      	ldr	r1, [pc, #248]	; (80086d0 <oled_menuOnclick+0x21c>)
 80085d8:	0028      	movs	r0, r5
 80085da:	f7f7 fd93 	bl	8000104 <strcmp>
 80085de:	1e03      	subs	r3, r0, #0
 80085e0:	d10b      	bne.n	80085fa <oled_menuOnclick+0x146>
		if(menupos == btScannedCount){
 80085e2:	4a3c      	ldr	r2, [pc, #240]	; (80086d4 <oled_menuOnclick+0x220>)
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	4294      	cmp	r4, r2
 80085e8:	d0b7      	beq.n	800855a <oled_menuOnclick+0xa6>
			oled_setDisplayedSplash(oled_BtDevInfoSplash, &btScanned[menupos]);
 80085ea:	215c      	movs	r1, #92	; 0x5c
 80085ec:	434c      	muls	r4, r1
 80085ee:	493a      	ldr	r1, [pc, #232]	; (80086d8 <oled_menuOnclick+0x224>)
 80085f0:	483a      	ldr	r0, [pc, #232]	; (80086dc <oled_menuOnclick+0x228>)
 80085f2:	1861      	adds	r1, r4, r1
 80085f4:	f7ff ff08 	bl	8008408 <oled_setDisplayedSplash>
 80085f8:	e787      	b.n	800850a <oled_menuOnclick+0x56>
	}else if(strcmp(dispmenuname, "btBondedDevicesMenu") == 0){
 80085fa:	4f39      	ldr	r7, [pc, #228]	; (80086e0 <oled_menuOnclick+0x22c>)
 80085fc:	0028      	movs	r0, r5
 80085fe:	0039      	movs	r1, r7
 8008600:	f7f7 fd80 	bl	8000104 <strcmp>
 8008604:	1e03      	subs	r3, r0, #0
 8008606:	d110      	bne.n	800862a <oled_menuOnclick+0x176>
		if(menupos == btBondedCount){
 8008608:	4a36      	ldr	r2, [pc, #216]	; (80086e4 <oled_menuOnclick+0x230>)
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	4294      	cmp	r4, r2
 800860e:	d103      	bne.n	8008618 <oled_menuOnclick+0x164>
			oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 0);
 8008610:	2240      	movs	r2, #64	; 0x40
 8008612:	4935      	ldr	r1, [pc, #212]	; (80086e8 <oled_menuOnclick+0x234>)
 8008614:	4821      	ldr	r0, [pc, #132]	; (800869c <oled_menuOnclick+0x1e8>)
 8008616:	e78c      	b.n	8008532 <oled_menuOnclick+0x7e>
			encoderpos = 1;
 8008618:	2101      	movs	r1, #1
			btSelectedController = menupos;
 800861a:	4a34      	ldr	r2, [pc, #208]	; (80086ec <oled_menuOnclick+0x238>)
			oled_setDisplayedMenu("controllermenu",&controllermenu, sizeof(controllermenu), 0);
 800861c:	4834      	ldr	r0, [pc, #208]	; (80086f0 <oled_menuOnclick+0x23c>)
			btSelectedController = menupos;
 800861e:	7014      	strb	r4, [r2, #0]
			encoderpos = 1;
 8008620:	4a1a      	ldr	r2, [pc, #104]	; (800868c <oled_menuOnclick+0x1d8>)
 8008622:	6011      	str	r1, [r2, #0]
			oled_setDisplayedMenu("controllermenu",&controllermenu, sizeof(controllermenu), 0);
 8008624:	2240      	movs	r2, #64	; 0x40
 8008626:	4933      	ldr	r1, [pc, #204]	; (80086f4 <oled_menuOnclick+0x240>)
 8008628:	e783      	b.n	8008532 <oled_menuOnclick+0x7e>
	}else if(strcmp(dispmenuname, "controllermenu") == 0){
 800862a:	4931      	ldr	r1, [pc, #196]	; (80086f0 <oled_menuOnclick+0x23c>)
 800862c:	0028      	movs	r0, r5
 800862e:	f7f7 fd69 	bl	8000104 <strcmp>
 8008632:	1e03      	subs	r3, r0, #0
 8008634:	d10b      	bne.n	800864e <oled_menuOnclick+0x19a>
		switch(menupos){
 8008636:	2c00      	cmp	r4, #0
 8008638:	d103      	bne.n	8008642 <oled_menuOnclick+0x18e>
				workerBtRemoveController.assert = 1;
 800863a:	2201      	movs	r2, #1
 800863c:	4b2e      	ldr	r3, [pc, #184]	; (80086f8 <oled_menuOnclick+0x244>)
 800863e:	701a      	strb	r2, [r3, #0]
			break;
 8008640:	e763      	b.n	800850a <oled_menuOnclick+0x56>
				oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 8008642:	4a28      	ldr	r2, [pc, #160]	; (80086e4 <oled_menuOnclick+0x230>)
 8008644:	492d      	ldr	r1, [pc, #180]	; (80086fc <oled_menuOnclick+0x248>)
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	3201      	adds	r2, #1
 800864a:	0152      	lsls	r2, r2, #5
 800864c:	e782      	b.n	8008554 <oled_menuOnclick+0xa0>
	}else if(strcmp(dispmenuname, "organmenu") == 0){
 800864e:	4912      	ldr	r1, [pc, #72]	; (8008698 <oled_menuOnclick+0x1e4>)
 8008650:	0028      	movs	r0, r5
 8008652:	f7f7 fd57 	bl	8000104 <strcmp>
 8008656:	2800      	cmp	r0, #0
 8008658:	d000      	beq.n	800865c <oled_menuOnclick+0x1a8>
 800865a:	e756      	b.n	800850a <oled_menuOnclick+0x56>
		switch(menupos){
 800865c:	2c00      	cmp	r4, #0
 800865e:	d006      	beq.n	800866e <oled_menuOnclick+0x1ba>
 8008660:	2c01      	cmp	r4, #1
 8008662:	d007      	beq.n	8008674 <oled_menuOnclick+0x1c0>
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8008664:	2300      	movs	r3, #0
 8008666:	2280      	movs	r2, #128	; 0x80
 8008668:	490d      	ldr	r1, [pc, #52]	; (80086a0 <oled_menuOnclick+0x1ec>)
 800866a:	4805      	ldr	r0, [pc, #20]	; (8008680 <oled_menuOnclick+0x1cc>)
 800866c:	e761      	b.n	8008532 <oled_menuOnclick+0x7e>
						midiController_current_On();
 800866e:	f7fe fecc 	bl	800740a <midiController_current_On>
					break;
 8008672:	e74a      	b.n	800850a <oled_menuOnclick+0x56>
						midiController_current_Off();
 8008674:	f7fe fed8 	bl	8007428 <midiController_current_Off>
					break;
 8008678:	e747      	b.n	800850a <oled_menuOnclick+0x56>
 800867a:	46c0      	nop			; (mov r8, r8)
 800867c:	20002f54 	.word	0x20002f54
 8008680:	0800c37c 	.word	0x0800c37c
 8008684:	200025e9 	.word	0x200025e9
 8008688:	2000264c 	.word	0x2000264c
 800868c:	2000381c 	.word	0x2000381c
 8008690:	200025ec 	.word	0x200025ec
 8008694:	20000148 	.word	0x20000148
 8008698:	0800c391 	.word	0x0800c391
 800869c:	0800c39b 	.word	0x0800c39b
 80086a0:	200000c8 	.word	0x200000c8
 80086a4:	20000008 	.word	0x20000008
 80086a8:	0800c3a8 	.word	0x0800c3a8
 80086ac:	08007af1 	.word	0x08007af1
 80086b0:	0800c3b6 	.word	0x0800c3b6
 80086b4:	200009f1 	.word	0x200009f1
 80086b8:	0800c3be 	.word	0x0800c3be
 80086bc:	20002652 	.word	0x20002652
 80086c0:	0800c300 	.word	0x0800c300
 80086c4:	200009f0 	.word	0x200009f0
 80086c8:	20002cbd 	.word	0x20002cbd
 80086cc:	20000a00 	.word	0x20000a00
 80086d0:	0800c2d5 	.word	0x0800c2d5
 80086d4:	200029fe 	.word	0x200029fe
 80086d8:	20001680 	.word	0x20001680
 80086dc:	080079e5 	.word	0x080079e5
 80086e0:	0800c2e5 	.word	0x0800c2e5
 80086e4:	20002f58 	.word	0x20002f58
 80086e8:	200001a8 	.word	0x200001a8
 80086ec:	20003ab0 	.word	0x20003ab0
 80086f0:	0800c3c6 	.word	0x0800c3c6
 80086f4:	20000088 	.word	0x20000088
 80086f8:	200029fc 	.word	0x200029fc
 80086fc:	200008a8 	.word	0x200008a8

08008700 <oled_drawMenu>:
void oled_drawMenu(){
 8008700:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(encoderclick){
 8008702:	4bb4      	ldr	r3, [pc, #720]	; (80089d4 <oled_drawMenu+0x2d4>)
void oled_drawMenu(){
 8008704:	b08f      	sub	sp, #60	; 0x3c
	if(encoderclick){
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4eb3      	ldr	r6, [pc, #716]	; (80089d8 <oled_drawMenu+0x2d8>)
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <oled_drawMenu+0x14>
		oled_menuOnclick(encoderpos);
 800870e:	6830      	ldr	r0, [r6, #0]
 8008710:	f7ff fed0 	bl	80084b4 <oled_menuOnclick>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8008714:	4fb1      	ldr	r7, [pc, #708]	; (80089dc <oled_drawMenu+0x2dc>)
 8008716:	ac09      	add	r4, sp, #36	; 0x24
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8008718:	ad05      	add	r5, sp, #20
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800871a:	0021      	movs	r1, r4
 800871c:	2200      	movs	r2, #0
 800871e:	0038      	movs	r0, r7
 8008720:	f7fb ffee 	bl	8004700 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8008724:	0029      	movs	r1, r5
 8008726:	2200      	movs	r2, #0
 8008728:	0038      	movs	r0, r7
 800872a:	f7fc f811 	bl	8004750 <HAL_RTC_GetDate>
	sprintf(oledHeader, "%d.%d %d:%d",date.Date, date.Month, time.Hours, time.Minutes);
 800872e:	7861      	ldrb	r1, [r4, #1]
 8008730:	786b      	ldrb	r3, [r5, #1]
 8008732:	78aa      	ldrb	r2, [r5, #2]
 8008734:	9101      	str	r1, [sp, #4]
 8008736:	7821      	ldrb	r1, [r4, #0]
 8008738:	4da9      	ldr	r5, [pc, #676]	; (80089e0 <oled_drawMenu+0x2e0>)
 800873a:	9100      	str	r1, [sp, #0]
 800873c:	6828      	ldr	r0, [r5, #0]
 800873e:	49a9      	ldr	r1, [pc, #676]	; (80089e4 <oled_drawMenu+0x2e4>)
 8008740:	f001 fb0e 	bl	8009d60 <siprintf>
	ssd1306_SetCursor(2,0);
 8008744:	2100      	movs	r1, #0
 8008746:	2002      	movs	r0, #2
 8008748:	f000 ff5e 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(oledHeader, Font_7x10, White);
 800874c:	4aa6      	ldr	r2, [pc, #664]	; (80089e8 <oled_drawMenu+0x2e8>)
 800874e:	2301      	movs	r3, #1
 8008750:	6811      	ldr	r1, [r2, #0]
 8008752:	6828      	ldr	r0, [r5, #0]
 8008754:	6852      	ldr	r2, [r2, #4]
 8008756:	f000 ff43 	bl	80095e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2,114);
 800875a:	2172      	movs	r1, #114	; 0x72
 800875c:	2002      	movs	r0, #2
 800875e:	f000 ff53 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteChar(' ', Icon_7x10, White);
 8008762:	4aa2      	ldr	r2, [pc, #648]	; (80089ec <oled_drawMenu+0x2ec>)
 8008764:	2301      	movs	r3, #1
 8008766:	6811      	ldr	r1, [r2, #0]
 8008768:	2020      	movs	r0, #32
 800876a:	6852      	ldr	r2, [r2, #4]
 800876c:	f000 fee2 	bl	8009534 <ssd1306_WriteChar>
	if(strlen(dispmenu[encoderpos].name) > 9 && encoderpos != encoderposOld){
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	4f9f      	ldr	r7, [pc, #636]	; (80089f0 <oled_drawMenu+0x2f0>)
 8008774:	015c      	lsls	r4, r3, #5
 8008776:	9302      	str	r3, [sp, #8]
 8008778:	59e3      	ldr	r3, [r4, r7]
 800877a:	0018      	movs	r0, r3
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	f7f7 fccb 	bl	8000118 <strlen>
 8008782:	2809      	cmp	r0, #9
 8008784:	d914      	bls.n	80087b0 <oled_drawMenu+0xb0>
 8008786:	4d9b      	ldr	r5, [pc, #620]	; (80089f4 <oled_drawMenu+0x2f4>)
 8008788:	9b02      	ldr	r3, [sp, #8]
 800878a:	682a      	ldr	r2, [r5, #0]
 800878c:	4293      	cmp	r3, r2
 800878e:	d00f      	beq.n	80087b0 <oled_drawMenu+0xb0>
		scrollIndex = 0;
 8008790:	2200      	movs	r2, #0
 8008792:	4b99      	ldr	r3, [pc, #612]	; (80089f8 <oled_drawMenu+0x2f8>)
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 8008794:	9803      	ldr	r0, [sp, #12]
		scrollIndex = 0;
 8008796:	601a      	str	r2, [r3, #0]
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 8008798:	f7f7 fcbe 	bl	8000118 <strlen>
		scrollPause = 0;
 800879c:	2200      	movs	r2, #0
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 800879e:	4b97      	ldr	r3, [pc, #604]	; (80089fc <oled_drawMenu+0x2fc>)
 80087a0:	380a      	subs	r0, #10
 80087a2:	6018      	str	r0, [r3, #0]
		encoderposOld = encoderpos;
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	602b      	str	r3, [r5, #0]
		scrollPause = 0;
 80087a8:	4b95      	ldr	r3, [pc, #596]	; (8008a00 <oled_drawMenu+0x300>)
 80087aa:	601a      	str	r2, [r3, #0]
		scrollPauseDone = 0;
 80087ac:	4b95      	ldr	r3, [pc, #596]	; (8008a04 <oled_drawMenu+0x304>)
 80087ae:	601a      	str	r2, [r3, #0]
	if(encoderpos != (signed int)(dispmenusize)-1){
 80087b0:	4b95      	ldr	r3, [pc, #596]	; (8008a08 <oled_drawMenu+0x308>)
 80087b2:	9902      	ldr	r1, [sp, #8]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	1e5a      	subs	r2, r3, #1
 80087b8:	4291      	cmp	r1, r2
 80087ba:	d074      	beq.n	80088a6 <oled_drawMenu+0x1a6>
 80087bc:	193c      	adds	r4, r7, r4
				dispmenu[i].selected = 1;
 80087be:	2701      	movs	r7, #1
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 80087c0:	6831      	ldr	r1, [r6, #0]
 80087c2:	9b02      	ldr	r3, [sp, #8]
 80087c4:	1c4a      	adds	r2, r1, #1
 80087c6:	4293      	cmp	r3, r2
 80087c8:	dd0d      	ble.n	80087e6 <oled_drawMenu+0xe6>
	if(encoderpos <= 0){
 80087ca:	6833      	ldr	r3, [r6, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd00      	ble.n	80087d2 <oled_drawMenu+0xd2>
 80087d0:	e0d3      	b.n	800897a <oled_drawMenu+0x27a>
		ssd1306_SetCursor(117,41);
 80087d2:	2129      	movs	r1, #41	; 0x29
 80087d4:	2075      	movs	r0, #117	; 0x75
 80087d6:	f000 ff17 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 80087da:	2301      	movs	r3, #1
 80087dc:	4a8b      	ldr	r2, [pc, #556]	; (8008a0c <oled_drawMenu+0x30c>)
 80087de:	6811      	ldr	r1, [r2, #0]
 80087e0:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 80087e2:	2023      	movs	r0, #35	; 0x23
 80087e4:	e0d7      	b.n	8008996 <oled_drawMenu+0x296>
			if(i == encoderpos){
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	428b      	cmp	r3, r1
 80087ea:	d14a      	bne.n	8008882 <oled_drawMenu+0x182>
				dispmenu[i].selected = 1;
 80087ec:	6067      	str	r7, [r4, #4]
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	200d      	movs	r0, #13
 80087f2:	1a59      	subs	r1, r3, r1
 80087f4:	2312      	movs	r3, #18
 80087f6:	3101      	adds	r1, #1
 80087f8:	4359      	muls	r1, r3
 80087fa:	3103      	adds	r1, #3
 80087fc:	b2c9      	uxtb	r1, r1
 80087fe:	f000 ff03 	bl	8009608 <ssd1306_SetCursor>
			if(strlen(dispmenu[i].name) > 9){
 8008802:	6825      	ldr	r5, [r4, #0]
 8008804:	0028      	movs	r0, r5
 8008806:	f7f7 fc87 	bl	8000118 <strlen>
 800880a:	2809      	cmp	r0, #9
 800880c:	d93f      	bls.n	800888e <oled_drawMenu+0x18e>
				if(dispmenu[i].selected){
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d038      	beq.n	8008888 <oled_drawMenu+0x188>
					memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 8008816:	2209      	movs	r2, #9
 8008818:	4b77      	ldr	r3, [pc, #476]	; (80089f8 <oled_drawMenu+0x2f8>)
 800881a:	6819      	ldr	r1, [r3, #0]
 800881c:	1869      	adds	r1, r5, r1
 800881e:	a806      	add	r0, sp, #24
 8008820:	f001 f9d2 	bl	8009bc8 <memcpy>
					memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 8008824:	0028      	movs	r0, r5
 8008826:	f7f7 fc77 	bl	8000118 <strlen>
 800882a:	0002      	movs	r2, r0
 800882c:	2019      	movs	r0, #25
 800882e:	ab02      	add	r3, sp, #8
 8008830:	3a09      	subs	r2, #9
 8008832:	2100      	movs	r1, #0
 8008834:	18c0      	adds	r0, r0, r3
 8008836:	f001 f9d0 	bl	8009bda <memset>
					ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 800883a:	003b      	movs	r3, r7
 800883c:	68a2      	ldr	r2, [r4, #8]
 800883e:	a806      	add	r0, sp, #24
 8008840:	6811      	ldr	r1, [r2, #0]
 8008842:	6852      	ldr	r2, [r2, #4]
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8008844:	f000 fecc 	bl	80095e0 <ssd1306_WriteString>
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 8008848:	9b02      	ldr	r3, [sp, #8]
 800884a:	6832      	ldr	r2, [r6, #0]
 800884c:	2002      	movs	r0, #2
 800884e:	1a99      	subs	r1, r3, r2
 8008850:	2312      	movs	r3, #18
 8008852:	3101      	adds	r1, #1
 8008854:	4359      	muls	r1, r3
 8008856:	3103      	adds	r1, #3
 8008858:	b2c9      	uxtb	r1, r1
 800885a:	f000 fed5 	bl	8009608 <ssd1306_SetCursor>
			if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 800885e:	68e1      	ldr	r1, [r4, #12]
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	4a6a      	ldr	r2, [pc, #424]	; (8008a0c <oled_drawMenu+0x30c>)
 8008864:	2900      	cmp	r1, #0
 8008866:	d01a      	beq.n	800889e <oled_drawMenu+0x19e>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d016      	beq.n	800889a <oled_drawMenu+0x19a>
				ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 800886c:	7d20      	ldrb	r0, [r4, #20]
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800886e:	003b      	movs	r3, r7
 8008870:	6811      	ldr	r1, [r2, #0]
 8008872:	6852      	ldr	r2, [r2, #4]
 8008874:	f000 fe5e 	bl	8009534 <ssd1306_WriteChar>
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	3420      	adds	r4, #32
 800887c:	3301      	adds	r3, #1
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	e79e      	b.n	80087c0 <oled_drawMenu+0xc0>
			}else dispmenu[i].selected = 0;
 8008882:	2200      	movs	r2, #0
 8008884:	6062      	str	r2, [r4, #4]
 8008886:	e7b2      	b.n	80087ee <oled_drawMenu+0xee>
					memcpy(tmp, dispmenu[i].name, 9);
 8008888:	2209      	movs	r2, #9
 800888a:	0029      	movs	r1, r5
 800888c:	e7c7      	b.n	800881e <oled_drawMenu+0x11e>
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800888e:	68a2      	ldr	r2, [r4, #8]
 8008890:	003b      	movs	r3, r7
 8008892:	6811      	ldr	r1, [r2, #0]
 8008894:	0028      	movs	r0, r5
 8008896:	6852      	ldr	r2, [r2, #4]
 8008898:	e7d4      	b.n	8008844 <oled_drawMenu+0x144>
				ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 800889a:	7c20      	ldrb	r0, [r4, #16]
 800889c:	e7e7      	b.n	800886e <oled_drawMenu+0x16e>
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800889e:	2021      	movs	r0, #33	; 0x21
 80088a0:	1ac0      	subs	r0, r0, r3
 80088a2:	b2c0      	uxtb	r0, r0
 80088a4:	e7e3      	b.n	800886e <oled_drawMenu+0x16e>
 80088a6:	3c1c      	subs	r4, #28
 80088a8:	193c      	adds	r4, r7, r4
					dispmenu[i].selected = 1;
 80088aa:	2701      	movs	r7, #1
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 80088ac:	3b02      	subs	r3, #2
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	6831      	ldr	r1, [r6, #0]
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	428b      	cmp	r3, r1
 80088b6:	dc88      	bgt.n	80087ca <oled_drawMenu+0xca>
				if((i) == encoderpos){
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	428b      	cmp	r3, r1
 80088bc:	d14b      	bne.n	8008956 <oled_drawMenu+0x256>
					dispmenu[i].selected = 1;
 80088be:	6027      	str	r7, [r4, #0]
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	200d      	movs	r0, #13
 80088c4:	1a59      	subs	r1, r3, r1
 80088c6:	2312      	movs	r3, #18
 80088c8:	3102      	adds	r1, #2
 80088ca:	4359      	muls	r1, r3
 80088cc:	3103      	adds	r1, #3
 80088ce:	b2c9      	uxtb	r1, r1
 80088d0:	f000 fe9a 	bl	8009608 <ssd1306_SetCursor>
				if(strlen(dispmenu[i].name) > 9){
 80088d4:	1f23      	subs	r3, r4, #4
 80088d6:	681d      	ldr	r5, [r3, #0]
 80088d8:	0028      	movs	r0, r5
 80088da:	f7f7 fc1d 	bl	8000118 <strlen>
 80088de:	2809      	cmp	r0, #9
 80088e0:	d93f      	bls.n	8008962 <oled_drawMenu+0x262>
					if(dispmenu[i].selected){
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	9303      	str	r3, [sp, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d038      	beq.n	800895c <oled_drawMenu+0x25c>
						memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 80088ea:	2209      	movs	r2, #9
 80088ec:	4b42      	ldr	r3, [pc, #264]	; (80089f8 <oled_drawMenu+0x2f8>)
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	1869      	adds	r1, r5, r1
 80088f2:	a806      	add	r0, sp, #24
 80088f4:	f001 f968 	bl	8009bc8 <memcpy>
						memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 80088f8:	0028      	movs	r0, r5
 80088fa:	f7f7 fc0d 	bl	8000118 <strlen>
 80088fe:	0002      	movs	r2, r0
 8008900:	2019      	movs	r0, #25
 8008902:	ab02      	add	r3, sp, #8
 8008904:	3a09      	subs	r2, #9
 8008906:	2100      	movs	r1, #0
 8008908:	18c0      	adds	r0, r0, r3
 800890a:	f001 f966 	bl	8009bda <memset>
						ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 800890e:	003b      	movs	r3, r7
 8008910:	6862      	ldr	r2, [r4, #4]
 8008912:	a806      	add	r0, sp, #24
 8008914:	6811      	ldr	r1, [r2, #0]
 8008916:	6852      	ldr	r2, [r2, #4]
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8008918:	f000 fe62 	bl	80095e0 <ssd1306_WriteString>
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	6832      	ldr	r2, [r6, #0]
 8008920:	2002      	movs	r0, #2
 8008922:	1a99      	subs	r1, r3, r2
 8008924:	2312      	movs	r3, #18
 8008926:	3102      	adds	r1, #2
 8008928:	4359      	muls	r1, r3
 800892a:	3103      	adds	r1, #3
 800892c:	b2c9      	uxtb	r1, r1
 800892e:	f000 fe6b 	bl	8009608 <ssd1306_SetCursor>
				if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 8008932:	68a1      	ldr	r1, [r4, #8]
 8008934:	4a35      	ldr	r2, [pc, #212]	; (8008a0c <oled_drawMenu+0x30c>)
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	2900      	cmp	r1, #0
 800893a:	d01a      	beq.n	8008972 <oled_drawMenu+0x272>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d016      	beq.n	800896e <oled_drawMenu+0x26e>
					ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 8008940:	7c20      	ldrb	r0, [r4, #16]
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8008942:	003b      	movs	r3, r7
 8008944:	6811      	ldr	r1, [r2, #0]
 8008946:	6852      	ldr	r2, [r2, #4]
 8008948:	f000 fdf4 	bl	8009534 <ssd1306_WriteChar>
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	3420      	adds	r4, #32
 8008950:	3301      	adds	r3, #1
 8008952:	9302      	str	r3, [sp, #8]
 8008954:	e7ac      	b.n	80088b0 <oled_drawMenu+0x1b0>
				}else dispmenu[i].selected = 0;
 8008956:	2200      	movs	r2, #0
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	e7b1      	b.n	80088c0 <oled_drawMenu+0x1c0>
						memcpy(tmp, dispmenu[i].name, 9);
 800895c:	2209      	movs	r2, #9
 800895e:	0029      	movs	r1, r5
 8008960:	e7c7      	b.n	80088f2 <oled_drawMenu+0x1f2>
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	003b      	movs	r3, r7
 8008966:	6811      	ldr	r1, [r2, #0]
 8008968:	0028      	movs	r0, r5
 800896a:	6852      	ldr	r2, [r2, #4]
 800896c:	e7d4      	b.n	8008918 <oled_drawMenu+0x218>
					ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 800896e:	7b20      	ldrb	r0, [r4, #12]
 8008970:	e7e7      	b.n	8008942 <oled_drawMenu+0x242>
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 8008972:	2021      	movs	r0, #33	; 0x21
 8008974:	1ac0      	subs	r0, r0, r3
 8008976:	b2c0      	uxtb	r0, r0
 8008978:	e7e3      	b.n	8008942 <oled_drawMenu+0x242>
	}else if(encoderpos == dispmenusize-1){
 800897a:	4a23      	ldr	r2, [pc, #140]	; (8008a08 <oled_drawMenu+0x308>)
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	1e51      	subs	r1, r2, #1
 8008980:	428b      	cmp	r3, r1
 8008982:	d112      	bne.n	80089aa <oled_drawMenu+0x2aa>
		ssd1306_SetCursor(117,19);
 8008984:	2113      	movs	r1, #19
 8008986:	2075      	movs	r0, #117	; 0x75
 8008988:	f000 fe3e 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 800898c:	2301      	movs	r3, #1
 800898e:	2022      	movs	r0, #34	; 0x22
 8008990:	4a1e      	ldr	r2, [pc, #120]	; (8008a0c <oled_drawMenu+0x30c>)
 8008992:	6811      	ldr	r1, [r2, #0]
 8008994:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 8008996:	f000 fdcd 	bl	8009534 <ssd1306_WriteChar>
	if(!refreshHalt) ssd1306_UpdateScreen(0);
 800899a:	4b1d      	ldr	r3, [pc, #116]	; (8008a10 <oled_drawMenu+0x310>)
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	2800      	cmp	r0, #0
 80089a0:	d101      	bne.n	80089a6 <oled_drawMenu+0x2a6>
 80089a2:	f000 fccd 	bl	8009340 <ssd1306_UpdateScreen>
}
 80089a6:	b00f      	add	sp, #60	; 0x3c
 80089a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(encoderpos > 0 && encoderpos < dispmenusize){
 80089aa:	4293      	cmp	r3, r2
 80089ac:	daf5      	bge.n	800899a <oled_drawMenu+0x29a>
		ssd1306_SetCursor(117,19);
 80089ae:	2113      	movs	r1, #19
 80089b0:	2075      	movs	r0, #117	; 0x75
 80089b2:	f000 fe29 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 80089b6:	4c15      	ldr	r4, [pc, #84]	; (8008a0c <oled_drawMenu+0x30c>)
 80089b8:	2301      	movs	r3, #1
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	6862      	ldr	r2, [r4, #4]
 80089be:	2022      	movs	r0, #34	; 0x22
 80089c0:	f000 fdb8 	bl	8009534 <ssd1306_WriteChar>
		ssd1306_SetCursor(117,41);
 80089c4:	2129      	movs	r1, #41	; 0x29
 80089c6:	2075      	movs	r0, #117	; 0x75
 80089c8:	f000 fe1e 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 80089cc:	cc06      	ldmia	r4!, {r1, r2}
 80089ce:	2301      	movs	r3, #1
 80089d0:	e707      	b.n	80087e2 <oled_drawMenu+0xe2>
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	2000264c 	.word	0x2000264c
 80089d8:	2000381c 	.word	0x2000381c
 80089dc:	20003fcc 	.word	0x20003fcc
 80089e0:	20002a00 	.word	0x20002a00
 80089e4:	0800c385 	.word	0x0800c385
 80089e8:	200001f0 	.word	0x200001f0
 80089ec:	20000200 	.word	0x20000200
 80089f0:	20001db4 	.word	0x20001db4
 80089f4:	20002ce8 	.word	0x20002ce8
 80089f8:	2000382c 	.word	0x2000382c
 80089fc:	2000089c 	.word	0x2000089c
 8008a00:	20003828 	.word	0x20003828
 8008a04:	20000894 	.word	0x20000894
 8008a08:	20003824 	.word	0x20003824
 8008a0c:	200001f8 	.word	0x200001f8
 8008a10:	200025ec 	.word	0x200025ec

08008a14 <oled_refresh>:
void oled_refresh(){
 8008a14:	b510      	push	{r4, lr}
	ssd1306_Fill(0);
 8008a16:	2000      	movs	r0, #0
 8008a18:	f000 fc84 	bl	8009324 <ssd1306_Fill>
	if(oledType == OLED_MENU){
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <oled_refresh+0x2c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d102      	bne.n	8008a2a <oled_refresh+0x16>
		oled_drawMenu();
 8008a24:	f7ff fe6c 	bl	8008700 <oled_drawMenu>
}
 8008a28:	bd10      	pop	{r4, pc}
	}else if(oledType == OLED_SPLASH){
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d1fc      	bne.n	8008a28 <oled_refresh+0x14>
		(*splashFunction)(splashParams);
 8008a2e:	4a05      	ldr	r2, [pc, #20]	; (8008a44 <oled_refresh+0x30>)
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <oled_refresh+0x34>)
 8008a32:	6810      	ldr	r0, [r2, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4798      	blx	r3
		ssd1306_UpdateScreen(0);
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f000 fc81 	bl	8009340 <ssd1306_UpdateScreen>
}
 8008a3e:	e7f3      	b.n	8008a28 <oled_refresh+0x14>
 8008a40:	200009e8 	.word	0x200009e8
 8008a44:	20003abc 	.word	0x20003abc
 8008a48:	20002f4c 	.word	0x20002f4c

08008a4c <oled_refreshResume>:
	refreshHalt = 0;
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	4b01      	ldr	r3, [pc, #4]	; (8008a54 <oled_refreshResume+0x8>)
 8008a50:	601a      	str	r2, [r3, #0]
}
 8008a52:	4770      	bx	lr
 8008a54:	200025ec 	.word	0x200025ec

08008a58 <oled_ErrorSplash>:
void oled_ErrorSplash(char * msg){
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	0004      	movs	r4, r0
	ssd1306_SetCursor((128-(strlen("Chyba!")-1)*11)/2, 15);
 8008a5c:	210f      	movs	r1, #15
 8008a5e:	2024      	movs	r0, #36	; 0x24
 8008a60:	f000 fdd2 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString("Chyba!", Font_11x18, White);
 8008a64:	4a0e      	ldr	r2, [pc, #56]	; (8008aa0 <oled_ErrorSplash+0x48>)
 8008a66:	2301      	movs	r3, #1
 8008a68:	6811      	ldr	r1, [r2, #0]
 8008a6a:	480e      	ldr	r0, [pc, #56]	; (8008aa4 <oled_ErrorSplash+0x4c>)
 8008a6c:	6852      	ldr	r2, [r2, #4]
 8008a6e:	f000 fdb7 	bl	80095e0 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen(msg)-1)*7)/2, 15);
 8008a72:	0020      	movs	r0, r4
 8008a74:	f7f7 fb50 	bl	8000118 <strlen>
 8008a78:	00c3      	lsls	r3, r0, #3
 8008a7a:	1ac0      	subs	r0, r0, r3
 8008a7c:	3087      	adds	r0, #135	; 0x87
 8008a7e:	0840      	lsrs	r0, r0, #1
 8008a80:	b2c0      	uxtb	r0, r0
 8008a82:	210f      	movs	r1, #15
 8008a84:	f000 fdc0 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8008a88:	4a07      	ldr	r2, [pc, #28]	; (8008aa8 <oled_ErrorSplash+0x50>)
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	0020      	movs	r0, r4
 8008a90:	6852      	ldr	r2, [r2, #4]
 8008a92:	f000 fda5 	bl	80095e0 <ssd1306_WriteString>
	encoderclick = 0;
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <oled_ErrorSplash+0x54>)
 8008a9a:	601a      	str	r2, [r3, #0]
}
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	200001e8 	.word	0x200001e8
 8008aa4:	0800c35a 	.word	0x0800c35a
 8008aa8:	200001f0 	.word	0x200001f0
 8008aac:	2000264c 	.word	0x2000264c

08008ab0 <oled_BtDevPairRequestSplash>:
void oled_BtDevPairRequestSplash(struct btDevice * dev){
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	0005      	movs	r5, r0
	if(strlen(dev->name) > 9){
 8008ab6:	f7f7 fb2f 	bl	8000118 <strlen>
 8008aba:	4c5c      	ldr	r4, [pc, #368]	; (8008c2c <oled_BtDevPairRequestSplash+0x17c>)
 8008abc:	0003      	movs	r3, r0
 8008abe:	2809      	cmp	r0, #9
 8008ac0:	d800      	bhi.n	8008ac4 <oled_BtDevPairRequestSplash+0x14>
 8008ac2:	e0a4      	b.n	8008c0e <oled_BtDevPairRequestSplash+0x15e>
		scrollMax = (strlen(dev->name) - 10);
 8008ac4:	3b0a      	subs	r3, #10
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <oled_BtDevPairRequestSplash+0x180>)
		ssd1306_SetCursor(14, 1);
 8008aca:	2101      	movs	r1, #1
		scrollMax = (strlen(dev->name) - 10);
 8008acc:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 8008ace:	200e      	movs	r0, #14
 8008ad0:	f000 fd9a 	bl	8009608 <ssd1306_SetCursor>
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 8008ad4:	4b57      	ldr	r3, [pc, #348]	; (8008c34 <oled_BtDevPairRequestSplash+0x184>)
 8008ad6:	2209      	movs	r2, #9
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	a801      	add	r0, sp, #4
 8008adc:	1869      	adds	r1, r5, r1
 8008ade:	f001 f873 	bl	8009bc8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 8008ae2:	0028      	movs	r0, r5
 8008ae4:	f7f7 fb18 	bl	8000118 <strlen>
 8008ae8:	0002      	movs	r2, r0
 8008aea:	200d      	movs	r0, #13
 8008aec:	3a09      	subs	r2, #9
 8008aee:	2100      	movs	r1, #0
 8008af0:	4468      	add	r0, sp
 8008af2:	f001 f872 	bl	8009bda <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 8008af6:	2301      	movs	r3, #1
 8008af8:	6821      	ldr	r1, [r4, #0]
 8008afa:	6862      	ldr	r2, [r4, #4]
 8008afc:	a801      	add	r0, sp, #4
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8008afe:	f000 fd6f 	bl	80095e0 <ssd1306_WriteString>
	sprintf(msg, "Zada parovani");
 8008b02:	494d      	ldr	r1, [pc, #308]	; (8008c38 <oled_BtDevPairRequestSplash+0x188>)
 8008b04:	a801      	add	r0, sp, #4
 8008b06:	f001 f985 	bl	8009e14 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg)-0.5)*7)/2), 25);
 8008b0a:	a801      	add	r0, sp, #4
 8008b0c:	f7f7 fb04 	bl	8000118 <strlen>
 8008b10:	f7f7 fdd0 	bl	80006b4 <__aeabi_ui2f>
 8008b14:	f7f9 fb84 	bl	8002220 <__aeabi_f2d>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4b48      	ldr	r3, [pc, #288]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008b1c:	f7f8 ffd4 	bl	8001ac8 <__aeabi_dsub>
 8008b20:	2200      	movs	r2, #0
 8008b22:	4b47      	ldr	r3, [pc, #284]	; (8008c40 <oled_BtDevPairRequestSplash+0x190>)
 8008b24:	f7f8 fd50 	bl	80015c8 <__aeabi_dmul>
 8008b28:	0002      	movs	r2, r0
 8008b2a:	000b      	movs	r3, r1
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4945      	ldr	r1, [pc, #276]	; (8008c44 <oled_BtDevPairRequestSplash+0x194>)
 8008b30:	f7f8 ffca 	bl	8001ac8 <__aeabi_dsub>
 8008b34:	2200      	movs	r2, #0
 8008b36:	4b41      	ldr	r3, [pc, #260]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008b38:	f7f8 fd46 	bl	80015c8 <__aeabi_dmul>
 8008b3c:	f7f7 fcdc 	bl	80004f8 <__aeabi_d2uiz>
 8008b40:	2119      	movs	r1, #25
 8008b42:	b2c0      	uxtb	r0, r0
 8008b44:	f000 fd60 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8008b48:	4e3f      	ldr	r6, [pc, #252]	; (8008c48 <oled_BtDevPairRequestSplash+0x198>)
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	6872      	ldr	r2, [r6, #4]
 8008b4e:	6831      	ldr	r1, [r6, #0]
 8008b50:	a801      	add	r0, sp, #4
 8008b52:	f000 fd45 	bl	80095e0 <ssd1306_WriteString>
	sprintf(msg, "PIN");
 8008b56:	493d      	ldr	r1, [pc, #244]	; (8008c4c <oled_BtDevPairRequestSplash+0x19c>)
 8008b58:	a801      	add	r0, sp, #4
 8008b5a:	f001 f95b 	bl	8009e14 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg)-0.5)*7)/2), 41);
 8008b5e:	a801      	add	r0, sp, #4
 8008b60:	f7f7 fada 	bl	8000118 <strlen>
 8008b64:	f7f7 fda6 	bl	80006b4 <__aeabi_ui2f>
 8008b68:	f7f9 fb5a 	bl	8002220 <__aeabi_f2d>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4b33      	ldr	r3, [pc, #204]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008b70:	f7f8 ffaa 	bl	8001ac8 <__aeabi_dsub>
 8008b74:	2200      	movs	r2, #0
 8008b76:	4b32      	ldr	r3, [pc, #200]	; (8008c40 <oled_BtDevPairRequestSplash+0x190>)
 8008b78:	f7f8 fd26 	bl	80015c8 <__aeabi_dmul>
 8008b7c:	0002      	movs	r2, r0
 8008b7e:	000b      	movs	r3, r1
 8008b80:	2000      	movs	r0, #0
 8008b82:	4930      	ldr	r1, [pc, #192]	; (8008c44 <oled_BtDevPairRequestSplash+0x194>)
 8008b84:	f7f8 ffa0 	bl	8001ac8 <__aeabi_dsub>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008b8c:	f7f8 fd1c 	bl	80015c8 <__aeabi_dmul>
 8008b90:	f7f7 fcb2 	bl	80004f8 <__aeabi_d2uiz>
 8008b94:	2129      	movs	r1, #41	; 0x29
 8008b96:	b2c0      	uxtb	r0, r0
 8008b98:	f000 fd36 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8008b9c:	ce06      	ldmia	r6!, {r1, r2}
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	a801      	add	r0, sp, #4
 8008ba2:	f000 fd1d 	bl	80095e0 <ssd1306_WriteString>
	sprintf(msg, "PIN %06ld", dev->pin);
 8008ba6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008ba8:	4929      	ldr	r1, [pc, #164]	; (8008c50 <oled_BtDevPairRequestSplash+0x1a0>)
 8008baa:	a801      	add	r0, sp, #4
 8008bac:	f001 f8d8 	bl	8009d60 <siprintf>
	ssd1306_SetCursor(((128-((float)strlen(msg)-0.5)*7)/2), 41);
 8008bb0:	a801      	add	r0, sp, #4
 8008bb2:	f7f7 fab1 	bl	8000118 <strlen>
 8008bb6:	f7f7 fd7d 	bl	80006b4 <__aeabi_ui2f>
 8008bba:	f7f9 fb31 	bl	8002220 <__aeabi_f2d>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4b1e      	ldr	r3, [pc, #120]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008bc2:	f7f8 ff81 	bl	8001ac8 <__aeabi_dsub>
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <oled_BtDevPairRequestSplash+0x190>)
 8008bca:	f7f8 fcfd 	bl	80015c8 <__aeabi_dmul>
 8008bce:	0002      	movs	r2, r0
 8008bd0:	000b      	movs	r3, r1
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	491b      	ldr	r1, [pc, #108]	; (8008c44 <oled_BtDevPairRequestSplash+0x194>)
 8008bd6:	f7f8 ff77 	bl	8001ac8 <__aeabi_dsub>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4b17      	ldr	r3, [pc, #92]	; (8008c3c <oled_BtDevPairRequestSplash+0x18c>)
 8008bde:	f7f8 fcf3 	bl	80015c8 <__aeabi_dmul>
 8008be2:	f7f7 fc89 	bl	80004f8 <__aeabi_d2uiz>
 8008be6:	2129      	movs	r1, #41	; 0x29
 8008be8:	b2c0      	uxtb	r0, r0
 8008bea:	f000 fd0d 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8008bee:	cc06      	ldmia	r4!, {r1, r2}
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	a801      	add	r0, sp, #4
 8008bf4:	f000 fcf4 	bl	80095e0 <ssd1306_WriteString>
	if(encoderclick){
 8008bf8:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <oled_BtDevPairRequestSplash+0x1a4>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	d004      	beq.n	8008c0a <oled_BtDevPairRequestSplash+0x15a>
		oledType = OLED_MENU;
 8008c00:	2102      	movs	r1, #2
 8008c02:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <oled_BtDevPairRequestSplash+0x1a8>)
 8008c04:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
}
 8008c0a:	b008      	add	sp, #32
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
		ssd1306_SetCursor((128-(strlen(dev->name)-1)*9)/2, 1);
 8008c0e:	2009      	movs	r0, #9
 8008c10:	4240      	negs	r0, r0
 8008c12:	4358      	muls	r0, r3
 8008c14:	3089      	adds	r0, #137	; 0x89
 8008c16:	0840      	lsrs	r0, r0, #1
 8008c18:	b2c0      	uxtb	r0, r0
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	f000 fcf4 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8008c20:	2301      	movs	r3, #1
 8008c22:	6821      	ldr	r1, [r4, #0]
 8008c24:	6862      	ldr	r2, [r4, #4]
 8008c26:	0028      	movs	r0, r5
 8008c28:	e769      	b.n	8008afe <oled_BtDevPairRequestSplash+0x4e>
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	200001e8 	.word	0x200001e8
 8008c30:	2000089c 	.word	0x2000089c
 8008c34:	2000382c 	.word	0x2000382c
 8008c38:	0800c342 	.word	0x0800c342
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	401c0000 	.word	0x401c0000
 8008c44:	40600000 	.word	0x40600000
 8008c48:	200001f0 	.word	0x200001f0
 8008c4c:	0800c32e 	.word	0x0800c32e
 8008c50:	0800c350 	.word	0x0800c350
 8008c54:	2000264c 	.word	0x2000264c
 8008c58:	200009e8 	.word	0x200009e8

08008c5c <oled_BtDevKeyRequestSplash>:
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 8008c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	keyboardSidePosMax = 1;
 8008c5e:	2401      	movs	r4, #1
 8008c60:	4bb1      	ldr	r3, [pc, #708]	; (8008f28 <oled_BtDevKeyRequestSplash+0x2cc>)
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 8008c62:	b089      	sub	sp, #36	; 0x24
	keyboardSidePosMax = 1;
 8008c64:	601c      	str	r4, [r3, #0]
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 8008c66:	0006      	movs	r6, r0
	if(strlen(dev->name) > 9){
 8008c68:	f7f7 fa56 	bl	8000118 <strlen>
 8008c6c:	4daf      	ldr	r5, [pc, #700]	; (8008f2c <oled_BtDevKeyRequestSplash+0x2d0>)
 8008c6e:	0003      	movs	r3, r0
 8008c70:	2809      	cmp	r0, #9
 8008c72:	d800      	bhi.n	8008c76 <oled_BtDevKeyRequestSplash+0x1a>
 8008c74:	e0e8      	b.n	8008e48 <oled_BtDevKeyRequestSplash+0x1ec>
		scrollMax = (strlen(dev->name) - 10);
 8008c76:	3b0a      	subs	r3, #10
 8008c78:	0018      	movs	r0, r3
 8008c7a:	4bad      	ldr	r3, [pc, #692]	; (8008f30 <oled_BtDevKeyRequestSplash+0x2d4>)
		ssd1306_SetCursor(14, 1);
 8008c7c:	0021      	movs	r1, r4
		scrollMax = (strlen(dev->name) - 10);
 8008c7e:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 8008c80:	200e      	movs	r0, #14
 8008c82:	f000 fcc1 	bl	8009608 <ssd1306_SetCursor>
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 8008c86:	4bab      	ldr	r3, [pc, #684]	; (8008f34 <oled_BtDevKeyRequestSplash+0x2d8>)
 8008c88:	2209      	movs	r2, #9
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	a801      	add	r0, sp, #4
 8008c8e:	1871      	adds	r1, r6, r1
 8008c90:	f000 ff9a 	bl	8009bc8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 8008c94:	0030      	movs	r0, r6
 8008c96:	f7f7 fa3f 	bl	8000118 <strlen>
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	200d      	movs	r0, #13
 8008c9e:	3a09      	subs	r2, #9
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4468      	add	r0, sp
 8008ca4:	f000 ff99 	bl	8009bda <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 8008ca8:	cd06      	ldmia	r5!, {r1, r2}
 8008caa:	0023      	movs	r3, r4
 8008cac:	a801      	add	r0, sp, #4
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8008cae:	f000 fc97 	bl	80095e0 <ssd1306_WriteString>
	sprintf(msg, "Zada parovani");
 8008cb2:	49a1      	ldr	r1, [pc, #644]	; (8008f38 <oled_BtDevKeyRequestSplash+0x2dc>)
 8008cb4:	a801      	add	r0, sp, #4
 8008cb6:	f001 f8ad 	bl	8009e14 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg)-0.5)*7)/2), 25);
 8008cba:	a801      	add	r0, sp, #4
 8008cbc:	f7f7 fa2c 	bl	8000118 <strlen>
 8008cc0:	f7f7 fcf8 	bl	80006b4 <__aeabi_ui2f>
 8008cc4:	f7f9 faac 	bl	8002220 <__aeabi_f2d>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4b9c      	ldr	r3, [pc, #624]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008ccc:	f7f8 fefc 	bl	8001ac8 <__aeabi_dsub>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008cd4:	f7f8 fc78 	bl	80015c8 <__aeabi_dmul>
 8008cd8:	0002      	movs	r2, r0
 8008cda:	000b      	movs	r3, r1
 8008cdc:	2000      	movs	r0, #0
 8008cde:	4999      	ldr	r1, [pc, #612]	; (8008f44 <oled_BtDevKeyRequestSplash+0x2e8>)
 8008ce0:	f7f8 fef2 	bl	8001ac8 <__aeabi_dsub>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4b95      	ldr	r3, [pc, #596]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008ce8:	f7f8 fc6e 	bl	80015c8 <__aeabi_dmul>
 8008cec:	f7f7 fc04 	bl	80004f8 <__aeabi_d2uiz>
 8008cf0:	2119      	movs	r1, #25
 8008cf2:	b2c0      	uxtb	r0, r0
 8008cf4:	f000 fc88 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8008cf8:	4c93      	ldr	r4, [pc, #588]	; (8008f48 <oled_BtDevKeyRequestSplash+0x2ec>)
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	6862      	ldr	r2, [r4, #4]
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	a801      	add	r0, sp, #4
 8008d02:	f000 fc6d 	bl	80095e0 <ssd1306_WriteString>
	sprintf(msg, "Parovat?");
 8008d06:	4991      	ldr	r1, [pc, #580]	; (8008f4c <oled_BtDevKeyRequestSplash+0x2f0>)
 8008d08:	a801      	add	r0, sp, #4
 8008d0a:	f001 f883 	bl	8009e14 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg)-0.5)*7)/2), 37);
 8008d0e:	a801      	add	r0, sp, #4
 8008d10:	f7f7 fa02 	bl	8000118 <strlen>
 8008d14:	f7f7 fcce 	bl	80006b4 <__aeabi_ui2f>
 8008d18:	f7f9 fa82 	bl	8002220 <__aeabi_f2d>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4b87      	ldr	r3, [pc, #540]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008d20:	f7f8 fed2 	bl	8001ac8 <__aeabi_dsub>
 8008d24:	2200      	movs	r2, #0
 8008d26:	4b86      	ldr	r3, [pc, #536]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008d28:	f7f8 fc4e 	bl	80015c8 <__aeabi_dmul>
 8008d2c:	0002      	movs	r2, r0
 8008d2e:	000b      	movs	r3, r1
 8008d30:	2000      	movs	r0, #0
 8008d32:	4984      	ldr	r1, [pc, #528]	; (8008f44 <oled_BtDevKeyRequestSplash+0x2e8>)
 8008d34:	f7f8 fec8 	bl	8001ac8 <__aeabi_dsub>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4b80      	ldr	r3, [pc, #512]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008d3c:	f7f8 fc44 	bl	80015c8 <__aeabi_dmul>
 8008d40:	f7f7 fbda 	bl	80004f8 <__aeabi_d2uiz>
 8008d44:	2125      	movs	r1, #37	; 0x25
 8008d46:	b2c0      	uxtb	r0, r0
 8008d48:	f000 fc5e 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	6821      	ldr	r1, [r4, #0]
 8008d50:	6862      	ldr	r2, [r4, #4]
 8008d52:	a801      	add	r0, sp, #4
 8008d54:	f000 fc44 	bl	80095e0 <ssd1306_WriteString>
	if(keyboardSidePos == 0){
 8008d58:	4b7d      	ldr	r3, [pc, #500]	; (8008f50 <oled_BtDevKeyRequestSplash+0x2f4>)
 8008d5a:	497e      	ldr	r1, [pc, #504]	; (8008f54 <oled_BtDevKeyRequestSplash+0x2f8>)
 8008d5c:	681f      	ldr	r7, [r3, #0]
		sprintf(msg, "ANO");
 8008d5e:	a801      	add	r0, sp, #4
	if(keyboardSidePos == 0){
 8008d60:	2f00      	cmp	r7, #0
 8008d62:	d000      	beq.n	8008d66 <oled_BtDevKeyRequestSplash+0x10a>
 8008d64:	e07d      	b.n	8008e62 <oled_BtDevKeyRequestSplash+0x206>
		sprintf(msg, "ANO");
 8008d66:	f001 f855 	bl	8009e14 <strcpy>
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 8008d6a:	2533      	movs	r5, #51	; 0x33
				ssd1306_DrawPixel(x, y+51, White);
 8008d6c:	0029      	movs	r1, r5
 8008d6e:	3501      	adds	r5, #1
 8008d70:	b2f8      	uxtb	r0, r7
 8008d72:	2201      	movs	r2, #1
 8008d74:	b2ed      	uxtb	r5, r5
 8008d76:	f000 fbb9 	bl	80094ec <ssd1306_DrawPixel>
			for(int y = 0; y < 12; y++){
 8008d7a:	2d3f      	cmp	r5, #63	; 0x3f
 8008d7c:	d1f6      	bne.n	8008d6c <oled_BtDevKeyRequestSplash+0x110>
		for(int x = 0; x < 64; x++){
 8008d7e:	3701      	adds	r7, #1
 8008d80:	2f40      	cmp	r7, #64	; 0x40
 8008d82:	d1f2      	bne.n	8008d6a <oled_BtDevKeyRequestSplash+0x10e>
		ssd1306_SetCursor(((64-((float)strlen(msg)-0.5)*7)/2), 53);
 8008d84:	a801      	add	r0, sp, #4
 8008d86:	f7f7 f9c7 	bl	8000118 <strlen>
 8008d8a:	f7f7 fc93 	bl	80006b4 <__aeabi_ui2f>
 8008d8e:	f7f9 fa47 	bl	8002220 <__aeabi_f2d>
 8008d92:	2200      	movs	r2, #0
 8008d94:	4b69      	ldr	r3, [pc, #420]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008d96:	f7f8 fe97 	bl	8001ac8 <__aeabi_dsub>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4b68      	ldr	r3, [pc, #416]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008d9e:	f7f8 fc13 	bl	80015c8 <__aeabi_dmul>
 8008da2:	0002      	movs	r2, r0
 8008da4:	000b      	movs	r3, r1
 8008da6:	2000      	movs	r0, #0
 8008da8:	496b      	ldr	r1, [pc, #428]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008daa:	f7f8 fe8d 	bl	8001ac8 <__aeabi_dsub>
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b62      	ldr	r3, [pc, #392]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008db2:	f7f8 fc09 	bl	80015c8 <__aeabi_dmul>
 8008db6:	f7f7 fb9f 	bl	80004f8 <__aeabi_d2uiz>
 8008dba:	2135      	movs	r1, #53	; 0x35
 8008dbc:	b2c0      	uxtb	r0, r0
 8008dbe:	f000 fc23 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, Black);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6862      	ldr	r2, [r4, #4]
 8008dc6:	6821      	ldr	r1, [r4, #0]
 8008dc8:	a801      	add	r0, sp, #4
 8008dca:	f000 fc09 	bl	80095e0 <ssd1306_WriteString>
		sprintf(msg, "NE");
 8008dce:	4963      	ldr	r1, [pc, #396]	; (8008f5c <oled_BtDevKeyRequestSplash+0x300>)
 8008dd0:	a801      	add	r0, sp, #4
 8008dd2:	f001 f81f 	bl	8009e14 <strcpy>
		ssd1306_SetCursor(((64-((float)strlen(msg)-0.5)*7)/2)+64, 53);
 8008dd6:	a801      	add	r0, sp, #4
 8008dd8:	f7f7 f99e 	bl	8000118 <strlen>
 8008ddc:	f7f7 fc6a 	bl	80006b4 <__aeabi_ui2f>
 8008de0:	f7f9 fa1e 	bl	8002220 <__aeabi_f2d>
 8008de4:	2200      	movs	r2, #0
 8008de6:	4b55      	ldr	r3, [pc, #340]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008de8:	f7f8 fe6e 	bl	8001ac8 <__aeabi_dsub>
 8008dec:	2200      	movs	r2, #0
 8008dee:	4b54      	ldr	r3, [pc, #336]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008df0:	f7f8 fbea 	bl	80015c8 <__aeabi_dmul>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	2000      	movs	r0, #0
 8008dfa:	4957      	ldr	r1, [pc, #348]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008dfc:	f7f8 fe64 	bl	8001ac8 <__aeabi_dsub>
 8008e00:	2200      	movs	r2, #0
 8008e02:	4b4e      	ldr	r3, [pc, #312]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008e04:	f7f8 fbe0 	bl	80015c8 <__aeabi_dmul>
 8008e08:	4b53      	ldr	r3, [pc, #332]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f7f7 fc98 	bl	8000740 <__aeabi_dadd>
 8008e10:	f7f7 fb72 	bl	80004f8 <__aeabi_d2uiz>
 8008e14:	2135      	movs	r1, #53	; 0x35
 8008e16:	b2c0      	uxtb	r0, r0
 8008e18:	f000 fbf6 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, White);
 8008e1c:	2301      	movs	r3, #1
		ssd1306_WriteString(msg, Font_7x10, Black);
 8008e1e:	cc06      	ldmia	r4!, {r1, r2}
 8008e20:	a801      	add	r0, sp, #4
 8008e22:	f000 fbdd 	bl	80095e0 <ssd1306_WriteString>
	if(encoderclick){
 8008e26:	4c4e      	ldr	r4, [pc, #312]	; (8008f60 <oled_BtDevKeyRequestSplash+0x304>)
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <oled_BtDevKeyRequestSplash+0x1e8>
		if(keyboardSidePos == 0){
 8008e2e:	4b48      	ldr	r3, [pc, #288]	; (8008f50 <oled_BtDevKeyRequestSplash+0x2f4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d000      	beq.n	8008e38 <oled_BtDevKeyRequestSplash+0x1dc>
 8008e36:	e073      	b.n	8008f20 <oled_BtDevKeyRequestSplash+0x2c4>
			oled_setDisplayedSplash(oled_BtDevKeyEnterSplash, dev);
 8008e38:	0031      	movs	r1, r6
 8008e3a:	484a      	ldr	r0, [pc, #296]	; (8008f64 <oled_BtDevKeyRequestSplash+0x308>)
 8008e3c:	f7ff fae4 	bl	8008408 <oled_setDisplayedSplash>
		encoderclick = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	6023      	str	r3, [r4, #0]
}
 8008e44:	b009      	add	sp, #36	; 0x24
 8008e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ssd1306_SetCursor((128-(strlen(dev->name)-1)*9)/2, 1);
 8008e48:	2009      	movs	r0, #9
 8008e4a:	4240      	negs	r0, r0
 8008e4c:	4358      	muls	r0, r3
 8008e4e:	3089      	adds	r0, #137	; 0x89
 8008e50:	0840      	lsrs	r0, r0, #1
 8008e52:	b2c0      	uxtb	r0, r0
 8008e54:	0021      	movs	r1, r4
 8008e56:	f000 fbd7 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 8008e5a:	cd06      	ldmia	r5!, {r1, r2}
 8008e5c:	0023      	movs	r3, r4
 8008e5e:	0030      	movs	r0, r6
 8008e60:	e725      	b.n	8008cae <oled_BtDevKeyRequestSplash+0x52>
		sprintf(msg, "ANO");
 8008e62:	f000 ffd7 	bl	8009e14 <strcpy>
		ssd1306_SetCursor(((64-((float)strlen(msg)-0.5)*7)/2), 53);
 8008e66:	a801      	add	r0, sp, #4
 8008e68:	f7f7 f956 	bl	8000118 <strlen>
 8008e6c:	f7f7 fc22 	bl	80006b4 <__aeabi_ui2f>
 8008e70:	f7f9 f9d6 	bl	8002220 <__aeabi_f2d>
 8008e74:	2200      	movs	r2, #0
 8008e76:	4b31      	ldr	r3, [pc, #196]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008e78:	f7f8 fe26 	bl	8001ac8 <__aeabi_dsub>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4b30      	ldr	r3, [pc, #192]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008e80:	f7f8 fba2 	bl	80015c8 <__aeabi_dmul>
 8008e84:	0002      	movs	r2, r0
 8008e86:	000b      	movs	r3, r1
 8008e88:	2000      	movs	r0, #0
 8008e8a:	4933      	ldr	r1, [pc, #204]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008e8c:	f7f8 fe1c 	bl	8001ac8 <__aeabi_dsub>
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b2a      	ldr	r3, [pc, #168]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008e94:	f7f8 fb98 	bl	80015c8 <__aeabi_dmul>
 8008e98:	f7f7 fb2e 	bl	80004f8 <__aeabi_d2uiz>
 8008e9c:	2135      	movs	r1, #53	; 0x35
 8008e9e:	b2c0      	uxtb	r0, r0
 8008ea0:	f000 fbb2 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, White);
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	6862      	ldr	r2, [r4, #4]
 8008eaa:	a801      	add	r0, sp, #4
 8008eac:	f000 fb98 	bl	80095e0 <ssd1306_WriteString>
		sprintf(msg, "NE");
 8008eb0:	492a      	ldr	r1, [pc, #168]	; (8008f5c <oled_BtDevKeyRequestSplash+0x300>)
 8008eb2:	a801      	add	r0, sp, #4
 8008eb4:	f000 ffae 	bl	8009e14 <strcpy>
 8008eb8:	2740      	movs	r7, #64	; 0x40
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 8008eba:	2533      	movs	r5, #51	; 0x33
				ssd1306_DrawPixel(x+64, y+51, White);
 8008ebc:	0029      	movs	r1, r5
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	0038      	movs	r0, r7
 8008ec4:	b2ed      	uxtb	r5, r5
 8008ec6:	f000 fb11 	bl	80094ec <ssd1306_DrawPixel>
			for(int y = 0; y < 12; y++){
 8008eca:	2d3f      	cmp	r5, #63	; 0x3f
 8008ecc:	d1f6      	bne.n	8008ebc <oled_BtDevKeyRequestSplash+0x260>
 8008ece:	3701      	adds	r7, #1
 8008ed0:	b2ff      	uxtb	r7, r7
		for(int x = 0; x < 64; x++){
 8008ed2:	2f80      	cmp	r7, #128	; 0x80
 8008ed4:	d1f1      	bne.n	8008eba <oled_BtDevKeyRequestSplash+0x25e>
		ssd1306_SetCursor(((64-((float)strlen(msg)-0.5)*7)/2)+64, 53);
 8008ed6:	a801      	add	r0, sp, #4
 8008ed8:	f7f7 f91e 	bl	8000118 <strlen>
 8008edc:	f7f7 fbea 	bl	80006b4 <__aeabi_ui2f>
 8008ee0:	f7f9 f99e 	bl	8002220 <__aeabi_f2d>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008ee8:	f7f8 fdee 	bl	8001ac8 <__aeabi_dsub>
 8008eec:	2200      	movs	r2, #0
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <oled_BtDevKeyRequestSplash+0x2e4>)
 8008ef0:	f7f8 fb6a 	bl	80015c8 <__aeabi_dmul>
 8008ef4:	0002      	movs	r2, r0
 8008ef6:	000b      	movs	r3, r1
 8008ef8:	2000      	movs	r0, #0
 8008efa:	4917      	ldr	r1, [pc, #92]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008efc:	f7f8 fde4 	bl	8001ac8 <__aeabi_dsub>
 8008f00:	2200      	movs	r2, #0
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <oled_BtDevKeyRequestSplash+0x2e0>)
 8008f04:	f7f8 fb60 	bl	80015c8 <__aeabi_dmul>
 8008f08:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <oled_BtDevKeyRequestSplash+0x2fc>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f7f7 fc18 	bl	8000740 <__aeabi_dadd>
 8008f10:	f7f7 faf2 	bl	80004f8 <__aeabi_d2uiz>
 8008f14:	2135      	movs	r1, #53	; 0x35
 8008f16:	b2c0      	uxtb	r0, r0
 8008f18:	f000 fb76 	bl	8009608 <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, Black);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e77e      	b.n	8008e1e <oled_BtDevKeyRequestSplash+0x1c2>
			oledType = OLED_MENU;
 8008f20:	2202      	movs	r2, #2
 8008f22:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <oled_BtDevKeyRequestSplash+0x30c>)
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	e78b      	b.n	8008e40 <oled_BtDevKeyRequestSplash+0x1e4>
 8008f28:	20002cb8 	.word	0x20002cb8
 8008f2c:	200001e8 	.word	0x200001e8
 8008f30:	2000089c 	.word	0x2000089c
 8008f34:	2000382c 	.word	0x2000382c
 8008f38:	0800c342 	.word	0x0800c342
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	401c0000 	.word	0x401c0000
 8008f44:	40600000 	.word	0x40600000
 8008f48:	200001f0 	.word	0x200001f0
 8008f4c:	0800c332 	.word	0x0800c332
 8008f50:	20002a04 	.word	0x20002a04
 8008f54:	0800c33b 	.word	0x0800c33b
 8008f58:	40500000 	.word	0x40500000
 8008f5c:	0800c33f 	.word	0x0800c33f
 8008f60:	2000264c 	.word	0x2000264c
 8008f64:	08007b8d 	.word	0x08007b8d
 8008f68:	200009e8 	.word	0x200009e8

08008f6c <oled_playingSplash>:
		oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
		oledType = OLED_MENU;
	}
}

void oled_playingSplash(char * songname){
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28

	char msg[25];

	sprintf(msg, "Prehravam");
 8008f70:	493e      	ldr	r1, [pc, #248]	; (800906c <oled_playingSplash+0x100>)
void oled_playingSplash(char * songname){
 8008f72:	0005      	movs	r5, r0
	sprintf(msg, "Prehravam");
 8008f74:	a803      	add	r0, sp, #12
 8008f76:	f000 ff4d 	bl	8009e14 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 1);
 8008f7a:	a803      	add	r0, sp, #12
 8008f7c:	f7f7 f8cc 	bl	8000118 <strlen>
 8008f80:	0003      	movs	r3, r0
 8008f82:	200b      	movs	r0, #11
 8008f84:	4240      	negs	r0, r0
 8008f86:	4358      	muls	r0, r3
 8008f88:	308b      	adds	r0, #139	; 0x8b
 8008f8a:	0840      	lsrs	r0, r0, #1
 8008f8c:	b2c0      	uxtb	r0, r0
 8008f8e:	2101      	movs	r1, #1
 8008f90:	f000 fb3a 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8008f94:	4c36      	ldr	r4, [pc, #216]	; (8009070 <oled_playingSplash+0x104>)
 8008f96:	2301      	movs	r3, #1
 8008f98:	6821      	ldr	r1, [r4, #0]
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	a803      	add	r0, sp, #12
 8008f9e:	f000 fb1f 	bl	80095e0 <ssd1306_WriteString>

	if(strlen(songname) > 9){
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	f7f7 f8b8 	bl	8000118 <strlen>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	2809      	cmp	r0, #9
 8008fac:	d950      	bls.n	8009050 <oled_playingSplash+0xe4>
			scrollMax = (strlen(songname) - 10);
 8008fae:	3b0a      	subs	r3, #10
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	4b30      	ldr	r3, [pc, #192]	; (8009074 <oled_playingSplash+0x108>)
			ssd1306_SetCursor(14, 25);
 8008fb4:	2119      	movs	r1, #25
			scrollMax = (strlen(songname) - 10);
 8008fb6:	6018      	str	r0, [r3, #0]
			ssd1306_SetCursor(14, 25);
 8008fb8:	200e      	movs	r0, #14
 8008fba:	f000 fb25 	bl	8009608 <ssd1306_SetCursor>
			char tmp[10];
			memcpy(tmp, (char*)(songname)+scrollIndex, 9);
 8008fbe:	4b2e      	ldr	r3, [pc, #184]	; (8009078 <oled_playingSplash+0x10c>)
 8008fc0:	2209      	movs	r2, #9
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	4668      	mov	r0, sp
 8008fc6:	1869      	adds	r1, r5, r1
 8008fc8:	f000 fdfe 	bl	8009bc8 <memcpy>
			memset(tmp+9, 0, strlen(songname)-9);
 8008fcc:	0028      	movs	r0, r5
 8008fce:	f7f7 f8a3 	bl	8000118 <strlen>
 8008fd2:	0002      	movs	r2, r0
 8008fd4:	2009      	movs	r0, #9
 8008fd6:	3a09      	subs	r2, #9
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4468      	add	r0, sp
 8008fdc:	f000 fdfd 	bl	8009bda <memset>
			ssd1306_WriteString(tmp, Font_11x18, White);
 8008fe0:	cc06      	ldmia	r4!, {r1, r2}
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4668      	mov	r0, sp
 8008fe6:	f000 fafb 	bl	80095e0 <ssd1306_WriteString>
void oled_playingSplash(char * songname){
 8008fea:	2500      	movs	r5, #0
 8008fec:	2633      	movs	r6, #51	; 0x33
 8008fee:	0034      	movs	r4, r6
			ssd1306_WriteString(songname, Font_11x18, White);
		}

	for(int x = 0; x < 128; x++){
		for(int y = 0; y < 12; y++){
			ssd1306_DrawPixel(x, y+51, White);
 8008ff0:	0021      	movs	r1, r4
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	b2e8      	uxtb	r0, r5
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	b2e4      	uxtb	r4, r4
 8008ffa:	f000 fa77 	bl	80094ec <ssd1306_DrawPixel>
		for(int y = 0; y < 12; y++){
 8008ffe:	2c3f      	cmp	r4, #63	; 0x3f
 8009000:	d1f6      	bne.n	8008ff0 <oled_playingSplash+0x84>
	for(int x = 0; x < 128; x++){
 8009002:	3501      	adds	r5, #1
 8009004:	2d80      	cmp	r5, #128	; 0x80
 8009006:	d1f2      	bne.n	8008fee <oled_playingSplash+0x82>
		}
	}

	sprintf(msg, "Zastavit");
 8009008:	491c      	ldr	r1, [pc, #112]	; (800907c <oled_playingSplash+0x110>)
 800900a:	a803      	add	r0, sp, #12
 800900c:	f000 ff02 	bl	8009e14 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg)-1)*7)/2, 53);
 8009010:	a803      	add	r0, sp, #12
 8009012:	f7f7 f881 	bl	8000118 <strlen>
 8009016:	00c3      	lsls	r3, r0, #3
 8009018:	1ac0      	subs	r0, r0, r3
 800901a:	3087      	adds	r0, #135	; 0x87
 800901c:	0840      	lsrs	r0, r0, #1
 800901e:	b2c0      	uxtb	r0, r0
 8009020:	2135      	movs	r1, #53	; 0x35
 8009022:	f000 faf1 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, Black);
 8009026:	4a16      	ldr	r2, [pc, #88]	; (8009080 <oled_playingSplash+0x114>)
 8009028:	2300      	movs	r3, #0
 800902a:	6811      	ldr	r1, [r2, #0]
 800902c:	a803      	add	r0, sp, #12
 800902e:	6852      	ldr	r2, [r2, #4]
 8009030:	f000 fad6 	bl	80095e0 <ssd1306_WriteString>

	if(encoderclick){
 8009034:	4b13      	ldr	r3, [pc, #76]	; (8009084 <oled_playingSplash+0x118>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	2a00      	cmp	r2, #0
 800903a:	d007      	beq.n	800904c <oled_playingSplash+0xe0>
		oledType = OLED_MENU;
 800903c:	2102      	movs	r1, #2
 800903e:	4a12      	ldr	r2, [pc, #72]	; (8009088 <oled_playingSplash+0x11c>)
		encoderclick = 0;
		midiController_stop(ADDRESS_CONTROLLER);
 8009040:	2001      	movs	r0, #1
		oledType = OLED_MENU;
 8009042:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]
		midiController_stop(ADDRESS_CONTROLLER);
 8009048:	f7fe fa62 	bl	8007510 <midiController_stop>
	}
}
 800904c:	b00a      	add	sp, #40	; 0x28
 800904e:	bd70      	pop	{r4, r5, r6, pc}
			ssd1306_SetCursor((128-(strlen(songname)-1)*9)/2, 25);
 8009050:	2009      	movs	r0, #9
 8009052:	4240      	negs	r0, r0
 8009054:	4358      	muls	r0, r3
 8009056:	3089      	adds	r0, #137	; 0x89
 8009058:	0840      	lsrs	r0, r0, #1
 800905a:	b2c0      	uxtb	r0, r0
 800905c:	2119      	movs	r1, #25
 800905e:	f000 fad3 	bl	8009608 <ssd1306_SetCursor>
			ssd1306_WriteString(songname, Font_11x18, White);
 8009062:	cc06      	ldmia	r4!, {r1, r2}
 8009064:	2301      	movs	r3, #1
 8009066:	0028      	movs	r0, r5
 8009068:	e7bd      	b.n	8008fe6 <oled_playingSplash+0x7a>
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	0800c3d5 	.word	0x0800c3d5
 8009070:	200001e8 	.word	0x200001e8
 8009074:	2000089c 	.word	0x2000089c
 8009078:	2000382c 	.word	0x2000382c
 800907c:	0800c3df 	.word	0x0800c3df
 8009080:	200001f0 	.word	0x200001f0
 8009084:	2000264c 	.word	0x2000264c
 8009088:	200009e8 	.word	0x200009e8

0800908c <oled_recordingSplash>:


void oled_recordingSplash(char * songname){
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	b08a      	sub	sp, #40	; 0x28

	char msg[25];

	sprintf(msg, "Nahravam");
 8009090:	493e      	ldr	r1, [pc, #248]	; (800918c <oled_recordingSplash+0x100>)
void oled_recordingSplash(char * songname){
 8009092:	0005      	movs	r5, r0
	sprintf(msg, "Nahravam");
 8009094:	a803      	add	r0, sp, #12
 8009096:	f000 febd 	bl	8009e14 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 1);
 800909a:	a803      	add	r0, sp, #12
 800909c:	f7f7 f83c 	bl	8000118 <strlen>
 80090a0:	0003      	movs	r3, r0
 80090a2:	200b      	movs	r0, #11
 80090a4:	4240      	negs	r0, r0
 80090a6:	4358      	muls	r0, r3
 80090a8:	308b      	adds	r0, #139	; 0x8b
 80090aa:	0840      	lsrs	r0, r0, #1
 80090ac:	b2c0      	uxtb	r0, r0
 80090ae:	2101      	movs	r1, #1
 80090b0:	f000 faaa 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 80090b4:	4c36      	ldr	r4, [pc, #216]	; (8009190 <oled_recordingSplash+0x104>)
 80090b6:	2301      	movs	r3, #1
 80090b8:	6821      	ldr	r1, [r4, #0]
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	a803      	add	r0, sp, #12
 80090be:	f000 fa8f 	bl	80095e0 <ssd1306_WriteString>

	if(strlen(songname) > 9){
 80090c2:	0028      	movs	r0, r5
 80090c4:	f7f7 f828 	bl	8000118 <strlen>
 80090c8:	0003      	movs	r3, r0
 80090ca:	2809      	cmp	r0, #9
 80090cc:	d950      	bls.n	8009170 <oled_recordingSplash+0xe4>
			scrollMax = (strlen(songname) - 10);
 80090ce:	3b0a      	subs	r3, #10
 80090d0:	0018      	movs	r0, r3
 80090d2:	4b30      	ldr	r3, [pc, #192]	; (8009194 <oled_recordingSplash+0x108>)
			ssd1306_SetCursor(14, 25);
 80090d4:	2119      	movs	r1, #25
			scrollMax = (strlen(songname) - 10);
 80090d6:	6018      	str	r0, [r3, #0]
			ssd1306_SetCursor(14, 25);
 80090d8:	200e      	movs	r0, #14
 80090da:	f000 fa95 	bl	8009608 <ssd1306_SetCursor>
			char tmp[10];
			memcpy(tmp, (char*)(songname)+scrollIndex, 9);
 80090de:	4b2e      	ldr	r3, [pc, #184]	; (8009198 <oled_recordingSplash+0x10c>)
 80090e0:	2209      	movs	r2, #9
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	4668      	mov	r0, sp
 80090e6:	1869      	adds	r1, r5, r1
 80090e8:	f000 fd6e 	bl	8009bc8 <memcpy>
			memset(tmp+9, 0, strlen(songname)-9);
 80090ec:	0028      	movs	r0, r5
 80090ee:	f7f7 f813 	bl	8000118 <strlen>
 80090f2:	0002      	movs	r2, r0
 80090f4:	2009      	movs	r0, #9
 80090f6:	3a09      	subs	r2, #9
 80090f8:	2100      	movs	r1, #0
 80090fa:	4468      	add	r0, sp
 80090fc:	f000 fd6d 	bl	8009bda <memset>
			ssd1306_WriteString(tmp, Font_11x18, White);
 8009100:	cc06      	ldmia	r4!, {r1, r2}
 8009102:	2301      	movs	r3, #1
 8009104:	4668      	mov	r0, sp
 8009106:	f000 fa6b 	bl	80095e0 <ssd1306_WriteString>
void oled_recordingSplash(char * songname){
 800910a:	2500      	movs	r5, #0
 800910c:	2633      	movs	r6, #51	; 0x33
 800910e:	0034      	movs	r4, r6
			ssd1306_WriteString(songname, Font_11x18, White);
		}

	for(int x = 0; x < 128; x++){
		for(int y = 0; y < 12; y++){
			ssd1306_DrawPixel(x, y+51, White);
 8009110:	0021      	movs	r1, r4
 8009112:	3401      	adds	r4, #1
 8009114:	b2e8      	uxtb	r0, r5
 8009116:	2201      	movs	r2, #1
 8009118:	b2e4      	uxtb	r4, r4
 800911a:	f000 f9e7 	bl	80094ec <ssd1306_DrawPixel>
		for(int y = 0; y < 12; y++){
 800911e:	2c3f      	cmp	r4, #63	; 0x3f
 8009120:	d1f6      	bne.n	8009110 <oled_recordingSplash+0x84>
	for(int x = 0; x < 128; x++){
 8009122:	3501      	adds	r5, #1
 8009124:	2d80      	cmp	r5, #128	; 0x80
 8009126:	d1f2      	bne.n	800910e <oled_recordingSplash+0x82>
		}
	}

	sprintf(msg, "Zastavit");
 8009128:	491c      	ldr	r1, [pc, #112]	; (800919c <oled_recordingSplash+0x110>)
 800912a:	a803      	add	r0, sp, #12
 800912c:	f000 fe72 	bl	8009e14 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg)-1)*7)/2, 53);
 8009130:	a803      	add	r0, sp, #12
 8009132:	f7f6 fff1 	bl	8000118 <strlen>
 8009136:	00c3      	lsls	r3, r0, #3
 8009138:	1ac0      	subs	r0, r0, r3
 800913a:	3087      	adds	r0, #135	; 0x87
 800913c:	0840      	lsrs	r0, r0, #1
 800913e:	b2c0      	uxtb	r0, r0
 8009140:	2135      	movs	r1, #53	; 0x35
 8009142:	f000 fa61 	bl	8009608 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, Black);
 8009146:	4a16      	ldr	r2, [pc, #88]	; (80091a0 <oled_recordingSplash+0x114>)
 8009148:	2300      	movs	r3, #0
 800914a:	6811      	ldr	r1, [r2, #0]
 800914c:	a803      	add	r0, sp, #12
 800914e:	6852      	ldr	r2, [r2, #4]
 8009150:	f000 fa46 	bl	80095e0 <ssd1306_WriteString>


	if(encoderclick){
 8009154:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <oled_recordingSplash+0x118>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	2a00      	cmp	r2, #0
 800915a:	d007      	beq.n	800916c <oled_recordingSplash+0xe0>
		oledType = OLED_MENU;
 800915c:	2102      	movs	r1, #2
 800915e:	4a12      	ldr	r2, [pc, #72]	; (80091a8 <oled_recordingSplash+0x11c>)
		encoderclick = 0;
		midiController_stop(ADDRESS_CONTROLLER);
 8009160:	2001      	movs	r0, #1
		oledType = OLED_MENU;
 8009162:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
		midiController_stop(ADDRESS_CONTROLLER);
 8009168:	f7fe f9d2 	bl	8007510 <midiController_stop>
	}
}
 800916c:	b00a      	add	sp, #40	; 0x28
 800916e:	bd70      	pop	{r4, r5, r6, pc}
			ssd1306_SetCursor((128-(strlen(songname)-1)*9)/2, 25);
 8009170:	2009      	movs	r0, #9
 8009172:	4240      	negs	r0, r0
 8009174:	4358      	muls	r0, r3
 8009176:	3089      	adds	r0, #137	; 0x89
 8009178:	0840      	lsrs	r0, r0, #1
 800917a:	b2c0      	uxtb	r0, r0
 800917c:	2119      	movs	r1, #25
 800917e:	f000 fa43 	bl	8009608 <ssd1306_SetCursor>
			ssd1306_WriteString(songname, Font_11x18, White);
 8009182:	cc06      	ldmia	r4!, {r1, r2}
 8009184:	2301      	movs	r3, #1
 8009186:	0028      	movs	r0, r5
 8009188:	e7bd      	b.n	8009106 <oled_recordingSplash+0x7a>
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	0800c3e8 	.word	0x0800c3e8
 8009190:	200001e8 	.word	0x200001e8
 8009194:	2000089c 	.word	0x2000089c
 8009198:	2000382c 	.word	0x2000382c
 800919c:	0800c3df 	.word	0x0800c3df
 80091a0:	200001f0 	.word	0x200001f0
 80091a4:	2000264c 	.word	0x2000264c
 80091a8:	200009e8 	.word	0x200009e8

080091ac <MX_RTC_Init>:

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80091ac:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80091ae:	480b      	ldr	r0, [pc, #44]	; (80091dc <MX_RTC_Init+0x30>)
{
 80091b0:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 80091b2:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 80091b4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 80091b6:	3280      	adds	r2, #128	; 0x80
 80091b8:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80091ba:	2280      	movs	r2, #128	; 0x80
  hrtc.Instance = RTC;
 80091bc:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80091be:	2300      	movs	r3, #0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80091c0:	05d2      	lsls	r2, r2, #23
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80091c2:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80091c4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80091c6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80091c8:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80091ca:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80091cc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80091ce:	f7fb fa3f 	bl	8004650 <HAL_RTC_Init>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d001      	beq.n	80091da <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80091d6:	f7fe f90e 	bl	80073f6 <Error_Handler>
  }

}
 80091da:	bd10      	pop	{r4, pc}
 80091dc:	20003fcc 	.word	0x20003fcc
 80091e0:	40002800 	.word	0x40002800

080091e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80091e4:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <HAL_RTC_MspInit+0x2c>)
 80091e6:	6802      	ldr	r2, [r0, #0]
{
 80091e8:	b082      	sub	sp, #8
  if(rtcHandle->Instance==RTC)
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d10e      	bne.n	800920c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80091ee:	2280      	movs	r2, #128	; 0x80
 80091f0:	4b08      	ldr	r3, [pc, #32]	; (8009214 <HAL_RTC_MspInit+0x30>)
 80091f2:	0212      	lsls	r2, r2, #8
 80091f4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80091f6:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80091f8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 80091fa:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80091fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091fe:	00c9      	lsls	r1, r1, #3
 8009200:	430a      	orrs	r2, r1
 8009202:	63da      	str	r2, [r3, #60]	; 0x3c
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	400b      	ands	r3, r1
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800920c:	b002      	add	sp, #8
 800920e:	4770      	bx	lr
 8009210:	40002800 	.word	0x40002800
 8009214:	40021000 	.word	0x40021000

08009218 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8009218:	4810      	ldr	r0, [pc, #64]	; (800925c <MX_SPI1_Init+0x44>)
 800921a:	4b11      	ldr	r3, [pc, #68]	; (8009260 <MX_SPI1_Init+0x48>)
{
 800921c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800921e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009220:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8009222:	22c0      	movs	r2, #192	; 0xc0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009228:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800922a:	0092      	lsls	r2, r2, #2
 800922c:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800922e:	3a01      	subs	r2, #1
 8009230:	3aff      	subs	r2, #255	; 0xff
 8009232:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8009234:	3afa      	subs	r2, #250	; 0xfa
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009236:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009238:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800923a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800923c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800923e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009240:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009242:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009244:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009246:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009248:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 800924a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800924c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800924e:	f7fb faa1 	bl	8004794 <HAL_SPI_Init>
 8009252:	2800      	cmp	r0, #0
 8009254:	d001      	beq.n	800925a <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 8009256:	f7fe f8ce 	bl	80073f6 <Error_Handler>
  }

}
 800925a:	bd10      	pop	{r4, pc}
 800925c:	20003ff8 	.word	0x20003ff8
 8009260:	40013000 	.word	0x40013000

08009264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009264:	b510      	push	{r4, lr}
 8009266:	0004      	movs	r4, r0
 8009268:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800926a:	2214      	movs	r2, #20
 800926c:	2100      	movs	r1, #0
 800926e:	a803      	add	r0, sp, #12
 8009270:	f000 fcb3 	bl	8009bda <memset>
  if(spiHandle->Instance==SPI1)
 8009274:	4b19      	ldr	r3, [pc, #100]	; (80092dc <HAL_SPI_MspInit+0x78>)
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d12c      	bne.n	80092d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800927c:	2080      	movs	r0, #128	; 0x80
 800927e:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <HAL_SPI_MspInit+0x7c>)
 8009280:	0140      	lsls	r0, r0, #5
 8009282:	6c19      	ldr	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009284:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009286:	4301      	orrs	r1, r0
 8009288:	6419      	str	r1, [r3, #64]	; 0x40
 800928a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800928c:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800928e:	2001      	movs	r0, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009290:	9200      	str	r2, [sp, #0]
 8009292:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009294:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009296:	4301      	orrs	r1, r0
 8009298:	6359      	str	r1, [r3, #52]	; 0x34
 800929a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800929c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800929e:	4002      	ands	r2, r0
 80092a0:	9201      	str	r2, [sp, #4]
 80092a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a6:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092a8:	4322      	orrs	r2, r4
 80092aa:	635a      	str	r2, [r3, #52]	; 0x34
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ae:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092b0:	4023      	ands	r3, r4
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80092b6:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80092ba:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092bc:	f7f9 fd7a 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80092c0:	2308      	movs	r3, #8
 80092c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c4:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092c6:	a903      	add	r1, sp, #12
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ca:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80092d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092d2:	f7f9 fd6f 	bl	8002db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80092d6:	b008      	add	sp, #32
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	40013000 	.word	0x40013000
 80092e0:	40021000 	.word	0x40021000
 80092e4:	50000400 	.word	0x50000400

080092e8 <ssd1306_WriteBufferByte>:
#if defined(SSD1306_USE_I2C)

uint8_t screenBuffer[(SSD1306_WIDTH * SSD1306_HEIGHT / 8)], bufferIndex = 0, txStep = 0, intStat = 0;


void ssd1306_WriteBufferByte(uint8_t buff[], uint8_t byte) {
 80092e8:	b510      	push	{r4, lr}
	buff[bufferIndex++] = byte;
 80092ea:	4a03      	ldr	r2, [pc, #12]	; (80092f8 <ssd1306_WriteBufferByte+0x10>)
 80092ec:	7813      	ldrb	r3, [r2, #0]
 80092ee:	1c5c      	adds	r4, r3, #1
 80092f0:	7014      	strb	r4, [r2, #0]
 80092f2:	54c1      	strb	r1, [r0, r3]
}
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	20000816 	.word	0x20000816

080092fc <ssd1306_SendBuffer>:

void ssd1306_SendBuffer(uint8_t memAdd, uint8_t buff[], uint32_t size) {
 80092fc:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, memAdd, 1, buff, size);
 80092fe:	b280      	uxth	r0, r0
 8009300:	b292      	uxth	r2, r2
 8009302:	9201      	str	r2, [sp, #4]
 8009304:	9100      	str	r1, [sp, #0]
 8009306:	0002      	movs	r2, r0
 8009308:	2301      	movs	r3, #1
 800930a:	2178      	movs	r1, #120	; 0x78
 800930c:	4803      	ldr	r0, [pc, #12]	; (800931c <ssd1306_SendBuffer+0x20>)
 800930e:	f7f9 ffbb 	bl	8003288 <HAL_I2C_Mem_Write_DMA>
	bufferIndex = 0;
 8009312:	2200      	movs	r2, #0
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <ssd1306_SendBuffer+0x24>)
 8009316:	701a      	strb	r2, [r3, #0]
}
 8009318:	bd07      	pop	{r0, r1, r2, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	20003b20 	.word	0x20003b20
 8009320:	20000816 	.word	0x20000816

08009324 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8009324:	1e42      	subs	r2, r0, #1
 8009326:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009328:	2282      	movs	r2, #130	; 0x82
 800932a:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800932c:	4903      	ldr	r1, [pc, #12]	; (800933c <ssd1306_Fill+0x18>)
 800932e:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009330:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8009332:	5458      	strb	r0, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009334:	3301      	adds	r3, #1
 8009336:	4293      	cmp	r3, r2
 8009338:	d1fb      	bne.n	8009332 <ssd1306_Fill+0xe>
    }
}
 800933a:	4770      	bx	lr
 800933c:	20000406 	.word	0x20000406

08009340 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(uint8_t step) {
 8009340:	0003      	movs	r3, r0
    intStat = 1;
 8009342:	2001      	movs	r0, #1
 8009344:	4a0d      	ldr	r2, [pc, #52]	; (800937c <ssd1306_UpdateScreen+0x3c>)
void ssd1306_UpdateScreen(uint8_t step) {
 8009346:	b510      	push	{r4, lr}
    intStat = 1;
 8009348:	7010      	strb	r0, [r2, #0]
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }*/


    if(step % 2){
 800934a:	4018      	ands	r0, r3
 800934c:	d00d      	beq.n	800936a <ssd1306_UpdateScreen+0x2a>
    	//memcpy(screenBuffer, &SSD1306_Buffer[SSD1306_WIDTH*((step+1)/2)], SSD1306_WIDTH);
    	ssd1306_SendBuffer(SSD1306_MEM_DAT, &SSD1306_Buffer[SSD1306_WIDTH*((step-1)/2)], SSD1306_WIDTH);
 800934e:	2282      	movs	r2, #130	; 0x82
 8009350:	2040      	movs	r0, #64	; 0x40
 8009352:	1e59      	subs	r1, r3, #1
 8009354:	1049      	asrs	r1, r1, #1
 8009356:	4351      	muls	r1, r2
 8009358:	4b09      	ldr	r3, [pc, #36]	; (8009380 <ssd1306_UpdateScreen+0x40>)
 800935a:	1859      	adds	r1, r3, r1
    }else{
    	screenBuffer[0] = 0xB0 + (step/2);
    	screenBuffer[1] = 0x00;
    	screenBuffer[2] = 0x10;
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 800935c:	f7ff ffce 	bl	80092fc <ssd1306_SendBuffer>
    }

   /* if(step == 0 && txStep == 0){
    	txStep = 1;
    }else */txStep++;
 8009360:	4a08      	ldr	r2, [pc, #32]	; (8009384 <ssd1306_UpdateScreen+0x44>)
 8009362:	7813      	ldrb	r3, [r2, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	7013      	strb	r3, [r2, #0]




    //ssd1306_SendBuffer(SSD1306_MEM_DAT, SSD1306_Buffer, ((SSD1306_WIDTH * SSD1306_HEIGHT) / 8));
}
 8009368:	bd10      	pop	{r4, pc}
    	screenBuffer[0] = 0xB0 + (step/2);
 800936a:	4907      	ldr	r1, [pc, #28]	; (8009388 <ssd1306_UpdateScreen+0x48>)
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	3b50      	subs	r3, #80	; 0x50
 8009370:	700b      	strb	r3, [r1, #0]
    	screenBuffer[2] = 0x10;
 8009372:	2310      	movs	r3, #16
    	screenBuffer[1] = 0x00;
 8009374:	7048      	strb	r0, [r1, #1]
    	screenBuffer[2] = 0x10;
 8009376:	708b      	strb	r3, [r1, #2]
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 8009378:	2203      	movs	r2, #3
 800937a:	e7ef      	b.n	800935c <ssd1306_UpdateScreen+0x1c>
 800937c:	20000817 	.word	0x20000817
 8009380:	20000406 	.word	0x20000406
 8009384:	20000818 	.word	0x20000818
 8009388:	2000405c 	.word	0x2000405c

0800938c <ssd1306_Init>:
void ssd1306_Init(void) {
 800938c:	b510      	push	{r4, lr}
    HAL_Delay(100);
 800938e:	2064      	movs	r0, #100	; 0x64
 8009390:	f7f9 f810 	bl	80023b4 <HAL_Delay>
    ssd1306_WriteBufferByte(screenBuffer, 0xAE); //display off
 8009394:	4c44      	ldr	r4, [pc, #272]	; (80094a8 <ssd1306_Init+0x11c>)
 8009396:	21ae      	movs	r1, #174	; 0xae
 8009398:	0020      	movs	r0, r4
 800939a:	f7ff ffa5 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //Set Memory Addressing Mode
 800939e:	2120      	movs	r1, #32
 80093a0:	0020      	movs	r0, r4
 80093a2:	f7ff ffa1 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80093a6:	2110      	movs	r1, #16
 80093a8:	0020      	movs	r0, r4
 80093aa:	f7ff ff9d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80093ae:	21b0      	movs	r1, #176	; 0xb0
 80093b0:	0020      	movs	r0, r4
 80093b2:	f7ff ff99 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xC8); //Set COM Output Scan Direction
 80093b6:	21c8      	movs	r1, #200	; 0xc8
 80093b8:	0020      	movs	r0, r4
 80093ba:	f7ff ff95 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //---set low column address
 80093be:	2100      	movs	r1, #0
 80093c0:	0020      	movs	r0, r4
 80093c2:	f7ff ff91 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); //---set high column address
 80093c6:	2110      	movs	r1, #16
 80093c8:	0020      	movs	r0, r4
 80093ca:	f7ff ff8d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x40); //--set start line address - CHECK
 80093ce:	2140      	movs	r1, #64	; 0x40
 80093d0:	0020      	movs	r0, r4
 80093d2:	f7ff ff89 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x81); //--set contrast control register - CHECK
 80093d6:	2181      	movs	r1, #129	; 0x81
 80093d8:	0020      	movs	r0, r4
 80093da:	f7ff ff85 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xFF);
 80093de:	21ff      	movs	r1, #255	; 0xff
 80093e0:	0020      	movs	r0, r4
 80093e2:	f7ff ff81 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA1); //--set segment re-map 0 to 127 - CHECK
 80093e6:	21a1      	movs	r1, #161	; 0xa1
 80093e8:	0020      	movs	r0, r4
 80093ea:	f7ff ff7d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA6); //--set normal color
 80093ee:	21a6      	movs	r1, #166	; 0xa6
 80093f0:	0020      	movs	r0, r4
 80093f2:	f7ff ff79 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80093f6:	21a8      	movs	r1, #168	; 0xa8
 80093f8:	0020      	movs	r0, r4
 80093fa:	f7ff ff75 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x3F); //
 80093fe:	213f      	movs	r1, #63	; 0x3f
 8009400:	0020      	movs	r0, r4
 8009402:	f7ff ff71 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8009406:	21a4      	movs	r1, #164	; 0xa4
 8009408:	0020      	movs	r0, r4
 800940a:	f7ff ff6d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD3); //-set display offset - CHECK
 800940e:	21d3      	movs	r1, #211	; 0xd3
 8009410:	0020      	movs	r0, r4
 8009412:	f7ff ff69 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //-not offset
 8009416:	2100      	movs	r1, #0
 8009418:	0020      	movs	r0, r4
 800941a:	f7ff ff65 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD5); //--set display clock divide ratio/oscillator frequency
 800941e:	21d5      	movs	r1, #213	; 0xd5
 8009420:	0020      	movs	r0, r4
 8009422:	f7ff ff61 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xF0); //--set divide ratio
 8009426:	21f0      	movs	r1, #240	; 0xf0
 8009428:	0020      	movs	r0, r4
 800942a:	f7ff ff5d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD9); //--set pre-charge period
 800942e:	21d9      	movs	r1, #217	; 0xd9
 8009430:	0020      	movs	r0, r4
 8009432:	f7ff ff59 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x34); //22
 8009436:	2134      	movs	r1, #52	; 0x34
 8009438:	0020      	movs	r0, r4
 800943a:	f7ff ff55 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDA); //--set com pins hardware configuration - CHECK
 800943e:	21da      	movs	r1, #218	; 0xda
 8009440:	0020      	movs	r0, r4
 8009442:	f7ff ff51 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x12);
 8009446:	2112      	movs	r1, #18
 8009448:	0020      	movs	r0, r4
 800944a:	f7ff ff4d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDB); //--set vcomh
 800944e:	21db      	movs	r1, #219	; 0xdb
 8009450:	0020      	movs	r0, r4
 8009452:	f7ff ff49 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //0x20,0.77xVcc
 8009456:	2120      	movs	r1, #32
 8009458:	0020      	movs	r0, r4
 800945a:	f7ff ff45 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x8D); //--set DC-DC enable
 800945e:	218d      	movs	r1, #141	; 0x8d
 8009460:	0020      	movs	r0, r4
 8009462:	f7ff ff41 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x14); //
 8009466:	2114      	movs	r1, #20
 8009468:	0020      	movs	r0, r4
 800946a:	f7ff ff3d 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xAF); //--turn on SSD1306 panel
 800946e:	21af      	movs	r1, #175	; 0xaf
 8009470:	0020      	movs	r0, r4
 8009472:	f7ff ff39 	bl	80092e8 <ssd1306_WriteBufferByte>
    ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, bufferIndex);
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <ssd1306_Init+0x120>)
 8009478:	0021      	movs	r1, r4
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	2000      	movs	r0, #0
 800947e:	f7ff ff3d 	bl	80092fc <ssd1306_SendBuffer>
    while(HAL_DMA_GetState(&hdma_i2c1_tx) == HAL_DMA_STATE_BUSY);
 8009482:	480b      	ldr	r0, [pc, #44]	; (80094b0 <ssd1306_Init+0x124>)
 8009484:	f7f9 fc92 	bl	8002dac <HAL_DMA_GetState>
 8009488:	2802      	cmp	r0, #2
 800948a:	d0fa      	beq.n	8009482 <ssd1306_Init+0xf6>
    ssd1306_Fill(Black);
 800948c:	2000      	movs	r0, #0
 800948e:	f7ff ff49 	bl	8009324 <ssd1306_Fill>
    ssd1306_UpdateScreen(0);
 8009492:	2000      	movs	r0, #0
 8009494:	f7ff ff54 	bl	8009340 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8009498:	2200      	movs	r2, #0
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <ssd1306_Init+0x128>)
 800949c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800949e:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80094a0:	3201      	adds	r2, #1
 80094a2:	715a      	strb	r2, [r3, #5]
}
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	2000405c 	.word	0x2000405c
 80094ac:	20000816 	.word	0x20000816
 80094b0:	20003ac4 	.word	0x20003ac4
 80094b4:	20000400 	.word	0x20000400

080094b8 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){

	if(hi2c->Instance == I2C1){
 80094b8:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <HAL_I2C_MemTxCpltCallback+0x28>)
 80094ba:	6802      	ldr	r2, [r0, #0]
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80094bc:	b510      	push	{r4, lr}
	if(hi2c->Instance == I2C1){
 80094be:	429a      	cmp	r2, r3
 80094c0:	d109      	bne.n	80094d6 <HAL_I2C_MemTxCpltCallback+0x1e>
		if(intStat == 0){
 80094c2:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <HAL_I2C_MemTxCpltCallback+0x2c>)

		}else if(intStat == 1){
 80094c4:	781a      	ldrb	r2, [r3, #0]
 80094c6:	2a01      	cmp	r2, #1
 80094c8:	d105      	bne.n	80094d6 <HAL_I2C_MemTxCpltCallback+0x1e>
			if(txStep < 16){
 80094ca:	4907      	ldr	r1, [pc, #28]	; (80094e8 <HAL_I2C_MemTxCpltCallback+0x30>)
 80094cc:	7808      	ldrb	r0, [r1, #0]
 80094ce:	280f      	cmp	r0, #15
 80094d0:	d802      	bhi.n	80094d8 <HAL_I2C_MemTxCpltCallback+0x20>
				ssd1306_UpdateScreen(txStep);
 80094d2:	f7ff ff35 	bl	8009340 <ssd1306_UpdateScreen>
		}

	}


}
 80094d6:	bd10      	pop	{r4, pc}
				txStep = 0;
 80094d8:	2200      	movs	r2, #0
 80094da:	700a      	strb	r2, [r1, #0]
				intStat = 0;
 80094dc:	701a      	strb	r2, [r3, #0]
}
 80094de:	e7fa      	b.n	80094d6 <HAL_I2C_MemTxCpltCallback+0x1e>
 80094e0:	40005400 	.word	0x40005400
 80094e4:	20000817 	.word	0x20000817
 80094e8:	20000818 	.word	0x20000818

080094ec <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80094ec:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80094ee:	2881      	cmp	r0, #129	; 0x81
 80094f0:	d815      	bhi.n	800951e <ssd1306_DrawPixel+0x32>
 80094f2:	293f      	cmp	r1, #63	; 0x3f
 80094f4:	d813      	bhi.n	800951e <ssd1306_DrawPixel+0x32>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <ssd1306_DrawPixel+0x40>)
 80094f8:	791b      	ldrb	r3, [r3, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <ssd1306_DrawPixel+0x18>
        color = (SSD1306_COLOR)!color;
 80094fe:	4253      	negs	r3, r2
 8009500:	415a      	adcs	r2, r3
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	2382      	movs	r3, #130	; 0x82
 8009506:	08cd      	lsrs	r5, r1, #3
    }

    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009508:	436b      	muls	r3, r5
 800950a:	1818      	adds	r0, r3, r0
 800950c:	2307      	movs	r3, #7
 800950e:	4c08      	ldr	r4, [pc, #32]	; (8009530 <ssd1306_DrawPixel+0x44>)
 8009510:	4019      	ands	r1, r3
    if(color == White) {
 8009512:	2a01      	cmp	r2, #1
 8009514:	d104      	bne.n	8009520 <ssd1306_DrawPixel+0x34>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009516:	408a      	lsls	r2, r1
 8009518:	5c23      	ldrb	r3, [r4, r0]
 800951a:	431a      	orrs	r2, r3
 800951c:	5422      	strb	r2, [r4, r0]
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 800951e:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8009520:	2201      	movs	r2, #1
 8009522:	408a      	lsls	r2, r1
 8009524:	5c23      	ldrb	r3, [r4, r0]
 8009526:	4393      	bics	r3, r2
 8009528:	5423      	strb	r3, [r4, r0]
 800952a:	e7f8      	b.n	800951e <ssd1306_DrawPixel+0x32>
 800952c:	20000400 	.word	0x20000400
 8009530:	20000406 	.word	0x20000406

08009534 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009536:	b08b      	sub	sp, #44	; 0x2c
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	b2cb      	uxtb	r3, r1
 800953c:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800953e:	4b27      	ldr	r3, [pc, #156]	; (80095dc <ssd1306_WriteChar+0xa8>)
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009540:	9108      	str	r1, [sp, #32]
 8009542:	9209      	str	r2, [sp, #36]	; 0x24
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8009544:	9903      	ldr	r1, [sp, #12]
 8009546:	881a      	ldrh	r2, [r3, #0]
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009548:	0006      	movs	r6, r0
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800954a:	9202      	str	r2, [sp, #8]
 800954c:	1852      	adds	r2, r2, r1
 800954e:	2a81      	cmp	r2, #129	; 0x81
 8009550:	dc41      	bgt.n	80095d6 <ssd1306_WriteChar+0xa2>
 8009552:	aa08      	add	r2, sp, #32
 8009554:	7852      	ldrb	r2, [r2, #1]
 8009556:	9204      	str	r2, [sp, #16]
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8009558:	885c      	ldrh	r4, [r3, #2]
 800955a:	18a3      	adds	r3, r4, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800955c:	2b3f      	cmp	r3, #63	; 0x3f
 800955e:	dc3a      	bgt.n	80095d6 <ssd1306_WriteChar+0xa2>
        return 0;
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8009560:	0033      	movs	r3, r6
 8009562:	3b20      	subs	r3, #32
 8009564:	435a      	muls	r2, r3
 8009566:	2300      	movs	r3, #0
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	b2e4      	uxtb	r4, r4
 800956c:	9301      	str	r3, [sp, #4]
    for(i = 0; i < Font.FontHeight; i++) {
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	9a04      	ldr	r2, [sp, #16]
 8009572:	4293      	cmp	r3, r2
 8009574:	d308      	bcc.n	8009588 <ssd1306_WriteChar+0x54>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8009576:	9a03      	ldr	r2, [sp, #12]
 8009578:	9b02      	ldr	r3, [sp, #8]
 800957a:	4694      	mov	ip, r2
 800957c:	4a17      	ldr	r2, [pc, #92]	; (80095dc <ssd1306_WriteChar+0xa8>)
 800957e:	4463      	add	r3, ip
 8009580:	8013      	strh	r3, [r2, #0]

    // Return written char for validation
    return ch;
}
 8009582:	0030      	movs	r0, r6
 8009584:	b00b      	add	sp, #44	; 0x2c
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8009588:	9a07      	ldr	r2, [sp, #28]
 800958a:	9b01      	ldr	r3, [sp, #4]
        for(j = 0; j < Font.FontWidth; j++) {
 800958c:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800958e:	189b      	adds	r3, r3, r2
 8009590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	5a9b      	ldrh	r3, [r3, r2]
 8009596:	9306      	str	r3, [sp, #24]
 8009598:	466b      	mov	r3, sp
 800959a:	7a1d      	ldrb	r5, [r3, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	429f      	cmp	r7, r3
 80095a0:	d305      	bcc.n	80095ae <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	3401      	adds	r4, #1
 80095a6:	3301      	adds	r3, #1
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	b2e4      	uxtb	r4, r4
 80095ac:	e7df      	b.n	800956e <ssd1306_WriteChar+0x3a>
            if((b << j) & 0x8000)  {
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	2280      	movs	r2, #128	; 0x80
 80095b2:	40bb      	lsls	r3, r7
 80095b4:	0212      	lsls	r2, r2, #8
 80095b6:	4213      	tst	r3, r2
 80095b8:	d008      	beq.n	80095cc <ssd1306_WriteChar+0x98>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80095ba:	9a05      	ldr	r2, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80095bc:	0028      	movs	r0, r5
 80095be:	0021      	movs	r1, r4
 80095c0:	3501      	adds	r5, #1
 80095c2:	f7ff ff93 	bl	80094ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80095c6:	3701      	adds	r7, #1
 80095c8:	b2ed      	uxtb	r5, r5
 80095ca:	e7e7      	b.n	800959c <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80095cc:	9a05      	ldr	r2, [sp, #20]
 80095ce:	4253      	negs	r3, r2
 80095d0:	415a      	adcs	r2, r3
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	e7f2      	b.n	80095bc <ssd1306_WriteChar+0x88>
        return 0;
 80095d6:	2600      	movs	r6, #0
 80095d8:	e7d3      	b.n	8009582 <ssd1306_WriteChar+0x4e>
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	20000400 	.word	0x20000400

080095e0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80095e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095e2:	0004      	movs	r4, r0
 80095e4:	001d      	movs	r5, r3
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 80095ea:	7820      	ldrb	r0, [r4, #0]
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d100      	bne.n	80095f2 <ssd1306_WriteString+0x12>
        str++;
    }

    // Everything ok
    return *str;
}
 80095f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80095f2:	002b      	movs	r3, r5
 80095f4:	9900      	ldr	r1, [sp, #0]
 80095f6:	9a01      	ldr	r2, [sp, #4]
 80095f8:	f7ff ff9c 	bl	8009534 <ssd1306_WriteChar>
 80095fc:	0003      	movs	r3, r0
 80095fe:	7820      	ldrb	r0, [r4, #0]
 8009600:	4283      	cmp	r3, r0
 8009602:	d1f5      	bne.n	80095f0 <ssd1306_WriteString+0x10>
        str++;
 8009604:	3401      	adds	r4, #1
 8009606:	e7f0      	b.n	80095ea <ssd1306_WriteString+0xa>

08009608 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8009608:	4b01      	ldr	r3, [pc, #4]	; (8009610 <ssd1306_SetCursor+0x8>)
 800960a:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 800960c:	8059      	strh	r1, [r3, #2]
}
 800960e:	4770      	bx	lr
 8009610:	20000400 	.word	0x20000400

08009614 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009614:	2001      	movs	r0, #1
 8009616:	4b0d      	ldr	r3, [pc, #52]	; (800964c <HAL_MspInit+0x38>)
{
 8009618:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800961a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800961c:	4301      	orrs	r1, r0
 800961e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8009620:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8009624:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009626:	4002      	ands	r2, r0
 8009628:	9200      	str	r2, [sp, #0]
 800962a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800962c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800962e:	430a      	orrs	r2, r1
 8009630:	63da      	str	r2, [r3, #60]	; 0x3c
 8009632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8009634:	4a06      	ldr	r2, [pc, #24]	; (8009650 <HAL_MspInit+0x3c>)
 8009636:	400b      	ands	r3, r1
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	2380      	movs	r3, #128	; 0x80
 800963e:	6811      	ldr	r1, [r2, #0]
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	430b      	orrs	r3, r1
 8009644:	6013      	str	r3, [r2, #0]
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD2_STROBE);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	40021000 	.word	0x40021000
 8009650:	40010000 	.word	0x40010000

08009654 <NMI_Handler>:
 8009654:	4770      	bx	lr

08009656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009656:	e7fe      	b.n	8009656 <HardFault_Handler>

08009658 <SVC_Handler>:
 8009658:	4770      	bx	lr

0800965a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800965a:	4770      	bx	lr

0800965c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800965c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800965e:	f7f8 fe97 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009662:	bd10      	pop	{r4, pc}

08009664 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8009664:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009666:	2010      	movs	r0, #16
 8009668:	f7f9 fc5a 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800966c:	2080      	movs	r0, #128	; 0x80
 800966e:	01c0      	lsls	r0, r0, #7
 8009670:	f7f9 fc56 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009674:	bd10      	pop	{r4, pc}
	...

08009678 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009678:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800967a:	4802      	ldr	r0, [pc, #8]	; (8009684 <DMA1_Channel1_IRQHandler+0xc>)
 800967c:	f7f9 fb42 	bl	8002d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009680:	bd10      	pop	{r4, pc}
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	20003ac4 	.word	0x20003ac4

08009688 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8009688:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800968a:	4802      	ldr	r0, [pc, #8]	; (8009694 <ADC1_COMP_IRQHandler+0xc>)
 800968c:	f7f8 ffe4 	bl	8002658 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8009690:	bd10      	pop	{r4, pc}
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	2000082c 	.word	0x2000082c

08009698 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8009698:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800969a:	4802      	ldr	r0, [pc, #8]	; (80096a4 <TIM1_CC_IRQHandler+0xc>)
 800969c:	f7fb f906 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	200044ec 	.word	0x200044ec

080096a8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	f7ff fff5 	bl	8009698 <TIM1_CC_IRQHandler>
 80096ae:	bd10      	pop	{r4, pc}

080096b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80096b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80096b2:	4802      	ldr	r0, [pc, #8]	; (80096bc <TIM2_IRQHandler+0xc>)
 80096b4:	f7fb f8fa 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80096b8:	bd10      	pop	{r4, pc}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	2000452c 	.word	0x2000452c

080096c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80096c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80096c2:	4802      	ldr	r0, [pc, #8]	; (80096cc <TIM3_IRQHandler+0xc>)
 80096c4:	f7fb f8f2 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	2000446c 	.word	0x2000446c

080096d0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80096d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80096d2:	4802      	ldr	r0, [pc, #8]	; (80096dc <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 80096d4:	f7fb f8ea 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	200044ac 	.word	0x200044ac

080096e0 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80096e0:	4806      	ldr	r0, [pc, #24]	; (80096fc <I2C1_IRQHandler+0x1c>)
{
 80096e2:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80096e4:	6803      	ldr	r3, [r0, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	23e0      	movs	r3, #224	; 0xe0
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	421a      	tst	r2, r3
 80096ee:	d002      	beq.n	80096f6 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80096f0:	f7fa fa50 	bl	8003b94 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80096f4:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80096f6:	f7f9 fe6d 	bl	80033d4 <HAL_I2C_EV_IRQHandler>
}
 80096fa:	e7fb      	b.n	80096f4 <I2C1_IRQHandler+0x14>
 80096fc:	20003b20 	.word	0x20003b20

08009700 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009700:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009702:	4802      	ldr	r0, [pc, #8]	; (800970c <USART2_IRQHandler+0xc>)
 8009704:	f7fb fdc4 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009708:	bd10      	pop	{r4, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	2000456c 	.word	0x2000456c

08009710 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <_sbrk+0x2c>)
{
 8009712:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8009714:	6819      	ldr	r1, [r3, #0]
{
 8009716:	0002      	movs	r2, r0
	if (heap_end == 0)
 8009718:	2900      	cmp	r1, #0
 800971a:	d101      	bne.n	8009720 <_sbrk+0x10>
		heap_end = &end;
 800971c:	4908      	ldr	r1, [pc, #32]	; (8009740 <_sbrk+0x30>)
 800971e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8009720:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8009722:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8009724:	1882      	adds	r2, r0, r2
 8009726:	428a      	cmp	r2, r1
 8009728:	d906      	bls.n	8009738 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800972a:	f000 fa0f 	bl	8009b4c <__errno>
 800972e:	230c      	movs	r3, #12
 8009730:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009732:	2001      	movs	r0, #1
 8009734:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8009736:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8009738:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800973a:	e7fc      	b.n	8009736 <_sbrk+0x26>
 800973c:	2000081c 	.word	0x2000081c
 8009740:	200045fc 	.word	0x200045fc

08009744 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009744:	2280      	movs	r2, #128	; 0x80
 8009746:	4b02      	ldr	r3, [pc, #8]	; (8009750 <SystemInit+0xc>)
 8009748:	0512      	lsls	r2, r2, #20
 800974a:	609a      	str	r2, [r3, #8]
#endif
}
 800974c:	4770      	bx	lr
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	e000ed00 	.word	0xe000ed00

08009754 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009754:	b530      	push	{r4, r5, lr}
 8009756:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009758:	2210      	movs	r2, #16
 800975a:	2100      	movs	r1, #0
 800975c:	a803      	add	r0, sp, #12
 800975e:	f000 fa3c 	bl	8009bda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009762:	220c      	movs	r2, #12
 8009764:	2100      	movs	r1, #0
 8009766:	4668      	mov	r0, sp
 8009768:	f000 fa37 	bl	8009bda <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800976c:	2234      	movs	r2, #52	; 0x34
 800976e:	2100      	movs	r1, #0
 8009770:	a807      	add	r0, sp, #28
 8009772:	f000 fa32 	bl	8009bda <memset>

  htim1.Instance = TIM1;
 8009776:	4c1b      	ldr	r4, [pc, #108]	; (80097e4 <MX_TIM1_Init+0x90>)
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <MX_TIM1_Init+0x94>)
  htim1.Init.Prescaler = 63999;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10;
 800977a:	220a      	movs	r2, #10
  htim1.Instance = TIM1;
 800977c:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 63999;
 800977e:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <MX_TIM1_Init+0x98>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009780:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 63999;
 8009782:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009784:	2300      	movs	r3, #0
  htim1.Init.Period = 10;
 8009786:	60e2      	str	r2, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009788:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800978a:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800978c:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800978e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009790:	f7fb f994 	bl	8004abc <HAL_TIM_Base_Init>
 8009794:	2800      	cmp	r0, #0
 8009796:	d001      	beq.n	800979c <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 8009798:	f7fd fe2d 	bl	80073f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800979c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800979e:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097a0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80097a2:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097a4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80097a6:	f7fb f9b1 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d001      	beq.n	80097b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80097ae:	f7fd fe22 	bl	80073f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097b2:	2500      	movs	r5, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80097b4:	4669      	mov	r1, sp
 80097b6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097b8:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80097ba:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097bc:	9502      	str	r5, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80097be:	f7fb fa3b 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 80097c2:	42a8      	cmp	r0, r5
 80097c4:	d001      	beq.n	80097ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80097c6:	f7fd fe16 	bl	80073f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80097ca:	a907      	add	r1, sp, #28
 80097cc:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80097ce:	950e      	str	r5, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80097d0:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80097d2:	f7fb fa5b 	bl	8004c8c <HAL_TIMEx_ConfigBreakDeadTime>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d001      	beq.n	80097de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80097da:	f7fd fe0c 	bl	80073f6 <Error_Handler>
  }

}
 80097de:	b015      	add	sp, #84	; 0x54
 80097e0:	bd30      	pop	{r4, r5, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	200044ec 	.word	0x200044ec
 80097e8:	40012c00 	.word	0x40012c00
 80097ec:	0000f9ff 	.word	0x0000f9ff

080097f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80097f0:	b510      	push	{r4, lr}
 80097f2:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80097f4:	2210      	movs	r2, #16
 80097f6:	2100      	movs	r1, #0
 80097f8:	a804      	add	r0, sp, #16
 80097fa:	f000 f9ee 	bl	8009bda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097fe:	220c      	movs	r2, #12
 8009800:	2100      	movs	r1, #0
 8009802:	a801      	add	r0, sp, #4
 8009804:	f000 f9e9 	bl	8009bda <memset>

  htim2.Instance = TIM2;
 8009808:	2380      	movs	r3, #128	; 0x80
 800980a:	4c15      	ldr	r4, [pc, #84]	; (8009860 <MX_TIM2_Init+0x70>)
 800980c:	05db      	lsls	r3, r3, #23
 800980e:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 319;
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	33ff      	adds	r3, #255	; 0xff
 8009814:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009816:	2300      	movs	r3, #0
  htim2.Init.Period = 13200;
 8009818:	4a12      	ldr	r2, [pc, #72]	; (8009864 <MX_TIM2_Init+0x74>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800981a:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800981c:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 13200;
 800981e:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009820:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009822:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009824:	f7fb f94a 	bl	8004abc <HAL_TIM_Base_Init>
 8009828:	2800      	cmp	r0, #0
 800982a:	d001      	beq.n	8009830 <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 800982c:	f7fd fde3 	bl	80073f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009830:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009832:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009834:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009836:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009838:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800983a:	f7fb f967 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 800983e:	2800      	cmp	r0, #0
 8009840:	d001      	beq.n	8009846 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009842:	f7fd fdd8 	bl	80073f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009846:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009848:	a901      	add	r1, sp, #4
 800984a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800984c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800984e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009850:	f7fb f9f2 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8009854:	2800      	cmp	r0, #0
 8009856:	d001      	beq.n	800985c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009858:	f7fd fdcd 	bl	80073f6 <Error_Handler>
  }

}
 800985c:	b008      	add	sp, #32
 800985e:	bd10      	pop	{r4, pc}
 8009860:	2000452c 	.word	0x2000452c
 8009864:	00003390 	.word	0x00003390

08009868 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009868:	b510      	push	{r4, lr}
 800986a:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800986c:	2210      	movs	r2, #16
 800986e:	2100      	movs	r1, #0
 8009870:	a804      	add	r0, sp, #16
 8009872:	f000 f9b2 	bl	8009bda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009876:	220c      	movs	r2, #12
 8009878:	2100      	movs	r1, #0
 800987a:	a801      	add	r0, sp, #4
 800987c:	f000 f9ad 	bl	8009bda <memset>

  htim3.Instance = TIM3;
 8009880:	4c15      	ldr	r4, [pc, #84]	; (80098d8 <MX_TIM3_Init+0x70>)
 8009882:	4b16      	ldr	r3, [pc, #88]	; (80098dc <MX_TIM3_Init+0x74>)
  htim3.Init.Prescaler = 31999;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 8009884:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 8009886:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 31999;
 8009888:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <MX_TIM3_Init+0x78>)
  htim3.Init.Period = 1000;
 800988a:	0092      	lsls	r2, r2, #2
  htim3.Init.Prescaler = 31999;
 800988c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800988e:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009890:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009892:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 1000;
 8009894:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009896:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009898:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800989a:	f7fb f90f 	bl	8004abc <HAL_TIM_Base_Init>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d001      	beq.n	80098a6 <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 80098a2:	f7fd fda8 	bl	80073f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098a6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80098a8:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098aa:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80098ac:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098ae:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80098b0:	f7fb f92c 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d001      	beq.n	80098bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80098b8:	f7fd fd9d 	bl	80073f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098bc:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80098be:	a901      	add	r1, sp, #4
 80098c0:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098c2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098c4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80098c6:	f7fb f9b7 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d001      	beq.n	80098d2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80098ce:	f7fd fd92 	bl	80073f6 <Error_Handler>
  }

}
 80098d2:	b008      	add	sp, #32
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	2000446c 	.word	0x2000446c
 80098dc:	40000400 	.word	0x40000400
 80098e0:	00007cff 	.word	0x00007cff

080098e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80098e4:	b530      	push	{r4, r5, lr}
 80098e6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098e8:	220c      	movs	r2, #12
 80098ea:	2100      	movs	r1, #0
 80098ec:	a801      	add	r0, sp, #4
 80098ee:	f000 f974 	bl	8009bda <memset>

  htim6.Instance = TIM6;
 80098f2:	4c0e      	ldr	r4, [pc, #56]	; (800992c <MX_TIM6_Init+0x48>)
 80098f4:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <MX_TIM6_Init+0x4c>)
  htim6.Init.Prescaler = 6399;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098f6:	2500      	movs	r5, #0
  htim6.Instance = TIM6;
 80098f8:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 6399;
 80098fa:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <MX_TIM6_Init+0x50>)
  htim6.Init.Period = 100;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80098fc:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 6399;
 80098fe:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 100;
 8009900:	2364      	movs	r3, #100	; 0x64
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009902:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 100;
 8009904:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009906:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009908:	f7fb f8d8 	bl	8004abc <HAL_TIM_Base_Init>
 800990c:	42a8      	cmp	r0, r5
 800990e:	d001      	beq.n	8009914 <MX_TIM6_Init+0x30>
  {
    Error_Handler();
 8009910:	f7fd fd71 	bl	80073f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009914:	a901      	add	r1, sp, #4
 8009916:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009918:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800991a:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800991c:	f7fb f98c 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8009920:	2800      	cmp	r0, #0
 8009922:	d001      	beq.n	8009928 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8009924:	f7fd fd67 	bl	80073f6 <Error_Handler>
  }

}
 8009928:	b005      	add	sp, #20
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	200044ac 	.word	0x200044ac
 8009930:	40001000 	.word	0x40001000
 8009934:	000018ff 	.word	0x000018ff

08009938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009938:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 800993a:	6803      	ldr	r3, [r0, #0]
 800993c:	4a2c      	ldr	r2, [pc, #176]	; (80099f0 <HAL_TIM_Base_MspInit+0xb8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d11b      	bne.n	800997a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009942:	2080      	movs	r0, #128	; 0x80
 8009944:	4a2b      	ldr	r2, [pc, #172]	; (80099f4 <HAL_TIM_Base_MspInit+0xbc>)
 8009946:	0100      	lsls	r0, r0, #4
 8009948:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800994a:	4301      	orrs	r1, r0
 800994c:	6411      	str	r1, [r2, #64]	; 0x40
 800994e:	6c13      	ldr	r3, [r2, #64]	; 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8009950:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009952:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8009954:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009956:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8009958:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 800995a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800995c:	f7f9 f84a 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8009960:	200d      	movs	r0, #13
 8009962:	f7f9 f877 	bl	8002a54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8009966:	2200      	movs	r2, #0
 8009968:	200e      	movs	r0, #14
 800996a:	0011      	movs	r1, r2
 800996c:	f7f9 f842 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009970:	200e      	movs	r0, #14
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8009972:	f7f9 f86f 	bl	8002a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8009976:	b005      	add	sp, #20
 8009978:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM2)
 800997a:	2280      	movs	r2, #128	; 0x80
 800997c:	05d2      	lsls	r2, r2, #23
 800997e:	4293      	cmp	r3, r2
 8009980:	d10f      	bne.n	80099a2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009982:	2001      	movs	r0, #1
 8009984:	4a1b      	ldr	r2, [pc, #108]	; (80099f4 <HAL_TIM_Base_MspInit+0xbc>)
 8009986:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009988:	4301      	orrs	r1, r0
 800998a:	63d1      	str	r1, [r2, #60]	; 0x3c
 800998c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800998e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009990:	4003      	ands	r3, r0
 8009992:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009994:	300e      	adds	r0, #14
 8009996:	0011      	movs	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009998:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800999a:	f7f9 f82b 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800999e:	200f      	movs	r0, #15
 80099a0:	e7e7      	b.n	8009972 <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM3)
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <HAL_TIM_Base_MspInit+0xc0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d10f      	bne.n	80099c8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80099a8:	2002      	movs	r0, #2
 80099aa:	4a12      	ldr	r2, [pc, #72]	; (80099f4 <HAL_TIM_Base_MspInit+0xbc>)
 80099ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80099ae:	4301      	orrs	r1, r0
 80099b0:	63d1      	str	r1, [r2, #60]	; 0x3c
 80099b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80099b4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80099b6:	4003      	ands	r3, r0
 80099b8:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80099ba:	300e      	adds	r0, #14
 80099bc:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80099be:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80099c0:	f7f9 f818 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80099c4:	2010      	movs	r0, #16
 80099c6:	e7d4      	b.n	8009972 <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM6)
 80099c8:	4a0c      	ldr	r2, [pc, #48]	; (80099fc <HAL_TIM_Base_MspInit+0xc4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d1d3      	bne.n	8009976 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80099ce:	2010      	movs	r0, #16
 80099d0:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <HAL_TIM_Base_MspInit+0xbc>)
 80099d2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80099d4:	4301      	orrs	r1, r0
 80099d6:	63d1      	str	r1, [r2, #60]	; 0x3c
 80099d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80099da:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80099dc:	4003      	ands	r3, r0
 80099de:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80099e0:	3001      	adds	r0, #1
 80099e2:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80099e4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80099e6:	f7f9 f805 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80099ea:	2011      	movs	r0, #17
 80099ec:	e7c1      	b.n	8009972 <HAL_TIM_Base_MspInit+0x3a>
 80099ee:	46c0      	nop			; (mov r8, r8)
 80099f0:	40012c00 	.word	0x40012c00
 80099f4:	40021000 	.word	0x40021000
 80099f8:	40000400 	.word	0x40000400
 80099fc:	40001000 	.word	0x40001000

08009a00 <MX_UCPD1_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8009a00:	2080      	movs	r0, #128	; 0x80
 8009a02:	4a06      	ldr	r2, [pc, #24]	; (8009a1c <MX_UCPD1_Init+0x1c>)
 8009a04:	0480      	lsls	r0, r0, #18
 8009a06:	6bd1      	ldr	r1, [r2, #60]	; 0x3c

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8009a08:	b082      	sub	sp, #8
 8009a0a:	4301      	orrs	r1, r0
 8009a0c:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8009a0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009a10:	4003      	ands	r3, r0
 8009a12:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009a14:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);

}
 8009a16:	b002      	add	sp, #8
 8009a18:	4770      	bx	lr
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	40021000 	.word	0x40021000

08009a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009a20:	b510      	push	{r4, lr}

  huart2.Instance = USART2;
 8009a22:	4b18      	ldr	r3, [pc, #96]	; (8009a84 <MX_USART2_UART_Init+0x64>)
 8009a24:	4c18      	ldr	r4, [pc, #96]	; (8009a88 <MX_USART2_UART_Init+0x68>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a26:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8009a28:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8009a2a:	23e1      	movs	r3, #225	; 0xe1
 8009a2c:	025b      	lsls	r3, r3, #9
 8009a2e:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a30:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a32:	0020      	movs	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a34:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a36:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a38:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a3a:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a3c:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a3e:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a40:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009a42:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a44:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a46:	f7fc f9dd 	bl	8005e04 <HAL_UART_Init>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d001      	beq.n	8009a52 <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
 8009a4e:	f7fd fcd2 	bl	80073f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a52:	2100      	movs	r1, #0
 8009a54:	0020      	movs	r0, r4
 8009a56:	f7fc fa68 	bl	8005f2a <HAL_UARTEx_SetTxFifoThreshold>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d001      	beq.n	8009a62 <MX_USART2_UART_Init+0x42>
  {
    Error_Handler();
 8009a5e:	f7fd fcca 	bl	80073f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a62:	2100      	movs	r1, #0
 8009a64:	0020      	movs	r0, r4
 8009a66:	f7fc fa81 	bl	8005f6c <HAL_UARTEx_SetRxFifoThreshold>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d001      	beq.n	8009a72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009a6e:	f7fd fcc2 	bl	80073f6 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8009a72:	0020      	movs	r0, r4
 8009a74:	f7fc fa3b 	bl	8005eee <HAL_UARTEx_EnableFifoMode>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d001      	beq.n	8009a80 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8009a7c:	f7fd fcbb 	bl	80073f6 <Error_Handler>
  }

}
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	40004400 	.word	0x40004400
 8009a88:	2000456c 	.word	0x2000456c

08009a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	0004      	movs	r4, r0
 8009a90:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a92:	2214      	movs	r2, #20
 8009a94:	2100      	movs	r1, #0
 8009a96:	a803      	add	r0, sp, #12
 8009a98:	f000 f89f 	bl	8009bda <memset>
  if(uartHandle->Instance==USART2)
 8009a9c:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <HAL_UART_MspInit+0x64>)
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d123      	bne.n	8009aec <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009aa4:	2080      	movs	r0, #128	; 0x80
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <HAL_UART_MspInit+0x68>)
 8009aa8:	0280      	lsls	r0, r0, #10
 8009aaa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009aac:	4301      	orrs	r1, r0
 8009aae:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ab2:	4002      	ands	r2, r0
 8009ab4:	9201      	str	r2, [sp, #4]
 8009ab6:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab8:	2201      	movs	r2, #1
 8009aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009abc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009abe:	4311      	orrs	r1, r2
 8009ac0:	6359      	str	r1, [r3, #52]	; 0x34
 8009ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ac4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	9302      	str	r3, [sp, #8]
 8009aca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009acc:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ace:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009ad0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad2:	3b0a      	subs	r3, #10
 8009ad4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009ad6:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ad8:	f7f9 f96c 	bl	8002db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009adc:	2200      	movs	r2, #0
 8009ade:	201c      	movs	r0, #28
 8009ae0:	0011      	movs	r1, r2
 8009ae2:	f7f8 ff87 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009ae6:	201c      	movs	r0, #28
 8009ae8:	f7f8 ffb4 	bl	8002a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009aec:	b008      	add	sp, #32
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	40004400 	.word	0x40004400
 8009af4:	40021000 	.word	0x40021000

08009af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009af8:	480d      	ldr	r0, [pc, #52]	; (8009b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009afa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009afc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009afe:	e003      	b.n	8009b08 <LoopCopyDataInit>

08009b00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009b00:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8009b02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009b04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009b06:	3104      	adds	r1, #4

08009b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009b08:	480b      	ldr	r0, [pc, #44]	; (8009b38 <LoopForever+0xa>)
  ldr r3, =_edata
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <LoopForever+0xe>)
  adds r2, r0, r1
 8009b0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009b0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009b10:	d3f6      	bcc.n	8009b00 <CopyDataInit>
  ldr r2, =_sbss
 8009b12:	4a0b      	ldr	r2, [pc, #44]	; (8009b40 <LoopForever+0x12>)
  b LoopFillZerobss
 8009b14:	e002      	b.n	8009b1c <LoopFillZerobss>

08009b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009b16:	2300      	movs	r3, #0
  str  r3, [r2]
 8009b18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b1a:	3204      	adds	r2, #4

08009b1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <LoopForever+0x16>)
  cmp r2, r3
 8009b1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009b20:	d3f9      	bcc.n	8009b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009b22:	f7ff fe0f 	bl	8009744 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8009b26:	f000 f817 	bl	8009b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009b2a:	f7fd f969 	bl	8006e00 <main>

08009b2e <LoopForever>:

LoopForever:
    b LoopForever
 8009b2e:	e7fe      	b.n	8009b2e <LoopForever>
  ldr   r0, =_estack
 8009b30:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8009b34:	0800dca8 	.word	0x0800dca8
  ldr r0, =_sdata
 8009b38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009b3c:	200003e0 	.word	0x200003e0
  ldr r2, =_sbss
 8009b40:	200003e0 	.word	0x200003e0
  ldr r3, = _ebss
 8009b44:	200045fc 	.word	0x200045fc

08009b48 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009b48:	e7fe      	b.n	8009b48 <CEC_IRQHandler>
	...

08009b4c <__errno>:
 8009b4c:	4b01      	ldr	r3, [pc, #4]	; (8009b54 <__errno+0x8>)
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	4770      	bx	lr
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	2000020c 	.word	0x2000020c

08009b58 <__libc_init_array>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	4d0c      	ldr	r5, [pc, #48]	; (8009b90 <__libc_init_array+0x38>)
 8009b5e:	4c0d      	ldr	r4, [pc, #52]	; (8009b94 <__libc_init_array+0x3c>)
 8009b60:	1b64      	subs	r4, r4, r5
 8009b62:	10a4      	asrs	r4, r4, #2
 8009b64:	42a6      	cmp	r6, r4
 8009b66:	d109      	bne.n	8009b7c <__libc_init_array+0x24>
 8009b68:	2600      	movs	r6, #0
 8009b6a:	f002 fa53 	bl	800c014 <_init>
 8009b6e:	4d0a      	ldr	r5, [pc, #40]	; (8009b98 <__libc_init_array+0x40>)
 8009b70:	4c0a      	ldr	r4, [pc, #40]	; (8009b9c <__libc_init_array+0x44>)
 8009b72:	1b64      	subs	r4, r4, r5
 8009b74:	10a4      	asrs	r4, r4, #2
 8009b76:	42a6      	cmp	r6, r4
 8009b78:	d105      	bne.n	8009b86 <__libc_init_array+0x2e>
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	00b3      	lsls	r3, r6, #2
 8009b7e:	58eb      	ldr	r3, [r5, r3]
 8009b80:	4798      	blx	r3
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7ee      	b.n	8009b64 <__libc_init_array+0xc>
 8009b86:	00b3      	lsls	r3, r6, #2
 8009b88:	58eb      	ldr	r3, [r5, r3]
 8009b8a:	4798      	blx	r3
 8009b8c:	3601      	adds	r6, #1
 8009b8e:	e7f2      	b.n	8009b76 <__libc_init_array+0x1e>
 8009b90:	0800dca0 	.word	0x0800dca0
 8009b94:	0800dca0 	.word	0x0800dca0
 8009b98:	0800dca0 	.word	0x0800dca0
 8009b9c:	0800dca4 	.word	0x0800dca4

08009ba0 <malloc>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <malloc+0x10>)
 8009ba4:	0001      	movs	r1, r0
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	f000 f86a 	bl	8009c80 <_malloc_r>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	2000020c 	.word	0x2000020c

08009bb4 <free>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <free+0x10>)
 8009bb8:	0001      	movs	r1, r0
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	f000 f816 	bl	8009bec <_free_r>
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	2000020c 	.word	0x2000020c

08009bc8 <memcpy>:
 8009bc8:	2300      	movs	r3, #0
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d100      	bne.n	8009bd2 <memcpy+0xa>
 8009bd0:	bd10      	pop	{r4, pc}
 8009bd2:	5ccc      	ldrb	r4, [r1, r3]
 8009bd4:	54c4      	strb	r4, [r0, r3]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	e7f8      	b.n	8009bcc <memcpy+0x4>

08009bda <memset>:
 8009bda:	0003      	movs	r3, r0
 8009bdc:	1882      	adds	r2, r0, r2
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d100      	bne.n	8009be4 <memset+0xa>
 8009be2:	4770      	bx	lr
 8009be4:	7019      	strb	r1, [r3, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	e7f9      	b.n	8009bde <memset+0x4>
	...

08009bec <_free_r>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	0005      	movs	r5, r0
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	d010      	beq.n	8009c16 <_free_r+0x2a>
 8009bf4:	1f0c      	subs	r4, r1, #4
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da00      	bge.n	8009bfe <_free_r+0x12>
 8009bfc:	18e4      	adds	r4, r4, r3
 8009bfe:	0028      	movs	r0, r5
 8009c00:	f000 f97e 	bl	8009f00 <__malloc_lock>
 8009c04:	4a1d      	ldr	r2, [pc, #116]	; (8009c7c <_free_r+0x90>)
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d105      	bne.n	8009c18 <_free_r+0x2c>
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	6014      	str	r4, [r2, #0]
 8009c10:	0028      	movs	r0, r5
 8009c12:	f000 f976 	bl	8009f02 <__malloc_unlock>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	d909      	bls.n	8009c30 <_free_r+0x44>
 8009c1c:	6821      	ldr	r1, [r4, #0]
 8009c1e:	1860      	adds	r0, r4, r1
 8009c20:	4283      	cmp	r3, r0
 8009c22:	d1f3      	bne.n	8009c0c <_free_r+0x20>
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	1841      	adds	r1, r0, r1
 8009c2a:	6021      	str	r1, [r4, #0]
 8009c2c:	e7ee      	b.n	8009c0c <_free_r+0x20>
 8009c2e:	0013      	movs	r3, r2
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	d001      	beq.n	8009c3a <_free_r+0x4e>
 8009c36:	42a2      	cmp	r2, r4
 8009c38:	d9f9      	bls.n	8009c2e <_free_r+0x42>
 8009c3a:	6819      	ldr	r1, [r3, #0]
 8009c3c:	1858      	adds	r0, r3, r1
 8009c3e:	42a0      	cmp	r0, r4
 8009c40:	d10b      	bne.n	8009c5a <_free_r+0x6e>
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	1809      	adds	r1, r1, r0
 8009c46:	1858      	adds	r0, r3, r1
 8009c48:	6019      	str	r1, [r3, #0]
 8009c4a:	4282      	cmp	r2, r0
 8009c4c:	d1e0      	bne.n	8009c10 <_free_r+0x24>
 8009c4e:	6810      	ldr	r0, [r2, #0]
 8009c50:	6852      	ldr	r2, [r2, #4]
 8009c52:	1841      	adds	r1, r0, r1
 8009c54:	6019      	str	r1, [r3, #0]
 8009c56:	605a      	str	r2, [r3, #4]
 8009c58:	e7da      	b.n	8009c10 <_free_r+0x24>
 8009c5a:	42a0      	cmp	r0, r4
 8009c5c:	d902      	bls.n	8009c64 <_free_r+0x78>
 8009c5e:	230c      	movs	r3, #12
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	e7d5      	b.n	8009c10 <_free_r+0x24>
 8009c64:	6821      	ldr	r1, [r4, #0]
 8009c66:	1860      	adds	r0, r4, r1
 8009c68:	4282      	cmp	r2, r0
 8009c6a:	d103      	bne.n	8009c74 <_free_r+0x88>
 8009c6c:	6810      	ldr	r0, [r2, #0]
 8009c6e:	6852      	ldr	r2, [r2, #4]
 8009c70:	1841      	adds	r1, r0, r1
 8009c72:	6021      	str	r1, [r4, #0]
 8009c74:	6062      	str	r2, [r4, #4]
 8009c76:	605c      	str	r4, [r3, #4]
 8009c78:	e7ca      	b.n	8009c10 <_free_r+0x24>
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	20000820 	.word	0x20000820

08009c80 <_malloc_r>:
 8009c80:	2303      	movs	r3, #3
 8009c82:	b570      	push	{r4, r5, r6, lr}
 8009c84:	1ccd      	adds	r5, r1, #3
 8009c86:	439d      	bics	r5, r3
 8009c88:	3508      	adds	r5, #8
 8009c8a:	0006      	movs	r6, r0
 8009c8c:	2d0c      	cmp	r5, #12
 8009c8e:	d21e      	bcs.n	8009cce <_malloc_r+0x4e>
 8009c90:	250c      	movs	r5, #12
 8009c92:	42a9      	cmp	r1, r5
 8009c94:	d81d      	bhi.n	8009cd2 <_malloc_r+0x52>
 8009c96:	0030      	movs	r0, r6
 8009c98:	f000 f932 	bl	8009f00 <__malloc_lock>
 8009c9c:	4a25      	ldr	r2, [pc, #148]	; (8009d34 <_malloc_r+0xb4>)
 8009c9e:	6814      	ldr	r4, [r2, #0]
 8009ca0:	0021      	movs	r1, r4
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d119      	bne.n	8009cda <_malloc_r+0x5a>
 8009ca6:	4c24      	ldr	r4, [pc, #144]	; (8009d38 <_malloc_r+0xb8>)
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d103      	bne.n	8009cb6 <_malloc_r+0x36>
 8009cae:	0030      	movs	r0, r6
 8009cb0:	f000 f844 	bl	8009d3c <_sbrk_r>
 8009cb4:	6020      	str	r0, [r4, #0]
 8009cb6:	0029      	movs	r1, r5
 8009cb8:	0030      	movs	r0, r6
 8009cba:	f000 f83f 	bl	8009d3c <_sbrk_r>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d12c      	bne.n	8009d1c <_malloc_r+0x9c>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	0030      	movs	r0, r6
 8009cc6:	6033      	str	r3, [r6, #0]
 8009cc8:	f000 f91b 	bl	8009f02 <__malloc_unlock>
 8009ccc:	e003      	b.n	8009cd6 <_malloc_r+0x56>
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	dadf      	bge.n	8009c92 <_malloc_r+0x12>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	6033      	str	r3, [r6, #0]
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	bd70      	pop	{r4, r5, r6, pc}
 8009cda:	680b      	ldr	r3, [r1, #0]
 8009cdc:	1b5b      	subs	r3, r3, r5
 8009cde:	d41a      	bmi.n	8009d16 <_malloc_r+0x96>
 8009ce0:	2b0b      	cmp	r3, #11
 8009ce2:	d903      	bls.n	8009cec <_malloc_r+0x6c>
 8009ce4:	600b      	str	r3, [r1, #0]
 8009ce6:	18cc      	adds	r4, r1, r3
 8009ce8:	6025      	str	r5, [r4, #0]
 8009cea:	e003      	b.n	8009cf4 <_malloc_r+0x74>
 8009cec:	428c      	cmp	r4, r1
 8009cee:	d10e      	bne.n	8009d0e <_malloc_r+0x8e>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	0030      	movs	r0, r6
 8009cf6:	f000 f904 	bl	8009f02 <__malloc_unlock>
 8009cfa:	0020      	movs	r0, r4
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	300b      	adds	r0, #11
 8009d00:	1d23      	adds	r3, r4, #4
 8009d02:	4390      	bics	r0, r2
 8009d04:	1ac3      	subs	r3, r0, r3
 8009d06:	d0e7      	beq.n	8009cd8 <_malloc_r+0x58>
 8009d08:	425a      	negs	r2, r3
 8009d0a:	50e2      	str	r2, [r4, r3]
 8009d0c:	e7e4      	b.n	8009cd8 <_malloc_r+0x58>
 8009d0e:	684b      	ldr	r3, [r1, #4]
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	000c      	movs	r4, r1
 8009d14:	e7ee      	b.n	8009cf4 <_malloc_r+0x74>
 8009d16:	000c      	movs	r4, r1
 8009d18:	6849      	ldr	r1, [r1, #4]
 8009d1a:	e7c2      	b.n	8009ca2 <_malloc_r+0x22>
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	1cc4      	adds	r4, r0, #3
 8009d20:	439c      	bics	r4, r3
 8009d22:	42a0      	cmp	r0, r4
 8009d24:	d0e0      	beq.n	8009ce8 <_malloc_r+0x68>
 8009d26:	1a21      	subs	r1, r4, r0
 8009d28:	0030      	movs	r0, r6
 8009d2a:	f000 f807 	bl	8009d3c <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d1da      	bne.n	8009ce8 <_malloc_r+0x68>
 8009d32:	e7c6      	b.n	8009cc2 <_malloc_r+0x42>
 8009d34:	20000820 	.word	0x20000820
 8009d38:	20000824 	.word	0x20000824

08009d3c <_sbrk_r>:
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	b570      	push	{r4, r5, r6, lr}
 8009d40:	4c06      	ldr	r4, [pc, #24]	; (8009d5c <_sbrk_r+0x20>)
 8009d42:	0005      	movs	r5, r0
 8009d44:	0008      	movs	r0, r1
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	f7ff fce2 	bl	8009710 <_sbrk>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d103      	bne.n	8009d58 <_sbrk_r+0x1c>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d000      	beq.n	8009d58 <_sbrk_r+0x1c>
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	200045f8 	.word	0x200045f8

08009d60 <siprintf>:
 8009d60:	b40e      	push	{r1, r2, r3}
 8009d62:	b510      	push	{r4, lr}
 8009d64:	b09d      	sub	sp, #116	; 0x74
 8009d66:	a902      	add	r1, sp, #8
 8009d68:	9002      	str	r0, [sp, #8]
 8009d6a:	6108      	str	r0, [r1, #16]
 8009d6c:	480b      	ldr	r0, [pc, #44]	; (8009d9c <siprintf+0x3c>)
 8009d6e:	2482      	movs	r4, #130	; 0x82
 8009d70:	6088      	str	r0, [r1, #8]
 8009d72:	6148      	str	r0, [r1, #20]
 8009d74:	2001      	movs	r0, #1
 8009d76:	4240      	negs	r0, r0
 8009d78:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d7a:	81c8      	strh	r0, [r1, #14]
 8009d7c:	4808      	ldr	r0, [pc, #32]	; (8009da0 <siprintf+0x40>)
 8009d7e:	cb04      	ldmia	r3!, {r2}
 8009d80:	00a4      	lsls	r4, r4, #2
 8009d82:	6800      	ldr	r0, [r0, #0]
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	818c      	strh	r4, [r1, #12]
 8009d88:	f000 f91e 	bl	8009fc8 <_svfiprintf_r>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9a02      	ldr	r2, [sp, #8]
 8009d90:	7013      	strb	r3, [r2, #0]
 8009d92:	b01d      	add	sp, #116	; 0x74
 8009d94:	bc10      	pop	{r4}
 8009d96:	bc08      	pop	{r3}
 8009d98:	b003      	add	sp, #12
 8009d9a:	4718      	bx	r3
 8009d9c:	7fffffff 	.word	0x7fffffff
 8009da0:	2000020c 	.word	0x2000020c

08009da4 <siscanf>:
 8009da4:	b40e      	push	{r1, r2, r3}
 8009da6:	2381      	movs	r3, #129	; 0x81
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	b09d      	sub	sp, #116	; 0x74
 8009dac:	ac02      	add	r4, sp, #8
 8009dae:	ad21      	add	r5, sp, #132	; 0x84
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	cd40      	ldmia	r5!, {r6}
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	9002      	str	r0, [sp, #8]
 8009db8:	9006      	str	r0, [sp, #24]
 8009dba:	f7f6 f9ad 	bl	8000118 <strlen>
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <siscanf+0x48>)
 8009dc0:	6060      	str	r0, [r4, #4]
 8009dc2:	6263      	str	r3, [r4, #36]	; 0x24
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6160      	str	r0, [r4, #20]
 8009dc8:	4809      	ldr	r0, [pc, #36]	; (8009df0 <siscanf+0x4c>)
 8009dca:	6363      	str	r3, [r4, #52]	; 0x34
 8009dcc:	64a3      	str	r3, [r4, #72]	; 0x48
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	81e3      	strh	r3, [r4, #14]
 8009dd2:	0032      	movs	r2, r6
 8009dd4:	002b      	movs	r3, r5
 8009dd6:	0021      	movs	r1, r4
 8009dd8:	6800      	ldr	r0, [r0, #0]
 8009dda:	9501      	str	r5, [sp, #4]
 8009ddc:	f000 fa54 	bl	800a288 <__ssvfiscanf_r>
 8009de0:	b01d      	add	sp, #116	; 0x74
 8009de2:	bc70      	pop	{r4, r5, r6}
 8009de4:	bc08      	pop	{r3}
 8009de6:	b003      	add	sp, #12
 8009de8:	4718      	bx	r3
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	08009df5 	.word	0x08009df5
 8009df0:	2000020c 	.word	0x2000020c

08009df4 <__seofread>:
 8009df4:	2000      	movs	r0, #0
 8009df6:	4770      	bx	lr

08009df8 <strchr>:
 8009df8:	b2c9      	uxtb	r1, r1
 8009dfa:	7803      	ldrb	r3, [r0, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <strchr+0x12>
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d100      	bne.n	8009e06 <strchr+0xe>
 8009e04:	4770      	bx	lr
 8009e06:	3001      	adds	r0, #1
 8009e08:	e7f7      	b.n	8009dfa <strchr+0x2>
 8009e0a:	424b      	negs	r3, r1
 8009e0c:	4159      	adcs	r1, r3
 8009e0e:	4249      	negs	r1, r1
 8009e10:	4008      	ands	r0, r1
 8009e12:	e7f7      	b.n	8009e04 <strchr+0xc>

08009e14 <strcpy>:
 8009e14:	1c03      	adds	r3, r0, #0
 8009e16:	780a      	ldrb	r2, [r1, #0]
 8009e18:	3101      	adds	r1, #1
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	d1f9      	bne.n	8009e16 <strcpy+0x2>
 8009e22:	4770      	bx	lr

08009e24 <strstr>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	0002      	movs	r2, r0
 8009e28:	7800      	ldrb	r0, [r0, #0]
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d104      	bne.n	8009e38 <strstr+0x14>
 8009e2e:	7809      	ldrb	r1, [r1, #0]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d00d      	beq.n	8009e50 <strstr+0x2c>
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	3201      	adds	r2, #1
 8009e38:	7810      	ldrb	r0, [r2, #0]
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d0fa      	beq.n	8009e34 <strstr+0x10>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	5cc8      	ldrb	r0, [r1, r3]
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d004      	beq.n	8009e50 <strstr+0x2c>
 8009e46:	5cd4      	ldrb	r4, [r2, r3]
 8009e48:	4284      	cmp	r4, r0
 8009e4a:	d1f4      	bne.n	8009e36 <strstr+0x12>
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	e7f7      	b.n	8009e40 <strstr+0x1c>
 8009e50:	0010      	movs	r0, r2
 8009e52:	e7ef      	b.n	8009e34 <strstr+0x10>

08009e54 <strtok>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <strtok+0x4c>)
 8009e58:	0006      	movs	r6, r0
 8009e5a:	681d      	ldr	r5, [r3, #0]
 8009e5c:	000f      	movs	r7, r1
 8009e5e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009e60:	2c00      	cmp	r4, #0
 8009e62:	d116      	bne.n	8009e92 <strtok+0x3e>
 8009e64:	2050      	movs	r0, #80	; 0x50
 8009e66:	f7ff fe9b 	bl	8009ba0 <malloc>
 8009e6a:	65a8      	str	r0, [r5, #88]	; 0x58
 8009e6c:	6004      	str	r4, [r0, #0]
 8009e6e:	6044      	str	r4, [r0, #4]
 8009e70:	6084      	str	r4, [r0, #8]
 8009e72:	60c4      	str	r4, [r0, #12]
 8009e74:	6104      	str	r4, [r0, #16]
 8009e76:	6144      	str	r4, [r0, #20]
 8009e78:	6184      	str	r4, [r0, #24]
 8009e7a:	6284      	str	r4, [r0, #40]	; 0x28
 8009e7c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8009e7e:	6304      	str	r4, [r0, #48]	; 0x30
 8009e80:	6344      	str	r4, [r0, #52]	; 0x34
 8009e82:	6384      	str	r4, [r0, #56]	; 0x38
 8009e84:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009e86:	6404      	str	r4, [r0, #64]	; 0x40
 8009e88:	6444      	str	r4, [r0, #68]	; 0x44
 8009e8a:	6484      	str	r4, [r0, #72]	; 0x48
 8009e8c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8009e8e:	7704      	strb	r4, [r0, #28]
 8009e90:	6244      	str	r4, [r0, #36]	; 0x24
 8009e92:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009e94:	0039      	movs	r1, r7
 8009e96:	0030      	movs	r0, r6
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f000 f803 	bl	8009ea4 <__strtok_r>
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea0:	2000020c 	.word	0x2000020c

08009ea4 <__strtok_r>:
 8009ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d104      	bne.n	8009eb4 <__strtok_r+0x10>
 8009eaa:	6810      	ldr	r0, [r2, #0]
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d101      	bne.n	8009eb4 <__strtok_r+0x10>
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	000e      	movs	r6, r1
 8009eb6:	7805      	ldrb	r5, [r0, #0]
 8009eb8:	1c44      	adds	r4, r0, #1
 8009eba:	7837      	ldrb	r7, [r6, #0]
 8009ebc:	2f00      	cmp	r7, #0
 8009ebe:	d104      	bne.n	8009eca <__strtok_r+0x26>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	d110      	bne.n	8009ee6 <__strtok_r+0x42>
 8009ec4:	6015      	str	r5, [r2, #0]
 8009ec6:	0028      	movs	r0, r5
 8009ec8:	e7f2      	b.n	8009eb0 <__strtok_r+0xc>
 8009eca:	3601      	adds	r6, #1
 8009ecc:	42bd      	cmp	r5, r7
 8009ece:	d1f4      	bne.n	8009eba <__strtok_r+0x16>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1ee      	bne.n	8009eb2 <__strtok_r+0xe>
 8009ed4:	6014      	str	r4, [r2, #0]
 8009ed6:	7003      	strb	r3, [r0, #0]
 8009ed8:	e7ea      	b.n	8009eb0 <__strtok_r+0xc>
 8009eda:	0033      	movs	r3, r6
 8009edc:	e00e      	b.n	8009efc <__strtok_r+0x58>
 8009ede:	3501      	adds	r5, #1
 8009ee0:	001c      	movs	r4, r3
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	d102      	bne.n	8009eec <__strtok_r+0x48>
 8009ee6:	000d      	movs	r5, r1
 8009ee8:	7826      	ldrb	r6, [r4, #0]
 8009eea:	1c63      	adds	r3, r4, #1
 8009eec:	782f      	ldrb	r7, [r5, #0]
 8009eee:	42be      	cmp	r6, r7
 8009ef0:	d1f5      	bne.n	8009ede <__strtok_r+0x3a>
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d0f1      	beq.n	8009eda <__strtok_r+0x36>
 8009ef6:	2400      	movs	r4, #0
 8009ef8:	1e59      	subs	r1, r3, #1
 8009efa:	700c      	strb	r4, [r1, #0]
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	e7d7      	b.n	8009eb0 <__strtok_r+0xc>

08009f00 <__malloc_lock>:
 8009f00:	4770      	bx	lr

08009f02 <__malloc_unlock>:
 8009f02:	4770      	bx	lr

08009f04 <__ssputs_r>:
 8009f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f06:	688e      	ldr	r6, [r1, #8]
 8009f08:	b085      	sub	sp, #20
 8009f0a:	0007      	movs	r7, r0
 8009f0c:	000c      	movs	r4, r1
 8009f0e:	9203      	str	r2, [sp, #12]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	429e      	cmp	r6, r3
 8009f14:	d839      	bhi.n	8009f8a <__ssputs_r+0x86>
 8009f16:	2390      	movs	r3, #144	; 0x90
 8009f18:	898a      	ldrh	r2, [r1, #12]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	421a      	tst	r2, r3
 8009f1e:	d034      	beq.n	8009f8a <__ssputs_r+0x86>
 8009f20:	2503      	movs	r5, #3
 8009f22:	6909      	ldr	r1, [r1, #16]
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	9302      	str	r3, [sp, #8]
 8009f2a:	6963      	ldr	r3, [r4, #20]
 8009f2c:	9802      	ldr	r0, [sp, #8]
 8009f2e:	435d      	muls	r5, r3
 8009f30:	0feb      	lsrs	r3, r5, #31
 8009f32:	195d      	adds	r5, r3, r5
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	106d      	asrs	r5, r5, #1
 8009f38:	3301      	adds	r3, #1
 8009f3a:	181b      	adds	r3, r3, r0
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	d900      	bls.n	8009f42 <__ssputs_r+0x3e>
 8009f40:	001d      	movs	r5, r3
 8009f42:	0553      	lsls	r3, r2, #21
 8009f44:	d532      	bpl.n	8009fac <__ssputs_r+0xa8>
 8009f46:	0029      	movs	r1, r5
 8009f48:	0038      	movs	r0, r7
 8009f4a:	f7ff fe99 	bl	8009c80 <_malloc_r>
 8009f4e:	1e06      	subs	r6, r0, #0
 8009f50:	d109      	bne.n	8009f66 <__ssputs_r+0x62>
 8009f52:	230c      	movs	r3, #12
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	2340      	movs	r3, #64	; 0x40
 8009f58:	2001      	movs	r0, #1
 8009f5a:	89a2      	ldrh	r2, [r4, #12]
 8009f5c:	4240      	negs	r0, r0
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	b005      	add	sp, #20
 8009f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f66:	9a02      	ldr	r2, [sp, #8]
 8009f68:	6921      	ldr	r1, [r4, #16]
 8009f6a:	f7ff fe2d 	bl	8009bc8 <memcpy>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <__ssputs_r+0xc0>)
 8009f72:	401a      	ands	r2, r3
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	4313      	orrs	r3, r2
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	9b02      	ldr	r3, [sp, #8]
 8009f7c:	6126      	str	r6, [r4, #16]
 8009f7e:	18f6      	adds	r6, r6, r3
 8009f80:	6026      	str	r6, [r4, #0]
 8009f82:	6165      	str	r5, [r4, #20]
 8009f84:	9e01      	ldr	r6, [sp, #4]
 8009f86:	1aed      	subs	r5, r5, r3
 8009f88:	60a5      	str	r5, [r4, #8]
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	42b3      	cmp	r3, r6
 8009f8e:	d200      	bcs.n	8009f92 <__ssputs_r+0x8e>
 8009f90:	001e      	movs	r6, r3
 8009f92:	0032      	movs	r2, r6
 8009f94:	9903      	ldr	r1, [sp, #12]
 8009f96:	6820      	ldr	r0, [r4, #0]
 8009f98:	f000 ffb5 	bl	800af06 <memmove>
 8009f9c:	68a3      	ldr	r3, [r4, #8]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	1b9b      	subs	r3, r3, r6
 8009fa2:	60a3      	str	r3, [r4, #8]
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	199e      	adds	r6, r3, r6
 8009fa8:	6026      	str	r6, [r4, #0]
 8009faa:	e7da      	b.n	8009f62 <__ssputs_r+0x5e>
 8009fac:	002a      	movs	r2, r5
 8009fae:	0038      	movs	r0, r7
 8009fb0:	f000 ffbb 	bl	800af2a <_realloc_r>
 8009fb4:	1e06      	subs	r6, r0, #0
 8009fb6:	d1e0      	bne.n	8009f7a <__ssputs_r+0x76>
 8009fb8:	6921      	ldr	r1, [r4, #16]
 8009fba:	0038      	movs	r0, r7
 8009fbc:	f7ff fe16 	bl	8009bec <_free_r>
 8009fc0:	e7c7      	b.n	8009f52 <__ssputs_r+0x4e>
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	fffffb7f 	.word	0xfffffb7f

08009fc8 <_svfiprintf_r>:
 8009fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fca:	b09f      	sub	sp, #124	; 0x7c
 8009fcc:	9002      	str	r0, [sp, #8]
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	898b      	ldrh	r3, [r1, #12]
 8009fd2:	000f      	movs	r7, r1
 8009fd4:	0016      	movs	r6, r2
 8009fd6:	061b      	lsls	r3, r3, #24
 8009fd8:	d511      	bpl.n	8009ffe <_svfiprintf_r+0x36>
 8009fda:	690b      	ldr	r3, [r1, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10e      	bne.n	8009ffe <_svfiprintf_r+0x36>
 8009fe0:	2140      	movs	r1, #64	; 0x40
 8009fe2:	f7ff fe4d 	bl	8009c80 <_malloc_r>
 8009fe6:	6038      	str	r0, [r7, #0]
 8009fe8:	6138      	str	r0, [r7, #16]
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d105      	bne.n	8009ffa <_svfiprintf_r+0x32>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	9a02      	ldr	r2, [sp, #8]
 8009ff2:	3801      	subs	r0, #1
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	b01f      	add	sp, #124	; 0x7c
 8009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	2300      	movs	r3, #0
 800a000:	ad06      	add	r5, sp, #24
 800a002:	616b      	str	r3, [r5, #20]
 800a004:	3320      	adds	r3, #32
 800a006:	766b      	strb	r3, [r5, #25]
 800a008:	3310      	adds	r3, #16
 800a00a:	76ab      	strb	r3, [r5, #26]
 800a00c:	0034      	movs	r4, r6
 800a00e:	7823      	ldrb	r3, [r4, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d147      	bne.n	800a0a4 <_svfiprintf_r+0xdc>
 800a014:	1ba3      	subs	r3, r4, r6
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	d00d      	beq.n	800a036 <_svfiprintf_r+0x6e>
 800a01a:	1ba3      	subs	r3, r4, r6
 800a01c:	0032      	movs	r2, r6
 800a01e:	0039      	movs	r1, r7
 800a020:	9802      	ldr	r0, [sp, #8]
 800a022:	f7ff ff6f 	bl	8009f04 <__ssputs_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d100      	bne.n	800a02c <_svfiprintf_r+0x64>
 800a02a:	e0b5      	b.n	800a198 <_svfiprintf_r+0x1d0>
 800a02c:	696a      	ldr	r2, [r5, #20]
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	4694      	mov	ip, r2
 800a032:	4463      	add	r3, ip
 800a034:	616b      	str	r3, [r5, #20]
 800a036:	7823      	ldrb	r3, [r4, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d100      	bne.n	800a03e <_svfiprintf_r+0x76>
 800a03c:	e0ac      	b.n	800a198 <_svfiprintf_r+0x1d0>
 800a03e:	2201      	movs	r2, #1
 800a040:	2300      	movs	r3, #0
 800a042:	4252      	negs	r2, r2
 800a044:	606a      	str	r2, [r5, #4]
 800a046:	a902      	add	r1, sp, #8
 800a048:	3254      	adds	r2, #84	; 0x54
 800a04a:	1852      	adds	r2, r2, r1
 800a04c:	3401      	adds	r4, #1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	60eb      	str	r3, [r5, #12]
 800a052:	60ab      	str	r3, [r5, #8]
 800a054:	7013      	strb	r3, [r2, #0]
 800a056:	65ab      	str	r3, [r5, #88]	; 0x58
 800a058:	4e58      	ldr	r6, [pc, #352]	; (800a1bc <_svfiprintf_r+0x1f4>)
 800a05a:	2205      	movs	r2, #5
 800a05c:	7821      	ldrb	r1, [r4, #0]
 800a05e:	0030      	movs	r0, r6
 800a060:	f000 ff46 	bl	800aef0 <memchr>
 800a064:	1c62      	adds	r2, r4, #1
 800a066:	2800      	cmp	r0, #0
 800a068:	d120      	bne.n	800a0ac <_svfiprintf_r+0xe4>
 800a06a:	6829      	ldr	r1, [r5, #0]
 800a06c:	06cb      	lsls	r3, r1, #27
 800a06e:	d504      	bpl.n	800a07a <_svfiprintf_r+0xb2>
 800a070:	2353      	movs	r3, #83	; 0x53
 800a072:	ae02      	add	r6, sp, #8
 800a074:	3020      	adds	r0, #32
 800a076:	199b      	adds	r3, r3, r6
 800a078:	7018      	strb	r0, [r3, #0]
 800a07a:	070b      	lsls	r3, r1, #28
 800a07c:	d504      	bpl.n	800a088 <_svfiprintf_r+0xc0>
 800a07e:	2353      	movs	r3, #83	; 0x53
 800a080:	202b      	movs	r0, #43	; 0x2b
 800a082:	ae02      	add	r6, sp, #8
 800a084:	199b      	adds	r3, r3, r6
 800a086:	7018      	strb	r0, [r3, #0]
 800a088:	7823      	ldrb	r3, [r4, #0]
 800a08a:	2b2a      	cmp	r3, #42	; 0x2a
 800a08c:	d016      	beq.n	800a0bc <_svfiprintf_r+0xf4>
 800a08e:	2000      	movs	r0, #0
 800a090:	210a      	movs	r1, #10
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	7822      	ldrb	r2, [r4, #0]
 800a096:	3a30      	subs	r2, #48	; 0x30
 800a098:	2a09      	cmp	r2, #9
 800a09a:	d955      	bls.n	800a148 <_svfiprintf_r+0x180>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d015      	beq.n	800a0cc <_svfiprintf_r+0x104>
 800a0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a2:	e013      	b.n	800a0cc <_svfiprintf_r+0x104>
 800a0a4:	2b25      	cmp	r3, #37	; 0x25
 800a0a6:	d0b5      	beq.n	800a014 <_svfiprintf_r+0x4c>
 800a0a8:	3401      	adds	r4, #1
 800a0aa:	e7b0      	b.n	800a00e <_svfiprintf_r+0x46>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	1b80      	subs	r0, r0, r6
 800a0b0:	4083      	lsls	r3, r0
 800a0b2:	6829      	ldr	r1, [r5, #0]
 800a0b4:	0014      	movs	r4, r2
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	e7cd      	b.n	800a058 <_svfiprintf_r+0x90>
 800a0bc:	9b05      	ldr	r3, [sp, #20]
 800a0be:	1d18      	adds	r0, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	9005      	str	r0, [sp, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db39      	blt.n	800a13c <_svfiprintf_r+0x174>
 800a0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ca:	0014      	movs	r4, r2
 800a0cc:	7823      	ldrb	r3, [r4, #0]
 800a0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d0:	d10b      	bne.n	800a0ea <_svfiprintf_r+0x122>
 800a0d2:	7863      	ldrb	r3, [r4, #1]
 800a0d4:	1c62      	adds	r2, r4, #1
 800a0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d8:	d13e      	bne.n	800a158 <_svfiprintf_r+0x190>
 800a0da:	9b05      	ldr	r3, [sp, #20]
 800a0dc:	3402      	adds	r4, #2
 800a0de:	1d1a      	adds	r2, r3, #4
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	9205      	str	r2, [sp, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	db34      	blt.n	800a152 <_svfiprintf_r+0x18a>
 800a0e8:	9307      	str	r3, [sp, #28]
 800a0ea:	4e35      	ldr	r6, [pc, #212]	; (800a1c0 <_svfiprintf_r+0x1f8>)
 800a0ec:	7821      	ldrb	r1, [r4, #0]
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	0030      	movs	r0, r6
 800a0f2:	f000 fefd 	bl	800aef0 <memchr>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d006      	beq.n	800a108 <_svfiprintf_r+0x140>
 800a0fa:	2340      	movs	r3, #64	; 0x40
 800a0fc:	1b80      	subs	r0, r0, r6
 800a0fe:	4083      	lsls	r3, r0
 800a100:	682a      	ldr	r2, [r5, #0]
 800a102:	3401      	adds	r4, #1
 800a104:	4313      	orrs	r3, r2
 800a106:	602b      	str	r3, [r5, #0]
 800a108:	7821      	ldrb	r1, [r4, #0]
 800a10a:	2206      	movs	r2, #6
 800a10c:	482d      	ldr	r0, [pc, #180]	; (800a1c4 <_svfiprintf_r+0x1fc>)
 800a10e:	1c66      	adds	r6, r4, #1
 800a110:	7629      	strb	r1, [r5, #24]
 800a112:	f000 feed 	bl	800aef0 <memchr>
 800a116:	2800      	cmp	r0, #0
 800a118:	d046      	beq.n	800a1a8 <_svfiprintf_r+0x1e0>
 800a11a:	4b2b      	ldr	r3, [pc, #172]	; (800a1c8 <_svfiprintf_r+0x200>)
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d12f      	bne.n	800a180 <_svfiprintf_r+0x1b8>
 800a120:	6829      	ldr	r1, [r5, #0]
 800a122:	9b05      	ldr	r3, [sp, #20]
 800a124:	2207      	movs	r2, #7
 800a126:	05c9      	lsls	r1, r1, #23
 800a128:	d528      	bpl.n	800a17c <_svfiprintf_r+0x1b4>
 800a12a:	189b      	adds	r3, r3, r2
 800a12c:	4393      	bics	r3, r2
 800a12e:	3308      	adds	r3, #8
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	696b      	ldr	r3, [r5, #20]
 800a134:	9a03      	ldr	r2, [sp, #12]
 800a136:	189b      	adds	r3, r3, r2
 800a138:	616b      	str	r3, [r5, #20]
 800a13a:	e767      	b.n	800a00c <_svfiprintf_r+0x44>
 800a13c:	425b      	negs	r3, r3
 800a13e:	60eb      	str	r3, [r5, #12]
 800a140:	2302      	movs	r3, #2
 800a142:	430b      	orrs	r3, r1
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	e7c0      	b.n	800a0ca <_svfiprintf_r+0x102>
 800a148:	434b      	muls	r3, r1
 800a14a:	3401      	adds	r4, #1
 800a14c:	189b      	adds	r3, r3, r2
 800a14e:	2001      	movs	r0, #1
 800a150:	e7a0      	b.n	800a094 <_svfiprintf_r+0xcc>
 800a152:	2301      	movs	r3, #1
 800a154:	425b      	negs	r3, r3
 800a156:	e7c7      	b.n	800a0e8 <_svfiprintf_r+0x120>
 800a158:	2300      	movs	r3, #0
 800a15a:	0014      	movs	r4, r2
 800a15c:	200a      	movs	r0, #10
 800a15e:	001a      	movs	r2, r3
 800a160:	606b      	str	r3, [r5, #4]
 800a162:	7821      	ldrb	r1, [r4, #0]
 800a164:	3930      	subs	r1, #48	; 0x30
 800a166:	2909      	cmp	r1, #9
 800a168:	d903      	bls.n	800a172 <_svfiprintf_r+0x1aa>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0bd      	beq.n	800a0ea <_svfiprintf_r+0x122>
 800a16e:	9207      	str	r2, [sp, #28]
 800a170:	e7bb      	b.n	800a0ea <_svfiprintf_r+0x122>
 800a172:	4342      	muls	r2, r0
 800a174:	3401      	adds	r4, #1
 800a176:	1852      	adds	r2, r2, r1
 800a178:	2301      	movs	r3, #1
 800a17a:	e7f2      	b.n	800a162 <_svfiprintf_r+0x19a>
 800a17c:	3307      	adds	r3, #7
 800a17e:	e7d5      	b.n	800a12c <_svfiprintf_r+0x164>
 800a180:	ab05      	add	r3, sp, #20
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	003a      	movs	r2, r7
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <_svfiprintf_r+0x204>)
 800a188:	0029      	movs	r1, r5
 800a18a:	9802      	ldr	r0, [sp, #8]
 800a18c:	e000      	b.n	800a190 <_svfiprintf_r+0x1c8>
 800a18e:	bf00      	nop
 800a190:	9003      	str	r0, [sp, #12]
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	d1cc      	bne.n	800a132 <_svfiprintf_r+0x16a>
 800a198:	89bb      	ldrh	r3, [r7, #12]
 800a19a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a19c:	065b      	lsls	r3, r3, #25
 800a19e:	d400      	bmi.n	800a1a2 <_svfiprintf_r+0x1da>
 800a1a0:	e729      	b.n	8009ff6 <_svfiprintf_r+0x2e>
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	4240      	negs	r0, r0
 800a1a6:	e726      	b.n	8009ff6 <_svfiprintf_r+0x2e>
 800a1a8:	ab05      	add	r3, sp, #20
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	003a      	movs	r2, r7
 800a1ae:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <_svfiprintf_r+0x204>)
 800a1b0:	0029      	movs	r1, r5
 800a1b2:	9802      	ldr	r0, [sp, #8]
 800a1b4:	f000 fa5c 	bl	800a670 <_printf_i>
 800a1b8:	e7ea      	b.n	800a190 <_svfiprintf_r+0x1c8>
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	0800da94 	.word	0x0800da94
 800a1c0:	0800da9a 	.word	0x0800da9a
 800a1c4:	0800da9e 	.word	0x0800da9e
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	08009f05 	.word	0x08009f05

0800a1d0 <_sungetc_r>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	0014      	movs	r4, r2
 800a1d4:	1c4b      	adds	r3, r1, #1
 800a1d6:	d103      	bne.n	800a1e0 <_sungetc_r+0x10>
 800a1d8:	2501      	movs	r5, #1
 800a1da:	426d      	negs	r5, r5
 800a1dc:	0028      	movs	r0, r5
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	8993      	ldrh	r3, [r2, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	4393      	bics	r3, r2
 800a1e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	b2ce      	uxtb	r6, r1
 800a1ec:	b2cd      	uxtb	r5, r1
 800a1ee:	6863      	ldr	r3, [r4, #4]
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d010      	beq.n	800a216 <_sungetc_r+0x46>
 800a1f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	da07      	bge.n	800a20a <_sungetc_r+0x3a>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	701e      	strb	r6, [r3, #0]
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	3301      	adds	r3, #1
 800a206:	6063      	str	r3, [r4, #4]
 800a208:	e7e8      	b.n	800a1dc <_sungetc_r+0xc>
 800a20a:	0021      	movs	r1, r4
 800a20c:	f000 fe0e 	bl	800ae2c <__submore>
 800a210:	2800      	cmp	r0, #0
 800a212:	d0f2      	beq.n	800a1fa <_sungetc_r+0x2a>
 800a214:	e7e0      	b.n	800a1d8 <_sungetc_r+0x8>
 800a216:	6921      	ldr	r1, [r4, #16]
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	2900      	cmp	r1, #0
 800a21c:	d007      	beq.n	800a22e <_sungetc_r+0x5e>
 800a21e:	4291      	cmp	r1, r2
 800a220:	d205      	bcs.n	800a22e <_sungetc_r+0x5e>
 800a222:	1e51      	subs	r1, r2, #1
 800a224:	7808      	ldrb	r0, [r1, #0]
 800a226:	4285      	cmp	r5, r0
 800a228:	d101      	bne.n	800a22e <_sungetc_r+0x5e>
 800a22a:	6021      	str	r1, [r4, #0]
 800a22c:	e7ea      	b.n	800a204 <_sungetc_r+0x34>
 800a22e:	6423      	str	r3, [r4, #64]	; 0x40
 800a230:	0023      	movs	r3, r4
 800a232:	3344      	adds	r3, #68	; 0x44
 800a234:	6363      	str	r3, [r4, #52]	; 0x34
 800a236:	2303      	movs	r3, #3
 800a238:	63a3      	str	r3, [r4, #56]	; 0x38
 800a23a:	0023      	movs	r3, r4
 800a23c:	3346      	adds	r3, #70	; 0x46
 800a23e:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a240:	701e      	strb	r6, [r3, #0]
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	2301      	movs	r3, #1
 800a246:	e7de      	b.n	800a206 <_sungetc_r+0x36>

0800a248 <__ssrefill_r>:
 800a248:	b510      	push	{r4, lr}
 800a24a:	000c      	movs	r4, r1
 800a24c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a24e:	2900      	cmp	r1, #0
 800a250:	d00e      	beq.n	800a270 <__ssrefill_r+0x28>
 800a252:	0023      	movs	r3, r4
 800a254:	3344      	adds	r3, #68	; 0x44
 800a256:	4299      	cmp	r1, r3
 800a258:	d001      	beq.n	800a25e <__ssrefill_r+0x16>
 800a25a:	f7ff fcc7 	bl	8009bec <_free_r>
 800a25e:	2000      	movs	r0, #0
 800a260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a262:	6360      	str	r0, [r4, #52]	; 0x34
 800a264:	6063      	str	r3, [r4, #4]
 800a266:	4283      	cmp	r3, r0
 800a268:	d002      	beq.n	800a270 <__ssrefill_r+0x28>
 800a26a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd10      	pop	{r4, pc}
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	2001      	movs	r0, #1
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	2300      	movs	r3, #0
 800a278:	89a2      	ldrh	r2, [r4, #12]
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	3320      	adds	r3, #32
 800a27e:	4313      	orrs	r3, r2
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	4240      	negs	r0, r0
 800a284:	e7f3      	b.n	800a26e <__ssrefill_r+0x26>
	...

0800a288 <__ssvfiscanf_r>:
 800a288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28a:	4cbd      	ldr	r4, [pc, #756]	; (800a580 <__ssvfiscanf_r+0x2f8>)
 800a28c:	2586      	movs	r5, #134	; 0x86
 800a28e:	44a5      	add	sp, r4
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	2300      	movs	r3, #0
 800a294:	9348      	str	r3, [sp, #288]	; 0x120
 800a296:	9349      	str	r3, [sp, #292]	; 0x124
 800a298:	ab05      	add	r3, sp, #20
 800a29a:	934a      	str	r3, [sp, #296]	; 0x128
 800a29c:	23be      	movs	r3, #190	; 0xbe
 800a29e:	006d      	lsls	r5, r5, #1
 800a2a0:	9000      	str	r0, [sp, #0]
 800a2a2:	000c      	movs	r4, r1
 800a2a4:	a802      	add	r0, sp, #8
 800a2a6:	49b7      	ldr	r1, [pc, #732]	; (800a584 <__ssvfiscanf_r+0x2fc>)
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	1940      	adds	r0, r0, r5
 800a2ac:	27c0      	movs	r7, #192	; 0xc0
 800a2ae:	50c1      	str	r1, [r0, r3]
 800a2b0:	ab02      	add	r3, sp, #8
 800a2b2:	195b      	adds	r3, r3, r5
 800a2b4:	0015      	movs	r5, r2
 800a2b6:	49b4      	ldr	r1, [pc, #720]	; (800a588 <__ssvfiscanf_r+0x300>)
 800a2b8:	007f      	lsls	r7, r7, #1
 800a2ba:	51d9      	str	r1, [r3, r7]
 800a2bc:	782b      	ldrb	r3, [r5, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d100      	bne.n	800a2c4 <__ssvfiscanf_r+0x3c>
 800a2c2:	e15b      	b.n	800a57c <__ssvfiscanf_r+0x2f4>
 800a2c4:	f000 fdf4 	bl	800aeb0 <__locale_ctype_ptr>
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	782b      	ldrb	r3, [r5, #0]
 800a2cc:	18c0      	adds	r0, r0, r3
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	7843      	ldrb	r3, [r0, #1]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	d141      	bne.n	800a35a <__ssvfiscanf_r+0xd2>
 800a2d6:	9a01      	ldr	r2, [sp, #4]
 800a2d8:	1c6e      	adds	r6, r5, #1
 800a2da:	2a25      	cmp	r2, #37	; 0x25
 800a2dc:	d000      	beq.n	800a2e0 <__ssvfiscanf_r+0x58>
 800a2de:	e0a8      	b.n	800a432 <__ssvfiscanf_r+0x1aa>
 800a2e0:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2e2:	9345      	str	r3, [sp, #276]	; 0x114
 800a2e4:	786b      	ldrb	r3, [r5, #1]
 800a2e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e8:	d102      	bne.n	800a2f0 <__ssvfiscanf_r+0x68>
 800a2ea:	3b1a      	subs	r3, #26
 800a2ec:	9345      	str	r3, [sp, #276]	; 0x114
 800a2ee:	1cae      	adds	r6, r5, #2
 800a2f0:	0035      	movs	r5, r6
 800a2f2:	220a      	movs	r2, #10
 800a2f4:	7829      	ldrb	r1, [r5, #0]
 800a2f6:	000b      	movs	r3, r1
 800a2f8:	3b30      	subs	r3, #48	; 0x30
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d948      	bls.n	800a390 <__ssvfiscanf_r+0x108>
 800a2fe:	4ea3      	ldr	r6, [pc, #652]	; (800a58c <__ssvfiscanf_r+0x304>)
 800a300:	2203      	movs	r2, #3
 800a302:	0030      	movs	r0, r6
 800a304:	f000 fdf4 	bl	800aef0 <memchr>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d007      	beq.n	800a31c <__ssvfiscanf_r+0x94>
 800a30c:	2301      	movs	r3, #1
 800a30e:	1b80      	subs	r0, r0, r6
 800a310:	4083      	lsls	r3, r0
 800a312:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a314:	3501      	adds	r5, #1
 800a316:	4313      	orrs	r3, r2
 800a318:	9202      	str	r2, [sp, #8]
 800a31a:	9345      	str	r3, [sp, #276]	; 0x114
 800a31c:	782b      	ldrb	r3, [r5, #0]
 800a31e:	1c6e      	adds	r6, r5, #1
 800a320:	2b67      	cmp	r3, #103	; 0x67
 800a322:	d858      	bhi.n	800a3d6 <__ssvfiscanf_r+0x14e>
 800a324:	2b65      	cmp	r3, #101	; 0x65
 800a326:	d300      	bcc.n	800a32a <__ssvfiscanf_r+0xa2>
 800a328:	e0dd      	b.n	800a4e6 <__ssvfiscanf_r+0x25e>
 800a32a:	2b47      	cmp	r3, #71	; 0x47
 800a32c:	d838      	bhi.n	800a3a0 <__ssvfiscanf_r+0x118>
 800a32e:	2b45      	cmp	r3, #69	; 0x45
 800a330:	d300      	bcc.n	800a334 <__ssvfiscanf_r+0xac>
 800a332:	e0d8      	b.n	800a4e6 <__ssvfiscanf_r+0x25e>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d100      	bne.n	800a33a <__ssvfiscanf_r+0xb2>
 800a338:	e11d      	b.n	800a576 <__ssvfiscanf_r+0x2ee>
 800a33a:	2b25      	cmp	r3, #37	; 0x25
 800a33c:	d079      	beq.n	800a432 <__ssvfiscanf_r+0x1aa>
 800a33e:	2303      	movs	r3, #3
 800a340:	934b      	str	r3, [sp, #300]	; 0x12c
 800a342:	3307      	adds	r3, #7
 800a344:	9346      	str	r3, [sp, #280]	; 0x118
 800a346:	e053      	b.n	800a3f0 <__ssvfiscanf_r+0x168>
 800a348:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a34a:	3301      	adds	r3, #1
 800a34c:	9201      	str	r2, [sp, #4]
 800a34e:	3201      	adds	r2, #1
 800a350:	9249      	str	r2, [sp, #292]	; 0x124
 800a352:	6862      	ldr	r2, [r4, #4]
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	3a01      	subs	r2, #1
 800a358:	6062      	str	r2, [r4, #4]
 800a35a:	6863      	ldr	r3, [r4, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dd0b      	ble.n	800a378 <__ssvfiscanf_r+0xf0>
 800a360:	f000 fda6 	bl	800aeb0 <__locale_ctype_ptr>
 800a364:	2108      	movs	r1, #8
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	1880      	adds	r0, r0, r2
 800a36c:	7842      	ldrb	r2, [r0, #1]
 800a36e:	420a      	tst	r2, r1
 800a370:	d1ea      	bne.n	800a348 <__ssvfiscanf_r+0xc0>
 800a372:	1c6e      	adds	r6, r5, #1
 800a374:	0035      	movs	r5, r6
 800a376:	e7a1      	b.n	800a2bc <__ssvfiscanf_r+0x34>
 800a378:	2286      	movs	r2, #134	; 0x86
 800a37a:	ab02      	add	r3, sp, #8
 800a37c:	0052      	lsls	r2, r2, #1
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	59db      	ldr	r3, [r3, r7]
 800a382:	0021      	movs	r1, r4
 800a384:	9800      	ldr	r0, [sp, #0]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	4798      	blx	r3
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0e8      	beq.n	800a360 <__ssvfiscanf_r+0xd8>
 800a38e:	e7f0      	b.n	800a372 <__ssvfiscanf_r+0xea>
 800a390:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a392:	3501      	adds	r5, #1
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	4353      	muls	r3, r2
 800a398:	3b30      	subs	r3, #48	; 0x30
 800a39a:	1859      	adds	r1, r3, r1
 800a39c:	9147      	str	r1, [sp, #284]	; 0x11c
 800a39e:	e7a9      	b.n	800a2f4 <__ssvfiscanf_r+0x6c>
 800a3a0:	2b5b      	cmp	r3, #91	; 0x5b
 800a3a2:	d100      	bne.n	800a3a6 <__ssvfiscanf_r+0x11e>
 800a3a4:	e077      	b.n	800a496 <__ssvfiscanf_r+0x20e>
 800a3a6:	d80f      	bhi.n	800a3c8 <__ssvfiscanf_r+0x140>
 800a3a8:	2b58      	cmp	r3, #88	; 0x58
 800a3aa:	d1c8      	bne.n	800a33e <__ssvfiscanf_r+0xb6>
 800a3ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3ae:	9201      	str	r2, [sp, #4]
 800a3b0:	2280      	movs	r2, #128	; 0x80
 800a3b2:	9901      	ldr	r1, [sp, #4]
 800a3b4:	0092      	lsls	r2, r2, #2
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	9245      	str	r2, [sp, #276]	; 0x114
 800a3ba:	2210      	movs	r2, #16
 800a3bc:	9246      	str	r2, [sp, #280]	; 0x118
 800a3be:	2203      	movs	r2, #3
 800a3c0:	2b6e      	cmp	r3, #110	; 0x6e
 800a3c2:	dd14      	ble.n	800a3ee <__ssvfiscanf_r+0x166>
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	e012      	b.n	800a3ee <__ssvfiscanf_r+0x166>
 800a3c8:	2b63      	cmp	r3, #99	; 0x63
 800a3ca:	d100      	bne.n	800a3ce <__ssvfiscanf_r+0x146>
 800a3cc:	e071      	b.n	800a4b2 <__ssvfiscanf_r+0x22a>
 800a3ce:	2b64      	cmp	r3, #100	; 0x64
 800a3d0:	d1b5      	bne.n	800a33e <__ssvfiscanf_r+0xb6>
 800a3d2:	220a      	movs	r2, #10
 800a3d4:	e7f2      	b.n	800a3bc <__ssvfiscanf_r+0x134>
 800a3d6:	2b70      	cmp	r3, #112	; 0x70
 800a3d8:	d052      	beq.n	800a480 <__ssvfiscanf_r+0x1f8>
 800a3da:	d822      	bhi.n	800a422 <__ssvfiscanf_r+0x19a>
 800a3dc:	2b6e      	cmp	r3, #110	; 0x6e
 800a3de:	d100      	bne.n	800a3e2 <__ssvfiscanf_r+0x15a>
 800a3e0:	e06f      	b.n	800a4c2 <__ssvfiscanf_r+0x23a>
 800a3e2:	d854      	bhi.n	800a48e <__ssvfiscanf_r+0x206>
 800a3e4:	2b69      	cmp	r3, #105	; 0x69
 800a3e6:	d1aa      	bne.n	800a33e <__ssvfiscanf_r+0xb6>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2203      	movs	r2, #3
 800a3ec:	9346      	str	r3, [sp, #280]	; 0x118
 800a3ee:	924b      	str	r2, [sp, #300]	; 0x12c
 800a3f0:	6863      	ldr	r3, [r4, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dc00      	bgt.n	800a3f8 <__ssvfiscanf_r+0x170>
 800a3f6:	e078      	b.n	800a4ea <__ssvfiscanf_r+0x262>
 800a3f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	065b      	lsls	r3, r3, #25
 800a3fe:	d400      	bmi.n	800a402 <__ssvfiscanf_r+0x17a>
 800a400:	e08b      	b.n	800a51a <__ssvfiscanf_r+0x292>
 800a402:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800a404:	2b02      	cmp	r3, #2
 800a406:	dd00      	ble.n	800a40a <__ssvfiscanf_r+0x182>
 800a408:	e09d      	b.n	800a546 <__ssvfiscanf_r+0x2be>
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	0022      	movs	r2, r4
 800a40e:	a945      	add	r1, sp, #276	; 0x114
 800a410:	9800      	ldr	r0, [sp, #0]
 800a412:	f000 fa47 	bl	800a8a4 <_scanf_chars>
 800a416:	2801      	cmp	r0, #1
 800a418:	d100      	bne.n	800a41c <__ssvfiscanf_r+0x194>
 800a41a:	e0af      	b.n	800a57c <__ssvfiscanf_r+0x2f4>
 800a41c:	2802      	cmp	r0, #2
 800a41e:	d1a9      	bne.n	800a374 <__ssvfiscanf_r+0xec>
 800a420:	e025      	b.n	800a46e <__ssvfiscanf_r+0x1e6>
 800a422:	2b75      	cmp	r3, #117	; 0x75
 800a424:	d0d5      	beq.n	800a3d2 <__ssvfiscanf_r+0x14a>
 800a426:	2b78      	cmp	r3, #120	; 0x78
 800a428:	d0c0      	beq.n	800a3ac <__ssvfiscanf_r+0x124>
 800a42a:	2b73      	cmp	r3, #115	; 0x73
 800a42c:	d187      	bne.n	800a33e <__ssvfiscanf_r+0xb6>
 800a42e:	2302      	movs	r3, #2
 800a430:	e03d      	b.n	800a4ae <__ssvfiscanf_r+0x226>
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dd0f      	ble.n	800a458 <__ssvfiscanf_r+0x1d0>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	9901      	ldr	r1, [sp, #4]
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	4291      	cmp	r1, r2
 800a440:	d000      	beq.n	800a444 <__ssvfiscanf_r+0x1bc>
 800a442:	e09b      	b.n	800a57c <__ssvfiscanf_r+0x2f4>
 800a444:	3301      	adds	r3, #1
 800a446:	6862      	ldr	r2, [r4, #4]
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a44c:	3a01      	subs	r2, #1
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	3301      	adds	r3, #1
 800a452:	6062      	str	r2, [r4, #4]
 800a454:	9349      	str	r3, [sp, #292]	; 0x124
 800a456:	e78d      	b.n	800a374 <__ssvfiscanf_r+0xec>
 800a458:	2286      	movs	r2, #134	; 0x86
 800a45a:	ab02      	add	r3, sp, #8
 800a45c:	0052      	lsls	r2, r2, #1
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	59db      	ldr	r3, [r3, r7]
 800a462:	0021      	movs	r1, r4
 800a464:	9800      	ldr	r0, [sp, #0]
 800a466:	9302      	str	r3, [sp, #8]
 800a468:	4798      	blx	r3
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d0e4      	beq.n	800a438 <__ssvfiscanf_r+0x1b0>
 800a46e:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a470:	2800      	cmp	r0, #0
 800a472:	d000      	beq.n	800a476 <__ssvfiscanf_r+0x1ee>
 800a474:	e07b      	b.n	800a56e <__ssvfiscanf_r+0x2e6>
 800a476:	3801      	subs	r0, #1
 800a478:	23a7      	movs	r3, #167	; 0xa7
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	449d      	add	sp, r3
 800a47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a480:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	2220      	movs	r2, #32
 800a486:	9901      	ldr	r1, [sp, #4]
 800a488:	430a      	orrs	r2, r1
 800a48a:	9245      	str	r2, [sp, #276]	; 0x114
 800a48c:	e78e      	b.n	800a3ac <__ssvfiscanf_r+0x124>
 800a48e:	2308      	movs	r3, #8
 800a490:	2204      	movs	r2, #4
 800a492:	9346      	str	r3, [sp, #280]	; 0x118
 800a494:	e7ab      	b.n	800a3ee <__ssvfiscanf_r+0x166>
 800a496:	0031      	movs	r1, r6
 800a498:	a805      	add	r0, sp, #20
 800a49a:	f000 fb67 	bl	800ab6c <__sccl>
 800a49e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a4a0:	0006      	movs	r6, r0
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	9a01      	ldr	r2, [sp, #4]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	9345      	str	r3, [sp, #276]	; 0x114
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	934b      	str	r3, [sp, #300]	; 0x12c
 800a4b0:	e79e      	b.n	800a3f0 <__ssvfiscanf_r+0x168>
 800a4b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	9345      	str	r3, [sp, #276]	; 0x114
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e7f5      	b.n	800a4ae <__ssvfiscanf_r+0x226>
 800a4c2:	9945      	ldr	r1, [sp, #276]	; 0x114
 800a4c4:	06cb      	lsls	r3, r1, #27
 800a4c6:	d500      	bpl.n	800a4ca <__ssvfiscanf_r+0x242>
 800a4c8:	e754      	b.n	800a374 <__ssvfiscanf_r+0xec>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a4ce:	07c8      	lsls	r0, r1, #31
 800a4d0:	d504      	bpl.n	800a4dc <__ssvfiscanf_r+0x254>
 800a4d2:	1d19      	adds	r1, r3, #4
 800a4d4:	9103      	str	r1, [sp, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	e74b      	b.n	800a374 <__ssvfiscanf_r+0xec>
 800a4dc:	1d19      	adds	r1, r3, #4
 800a4de:	9103      	str	r1, [sp, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e746      	b.n	800a374 <__ssvfiscanf_r+0xec>
 800a4e6:	2305      	movs	r3, #5
 800a4e8:	e7e1      	b.n	800a4ae <__ssvfiscanf_r+0x226>
 800a4ea:	2286      	movs	r2, #134	; 0x86
 800a4ec:	ab02      	add	r3, sp, #8
 800a4ee:	0052      	lsls	r2, r2, #1
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	59db      	ldr	r3, [r3, r7]
 800a4f4:	0021      	movs	r1, r4
 800a4f6:	9800      	ldr	r0, [sp, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	4798      	blx	r3
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d100      	bne.n	800a502 <__ssvfiscanf_r+0x27a>
 800a500:	e77a      	b.n	800a3f8 <__ssvfiscanf_r+0x170>
 800a502:	e7b4      	b.n	800a46e <__ssvfiscanf_r+0x1e6>
 800a504:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800a506:	9201      	str	r2, [sp, #4]
 800a508:	3201      	adds	r2, #1
 800a50a:	9249      	str	r2, [sp, #292]	; 0x124
 800a50c:	6862      	ldr	r2, [r4, #4]
 800a50e:	3a01      	subs	r2, #1
 800a510:	6062      	str	r2, [r4, #4]
 800a512:	2a00      	cmp	r2, #0
 800a514:	dd0b      	ble.n	800a52e <__ssvfiscanf_r+0x2a6>
 800a516:	3301      	adds	r3, #1
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	f000 fcc9 	bl	800aeb0 <__locale_ctype_ptr>
 800a51e:	2108      	movs	r1, #8
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	1880      	adds	r0, r0, r2
 800a526:	7842      	ldrb	r2, [r0, #1]
 800a528:	420a      	tst	r2, r1
 800a52a:	d1eb      	bne.n	800a504 <__ssvfiscanf_r+0x27c>
 800a52c:	e769      	b.n	800a402 <__ssvfiscanf_r+0x17a>
 800a52e:	2286      	movs	r2, #134	; 0x86
 800a530:	ab02      	add	r3, sp, #8
 800a532:	0052      	lsls	r2, r2, #1
 800a534:	189b      	adds	r3, r3, r2
 800a536:	59db      	ldr	r3, [r3, r7]
 800a538:	0021      	movs	r1, r4
 800a53a:	9800      	ldr	r0, [sp, #0]
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	4798      	blx	r3
 800a540:	2800      	cmp	r0, #0
 800a542:	d0ea      	beq.n	800a51a <__ssvfiscanf_r+0x292>
 800a544:	e793      	b.n	800a46e <__ssvfiscanf_r+0x1e6>
 800a546:	2b04      	cmp	r3, #4
 800a548:	dc06      	bgt.n	800a558 <__ssvfiscanf_r+0x2d0>
 800a54a:	ab03      	add	r3, sp, #12
 800a54c:	0022      	movs	r2, r4
 800a54e:	a945      	add	r1, sp, #276	; 0x114
 800a550:	9800      	ldr	r0, [sp, #0]
 800a552:	f000 fa0b 	bl	800a96c <_scanf_i>
 800a556:	e75e      	b.n	800a416 <__ssvfiscanf_r+0x18e>
 800a558:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <__ssvfiscanf_r+0x308>)
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d100      	bne.n	800a560 <__ssvfiscanf_r+0x2d8>
 800a55e:	e709      	b.n	800a374 <__ssvfiscanf_r+0xec>
 800a560:	ab03      	add	r3, sp, #12
 800a562:	0022      	movs	r2, r4
 800a564:	a945      	add	r1, sp, #276	; 0x114
 800a566:	9800      	ldr	r0, [sp, #0]
 800a568:	e000      	b.n	800a56c <__ssvfiscanf_r+0x2e4>
 800a56a:	bf00      	nop
 800a56c:	e753      	b.n	800a416 <__ssvfiscanf_r+0x18e>
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	065b      	lsls	r3, r3, #25
 800a572:	d400      	bmi.n	800a576 <__ssvfiscanf_r+0x2ee>
 800a574:	e780      	b.n	800a478 <__ssvfiscanf_r+0x1f0>
 800a576:	2001      	movs	r0, #1
 800a578:	4240      	negs	r0, r0
 800a57a:	e77d      	b.n	800a478 <__ssvfiscanf_r+0x1f0>
 800a57c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800a57e:	e77b      	b.n	800a478 <__ssvfiscanf_r+0x1f0>
 800a580:	fffffd64 	.word	0xfffffd64
 800a584:	0800a1d1 	.word	0x0800a1d1
 800a588:	0800a249 	.word	0x0800a249
 800a58c:	0800da9a 	.word	0x0800da9a
 800a590:	00000000 	.word	0x00000000

0800a594 <_printf_common>:
 800a594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a596:	0015      	movs	r5, r2
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	688a      	ldr	r2, [r1, #8]
 800a59c:	690b      	ldr	r3, [r1, #16]
 800a59e:	9000      	str	r0, [sp, #0]
 800a5a0:	000c      	movs	r4, r1
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	da00      	bge.n	800a5a8 <_printf_common+0x14>
 800a5a6:	0013      	movs	r3, r2
 800a5a8:	0022      	movs	r2, r4
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	3243      	adds	r2, #67	; 0x43
 800a5ae:	7812      	ldrb	r2, [r2, #0]
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	d001      	beq.n	800a5b8 <_printf_common+0x24>
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	602b      	str	r3, [r5, #0]
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	069b      	lsls	r3, r3, #26
 800a5bc:	d502      	bpl.n	800a5c4 <_printf_common+0x30>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	2706      	movs	r7, #6
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	401f      	ands	r7, r3
 800a5ca:	d027      	beq.n	800a61c <_printf_common+0x88>
 800a5cc:	0023      	movs	r3, r4
 800a5ce:	3343      	adds	r3, #67	; 0x43
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	1e5a      	subs	r2, r3, #1
 800a5d4:	4193      	sbcs	r3, r2
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	0692      	lsls	r2, r2, #26
 800a5da:	d430      	bmi.n	800a63e <_printf_common+0xaa>
 800a5dc:	0022      	movs	r2, r4
 800a5de:	9901      	ldr	r1, [sp, #4]
 800a5e0:	3243      	adds	r2, #67	; 0x43
 800a5e2:	9800      	ldr	r0, [sp, #0]
 800a5e4:	9e08      	ldr	r6, [sp, #32]
 800a5e6:	47b0      	blx	r6
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d025      	beq.n	800a638 <_printf_common+0xa4>
 800a5ec:	2306      	movs	r3, #6
 800a5ee:	6820      	ldr	r0, [r4, #0]
 800a5f0:	682a      	ldr	r2, [r5, #0]
 800a5f2:	68e1      	ldr	r1, [r4, #12]
 800a5f4:	4003      	ands	r3, r0
 800a5f6:	2500      	movs	r5, #0
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d103      	bne.n	800a604 <_printf_common+0x70>
 800a5fc:	1a8d      	subs	r5, r1, r2
 800a5fe:	43eb      	mvns	r3, r5
 800a600:	17db      	asrs	r3, r3, #31
 800a602:	401d      	ands	r5, r3
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	6922      	ldr	r2, [r4, #16]
 800a608:	4293      	cmp	r3, r2
 800a60a:	dd01      	ble.n	800a610 <_printf_common+0x7c>
 800a60c:	1a9b      	subs	r3, r3, r2
 800a60e:	18ed      	adds	r5, r5, r3
 800a610:	2700      	movs	r7, #0
 800a612:	42bd      	cmp	r5, r7
 800a614:	d120      	bne.n	800a658 <_printf_common+0xc4>
 800a616:	2000      	movs	r0, #0
 800a618:	e010      	b.n	800a63c <_printf_common+0xa8>
 800a61a:	3701      	adds	r7, #1
 800a61c:	68e3      	ldr	r3, [r4, #12]
 800a61e:	682a      	ldr	r2, [r5, #0]
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	429f      	cmp	r7, r3
 800a624:	dad2      	bge.n	800a5cc <_printf_common+0x38>
 800a626:	0022      	movs	r2, r4
 800a628:	2301      	movs	r3, #1
 800a62a:	3219      	adds	r2, #25
 800a62c:	9901      	ldr	r1, [sp, #4]
 800a62e:	9800      	ldr	r0, [sp, #0]
 800a630:	9e08      	ldr	r6, [sp, #32]
 800a632:	47b0      	blx	r6
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d1f0      	bne.n	800a61a <_printf_common+0x86>
 800a638:	2001      	movs	r0, #1
 800a63a:	4240      	negs	r0, r0
 800a63c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a63e:	2030      	movs	r0, #48	; 0x30
 800a640:	18e1      	adds	r1, r4, r3
 800a642:	3143      	adds	r1, #67	; 0x43
 800a644:	7008      	strb	r0, [r1, #0]
 800a646:	0021      	movs	r1, r4
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	3145      	adds	r1, #69	; 0x45
 800a64c:	7809      	ldrb	r1, [r1, #0]
 800a64e:	18a2      	adds	r2, r4, r2
 800a650:	3243      	adds	r2, #67	; 0x43
 800a652:	3302      	adds	r3, #2
 800a654:	7011      	strb	r1, [r2, #0]
 800a656:	e7c1      	b.n	800a5dc <_printf_common+0x48>
 800a658:	0022      	movs	r2, r4
 800a65a:	2301      	movs	r3, #1
 800a65c:	321a      	adds	r2, #26
 800a65e:	9901      	ldr	r1, [sp, #4]
 800a660:	9800      	ldr	r0, [sp, #0]
 800a662:	9e08      	ldr	r6, [sp, #32]
 800a664:	47b0      	blx	r6
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	d0e6      	beq.n	800a638 <_printf_common+0xa4>
 800a66a:	3701      	adds	r7, #1
 800a66c:	e7d1      	b.n	800a612 <_printf_common+0x7e>
	...

0800a670 <_printf_i>:
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	b08b      	sub	sp, #44	; 0x2c
 800a674:	9206      	str	r2, [sp, #24]
 800a676:	000a      	movs	r2, r1
 800a678:	3243      	adds	r2, #67	; 0x43
 800a67a:	9307      	str	r3, [sp, #28]
 800a67c:	9005      	str	r0, [sp, #20]
 800a67e:	9204      	str	r2, [sp, #16]
 800a680:	7e0a      	ldrb	r2, [r1, #24]
 800a682:	000c      	movs	r4, r1
 800a684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a686:	2a6e      	cmp	r2, #110	; 0x6e
 800a688:	d100      	bne.n	800a68c <_printf_i+0x1c>
 800a68a:	e08f      	b.n	800a7ac <_printf_i+0x13c>
 800a68c:	d817      	bhi.n	800a6be <_printf_i+0x4e>
 800a68e:	2a63      	cmp	r2, #99	; 0x63
 800a690:	d02c      	beq.n	800a6ec <_printf_i+0x7c>
 800a692:	d808      	bhi.n	800a6a6 <_printf_i+0x36>
 800a694:	2a00      	cmp	r2, #0
 800a696:	d100      	bne.n	800a69a <_printf_i+0x2a>
 800a698:	e099      	b.n	800a7ce <_printf_i+0x15e>
 800a69a:	2a58      	cmp	r2, #88	; 0x58
 800a69c:	d054      	beq.n	800a748 <_printf_i+0xd8>
 800a69e:	0026      	movs	r6, r4
 800a6a0:	3642      	adds	r6, #66	; 0x42
 800a6a2:	7032      	strb	r2, [r6, #0]
 800a6a4:	e029      	b.n	800a6fa <_printf_i+0x8a>
 800a6a6:	2a64      	cmp	r2, #100	; 0x64
 800a6a8:	d001      	beq.n	800a6ae <_printf_i+0x3e>
 800a6aa:	2a69      	cmp	r2, #105	; 0x69
 800a6ac:	d1f7      	bne.n	800a69e <_printf_i+0x2e>
 800a6ae:	6821      	ldr	r1, [r4, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	0608      	lsls	r0, r1, #24
 800a6b4:	d523      	bpl.n	800a6fe <_printf_i+0x8e>
 800a6b6:	1d11      	adds	r1, r2, #4
 800a6b8:	6019      	str	r1, [r3, #0]
 800a6ba:	6815      	ldr	r5, [r2, #0]
 800a6bc:	e025      	b.n	800a70a <_printf_i+0x9a>
 800a6be:	2a73      	cmp	r2, #115	; 0x73
 800a6c0:	d100      	bne.n	800a6c4 <_printf_i+0x54>
 800a6c2:	e088      	b.n	800a7d6 <_printf_i+0x166>
 800a6c4:	d808      	bhi.n	800a6d8 <_printf_i+0x68>
 800a6c6:	2a6f      	cmp	r2, #111	; 0x6f
 800a6c8:	d029      	beq.n	800a71e <_printf_i+0xae>
 800a6ca:	2a70      	cmp	r2, #112	; 0x70
 800a6cc:	d1e7      	bne.n	800a69e <_printf_i+0x2e>
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	6809      	ldr	r1, [r1, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	e003      	b.n	800a6e0 <_printf_i+0x70>
 800a6d8:	2a75      	cmp	r2, #117	; 0x75
 800a6da:	d020      	beq.n	800a71e <_printf_i+0xae>
 800a6dc:	2a78      	cmp	r2, #120	; 0x78
 800a6de:	d1de      	bne.n	800a69e <_printf_i+0x2e>
 800a6e0:	0022      	movs	r2, r4
 800a6e2:	2178      	movs	r1, #120	; 0x78
 800a6e4:	3245      	adds	r2, #69	; 0x45
 800a6e6:	7011      	strb	r1, [r2, #0]
 800a6e8:	4a6c      	ldr	r2, [pc, #432]	; (800a89c <_printf_i+0x22c>)
 800a6ea:	e030      	b.n	800a74e <_printf_i+0xde>
 800a6ec:	000e      	movs	r6, r1
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	3642      	adds	r6, #66	; 0x42
 800a6f2:	1d11      	adds	r1, r2, #4
 800a6f4:	6019      	str	r1, [r3, #0]
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	7033      	strb	r3, [r6, #0]
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e079      	b.n	800a7f2 <_printf_i+0x182>
 800a6fe:	0649      	lsls	r1, r1, #25
 800a700:	d5d9      	bpl.n	800a6b6 <_printf_i+0x46>
 800a702:	1d11      	adds	r1, r2, #4
 800a704:	6019      	str	r1, [r3, #0]
 800a706:	2300      	movs	r3, #0
 800a708:	5ed5      	ldrsh	r5, [r2, r3]
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	da03      	bge.n	800a716 <_printf_i+0xa6>
 800a70e:	232d      	movs	r3, #45	; 0x2d
 800a710:	9a04      	ldr	r2, [sp, #16]
 800a712:	426d      	negs	r5, r5
 800a714:	7013      	strb	r3, [r2, #0]
 800a716:	4b62      	ldr	r3, [pc, #392]	; (800a8a0 <_printf_i+0x230>)
 800a718:	270a      	movs	r7, #10
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	e02f      	b.n	800a77e <_printf_i+0x10e>
 800a71e:	6820      	ldr	r0, [r4, #0]
 800a720:	6819      	ldr	r1, [r3, #0]
 800a722:	0605      	lsls	r5, r0, #24
 800a724:	d503      	bpl.n	800a72e <_printf_i+0xbe>
 800a726:	1d08      	adds	r0, r1, #4
 800a728:	6018      	str	r0, [r3, #0]
 800a72a:	680d      	ldr	r5, [r1, #0]
 800a72c:	e005      	b.n	800a73a <_printf_i+0xca>
 800a72e:	0640      	lsls	r0, r0, #25
 800a730:	d5f9      	bpl.n	800a726 <_printf_i+0xb6>
 800a732:	680d      	ldr	r5, [r1, #0]
 800a734:	1d08      	adds	r0, r1, #4
 800a736:	6018      	str	r0, [r3, #0]
 800a738:	b2ad      	uxth	r5, r5
 800a73a:	4b59      	ldr	r3, [pc, #356]	; (800a8a0 <_printf_i+0x230>)
 800a73c:	2708      	movs	r7, #8
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	2a6f      	cmp	r2, #111	; 0x6f
 800a742:	d018      	beq.n	800a776 <_printf_i+0x106>
 800a744:	270a      	movs	r7, #10
 800a746:	e016      	b.n	800a776 <_printf_i+0x106>
 800a748:	3145      	adds	r1, #69	; 0x45
 800a74a:	700a      	strb	r2, [r1, #0]
 800a74c:	4a54      	ldr	r2, [pc, #336]	; (800a8a0 <_printf_i+0x230>)
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	6821      	ldr	r1, [r4, #0]
 800a754:	1d10      	adds	r0, r2, #4
 800a756:	6018      	str	r0, [r3, #0]
 800a758:	6815      	ldr	r5, [r2, #0]
 800a75a:	0608      	lsls	r0, r1, #24
 800a75c:	d522      	bpl.n	800a7a4 <_printf_i+0x134>
 800a75e:	07cb      	lsls	r3, r1, #31
 800a760:	d502      	bpl.n	800a768 <_printf_i+0xf8>
 800a762:	2320      	movs	r3, #32
 800a764:	4319      	orrs	r1, r3
 800a766:	6021      	str	r1, [r4, #0]
 800a768:	2710      	movs	r7, #16
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	d103      	bne.n	800a776 <_printf_i+0x106>
 800a76e:	2320      	movs	r3, #32
 800a770:	6822      	ldr	r2, [r4, #0]
 800a772:	439a      	bics	r2, r3
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	0023      	movs	r3, r4
 800a778:	2200      	movs	r2, #0
 800a77a:	3343      	adds	r3, #67	; 0x43
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	db5c      	blt.n	800a840 <_printf_i+0x1d0>
 800a786:	2204      	movs	r2, #4
 800a788:	6821      	ldr	r1, [r4, #0]
 800a78a:	4391      	bics	r1, r2
 800a78c:	6021      	str	r1, [r4, #0]
 800a78e:	2d00      	cmp	r5, #0
 800a790:	d158      	bne.n	800a844 <_printf_i+0x1d4>
 800a792:	9e04      	ldr	r6, [sp, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d064      	beq.n	800a862 <_printf_i+0x1f2>
 800a798:	0026      	movs	r6, r4
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	3642      	adds	r6, #66	; 0x42
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	7033      	strb	r3, [r6, #0]
 800a7a2:	e05e      	b.n	800a862 <_printf_i+0x1f2>
 800a7a4:	0648      	lsls	r0, r1, #25
 800a7a6:	d5da      	bpl.n	800a75e <_printf_i+0xee>
 800a7a8:	b2ad      	uxth	r5, r5
 800a7aa:	e7d8      	b.n	800a75e <_printf_i+0xee>
 800a7ac:	6809      	ldr	r1, [r1, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	0608      	lsls	r0, r1, #24
 800a7b2:	d505      	bpl.n	800a7c0 <_printf_i+0x150>
 800a7b4:	1d11      	adds	r1, r2, #4
 800a7b6:	6019      	str	r1, [r3, #0]
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	6962      	ldr	r2, [r4, #20]
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	e006      	b.n	800a7ce <_printf_i+0x15e>
 800a7c0:	0649      	lsls	r1, r1, #25
 800a7c2:	d5f7      	bpl.n	800a7b4 <_printf_i+0x144>
 800a7c4:	1d11      	adds	r1, r2, #4
 800a7c6:	6019      	str	r1, [r3, #0]
 800a7c8:	6813      	ldr	r3, [r2, #0]
 800a7ca:	8aa2      	ldrh	r2, [r4, #20]
 800a7cc:	801a      	strh	r2, [r3, #0]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9e04      	ldr	r6, [sp, #16]
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	e054      	b.n	800a880 <_printf_i+0x210>
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	1d11      	adds	r1, r2, #4
 800a7da:	6019      	str	r1, [r3, #0]
 800a7dc:	6816      	ldr	r6, [r2, #0]
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6862      	ldr	r2, [r4, #4]
 800a7e2:	0030      	movs	r0, r6
 800a7e4:	f000 fb84 	bl	800aef0 <memchr>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d001      	beq.n	800a7f0 <_printf_i+0x180>
 800a7ec:	1b80      	subs	r0, r0, r6
 800a7ee:	6060      	str	r0, [r4, #4]
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	6123      	str	r3, [r4, #16]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9a04      	ldr	r2, [sp, #16]
 800a7f8:	7013      	strb	r3, [r2, #0]
 800a7fa:	e041      	b.n	800a880 <_printf_i+0x210>
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	0032      	movs	r2, r6
 800a800:	9906      	ldr	r1, [sp, #24]
 800a802:	9805      	ldr	r0, [sp, #20]
 800a804:	9d07      	ldr	r5, [sp, #28]
 800a806:	47a8      	blx	r5
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d043      	beq.n	800a894 <_printf_i+0x224>
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	2500      	movs	r5, #0
 800a810:	079b      	lsls	r3, r3, #30
 800a812:	d40f      	bmi.n	800a834 <_printf_i+0x1c4>
 800a814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a816:	68e0      	ldr	r0, [r4, #12]
 800a818:	4298      	cmp	r0, r3
 800a81a:	da3d      	bge.n	800a898 <_printf_i+0x228>
 800a81c:	0018      	movs	r0, r3
 800a81e:	e03b      	b.n	800a898 <_printf_i+0x228>
 800a820:	0022      	movs	r2, r4
 800a822:	2301      	movs	r3, #1
 800a824:	3219      	adds	r2, #25
 800a826:	9906      	ldr	r1, [sp, #24]
 800a828:	9805      	ldr	r0, [sp, #20]
 800a82a:	9e07      	ldr	r6, [sp, #28]
 800a82c:	47b0      	blx	r6
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d030      	beq.n	800a894 <_printf_i+0x224>
 800a832:	3501      	adds	r5, #1
 800a834:	68e3      	ldr	r3, [r4, #12]
 800a836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a838:	1a9b      	subs	r3, r3, r2
 800a83a:	429d      	cmp	r5, r3
 800a83c:	dbf0      	blt.n	800a820 <_printf_i+0x1b0>
 800a83e:	e7e9      	b.n	800a814 <_printf_i+0x1a4>
 800a840:	2d00      	cmp	r5, #0
 800a842:	d0a9      	beq.n	800a798 <_printf_i+0x128>
 800a844:	9e04      	ldr	r6, [sp, #16]
 800a846:	0028      	movs	r0, r5
 800a848:	0039      	movs	r1, r7
 800a84a:	f7f5 fd07 	bl	800025c <__aeabi_uidivmod>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	3e01      	subs	r6, #1
 800a852:	5c5b      	ldrb	r3, [r3, r1]
 800a854:	0028      	movs	r0, r5
 800a856:	7033      	strb	r3, [r6, #0]
 800a858:	0039      	movs	r1, r7
 800a85a:	f7f5 fc79 	bl	8000150 <__udivsi3>
 800a85e:	1e05      	subs	r5, r0, #0
 800a860:	d1f1      	bne.n	800a846 <_printf_i+0x1d6>
 800a862:	2f08      	cmp	r7, #8
 800a864:	d109      	bne.n	800a87a <_printf_i+0x20a>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	07db      	lsls	r3, r3, #31
 800a86a:	d506      	bpl.n	800a87a <_printf_i+0x20a>
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	6922      	ldr	r2, [r4, #16]
 800a870:	4293      	cmp	r3, r2
 800a872:	dc02      	bgt.n	800a87a <_printf_i+0x20a>
 800a874:	2330      	movs	r3, #48	; 0x30
 800a876:	3e01      	subs	r6, #1
 800a878:	7033      	strb	r3, [r6, #0]
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	1b9b      	subs	r3, r3, r6
 800a87e:	6123      	str	r3, [r4, #16]
 800a880:	9b07      	ldr	r3, [sp, #28]
 800a882:	aa09      	add	r2, sp, #36	; 0x24
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	0021      	movs	r1, r4
 800a888:	9b06      	ldr	r3, [sp, #24]
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	f7ff fe82 	bl	800a594 <_printf_common>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d1b3      	bne.n	800a7fc <_printf_i+0x18c>
 800a894:	2001      	movs	r0, #1
 800a896:	4240      	negs	r0, r0
 800a898:	b00b      	add	sp, #44	; 0x2c
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	0800dab6 	.word	0x0800dab6
 800a8a0:	0800daa5 	.word	0x0800daa5

0800a8a4 <_scanf_chars>:
 800a8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a6:	0015      	movs	r5, r2
 800a8a8:	688a      	ldr	r2, [r1, #8]
 800a8aa:	9001      	str	r0, [sp, #4]
 800a8ac:	000c      	movs	r4, r1
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	d106      	bne.n	800a8c0 <_scanf_chars+0x1c>
 800a8b2:	698a      	ldr	r2, [r1, #24]
 800a8b4:	1e51      	subs	r1, r2, #1
 800a8b6:	418a      	sbcs	r2, r1
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	60a2      	str	r2, [r4, #8]
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	06d2      	lsls	r2, r2, #27
 800a8c4:	d403      	bmi.n	800a8ce <_scanf_chars+0x2a>
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	1d11      	adds	r1, r2, #4
 800a8ca:	6019      	str	r1, [r3, #0]
 800a8cc:	6817      	ldr	r7, [r2, #0]
 800a8ce:	2600      	movs	r6, #0
 800a8d0:	69a3      	ldr	r3, [r4, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d01c      	beq.n	800a910 <_scanf_chars+0x6c>
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d108      	bne.n	800a8ec <_scanf_chars+0x48>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	6962      	ldr	r2, [r4, #20]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	5cd3      	ldrb	r3, [r2, r3]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d114      	bne.n	800a910 <_scanf_chars+0x6c>
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d130      	bne.n	800a94c <_scanf_chars+0xa8>
 800a8ea:	e006      	b.n	800a8fa <_scanf_chars+0x56>
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d006      	beq.n	800a8fe <_scanf_chars+0x5a>
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	d12b      	bne.n	800a94c <_scanf_chars+0xa8>
 800a8f4:	69a3      	ldr	r3, [r4, #24]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d128      	bne.n	800a94c <_scanf_chars+0xa8>
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8fe:	f000 fad7 	bl	800aeb0 <__locale_ctype_ptr>
 800a902:	2208      	movs	r2, #8
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	18c0      	adds	r0, r0, r3
 800a90a:	7843      	ldrb	r3, [r0, #1]
 800a90c:	4213      	tst	r3, r2
 800a90e:	d1ef      	bne.n	800a8f0 <_scanf_chars+0x4c>
 800a910:	2210      	movs	r2, #16
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	3601      	adds	r6, #1
 800a916:	4213      	tst	r3, r2
 800a918:	d103      	bne.n	800a922 <_scanf_chars+0x7e>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	703b      	strb	r3, [r7, #0]
 800a920:	3701      	adds	r7, #1
 800a922:	682a      	ldr	r2, [r5, #0]
 800a924:	686b      	ldr	r3, [r5, #4]
 800a926:	3201      	adds	r2, #1
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	68a2      	ldr	r2, [r4, #8]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	3a01      	subs	r2, #1
 800a930:	606b      	str	r3, [r5, #4]
 800a932:	60a2      	str	r2, [r4, #8]
 800a934:	2a00      	cmp	r2, #0
 800a936:	d009      	beq.n	800a94c <_scanf_chars+0xa8>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dcc9      	bgt.n	800a8d0 <_scanf_chars+0x2c>
 800a93c:	23c0      	movs	r3, #192	; 0xc0
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	58e3      	ldr	r3, [r4, r3]
 800a942:	0029      	movs	r1, r5
 800a944:	9801      	ldr	r0, [sp, #4]
 800a946:	4798      	blx	r3
 800a948:	2800      	cmp	r0, #0
 800a94a:	d0c1      	beq.n	800a8d0 <_scanf_chars+0x2c>
 800a94c:	2310      	movs	r3, #16
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	4013      	ands	r3, r2
 800a952:	d106      	bne.n	800a962 <_scanf_chars+0xbe>
 800a954:	68e2      	ldr	r2, [r4, #12]
 800a956:	3201      	adds	r2, #1
 800a958:	60e2      	str	r2, [r4, #12]
 800a95a:	69a2      	ldr	r2, [r4, #24]
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	d000      	beq.n	800a962 <_scanf_chars+0xbe>
 800a960:	703b      	strb	r3, [r7, #0]
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	2000      	movs	r0, #0
 800a966:	199e      	adds	r6, r3, r6
 800a968:	6126      	str	r6, [r4, #16]
 800a96a:	e7c7      	b.n	800a8fc <_scanf_chars+0x58>

0800a96c <_scanf_i>:
 800a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96e:	000c      	movs	r4, r1
 800a970:	b08d      	sub	sp, #52	; 0x34
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	4b77      	ldr	r3, [pc, #476]	; (800ab54 <_scanf_i+0x1e8>)
 800a976:	9005      	str	r0, [sp, #20]
 800a978:	0016      	movs	r6, r2
 800a97a:	aa09      	add	r2, sp, #36	; 0x24
 800a97c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800a97e:	c223      	stmia	r2!, {r0, r1, r5}
 800a980:	4b75      	ldr	r3, [pc, #468]	; (800ab58 <_scanf_i+0x1ec>)
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	69a3      	ldr	r3, [r4, #24]
 800a986:	2b03      	cmp	r3, #3
 800a988:	d001      	beq.n	800a98e <_scanf_i+0x22>
 800a98a:	4b74      	ldr	r3, [pc, #464]	; (800ab5c <_scanf_i+0x1f0>)
 800a98c:	9306      	str	r3, [sp, #24]
 800a98e:	22ae      	movs	r2, #174	; 0xae
 800a990:	2000      	movs	r0, #0
 800a992:	68a3      	ldr	r3, [r4, #8]
 800a994:	0052      	lsls	r2, r2, #1
 800a996:	1e59      	subs	r1, r3, #1
 800a998:	9004      	str	r0, [sp, #16]
 800a99a:	4291      	cmp	r1, r2
 800a99c:	d905      	bls.n	800a9aa <_scanf_i+0x3e>
 800a99e:	3b5e      	subs	r3, #94	; 0x5e
 800a9a0:	3bff      	subs	r3, #255	; 0xff
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	235e      	movs	r3, #94	; 0x5e
 800a9a6:	33ff      	adds	r3, #255	; 0xff
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	0023      	movs	r3, r4
 800a9ac:	331c      	adds	r3, #28
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	23d0      	movs	r3, #208	; 0xd0
 800a9b2:	2700      	movs	r7, #0
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	9303      	str	r3, [sp, #12]
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	a809      	add	r0, sp, #36	; 0x24
 800a9c4:	7819      	ldrb	r1, [r3, #0]
 800a9c6:	00bb      	lsls	r3, r7, #2
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	5818      	ldr	r0, [r3, r0]
 800a9cc:	f000 fa90 	bl	800aef0 <memchr>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d02b      	beq.n	800aa2c <_scanf_i+0xc0>
 800a9d4:	2f01      	cmp	r7, #1
 800a9d6:	d15f      	bne.n	800aa98 <_scanf_i+0x12c>
 800a9d8:	6863      	ldr	r3, [r4, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <_scanf_i+0x80>
 800a9de:	3308      	adds	r3, #8
 800a9e0:	6822      	ldr	r2, [r4, #0]
 800a9e2:	6063      	str	r3, [r4, #4]
 800a9e4:	33f9      	adds	r3, #249	; 0xf9
 800a9e6:	33ff      	adds	r3, #255	; 0xff
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	4b5c      	ldr	r3, [pc, #368]	; (800ab60 <_scanf_i+0x1f4>)
 800a9ee:	6822      	ldr	r2, [r4, #0]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	1e5a      	subs	r2, r3, #1
 800a9f8:	60a2      	str	r2, [r4, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d016      	beq.n	800aa2c <_scanf_i+0xc0>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1c5d      	adds	r5, r3, #1
 800aa02:	6833      	ldr	r3, [r6, #0]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	6032      	str	r2, [r6, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	9a03      	ldr	r2, [sp, #12]
 800aa0c:	9503      	str	r5, [sp, #12]
 800aa0e:	7013      	strb	r3, [r2, #0]
 800aa10:	6873      	ldr	r3, [r6, #4]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	6073      	str	r3, [r6, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	dc08      	bgt.n	800aa2c <_scanf_i+0xc0>
 800aa1a:	23c0      	movs	r3, #192	; 0xc0
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	58e3      	ldr	r3, [r4, r3]
 800aa20:	0031      	movs	r1, r6
 800aa22:	9805      	ldr	r0, [sp, #20]
 800aa24:	9307      	str	r3, [sp, #28]
 800aa26:	4798      	blx	r3
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d17d      	bne.n	800ab28 <_scanf_i+0x1bc>
 800aa2c:	3701      	adds	r7, #1
 800aa2e:	2f03      	cmp	r7, #3
 800aa30:	d1c6      	bne.n	800a9c0 <_scanf_i+0x54>
 800aa32:	6863      	ldr	r3, [r4, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <_scanf_i+0xd0>
 800aa38:	330a      	adds	r3, #10
 800aa3a:	6063      	str	r3, [r4, #4]
 800aa3c:	2110      	movs	r1, #16
 800aa3e:	2700      	movs	r7, #0
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	6960      	ldr	r0, [r4, #20]
 800aa44:	1ac9      	subs	r1, r1, r3
 800aa46:	4b47      	ldr	r3, [pc, #284]	; (800ab64 <_scanf_i+0x1f8>)
 800aa48:	18c9      	adds	r1, r1, r3
 800aa4a:	f000 f88f 	bl	800ab6c <__sccl>
 800aa4e:	9d03      	ldr	r5, [sp, #12]
 800aa50:	68a3      	ldr	r3, [r4, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d041      	beq.n	800aada <_scanf_i+0x16e>
 800aa56:	6832      	ldr	r2, [r6, #0]
 800aa58:	6960      	ldr	r0, [r4, #20]
 800aa5a:	7811      	ldrb	r1, [r2, #0]
 800aa5c:	5c40      	ldrb	r0, [r0, r1]
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d03b      	beq.n	800aada <_scanf_i+0x16e>
 800aa62:	2930      	cmp	r1, #48	; 0x30
 800aa64:	d128      	bne.n	800aab8 <_scanf_i+0x14c>
 800aa66:	2080      	movs	r0, #128	; 0x80
 800aa68:	6821      	ldr	r1, [r4, #0]
 800aa6a:	0100      	lsls	r0, r0, #4
 800aa6c:	4201      	tst	r1, r0
 800aa6e:	d023      	beq.n	800aab8 <_scanf_i+0x14c>
 800aa70:	9a04      	ldr	r2, [sp, #16]
 800aa72:	3701      	adds	r7, #1
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d003      	beq.n	800aa80 <_scanf_i+0x114>
 800aa78:	3a01      	subs	r2, #1
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	9204      	str	r2, [sp, #16]
 800aa7e:	60a3      	str	r3, [r4, #8]
 800aa80:	6873      	ldr	r3, [r6, #4]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	6073      	str	r3, [r6, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	dd1e      	ble.n	800aac8 <_scanf_i+0x15c>
 800aa8a:	6833      	ldr	r3, [r6, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	68a3      	ldr	r3, [r4, #8]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	e7db      	b.n	800aa50 <_scanf_i+0xe4>
 800aa98:	2f02      	cmp	r7, #2
 800aa9a:	d1ab      	bne.n	800a9f4 <_scanf_i+0x88>
 800aa9c:	21c0      	movs	r1, #192	; 0xc0
 800aa9e:	2380      	movs	r3, #128	; 0x80
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	00c9      	lsls	r1, r1, #3
 800aaa4:	4011      	ands	r1, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d1c2      	bne.n	800aa32 <_scanf_i+0xc6>
 800aaac:	3bf1      	subs	r3, #241	; 0xf1
 800aaae:	3bff      	subs	r3, #255	; 0xff
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	33f0      	adds	r3, #240	; 0xf0
 800aab4:	4313      	orrs	r3, r2
 800aab6:	e79c      	b.n	800a9f2 <_scanf_i+0x86>
 800aab8:	6821      	ldr	r1, [r4, #0]
 800aaba:	4b2b      	ldr	r3, [pc, #172]	; (800ab68 <_scanf_i+0x1fc>)
 800aabc:	400b      	ands	r3, r1
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	7813      	ldrb	r3, [r2, #0]
 800aac2:	702b      	strb	r3, [r5, #0]
 800aac4:	3501      	adds	r5, #1
 800aac6:	e7db      	b.n	800aa80 <_scanf_i+0x114>
 800aac8:	23c0      	movs	r3, #192	; 0xc0
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	58e3      	ldr	r3, [r4, r3]
 800aace:	0031      	movs	r1, r6
 800aad0:	9805      	ldr	r0, [sp, #20]
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	4798      	blx	r3
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0da      	beq.n	800aa90 <_scanf_i+0x124>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	05db      	lsls	r3, r3, #23
 800aade:	d50e      	bpl.n	800aafe <_scanf_i+0x192>
 800aae0:	9b01      	ldr	r3, [sp, #4]
 800aae2:	429d      	cmp	r5, r3
 800aae4:	d907      	bls.n	800aaf6 <_scanf_i+0x18a>
 800aae6:	23be      	movs	r3, #190	; 0xbe
 800aae8:	3d01      	subs	r5, #1
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	7829      	ldrb	r1, [r5, #0]
 800aaee:	58e3      	ldr	r3, [r4, r3]
 800aaf0:	0032      	movs	r2, r6
 800aaf2:	9805      	ldr	r0, [sp, #20]
 800aaf4:	4798      	blx	r3
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	2001      	movs	r0, #1
 800aafa:	429d      	cmp	r5, r3
 800aafc:	d027      	beq.n	800ab4e <_scanf_i+0x1e2>
 800aafe:	2210      	movs	r2, #16
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	401a      	ands	r2, r3
 800ab04:	d11c      	bne.n	800ab40 <_scanf_i+0x1d4>
 800ab06:	702a      	strb	r2, [r5, #0]
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	9901      	ldr	r1, [sp, #4]
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	9e06      	ldr	r6, [sp, #24]
 800ab10:	47b0      	blx	r6
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	6822      	ldr	r2, [r4, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	0691      	lsls	r1, r2, #26
 800ab1a:	d507      	bpl.n	800ab2c <_scanf_i+0x1c0>
 800ab1c:	9902      	ldr	r1, [sp, #8]
 800ab1e:	1d1a      	adds	r2, r3, #4
 800ab20:	600a      	str	r2, [r1, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6018      	str	r0, [r3, #0]
 800ab26:	e008      	b.n	800ab3a <_scanf_i+0x1ce>
 800ab28:	2700      	movs	r7, #0
 800ab2a:	e7d6      	b.n	800aada <_scanf_i+0x16e>
 800ab2c:	07d1      	lsls	r1, r2, #31
 800ab2e:	d5f5      	bpl.n	800ab1c <_scanf_i+0x1b0>
 800ab30:	9902      	ldr	r1, [sp, #8]
 800ab32:	1d1a      	adds	r2, r3, #4
 800ab34:	600a      	str	r2, [r1, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	8018      	strh	r0, [r3, #0]
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	60e3      	str	r3, [r4, #12]
 800ab40:	2000      	movs	r0, #0
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	1aed      	subs	r5, r5, r3
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	19ef      	adds	r7, r5, r7
 800ab4a:	19df      	adds	r7, r3, r7
 800ab4c:	6127      	str	r7, [r4, #16]
 800ab4e:	b00d      	add	sp, #52	; 0x34
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab52:	46c0      	nop			; (mov r8, r8)
 800ab54:	0800c030 	.word	0x0800c030
 800ab58:	0800acdd 	.word	0x0800acdd
 800ab5c:	0800ae0d 	.word	0x0800ae0d
 800ab60:	fffffaff 	.word	0xfffffaff
 800ab64:	0800dac7 	.word	0x0800dac7
 800ab68:	fffff6ff 	.word	0xfffff6ff

0800ab6c <__sccl>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	780b      	ldrb	r3, [r1, #0]
 800ab70:	2b5e      	cmp	r3, #94	; 0x5e
 800ab72:	d00d      	beq.n	800ab90 <__sccl+0x24>
 800ab74:	1c4a      	adds	r2, r1, #1
 800ab76:	2100      	movs	r1, #0
 800ab78:	0004      	movs	r4, r0
 800ab7a:	1c45      	adds	r5, r0, #1
 800ab7c:	35ff      	adds	r5, #255	; 0xff
 800ab7e:	7021      	strb	r1, [r4, #0]
 800ab80:	3401      	adds	r4, #1
 800ab82:	42a5      	cmp	r5, r4
 800ab84:	d1fb      	bne.n	800ab7e <__sccl+0x12>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d106      	bne.n	800ab98 <__sccl+0x2c>
 800ab8a:	3a01      	subs	r2, #1
 800ab8c:	0010      	movs	r0, r2
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	1c8a      	adds	r2, r1, #2
 800ab92:	784b      	ldrb	r3, [r1, #1]
 800ab94:	2101      	movs	r1, #1
 800ab96:	e7ef      	b.n	800ab78 <__sccl+0xc>
 800ab98:	2401      	movs	r4, #1
 800ab9a:	404c      	eors	r4, r1
 800ab9c:	0011      	movs	r1, r2
 800ab9e:	54c4      	strb	r4, [r0, r3]
 800aba0:	780d      	ldrb	r5, [r1, #0]
 800aba2:	1c4a      	adds	r2, r1, #1
 800aba4:	2d2d      	cmp	r5, #45	; 0x2d
 800aba6:	d007      	beq.n	800abb8 <__sccl+0x4c>
 800aba8:	2d5d      	cmp	r5, #93	; 0x5d
 800abaa:	d0ef      	beq.n	800ab8c <__sccl+0x20>
 800abac:	2d00      	cmp	r5, #0
 800abae:	d101      	bne.n	800abb4 <__sccl+0x48>
 800abb0:	000a      	movs	r2, r1
 800abb2:	e7eb      	b.n	800ab8c <__sccl+0x20>
 800abb4:	002b      	movs	r3, r5
 800abb6:	e7f1      	b.n	800ab9c <__sccl+0x30>
 800abb8:	784e      	ldrb	r6, [r1, #1]
 800abba:	2e5d      	cmp	r6, #93	; 0x5d
 800abbc:	d0fa      	beq.n	800abb4 <__sccl+0x48>
 800abbe:	42b3      	cmp	r3, r6
 800abc0:	dcf8      	bgt.n	800abb4 <__sccl+0x48>
 800abc2:	3102      	adds	r1, #2
 800abc4:	3301      	adds	r3, #1
 800abc6:	54c4      	strb	r4, [r0, r3]
 800abc8:	429e      	cmp	r6, r3
 800abca:	dcfb      	bgt.n	800abc4 <__sccl+0x58>
 800abcc:	e7e8      	b.n	800aba0 <__sccl+0x34>
	...

0800abd0 <_strtol_l.isra.0>:
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	001f      	movs	r7, r3
 800abd4:	000e      	movs	r6, r1
 800abd6:	b087      	sub	sp, #28
 800abd8:	9005      	str	r0, [sp, #20]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	9202      	str	r2, [sp, #8]
 800abde:	980c      	ldr	r0, [sp, #48]	; 0x30
 800abe0:	7834      	ldrb	r4, [r6, #0]
 800abe2:	f000 f961 	bl	800aea8 <__locale_ctype_ptr_l>
 800abe6:	2208      	movs	r2, #8
 800abe8:	1900      	adds	r0, r0, r4
 800abea:	7843      	ldrb	r3, [r0, #1]
 800abec:	1c75      	adds	r5, r6, #1
 800abee:	4013      	ands	r3, r2
 800abf0:	d10c      	bne.n	800ac0c <_strtol_l.isra.0+0x3c>
 800abf2:	2c2d      	cmp	r4, #45	; 0x2d
 800abf4:	d10c      	bne.n	800ac10 <_strtol_l.isra.0+0x40>
 800abf6:	3301      	adds	r3, #1
 800abf8:	782c      	ldrb	r4, [r5, #0]
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	1cb5      	adds	r5, r6, #2
 800abfe:	2f00      	cmp	r7, #0
 800ac00:	d00c      	beq.n	800ac1c <_strtol_l.isra.0+0x4c>
 800ac02:	2f10      	cmp	r7, #16
 800ac04:	d114      	bne.n	800ac30 <_strtol_l.isra.0+0x60>
 800ac06:	2c30      	cmp	r4, #48	; 0x30
 800ac08:	d00a      	beq.n	800ac20 <_strtol_l.isra.0+0x50>
 800ac0a:	e011      	b.n	800ac30 <_strtol_l.isra.0+0x60>
 800ac0c:	002e      	movs	r6, r5
 800ac0e:	e7e6      	b.n	800abde <_strtol_l.isra.0+0xe>
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	2c2b      	cmp	r4, #43	; 0x2b
 800ac14:	d1f3      	bne.n	800abfe <_strtol_l.isra.0+0x2e>
 800ac16:	782c      	ldrb	r4, [r5, #0]
 800ac18:	1cb5      	adds	r5, r6, #2
 800ac1a:	e7f0      	b.n	800abfe <_strtol_l.isra.0+0x2e>
 800ac1c:	2c30      	cmp	r4, #48	; 0x30
 800ac1e:	d12f      	bne.n	800ac80 <_strtol_l.isra.0+0xb0>
 800ac20:	2220      	movs	r2, #32
 800ac22:	782b      	ldrb	r3, [r5, #0]
 800ac24:	4393      	bics	r3, r2
 800ac26:	2b58      	cmp	r3, #88	; 0x58
 800ac28:	d151      	bne.n	800acce <_strtol_l.isra.0+0xfe>
 800ac2a:	2710      	movs	r7, #16
 800ac2c:	786c      	ldrb	r4, [r5, #1]
 800ac2e:	3502      	adds	r5, #2
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	4a29      	ldr	r2, [pc, #164]	; (800acd8 <_strtol_l.isra.0+0x108>)
 800ac34:	0039      	movs	r1, r7
 800ac36:	189e      	adds	r6, r3, r2
 800ac38:	0030      	movs	r0, r6
 800ac3a:	f7f5 fb0f 	bl	800025c <__aeabi_uidivmod>
 800ac3e:	0030      	movs	r0, r6
 800ac40:	9104      	str	r1, [sp, #16]
 800ac42:	0039      	movs	r1, r7
 800ac44:	f7f5 fa84 	bl	8000150 <__udivsi3>
 800ac48:	2101      	movs	r1, #1
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4249      	negs	r1, r1
 800ac4e:	0002      	movs	r2, r0
 800ac50:	468c      	mov	ip, r1
 800ac52:	0018      	movs	r0, r3
 800ac54:	0021      	movs	r1, r4
 800ac56:	3930      	subs	r1, #48	; 0x30
 800ac58:	2909      	cmp	r1, #9
 800ac5a:	d813      	bhi.n	800ac84 <_strtol_l.isra.0+0xb4>
 800ac5c:	000c      	movs	r4, r1
 800ac5e:	42a7      	cmp	r7, r4
 800ac60:	dd1c      	ble.n	800ac9c <_strtol_l.isra.0+0xcc>
 800ac62:	1c59      	adds	r1, r3, #1
 800ac64:	d009      	beq.n	800ac7a <_strtol_l.isra.0+0xaa>
 800ac66:	4663      	mov	r3, ip
 800ac68:	4282      	cmp	r2, r0
 800ac6a:	d306      	bcc.n	800ac7a <_strtol_l.isra.0+0xaa>
 800ac6c:	d102      	bne.n	800ac74 <_strtol_l.isra.0+0xa4>
 800ac6e:	9904      	ldr	r1, [sp, #16]
 800ac70:	42a1      	cmp	r1, r4
 800ac72:	db02      	blt.n	800ac7a <_strtol_l.isra.0+0xaa>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4378      	muls	r0, r7
 800ac78:	1820      	adds	r0, r4, r0
 800ac7a:	782c      	ldrb	r4, [r5, #0]
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	e7e9      	b.n	800ac54 <_strtol_l.isra.0+0x84>
 800ac80:	270a      	movs	r7, #10
 800ac82:	e7d5      	b.n	800ac30 <_strtol_l.isra.0+0x60>
 800ac84:	0021      	movs	r1, r4
 800ac86:	3941      	subs	r1, #65	; 0x41
 800ac88:	2919      	cmp	r1, #25
 800ac8a:	d801      	bhi.n	800ac90 <_strtol_l.isra.0+0xc0>
 800ac8c:	3c37      	subs	r4, #55	; 0x37
 800ac8e:	e7e6      	b.n	800ac5e <_strtol_l.isra.0+0x8e>
 800ac90:	0021      	movs	r1, r4
 800ac92:	3961      	subs	r1, #97	; 0x61
 800ac94:	2919      	cmp	r1, #25
 800ac96:	d801      	bhi.n	800ac9c <_strtol_l.isra.0+0xcc>
 800ac98:	3c57      	subs	r4, #87	; 0x57
 800ac9a:	e7e0      	b.n	800ac5e <_strtol_l.isra.0+0x8e>
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	d108      	bne.n	800acb2 <_strtol_l.isra.0+0xe2>
 800aca0:	9a05      	ldr	r2, [sp, #20]
 800aca2:	3323      	adds	r3, #35	; 0x23
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	0030      	movs	r0, r6
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10b      	bne.n	800acc6 <_strtol_l.isra.0+0xf6>
 800acae:	b007      	add	sp, #28
 800acb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	d000      	beq.n	800acba <_strtol_l.isra.0+0xea>
 800acb8:	4240      	negs	r0, r0
 800acba:	9a02      	ldr	r2, [sp, #8]
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	d0f6      	beq.n	800acae <_strtol_l.isra.0+0xde>
 800acc0:	9a03      	ldr	r2, [sp, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d000      	beq.n	800acc8 <_strtol_l.isra.0+0xf8>
 800acc6:	1e6a      	subs	r2, r5, #1
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	e7ef      	b.n	800acae <_strtol_l.isra.0+0xde>
 800acce:	2430      	movs	r4, #48	; 0x30
 800acd0:	2f00      	cmp	r7, #0
 800acd2:	d1ad      	bne.n	800ac30 <_strtol_l.isra.0+0x60>
 800acd4:	3708      	adds	r7, #8
 800acd6:	e7ab      	b.n	800ac30 <_strtol_l.isra.0+0x60>
 800acd8:	7fffffff 	.word	0x7fffffff

0800acdc <_strtol_r>:
 800acdc:	b513      	push	{r0, r1, r4, lr}
 800acde:	4c05      	ldr	r4, [pc, #20]	; (800acf4 <_strtol_r+0x18>)
 800ace0:	6824      	ldr	r4, [r4, #0]
 800ace2:	6a24      	ldr	r4, [r4, #32]
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	d100      	bne.n	800acea <_strtol_r+0xe>
 800ace8:	4c03      	ldr	r4, [pc, #12]	; (800acf8 <_strtol_r+0x1c>)
 800acea:	9400      	str	r4, [sp, #0]
 800acec:	f7ff ff70 	bl	800abd0 <_strtol_l.isra.0>
 800acf0:	bd16      	pop	{r1, r2, r4, pc}
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	2000020c 	.word	0x2000020c
 800acf8:	20000270 	.word	0x20000270

0800acfc <_strtoul_l.isra.0>:
 800acfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfe:	001f      	movs	r7, r3
 800ad00:	000e      	movs	r6, r1
 800ad02:	b087      	sub	sp, #28
 800ad04:	9005      	str	r0, [sp, #20]
 800ad06:	9103      	str	r1, [sp, #12]
 800ad08:	9201      	str	r2, [sp, #4]
 800ad0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad0c:	7834      	ldrb	r4, [r6, #0]
 800ad0e:	f000 f8cb 	bl	800aea8 <__locale_ctype_ptr_l>
 800ad12:	2208      	movs	r2, #8
 800ad14:	1900      	adds	r0, r0, r4
 800ad16:	7843      	ldrb	r3, [r0, #1]
 800ad18:	1c75      	adds	r5, r6, #1
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	d10c      	bne.n	800ad38 <_strtoul_l.isra.0+0x3c>
 800ad1e:	2c2d      	cmp	r4, #45	; 0x2d
 800ad20:	d10c      	bne.n	800ad3c <_strtoul_l.isra.0+0x40>
 800ad22:	3301      	adds	r3, #1
 800ad24:	782c      	ldrb	r4, [r5, #0]
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	1cb5      	adds	r5, r6, #2
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d00c      	beq.n	800ad48 <_strtoul_l.isra.0+0x4c>
 800ad2e:	2f10      	cmp	r7, #16
 800ad30:	d114      	bne.n	800ad5c <_strtoul_l.isra.0+0x60>
 800ad32:	2c30      	cmp	r4, #48	; 0x30
 800ad34:	d00a      	beq.n	800ad4c <_strtoul_l.isra.0+0x50>
 800ad36:	e011      	b.n	800ad5c <_strtoul_l.isra.0+0x60>
 800ad38:	002e      	movs	r6, r5
 800ad3a:	e7e6      	b.n	800ad0a <_strtoul_l.isra.0+0xe>
 800ad3c:	9302      	str	r3, [sp, #8]
 800ad3e:	2c2b      	cmp	r4, #43	; 0x2b
 800ad40:	d1f3      	bne.n	800ad2a <_strtoul_l.isra.0+0x2e>
 800ad42:	782c      	ldrb	r4, [r5, #0]
 800ad44:	1cb5      	adds	r5, r6, #2
 800ad46:	e7f0      	b.n	800ad2a <_strtoul_l.isra.0+0x2e>
 800ad48:	2c30      	cmp	r4, #48	; 0x30
 800ad4a:	d12f      	bne.n	800adac <_strtoul_l.isra.0+0xb0>
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	782b      	ldrb	r3, [r5, #0]
 800ad50:	4393      	bics	r3, r2
 800ad52:	2b58      	cmp	r3, #88	; 0x58
 800ad54:	d154      	bne.n	800ae00 <_strtoul_l.isra.0+0x104>
 800ad56:	2710      	movs	r7, #16
 800ad58:	786c      	ldrb	r4, [r5, #1]
 800ad5a:	3502      	adds	r5, #2
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	0039      	movs	r1, r7
 800ad60:	4240      	negs	r0, r0
 800ad62:	f7f5 f9f5 	bl	8000150 <__udivsi3>
 800ad66:	0006      	movs	r6, r0
 800ad68:	2001      	movs	r0, #1
 800ad6a:	0039      	movs	r1, r7
 800ad6c:	4240      	negs	r0, r0
 800ad6e:	f7f5 fa75 	bl	800025c <__aeabi_uidivmod>
 800ad72:	2300      	movs	r3, #0
 800ad74:	9104      	str	r1, [sp, #16]
 800ad76:	2101      	movs	r1, #1
 800ad78:	2201      	movs	r2, #1
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	468c      	mov	ip, r1
 800ad7e:	4252      	negs	r2, r2
 800ad80:	0021      	movs	r1, r4
 800ad82:	3930      	subs	r1, #48	; 0x30
 800ad84:	2909      	cmp	r1, #9
 800ad86:	d813      	bhi.n	800adb0 <_strtoul_l.isra.0+0xb4>
 800ad88:	000c      	movs	r4, r1
 800ad8a:	42a7      	cmp	r7, r4
 800ad8c:	dd1e      	ble.n	800adcc <_strtoul_l.isra.0+0xd0>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	db1a      	blt.n	800adc8 <_strtoul_l.isra.0+0xcc>
 800ad92:	0013      	movs	r3, r2
 800ad94:	4286      	cmp	r6, r0
 800ad96:	d306      	bcc.n	800ada6 <_strtoul_l.isra.0+0xaa>
 800ad98:	d102      	bne.n	800ada0 <_strtoul_l.isra.0+0xa4>
 800ad9a:	9904      	ldr	r1, [sp, #16]
 800ad9c:	42a1      	cmp	r1, r4
 800ad9e:	db02      	blt.n	800ada6 <_strtoul_l.isra.0+0xaa>
 800ada0:	4663      	mov	r3, ip
 800ada2:	4378      	muls	r0, r7
 800ada4:	1820      	adds	r0, r4, r0
 800ada6:	782c      	ldrb	r4, [r5, #0]
 800ada8:	3501      	adds	r5, #1
 800adaa:	e7e9      	b.n	800ad80 <_strtoul_l.isra.0+0x84>
 800adac:	270a      	movs	r7, #10
 800adae:	e7d5      	b.n	800ad5c <_strtoul_l.isra.0+0x60>
 800adb0:	0021      	movs	r1, r4
 800adb2:	3941      	subs	r1, #65	; 0x41
 800adb4:	2919      	cmp	r1, #25
 800adb6:	d801      	bhi.n	800adbc <_strtoul_l.isra.0+0xc0>
 800adb8:	3c37      	subs	r4, #55	; 0x37
 800adba:	e7e6      	b.n	800ad8a <_strtoul_l.isra.0+0x8e>
 800adbc:	0021      	movs	r1, r4
 800adbe:	3961      	subs	r1, #97	; 0x61
 800adc0:	2919      	cmp	r1, #25
 800adc2:	d803      	bhi.n	800adcc <_strtoul_l.isra.0+0xd0>
 800adc4:	3c57      	subs	r4, #87	; 0x57
 800adc6:	e7e0      	b.n	800ad8a <_strtoul_l.isra.0+0x8e>
 800adc8:	0013      	movs	r3, r2
 800adca:	e7ec      	b.n	800ada6 <_strtoul_l.isra.0+0xaa>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	da09      	bge.n	800ade4 <_strtoul_l.isra.0+0xe8>
 800add0:	2322      	movs	r3, #34	; 0x22
 800add2:	2001      	movs	r0, #1
 800add4:	9a05      	ldr	r2, [sp, #20]
 800add6:	4240      	negs	r0, r0
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10b      	bne.n	800adf8 <_strtoul_l.isra.0+0xfc>
 800ade0:	b007      	add	sp, #28
 800ade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade4:	9a02      	ldr	r2, [sp, #8]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d000      	beq.n	800adec <_strtoul_l.isra.0+0xf0>
 800adea:	4240      	negs	r0, r0
 800adec:	9a01      	ldr	r2, [sp, #4]
 800adee:	2a00      	cmp	r2, #0
 800adf0:	d0f6      	beq.n	800ade0 <_strtoul_l.isra.0+0xe4>
 800adf2:	9a03      	ldr	r2, [sp, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d000      	beq.n	800adfa <_strtoul_l.isra.0+0xfe>
 800adf8:	1e6a      	subs	r2, r5, #1
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	e7ef      	b.n	800ade0 <_strtoul_l.isra.0+0xe4>
 800ae00:	2430      	movs	r4, #48	; 0x30
 800ae02:	2f00      	cmp	r7, #0
 800ae04:	d1aa      	bne.n	800ad5c <_strtoul_l.isra.0+0x60>
 800ae06:	3708      	adds	r7, #8
 800ae08:	e7a8      	b.n	800ad5c <_strtoul_l.isra.0+0x60>
	...

0800ae0c <_strtoul_r>:
 800ae0c:	b513      	push	{r0, r1, r4, lr}
 800ae0e:	4c05      	ldr	r4, [pc, #20]	; (800ae24 <_strtoul_r+0x18>)
 800ae10:	6824      	ldr	r4, [r4, #0]
 800ae12:	6a24      	ldr	r4, [r4, #32]
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	d100      	bne.n	800ae1a <_strtoul_r+0xe>
 800ae18:	4c03      	ldr	r4, [pc, #12]	; (800ae28 <_strtoul_r+0x1c>)
 800ae1a:	9400      	str	r4, [sp, #0]
 800ae1c:	f7ff ff6e 	bl	800acfc <_strtoul_l.isra.0>
 800ae20:	bd16      	pop	{r1, r2, r4, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	2000020c 	.word	0x2000020c
 800ae28:	20000270 	.word	0x20000270

0800ae2c <__submore>:
 800ae2c:	000b      	movs	r3, r1
 800ae2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae30:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800ae32:	3344      	adds	r3, #68	; 0x44
 800ae34:	000c      	movs	r4, r1
 800ae36:	429d      	cmp	r5, r3
 800ae38:	d11c      	bne.n	800ae74 <__submore+0x48>
 800ae3a:	2680      	movs	r6, #128	; 0x80
 800ae3c:	00f6      	lsls	r6, r6, #3
 800ae3e:	0031      	movs	r1, r6
 800ae40:	f7fe ff1e 	bl	8009c80 <_malloc_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d102      	bne.n	800ae4e <__submore+0x22>
 800ae48:	2001      	movs	r0, #1
 800ae4a:	4240      	negs	r0, r0
 800ae4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae4e:	0023      	movs	r3, r4
 800ae50:	6360      	str	r0, [r4, #52]	; 0x34
 800ae52:	63a6      	str	r6, [r4, #56]	; 0x38
 800ae54:	3346      	adds	r3, #70	; 0x46
 800ae56:	781a      	ldrb	r2, [r3, #0]
 800ae58:	4b10      	ldr	r3, [pc, #64]	; (800ae9c <__submore+0x70>)
 800ae5a:	54c2      	strb	r2, [r0, r3]
 800ae5c:	0023      	movs	r3, r4
 800ae5e:	3345      	adds	r3, #69	; 0x45
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <__submore+0x74>)
 800ae64:	54c2      	strb	r2, [r0, r3]
 800ae66:	782a      	ldrb	r2, [r5, #0]
 800ae68:	4b0e      	ldr	r3, [pc, #56]	; (800aea4 <__submore+0x78>)
 800ae6a:	54c2      	strb	r2, [r0, r3]
 800ae6c:	18c0      	adds	r0, r0, r3
 800ae6e:	6020      	str	r0, [r4, #0]
 800ae70:	2000      	movs	r0, #0
 800ae72:	e7eb      	b.n	800ae4c <__submore+0x20>
 800ae74:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800ae76:	0029      	movs	r1, r5
 800ae78:	0073      	lsls	r3, r6, #1
 800ae7a:	001a      	movs	r2, r3
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	f000 f854 	bl	800af2a <_realloc_r>
 800ae82:	1e05      	subs	r5, r0, #0
 800ae84:	d0e0      	beq.n	800ae48 <__submore+0x1c>
 800ae86:	1987      	adds	r7, r0, r6
 800ae88:	0001      	movs	r1, r0
 800ae8a:	0032      	movs	r2, r6
 800ae8c:	0038      	movs	r0, r7
 800ae8e:	f7fe fe9b 	bl	8009bc8 <memcpy>
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	6027      	str	r7, [r4, #0]
 800ae96:	6365      	str	r5, [r4, #52]	; 0x34
 800ae98:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae9a:	e7e9      	b.n	800ae70 <__submore+0x44>
 800ae9c:	000003ff 	.word	0x000003ff
 800aea0:	000003fe 	.word	0x000003fe
 800aea4:	000003fd 	.word	0x000003fd

0800aea8 <__locale_ctype_ptr_l>:
 800aea8:	30ec      	adds	r0, #236	; 0xec
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	4770      	bx	lr
	...

0800aeb0 <__locale_ctype_ptr>:
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <__locale_ctype_ptr+0x14>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d100      	bne.n	800aebc <__locale_ctype_ptr+0xc>
 800aeba:	4b03      	ldr	r3, [pc, #12]	; (800aec8 <__locale_ctype_ptr+0x18>)
 800aebc:	33ec      	adds	r3, #236	; 0xec
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	4770      	bx	lr
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	2000020c 	.word	0x2000020c
 800aec8:	20000270 	.word	0x20000270

0800aecc <__ascii_mbtowc>:
 800aecc:	b082      	sub	sp, #8
 800aece:	2900      	cmp	r1, #0
 800aed0:	d100      	bne.n	800aed4 <__ascii_mbtowc+0x8>
 800aed2:	a901      	add	r1, sp, #4
 800aed4:	1e10      	subs	r0, r2, #0
 800aed6:	d006      	beq.n	800aee6 <__ascii_mbtowc+0x1a>
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <__ascii_mbtowc+0x1e>
 800aedc:	7813      	ldrb	r3, [r2, #0]
 800aede:	600b      	str	r3, [r1, #0]
 800aee0:	7810      	ldrb	r0, [r2, #0]
 800aee2:	1e43      	subs	r3, r0, #1
 800aee4:	4198      	sbcs	r0, r3
 800aee6:	b002      	add	sp, #8
 800aee8:	4770      	bx	lr
 800aeea:	2002      	movs	r0, #2
 800aeec:	4240      	negs	r0, r0
 800aeee:	e7fa      	b.n	800aee6 <__ascii_mbtowc+0x1a>

0800aef0 <memchr>:
 800aef0:	b2c9      	uxtb	r1, r1
 800aef2:	1882      	adds	r2, r0, r2
 800aef4:	4290      	cmp	r0, r2
 800aef6:	d101      	bne.n	800aefc <memchr+0xc>
 800aef8:	2000      	movs	r0, #0
 800aefa:	4770      	bx	lr
 800aefc:	7803      	ldrb	r3, [r0, #0]
 800aefe:	428b      	cmp	r3, r1
 800af00:	d0fb      	beq.n	800aefa <memchr+0xa>
 800af02:	3001      	adds	r0, #1
 800af04:	e7f6      	b.n	800aef4 <memchr+0x4>

0800af06 <memmove>:
 800af06:	b510      	push	{r4, lr}
 800af08:	4288      	cmp	r0, r1
 800af0a:	d902      	bls.n	800af12 <memmove+0xc>
 800af0c:	188b      	adds	r3, r1, r2
 800af0e:	4298      	cmp	r0, r3
 800af10:	d308      	bcc.n	800af24 <memmove+0x1e>
 800af12:	2300      	movs	r3, #0
 800af14:	429a      	cmp	r2, r3
 800af16:	d007      	beq.n	800af28 <memmove+0x22>
 800af18:	5ccc      	ldrb	r4, [r1, r3]
 800af1a:	54c4      	strb	r4, [r0, r3]
 800af1c:	3301      	adds	r3, #1
 800af1e:	e7f9      	b.n	800af14 <memmove+0xe>
 800af20:	5c8b      	ldrb	r3, [r1, r2]
 800af22:	5483      	strb	r3, [r0, r2]
 800af24:	3a01      	subs	r2, #1
 800af26:	d2fb      	bcs.n	800af20 <memmove+0x1a>
 800af28:	bd10      	pop	{r4, pc}

0800af2a <_realloc_r>:
 800af2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2c:	0007      	movs	r7, r0
 800af2e:	000d      	movs	r5, r1
 800af30:	0016      	movs	r6, r2
 800af32:	2900      	cmp	r1, #0
 800af34:	d105      	bne.n	800af42 <_realloc_r+0x18>
 800af36:	0011      	movs	r1, r2
 800af38:	f7fe fea2 	bl	8009c80 <_malloc_r>
 800af3c:	0004      	movs	r4, r0
 800af3e:	0020      	movs	r0, r4
 800af40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af42:	2a00      	cmp	r2, #0
 800af44:	d103      	bne.n	800af4e <_realloc_r+0x24>
 800af46:	f7fe fe51 	bl	8009bec <_free_r>
 800af4a:	0034      	movs	r4, r6
 800af4c:	e7f7      	b.n	800af3e <_realloc_r+0x14>
 800af4e:	f000 f81e 	bl	800af8e <_malloc_usable_size_r>
 800af52:	002c      	movs	r4, r5
 800af54:	4286      	cmp	r6, r0
 800af56:	d9f2      	bls.n	800af3e <_realloc_r+0x14>
 800af58:	0031      	movs	r1, r6
 800af5a:	0038      	movs	r0, r7
 800af5c:	f7fe fe90 	bl	8009c80 <_malloc_r>
 800af60:	1e04      	subs	r4, r0, #0
 800af62:	d0ec      	beq.n	800af3e <_realloc_r+0x14>
 800af64:	0029      	movs	r1, r5
 800af66:	0032      	movs	r2, r6
 800af68:	f7fe fe2e 	bl	8009bc8 <memcpy>
 800af6c:	0029      	movs	r1, r5
 800af6e:	0038      	movs	r0, r7
 800af70:	f7fe fe3c 	bl	8009bec <_free_r>
 800af74:	e7e3      	b.n	800af3e <_realloc_r+0x14>

0800af76 <__ascii_wctomb>:
 800af76:	1e0b      	subs	r3, r1, #0
 800af78:	d004      	beq.n	800af84 <__ascii_wctomb+0xe>
 800af7a:	2aff      	cmp	r2, #255	; 0xff
 800af7c:	d904      	bls.n	800af88 <__ascii_wctomb+0x12>
 800af7e:	238a      	movs	r3, #138	; 0x8a
 800af80:	6003      	str	r3, [r0, #0]
 800af82:	3b8b      	subs	r3, #139	; 0x8b
 800af84:	0018      	movs	r0, r3
 800af86:	4770      	bx	lr
 800af88:	700a      	strb	r2, [r1, #0]
 800af8a:	2301      	movs	r3, #1
 800af8c:	e7fa      	b.n	800af84 <__ascii_wctomb+0xe>

0800af8e <_malloc_usable_size_r>:
 800af8e:	1f0b      	subs	r3, r1, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	1f18      	subs	r0, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	da01      	bge.n	800af9c <_malloc_usable_size_r+0xe>
 800af98:	580b      	ldr	r3, [r1, r0]
 800af9a:	18c0      	adds	r0, r0, r3
 800af9c:	4770      	bx	lr
	...

0800afa0 <pow>:
 800afa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa2:	b091      	sub	sp, #68	; 0x44
 800afa4:	001f      	movs	r7, r3
 800afa6:	9000      	str	r0, [sp, #0]
 800afa8:	9101      	str	r1, [sp, #4]
 800afaa:	0016      	movs	r6, r2
 800afac:	f000 f99c 	bl	800b2e8 <__ieee754_pow>
 800afb0:	4bc5      	ldr	r3, [pc, #788]	; (800b2c8 <pow+0x328>)
 800afb2:	0004      	movs	r4, r0
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	000d      	movs	r5, r1
 800afb8:	b25b      	sxtb	r3, r3
 800afba:	9303      	str	r3, [sp, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	d100      	bne.n	800afc2 <pow+0x22>
 800afc0:	e0d8      	b.n	800b174 <pow+0x1d4>
 800afc2:	0032      	movs	r2, r6
 800afc4:	003b      	movs	r3, r7
 800afc6:	0030      	movs	r0, r6
 800afc8:	0039      	movs	r1, r7
 800afca:	f7f7 f893 	bl	80020f4 <__aeabi_dcmpun>
 800afce:	9004      	str	r0, [sp, #16]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d000      	beq.n	800afd6 <pow+0x36>
 800afd4:	e0ce      	b.n	800b174 <pow+0x1d4>
 800afd6:	9a00      	ldr	r2, [sp, #0]
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	0010      	movs	r0, r2
 800afdc:	0019      	movs	r1, r3
 800afde:	f7f7 f889 	bl	80020f4 <__aeabi_dcmpun>
 800afe2:	2200      	movs	r2, #0
 800afe4:	9005      	str	r0, [sp, #20]
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d020      	beq.n	800b02c <pow+0x8c>
 800afea:	2300      	movs	r3, #0
 800afec:	0030      	movs	r0, r6
 800afee:	0039      	movs	r1, r7
 800aff0:	f7f5 fa34 	bl	800045c <__aeabi_dcmpeq>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d100      	bne.n	800affa <pow+0x5a>
 800aff8:	e0bc      	b.n	800b174 <pow+0x1d4>
 800affa:	2301      	movs	r3, #1
 800affc:	2200      	movs	r2, #0
 800affe:	9306      	str	r3, [sp, #24]
 800b000:	4bb2      	ldr	r3, [pc, #712]	; (800b2cc <pow+0x32c>)
 800b002:	960a      	str	r6, [sp, #40]	; 0x28
 800b004:	970b      	str	r7, [sp, #44]	; 0x2c
 800b006:	9307      	str	r3, [sp, #28]
 800b008:	9b04      	ldr	r3, [sp, #16]
 800b00a:	930e      	str	r3, [sp, #56]	; 0x38
 800b00c:	9b00      	ldr	r3, [sp, #0]
 800b00e:	9c01      	ldr	r4, [sp, #4]
 800b010:	9308      	str	r3, [sp, #32]
 800b012:	9409      	str	r4, [sp, #36]	; 0x24
 800b014:	4bae      	ldr	r3, [pc, #696]	; (800b2d0 <pow+0x330>)
 800b016:	920c      	str	r2, [sp, #48]	; 0x30
 800b018:	930d      	str	r3, [sp, #52]	; 0x34
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d035      	beq.n	800b08c <pow+0xec>
 800b020:	a806      	add	r0, sp, #24
 800b022:	f000 fefb 	bl	800be1c <matherr>
 800b026:	2800      	cmp	r0, #0
 800b028:	d127      	bne.n	800b07a <pow+0xda>
 800b02a:	e05c      	b.n	800b0e6 <pow+0x146>
 800b02c:	2300      	movs	r3, #0
 800b02e:	9800      	ldr	r0, [sp, #0]
 800b030:	9901      	ldr	r1, [sp, #4]
 800b032:	f7f5 fa13 	bl	800045c <__aeabi_dcmpeq>
 800b036:	2800      	cmp	r0, #0
 800b038:	d05a      	beq.n	800b0f0 <pow+0x150>
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	0030      	movs	r0, r6
 800b040:	0039      	movs	r1, r7
 800b042:	f7f5 fa0b 	bl	800045c <__aeabi_dcmpeq>
 800b046:	9004      	str	r0, [sp, #16]
 800b048:	2800      	cmp	r0, #0
 800b04a:	d022      	beq.n	800b092 <pow+0xf2>
 800b04c:	2301      	movs	r3, #1
 800b04e:	9306      	str	r3, [sp, #24]
 800b050:	4b9e      	ldr	r3, [pc, #632]	; (800b2cc <pow+0x32c>)
 800b052:	960a      	str	r6, [sp, #40]	; 0x28
 800b054:	970b      	str	r7, [sp, #44]	; 0x2c
 800b056:	9307      	str	r3, [sp, #28]
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	930e      	str	r3, [sp, #56]	; 0x38
 800b05c:	9b00      	ldr	r3, [sp, #0]
 800b05e:	9c01      	ldr	r4, [sp, #4]
 800b060:	9308      	str	r3, [sp, #32]
 800b062:	9409      	str	r4, [sp, #36]	; 0x24
 800b064:	2300      	movs	r3, #0
 800b066:	2400      	movs	r4, #0
 800b068:	930c      	str	r3, [sp, #48]	; 0x30
 800b06a:	940d      	str	r4, [sp, #52]	; 0x34
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0d6      	beq.n	800b020 <pow+0x80>
 800b072:	2200      	movs	r2, #0
 800b074:	4b96      	ldr	r3, [pc, #600]	; (800b2d0 <pow+0x330>)
 800b076:	920c      	str	r2, [sp, #48]	; 0x30
 800b078:	930d      	str	r3, [sp, #52]	; 0x34
 800b07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <pow+0xec>
 800b082:	f7fe fd63 	bl	8009b4c <__errno>
 800b086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	6003      	str	r3, [r0, #0]
 800b08c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b08e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b090:	e070      	b.n	800b174 <pow+0x1d4>
 800b092:	0030      	movs	r0, r6
 800b094:	0039      	movs	r1, r7
 800b096:	f000 feb9 	bl	800be0c <finite>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d06a      	beq.n	800b174 <pow+0x1d4>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	0030      	movs	r0, r6
 800b0a4:	0039      	movs	r1, r7
 800b0a6:	f7f5 f9df 	bl	8000468 <__aeabi_dcmplt>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d062      	beq.n	800b174 <pow+0x1d4>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	9306      	str	r3, [sp, #24]
 800b0b2:	4b86      	ldr	r3, [pc, #536]	; (800b2cc <pow+0x32c>)
 800b0b4:	960a      	str	r6, [sp, #40]	; 0x28
 800b0b6:	970b      	str	r7, [sp, #44]	; 0x2c
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	9c01      	ldr	r4, [sp, #4]
 800b0c2:	9308      	str	r3, [sp, #32]
 800b0c4:	9409      	str	r4, [sp, #36]	; 0x24
 800b0c6:	4b80      	ldr	r3, [pc, #512]	; (800b2c8 <pow+0x328>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	b25b      	sxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <pow+0x13a>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	930c      	str	r3, [sp, #48]	; 0x30
 800b0d6:	940d      	str	r4, [sp, #52]	; 0x34
 800b0d8:	e7a2      	b.n	800b020 <pow+0x80>
 800b0da:	2000      	movs	r0, #0
 800b0dc:	497d      	ldr	r1, [pc, #500]	; (800b2d4 <pow+0x334>)
 800b0de:	900c      	str	r0, [sp, #48]	; 0x30
 800b0e0:	910d      	str	r1, [sp, #52]	; 0x34
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d19c      	bne.n	800b020 <pow+0x80>
 800b0e6:	f7fe fd31 	bl	8009b4c <__errno>
 800b0ea:	2321      	movs	r3, #33	; 0x21
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	e7c4      	b.n	800b07a <pow+0xda>
 800b0f0:	0020      	movs	r0, r4
 800b0f2:	0029      	movs	r1, r5
 800b0f4:	f000 fe8a 	bl	800be0c <finite>
 800b0f8:	9003      	str	r0, [sp, #12]
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d000      	beq.n	800b100 <pow+0x160>
 800b0fe:	e0ab      	b.n	800b258 <pow+0x2b8>
 800b100:	9800      	ldr	r0, [sp, #0]
 800b102:	9901      	ldr	r1, [sp, #4]
 800b104:	f000 fe82 	bl	800be0c <finite>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d100      	bne.n	800b10e <pow+0x16e>
 800b10c:	e0a4      	b.n	800b258 <pow+0x2b8>
 800b10e:	0030      	movs	r0, r6
 800b110:	0039      	movs	r1, r7
 800b112:	f000 fe7b 	bl	800be0c <finite>
 800b116:	2800      	cmp	r0, #0
 800b118:	d100      	bne.n	800b11c <pow+0x17c>
 800b11a:	e09d      	b.n	800b258 <pow+0x2b8>
 800b11c:	002b      	movs	r3, r5
 800b11e:	0022      	movs	r2, r4
 800b120:	0020      	movs	r0, r4
 800b122:	0029      	movs	r1, r5
 800b124:	f7f6 ffe6 	bl	80020f4 <__aeabi_dcmpun>
 800b128:	2500      	movs	r5, #0
 800b12a:	4b67      	ldr	r3, [pc, #412]	; (800b2c8 <pow+0x328>)
 800b12c:	ac06      	add	r4, sp, #24
 800b12e:	575d      	ldrsb	r5, [r3, r5]
 800b130:	4b66      	ldr	r3, [pc, #408]	; (800b2cc <pow+0x32c>)
 800b132:	2800      	cmp	r0, #0
 800b134:	d02f      	beq.n	800b196 <pow+0x1f6>
 800b136:	2201      	movs	r2, #1
 800b138:	6063      	str	r3, [r4, #4]
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	9206      	str	r2, [sp, #24]
 800b13e:	6223      	str	r3, [r4, #32]
 800b140:	6126      	str	r6, [r4, #16]
 800b142:	6167      	str	r7, [r4, #20]
 800b144:	9a00      	ldr	r2, [sp, #0]
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	60a2      	str	r2, [r4, #8]
 800b14a:	60e3      	str	r3, [r4, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	2300      	movs	r3, #0
 800b150:	2d00      	cmp	r5, #0
 800b152:	d113      	bne.n	800b17c <pow+0x1dc>
 800b154:	61a2      	str	r2, [r4, #24]
 800b156:	61e3      	str	r3, [r4, #28]
 800b158:	0020      	movs	r0, r4
 800b15a:	f000 fe5f 	bl	800be1c <matherr>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d014      	beq.n	800b18c <pow+0x1ec>
 800b162:	6a23      	ldr	r3, [r4, #32]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <pow+0x1d0>
 800b168:	f7fe fcf0 	bl	8009b4c <__errno>
 800b16c:	6a23      	ldr	r3, [r4, #32]
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	69e5      	ldr	r5, [r4, #28]
 800b172:	69a4      	ldr	r4, [r4, #24]
 800b174:	0020      	movs	r0, r4
 800b176:	0029      	movs	r1, r5
 800b178:	b011      	add	sp, #68	; 0x44
 800b17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17c:	0010      	movs	r0, r2
 800b17e:	0019      	movs	r1, r3
 800b180:	f7f5 fdee 	bl	8000d60 <__aeabi_ddiv>
 800b184:	61a0      	str	r0, [r4, #24]
 800b186:	61e1      	str	r1, [r4, #28]
 800b188:	2d02      	cmp	r5, #2
 800b18a:	d1e5      	bne.n	800b158 <pow+0x1b8>
 800b18c:	f7fe fcde 	bl	8009b4c <__errno>
 800b190:	2321      	movs	r3, #33	; 0x21
 800b192:	6003      	str	r3, [r0, #0]
 800b194:	e7e5      	b.n	800b162 <pow+0x1c2>
 800b196:	2203      	movs	r2, #3
 800b198:	6063      	str	r3, [r4, #4]
 800b19a:	9206      	str	r2, [sp, #24]
 800b19c:	6220      	str	r0, [r4, #32]
 800b19e:	9a00      	ldr	r2, [sp, #0]
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	6126      	str	r6, [r4, #16]
 800b1a4:	6167      	str	r7, [r4, #20]
 800b1a6:	60a2      	str	r2, [r4, #8]
 800b1a8:	60e3      	str	r3, [r4, #12]
 800b1aa:	2d00      	cmp	r5, #0
 800b1ac:	d12c      	bne.n	800b208 <pow+0x268>
 800b1ae:	9800      	ldr	r0, [sp, #0]
 800b1b0:	9901      	ldr	r1, [sp, #4]
 800b1b2:	22e0      	movs	r2, #224	; 0xe0
 800b1b4:	4b48      	ldr	r3, [pc, #288]	; (800b2d8 <pow+0x338>)
 800b1b6:	0612      	lsls	r2, r2, #24
 800b1b8:	61a2      	str	r2, [r4, #24]
 800b1ba:	61e3      	str	r3, [r4, #28]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f7f5 f952 	bl	8000468 <__aeabi_dcmplt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d040      	beq.n	800b24a <pow+0x2aa>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	4b44      	ldr	r3, [pc, #272]	; (800b2dc <pow+0x33c>)
 800b1cc:	0030      	movs	r0, r6
 800b1ce:	0039      	movs	r1, r7
 800b1d0:	f7f6 f9fa 	bl	80015c8 <__aeabi_dmul>
 800b1d4:	0006      	movs	r6, r0
 800b1d6:	000f      	movs	r7, r1
 800b1d8:	f000 fe28 	bl	800be2c <rint>
 800b1dc:	0002      	movs	r2, r0
 800b1de:	000b      	movs	r3, r1
 800b1e0:	0030      	movs	r0, r6
 800b1e2:	0039      	movs	r1, r7
 800b1e4:	f7f5 f93a 	bl	800045c <__aeabi_dcmpeq>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d104      	bne.n	800b1f6 <pow+0x256>
 800b1ec:	22e0      	movs	r2, #224	; 0xe0
 800b1ee:	4b3c      	ldr	r3, [pc, #240]	; (800b2e0 <pow+0x340>)
 800b1f0:	0612      	lsls	r2, r2, #24
 800b1f2:	61a2      	str	r2, [r4, #24]
 800b1f4:	61e3      	str	r3, [r4, #28]
 800b1f6:	4b34      	ldr	r3, [pc, #208]	; (800b2c8 <pow+0x328>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	b25b      	sxtb	r3, r3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d124      	bne.n	800b24a <pow+0x2aa>
 800b200:	f7fe fca4 	bl	8009b4c <__errno>
 800b204:	2322      	movs	r3, #34	; 0x22
 800b206:	e7c4      	b.n	800b192 <pow+0x1f2>
 800b208:	2200      	movs	r2, #0
 800b20a:	9800      	ldr	r0, [sp, #0]
 800b20c:	9901      	ldr	r1, [sp, #4]
 800b20e:	4b35      	ldr	r3, [pc, #212]	; (800b2e4 <pow+0x344>)
 800b210:	61a2      	str	r2, [r4, #24]
 800b212:	61e3      	str	r3, [r4, #28]
 800b214:	2200      	movs	r2, #0
 800b216:	2300      	movs	r3, #0
 800b218:	f7f5 f926 	bl	8000468 <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0ea      	beq.n	800b1f6 <pow+0x256>
 800b220:	2200      	movs	r2, #0
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <pow+0x33c>)
 800b224:	0030      	movs	r0, r6
 800b226:	0039      	movs	r1, r7
 800b228:	f7f6 f9ce 	bl	80015c8 <__aeabi_dmul>
 800b22c:	0006      	movs	r6, r0
 800b22e:	000f      	movs	r7, r1
 800b230:	f000 fdfc 	bl	800be2c <rint>
 800b234:	0002      	movs	r2, r0
 800b236:	000b      	movs	r3, r1
 800b238:	0030      	movs	r0, r6
 800b23a:	0039      	movs	r1, r7
 800b23c:	f7f5 f90e 	bl	800045c <__aeabi_dcmpeq>
 800b240:	2800      	cmp	r0, #0
 800b242:	d1d8      	bne.n	800b1f6 <pow+0x256>
 800b244:	2200      	movs	r2, #0
 800b246:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <pow+0x334>)
 800b248:	e7d3      	b.n	800b1f2 <pow+0x252>
 800b24a:	0020      	movs	r0, r4
 800b24c:	f000 fde6 	bl	800be1c <matherr>
 800b250:	2800      	cmp	r0, #0
 800b252:	d000      	beq.n	800b256 <pow+0x2b6>
 800b254:	e785      	b.n	800b162 <pow+0x1c2>
 800b256:	e7d3      	b.n	800b200 <pow+0x260>
 800b258:	2200      	movs	r2, #0
 800b25a:	2300      	movs	r3, #0
 800b25c:	0020      	movs	r0, r4
 800b25e:	0029      	movs	r1, r5
 800b260:	f7f5 f8fc 	bl	800045c <__aeabi_dcmpeq>
 800b264:	2800      	cmp	r0, #0
 800b266:	d100      	bne.n	800b26a <pow+0x2ca>
 800b268:	e784      	b.n	800b174 <pow+0x1d4>
 800b26a:	9800      	ldr	r0, [sp, #0]
 800b26c:	9901      	ldr	r1, [sp, #4]
 800b26e:	f000 fdcd 	bl	800be0c <finite>
 800b272:	2800      	cmp	r0, #0
 800b274:	d100      	bne.n	800b278 <pow+0x2d8>
 800b276:	e77d      	b.n	800b174 <pow+0x1d4>
 800b278:	0030      	movs	r0, r6
 800b27a:	0039      	movs	r1, r7
 800b27c:	f000 fdc6 	bl	800be0c <finite>
 800b280:	2800      	cmp	r0, #0
 800b282:	d100      	bne.n	800b286 <pow+0x2e6>
 800b284:	e776      	b.n	800b174 <pow+0x1d4>
 800b286:	2304      	movs	r3, #4
 800b288:	9306      	str	r3, [sp, #24]
 800b28a:	4b10      	ldr	r3, [pc, #64]	; (800b2cc <pow+0x32c>)
 800b28c:	960a      	str	r6, [sp, #40]	; 0x28
 800b28e:	970b      	str	r7, [sp, #44]	; 0x2c
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	2300      	movs	r3, #0
 800b294:	930e      	str	r3, [sp, #56]	; 0x38
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	9c01      	ldr	r4, [sp, #4]
 800b29a:	9308      	str	r3, [sp, #32]
 800b29c:	9409      	str	r4, [sp, #36]	; 0x24
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2400      	movs	r4, #0
 800b2a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2a4:	940d      	str	r4, [sp, #52]	; 0x34
 800b2a6:	4b08      	ldr	r3, [pc, #32]	; (800b2c8 <pow+0x328>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b25b      	sxtb	r3, r3
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d103      	bne.n	800b2b8 <pow+0x318>
 800b2b0:	f7fe fc4c 	bl	8009b4c <__errno>
 800b2b4:	2322      	movs	r3, #34	; 0x22
 800b2b6:	e719      	b.n	800b0ec <pow+0x14c>
 800b2b8:	a806      	add	r0, sp, #24
 800b2ba:	f000 fdaf 	bl	800be1c <matherr>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d000      	beq.n	800b2c4 <pow+0x324>
 800b2c2:	e6da      	b.n	800b07a <pow+0xda>
 800b2c4:	e7f4      	b.n	800b2b0 <pow+0x310>
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	200003dc 	.word	0x200003dc
 800b2cc:	0800dc4f 	.word	0x0800dc4f
 800b2d0:	3ff00000 	.word	0x3ff00000
 800b2d4:	fff00000 	.word	0xfff00000
 800b2d8:	47efffff 	.word	0x47efffff
 800b2dc:	3fe00000 	.word	0x3fe00000
 800b2e0:	c7efffff 	.word	0xc7efffff
 800b2e4:	7ff00000 	.word	0x7ff00000

0800b2e8 <__ieee754_pow>:
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ea:	b097      	sub	sp, #92	; 0x5c
 800b2ec:	9200      	str	r2, [sp, #0]
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	000e      	movs	r6, r1
 800b2f4:	9106      	str	r1, [sp, #24]
 800b2f6:	9900      	ldr	r1, [sp, #0]
 800b2f8:	005d      	lsls	r5, r3, #1
 800b2fa:	9302      	str	r3, [sp, #8]
 800b2fc:	000b      	movs	r3, r1
 800b2fe:	086d      	lsrs	r5, r5, #1
 800b300:	0007      	movs	r7, r0
 800b302:	432b      	orrs	r3, r5
 800b304:	d101      	bne.n	800b30a <__ieee754_pow+0x22>
 800b306:	f000 fc94 	bl	800bc32 <__ieee754_pow+0x94a>
 800b30a:	4b74      	ldr	r3, [pc, #464]	; (800b4dc <__ieee754_pow+0x1f4>)
 800b30c:	0074      	lsls	r4, r6, #1
 800b30e:	0864      	lsrs	r4, r4, #1
 800b310:	469c      	mov	ip, r3
 800b312:	429c      	cmp	r4, r3
 800b314:	dc0b      	bgt.n	800b32e <__ieee754_pow+0x46>
 800b316:	d104      	bne.n	800b322 <__ieee754_pow+0x3a>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d108      	bne.n	800b32e <__ieee754_pow+0x46>
 800b31c:	42a5      	cmp	r5, r4
 800b31e:	dc0c      	bgt.n	800b33a <__ieee754_pow+0x52>
 800b320:	e001      	b.n	800b326 <__ieee754_pow+0x3e>
 800b322:	429d      	cmp	r5, r3
 800b324:	dc03      	bgt.n	800b32e <__ieee754_pow+0x46>
 800b326:	4565      	cmp	r5, ip
 800b328:	d10c      	bne.n	800b344 <__ieee754_pow+0x5c>
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d00a      	beq.n	800b344 <__ieee754_pow+0x5c>
 800b32e:	4b6c      	ldr	r3, [pc, #432]	; (800b4e0 <__ieee754_pow+0x1f8>)
 800b330:	18e4      	adds	r4, r4, r3
 800b332:	4327      	orrs	r7, r4
 800b334:	d101      	bne.n	800b33a <__ieee754_pow+0x52>
 800b336:	f000 fc7c 	bl	800bc32 <__ieee754_pow+0x94a>
 800b33a:	486a      	ldr	r0, [pc, #424]	; (800b4e4 <__ieee754_pow+0x1fc>)
 800b33c:	f000 fd70 	bl	800be20 <nan>
 800b340:	b017      	add	sp, #92	; 0x5c
 800b342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b344:	2300      	movs	r3, #0
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	2e00      	cmp	r6, #0
 800b34a:	da17      	bge.n	800b37c <__ieee754_pow+0x94>
 800b34c:	4a66      	ldr	r2, [pc, #408]	; (800b4e8 <__ieee754_pow+0x200>)
 800b34e:	4295      	cmp	r5, r2
 800b350:	dc47      	bgt.n	800b3e2 <__ieee754_pow+0xfa>
 800b352:	4a66      	ldr	r2, [pc, #408]	; (800b4ec <__ieee754_pow+0x204>)
 800b354:	4295      	cmp	r5, r2
 800b356:	dd11      	ble.n	800b37c <__ieee754_pow+0x94>
 800b358:	4b65      	ldr	r3, [pc, #404]	; (800b4f0 <__ieee754_pow+0x208>)
 800b35a:	152a      	asrs	r2, r5, #20
 800b35c:	18d2      	adds	r2, r2, r3
 800b35e:	2a14      	cmp	r2, #20
 800b360:	dd21      	ble.n	800b3a6 <__ieee754_pow+0xbe>
 800b362:	2034      	movs	r0, #52	; 0x34
 800b364:	1a82      	subs	r2, r0, r2
 800b366:	9800      	ldr	r0, [sp, #0]
 800b368:	40d0      	lsrs	r0, r2
 800b36a:	0003      	movs	r3, r0
 800b36c:	4093      	lsls	r3, r2
 800b36e:	4299      	cmp	r1, r3
 800b370:	d104      	bne.n	800b37c <__ieee754_pow+0x94>
 800b372:	2201      	movs	r2, #1
 800b374:	4010      	ands	r0, r2
 800b376:	1892      	adds	r2, r2, r2
 800b378:	1a13      	subs	r3, r2, r0
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d155      	bne.n	800b42c <__ieee754_pow+0x144>
 800b380:	4565      	cmp	r5, ip
 800b382:	d11f      	bne.n	800b3c4 <__ieee754_pow+0xdc>
 800b384:	4b56      	ldr	r3, [pc, #344]	; (800b4e0 <__ieee754_pow+0x1f8>)
 800b386:	18e3      	adds	r3, r4, r3
 800b388:	431f      	orrs	r7, r3
 800b38a:	d101      	bne.n	800b390 <__ieee754_pow+0xa8>
 800b38c:	f000 fc51 	bl	800bc32 <__ieee754_pow+0x94a>
 800b390:	4b56      	ldr	r3, [pc, #344]	; (800b4ec <__ieee754_pow+0x204>)
 800b392:	429c      	cmp	r4, r3
 800b394:	dd27      	ble.n	800b3e6 <__ieee754_pow+0xfe>
 800b396:	9800      	ldr	r0, [sp, #0]
 800b398:	9901      	ldr	r1, [sp, #4]
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dacf      	bge.n	800b340 <__ieee754_pow+0x58>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	e7cc      	b.n	800b340 <__ieee754_pow+0x58>
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	d140      	bne.n	800b42c <__ieee754_pow+0x144>
 800b3aa:	2314      	movs	r3, #20
 800b3ac:	1a9a      	subs	r2, r3, r2
 800b3ae:	002b      	movs	r3, r5
 800b3b0:	4113      	asrs	r3, r2
 800b3b2:	0019      	movs	r1, r3
 800b3b4:	4091      	lsls	r1, r2
 800b3b6:	428d      	cmp	r5, r1
 800b3b8:	d104      	bne.n	800b3c4 <__ieee754_pow+0xdc>
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	4013      	ands	r3, r2
 800b3be:	1892      	adds	r2, r2, r2
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	4b4b      	ldr	r3, [pc, #300]	; (800b4f4 <__ieee754_pow+0x20c>)
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	d119      	bne.n	800b3fe <__ieee754_pow+0x116>
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	0038      	movs	r0, r7
 800b3ce:	0031      	movs	r1, r6
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dab5      	bge.n	800b340 <__ieee754_pow+0x58>
 800b3d4:	003a      	movs	r2, r7
 800b3d6:	0033      	movs	r3, r6
 800b3d8:	2000      	movs	r0, #0
 800b3da:	4946      	ldr	r1, [pc, #280]	; (800b4f4 <__ieee754_pow+0x20c>)
 800b3dc:	f7f5 fcc0 	bl	8000d60 <__aeabi_ddiv>
 800b3e0:	e7ae      	b.n	800b340 <__ieee754_pow+0x58>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e7c9      	b.n	800b37a <__ieee754_pow+0x92>
 800b3e6:	9b02      	ldr	r3, [sp, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	dad9      	bge.n	800b3a0 <__ieee754_pow+0xb8>
 800b3ec:	2280      	movs	r2, #128	; 0x80
 800b3ee:	0612      	lsls	r2, r2, #24
 800b3f0:	4694      	mov	ip, r2
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	4463      	add	r3, ip
 800b3fa:	0019      	movs	r1, r3
 800b3fc:	e7a0      	b.n	800b340 <__ieee754_pow+0x58>
 800b3fe:	2380      	movs	r3, #128	; 0x80
 800b400:	9a02      	ldr	r2, [sp, #8]
 800b402:	05db      	lsls	r3, r3, #23
 800b404:	429a      	cmp	r2, r3
 800b406:	d106      	bne.n	800b416 <__ieee754_pow+0x12e>
 800b408:	003a      	movs	r2, r7
 800b40a:	0033      	movs	r3, r6
 800b40c:	0038      	movs	r0, r7
 800b40e:	0031      	movs	r1, r6
 800b410:	f7f6 f8da 	bl	80015c8 <__aeabi_dmul>
 800b414:	e794      	b.n	800b340 <__ieee754_pow+0x58>
 800b416:	4b38      	ldr	r3, [pc, #224]	; (800b4f8 <__ieee754_pow+0x210>)
 800b418:	9a02      	ldr	r2, [sp, #8]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d106      	bne.n	800b42c <__ieee754_pow+0x144>
 800b41e:	2e00      	cmp	r6, #0
 800b420:	db04      	blt.n	800b42c <__ieee754_pow+0x144>
 800b422:	0038      	movs	r0, r7
 800b424:	0031      	movs	r1, r6
 800b426:	f000 fc3d 	bl	800bca4 <__ieee754_sqrt>
 800b42a:	e789      	b.n	800b340 <__ieee754_pow+0x58>
 800b42c:	0038      	movs	r0, r7
 800b42e:	0031      	movs	r1, r6
 800b430:	f000 fce8 	bl	800be04 <fabs>
 800b434:	2f00      	cmp	r7, #0
 800b436:	d127      	bne.n	800b488 <__ieee754_pow+0x1a0>
 800b438:	2c00      	cmp	r4, #0
 800b43a:	d004      	beq.n	800b446 <__ieee754_pow+0x15e>
 800b43c:	4a2d      	ldr	r2, [pc, #180]	; (800b4f4 <__ieee754_pow+0x20c>)
 800b43e:	00b3      	lsls	r3, r6, #2
 800b440:	089b      	lsrs	r3, r3, #2
 800b442:	4293      	cmp	r3, r2
 800b444:	d120      	bne.n	800b488 <__ieee754_pow+0x1a0>
 800b446:	9b02      	ldr	r3, [sp, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	da05      	bge.n	800b458 <__ieee754_pow+0x170>
 800b44c:	0002      	movs	r2, r0
 800b44e:	000b      	movs	r3, r1
 800b450:	2000      	movs	r0, #0
 800b452:	4928      	ldr	r1, [pc, #160]	; (800b4f4 <__ieee754_pow+0x20c>)
 800b454:	f7f5 fc84 	bl	8000d60 <__aeabi_ddiv>
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	db00      	blt.n	800b460 <__ieee754_pow+0x178>
 800b45e:	e76f      	b.n	800b340 <__ieee754_pow+0x58>
 800b460:	4b1f      	ldr	r3, [pc, #124]	; (800b4e0 <__ieee754_pow+0x1f8>)
 800b462:	18e4      	adds	r4, r4, r3
 800b464:	9b04      	ldr	r3, [sp, #16]
 800b466:	431c      	orrs	r4, r3
 800b468:	d106      	bne.n	800b478 <__ieee754_pow+0x190>
 800b46a:	0002      	movs	r2, r0
 800b46c:	000b      	movs	r3, r1
 800b46e:	f7f6 fb2b 	bl	8001ac8 <__aeabi_dsub>
 800b472:	0002      	movs	r2, r0
 800b474:	000b      	movs	r3, r1
 800b476:	e7b1      	b.n	800b3dc <__ieee754_pow+0xf4>
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d000      	beq.n	800b480 <__ieee754_pow+0x198>
 800b47e:	e75f      	b.n	800b340 <__ieee754_pow+0x58>
 800b480:	2480      	movs	r4, #128	; 0x80
 800b482:	0624      	lsls	r4, r4, #24
 800b484:	190b      	adds	r3, r1, r4
 800b486:	e7b8      	b.n	800b3fa <__ieee754_pow+0x112>
 800b488:	0ff3      	lsrs	r3, r6, #31
 800b48a:	3b01      	subs	r3, #1
 800b48c:	9310      	str	r3, [sp, #64]	; 0x40
 800b48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	d104      	bne.n	800b4a0 <__ieee754_pow+0x1b8>
 800b496:	003a      	movs	r2, r7
 800b498:	0033      	movs	r3, r6
 800b49a:	0038      	movs	r0, r7
 800b49c:	0031      	movs	r1, r6
 800b49e:	e7e6      	b.n	800b46e <__ieee754_pow+0x186>
 800b4a0:	4b16      	ldr	r3, [pc, #88]	; (800b4fc <__ieee754_pow+0x214>)
 800b4a2:	429d      	cmp	r5, r3
 800b4a4:	dc00      	bgt.n	800b4a8 <__ieee754_pow+0x1c0>
 800b4a6:	e0f5      	b.n	800b694 <__ieee754_pow+0x3ac>
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <__ieee754_pow+0x218>)
 800b4aa:	429d      	cmp	r5, r3
 800b4ac:	dd0b      	ble.n	800b4c6 <__ieee754_pow+0x1de>
 800b4ae:	4b0f      	ldr	r3, [pc, #60]	; (800b4ec <__ieee754_pow+0x204>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	dc0e      	bgt.n	800b4d2 <__ieee754_pow+0x1ea>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	db00      	blt.n	800b4bc <__ieee754_pow+0x1d4>
 800b4ba:	e771      	b.n	800b3a0 <__ieee754_pow+0xb8>
 800b4bc:	4a11      	ldr	r2, [pc, #68]	; (800b504 <__ieee754_pow+0x21c>)
 800b4be:	4b12      	ldr	r3, [pc, #72]	; (800b508 <__ieee754_pow+0x220>)
 800b4c0:	0010      	movs	r0, r2
 800b4c2:	0019      	movs	r1, r3
 800b4c4:	e7a4      	b.n	800b410 <__ieee754_pow+0x128>
 800b4c6:	4b11      	ldr	r3, [pc, #68]	; (800b50c <__ieee754_pow+0x224>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	ddf3      	ble.n	800b4b4 <__ieee754_pow+0x1cc>
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <__ieee754_pow+0x20c>)
 800b4ce:	429c      	cmp	r4, r3
 800b4d0:	dd1e      	ble.n	800b510 <__ieee754_pow+0x228>
 800b4d2:	9b02      	ldr	r3, [sp, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	dcf1      	bgt.n	800b4bc <__ieee754_pow+0x1d4>
 800b4d8:	e762      	b.n	800b3a0 <__ieee754_pow+0xb8>
 800b4da:	46c0      	nop			; (mov r8, r8)
 800b4dc:	7ff00000 	.word	0x7ff00000
 800b4e0:	c0100000 	.word	0xc0100000
 800b4e4:	0800c2ca 	.word	0x0800c2ca
 800b4e8:	433fffff 	.word	0x433fffff
 800b4ec:	3fefffff 	.word	0x3fefffff
 800b4f0:	fffffc01 	.word	0xfffffc01
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	3fe00000 	.word	0x3fe00000
 800b4fc:	41e00000 	.word	0x41e00000
 800b500:	43f00000 	.word	0x43f00000
 800b504:	8800759c 	.word	0x8800759c
 800b508:	7e37e43c 	.word	0x7e37e43c
 800b50c:	3feffffe 	.word	0x3feffffe
 800b510:	2200      	movs	r2, #0
 800b512:	4b52      	ldr	r3, [pc, #328]	; (800b65c <__ieee754_pow+0x374>)
 800b514:	f7f6 fad8 	bl	8001ac8 <__aeabi_dsub>
 800b518:	22c0      	movs	r2, #192	; 0xc0
 800b51a:	4b51      	ldr	r3, [pc, #324]	; (800b660 <__ieee754_pow+0x378>)
 800b51c:	05d2      	lsls	r2, r2, #23
 800b51e:	0006      	movs	r6, r0
 800b520:	000f      	movs	r7, r1
 800b522:	f7f6 f851 	bl	80015c8 <__aeabi_dmul>
 800b526:	4a4f      	ldr	r2, [pc, #316]	; (800b664 <__ieee754_pow+0x37c>)
 800b528:	9002      	str	r0, [sp, #8]
 800b52a:	9103      	str	r1, [sp, #12]
 800b52c:	4b4e      	ldr	r3, [pc, #312]	; (800b668 <__ieee754_pow+0x380>)
 800b52e:	0030      	movs	r0, r6
 800b530:	0039      	movs	r1, r7
 800b532:	f7f6 f849 	bl	80015c8 <__aeabi_dmul>
 800b536:	2200      	movs	r2, #0
 800b538:	9006      	str	r0, [sp, #24]
 800b53a:	9107      	str	r1, [sp, #28]
 800b53c:	4b4b      	ldr	r3, [pc, #300]	; (800b66c <__ieee754_pow+0x384>)
 800b53e:	0030      	movs	r0, r6
 800b540:	0039      	movs	r1, r7
 800b542:	f7f6 f841 	bl	80015c8 <__aeabi_dmul>
 800b546:	0002      	movs	r2, r0
 800b548:	000b      	movs	r3, r1
 800b54a:	4849      	ldr	r0, [pc, #292]	; (800b670 <__ieee754_pow+0x388>)
 800b54c:	4949      	ldr	r1, [pc, #292]	; (800b674 <__ieee754_pow+0x38c>)
 800b54e:	f7f6 fabb 	bl	8001ac8 <__aeabi_dsub>
 800b552:	0032      	movs	r2, r6
 800b554:	003b      	movs	r3, r7
 800b556:	f7f6 f837 	bl	80015c8 <__aeabi_dmul>
 800b55a:	0002      	movs	r2, r0
 800b55c:	000b      	movs	r3, r1
 800b55e:	2000      	movs	r0, #0
 800b560:	4945      	ldr	r1, [pc, #276]	; (800b678 <__ieee754_pow+0x390>)
 800b562:	f7f6 fab1 	bl	8001ac8 <__aeabi_dsub>
 800b566:	0032      	movs	r2, r6
 800b568:	0004      	movs	r4, r0
 800b56a:	000d      	movs	r5, r1
 800b56c:	003b      	movs	r3, r7
 800b56e:	0030      	movs	r0, r6
 800b570:	0039      	movs	r1, r7
 800b572:	f7f6 f829 	bl	80015c8 <__aeabi_dmul>
 800b576:	0002      	movs	r2, r0
 800b578:	000b      	movs	r3, r1
 800b57a:	0020      	movs	r0, r4
 800b57c:	0029      	movs	r1, r5
 800b57e:	f7f6 f823 	bl	80015c8 <__aeabi_dmul>
 800b582:	4a3e      	ldr	r2, [pc, #248]	; (800b67c <__ieee754_pow+0x394>)
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <__ieee754_pow+0x378>)
 800b586:	f7f6 f81f 	bl	80015c8 <__aeabi_dmul>
 800b58a:	0002      	movs	r2, r0
 800b58c:	000b      	movs	r3, r1
 800b58e:	9806      	ldr	r0, [sp, #24]
 800b590:	9907      	ldr	r1, [sp, #28]
 800b592:	f7f6 fa99 	bl	8001ac8 <__aeabi_dsub>
 800b596:	0002      	movs	r2, r0
 800b598:	000b      	movs	r3, r1
 800b59a:	0004      	movs	r4, r0
 800b59c:	000d      	movs	r5, r1
 800b59e:	9802      	ldr	r0, [sp, #8]
 800b5a0:	9903      	ldr	r1, [sp, #12]
 800b5a2:	f7f5 f8cd 	bl	8000740 <__aeabi_dadd>
 800b5a6:	9a02      	ldr	r2, [sp, #8]
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	9006      	str	r0, [sp, #24]
 800b5ae:	9107      	str	r1, [sp, #28]
 800b5b0:	f7f6 fa8a 	bl	8001ac8 <__aeabi_dsub>
 800b5b4:	0002      	movs	r2, r0
 800b5b6:	000b      	movs	r3, r1
 800b5b8:	0020      	movs	r0, r4
 800b5ba:	0029      	movs	r1, r5
 800b5bc:	f7f6 fa84 	bl	8001ac8 <__aeabi_dsub>
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	0006      	movs	r6, r0
 800b5c8:	000f      	movs	r7, r1
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	d000      	beq.n	800b5d0 <__ieee754_pow+0x2e8>
 800b5ce:	e1da      	b.n	800b986 <__ieee754_pow+0x69e>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4c2b      	ldr	r4, [pc, #172]	; (800b680 <__ieee754_pow+0x398>)
 800b5d4:	9302      	str	r3, [sp, #8]
 800b5d6:	9403      	str	r4, [sp, #12]
 800b5d8:	9c00      	ldr	r4, [sp, #0]
 800b5da:	9d01      	ldr	r5, [sp, #4]
 800b5dc:	9800      	ldr	r0, [sp, #0]
 800b5de:	9901      	ldr	r1, [sp, #4]
 800b5e0:	2400      	movs	r4, #0
 800b5e2:	002b      	movs	r3, r5
 800b5e4:	0022      	movs	r2, r4
 800b5e6:	f7f6 fa6f 	bl	8001ac8 <__aeabi_dsub>
 800b5ea:	9a06      	ldr	r2, [sp, #24]
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	f7f5 ffeb 	bl	80015c8 <__aeabi_dmul>
 800b5f2:	9a00      	ldr	r2, [sp, #0]
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	9004      	str	r0, [sp, #16]
 800b5f8:	9105      	str	r1, [sp, #20]
 800b5fa:	0030      	movs	r0, r6
 800b5fc:	0039      	movs	r1, r7
 800b5fe:	f7f5 ffe3 	bl	80015c8 <__aeabi_dmul>
 800b602:	0002      	movs	r2, r0
 800b604:	000b      	movs	r3, r1
 800b606:	9804      	ldr	r0, [sp, #16]
 800b608:	9905      	ldr	r1, [sp, #20]
 800b60a:	f7f5 f899 	bl	8000740 <__aeabi_dadd>
 800b60e:	0022      	movs	r2, r4
 800b610:	002b      	movs	r3, r5
 800b612:	9004      	str	r0, [sp, #16]
 800b614:	9105      	str	r1, [sp, #20]
 800b616:	9806      	ldr	r0, [sp, #24]
 800b618:	9907      	ldr	r1, [sp, #28]
 800b61a:	f7f5 ffd5 	bl	80015c8 <__aeabi_dmul>
 800b61e:	0006      	movs	r6, r0
 800b620:	000f      	movs	r7, r1
 800b622:	000b      	movs	r3, r1
 800b624:	0002      	movs	r2, r0
 800b626:	9804      	ldr	r0, [sp, #16]
 800b628:	9905      	ldr	r1, [sp, #20]
 800b62a:	9606      	str	r6, [sp, #24]
 800b62c:	9707      	str	r7, [sp, #28]
 800b62e:	f7f5 f887 	bl	8000740 <__aeabi_dadd>
 800b632:	4b14      	ldr	r3, [pc, #80]	; (800b684 <__ieee754_pow+0x39c>)
 800b634:	0005      	movs	r5, r0
 800b636:	000c      	movs	r4, r1
 800b638:	9108      	str	r1, [sp, #32]
 800b63a:	4299      	cmp	r1, r3
 800b63c:	dc00      	bgt.n	800b640 <__ieee754_pow+0x358>
 800b63e:	e2d4      	b.n	800bbea <__ieee754_pow+0x902>
 800b640:	4b11      	ldr	r3, [pc, #68]	; (800b688 <__ieee754_pow+0x3a0>)
 800b642:	18cb      	adds	r3, r1, r3
 800b644:	4303      	orrs	r3, r0
 800b646:	d100      	bne.n	800b64a <__ieee754_pow+0x362>
 800b648:	e1d6      	b.n	800b9f8 <__ieee754_pow+0x710>
 800b64a:	9802      	ldr	r0, [sp, #8]
 800b64c:	9903      	ldr	r1, [sp, #12]
 800b64e:	4a0f      	ldr	r2, [pc, #60]	; (800b68c <__ieee754_pow+0x3a4>)
 800b650:	4b0f      	ldr	r3, [pc, #60]	; (800b690 <__ieee754_pow+0x3a8>)
 800b652:	f7f5 ffb9 	bl	80015c8 <__aeabi_dmul>
 800b656:	4a0d      	ldr	r2, [pc, #52]	; (800b68c <__ieee754_pow+0x3a4>)
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <__ieee754_pow+0x3a8>)
 800b65a:	e6d9      	b.n	800b410 <__ieee754_pow+0x128>
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	3ff71547 	.word	0x3ff71547
 800b664:	f85ddf44 	.word	0xf85ddf44
 800b668:	3e54ae0b 	.word	0x3e54ae0b
 800b66c:	3fd00000 	.word	0x3fd00000
 800b670:	55555555 	.word	0x55555555
 800b674:	3fd55555 	.word	0x3fd55555
 800b678:	3fe00000 	.word	0x3fe00000
 800b67c:	652b82fe 	.word	0x652b82fe
 800b680:	bff00000 	.word	0xbff00000
 800b684:	408fffff 	.word	0x408fffff
 800b688:	bf700000 	.word	0xbf700000
 800b68c:	8800759c 	.word	0x8800759c
 800b690:	7e37e43c 	.word	0x7e37e43c
 800b694:	4bbd      	ldr	r3, [pc, #756]	; (800b98c <__ieee754_pow+0x6a4>)
 800b696:	2200      	movs	r2, #0
 800b698:	429c      	cmp	r4, r3
 800b69a:	dc06      	bgt.n	800b6aa <__ieee754_pow+0x3c2>
 800b69c:	2200      	movs	r2, #0
 800b69e:	4bbc      	ldr	r3, [pc, #752]	; (800b990 <__ieee754_pow+0x6a8>)
 800b6a0:	f7f5 ff92 	bl	80015c8 <__aeabi_dmul>
 800b6a4:	2235      	movs	r2, #53	; 0x35
 800b6a6:	000c      	movs	r4, r1
 800b6a8:	4252      	negs	r2, r2
 800b6aa:	4dba      	ldr	r5, [pc, #744]	; (800b994 <__ieee754_pow+0x6ac>)
 800b6ac:	1523      	asrs	r3, r4, #20
 800b6ae:	195b      	adds	r3, r3, r5
 800b6b0:	189b      	adds	r3, r3, r2
 800b6b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b4:	0324      	lsls	r4, r4, #12
 800b6b6:	4db8      	ldr	r5, [pc, #736]	; (800b998 <__ieee754_pow+0x6b0>)
 800b6b8:	4bb8      	ldr	r3, [pc, #736]	; (800b99c <__ieee754_pow+0x6b4>)
 800b6ba:	0b24      	lsrs	r4, r4, #12
 800b6bc:	4325      	orrs	r5, r4
 800b6be:	2600      	movs	r6, #0
 800b6c0:	429c      	cmp	r4, r3
 800b6c2:	dd09      	ble.n	800b6d8 <__ieee754_pow+0x3f0>
 800b6c4:	4bb6      	ldr	r3, [pc, #728]	; (800b9a0 <__ieee754_pow+0x6b8>)
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	dd05      	ble.n	800b6d8 <__ieee754_pow+0x3f0>
 800b6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ce:	199b      	adds	r3, r3, r6
 800b6d0:	2600      	movs	r6, #0
 800b6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d4:	4bb3      	ldr	r3, [pc, #716]	; (800b9a4 <__ieee754_pow+0x6bc>)
 800b6d6:	18ed      	adds	r5, r5, r3
 800b6d8:	0029      	movs	r1, r5
 800b6da:	00f3      	lsls	r3, r6, #3
 800b6dc:	9311      	str	r3, [sp, #68]	; 0x44
 800b6de:	4bb2      	ldr	r3, [pc, #712]	; (800b9a8 <__ieee754_pow+0x6c0>)
 800b6e0:	00f2      	lsls	r2, r6, #3
 800b6e2:	189b      	adds	r3, r3, r2
 800b6e4:	685c      	ldr	r4, [r3, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	930e      	str	r3, [sp, #56]	; 0x38
 800b6ea:	940f      	str	r4, [sp, #60]	; 0x3c
 800b6ec:	001a      	movs	r2, r3
 800b6ee:	0023      	movs	r3, r4
 800b6f0:	900c      	str	r0, [sp, #48]	; 0x30
 800b6f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b6f4:	f7f6 f9e8 	bl	8001ac8 <__aeabi_dsub>
 800b6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fc:	9012      	str	r0, [sp, #72]	; 0x48
 800b6fe:	9113      	str	r1, [sp, #76]	; 0x4c
 800b700:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b702:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b704:	f7f5 f81c 	bl	8000740 <__aeabi_dadd>
 800b708:	0002      	movs	r2, r0
 800b70a:	000b      	movs	r3, r1
 800b70c:	2000      	movs	r0, #0
 800b70e:	49a2      	ldr	r1, [pc, #648]	; (800b998 <__ieee754_pow+0x6b0>)
 800b710:	f7f5 fb26 	bl	8000d60 <__aeabi_ddiv>
 800b714:	0002      	movs	r2, r0
 800b716:	000b      	movs	r3, r1
 800b718:	9014      	str	r0, [sp, #80]	; 0x50
 800b71a:	9115      	str	r1, [sp, #84]	; 0x54
 800b71c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b71e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b720:	f7f5 ff52 	bl	80015c8 <__aeabi_dmul>
 800b724:	9008      	str	r0, [sp, #32]
 800b726:	9109      	str	r1, [sp, #36]	; 0x24
 800b728:	9b08      	ldr	r3, [sp, #32]
 800b72a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b72c:	2180      	movs	r1, #128	; 0x80
 800b72e:	106d      	asrs	r5, r5, #1
 800b730:	0589      	lsls	r1, r1, #22
 800b732:	9306      	str	r3, [sp, #24]
 800b734:	9407      	str	r4, [sp, #28]
 800b736:	430d      	orrs	r5, r1
 800b738:	2300      	movs	r3, #0
 800b73a:	2180      	movs	r1, #128	; 0x80
 800b73c:	2200      	movs	r2, #0
 800b73e:	9306      	str	r3, [sp, #24]
 800b740:	0309      	lsls	r1, r1, #12
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	9c07      	ldr	r4, [sp, #28]
 800b746:	186d      	adds	r5, r5, r1
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	9403      	str	r4, [sp, #12]
 800b74c:	9802      	ldr	r0, [sp, #8]
 800b74e:	9903      	ldr	r1, [sp, #12]
 800b750:	04b6      	lsls	r6, r6, #18
 800b752:	19ab      	adds	r3, r5, r6
 800b754:	0014      	movs	r4, r2
 800b756:	001d      	movs	r5, r3
 800b758:	f7f5 ff36 	bl	80015c8 <__aeabi_dmul>
 800b75c:	0002      	movs	r2, r0
 800b75e:	000b      	movs	r3, r1
 800b760:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b762:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b764:	f7f6 f9b0 	bl	8001ac8 <__aeabi_dsub>
 800b768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b76c:	0006      	movs	r6, r0
 800b76e:	000f      	movs	r7, r1
 800b770:	0020      	movs	r0, r4
 800b772:	0029      	movs	r1, r5
 800b774:	f7f6 f9a8 	bl	8001ac8 <__aeabi_dsub>
 800b778:	0002      	movs	r2, r0
 800b77a:	000b      	movs	r3, r1
 800b77c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b77e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b780:	f7f6 f9a2 	bl	8001ac8 <__aeabi_dsub>
 800b784:	9a02      	ldr	r2, [sp, #8]
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	f7f5 ff1e 	bl	80015c8 <__aeabi_dmul>
 800b78c:	0002      	movs	r2, r0
 800b78e:	000b      	movs	r3, r1
 800b790:	0030      	movs	r0, r6
 800b792:	0039      	movs	r1, r7
 800b794:	f7f6 f998 	bl	8001ac8 <__aeabi_dsub>
 800b798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b79c:	f7f5 ff14 	bl	80015c8 <__aeabi_dmul>
 800b7a0:	9a08      	ldr	r2, [sp, #32]
 800b7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a4:	900c      	str	r0, [sp, #48]	; 0x30
 800b7a6:	910d      	str	r1, [sp, #52]	; 0x34
 800b7a8:	0010      	movs	r0, r2
 800b7aa:	0019      	movs	r1, r3
 800b7ac:	f7f5 ff0c 	bl	80015c8 <__aeabi_dmul>
 800b7b0:	0006      	movs	r6, r0
 800b7b2:	000f      	movs	r7, r1
 800b7b4:	4a7d      	ldr	r2, [pc, #500]	; (800b9ac <__ieee754_pow+0x6c4>)
 800b7b6:	4b7e      	ldr	r3, [pc, #504]	; (800b9b0 <__ieee754_pow+0x6c8>)
 800b7b8:	f7f5 ff06 	bl	80015c8 <__aeabi_dmul>
 800b7bc:	4a7d      	ldr	r2, [pc, #500]	; (800b9b4 <__ieee754_pow+0x6cc>)
 800b7be:	4b7e      	ldr	r3, [pc, #504]	; (800b9b8 <__ieee754_pow+0x6d0>)
 800b7c0:	f7f4 ffbe 	bl	8000740 <__aeabi_dadd>
 800b7c4:	0032      	movs	r2, r6
 800b7c6:	003b      	movs	r3, r7
 800b7c8:	f7f5 fefe 	bl	80015c8 <__aeabi_dmul>
 800b7cc:	4a7b      	ldr	r2, [pc, #492]	; (800b9bc <__ieee754_pow+0x6d4>)
 800b7ce:	4b7c      	ldr	r3, [pc, #496]	; (800b9c0 <__ieee754_pow+0x6d8>)
 800b7d0:	f7f4 ffb6 	bl	8000740 <__aeabi_dadd>
 800b7d4:	0032      	movs	r2, r6
 800b7d6:	003b      	movs	r3, r7
 800b7d8:	f7f5 fef6 	bl	80015c8 <__aeabi_dmul>
 800b7dc:	4a79      	ldr	r2, [pc, #484]	; (800b9c4 <__ieee754_pow+0x6dc>)
 800b7de:	4b7a      	ldr	r3, [pc, #488]	; (800b9c8 <__ieee754_pow+0x6e0>)
 800b7e0:	f7f4 ffae 	bl	8000740 <__aeabi_dadd>
 800b7e4:	0032      	movs	r2, r6
 800b7e6:	003b      	movs	r3, r7
 800b7e8:	f7f5 feee 	bl	80015c8 <__aeabi_dmul>
 800b7ec:	4a77      	ldr	r2, [pc, #476]	; (800b9cc <__ieee754_pow+0x6e4>)
 800b7ee:	4b78      	ldr	r3, [pc, #480]	; (800b9d0 <__ieee754_pow+0x6e8>)
 800b7f0:	f7f4 ffa6 	bl	8000740 <__aeabi_dadd>
 800b7f4:	0032      	movs	r2, r6
 800b7f6:	003b      	movs	r3, r7
 800b7f8:	f7f5 fee6 	bl	80015c8 <__aeabi_dmul>
 800b7fc:	4a75      	ldr	r2, [pc, #468]	; (800b9d4 <__ieee754_pow+0x6ec>)
 800b7fe:	4b76      	ldr	r3, [pc, #472]	; (800b9d8 <__ieee754_pow+0x6f0>)
 800b800:	f7f4 ff9e 	bl	8000740 <__aeabi_dadd>
 800b804:	0032      	movs	r2, r6
 800b806:	0004      	movs	r4, r0
 800b808:	000d      	movs	r5, r1
 800b80a:	003b      	movs	r3, r7
 800b80c:	0030      	movs	r0, r6
 800b80e:	0039      	movs	r1, r7
 800b810:	f7f5 feda 	bl	80015c8 <__aeabi_dmul>
 800b814:	0002      	movs	r2, r0
 800b816:	000b      	movs	r3, r1
 800b818:	0020      	movs	r0, r4
 800b81a:	0029      	movs	r1, r5
 800b81c:	f7f5 fed4 	bl	80015c8 <__aeabi_dmul>
 800b820:	9a02      	ldr	r2, [sp, #8]
 800b822:	9b03      	ldr	r3, [sp, #12]
 800b824:	0004      	movs	r4, r0
 800b826:	000d      	movs	r5, r1
 800b828:	9808      	ldr	r0, [sp, #32]
 800b82a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b82c:	f7f4 ff88 	bl	8000740 <__aeabi_dadd>
 800b830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b834:	f7f5 fec8 	bl	80015c8 <__aeabi_dmul>
 800b838:	0022      	movs	r2, r4
 800b83a:	002b      	movs	r3, r5
 800b83c:	f7f4 ff80 	bl	8000740 <__aeabi_dadd>
 800b840:	9a02      	ldr	r2, [sp, #8]
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	900e      	str	r0, [sp, #56]	; 0x38
 800b846:	910f      	str	r1, [sp, #60]	; 0x3c
 800b848:	0010      	movs	r0, r2
 800b84a:	0019      	movs	r1, r3
 800b84c:	f7f5 febc 	bl	80015c8 <__aeabi_dmul>
 800b850:	2200      	movs	r2, #0
 800b852:	4b62      	ldr	r3, [pc, #392]	; (800b9dc <__ieee754_pow+0x6f4>)
 800b854:	0004      	movs	r4, r0
 800b856:	000d      	movs	r5, r1
 800b858:	f7f4 ff72 	bl	8000740 <__aeabi_dadd>
 800b85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b85e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b860:	f7f4 ff6e 	bl	8000740 <__aeabi_dadd>
 800b864:	9e06      	ldr	r6, [sp, #24]
 800b866:	000f      	movs	r7, r1
 800b868:	0032      	movs	r2, r6
 800b86a:	000b      	movs	r3, r1
 800b86c:	9802      	ldr	r0, [sp, #8]
 800b86e:	9903      	ldr	r1, [sp, #12]
 800b870:	f7f5 feaa 	bl	80015c8 <__aeabi_dmul>
 800b874:	2200      	movs	r2, #0
 800b876:	9002      	str	r0, [sp, #8]
 800b878:	9103      	str	r1, [sp, #12]
 800b87a:	4b58      	ldr	r3, [pc, #352]	; (800b9dc <__ieee754_pow+0x6f4>)
 800b87c:	0030      	movs	r0, r6
 800b87e:	0039      	movs	r1, r7
 800b880:	f7f6 f922 	bl	8001ac8 <__aeabi_dsub>
 800b884:	0022      	movs	r2, r4
 800b886:	002b      	movs	r3, r5
 800b888:	f7f6 f91e 	bl	8001ac8 <__aeabi_dsub>
 800b88c:	0002      	movs	r2, r0
 800b88e:	000b      	movs	r3, r1
 800b890:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b892:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b894:	f7f6 f918 	bl	8001ac8 <__aeabi_dsub>
 800b898:	9a08      	ldr	r2, [sp, #32]
 800b89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89c:	f7f5 fe94 	bl	80015c8 <__aeabi_dmul>
 800b8a0:	0032      	movs	r2, r6
 800b8a2:	0004      	movs	r4, r0
 800b8a4:	000d      	movs	r5, r1
 800b8a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b8a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8aa:	003b      	movs	r3, r7
 800b8ac:	f7f5 fe8c 	bl	80015c8 <__aeabi_dmul>
 800b8b0:	0002      	movs	r2, r0
 800b8b2:	000b      	movs	r3, r1
 800b8b4:	0020      	movs	r0, r4
 800b8b6:	0029      	movs	r1, r5
 800b8b8:	f7f4 ff42 	bl	8000740 <__aeabi_dadd>
 800b8bc:	0004      	movs	r4, r0
 800b8be:	000d      	movs	r5, r1
 800b8c0:	0002      	movs	r2, r0
 800b8c2:	000b      	movs	r3, r1
 800b8c4:	9802      	ldr	r0, [sp, #8]
 800b8c6:	9903      	ldr	r1, [sp, #12]
 800b8c8:	f7f4 ff3a 	bl	8000740 <__aeabi_dadd>
 800b8cc:	22e0      	movs	r2, #224	; 0xe0
 800b8ce:	9e06      	ldr	r6, [sp, #24]
 800b8d0:	0612      	lsls	r2, r2, #24
 800b8d2:	4b43      	ldr	r3, [pc, #268]	; (800b9e0 <__ieee754_pow+0x6f8>)
 800b8d4:	0030      	movs	r0, r6
 800b8d6:	000f      	movs	r7, r1
 800b8d8:	f7f5 fe76 	bl	80015c8 <__aeabi_dmul>
 800b8dc:	9a02      	ldr	r2, [sp, #8]
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	9008      	str	r0, [sp, #32]
 800b8e2:	9109      	str	r1, [sp, #36]	; 0x24
 800b8e4:	0030      	movs	r0, r6
 800b8e6:	0039      	movs	r1, r7
 800b8e8:	f7f6 f8ee 	bl	8001ac8 <__aeabi_dsub>
 800b8ec:	0002      	movs	r2, r0
 800b8ee:	000b      	movs	r3, r1
 800b8f0:	0020      	movs	r0, r4
 800b8f2:	0029      	movs	r1, r5
 800b8f4:	f7f6 f8e8 	bl	8001ac8 <__aeabi_dsub>
 800b8f8:	4a3a      	ldr	r2, [pc, #232]	; (800b9e4 <__ieee754_pow+0x6fc>)
 800b8fa:	4b39      	ldr	r3, [pc, #228]	; (800b9e0 <__ieee754_pow+0x6f8>)
 800b8fc:	f7f5 fe64 	bl	80015c8 <__aeabi_dmul>
 800b900:	4a39      	ldr	r2, [pc, #228]	; (800b9e8 <__ieee754_pow+0x700>)
 800b902:	0004      	movs	r4, r0
 800b904:	000d      	movs	r5, r1
 800b906:	4b39      	ldr	r3, [pc, #228]	; (800b9ec <__ieee754_pow+0x704>)
 800b908:	0030      	movs	r0, r6
 800b90a:	0039      	movs	r1, r7
 800b90c:	f7f5 fe5c 	bl	80015c8 <__aeabi_dmul>
 800b910:	0002      	movs	r2, r0
 800b912:	000b      	movs	r3, r1
 800b914:	0020      	movs	r0, r4
 800b916:	0029      	movs	r1, r5
 800b918:	f7f4 ff12 	bl	8000740 <__aeabi_dadd>
 800b91c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b91e:	4b34      	ldr	r3, [pc, #208]	; (800b9f0 <__ieee754_pow+0x708>)
 800b920:	189b      	adds	r3, r3, r2
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f7f4 ff0b 	bl	8000740 <__aeabi_dadd>
 800b92a:	9002      	str	r0, [sp, #8]
 800b92c:	9103      	str	r1, [sp, #12]
 800b92e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b930:	f7f6 fc34 	bl	800219c <__aeabi_i2d>
 800b934:	0004      	movs	r4, r0
 800b936:	000d      	movs	r5, r1
 800b938:	9808      	ldr	r0, [sp, #32]
 800b93a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b93c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b93e:	4b2d      	ldr	r3, [pc, #180]	; (800b9f4 <__ieee754_pow+0x70c>)
 800b940:	189b      	adds	r3, r3, r2
 800b942:	681e      	ldr	r6, [r3, #0]
 800b944:	685f      	ldr	r7, [r3, #4]
 800b946:	9a02      	ldr	r2, [sp, #8]
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	f7f4 fef9 	bl	8000740 <__aeabi_dadd>
 800b94e:	0032      	movs	r2, r6
 800b950:	003b      	movs	r3, r7
 800b952:	f7f4 fef5 	bl	8000740 <__aeabi_dadd>
 800b956:	0022      	movs	r2, r4
 800b958:	002b      	movs	r3, r5
 800b95a:	f7f4 fef1 	bl	8000740 <__aeabi_dadd>
 800b95e:	9806      	ldr	r0, [sp, #24]
 800b960:	0022      	movs	r2, r4
 800b962:	002b      	movs	r3, r5
 800b964:	9006      	str	r0, [sp, #24]
 800b966:	9107      	str	r1, [sp, #28]
 800b968:	f7f6 f8ae 	bl	8001ac8 <__aeabi_dsub>
 800b96c:	0032      	movs	r2, r6
 800b96e:	003b      	movs	r3, r7
 800b970:	f7f6 f8aa 	bl	8001ac8 <__aeabi_dsub>
 800b974:	9a08      	ldr	r2, [sp, #32]
 800b976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b978:	f7f6 f8a6 	bl	8001ac8 <__aeabi_dsub>
 800b97c:	0002      	movs	r2, r0
 800b97e:	000b      	movs	r3, r1
 800b980:	9802      	ldr	r0, [sp, #8]
 800b982:	9903      	ldr	r1, [sp, #12]
 800b984:	e61a      	b.n	800b5bc <__ieee754_pow+0x2d4>
 800b986:	2300      	movs	r3, #0
 800b988:	4c03      	ldr	r4, [pc, #12]	; (800b998 <__ieee754_pow+0x6b0>)
 800b98a:	e623      	b.n	800b5d4 <__ieee754_pow+0x2ec>
 800b98c:	000fffff 	.word	0x000fffff
 800b990:	43400000 	.word	0x43400000
 800b994:	fffffc01 	.word	0xfffffc01
 800b998:	3ff00000 	.word	0x3ff00000
 800b99c:	0003988e 	.word	0x0003988e
 800b9a0:	000bb679 	.word	0x000bb679
 800b9a4:	fff00000 	.word	0xfff00000
 800b9a8:	0800dc58 	.word	0x0800dc58
 800b9ac:	4a454eef 	.word	0x4a454eef
 800b9b0:	3fca7e28 	.word	0x3fca7e28
 800b9b4:	93c9db65 	.word	0x93c9db65
 800b9b8:	3fcd864a 	.word	0x3fcd864a
 800b9bc:	a91d4101 	.word	0xa91d4101
 800b9c0:	3fd17460 	.word	0x3fd17460
 800b9c4:	518f264d 	.word	0x518f264d
 800b9c8:	3fd55555 	.word	0x3fd55555
 800b9cc:	db6fabff 	.word	0xdb6fabff
 800b9d0:	3fdb6db6 	.word	0x3fdb6db6
 800b9d4:	33333303 	.word	0x33333303
 800b9d8:	3fe33333 	.word	0x3fe33333
 800b9dc:	40080000 	.word	0x40080000
 800b9e0:	3feec709 	.word	0x3feec709
 800b9e4:	dc3a03fd 	.word	0xdc3a03fd
 800b9e8:	145b01f5 	.word	0x145b01f5
 800b9ec:	be3e2fe0 	.word	0xbe3e2fe0
 800b9f0:	0800dc78 	.word	0x0800dc78
 800b9f4:	0800dc68 	.word	0x0800dc68
 800b9f8:	4a90      	ldr	r2, [pc, #576]	; (800bc3c <__ieee754_pow+0x954>)
 800b9fa:	4b91      	ldr	r3, [pc, #580]	; (800bc40 <__ieee754_pow+0x958>)
 800b9fc:	9804      	ldr	r0, [sp, #16]
 800b9fe:	9905      	ldr	r1, [sp, #20]
 800ba00:	f7f4 fe9e 	bl	8000740 <__aeabi_dadd>
 800ba04:	0032      	movs	r2, r6
 800ba06:	9000      	str	r0, [sp, #0]
 800ba08:	9101      	str	r1, [sp, #4]
 800ba0a:	003b      	movs	r3, r7
 800ba0c:	0028      	movs	r0, r5
 800ba0e:	0021      	movs	r1, r4
 800ba10:	f7f6 f85a 	bl	8001ac8 <__aeabi_dsub>
 800ba14:	0002      	movs	r2, r0
 800ba16:	000b      	movs	r3, r1
 800ba18:	9800      	ldr	r0, [sp, #0]
 800ba1a:	9901      	ldr	r1, [sp, #4]
 800ba1c:	f7f4 fd38 	bl	8000490 <__aeabi_dcmpgt>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d000      	beq.n	800ba26 <__ieee754_pow+0x73e>
 800ba24:	e611      	b.n	800b64a <__ieee754_pow+0x362>
 800ba26:	2100      	movs	r1, #0
 800ba28:	4a86      	ldr	r2, [pc, #536]	; (800bc44 <__ieee754_pow+0x95c>)
 800ba2a:	0063      	lsls	r3, r4, #1
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	9100      	str	r1, [sp, #0]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	dd25      	ble.n	800ba80 <__ieee754_pow+0x798>
 800ba34:	4a84      	ldr	r2, [pc, #528]	; (800bc48 <__ieee754_pow+0x960>)
 800ba36:	151b      	asrs	r3, r3, #20
 800ba38:	189b      	adds	r3, r3, r2
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	0352      	lsls	r2, r2, #13
 800ba3e:	4694      	mov	ip, r2
 800ba40:	411a      	asrs	r2, r3
 800ba42:	1914      	adds	r4, r2, r4
 800ba44:	0060      	lsls	r0, r4, #1
 800ba46:	4b81      	ldr	r3, [pc, #516]	; (800bc4c <__ieee754_pow+0x964>)
 800ba48:	0d40      	lsrs	r0, r0, #21
 800ba4a:	4d81      	ldr	r5, [pc, #516]	; (800bc50 <__ieee754_pow+0x968>)
 800ba4c:	18c0      	adds	r0, r0, r3
 800ba4e:	4105      	asrs	r5, r0
 800ba50:	0021      	movs	r1, r4
 800ba52:	43a9      	bics	r1, r5
 800ba54:	000b      	movs	r3, r1
 800ba56:	4661      	mov	r1, ip
 800ba58:	0324      	lsls	r4, r4, #12
 800ba5a:	0b24      	lsrs	r4, r4, #12
 800ba5c:	4321      	orrs	r1, r4
 800ba5e:	2414      	movs	r4, #20
 800ba60:	1a20      	subs	r0, r4, r0
 800ba62:	4101      	asrs	r1, r0
 800ba64:	9100      	str	r1, [sp, #0]
 800ba66:	9908      	ldr	r1, [sp, #32]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	da02      	bge.n	800ba74 <__ieee754_pow+0x78c>
 800ba6e:	9900      	ldr	r1, [sp, #0]
 800ba70:	4249      	negs	r1, r1
 800ba72:	9100      	str	r1, [sp, #0]
 800ba74:	0030      	movs	r0, r6
 800ba76:	0039      	movs	r1, r7
 800ba78:	f7f6 f826 	bl	8001ac8 <__aeabi_dsub>
 800ba7c:	9006      	str	r0, [sp, #24]
 800ba7e:	9107      	str	r1, [sp, #28]
 800ba80:	9a04      	ldr	r2, [sp, #16]
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	9806      	ldr	r0, [sp, #24]
 800ba86:	9907      	ldr	r1, [sp, #28]
 800ba88:	2600      	movs	r6, #0
 800ba8a:	f7f4 fe59 	bl	8000740 <__aeabi_dadd>
 800ba8e:	2200      	movs	r2, #0
 800ba90:	4b70      	ldr	r3, [pc, #448]	; (800bc54 <__ieee754_pow+0x96c>)
 800ba92:	0030      	movs	r0, r6
 800ba94:	000f      	movs	r7, r1
 800ba96:	f7f5 fd97 	bl	80015c8 <__aeabi_dmul>
 800ba9a:	9a06      	ldr	r2, [sp, #24]
 800ba9c:	9b07      	ldr	r3, [sp, #28]
 800ba9e:	9008      	str	r0, [sp, #32]
 800baa0:	9109      	str	r1, [sp, #36]	; 0x24
 800baa2:	0030      	movs	r0, r6
 800baa4:	0039      	movs	r1, r7
 800baa6:	f7f6 f80f 	bl	8001ac8 <__aeabi_dsub>
 800baaa:	0002      	movs	r2, r0
 800baac:	000b      	movs	r3, r1
 800baae:	9804      	ldr	r0, [sp, #16]
 800bab0:	9905      	ldr	r1, [sp, #20]
 800bab2:	f7f6 f809 	bl	8001ac8 <__aeabi_dsub>
 800bab6:	4a68      	ldr	r2, [pc, #416]	; (800bc58 <__ieee754_pow+0x970>)
 800bab8:	4b68      	ldr	r3, [pc, #416]	; (800bc5c <__ieee754_pow+0x974>)
 800baba:	f7f5 fd85 	bl	80015c8 <__aeabi_dmul>
 800babe:	4a68      	ldr	r2, [pc, #416]	; (800bc60 <__ieee754_pow+0x978>)
 800bac0:	0004      	movs	r4, r0
 800bac2:	000d      	movs	r5, r1
 800bac4:	4b67      	ldr	r3, [pc, #412]	; (800bc64 <__ieee754_pow+0x97c>)
 800bac6:	0030      	movs	r0, r6
 800bac8:	0039      	movs	r1, r7
 800baca:	f7f5 fd7d 	bl	80015c8 <__aeabi_dmul>
 800bace:	0002      	movs	r2, r0
 800bad0:	000b      	movs	r3, r1
 800bad2:	0020      	movs	r0, r4
 800bad4:	0029      	movs	r1, r5
 800bad6:	f7f4 fe33 	bl	8000740 <__aeabi_dadd>
 800bada:	0004      	movs	r4, r0
 800badc:	000d      	movs	r5, r1
 800bade:	0002      	movs	r2, r0
 800bae0:	000b      	movs	r3, r1
 800bae2:	9808      	ldr	r0, [sp, #32]
 800bae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bae6:	f7f4 fe2b 	bl	8000740 <__aeabi_dadd>
 800baea:	9a08      	ldr	r2, [sp, #32]
 800baec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baee:	0006      	movs	r6, r0
 800baf0:	000f      	movs	r7, r1
 800baf2:	f7f5 ffe9 	bl	8001ac8 <__aeabi_dsub>
 800baf6:	0002      	movs	r2, r0
 800baf8:	000b      	movs	r3, r1
 800bafa:	0020      	movs	r0, r4
 800bafc:	0029      	movs	r1, r5
 800bafe:	f7f5 ffe3 	bl	8001ac8 <__aeabi_dsub>
 800bb02:	0032      	movs	r2, r6
 800bb04:	9004      	str	r0, [sp, #16]
 800bb06:	9105      	str	r1, [sp, #20]
 800bb08:	003b      	movs	r3, r7
 800bb0a:	0030      	movs	r0, r6
 800bb0c:	0039      	movs	r1, r7
 800bb0e:	f7f5 fd5b 	bl	80015c8 <__aeabi_dmul>
 800bb12:	0004      	movs	r4, r0
 800bb14:	000d      	movs	r5, r1
 800bb16:	4a54      	ldr	r2, [pc, #336]	; (800bc68 <__ieee754_pow+0x980>)
 800bb18:	4b54      	ldr	r3, [pc, #336]	; (800bc6c <__ieee754_pow+0x984>)
 800bb1a:	f7f5 fd55 	bl	80015c8 <__aeabi_dmul>
 800bb1e:	4a54      	ldr	r2, [pc, #336]	; (800bc70 <__ieee754_pow+0x988>)
 800bb20:	4b54      	ldr	r3, [pc, #336]	; (800bc74 <__ieee754_pow+0x98c>)
 800bb22:	f7f5 ffd1 	bl	8001ac8 <__aeabi_dsub>
 800bb26:	0022      	movs	r2, r4
 800bb28:	002b      	movs	r3, r5
 800bb2a:	f7f5 fd4d 	bl	80015c8 <__aeabi_dmul>
 800bb2e:	4a52      	ldr	r2, [pc, #328]	; (800bc78 <__ieee754_pow+0x990>)
 800bb30:	4b52      	ldr	r3, [pc, #328]	; (800bc7c <__ieee754_pow+0x994>)
 800bb32:	f7f4 fe05 	bl	8000740 <__aeabi_dadd>
 800bb36:	0022      	movs	r2, r4
 800bb38:	002b      	movs	r3, r5
 800bb3a:	f7f5 fd45 	bl	80015c8 <__aeabi_dmul>
 800bb3e:	4a50      	ldr	r2, [pc, #320]	; (800bc80 <__ieee754_pow+0x998>)
 800bb40:	4b50      	ldr	r3, [pc, #320]	; (800bc84 <__ieee754_pow+0x99c>)
 800bb42:	f7f5 ffc1 	bl	8001ac8 <__aeabi_dsub>
 800bb46:	0022      	movs	r2, r4
 800bb48:	002b      	movs	r3, r5
 800bb4a:	f7f5 fd3d 	bl	80015c8 <__aeabi_dmul>
 800bb4e:	4a4e      	ldr	r2, [pc, #312]	; (800bc88 <__ieee754_pow+0x9a0>)
 800bb50:	4b4e      	ldr	r3, [pc, #312]	; (800bc8c <__ieee754_pow+0x9a4>)
 800bb52:	f7f4 fdf5 	bl	8000740 <__aeabi_dadd>
 800bb56:	0022      	movs	r2, r4
 800bb58:	002b      	movs	r3, r5
 800bb5a:	f7f5 fd35 	bl	80015c8 <__aeabi_dmul>
 800bb5e:	0002      	movs	r2, r0
 800bb60:	000b      	movs	r3, r1
 800bb62:	0030      	movs	r0, r6
 800bb64:	0039      	movs	r1, r7
 800bb66:	f7f5 ffaf 	bl	8001ac8 <__aeabi_dsub>
 800bb6a:	0004      	movs	r4, r0
 800bb6c:	000d      	movs	r5, r1
 800bb6e:	0002      	movs	r2, r0
 800bb70:	000b      	movs	r3, r1
 800bb72:	0030      	movs	r0, r6
 800bb74:	0039      	movs	r1, r7
 800bb76:	f7f5 fd27 	bl	80015c8 <__aeabi_dmul>
 800bb7a:	2380      	movs	r3, #128	; 0x80
 800bb7c:	9006      	str	r0, [sp, #24]
 800bb7e:	9107      	str	r1, [sp, #28]
 800bb80:	2200      	movs	r2, #0
 800bb82:	05db      	lsls	r3, r3, #23
 800bb84:	0020      	movs	r0, r4
 800bb86:	0029      	movs	r1, r5
 800bb88:	f7f5 ff9e 	bl	8001ac8 <__aeabi_dsub>
 800bb8c:	0002      	movs	r2, r0
 800bb8e:	000b      	movs	r3, r1
 800bb90:	9806      	ldr	r0, [sp, #24]
 800bb92:	9907      	ldr	r1, [sp, #28]
 800bb94:	f7f5 f8e4 	bl	8000d60 <__aeabi_ddiv>
 800bb98:	9a04      	ldr	r2, [sp, #16]
 800bb9a:	9b05      	ldr	r3, [sp, #20]
 800bb9c:	0004      	movs	r4, r0
 800bb9e:	000d      	movs	r5, r1
 800bba0:	0030      	movs	r0, r6
 800bba2:	0039      	movs	r1, r7
 800bba4:	f7f5 fd10 	bl	80015c8 <__aeabi_dmul>
 800bba8:	9a04      	ldr	r2, [sp, #16]
 800bbaa:	9b05      	ldr	r3, [sp, #20]
 800bbac:	f7f4 fdc8 	bl	8000740 <__aeabi_dadd>
 800bbb0:	0002      	movs	r2, r0
 800bbb2:	000b      	movs	r3, r1
 800bbb4:	0020      	movs	r0, r4
 800bbb6:	0029      	movs	r1, r5
 800bbb8:	f7f5 ff86 	bl	8001ac8 <__aeabi_dsub>
 800bbbc:	0032      	movs	r2, r6
 800bbbe:	003b      	movs	r3, r7
 800bbc0:	f7f5 ff82 	bl	8001ac8 <__aeabi_dsub>
 800bbc4:	0002      	movs	r2, r0
 800bbc6:	000b      	movs	r3, r1
 800bbc8:	2000      	movs	r0, #0
 800bbca:	4931      	ldr	r1, [pc, #196]	; (800bc90 <__ieee754_pow+0x9a8>)
 800bbcc:	f7f5 ff7c 	bl	8001ac8 <__aeabi_dsub>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	051b      	lsls	r3, r3, #20
 800bbd4:	185b      	adds	r3, r3, r1
 800bbd6:	151a      	asrs	r2, r3, #20
 800bbd8:	2a00      	cmp	r2, #0
 800bbda:	dc28      	bgt.n	800bc2e <__ieee754_pow+0x946>
 800bbdc:	9a00      	ldr	r2, [sp, #0]
 800bbde:	f000 f9ad 	bl	800bf3c <scalbn>
 800bbe2:	9a02      	ldr	r2, [sp, #8]
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	f7ff fc13 	bl	800b410 <__ieee754_pow+0x128>
 800bbea:	4a2a      	ldr	r2, [pc, #168]	; (800bc94 <__ieee754_pow+0x9ac>)
 800bbec:	004b      	lsls	r3, r1, #1
 800bbee:	085b      	lsrs	r3, r3, #1
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	dc00      	bgt.n	800bbf6 <__ieee754_pow+0x90e>
 800bbf4:	e717      	b.n	800ba26 <__ieee754_pow+0x73e>
 800bbf6:	4b28      	ldr	r3, [pc, #160]	; (800bc98 <__ieee754_pow+0x9b0>)
 800bbf8:	18cb      	adds	r3, r1, r3
 800bbfa:	4303      	orrs	r3, r0
 800bbfc:	d009      	beq.n	800bc12 <__ieee754_pow+0x92a>
 800bbfe:	9802      	ldr	r0, [sp, #8]
 800bc00:	9903      	ldr	r1, [sp, #12]
 800bc02:	4a26      	ldr	r2, [pc, #152]	; (800bc9c <__ieee754_pow+0x9b4>)
 800bc04:	4b26      	ldr	r3, [pc, #152]	; (800bca0 <__ieee754_pow+0x9b8>)
 800bc06:	f7f5 fcdf 	bl	80015c8 <__aeabi_dmul>
 800bc0a:	4a24      	ldr	r2, [pc, #144]	; (800bc9c <__ieee754_pow+0x9b4>)
 800bc0c:	4b24      	ldr	r3, [pc, #144]	; (800bca0 <__ieee754_pow+0x9b8>)
 800bc0e:	f7ff fbff 	bl	800b410 <__ieee754_pow+0x128>
 800bc12:	0032      	movs	r2, r6
 800bc14:	003b      	movs	r3, r7
 800bc16:	f7f5 ff57 	bl	8001ac8 <__aeabi_dsub>
 800bc1a:	0002      	movs	r2, r0
 800bc1c:	000b      	movs	r3, r1
 800bc1e:	9804      	ldr	r0, [sp, #16]
 800bc20:	9905      	ldr	r1, [sp, #20]
 800bc22:	f7f4 fc2b 	bl	800047c <__aeabi_dcmple>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d100      	bne.n	800bc2c <__ieee754_pow+0x944>
 800bc2a:	e6fc      	b.n	800ba26 <__ieee754_pow+0x73e>
 800bc2c:	e7e7      	b.n	800bbfe <__ieee754_pow+0x916>
 800bc2e:	0019      	movs	r1, r3
 800bc30:	e7d7      	b.n	800bbe2 <__ieee754_pow+0x8fa>
 800bc32:	2000      	movs	r0, #0
 800bc34:	4916      	ldr	r1, [pc, #88]	; (800bc90 <__ieee754_pow+0x9a8>)
 800bc36:	f7ff fb83 	bl	800b340 <__ieee754_pow+0x58>
 800bc3a:	46c0      	nop			; (mov r8, r8)
 800bc3c:	652b82fe 	.word	0x652b82fe
 800bc40:	3c971547 	.word	0x3c971547
 800bc44:	3fe00000 	.word	0x3fe00000
 800bc48:	fffffc02 	.word	0xfffffc02
 800bc4c:	fffffc01 	.word	0xfffffc01
 800bc50:	000fffff 	.word	0x000fffff
 800bc54:	3fe62e43 	.word	0x3fe62e43
 800bc58:	fefa39ef 	.word	0xfefa39ef
 800bc5c:	3fe62e42 	.word	0x3fe62e42
 800bc60:	0ca86c39 	.word	0x0ca86c39
 800bc64:	be205c61 	.word	0xbe205c61
 800bc68:	72bea4d0 	.word	0x72bea4d0
 800bc6c:	3e663769 	.word	0x3e663769
 800bc70:	c5d26bf1 	.word	0xc5d26bf1
 800bc74:	3ebbbd41 	.word	0x3ebbbd41
 800bc78:	af25de2c 	.word	0xaf25de2c
 800bc7c:	3f11566a 	.word	0x3f11566a
 800bc80:	16bebd93 	.word	0x16bebd93
 800bc84:	3f66c16c 	.word	0x3f66c16c
 800bc88:	5555553e 	.word	0x5555553e
 800bc8c:	3fc55555 	.word	0x3fc55555
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	4090cbff 	.word	0x4090cbff
 800bc98:	3f6f3400 	.word	0x3f6f3400
 800bc9c:	c2f8f359 	.word	0xc2f8f359
 800bca0:	01a56e1f 	.word	0x01a56e1f

0800bca4 <__ieee754_sqrt>:
 800bca4:	4b54      	ldr	r3, [pc, #336]	; (800bdf8 <__ieee754_sqrt+0x154>)
 800bca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bca8:	001e      	movs	r6, r3
 800bcaa:	0005      	movs	r5, r0
 800bcac:	000c      	movs	r4, r1
 800bcae:	0002      	movs	r2, r0
 800bcb0:	400e      	ands	r6, r1
 800bcb2:	429e      	cmp	r6, r3
 800bcb4:	d10f      	bne.n	800bcd6 <__ieee754_sqrt+0x32>
 800bcb6:	0002      	movs	r2, r0
 800bcb8:	000b      	movs	r3, r1
 800bcba:	f7f5 fc85 	bl	80015c8 <__aeabi_dmul>
 800bcbe:	0002      	movs	r2, r0
 800bcc0:	000b      	movs	r3, r1
 800bcc2:	0028      	movs	r0, r5
 800bcc4:	0021      	movs	r1, r4
 800bcc6:	f7f4 fd3b 	bl	8000740 <__aeabi_dadd>
 800bcca:	0005      	movs	r5, r0
 800bccc:	000c      	movs	r4, r1
 800bcce:	0028      	movs	r0, r5
 800bcd0:	0021      	movs	r1, r4
 800bcd2:	b003      	add	sp, #12
 800bcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	dc0e      	bgt.n	800bcf8 <__ieee754_sqrt+0x54>
 800bcda:	004b      	lsls	r3, r1, #1
 800bcdc:	085b      	lsrs	r3, r3, #1
 800bcde:	4303      	orrs	r3, r0
 800bce0:	d0f5      	beq.n	800bcce <__ieee754_sqrt+0x2a>
 800bce2:	2900      	cmp	r1, #0
 800bce4:	d00a      	beq.n	800bcfc <__ieee754_sqrt+0x58>
 800bce6:	0002      	movs	r2, r0
 800bce8:	000b      	movs	r3, r1
 800bcea:	f7f5 feed 	bl	8001ac8 <__aeabi_dsub>
 800bcee:	0002      	movs	r2, r0
 800bcf0:	000b      	movs	r3, r1
 800bcf2:	f7f5 f835 	bl	8000d60 <__aeabi_ddiv>
 800bcf6:	e7e8      	b.n	800bcca <__ieee754_sqrt+0x26>
 800bcf8:	150b      	asrs	r3, r1, #20
 800bcfa:	d10f      	bne.n	800bd1c <__ieee754_sqrt+0x78>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d06f      	beq.n	800bde2 <__ieee754_sqrt+0x13e>
 800bd02:	2480      	movs	r4, #128	; 0x80
 800bd04:	2000      	movs	r0, #0
 800bd06:	0364      	lsls	r4, r4, #13
 800bd08:	4221      	tst	r1, r4
 800bd0a:	d06e      	beq.n	800bdea <__ieee754_sqrt+0x146>
 800bd0c:	1e44      	subs	r4, r0, #1
 800bd0e:	1b1b      	subs	r3, r3, r4
 800bd10:	2420      	movs	r4, #32
 800bd12:	0015      	movs	r5, r2
 800bd14:	1a24      	subs	r4, r4, r0
 800bd16:	40e5      	lsrs	r5, r4
 800bd18:	4082      	lsls	r2, r0
 800bd1a:	4329      	orrs	r1, r5
 800bd1c:	4837      	ldr	r0, [pc, #220]	; (800bdfc <__ieee754_sqrt+0x158>)
 800bd1e:	0309      	lsls	r1, r1, #12
 800bd20:	1818      	adds	r0, r3, r0
 800bd22:	2380      	movs	r3, #128	; 0x80
 800bd24:	0b09      	lsrs	r1, r1, #12
 800bd26:	035b      	lsls	r3, r3, #13
 800bd28:	4319      	orrs	r1, r3
 800bd2a:	07c3      	lsls	r3, r0, #31
 800bd2c:	d503      	bpl.n	800bd36 <__ieee754_sqrt+0x92>
 800bd2e:	0fd3      	lsrs	r3, r2, #31
 800bd30:	0049      	lsls	r1, r1, #1
 800bd32:	1859      	adds	r1, r3, r1
 800bd34:	0052      	lsls	r2, r2, #1
 800bd36:	2400      	movs	r4, #0
 800bd38:	1043      	asrs	r3, r0, #1
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	0fd3      	lsrs	r3, r2, #31
 800bd3e:	185b      	adds	r3, r3, r1
 800bd40:	2580      	movs	r5, #128	; 0x80
 800bd42:	185b      	adds	r3, r3, r1
 800bd44:	0020      	movs	r0, r4
 800bd46:	2116      	movs	r1, #22
 800bd48:	0052      	lsls	r2, r2, #1
 800bd4a:	03ad      	lsls	r5, r5, #14
 800bd4c:	1946      	adds	r6, r0, r5
 800bd4e:	429e      	cmp	r6, r3
 800bd50:	dc02      	bgt.n	800bd58 <__ieee754_sqrt+0xb4>
 800bd52:	1970      	adds	r0, r6, r5
 800bd54:	1b9b      	subs	r3, r3, r6
 800bd56:	1964      	adds	r4, r4, r5
 800bd58:	0fd6      	lsrs	r6, r2, #31
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	3901      	subs	r1, #1
 800bd5e:	18f3      	adds	r3, r6, r3
 800bd60:	0052      	lsls	r2, r2, #1
 800bd62:	086d      	lsrs	r5, r5, #1
 800bd64:	2900      	cmp	r1, #0
 800bd66:	d1f1      	bne.n	800bd4c <__ieee754_sqrt+0xa8>
 800bd68:	2520      	movs	r5, #32
 800bd6a:	2680      	movs	r6, #128	; 0x80
 800bd6c:	46ac      	mov	ip, r5
 800bd6e:	9100      	str	r1, [sp, #0]
 800bd70:	0636      	lsls	r6, r6, #24
 800bd72:	9d00      	ldr	r5, [sp, #0]
 800bd74:	1977      	adds	r7, r6, r5
 800bd76:	4283      	cmp	r3, r0
 800bd78:	dc02      	bgt.n	800bd80 <__ieee754_sqrt+0xdc>
 800bd7a:	d112      	bne.n	800bda2 <__ieee754_sqrt+0xfe>
 800bd7c:	4297      	cmp	r7, r2
 800bd7e:	d810      	bhi.n	800bda2 <__ieee754_sqrt+0xfe>
 800bd80:	19bd      	adds	r5, r7, r6
 800bd82:	9500      	str	r5, [sp, #0]
 800bd84:	0005      	movs	r5, r0
 800bd86:	2f00      	cmp	r7, #0
 800bd88:	da03      	bge.n	800bd92 <__ieee754_sqrt+0xee>
 800bd8a:	9d00      	ldr	r5, [sp, #0]
 800bd8c:	43ed      	mvns	r5, r5
 800bd8e:	0fed      	lsrs	r5, r5, #31
 800bd90:	1945      	adds	r5, r0, r5
 800bd92:	1a1b      	subs	r3, r3, r0
 800bd94:	42ba      	cmp	r2, r7
 800bd96:	4180      	sbcs	r0, r0
 800bd98:	4240      	negs	r0, r0
 800bd9a:	1a1b      	subs	r3, r3, r0
 800bd9c:	0028      	movs	r0, r5
 800bd9e:	1bd2      	subs	r2, r2, r7
 800bda0:	1989      	adds	r1, r1, r6
 800bda2:	0fd5      	lsrs	r5, r2, #31
 800bda4:	18ed      	adds	r5, r5, r3
 800bda6:	18eb      	adds	r3, r5, r3
 800bda8:	2501      	movs	r5, #1
 800bdaa:	426d      	negs	r5, r5
 800bdac:	44ac      	add	ip, r5
 800bdae:	4665      	mov	r5, ip
 800bdb0:	0052      	lsls	r2, r2, #1
 800bdb2:	0876      	lsrs	r6, r6, #1
 800bdb4:	2d00      	cmp	r5, #0
 800bdb6:	d1dc      	bne.n	800bd72 <__ieee754_sqrt+0xce>
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d003      	beq.n	800bdc4 <__ieee754_sqrt+0x120>
 800bdbc:	1c4b      	adds	r3, r1, #1
 800bdbe:	d117      	bne.n	800bdf0 <__ieee754_sqrt+0x14c>
 800bdc0:	4661      	mov	r1, ip
 800bdc2:	3401      	adds	r4, #1
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <__ieee754_sqrt+0x15c>)
 800bdc6:	1060      	asrs	r0, r4, #1
 800bdc8:	18c0      	adds	r0, r0, r3
 800bdca:	0849      	lsrs	r1, r1, #1
 800bdcc:	07e3      	lsls	r3, r4, #31
 800bdce:	d502      	bpl.n	800bdd6 <__ieee754_sqrt+0x132>
 800bdd0:	2380      	movs	r3, #128	; 0x80
 800bdd2:	061b      	lsls	r3, r3, #24
 800bdd4:	4319      	orrs	r1, r3
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	000d      	movs	r5, r1
 800bdda:	051c      	lsls	r4, r3, #20
 800bddc:	1823      	adds	r3, r4, r0
 800bdde:	001c      	movs	r4, r3
 800bde0:	e775      	b.n	800bcce <__ieee754_sqrt+0x2a>
 800bde2:	0ad1      	lsrs	r1, r2, #11
 800bde4:	3b15      	subs	r3, #21
 800bde6:	0552      	lsls	r2, r2, #21
 800bde8:	e789      	b.n	800bcfe <__ieee754_sqrt+0x5a>
 800bdea:	0049      	lsls	r1, r1, #1
 800bdec:	3001      	adds	r0, #1
 800bdee:	e78b      	b.n	800bd08 <__ieee754_sqrt+0x64>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	3101      	adds	r1, #1
 800bdf4:	4399      	bics	r1, r3
 800bdf6:	e7e5      	b.n	800bdc4 <__ieee754_sqrt+0x120>
 800bdf8:	7ff00000 	.word	0x7ff00000
 800bdfc:	fffffc01 	.word	0xfffffc01
 800be00:	3fe00000 	.word	0x3fe00000

0800be04 <fabs>:
 800be04:	0049      	lsls	r1, r1, #1
 800be06:	084b      	lsrs	r3, r1, #1
 800be08:	0019      	movs	r1, r3
 800be0a:	4770      	bx	lr

0800be0c <finite>:
 800be0c:	0048      	lsls	r0, r1, #1
 800be0e:	4b02      	ldr	r3, [pc, #8]	; (800be18 <finite+0xc>)
 800be10:	0840      	lsrs	r0, r0, #1
 800be12:	18c0      	adds	r0, r0, r3
 800be14:	0fc0      	lsrs	r0, r0, #31
 800be16:	4770      	bx	lr
 800be18:	80100000 	.word	0x80100000

0800be1c <matherr>:
 800be1c:	2000      	movs	r0, #0
 800be1e:	4770      	bx	lr

0800be20 <nan>:
 800be20:	2000      	movs	r0, #0
 800be22:	4901      	ldr	r1, [pc, #4]	; (800be28 <nan+0x8>)
 800be24:	4770      	bx	lr
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	7ff80000 	.word	0x7ff80000

0800be2c <rint>:
 800be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2e:	004e      	lsls	r6, r1, #1
 800be30:	0d76      	lsrs	r6, r6, #21
 800be32:	46b4      	mov	ip, r6
 800be34:	4e3d      	ldr	r6, [pc, #244]	; (800bf2c <rint+0x100>)
 800be36:	b085      	sub	sp, #20
 800be38:	4466      	add	r6, ip
 800be3a:	0005      	movs	r5, r0
 800be3c:	000b      	movs	r3, r1
 800be3e:	9101      	str	r1, [sp, #4]
 800be40:	0002      	movs	r2, r0
 800be42:	0fcc      	lsrs	r4, r1, #31
 800be44:	2e13      	cmp	r6, #19
 800be46:	dc55      	bgt.n	800bef4 <rint+0xc8>
 800be48:	2e00      	cmp	r6, #0
 800be4a:	da28      	bge.n	800be9e <rint+0x72>
 800be4c:	004a      	lsls	r2, r1, #1
 800be4e:	0852      	lsrs	r2, r2, #1
 800be50:	4302      	orrs	r2, r0
 800be52:	d022      	beq.n	800be9a <rint+0x6e>
 800be54:	030a      	lsls	r2, r1, #12
 800be56:	0b12      	lsrs	r2, r2, #12
 800be58:	4315      	orrs	r5, r2
 800be5a:	426a      	negs	r2, r5
 800be5c:	432a      	orrs	r2, r5
 800be5e:	2580      	movs	r5, #128	; 0x80
 800be60:	0c4b      	lsrs	r3, r1, #17
 800be62:	0b12      	lsrs	r2, r2, #12
 800be64:	032d      	lsls	r5, r5, #12
 800be66:	045b      	lsls	r3, r3, #17
 800be68:	402a      	ands	r2, r5
 800be6a:	431a      	orrs	r2, r3
 800be6c:	4b30      	ldr	r3, [pc, #192]	; (800bf30 <rint+0x104>)
 800be6e:	0011      	movs	r1, r2
 800be70:	00e2      	lsls	r2, r4, #3
 800be72:	189b      	adds	r3, r3, r2
 800be74:	681e      	ldr	r6, [r3, #0]
 800be76:	685f      	ldr	r7, [r3, #4]
 800be78:	0032      	movs	r2, r6
 800be7a:	003b      	movs	r3, r7
 800be7c:	f7f4 fc60 	bl	8000740 <__aeabi_dadd>
 800be80:	9002      	str	r0, [sp, #8]
 800be82:	9103      	str	r1, [sp, #12]
 800be84:	9802      	ldr	r0, [sp, #8]
 800be86:	9903      	ldr	r1, [sp, #12]
 800be88:	003b      	movs	r3, r7
 800be8a:	0032      	movs	r2, r6
 800be8c:	f7f5 fe1c 	bl	8001ac8 <__aeabi_dsub>
 800be90:	004b      	lsls	r3, r1, #1
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	07e4      	lsls	r4, r4, #31
 800be96:	4323      	orrs	r3, r4
 800be98:	0019      	movs	r1, r3
 800be9a:	b005      	add	sp, #20
 800be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9e:	4d25      	ldr	r5, [pc, #148]	; (800bf34 <rint+0x108>)
 800bea0:	4135      	asrs	r5, r6
 800bea2:	002f      	movs	r7, r5
 800bea4:	400f      	ands	r7, r1
 800bea6:	4307      	orrs	r7, r0
 800bea8:	d0f7      	beq.n	800be9a <rint+0x6e>
 800beaa:	086d      	lsrs	r5, r5, #1
 800beac:	0028      	movs	r0, r5
 800beae:	4008      	ands	r0, r1
 800beb0:	4310      	orrs	r0, r2
 800beb2:	2200      	movs	r2, #0
 800beb4:	4290      	cmp	r0, r2
 800beb6:	d009      	beq.n	800becc <rint+0xa0>
 800beb8:	2e13      	cmp	r6, #19
 800beba:	d101      	bne.n	800bec0 <rint+0x94>
 800bebc:	2280      	movs	r2, #128	; 0x80
 800bebe:	0612      	lsls	r2, r2, #24
 800bec0:	2780      	movs	r7, #128	; 0x80
 800bec2:	02ff      	lsls	r7, r7, #11
 800bec4:	4137      	asrs	r7, r6
 800bec6:	43ab      	bics	r3, r5
 800bec8:	431f      	orrs	r7, r3
 800beca:	9701      	str	r7, [sp, #4]
 800becc:	4b18      	ldr	r3, [pc, #96]	; (800bf30 <rint+0x104>)
 800bece:	00e4      	lsls	r4, r4, #3
 800bed0:	191c      	adds	r4, r3, r4
 800bed2:	6865      	ldr	r5, [r4, #4]
 800bed4:	6824      	ldr	r4, [r4, #0]
 800bed6:	9901      	ldr	r1, [sp, #4]
 800bed8:	002b      	movs	r3, r5
 800beda:	0010      	movs	r0, r2
 800bedc:	0022      	movs	r2, r4
 800bede:	f7f4 fc2f 	bl	8000740 <__aeabi_dadd>
 800bee2:	9002      	str	r0, [sp, #8]
 800bee4:	9103      	str	r1, [sp, #12]
 800bee6:	9802      	ldr	r0, [sp, #8]
 800bee8:	9903      	ldr	r1, [sp, #12]
 800beea:	0022      	movs	r2, r4
 800beec:	002b      	movs	r3, r5
 800beee:	f7f5 fdeb 	bl	8001ac8 <__aeabi_dsub>
 800bef2:	e7d2      	b.n	800be9a <rint+0x6e>
 800bef4:	2e33      	cmp	r6, #51	; 0x33
 800bef6:	dd08      	ble.n	800bf0a <rint+0xde>
 800bef8:	2380      	movs	r3, #128	; 0x80
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	429e      	cmp	r6, r3
 800befe:	d1cc      	bne.n	800be9a <rint+0x6e>
 800bf00:	0002      	movs	r2, r0
 800bf02:	000b      	movs	r3, r1
 800bf04:	f7f4 fc1c 	bl	8000740 <__aeabi_dadd>
 800bf08:	e7c7      	b.n	800be9a <rint+0x6e>
 800bf0a:	2601      	movs	r6, #1
 800bf0c:	4d0a      	ldr	r5, [pc, #40]	; (800bf38 <rint+0x10c>)
 800bf0e:	4276      	negs	r6, r6
 800bf10:	4465      	add	r5, ip
 800bf12:	40ee      	lsrs	r6, r5
 800bf14:	4206      	tst	r6, r0
 800bf16:	d0c0      	beq.n	800be9a <rint+0x6e>
 800bf18:	0876      	lsrs	r6, r6, #1
 800bf1a:	4206      	tst	r6, r0
 800bf1c:	d0d6      	beq.n	800becc <rint+0xa0>
 800bf1e:	2380      	movs	r3, #128	; 0x80
 800bf20:	05db      	lsls	r3, r3, #23
 800bf22:	412b      	asrs	r3, r5
 800bf24:	43b2      	bics	r2, r6
 800bf26:	431a      	orrs	r2, r3
 800bf28:	e7d0      	b.n	800becc <rint+0xa0>
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	fffffc01 	.word	0xfffffc01
 800bf30:	0800dc88 	.word	0x0800dc88
 800bf34:	000fffff 	.word	0x000fffff
 800bf38:	fffffbed 	.word	0xfffffbed

0800bf3c <scalbn>:
 800bf3c:	004b      	lsls	r3, r1, #1
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	0d5b      	lsrs	r3, r3, #21
 800bf42:	0014      	movs	r4, r2
 800bf44:	000a      	movs	r2, r1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10e      	bne.n	800bf68 <scalbn+0x2c>
 800bf4a:	004b      	lsls	r3, r1, #1
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	4303      	orrs	r3, r0
 800bf50:	d011      	beq.n	800bf76 <scalbn+0x3a>
 800bf52:	2200      	movs	r2, #0
 800bf54:	4b20      	ldr	r3, [pc, #128]	; (800bfd8 <scalbn+0x9c>)
 800bf56:	f7f5 fb37 	bl	80015c8 <__aeabi_dmul>
 800bf5a:	4b20      	ldr	r3, [pc, #128]	; (800bfdc <scalbn+0xa0>)
 800bf5c:	000a      	movs	r2, r1
 800bf5e:	429c      	cmp	r4, r3
 800bf60:	da0a      	bge.n	800bf78 <scalbn+0x3c>
 800bf62:	4a1f      	ldr	r2, [pc, #124]	; (800bfe0 <scalbn+0xa4>)
 800bf64:	4b1f      	ldr	r3, [pc, #124]	; (800bfe4 <scalbn+0xa8>)
 800bf66:	e016      	b.n	800bf96 <scalbn+0x5a>
 800bf68:	4d1f      	ldr	r5, [pc, #124]	; (800bfe8 <scalbn+0xac>)
 800bf6a:	42ab      	cmp	r3, r5
 800bf6c:	d107      	bne.n	800bf7e <scalbn+0x42>
 800bf6e:	0002      	movs	r2, r0
 800bf70:	000b      	movs	r3, r1
 800bf72:	f7f4 fbe5 	bl	8000740 <__aeabi_dadd>
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	004b      	lsls	r3, r1, #1
 800bf7a:	0d5b      	lsrs	r3, r3, #21
 800bf7c:	3b36      	subs	r3, #54	; 0x36
 800bf7e:	4d1b      	ldr	r5, [pc, #108]	; (800bfec <scalbn+0xb0>)
 800bf80:	18e3      	adds	r3, r4, r3
 800bf82:	42ab      	cmp	r3, r5
 800bf84:	dd0a      	ble.n	800bf9c <scalbn+0x60>
 800bf86:	0002      	movs	r2, r0
 800bf88:	000b      	movs	r3, r1
 800bf8a:	4819      	ldr	r0, [pc, #100]	; (800bff0 <scalbn+0xb4>)
 800bf8c:	4919      	ldr	r1, [pc, #100]	; (800bff4 <scalbn+0xb8>)
 800bf8e:	f000 f839 	bl	800c004 <copysign>
 800bf92:	4a17      	ldr	r2, [pc, #92]	; (800bff0 <scalbn+0xb4>)
 800bf94:	4b17      	ldr	r3, [pc, #92]	; (800bff4 <scalbn+0xb8>)
 800bf96:	f7f5 fb17 	bl	80015c8 <__aeabi_dmul>
 800bf9a:	e7ec      	b.n	800bf76 <scalbn+0x3a>
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dd05      	ble.n	800bfac <scalbn+0x70>
 800bfa0:	4c15      	ldr	r4, [pc, #84]	; (800bff8 <scalbn+0xbc>)
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	4022      	ands	r2, r4
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	0011      	movs	r1, r2
 800bfaa:	e7e4      	b.n	800bf76 <scalbn+0x3a>
 800bfac:	001d      	movs	r5, r3
 800bfae:	3535      	adds	r5, #53	; 0x35
 800bfb0:	da09      	bge.n	800bfc6 <scalbn+0x8a>
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <scalbn+0xc0>)
 800bfb4:	0002      	movs	r2, r0
 800bfb6:	429c      	cmp	r4, r3
 800bfb8:	dce6      	bgt.n	800bf88 <scalbn+0x4c>
 800bfba:	000b      	movs	r3, r1
 800bfbc:	4808      	ldr	r0, [pc, #32]	; (800bfe0 <scalbn+0xa4>)
 800bfbe:	4909      	ldr	r1, [pc, #36]	; (800bfe4 <scalbn+0xa8>)
 800bfc0:	f000 f820 	bl	800c004 <copysign>
 800bfc4:	e7cd      	b.n	800bf62 <scalbn+0x26>
 800bfc6:	4c0c      	ldr	r4, [pc, #48]	; (800bff8 <scalbn+0xbc>)
 800bfc8:	3336      	adds	r3, #54	; 0x36
 800bfca:	4022      	ands	r2, r4
 800bfcc:	051b      	lsls	r3, r3, #20
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	0019      	movs	r1, r3
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <scalbn+0xc4>)
 800bfd6:	e7de      	b.n	800bf96 <scalbn+0x5a>
 800bfd8:	43500000 	.word	0x43500000
 800bfdc:	ffff3cb0 	.word	0xffff3cb0
 800bfe0:	c2f8f359 	.word	0xc2f8f359
 800bfe4:	01a56e1f 	.word	0x01a56e1f
 800bfe8:	000007ff 	.word	0x000007ff
 800bfec:	000007fe 	.word	0x000007fe
 800bff0:	8800759c 	.word	0x8800759c
 800bff4:	7e37e43c 	.word	0x7e37e43c
 800bff8:	800fffff 	.word	0x800fffff
 800bffc:	0000c350 	.word	0x0000c350
 800c000:	3c900000 	.word	0x3c900000

0800c004 <copysign>:
 800c004:	b530      	push	{r4, r5, lr}
 800c006:	004a      	lsls	r2, r1, #1
 800c008:	0fdb      	lsrs	r3, r3, #31
 800c00a:	07db      	lsls	r3, r3, #31
 800c00c:	0852      	lsrs	r2, r2, #1
 800c00e:	431a      	orrs	r2, r3
 800c010:	0011      	movs	r1, r2
 800c012:	bd30      	pop	{r4, r5, pc}

0800c014 <_init>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01a:	bc08      	pop	{r3}
 800c01c:	469e      	mov	lr, r3
 800c01e:	4770      	bx	lr

0800c020 <_fini>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr
