
MIDIcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc90  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003268  0800dd50  0800dd50  0001dd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fb8  08010fb8  00020fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fc0  08010fc0  00020fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010fc4  08010fc4  00020fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005e8  20000000  08010fc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004374  200005e8  080115b0  000305e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000495c  080115b0  0003495c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fc79  00000000  00000000  00030610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005a37  00000000  00000000  00060289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011dea  00000000  00000000  00065cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001650  00000000  00000000  00077ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e78  00000000  00000000  00079100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e712  00000000  00000000  0007af78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007ad5  00000000  00000000  0008968a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009115f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000053d8  00000000  00000000  000911dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200005e8 	.word	0x200005e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800dd34 	.word	0x0800dd34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200005ec 	.word	0x200005ec
 8000100:	0800dd34 	.word	0x0800dd34

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fd11 	bl	8001e74 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc6b 	bl	8001d38 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd03 	bl	8001e74 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcf9 	bl	8001e74 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc8b 	bl	8001dac <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc81 	bl	8001dac <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_uldivmod>:
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d111      	bne.n	80004e0 <__aeabi_uldivmod+0x28>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	d10f      	bne.n	80004e0 <__aeabi_uldivmod+0x28>
 80004c0:	2900      	cmp	r1, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_uldivmod+0xe>
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d002      	beq.n	80004ce <__aeabi_uldivmod+0x16>
 80004c8:	2100      	movs	r1, #0
 80004ca:	43c9      	mvns	r1, r1
 80004cc:	1c08      	adds	r0, r1, #0
 80004ce:	b407      	push	{r0, r1, r2}
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <__aeabi_uldivmod+0x24>)
 80004d2:	a102      	add	r1, pc, #8	; (adr r1, 80004dc <__aeabi_uldivmod+0x24>)
 80004d4:	1840      	adds	r0, r0, r1
 80004d6:	9002      	str	r0, [sp, #8]
 80004d8:	bd03      	pop	{r0, r1, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	ffffff5d 	.word	0xffffff5d
 80004e0:	b403      	push	{r0, r1}
 80004e2:	4668      	mov	r0, sp
 80004e4:	b501      	push	{r0, lr}
 80004e6:	9802      	ldr	r0, [sp, #8]
 80004e8:	f000 f81e 	bl	8000528 <__udivmoddi4>
 80004ec:	9b01      	ldr	r3, [sp, #4]
 80004ee:	469e      	mov	lr, r3
 80004f0:	b002      	add	sp, #8
 80004f2:	bc0c      	pop	{r2, r3}
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_f2uiz>:
 80004f8:	219e      	movs	r1, #158	; 0x9e
 80004fa:	b510      	push	{r4, lr}
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	1c04      	adds	r4, r0, #0
 8000500:	f002 fb76 	bl	8002bf0 <__aeabi_fcmpge>
 8000504:	2800      	cmp	r0, #0
 8000506:	d103      	bne.n	8000510 <__aeabi_f2uiz+0x18>
 8000508:	1c20      	adds	r0, r4, #0
 800050a:	f000 fd1b 	bl	8000f44 <__aeabi_f2iz>
 800050e:	bd10      	pop	{r4, pc}
 8000510:	219e      	movs	r1, #158	; 0x9e
 8000512:	1c20      	adds	r0, r4, #0
 8000514:	05c9      	lsls	r1, r1, #23
 8000516:	f000 fb79 	bl	8000c0c <__aeabi_fsub>
 800051a:	f000 fd13 	bl	8000f44 <__aeabi_f2iz>
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	061b      	lsls	r3, r3, #24
 8000522:	469c      	mov	ip, r3
 8000524:	4460      	add	r0, ip
 8000526:	e7f2      	b.n	800050e <__aeabi_f2uiz+0x16>

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	464e      	mov	r6, r9
 800052e:	4645      	mov	r5, r8
 8000530:	46de      	mov	lr, fp
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	0004      	movs	r4, r0
 8000536:	b083      	sub	sp, #12
 8000538:	000d      	movs	r5, r1
 800053a:	4692      	mov	sl, r2
 800053c:	4699      	mov	r9, r3
 800053e:	428b      	cmp	r3, r1
 8000540:	d82f      	bhi.n	80005a2 <__udivmoddi4+0x7a>
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x76>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f002 fb7a 	bl	8002c40 <__clzdi2>
 800054c:	0029      	movs	r1, r5
 800054e:	0006      	movs	r6, r0
 8000550:	0020      	movs	r0, r4
 8000552:	f002 fb75 	bl	8002c40 <__clzdi2>
 8000556:	1a33      	subs	r3, r6, r0
 8000558:	4698      	mov	r8, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	469b      	mov	fp, r3
 800055e:	d500      	bpl.n	8000562 <__udivmoddi4+0x3a>
 8000560:	e074      	b.n	800064c <__udivmoddi4+0x124>
 8000562:	4653      	mov	r3, sl
 8000564:	465a      	mov	r2, fp
 8000566:	4093      	lsls	r3, r2
 8000568:	001f      	movs	r7, r3
 800056a:	4653      	mov	r3, sl
 800056c:	4642      	mov	r2, r8
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d829      	bhi.n	80005ca <__udivmoddi4+0xa2>
 8000576:	d026      	beq.n	80005c6 <__udivmoddi4+0x9e>
 8000578:	465b      	mov	r3, fp
 800057a:	1ba4      	subs	r4, r4, r6
 800057c:	41bd      	sbcs	r5, r7
 800057e:	2b00      	cmp	r3, #0
 8000580:	da00      	bge.n	8000584 <__udivmoddi4+0x5c>
 8000582:	e079      	b.n	8000678 <__udivmoddi4+0x150>
 8000584:	2200      	movs	r2, #0
 8000586:	2300      	movs	r3, #0
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2301      	movs	r3, #1
 800058e:	465a      	mov	r2, fp
 8000590:	4093      	lsls	r3, r2
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2301      	movs	r3, #1
 8000596:	4642      	mov	r2, r8
 8000598:	4093      	lsls	r3, r2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	e019      	b.n	80005d2 <__udivmoddi4+0xaa>
 800059e:	4282      	cmp	r2, r0
 80005a0:	d9d0      	bls.n	8000544 <__udivmoddi4+0x1c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <__udivmoddi4+0x8c>
 80005b0:	601c      	str	r4, [r3, #0]
 80005b2:	605d      	str	r5, [r3, #4]
 80005b4:	9800      	ldr	r0, [sp, #0]
 80005b6:	9901      	ldr	r1, [sp, #4]
 80005b8:	b003      	add	sp, #12
 80005ba:	bc3c      	pop	{r2, r3, r4, r5}
 80005bc:	4690      	mov	r8, r2
 80005be:	4699      	mov	r9, r3
 80005c0:	46a2      	mov	sl, r4
 80005c2:	46ab      	mov	fp, r5
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d9d6      	bls.n	8000578 <__udivmoddi4+0x50>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	4643      	mov	r3, r8
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0e8      	beq.n	80005aa <__udivmoddi4+0x82>
 80005d8:	07fb      	lsls	r3, r7, #31
 80005da:	0872      	lsrs	r2, r6, #1
 80005dc:	431a      	orrs	r2, r3
 80005de:	4646      	mov	r6, r8
 80005e0:	087b      	lsrs	r3, r7, #1
 80005e2:	e00e      	b.n	8000602 <__udivmoddi4+0xda>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d101      	bne.n	80005ec <__udivmoddi4+0xc4>
 80005e8:	42a2      	cmp	r2, r4
 80005ea:	d80c      	bhi.n	8000606 <__udivmoddi4+0xde>
 80005ec:	1aa4      	subs	r4, r4, r2
 80005ee:	419d      	sbcs	r5, r3
 80005f0:	2001      	movs	r0, #1
 80005f2:	1924      	adds	r4, r4, r4
 80005f4:	416d      	adcs	r5, r5
 80005f6:	2100      	movs	r1, #0
 80005f8:	3e01      	subs	r6, #1
 80005fa:	1824      	adds	r4, r4, r0
 80005fc:	414d      	adcs	r5, r1
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d006      	beq.n	8000610 <__udivmoddi4+0xe8>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d9ee      	bls.n	80005e4 <__udivmoddi4+0xbc>
 8000606:	3e01      	subs	r6, #1
 8000608:	1924      	adds	r4, r4, r4
 800060a:	416d      	adcs	r5, r5
 800060c:	2e00      	cmp	r6, #0
 800060e:	d1f8      	bne.n	8000602 <__udivmoddi4+0xda>
 8000610:	465b      	mov	r3, fp
 8000612:	9800      	ldr	r0, [sp, #0]
 8000614:	9901      	ldr	r1, [sp, #4]
 8000616:	1900      	adds	r0, r0, r4
 8000618:	4169      	adcs	r1, r5
 800061a:	2b00      	cmp	r3, #0
 800061c:	db22      	blt.n	8000664 <__udivmoddi4+0x13c>
 800061e:	002b      	movs	r3, r5
 8000620:	465a      	mov	r2, fp
 8000622:	40d3      	lsrs	r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4644      	mov	r4, r8
 8000628:	40e2      	lsrs	r2, r4
 800062a:	001c      	movs	r4, r3
 800062c:	465b      	mov	r3, fp
 800062e:	0015      	movs	r5, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	db2c      	blt.n	800068e <__udivmoddi4+0x166>
 8000634:	0026      	movs	r6, r4
 8000636:	409e      	lsls	r6, r3
 8000638:	0033      	movs	r3, r6
 800063a:	0026      	movs	r6, r4
 800063c:	4647      	mov	r7, r8
 800063e:	40be      	lsls	r6, r7
 8000640:	0032      	movs	r2, r6
 8000642:	1a80      	subs	r0, r0, r2
 8000644:	4199      	sbcs	r1, r3
 8000646:	9000      	str	r0, [sp, #0]
 8000648:	9101      	str	r1, [sp, #4]
 800064a:	e7ae      	b.n	80005aa <__udivmoddi4+0x82>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	4652      	mov	r2, sl
 8000654:	40da      	lsrs	r2, r3
 8000656:	4641      	mov	r1, r8
 8000658:	0013      	movs	r3, r2
 800065a:	464a      	mov	r2, r9
 800065c:	408a      	lsls	r2, r1
 800065e:	0017      	movs	r7, r2
 8000660:	431f      	orrs	r7, r3
 8000662:	e782      	b.n	800056a <__udivmoddi4+0x42>
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	002a      	movs	r2, r5
 800066c:	4646      	mov	r6, r8
 800066e:	409a      	lsls	r2, r3
 8000670:	0023      	movs	r3, r4
 8000672:	40f3      	lsrs	r3, r6
 8000674:	4313      	orrs	r3, r2
 8000676:	e7d5      	b.n	8000624 <__udivmoddi4+0xfc>
 8000678:	4642      	mov	r2, r8
 800067a:	2320      	movs	r3, #32
 800067c:	2100      	movs	r1, #0
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	9100      	str	r1, [sp, #0]
 8000684:	9201      	str	r2, [sp, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	40da      	lsrs	r2, r3
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	e782      	b.n	8000594 <__udivmoddi4+0x6c>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	0026      	movs	r6, r4
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	40de      	lsrs	r6, r3
 8000698:	002f      	movs	r7, r5
 800069a:	46b4      	mov	ip, r6
 800069c:	4097      	lsls	r7, r2
 800069e:	4666      	mov	r6, ip
 80006a0:	003b      	movs	r3, r7
 80006a2:	4333      	orrs	r3, r6
 80006a4:	e7c9      	b.n	800063a <__udivmoddi4+0x112>
 80006a6:	46c0      	nop			; (mov r8, r8)

080006a8 <__aeabi_fadd>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	46c6      	mov	lr, r8
 80006ac:	024e      	lsls	r6, r1, #9
 80006ae:	0247      	lsls	r7, r0, #9
 80006b0:	0a76      	lsrs	r6, r6, #9
 80006b2:	0a7b      	lsrs	r3, r7, #9
 80006b4:	0044      	lsls	r4, r0, #1
 80006b6:	0fc5      	lsrs	r5, r0, #31
 80006b8:	00f7      	lsls	r7, r6, #3
 80006ba:	0048      	lsls	r0, r1, #1
 80006bc:	4698      	mov	r8, r3
 80006be:	b500      	push	{lr}
 80006c0:	0e24      	lsrs	r4, r4, #24
 80006c2:	002a      	movs	r2, r5
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	0e00      	lsrs	r0, r0, #24
 80006c8:	0fc9      	lsrs	r1, r1, #31
 80006ca:	46bc      	mov	ip, r7
 80006cc:	428d      	cmp	r5, r1
 80006ce:	d067      	beq.n	80007a0 <__aeabi_fadd+0xf8>
 80006d0:	1a22      	subs	r2, r4, r0
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	dc00      	bgt.n	80006d8 <__aeabi_fadd+0x30>
 80006d6:	e0a5      	b.n	8000824 <__aeabi_fadd+0x17c>
 80006d8:	2800      	cmp	r0, #0
 80006da:	d13a      	bne.n	8000752 <__aeabi_fadd+0xaa>
 80006dc:	2f00      	cmp	r7, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x3a>
 80006e0:	e093      	b.n	800080a <__aeabi_fadd+0x162>
 80006e2:	1e51      	subs	r1, r2, #1
 80006e4:	2900      	cmp	r1, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0x42>
 80006e8:	e0bc      	b.n	8000864 <__aeabi_fadd+0x1bc>
 80006ea:	2401      	movs	r4, #1
 80006ec:	1bdb      	subs	r3, r3, r7
 80006ee:	015a      	lsls	r2, r3, #5
 80006f0:	d546      	bpl.n	8000780 <__aeabi_fadd+0xd8>
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	099e      	lsrs	r6, r3, #6
 80006f6:	0030      	movs	r0, r6
 80006f8:	f002 fa84 	bl	8002c04 <__clzsi2>
 80006fc:	3805      	subs	r0, #5
 80006fe:	4086      	lsls	r6, r0
 8000700:	4284      	cmp	r4, r0
 8000702:	dd00      	ble.n	8000706 <__aeabi_fadd+0x5e>
 8000704:	e09d      	b.n	8000842 <__aeabi_fadd+0x19a>
 8000706:	1b04      	subs	r4, r0, r4
 8000708:	0032      	movs	r2, r6
 800070a:	2020      	movs	r0, #32
 800070c:	3401      	adds	r4, #1
 800070e:	40e2      	lsrs	r2, r4
 8000710:	1b04      	subs	r4, r0, r4
 8000712:	40a6      	lsls	r6, r4
 8000714:	0033      	movs	r3, r6
 8000716:	1e5e      	subs	r6, r3, #1
 8000718:	41b3      	sbcs	r3, r6
 800071a:	2400      	movs	r4, #0
 800071c:	4313      	orrs	r3, r2
 800071e:	075a      	lsls	r2, r3, #29
 8000720:	d004      	beq.n	800072c <__aeabi_fadd+0x84>
 8000722:	220f      	movs	r2, #15
 8000724:	401a      	ands	r2, r3
 8000726:	2a04      	cmp	r2, #4
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x84>
 800072a:	3304      	adds	r3, #4
 800072c:	015a      	lsls	r2, r3, #5
 800072e:	d529      	bpl.n	8000784 <__aeabi_fadd+0xdc>
 8000730:	3401      	adds	r4, #1
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x90>
 8000736:	e081      	b.n	800083c <__aeabi_fadd+0x194>
 8000738:	002a      	movs	r2, r5
 800073a:	019b      	lsls	r3, r3, #6
 800073c:	0a5b      	lsrs	r3, r3, #9
 800073e:	b2e4      	uxtb	r4, r4
 8000740:	025b      	lsls	r3, r3, #9
 8000742:	05e4      	lsls	r4, r4, #23
 8000744:	0a58      	lsrs	r0, r3, #9
 8000746:	07d2      	lsls	r2, r2, #31
 8000748:	4320      	orrs	r0, r4
 800074a:	4310      	orrs	r0, r2
 800074c:	bc04      	pop	{r2}
 800074e:	4690      	mov	r8, r2
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2cff      	cmp	r4, #255	; 0xff
 8000754:	d0e3      	beq.n	800071e <__aeabi_fadd+0x76>
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0038      	movs	r0, r7
 800075a:	04c9      	lsls	r1, r1, #19
 800075c:	4308      	orrs	r0, r1
 800075e:	4684      	mov	ip, r0
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd00      	ble.n	8000766 <__aeabi_fadd+0xbe>
 8000764:	e082      	b.n	800086c <__aeabi_fadd+0x1c4>
 8000766:	2020      	movs	r0, #32
 8000768:	4661      	mov	r1, ip
 800076a:	40d1      	lsrs	r1, r2
 800076c:	1a82      	subs	r2, r0, r2
 800076e:	4660      	mov	r0, ip
 8000770:	4090      	lsls	r0, r2
 8000772:	0002      	movs	r2, r0
 8000774:	1e50      	subs	r0, r2, #1
 8000776:	4182      	sbcs	r2, r0
 8000778:	430a      	orrs	r2, r1
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	015a      	lsls	r2, r3, #5
 800077e:	d4b8      	bmi.n	80006f2 <__aeabi_fadd+0x4a>
 8000780:	075a      	lsls	r2, r3, #29
 8000782:	d1ce      	bne.n	8000722 <__aeabi_fadd+0x7a>
 8000784:	08de      	lsrs	r6, r3, #3
 8000786:	002a      	movs	r2, r5
 8000788:	2cff      	cmp	r4, #255	; 0xff
 800078a:	d13a      	bne.n	8000802 <__aeabi_fadd+0x15a>
 800078c:	2e00      	cmp	r6, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0xea>
 8000790:	e0ae      	b.n	80008f0 <__aeabi_fadd+0x248>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	03db      	lsls	r3, r3, #15
 8000796:	4333      	orrs	r3, r6
 8000798:	025b      	lsls	r3, r3, #9
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	24ff      	movs	r4, #255	; 0xff
 800079e:	e7cf      	b.n	8000740 <__aeabi_fadd+0x98>
 80007a0:	1a21      	subs	r1, r4, r0
 80007a2:	2900      	cmp	r1, #0
 80007a4:	dd52      	ble.n	800084c <__aeabi_fadd+0x1a4>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d031      	beq.n	800080e <__aeabi_fadd+0x166>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d0b7      	beq.n	800071e <__aeabi_fadd+0x76>
 80007ae:	2080      	movs	r0, #128	; 0x80
 80007b0:	003e      	movs	r6, r7
 80007b2:	04c0      	lsls	r0, r0, #19
 80007b4:	4306      	orrs	r6, r0
 80007b6:	46b4      	mov	ip, r6
 80007b8:	291b      	cmp	r1, #27
 80007ba:	dd00      	ble.n	80007be <__aeabi_fadd+0x116>
 80007bc:	e0aa      	b.n	8000914 <__aeabi_fadd+0x26c>
 80007be:	2620      	movs	r6, #32
 80007c0:	4660      	mov	r0, ip
 80007c2:	40c8      	lsrs	r0, r1
 80007c4:	1a71      	subs	r1, r6, r1
 80007c6:	4666      	mov	r6, ip
 80007c8:	408e      	lsls	r6, r1
 80007ca:	0031      	movs	r1, r6
 80007cc:	1e4e      	subs	r6, r1, #1
 80007ce:	41b1      	sbcs	r1, r6
 80007d0:	4301      	orrs	r1, r0
 80007d2:	185b      	adds	r3, r3, r1
 80007d4:	0159      	lsls	r1, r3, #5
 80007d6:	d5d3      	bpl.n	8000780 <__aeabi_fadd+0xd8>
 80007d8:	3401      	adds	r4, #1
 80007da:	2cff      	cmp	r4, #255	; 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0x138>
 80007de:	e087      	b.n	80008f0 <__aeabi_fadd+0x248>
 80007e0:	2201      	movs	r2, #1
 80007e2:	4978      	ldr	r1, [pc, #480]	; (80009c4 <__aeabi_fadd+0x31c>)
 80007e4:	401a      	ands	r2, r3
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	400b      	ands	r3, r1
 80007ea:	4313      	orrs	r3, r2
 80007ec:	e797      	b.n	800071e <__aeabi_fadd+0x76>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x14c>
 80007f2:	e0a7      	b.n	8000944 <__aeabi_fadd+0x29c>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_fadd+0x152>
 80007f8:	e0b6      	b.n	8000968 <__aeabi_fadd+0x2c0>
 80007fa:	1e3b      	subs	r3, r7, #0
 80007fc:	d162      	bne.n	80008c4 <__aeabi_fadd+0x21c>
 80007fe:	2600      	movs	r6, #0
 8000800:	2200      	movs	r2, #0
 8000802:	0273      	lsls	r3, r6, #9
 8000804:	0a5b      	lsrs	r3, r3, #9
 8000806:	b2e4      	uxtb	r4, r4
 8000808:	e79a      	b.n	8000740 <__aeabi_fadd+0x98>
 800080a:	0014      	movs	r4, r2
 800080c:	e787      	b.n	800071e <__aeabi_fadd+0x76>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d04d      	beq.n	80008ae <__aeabi_fadd+0x206>
 8000812:	1e48      	subs	r0, r1, #1
 8000814:	2800      	cmp	r0, #0
 8000816:	d157      	bne.n	80008c8 <__aeabi_fadd+0x220>
 8000818:	4463      	add	r3, ip
 800081a:	2401      	movs	r4, #1
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	d5af      	bpl.n	8000780 <__aeabi_fadd+0xd8>
 8000820:	2402      	movs	r4, #2
 8000822:	e7dd      	b.n	80007e0 <__aeabi_fadd+0x138>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d124      	bne.n	8000872 <__aeabi_fadd+0x1ca>
 8000828:	1c62      	adds	r2, r4, #1
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	2a01      	cmp	r2, #1
 800082e:	ddde      	ble.n	80007ee <__aeabi_fadd+0x146>
 8000830:	1bde      	subs	r6, r3, r7
 8000832:	0172      	lsls	r2, r6, #5
 8000834:	d535      	bpl.n	80008a2 <__aeabi_fadd+0x1fa>
 8000836:	1afe      	subs	r6, r7, r3
 8000838:	000d      	movs	r5, r1
 800083a:	e75c      	b.n	80006f6 <__aeabi_fadd+0x4e>
 800083c:	002a      	movs	r2, r5
 800083e:	2300      	movs	r3, #0
 8000840:	e77e      	b.n	8000740 <__aeabi_fadd+0x98>
 8000842:	0033      	movs	r3, r6
 8000844:	4a60      	ldr	r2, [pc, #384]	; (80009c8 <__aeabi_fadd+0x320>)
 8000846:	1a24      	subs	r4, r4, r0
 8000848:	4013      	ands	r3, r2
 800084a:	e768      	b.n	800071e <__aeabi_fadd+0x76>
 800084c:	2900      	cmp	r1, #0
 800084e:	d163      	bne.n	8000918 <__aeabi_fadd+0x270>
 8000850:	1c61      	adds	r1, r4, #1
 8000852:	b2c8      	uxtb	r0, r1
 8000854:	2801      	cmp	r0, #1
 8000856:	dd4e      	ble.n	80008f6 <__aeabi_fadd+0x24e>
 8000858:	29ff      	cmp	r1, #255	; 0xff
 800085a:	d049      	beq.n	80008f0 <__aeabi_fadd+0x248>
 800085c:	4463      	add	r3, ip
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	000c      	movs	r4, r1
 8000862:	e75c      	b.n	800071e <__aeabi_fadd+0x76>
 8000864:	2aff      	cmp	r2, #255	; 0xff
 8000866:	d041      	beq.n	80008ec <__aeabi_fadd+0x244>
 8000868:	000a      	movs	r2, r1
 800086a:	e779      	b.n	8000760 <__aeabi_fadd+0xb8>
 800086c:	2201      	movs	r2, #1
 800086e:	1a9b      	subs	r3, r3, r2
 8000870:	e784      	b.n	800077c <__aeabi_fadd+0xd4>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d01d      	beq.n	80008b2 <__aeabi_fadd+0x20a>
 8000876:	28ff      	cmp	r0, #255	; 0xff
 8000878:	d022      	beq.n	80008c0 <__aeabi_fadd+0x218>
 800087a:	2480      	movs	r4, #128	; 0x80
 800087c:	04e4      	lsls	r4, r4, #19
 800087e:	4252      	negs	r2, r2
 8000880:	4323      	orrs	r3, r4
 8000882:	2a1b      	cmp	r2, #27
 8000884:	dd00      	ble.n	8000888 <__aeabi_fadd+0x1e0>
 8000886:	e08a      	b.n	800099e <__aeabi_fadd+0x2f6>
 8000888:	001c      	movs	r4, r3
 800088a:	2520      	movs	r5, #32
 800088c:	40d4      	lsrs	r4, r2
 800088e:	1aaa      	subs	r2, r5, r2
 8000890:	4093      	lsls	r3, r2
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	4193      	sbcs	r3, r2
 8000896:	4323      	orrs	r3, r4
 8000898:	4662      	mov	r2, ip
 800089a:	0004      	movs	r4, r0
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	000d      	movs	r5, r1
 80008a0:	e725      	b.n	80006ee <__aeabi_fadd+0x46>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x200>
 80008a6:	e726      	b.n	80006f6 <__aeabi_fadd+0x4e>
 80008a8:	2200      	movs	r2, #0
 80008aa:	2400      	movs	r4, #0
 80008ac:	e7a9      	b.n	8000802 <__aeabi_fadd+0x15a>
 80008ae:	000c      	movs	r4, r1
 80008b0:	e735      	b.n	800071e <__aeabi_fadd+0x76>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04d      	beq.n	8000952 <__aeabi_fadd+0x2aa>
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d0ed      	beq.n	8000898 <__aeabi_fadd+0x1f0>
 80008bc:	28ff      	cmp	r0, #255	; 0xff
 80008be:	d1e0      	bne.n	8000882 <__aeabi_fadd+0x1da>
 80008c0:	4663      	mov	r3, ip
 80008c2:	24ff      	movs	r4, #255	; 0xff
 80008c4:	000d      	movs	r5, r1
 80008c6:	e72a      	b.n	800071e <__aeabi_fadd+0x76>
 80008c8:	29ff      	cmp	r1, #255	; 0xff
 80008ca:	d00f      	beq.n	80008ec <__aeabi_fadd+0x244>
 80008cc:	0001      	movs	r1, r0
 80008ce:	e773      	b.n	80007b8 <__aeabi_fadd+0x110>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d061      	beq.n	8000998 <__aeabi_fadd+0x2f0>
 80008d4:	24ff      	movs	r4, #255	; 0xff
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x234>
 80008da:	e720      	b.n	800071e <__aeabi_fadd+0x76>
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	4641      	mov	r1, r8
 80008e0:	03d2      	lsls	r2, r2, #15
 80008e2:	4211      	tst	r1, r2
 80008e4:	d002      	beq.n	80008ec <__aeabi_fadd+0x244>
 80008e6:	4216      	tst	r6, r2
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x244>
 80008ea:	003b      	movs	r3, r7
 80008ec:	24ff      	movs	r4, #255	; 0xff
 80008ee:	e716      	b.n	800071e <__aeabi_fadd+0x76>
 80008f0:	24ff      	movs	r4, #255	; 0xff
 80008f2:	2300      	movs	r3, #0
 80008f4:	e724      	b.n	8000740 <__aeabi_fadd+0x98>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d1ea      	bne.n	80008d0 <__aeabi_fadd+0x228>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d058      	beq.n	80009b0 <__aeabi_fadd+0x308>
 80008fe:	2f00      	cmp	r7, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x25c>
 8000902:	e70c      	b.n	800071e <__aeabi_fadd+0x76>
 8000904:	4463      	add	r3, ip
 8000906:	015a      	lsls	r2, r3, #5
 8000908:	d400      	bmi.n	800090c <__aeabi_fadd+0x264>
 800090a:	e739      	b.n	8000780 <__aeabi_fadd+0xd8>
 800090c:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <__aeabi_fadd+0x320>)
 800090e:	000c      	movs	r4, r1
 8000910:	4013      	ands	r3, r2
 8000912:	e704      	b.n	800071e <__aeabi_fadd+0x76>
 8000914:	2101      	movs	r1, #1
 8000916:	e75c      	b.n	80007d2 <__aeabi_fadd+0x12a>
 8000918:	2c00      	cmp	r4, #0
 800091a:	d11e      	bne.n	800095a <__aeabi_fadd+0x2b2>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d040      	beq.n	80009a2 <__aeabi_fadd+0x2fa>
 8000920:	43c9      	mvns	r1, r1
 8000922:	2900      	cmp	r1, #0
 8000924:	d00b      	beq.n	800093e <__aeabi_fadd+0x296>
 8000926:	28ff      	cmp	r0, #255	; 0xff
 8000928:	d036      	beq.n	8000998 <__aeabi_fadd+0x2f0>
 800092a:	291b      	cmp	r1, #27
 800092c:	dc47      	bgt.n	80009be <__aeabi_fadd+0x316>
 800092e:	001c      	movs	r4, r3
 8000930:	2620      	movs	r6, #32
 8000932:	40cc      	lsrs	r4, r1
 8000934:	1a71      	subs	r1, r6, r1
 8000936:	408b      	lsls	r3, r1
 8000938:	1e59      	subs	r1, r3, #1
 800093a:	418b      	sbcs	r3, r1
 800093c:	4323      	orrs	r3, r4
 800093e:	4463      	add	r3, ip
 8000940:	0004      	movs	r4, r0
 8000942:	e747      	b.n	80007d4 <__aeabi_fadd+0x12c>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d118      	bne.n	800097a <__aeabi_fadd+0x2d2>
 8000948:	1e3b      	subs	r3, r7, #0
 800094a:	d02d      	beq.n	80009a8 <__aeabi_fadd+0x300>
 800094c:	000d      	movs	r5, r1
 800094e:	24ff      	movs	r4, #255	; 0xff
 8000950:	e6e5      	b.n	800071e <__aeabi_fadd+0x76>
 8000952:	003b      	movs	r3, r7
 8000954:	0004      	movs	r4, r0
 8000956:	000d      	movs	r5, r1
 8000958:	e6e1      	b.n	800071e <__aeabi_fadd+0x76>
 800095a:	28ff      	cmp	r0, #255	; 0xff
 800095c:	d01c      	beq.n	8000998 <__aeabi_fadd+0x2f0>
 800095e:	2480      	movs	r4, #128	; 0x80
 8000960:	04e4      	lsls	r4, r4, #19
 8000962:	4249      	negs	r1, r1
 8000964:	4323      	orrs	r3, r4
 8000966:	e7e0      	b.n	800092a <__aeabi_fadd+0x282>
 8000968:	2f00      	cmp	r7, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x2c6>
 800096c:	e6d7      	b.n	800071e <__aeabi_fadd+0x76>
 800096e:	1bde      	subs	r6, r3, r7
 8000970:	0172      	lsls	r2, r6, #5
 8000972:	d51f      	bpl.n	80009b4 <__aeabi_fadd+0x30c>
 8000974:	1afb      	subs	r3, r7, r3
 8000976:	000d      	movs	r5, r1
 8000978:	e6d1      	b.n	800071e <__aeabi_fadd+0x76>
 800097a:	24ff      	movs	r4, #255	; 0xff
 800097c:	2f00      	cmp	r7, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fadd+0x2da>
 8000980:	e6cd      	b.n	800071e <__aeabi_fadd+0x76>
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	4640      	mov	r0, r8
 8000986:	03d2      	lsls	r2, r2, #15
 8000988:	4210      	tst	r0, r2
 800098a:	d0af      	beq.n	80008ec <__aeabi_fadd+0x244>
 800098c:	4216      	tst	r6, r2
 800098e:	d1ad      	bne.n	80008ec <__aeabi_fadd+0x244>
 8000990:	003b      	movs	r3, r7
 8000992:	000d      	movs	r5, r1
 8000994:	24ff      	movs	r4, #255	; 0xff
 8000996:	e6c2      	b.n	800071e <__aeabi_fadd+0x76>
 8000998:	4663      	mov	r3, ip
 800099a:	24ff      	movs	r4, #255	; 0xff
 800099c:	e6bf      	b.n	800071e <__aeabi_fadd+0x76>
 800099e:	2301      	movs	r3, #1
 80009a0:	e77a      	b.n	8000898 <__aeabi_fadd+0x1f0>
 80009a2:	003b      	movs	r3, r7
 80009a4:	0004      	movs	r4, r0
 80009a6:	e6ba      	b.n	800071e <__aeabi_fadd+0x76>
 80009a8:	2680      	movs	r6, #128	; 0x80
 80009aa:	2200      	movs	r2, #0
 80009ac:	03f6      	lsls	r6, r6, #15
 80009ae:	e6f0      	b.n	8000792 <__aeabi_fadd+0xea>
 80009b0:	003b      	movs	r3, r7
 80009b2:	e6b4      	b.n	800071e <__aeabi_fadd+0x76>
 80009b4:	1e33      	subs	r3, r6, #0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0x312>
 80009b8:	e6e2      	b.n	8000780 <__aeabi_fadd+0xd8>
 80009ba:	2200      	movs	r2, #0
 80009bc:	e721      	b.n	8000802 <__aeabi_fadd+0x15a>
 80009be:	2301      	movs	r3, #1
 80009c0:	e7bd      	b.n	800093e <__aeabi_fadd+0x296>
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	7dffffff 	.word	0x7dffffff
 80009c8:	fbffffff 	.word	0xfbffffff

080009cc <__aeabi_fmul>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	4657      	mov	r7, sl
 80009d0:	464e      	mov	r6, r9
 80009d2:	4645      	mov	r5, r8
 80009d4:	46de      	mov	lr, fp
 80009d6:	b5e0      	push	{r5, r6, r7, lr}
 80009d8:	0247      	lsls	r7, r0, #9
 80009da:	0046      	lsls	r6, r0, #1
 80009dc:	4688      	mov	r8, r1
 80009de:	0a7f      	lsrs	r7, r7, #9
 80009e0:	0e36      	lsrs	r6, r6, #24
 80009e2:	0fc4      	lsrs	r4, r0, #31
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d047      	beq.n	8000a78 <__aeabi_fmul+0xac>
 80009e8:	2eff      	cmp	r6, #255	; 0xff
 80009ea:	d024      	beq.n	8000a36 <__aeabi_fmul+0x6a>
 80009ec:	00fb      	lsls	r3, r7, #3
 80009ee:	2780      	movs	r7, #128	; 0x80
 80009f0:	04ff      	lsls	r7, r7, #19
 80009f2:	431f      	orrs	r7, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	4699      	mov	r9, r3
 80009f8:	469a      	mov	sl, r3
 80009fa:	3e7f      	subs	r6, #127	; 0x7f
 80009fc:	4643      	mov	r3, r8
 80009fe:	025d      	lsls	r5, r3, #9
 8000a00:	0058      	lsls	r0, r3, #1
 8000a02:	0fdb      	lsrs	r3, r3, #31
 8000a04:	0a6d      	lsrs	r5, r5, #9
 8000a06:	0e00      	lsrs	r0, r0, #24
 8000a08:	4698      	mov	r8, r3
 8000a0a:	d043      	beq.n	8000a94 <__aeabi_fmul+0xc8>
 8000a0c:	28ff      	cmp	r0, #255	; 0xff
 8000a0e:	d03b      	beq.n	8000a88 <__aeabi_fmul+0xbc>
 8000a10:	00eb      	lsls	r3, r5, #3
 8000a12:	2580      	movs	r5, #128	; 0x80
 8000a14:	2200      	movs	r2, #0
 8000a16:	04ed      	lsls	r5, r5, #19
 8000a18:	431d      	orrs	r5, r3
 8000a1a:	387f      	subs	r0, #127	; 0x7f
 8000a1c:	1836      	adds	r6, r6, r0
 8000a1e:	1c73      	adds	r3, r6, #1
 8000a20:	4641      	mov	r1, r8
 8000a22:	469b      	mov	fp, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d864      	bhi.n	8000af8 <__aeabi_fmul+0x12c>
 8000a2e:	4875      	ldr	r0, [pc, #468]	; (8000c04 <__aeabi_fmul+0x238>)
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	58c3      	ldr	r3, [r0, r3]
 8000a34:	469f      	mov	pc, r3
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d142      	bne.n	8000ac0 <__aeabi_fmul+0xf4>
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	3b06      	subs	r3, #6
 8000a40:	26ff      	movs	r6, #255	; 0xff
 8000a42:	469a      	mov	sl, r3
 8000a44:	e7da      	b.n	80009fc <__aeabi_fmul+0x30>
 8000a46:	4641      	mov	r1, r8
 8000a48:	2a02      	cmp	r2, #2
 8000a4a:	d028      	beq.n	8000a9e <__aeabi_fmul+0xd2>
 8000a4c:	2a03      	cmp	r2, #3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fmul+0x86>
 8000a50:	e0ce      	b.n	8000bf0 <__aeabi_fmul+0x224>
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fmul+0x8c>
 8000a56:	e0ac      	b.n	8000bb2 <__aeabi_fmul+0x1e6>
 8000a58:	4011      	ands	r1, r2
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	b2cc      	uxtb	r4, r1
 8000a60:	0240      	lsls	r0, r0, #9
 8000a62:	05d2      	lsls	r2, r2, #23
 8000a64:	0a40      	lsrs	r0, r0, #9
 8000a66:	07e4      	lsls	r4, r4, #31
 8000a68:	4310      	orrs	r0, r2
 8000a6a:	4320      	orrs	r0, r4
 8000a6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4699      	mov	r9, r3
 8000a72:	46a2      	mov	sl, r4
 8000a74:	46ab      	mov	fp, r5
 8000a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a78:	2f00      	cmp	r7, #0
 8000a7a:	d115      	bne.n	8000aa8 <__aeabi_fmul+0xdc>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	4699      	mov	r9, r3
 8000a80:	3b03      	subs	r3, #3
 8000a82:	2600      	movs	r6, #0
 8000a84:	469a      	mov	sl, r3
 8000a86:	e7b9      	b.n	80009fc <__aeabi_fmul+0x30>
 8000a88:	20ff      	movs	r0, #255	; 0xff
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d0c5      	beq.n	8000a1c <__aeabi_fmul+0x50>
 8000a90:	2203      	movs	r2, #3
 8000a92:	e7c3      	b.n	8000a1c <__aeabi_fmul+0x50>
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d119      	bne.n	8000acc <__aeabi_fmul+0x100>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	e7be      	b.n	8000a1c <__aeabi_fmul+0x50>
 8000a9e:	2401      	movs	r4, #1
 8000aa0:	22ff      	movs	r2, #255	; 0xff
 8000aa2:	400c      	ands	r4, r1
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e7db      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	f002 f8ab 	bl	8002c04 <__clzsi2>
 8000aae:	2676      	movs	r6, #118	; 0x76
 8000ab0:	1f43      	subs	r3, r0, #5
 8000ab2:	409f      	lsls	r7, r3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4276      	negs	r6, r6
 8000ab8:	1a36      	subs	r6, r6, r0
 8000aba:	4699      	mov	r9, r3
 8000abc:	469a      	mov	sl, r3
 8000abe:	e79d      	b.n	80009fc <__aeabi_fmul+0x30>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	3b09      	subs	r3, #9
 8000ac6:	26ff      	movs	r6, #255	; 0xff
 8000ac8:	469a      	mov	sl, r3
 8000aca:	e797      	b.n	80009fc <__aeabi_fmul+0x30>
 8000acc:	0028      	movs	r0, r5
 8000ace:	f002 f899 	bl	8002c04 <__clzsi2>
 8000ad2:	1f43      	subs	r3, r0, #5
 8000ad4:	409d      	lsls	r5, r3
 8000ad6:	2376      	movs	r3, #118	; 0x76
 8000ad8:	425b      	negs	r3, r3
 8000ada:	1a18      	subs	r0, r3, r0
 8000adc:	2200      	movs	r2, #0
 8000ade:	e79d      	b.n	8000a1c <__aeabi_fmul+0x50>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	03c0      	lsls	r0, r0, #15
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	e7ba      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000aea:	003d      	movs	r5, r7
 8000aec:	4652      	mov	r2, sl
 8000aee:	e7ab      	b.n	8000a48 <__aeabi_fmul+0x7c>
 8000af0:	003d      	movs	r5, r7
 8000af2:	0021      	movs	r1, r4
 8000af4:	4652      	mov	r2, sl
 8000af6:	e7a7      	b.n	8000a48 <__aeabi_fmul+0x7c>
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	469c      	mov	ip, r3
 8000afc:	042a      	lsls	r2, r5, #16
 8000afe:	0c12      	lsrs	r2, r2, #16
 8000b00:	0c2b      	lsrs	r3, r5, #16
 8000b02:	0014      	movs	r4, r2
 8000b04:	4660      	mov	r0, ip
 8000b06:	4665      	mov	r5, ip
 8000b08:	043f      	lsls	r7, r7, #16
 8000b0a:	0c3f      	lsrs	r7, r7, #16
 8000b0c:	437c      	muls	r4, r7
 8000b0e:	4342      	muls	r2, r0
 8000b10:	435d      	muls	r5, r3
 8000b12:	437b      	muls	r3, r7
 8000b14:	0c27      	lsrs	r7, r4, #16
 8000b16:	189b      	adds	r3, r3, r2
 8000b18:	18ff      	adds	r7, r7, r3
 8000b1a:	42ba      	cmp	r2, r7
 8000b1c:	d903      	bls.n	8000b26 <__aeabi_fmul+0x15a>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	469c      	mov	ip, r3
 8000b24:	4465      	add	r5, ip
 8000b26:	0424      	lsls	r4, r4, #16
 8000b28:	043a      	lsls	r2, r7, #16
 8000b2a:	0c24      	lsrs	r4, r4, #16
 8000b2c:	1912      	adds	r2, r2, r4
 8000b2e:	0193      	lsls	r3, r2, #6
 8000b30:	1e5c      	subs	r4, r3, #1
 8000b32:	41a3      	sbcs	r3, r4
 8000b34:	0c3f      	lsrs	r7, r7, #16
 8000b36:	0e92      	lsrs	r2, r2, #26
 8000b38:	197d      	adds	r5, r7, r5
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	01ad      	lsls	r5, r5, #6
 8000b3e:	4315      	orrs	r5, r2
 8000b40:	012b      	lsls	r3, r5, #4
 8000b42:	d504      	bpl.n	8000b4e <__aeabi_fmul+0x182>
 8000b44:	2301      	movs	r3, #1
 8000b46:	465e      	mov	r6, fp
 8000b48:	086a      	lsrs	r2, r5, #1
 8000b4a:	401d      	ands	r5, r3
 8000b4c:	4315      	orrs	r5, r2
 8000b4e:	0032      	movs	r2, r6
 8000b50:	327f      	adds	r2, #127	; 0x7f
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	dd25      	ble.n	8000ba2 <__aeabi_fmul+0x1d6>
 8000b56:	076b      	lsls	r3, r5, #29
 8000b58:	d004      	beq.n	8000b64 <__aeabi_fmul+0x198>
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	402b      	ands	r3, r5
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fmul+0x198>
 8000b62:	3504      	adds	r5, #4
 8000b64:	012b      	lsls	r3, r5, #4
 8000b66:	d503      	bpl.n	8000b70 <__aeabi_fmul+0x1a4>
 8000b68:	0032      	movs	r2, r6
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <__aeabi_fmul+0x23c>)
 8000b6c:	3280      	adds	r2, #128	; 0x80
 8000b6e:	401d      	ands	r5, r3
 8000b70:	2afe      	cmp	r2, #254	; 0xfe
 8000b72:	dc94      	bgt.n	8000a9e <__aeabi_fmul+0xd2>
 8000b74:	2401      	movs	r4, #1
 8000b76:	01a8      	lsls	r0, r5, #6
 8000b78:	0a40      	lsrs	r0, r0, #9
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	400c      	ands	r4, r1
 8000b7e:	e76f      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000b80:	2080      	movs	r0, #128	; 0x80
 8000b82:	03c0      	lsls	r0, r0, #15
 8000b84:	4207      	tst	r7, r0
 8000b86:	d007      	beq.n	8000b98 <__aeabi_fmul+0x1cc>
 8000b88:	4205      	tst	r5, r0
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_fmul+0x1cc>
 8000b8c:	4328      	orrs	r0, r5
 8000b8e:	0240      	lsls	r0, r0, #9
 8000b90:	0a40      	lsrs	r0, r0, #9
 8000b92:	4644      	mov	r4, r8
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e763      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000b98:	4338      	orrs	r0, r7
 8000b9a:	0240      	lsls	r0, r0, #9
 8000b9c:	0a40      	lsrs	r0, r0, #9
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	e75e      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000ba2:	2401      	movs	r4, #1
 8000ba4:	1aa3      	subs	r3, r4, r2
 8000ba6:	2b1b      	cmp	r3, #27
 8000ba8:	dd05      	ble.n	8000bb6 <__aeabi_fmul+0x1ea>
 8000baa:	400c      	ands	r4, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	e756      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000bb2:	465e      	mov	r6, fp
 8000bb4:	e7cb      	b.n	8000b4e <__aeabi_fmul+0x182>
 8000bb6:	002a      	movs	r2, r5
 8000bb8:	2020      	movs	r0, #32
 8000bba:	40da      	lsrs	r2, r3
 8000bbc:	1ac3      	subs	r3, r0, r3
 8000bbe:	409d      	lsls	r5, r3
 8000bc0:	002b      	movs	r3, r5
 8000bc2:	1e5d      	subs	r5, r3, #1
 8000bc4:	41ab      	sbcs	r3, r5
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fmul+0x20a>
 8000bcc:	220f      	movs	r2, #15
 8000bce:	401a      	ands	r2, r3
 8000bd0:	2a04      	cmp	r2, #4
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fmul+0x20a>
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	015a      	lsls	r2, r3, #5
 8000bd8:	d504      	bpl.n	8000be4 <__aeabi_fmul+0x218>
 8000bda:	2401      	movs	r4, #1
 8000bdc:	2201      	movs	r2, #1
 8000bde:	400c      	ands	r4, r1
 8000be0:	2000      	movs	r0, #0
 8000be2:	e73d      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000be4:	2401      	movs	r4, #1
 8000be6:	019b      	lsls	r3, r3, #6
 8000be8:	0a58      	lsrs	r0, r3, #9
 8000bea:	400c      	ands	r4, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	e737      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000bf0:	2080      	movs	r0, #128	; 0x80
 8000bf2:	2401      	movs	r4, #1
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4328      	orrs	r0, r5
 8000bf8:	0240      	lsls	r0, r0, #9
 8000bfa:	0a40      	lsrs	r0, r0, #9
 8000bfc:	400c      	ands	r4, r1
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	e72e      	b.n	8000a60 <__aeabi_fmul+0x94>
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	0800dd5c 	.word	0x0800dd5c
 8000c08:	f7ffffff 	.word	0xf7ffffff

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	464f      	mov	r7, r9
 8000c10:	46d6      	mov	lr, sl
 8000c12:	4646      	mov	r6, r8
 8000c14:	0044      	lsls	r4, r0, #1
 8000c16:	b5c0      	push	{r6, r7, lr}
 8000c18:	0fc2      	lsrs	r2, r0, #31
 8000c1a:	0247      	lsls	r7, r0, #9
 8000c1c:	0248      	lsls	r0, r1, #9
 8000c1e:	0a40      	lsrs	r0, r0, #9
 8000c20:	4684      	mov	ip, r0
 8000c22:	4666      	mov	r6, ip
 8000c24:	0a7b      	lsrs	r3, r7, #9
 8000c26:	0048      	lsls	r0, r1, #1
 8000c28:	0fc9      	lsrs	r1, r1, #31
 8000c2a:	469a      	mov	sl, r3
 8000c2c:	0e24      	lsrs	r4, r4, #24
 8000c2e:	0015      	movs	r5, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	0e00      	lsrs	r0, r0, #24
 8000c34:	4689      	mov	r9, r1
 8000c36:	00f6      	lsls	r6, r6, #3
 8000c38:	28ff      	cmp	r0, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x32>
 8000c3c:	e08f      	b.n	8000d5e <__aeabi_fsub+0x152>
 8000c3e:	2101      	movs	r1, #1
 8000c40:	464f      	mov	r7, r9
 8000c42:	404f      	eors	r7, r1
 8000c44:	0039      	movs	r1, r7
 8000c46:	4291      	cmp	r1, r2
 8000c48:	d066      	beq.n	8000d18 <__aeabi_fsub+0x10c>
 8000c4a:	1a22      	subs	r2, r4, r0
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	dc00      	bgt.n	8000c52 <__aeabi_fsub+0x46>
 8000c50:	e09d      	b.n	8000d8e <__aeabi_fsub+0x182>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d13d      	bne.n	8000cd2 <__aeabi_fsub+0xc6>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x50>
 8000c5a:	e08b      	b.n	8000d74 <__aeabi_fsub+0x168>
 8000c5c:	1e51      	subs	r1, r2, #1
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d000      	beq.n	8000c64 <__aeabi_fsub+0x58>
 8000c62:	e0b5      	b.n	8000dd0 <__aeabi_fsub+0x1c4>
 8000c64:	2401      	movs	r4, #1
 8000c66:	1b9b      	subs	r3, r3, r6
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	d544      	bpl.n	8000cf6 <__aeabi_fsub+0xea>
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	099f      	lsrs	r7, r3, #6
 8000c70:	0038      	movs	r0, r7
 8000c72:	f001 ffc7 	bl	8002c04 <__clzsi2>
 8000c76:	3805      	subs	r0, #5
 8000c78:	4087      	lsls	r7, r0
 8000c7a:	4284      	cmp	r4, r0
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_fsub+0x74>
 8000c7e:	e096      	b.n	8000dae <__aeabi_fsub+0x1a2>
 8000c80:	1b04      	subs	r4, r0, r4
 8000c82:	003a      	movs	r2, r7
 8000c84:	2020      	movs	r0, #32
 8000c86:	3401      	adds	r4, #1
 8000c88:	40e2      	lsrs	r2, r4
 8000c8a:	1b04      	subs	r4, r0, r4
 8000c8c:	40a7      	lsls	r7, r4
 8000c8e:	003b      	movs	r3, r7
 8000c90:	1e5f      	subs	r7, r3, #1
 8000c92:	41bb      	sbcs	r3, r7
 8000c94:	2400      	movs	r4, #0
 8000c96:	4313      	orrs	r3, r2
 8000c98:	075a      	lsls	r2, r3, #29
 8000c9a:	d004      	beq.n	8000ca6 <__aeabi_fsub+0x9a>
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	2a04      	cmp	r2, #4
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_fsub+0x9a>
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	015a      	lsls	r2, r3, #5
 8000ca8:	d527      	bpl.n	8000cfa <__aeabi_fsub+0xee>
 8000caa:	3401      	adds	r4, #1
 8000cac:	2cff      	cmp	r4, #255	; 0xff
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fsub+0xa6>
 8000cb0:	e079      	b.n	8000da6 <__aeabi_fsub+0x19a>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	0a5b      	lsrs	r3, r3, #9
 8000cb8:	b2e4      	uxtb	r4, r4
 8000cba:	402a      	ands	r2, r5
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	05e4      	lsls	r4, r4, #23
 8000cc0:	0a58      	lsrs	r0, r3, #9
 8000cc2:	07d2      	lsls	r2, r2, #31
 8000cc4:	4320      	orrs	r0, r4
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	bc1c      	pop	{r2, r3, r4}
 8000cca:	4690      	mov	r8, r2
 8000ccc:	4699      	mov	r9, r3
 8000cce:	46a2      	mov	sl, r4
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd2:	2cff      	cmp	r4, #255	; 0xff
 8000cd4:	d0e0      	beq.n	8000c98 <__aeabi_fsub+0x8c>
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	04c9      	lsls	r1, r1, #19
 8000cda:	430e      	orrs	r6, r1
 8000cdc:	2a1b      	cmp	r2, #27
 8000cde:	dc7b      	bgt.n	8000dd8 <__aeabi_fsub+0x1cc>
 8000ce0:	0031      	movs	r1, r6
 8000ce2:	2020      	movs	r0, #32
 8000ce4:	40d1      	lsrs	r1, r2
 8000ce6:	1a82      	subs	r2, r0, r2
 8000ce8:	4096      	lsls	r6, r2
 8000cea:	1e72      	subs	r2, r6, #1
 8000cec:	4196      	sbcs	r6, r2
 8000cee:	430e      	orrs	r6, r1
 8000cf0:	1b9b      	subs	r3, r3, r6
 8000cf2:	015a      	lsls	r2, r3, #5
 8000cf4:	d4ba      	bmi.n	8000c6c <__aeabi_fsub+0x60>
 8000cf6:	075a      	lsls	r2, r3, #29
 8000cf8:	d1d0      	bne.n	8000c9c <__aeabi_fsub+0x90>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	08df      	lsrs	r7, r3, #3
 8000cfe:	402a      	ands	r2, r5
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d133      	bne.n	8000d6c <__aeabi_fsub+0x160>
 8000d04:	2f00      	cmp	r7, #0
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0xfe>
 8000d08:	e0a8      	b.n	8000e5c <__aeabi_fsub+0x250>
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	03db      	lsls	r3, r3, #15
 8000d0e:	433b      	orrs	r3, r7
 8000d10:	025b      	lsls	r3, r3, #9
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	24ff      	movs	r4, #255	; 0xff
 8000d16:	e7d1      	b.n	8000cbc <__aeabi_fsub+0xb0>
 8000d18:	1a21      	subs	r1, r4, r0
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	dd4c      	ble.n	8000db8 <__aeabi_fsub+0x1ac>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d02a      	beq.n	8000d78 <__aeabi_fsub+0x16c>
 8000d22:	2cff      	cmp	r4, #255	; 0xff
 8000d24:	d0b8      	beq.n	8000c98 <__aeabi_fsub+0x8c>
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	04c0      	lsls	r0, r0, #19
 8000d2a:	4306      	orrs	r6, r0
 8000d2c:	291b      	cmp	r1, #27
 8000d2e:	dd00      	ble.n	8000d32 <__aeabi_fsub+0x126>
 8000d30:	e0af      	b.n	8000e92 <__aeabi_fsub+0x286>
 8000d32:	0030      	movs	r0, r6
 8000d34:	2720      	movs	r7, #32
 8000d36:	40c8      	lsrs	r0, r1
 8000d38:	1a79      	subs	r1, r7, r1
 8000d3a:	408e      	lsls	r6, r1
 8000d3c:	1e71      	subs	r1, r6, #1
 8000d3e:	418e      	sbcs	r6, r1
 8000d40:	4306      	orrs	r6, r0
 8000d42:	199b      	adds	r3, r3, r6
 8000d44:	0159      	lsls	r1, r3, #5
 8000d46:	d5d6      	bpl.n	8000cf6 <__aeabi_fsub+0xea>
 8000d48:	3401      	adds	r4, #1
 8000d4a:	2cff      	cmp	r4, #255	; 0xff
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x144>
 8000d4e:	e085      	b.n	8000e5c <__aeabi_fsub+0x250>
 8000d50:	2201      	movs	r2, #1
 8000d52:	497a      	ldr	r1, [pc, #488]	; (8000f3c <__aeabi_fsub+0x330>)
 8000d54:	401a      	ands	r2, r3
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	400b      	ands	r3, r1
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	e79c      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_fsub+0x158>
 8000d62:	e770      	b.n	8000c46 <__aeabi_fsub+0x3a>
 8000d64:	e76b      	b.n	8000c3e <__aeabi_fsub+0x32>
 8000d66:	1e3b      	subs	r3, r7, #0
 8000d68:	d1c5      	bne.n	8000cf6 <__aeabi_fsub+0xea>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	027b      	lsls	r3, r7, #9
 8000d6e:	0a5b      	lsrs	r3, r3, #9
 8000d70:	b2e4      	uxtb	r4, r4
 8000d72:	e7a3      	b.n	8000cbc <__aeabi_fsub+0xb0>
 8000d74:	0014      	movs	r4, r2
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d04d      	beq.n	8000e18 <__aeabi_fsub+0x20c>
 8000d7c:	1e48      	subs	r0, r1, #1
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d157      	bne.n	8000e32 <__aeabi_fsub+0x226>
 8000d82:	199b      	adds	r3, r3, r6
 8000d84:	2401      	movs	r4, #1
 8000d86:	015a      	lsls	r2, r3, #5
 8000d88:	d5b5      	bpl.n	8000cf6 <__aeabi_fsub+0xea>
 8000d8a:	2402      	movs	r4, #2
 8000d8c:	e7e0      	b.n	8000d50 <__aeabi_fsub+0x144>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d125      	bne.n	8000dde <__aeabi_fsub+0x1d2>
 8000d92:	1c62      	adds	r2, r4, #1
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	2a01      	cmp	r2, #1
 8000d98:	dd72      	ble.n	8000e80 <__aeabi_fsub+0x274>
 8000d9a:	1b9f      	subs	r7, r3, r6
 8000d9c:	017a      	lsls	r2, r7, #5
 8000d9e:	d535      	bpl.n	8000e0c <__aeabi_fsub+0x200>
 8000da0:	1af7      	subs	r7, r6, r3
 8000da2:	000d      	movs	r5, r1
 8000da4:	e764      	b.n	8000c70 <__aeabi_fsub+0x64>
 8000da6:	2201      	movs	r2, #1
 8000da8:	2300      	movs	r3, #0
 8000daa:	402a      	ands	r2, r5
 8000dac:	e786      	b.n	8000cbc <__aeabi_fsub+0xb0>
 8000dae:	003b      	movs	r3, r7
 8000db0:	4a63      	ldr	r2, [pc, #396]	; (8000f40 <__aeabi_fsub+0x334>)
 8000db2:	1a24      	subs	r4, r4, r0
 8000db4:	4013      	ands	r3, r2
 8000db6:	e76f      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d16c      	bne.n	8000e96 <__aeabi_fsub+0x28a>
 8000dbc:	1c61      	adds	r1, r4, #1
 8000dbe:	b2c8      	uxtb	r0, r1
 8000dc0:	2801      	cmp	r0, #1
 8000dc2:	dd4e      	ble.n	8000e62 <__aeabi_fsub+0x256>
 8000dc4:	29ff      	cmp	r1, #255	; 0xff
 8000dc6:	d049      	beq.n	8000e5c <__aeabi_fsub+0x250>
 8000dc8:	199b      	adds	r3, r3, r6
 8000dca:	085b      	lsrs	r3, r3, #1
 8000dcc:	000c      	movs	r4, r1
 8000dce:	e763      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000dd0:	2aff      	cmp	r2, #255	; 0xff
 8000dd2:	d041      	beq.n	8000e58 <__aeabi_fsub+0x24c>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	e781      	b.n	8000cdc <__aeabi_fsub+0xd0>
 8000dd8:	2601      	movs	r6, #1
 8000dda:	1b9b      	subs	r3, r3, r6
 8000ddc:	e789      	b.n	8000cf2 <__aeabi_fsub+0xe6>
 8000dde:	2c00      	cmp	r4, #0
 8000de0:	d01c      	beq.n	8000e1c <__aeabi_fsub+0x210>
 8000de2:	28ff      	cmp	r0, #255	; 0xff
 8000de4:	d021      	beq.n	8000e2a <__aeabi_fsub+0x21e>
 8000de6:	2480      	movs	r4, #128	; 0x80
 8000de8:	04e4      	lsls	r4, r4, #19
 8000dea:	4252      	negs	r2, r2
 8000dec:	4323      	orrs	r3, r4
 8000dee:	2a1b      	cmp	r2, #27
 8000df0:	dd00      	ble.n	8000df4 <__aeabi_fsub+0x1e8>
 8000df2:	e096      	b.n	8000f22 <__aeabi_fsub+0x316>
 8000df4:	001c      	movs	r4, r3
 8000df6:	2520      	movs	r5, #32
 8000df8:	40d4      	lsrs	r4, r2
 8000dfa:	1aaa      	subs	r2, r5, r2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	4193      	sbcs	r3, r2
 8000e02:	4323      	orrs	r3, r4
 8000e04:	1af3      	subs	r3, r6, r3
 8000e06:	0004      	movs	r4, r0
 8000e08:	000d      	movs	r5, r1
 8000e0a:	e72d      	b.n	8000c68 <__aeabi_fsub+0x5c>
 8000e0c:	2f00      	cmp	r7, #0
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fsub+0x206>
 8000e10:	e72e      	b.n	8000c70 <__aeabi_fsub+0x64>
 8000e12:	2200      	movs	r2, #0
 8000e14:	2400      	movs	r4, #0
 8000e16:	e7a9      	b.n	8000d6c <__aeabi_fsub+0x160>
 8000e18:	000c      	movs	r4, r1
 8000e1a:	e73d      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d058      	beq.n	8000ed2 <__aeabi_fsub+0x2c6>
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d0ee      	beq.n	8000e04 <__aeabi_fsub+0x1f8>
 8000e26:	28ff      	cmp	r0, #255	; 0xff
 8000e28:	d1e1      	bne.n	8000dee <__aeabi_fsub+0x1e2>
 8000e2a:	0033      	movs	r3, r6
 8000e2c:	24ff      	movs	r4, #255	; 0xff
 8000e2e:	000d      	movs	r5, r1
 8000e30:	e732      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e32:	29ff      	cmp	r1, #255	; 0xff
 8000e34:	d010      	beq.n	8000e58 <__aeabi_fsub+0x24c>
 8000e36:	0001      	movs	r1, r0
 8000e38:	e778      	b.n	8000d2c <__aeabi_fsub+0x120>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d06e      	beq.n	8000f1c <__aeabi_fsub+0x310>
 8000e3e:	24ff      	movs	r4, #255	; 0xff
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x23a>
 8000e44:	e728      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	4651      	mov	r1, sl
 8000e4a:	03d2      	lsls	r2, r2, #15
 8000e4c:	4211      	tst	r1, r2
 8000e4e:	d003      	beq.n	8000e58 <__aeabi_fsub+0x24c>
 8000e50:	4661      	mov	r1, ip
 8000e52:	4211      	tst	r1, r2
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x24c>
 8000e56:	0033      	movs	r3, r6
 8000e58:	24ff      	movs	r4, #255	; 0xff
 8000e5a:	e71d      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e5c:	24ff      	movs	r4, #255	; 0xff
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e72c      	b.n	8000cbc <__aeabi_fsub+0xb0>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d1e9      	bne.n	8000e3a <__aeabi_fsub+0x22e>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d063      	beq.n	8000f32 <__aeabi_fsub+0x326>
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x264>
 8000e6e:	e713      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e70:	199b      	adds	r3, r3, r6
 8000e72:	015a      	lsls	r2, r3, #5
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_fsub+0x26c>
 8000e76:	e73e      	b.n	8000cf6 <__aeabi_fsub+0xea>
 8000e78:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <__aeabi_fsub+0x334>)
 8000e7a:	000c      	movs	r4, r1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	e70b      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d11e      	bne.n	8000ec2 <__aeabi_fsub+0x2b6>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d12f      	bne.n	8000ee8 <__aeabi_fsub+0x2dc>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d04f      	beq.n	8000f2c <__aeabi_fsub+0x320>
 8000e8c:	0033      	movs	r3, r6
 8000e8e:	000d      	movs	r5, r1
 8000e90:	e702      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000e92:	2601      	movs	r6, #1
 8000e94:	e755      	b.n	8000d42 <__aeabi_fsub+0x136>
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	d11f      	bne.n	8000eda <__aeabi_fsub+0x2ce>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d043      	beq.n	8000f26 <__aeabi_fsub+0x31a>
 8000e9e:	43c9      	mvns	r1, r1
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d00b      	beq.n	8000ebc <__aeabi_fsub+0x2b0>
 8000ea4:	28ff      	cmp	r0, #255	; 0xff
 8000ea6:	d039      	beq.n	8000f1c <__aeabi_fsub+0x310>
 8000ea8:	291b      	cmp	r1, #27
 8000eaa:	dc44      	bgt.n	8000f36 <__aeabi_fsub+0x32a>
 8000eac:	001c      	movs	r4, r3
 8000eae:	2720      	movs	r7, #32
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	1a79      	subs	r1, r7, r1
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	1e59      	subs	r1, r3, #1
 8000eb8:	418b      	sbcs	r3, r1
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	199b      	adds	r3, r3, r6
 8000ebe:	0004      	movs	r4, r0
 8000ec0:	e740      	b.n	8000d44 <__aeabi_fsub+0x138>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11a      	bne.n	8000efc <__aeabi_fsub+0x2f0>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d124      	bne.n	8000f14 <__aeabi_fsub+0x308>
 8000eca:	2780      	movs	r7, #128	; 0x80
 8000ecc:	2200      	movs	r2, #0
 8000ece:	03ff      	lsls	r7, r7, #15
 8000ed0:	e71b      	b.n	8000d0a <__aeabi_fsub+0xfe>
 8000ed2:	0033      	movs	r3, r6
 8000ed4:	0004      	movs	r4, r0
 8000ed6:	000d      	movs	r5, r1
 8000ed8:	e6de      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000eda:	28ff      	cmp	r0, #255	; 0xff
 8000edc:	d01e      	beq.n	8000f1c <__aeabi_fsub+0x310>
 8000ede:	2480      	movs	r4, #128	; 0x80
 8000ee0:	04e4      	lsls	r4, r4, #19
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	4323      	orrs	r3, r4
 8000ee6:	e7df      	b.n	8000ea8 <__aeabi_fsub+0x29c>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x2e2>
 8000eec:	e6d4      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000eee:	1b9f      	subs	r7, r3, r6
 8000ef0:	017a      	lsls	r2, r7, #5
 8000ef2:	d400      	bmi.n	8000ef6 <__aeabi_fsub+0x2ea>
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fsub+0x15a>
 8000ef6:	1af3      	subs	r3, r6, r3
 8000ef8:	000d      	movs	r5, r1
 8000efa:	e6cd      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000efc:	24ff      	movs	r4, #255	; 0xff
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x2f8>
 8000f02:	e6c9      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	4650      	mov	r0, sl
 8000f08:	03d2      	lsls	r2, r2, #15
 8000f0a:	4210      	tst	r0, r2
 8000f0c:	d0a4      	beq.n	8000e58 <__aeabi_fsub+0x24c>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	4210      	tst	r0, r2
 8000f12:	d1a1      	bne.n	8000e58 <__aeabi_fsub+0x24c>
 8000f14:	0033      	movs	r3, r6
 8000f16:	000d      	movs	r5, r1
 8000f18:	24ff      	movs	r4, #255	; 0xff
 8000f1a:	e6bd      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000f1c:	0033      	movs	r3, r6
 8000f1e:	24ff      	movs	r4, #255	; 0xff
 8000f20:	e6ba      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e76e      	b.n	8000e04 <__aeabi_fsub+0x1f8>
 8000f26:	0033      	movs	r3, r6
 8000f28:	0004      	movs	r4, r0
 8000f2a:	e6b5      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	2200      	movs	r2, #0
 8000f30:	e71c      	b.n	8000d6c <__aeabi_fsub+0x160>
 8000f32:	0033      	movs	r3, r6
 8000f34:	e6b0      	b.n	8000c98 <__aeabi_fsub+0x8c>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e7c0      	b.n	8000ebc <__aeabi_fsub+0x2b0>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0043      	lsls	r3, r0, #1
 8000f48:	0fc2      	lsrs	r2, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	0e1b      	lsrs	r3, r3, #24
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2b7e      	cmp	r3, #126	; 0x7e
 8000f52:	dd0d      	ble.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f54:	2b9d      	cmp	r3, #157	; 0x9d
 8000f56:	dc0c      	bgt.n	8000f72 <__aeabi_f2iz+0x2e>
 8000f58:	2080      	movs	r0, #128	; 0x80
 8000f5a:	0400      	lsls	r0, r0, #16
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	2b95      	cmp	r3, #149	; 0x95
 8000f60:	dc0a      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f62:	2096      	movs	r0, #150	; 0x96
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	40d9      	lsrs	r1, r3
 8000f68:	4248      	negs	r0, r1
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f6e:	0008      	movs	r0, r1
 8000f70:	4770      	bx	lr
 8000f72:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f74:	18d0      	adds	r0, r2, r3
 8000f76:	e7fb      	b.n	8000f70 <__aeabi_f2iz+0x2c>
 8000f78:	3b96      	subs	r3, #150	; 0x96
 8000f7a:	4099      	lsls	r1, r3
 8000f7c:	e7f4      	b.n	8000f68 <__aeabi_f2iz+0x24>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d030      	beq.n	8000fec <__aeabi_i2f+0x68>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c4      	adds	r4, r0, r3
 8000f8e:	405c      	eors	r4, r3
 8000f90:	0fc5      	lsrs	r5, r0, #31
 8000f92:	0020      	movs	r0, r4
 8000f94:	f001 fe36 	bl	8002c04 <__clzsi2>
 8000f98:	239e      	movs	r3, #158	; 0x9e
 8000f9a:	1a1b      	subs	r3, r3, r0
 8000f9c:	2b96      	cmp	r3, #150	; 0x96
 8000f9e:	dc0d      	bgt.n	8000fbc <__aeabi_i2f+0x38>
 8000fa0:	2296      	movs	r2, #150	; 0x96
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	4094      	lsls	r4, r2
 8000fa6:	002a      	movs	r2, r5
 8000fa8:	0264      	lsls	r4, r4, #9
 8000faa:	0a64      	lsrs	r4, r4, #9
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	0264      	lsls	r4, r4, #9
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	0a60      	lsrs	r0, r4, #9
 8000fb4:	07d2      	lsls	r2, r2, #31
 8000fb6:	4318      	orrs	r0, r3
 8000fb8:	4310      	orrs	r0, r2
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	2b99      	cmp	r3, #153	; 0x99
 8000fbe:	dc19      	bgt.n	8000ff4 <__aeabi_i2f+0x70>
 8000fc0:	2299      	movs	r2, #153	; 0x99
 8000fc2:	1ad2      	subs	r2, r2, r3
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	dd29      	ble.n	800101c <__aeabi_i2f+0x98>
 8000fc8:	4094      	lsls	r4, r2
 8000fca:	0022      	movs	r2, r4
 8000fcc:	4c14      	ldr	r4, [pc, #80]	; (8001020 <__aeabi_i2f+0x9c>)
 8000fce:	4014      	ands	r4, r2
 8000fd0:	0751      	lsls	r1, r2, #29
 8000fd2:	d004      	beq.n	8000fde <__aeabi_i2f+0x5a>
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	2a04      	cmp	r2, #4
 8000fda:	d000      	beq.n	8000fde <__aeabi_i2f+0x5a>
 8000fdc:	3404      	adds	r4, #4
 8000fde:	0162      	lsls	r2, r4, #5
 8000fe0:	d413      	bmi.n	800100a <__aeabi_i2f+0x86>
 8000fe2:	01a4      	lsls	r4, r4, #6
 8000fe4:	0a64      	lsrs	r4, r4, #9
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	002a      	movs	r2, r5
 8000fea:	e7e0      	b.n	8000fae <__aeabi_i2f+0x2a>
 8000fec:	2200      	movs	r2, #0
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	e7dc      	b.n	8000fae <__aeabi_i2f+0x2a>
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	1a12      	subs	r2, r2, r0
 8000ffa:	40d1      	lsrs	r1, r2
 8000ffc:	22b9      	movs	r2, #185	; 0xb9
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	4094      	lsls	r4, r2
 8001002:	1e62      	subs	r2, r4, #1
 8001004:	4194      	sbcs	r4, r2
 8001006:	430c      	orrs	r4, r1
 8001008:	e7da      	b.n	8000fc0 <__aeabi_i2f+0x3c>
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <__aeabi_i2f+0x9c>)
 800100c:	002a      	movs	r2, r5
 800100e:	401c      	ands	r4, r3
 8001010:	239f      	movs	r3, #159	; 0x9f
 8001012:	01a4      	lsls	r4, r4, #6
 8001014:	1a1b      	subs	r3, r3, r0
 8001016:	0a64      	lsrs	r4, r4, #9
 8001018:	b2db      	uxtb	r3, r3
 800101a:	e7c8      	b.n	8000fae <__aeabi_i2f+0x2a>
 800101c:	0022      	movs	r2, r4
 800101e:	e7d5      	b.n	8000fcc <__aeabi_i2f+0x48>
 8001020:	fbffffff 	.word	0xfbffffff

08001024 <__aeabi_ui2f>:
 8001024:	b510      	push	{r4, lr}
 8001026:	1e04      	subs	r4, r0, #0
 8001028:	d027      	beq.n	800107a <__aeabi_ui2f+0x56>
 800102a:	f001 fdeb 	bl	8002c04 <__clzsi2>
 800102e:	239e      	movs	r3, #158	; 0x9e
 8001030:	1a1b      	subs	r3, r3, r0
 8001032:	2b96      	cmp	r3, #150	; 0x96
 8001034:	dc0a      	bgt.n	800104c <__aeabi_ui2f+0x28>
 8001036:	2296      	movs	r2, #150	; 0x96
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	4094      	lsls	r4, r2
 800103c:	0264      	lsls	r4, r4, #9
 800103e:	0a64      	lsrs	r4, r4, #9
 8001040:	b2db      	uxtb	r3, r3
 8001042:	0264      	lsls	r4, r4, #9
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	0a60      	lsrs	r0, r4, #9
 8001048:	4318      	orrs	r0, r3
 800104a:	bd10      	pop	{r4, pc}
 800104c:	2b99      	cmp	r3, #153	; 0x99
 800104e:	dc17      	bgt.n	8001080 <__aeabi_ui2f+0x5c>
 8001050:	2299      	movs	r2, #153	; 0x99
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	2a00      	cmp	r2, #0
 8001056:	dd27      	ble.n	80010a8 <__aeabi_ui2f+0x84>
 8001058:	4094      	lsls	r4, r2
 800105a:	0022      	movs	r2, r4
 800105c:	4c13      	ldr	r4, [pc, #76]	; (80010ac <__aeabi_ui2f+0x88>)
 800105e:	4014      	ands	r4, r2
 8001060:	0751      	lsls	r1, r2, #29
 8001062:	d004      	beq.n	800106e <__aeabi_ui2f+0x4a>
 8001064:	210f      	movs	r1, #15
 8001066:	400a      	ands	r2, r1
 8001068:	2a04      	cmp	r2, #4
 800106a:	d000      	beq.n	800106e <__aeabi_ui2f+0x4a>
 800106c:	3404      	adds	r4, #4
 800106e:	0162      	lsls	r2, r4, #5
 8001070:	d412      	bmi.n	8001098 <__aeabi_ui2f+0x74>
 8001072:	01a4      	lsls	r4, r4, #6
 8001074:	0a64      	lsrs	r4, r4, #9
 8001076:	b2db      	uxtb	r3, r3
 8001078:	e7e3      	b.n	8001042 <__aeabi_ui2f+0x1e>
 800107a:	2300      	movs	r3, #0
 800107c:	2400      	movs	r4, #0
 800107e:	e7e0      	b.n	8001042 <__aeabi_ui2f+0x1e>
 8001080:	22b9      	movs	r2, #185	; 0xb9
 8001082:	0021      	movs	r1, r4
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	1e51      	subs	r1, r2, #1
 800108c:	418a      	sbcs	r2, r1
 800108e:	2105      	movs	r1, #5
 8001090:	1a09      	subs	r1, r1, r0
 8001092:	40cc      	lsrs	r4, r1
 8001094:	4314      	orrs	r4, r2
 8001096:	e7db      	b.n	8001050 <__aeabi_ui2f+0x2c>
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__aeabi_ui2f+0x88>)
 800109a:	401c      	ands	r4, r3
 800109c:	239f      	movs	r3, #159	; 0x9f
 800109e:	01a4      	lsls	r4, r4, #6
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	0a64      	lsrs	r4, r4, #9
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	e7cc      	b.n	8001042 <__aeabi_ui2f+0x1e>
 80010a8:	0022      	movs	r2, r4
 80010aa:	e7d7      	b.n	800105c <__aeabi_ui2f+0x38>
 80010ac:	fbffffff 	.word	0xfbffffff

080010b0 <__aeabi_dadd>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	4645      	mov	r5, r8
 80010b4:	46de      	mov	lr, fp
 80010b6:	4657      	mov	r7, sl
 80010b8:	464e      	mov	r6, r9
 80010ba:	030c      	lsls	r4, r1, #12
 80010bc:	b5e0      	push	{r5, r6, r7, lr}
 80010be:	004e      	lsls	r6, r1, #1
 80010c0:	0fc9      	lsrs	r1, r1, #31
 80010c2:	4688      	mov	r8, r1
 80010c4:	000d      	movs	r5, r1
 80010c6:	0a61      	lsrs	r1, r4, #9
 80010c8:	0f44      	lsrs	r4, r0, #29
 80010ca:	430c      	orrs	r4, r1
 80010cc:	00c7      	lsls	r7, r0, #3
 80010ce:	0319      	lsls	r1, r3, #12
 80010d0:	0058      	lsls	r0, r3, #1
 80010d2:	0fdb      	lsrs	r3, r3, #31
 80010d4:	469b      	mov	fp, r3
 80010d6:	0a4b      	lsrs	r3, r1, #9
 80010d8:	0f51      	lsrs	r1, r2, #29
 80010da:	430b      	orrs	r3, r1
 80010dc:	0d76      	lsrs	r6, r6, #21
 80010de:	0d40      	lsrs	r0, r0, #21
 80010e0:	0019      	movs	r1, r3
 80010e2:	00d2      	lsls	r2, r2, #3
 80010e4:	45d8      	cmp	r8, fp
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x3a>
 80010e8:	e0ae      	b.n	8001248 <__aeabi_dadd+0x198>
 80010ea:	1a35      	subs	r5, r6, r0
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_dadd+0x42>
 80010f0:	e0f6      	b.n	80012e0 <__aeabi_dadd+0x230>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d10f      	bne.n	8001116 <__aeabi_dadd+0x66>
 80010f6:	4313      	orrs	r3, r2
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x4c>
 80010fa:	e0db      	b.n	80012b4 <__aeabi_dadd+0x204>
 80010fc:	1e6b      	subs	r3, r5, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d000      	beq.n	8001104 <__aeabi_dadd+0x54>
 8001102:	e137      	b.n	8001374 <__aeabi_dadd+0x2c4>
 8001104:	1aba      	subs	r2, r7, r2
 8001106:	4297      	cmp	r7, r2
 8001108:	41bf      	sbcs	r7, r7
 800110a:	1a64      	subs	r4, r4, r1
 800110c:	427f      	negs	r7, r7
 800110e:	1be4      	subs	r4, r4, r7
 8001110:	2601      	movs	r6, #1
 8001112:	0017      	movs	r7, r2
 8001114:	e024      	b.n	8001160 <__aeabi_dadd+0xb0>
 8001116:	4bc6      	ldr	r3, [pc, #792]	; (8001430 <__aeabi_dadd+0x380>)
 8001118:	429e      	cmp	r6, r3
 800111a:	d04d      	beq.n	80011b8 <__aeabi_dadd+0x108>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	4319      	orrs	r1, r3
 8001122:	2d38      	cmp	r5, #56	; 0x38
 8001124:	dd00      	ble.n	8001128 <__aeabi_dadd+0x78>
 8001126:	e107      	b.n	8001338 <__aeabi_dadd+0x288>
 8001128:	2d1f      	cmp	r5, #31
 800112a:	dd00      	ble.n	800112e <__aeabi_dadd+0x7e>
 800112c:	e138      	b.n	80013a0 <__aeabi_dadd+0x2f0>
 800112e:	2020      	movs	r0, #32
 8001130:	1b43      	subs	r3, r0, r5
 8001132:	469a      	mov	sl, r3
 8001134:	000b      	movs	r3, r1
 8001136:	4650      	mov	r0, sl
 8001138:	4083      	lsls	r3, r0
 800113a:	4699      	mov	r9, r3
 800113c:	0013      	movs	r3, r2
 800113e:	4648      	mov	r0, r9
 8001140:	40eb      	lsrs	r3, r5
 8001142:	4318      	orrs	r0, r3
 8001144:	0003      	movs	r3, r0
 8001146:	4650      	mov	r0, sl
 8001148:	4082      	lsls	r2, r0
 800114a:	1e50      	subs	r0, r2, #1
 800114c:	4182      	sbcs	r2, r0
 800114e:	40e9      	lsrs	r1, r5
 8001150:	431a      	orrs	r2, r3
 8001152:	1aba      	subs	r2, r7, r2
 8001154:	1a61      	subs	r1, r4, r1
 8001156:	4297      	cmp	r7, r2
 8001158:	41a4      	sbcs	r4, r4
 800115a:	0017      	movs	r7, r2
 800115c:	4264      	negs	r4, r4
 800115e:	1b0c      	subs	r4, r1, r4
 8001160:	0223      	lsls	r3, r4, #8
 8001162:	d562      	bpl.n	800122a <__aeabi_dadd+0x17a>
 8001164:	0264      	lsls	r4, r4, #9
 8001166:	0a65      	lsrs	r5, r4, #9
 8001168:	2d00      	cmp	r5, #0
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0xbe>
 800116c:	e0df      	b.n	800132e <__aeabi_dadd+0x27e>
 800116e:	0028      	movs	r0, r5
 8001170:	f001 fd48 	bl	8002c04 <__clzsi2>
 8001174:	0003      	movs	r3, r0
 8001176:	3b08      	subs	r3, #8
 8001178:	2b1f      	cmp	r3, #31
 800117a:	dd00      	ble.n	800117e <__aeabi_dadd+0xce>
 800117c:	e0d2      	b.n	8001324 <__aeabi_dadd+0x274>
 800117e:	2220      	movs	r2, #32
 8001180:	003c      	movs	r4, r7
 8001182:	1ad2      	subs	r2, r2, r3
 8001184:	409d      	lsls	r5, r3
 8001186:	40d4      	lsrs	r4, r2
 8001188:	409f      	lsls	r7, r3
 800118a:	4325      	orrs	r5, r4
 800118c:	429e      	cmp	r6, r3
 800118e:	dd00      	ble.n	8001192 <__aeabi_dadd+0xe2>
 8001190:	e0c4      	b.n	800131c <__aeabi_dadd+0x26c>
 8001192:	1b9e      	subs	r6, r3, r6
 8001194:	1c73      	adds	r3, r6, #1
 8001196:	2b1f      	cmp	r3, #31
 8001198:	dd00      	ble.n	800119c <__aeabi_dadd+0xec>
 800119a:	e0f1      	b.n	8001380 <__aeabi_dadd+0x2d0>
 800119c:	2220      	movs	r2, #32
 800119e:	0038      	movs	r0, r7
 80011a0:	0029      	movs	r1, r5
 80011a2:	1ad2      	subs	r2, r2, r3
 80011a4:	40d8      	lsrs	r0, r3
 80011a6:	4091      	lsls	r1, r2
 80011a8:	4097      	lsls	r7, r2
 80011aa:	002c      	movs	r4, r5
 80011ac:	4301      	orrs	r1, r0
 80011ae:	1e78      	subs	r0, r7, #1
 80011b0:	4187      	sbcs	r7, r0
 80011b2:	40dc      	lsrs	r4, r3
 80011b4:	2600      	movs	r6, #0
 80011b6:	430f      	orrs	r7, r1
 80011b8:	077b      	lsls	r3, r7, #29
 80011ba:	d009      	beq.n	80011d0 <__aeabi_dadd+0x120>
 80011bc:	230f      	movs	r3, #15
 80011be:	403b      	ands	r3, r7
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d005      	beq.n	80011d0 <__aeabi_dadd+0x120>
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	42bb      	cmp	r3, r7
 80011c8:	41bf      	sbcs	r7, r7
 80011ca:	427f      	negs	r7, r7
 80011cc:	19e4      	adds	r4, r4, r7
 80011ce:	001f      	movs	r7, r3
 80011d0:	0223      	lsls	r3, r4, #8
 80011d2:	d52c      	bpl.n	800122e <__aeabi_dadd+0x17e>
 80011d4:	4b96      	ldr	r3, [pc, #600]	; (8001430 <__aeabi_dadd+0x380>)
 80011d6:	3601      	adds	r6, #1
 80011d8:	429e      	cmp	r6, r3
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x12e>
 80011dc:	e09a      	b.n	8001314 <__aeabi_dadd+0x264>
 80011de:	4645      	mov	r5, r8
 80011e0:	4b94      	ldr	r3, [pc, #592]	; (8001434 <__aeabi_dadd+0x384>)
 80011e2:	08ff      	lsrs	r7, r7, #3
 80011e4:	401c      	ands	r4, r3
 80011e6:	0760      	lsls	r0, r4, #29
 80011e8:	0576      	lsls	r6, r6, #21
 80011ea:	0264      	lsls	r4, r4, #9
 80011ec:	4307      	orrs	r7, r0
 80011ee:	0b24      	lsrs	r4, r4, #12
 80011f0:	0d76      	lsrs	r6, r6, #21
 80011f2:	2100      	movs	r1, #0
 80011f4:	0324      	lsls	r4, r4, #12
 80011f6:	0b23      	lsrs	r3, r4, #12
 80011f8:	0d0c      	lsrs	r4, r1, #20
 80011fa:	4a8f      	ldr	r2, [pc, #572]	; (8001438 <__aeabi_dadd+0x388>)
 80011fc:	0524      	lsls	r4, r4, #20
 80011fe:	431c      	orrs	r4, r3
 8001200:	4014      	ands	r4, r2
 8001202:	0533      	lsls	r3, r6, #20
 8001204:	4323      	orrs	r3, r4
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	07ed      	lsls	r5, r5, #31
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	432b      	orrs	r3, r5
 800120e:	0038      	movs	r0, r7
 8001210:	0019      	movs	r1, r3
 8001212:	bc3c      	pop	{r2, r3, r4, r5}
 8001214:	4690      	mov	r8, r2
 8001216:	4699      	mov	r9, r3
 8001218:	46a2      	mov	sl, r4
 800121a:	46ab      	mov	fp, r5
 800121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121e:	4664      	mov	r4, ip
 8001220:	4304      	orrs	r4, r0
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x176>
 8001224:	e211      	b.n	800164a <__aeabi_dadd+0x59a>
 8001226:	0004      	movs	r4, r0
 8001228:	4667      	mov	r7, ip
 800122a:	077b      	lsls	r3, r7, #29
 800122c:	d1c6      	bne.n	80011bc <__aeabi_dadd+0x10c>
 800122e:	4645      	mov	r5, r8
 8001230:	0760      	lsls	r0, r4, #29
 8001232:	08ff      	lsrs	r7, r7, #3
 8001234:	4307      	orrs	r7, r0
 8001236:	08e4      	lsrs	r4, r4, #3
 8001238:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <__aeabi_dadd+0x380>)
 800123a:	429e      	cmp	r6, r3
 800123c:	d030      	beq.n	80012a0 <__aeabi_dadd+0x1f0>
 800123e:	0324      	lsls	r4, r4, #12
 8001240:	0576      	lsls	r6, r6, #21
 8001242:	0b24      	lsrs	r4, r4, #12
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	e7d4      	b.n	80011f2 <__aeabi_dadd+0x142>
 8001248:	1a33      	subs	r3, r6, r0
 800124a:	469a      	mov	sl, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd78      	ble.n	8001342 <__aeabi_dadd+0x292>
 8001250:	2800      	cmp	r0, #0
 8001252:	d031      	beq.n	80012b8 <__aeabi_dadd+0x208>
 8001254:	4876      	ldr	r0, [pc, #472]	; (8001430 <__aeabi_dadd+0x380>)
 8001256:	4286      	cmp	r6, r0
 8001258:	d0ae      	beq.n	80011b8 <__aeabi_dadd+0x108>
 800125a:	2080      	movs	r0, #128	; 0x80
 800125c:	0400      	lsls	r0, r0, #16
 800125e:	4301      	orrs	r1, r0
 8001260:	4653      	mov	r3, sl
 8001262:	2b38      	cmp	r3, #56	; 0x38
 8001264:	dc00      	bgt.n	8001268 <__aeabi_dadd+0x1b8>
 8001266:	e0e9      	b.n	800143c <__aeabi_dadd+0x38c>
 8001268:	430a      	orrs	r2, r1
 800126a:	1e51      	subs	r1, r2, #1
 800126c:	418a      	sbcs	r2, r1
 800126e:	2100      	movs	r1, #0
 8001270:	19d2      	adds	r2, r2, r7
 8001272:	42ba      	cmp	r2, r7
 8001274:	41bf      	sbcs	r7, r7
 8001276:	1909      	adds	r1, r1, r4
 8001278:	427c      	negs	r4, r7
 800127a:	0017      	movs	r7, r2
 800127c:	190c      	adds	r4, r1, r4
 800127e:	0223      	lsls	r3, r4, #8
 8001280:	d5d3      	bpl.n	800122a <__aeabi_dadd+0x17a>
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <__aeabi_dadd+0x380>)
 8001284:	3601      	adds	r6, #1
 8001286:	429e      	cmp	r6, r3
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x1dc>
 800128a:	e13a      	b.n	8001502 <__aeabi_dadd+0x452>
 800128c:	2001      	movs	r0, #1
 800128e:	4b69      	ldr	r3, [pc, #420]	; (8001434 <__aeabi_dadd+0x384>)
 8001290:	401c      	ands	r4, r3
 8001292:	087b      	lsrs	r3, r7, #1
 8001294:	4007      	ands	r7, r0
 8001296:	431f      	orrs	r7, r3
 8001298:	07e0      	lsls	r0, r4, #31
 800129a:	4307      	orrs	r7, r0
 800129c:	0864      	lsrs	r4, r4, #1
 800129e:	e78b      	b.n	80011b8 <__aeabi_dadd+0x108>
 80012a0:	0023      	movs	r3, r4
 80012a2:	433b      	orrs	r3, r7
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dadd+0x1f8>
 80012a6:	e1cb      	b.n	8001640 <__aeabi_dadd+0x590>
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0312      	lsls	r2, r2, #12
 80012ac:	4314      	orrs	r4, r2
 80012ae:	0324      	lsls	r4, r4, #12
 80012b0:	0b24      	lsrs	r4, r4, #12
 80012b2:	e79e      	b.n	80011f2 <__aeabi_dadd+0x142>
 80012b4:	002e      	movs	r6, r5
 80012b6:	e77f      	b.n	80011b8 <__aeabi_dadd+0x108>
 80012b8:	0008      	movs	r0, r1
 80012ba:	4310      	orrs	r0, r2
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x210>
 80012be:	e0b4      	b.n	800142a <__aeabi_dadd+0x37a>
 80012c0:	1e58      	subs	r0, r3, #1
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_dadd+0x218>
 80012c6:	e0de      	b.n	8001486 <__aeabi_dadd+0x3d6>
 80012c8:	18ba      	adds	r2, r7, r2
 80012ca:	42ba      	cmp	r2, r7
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	1864      	adds	r4, r4, r1
 80012d0:	425b      	negs	r3, r3
 80012d2:	18e4      	adds	r4, r4, r3
 80012d4:	0017      	movs	r7, r2
 80012d6:	2601      	movs	r6, #1
 80012d8:	0223      	lsls	r3, r4, #8
 80012da:	d5a6      	bpl.n	800122a <__aeabi_dadd+0x17a>
 80012dc:	2602      	movs	r6, #2
 80012de:	e7d5      	b.n	800128c <__aeabi_dadd+0x1dc>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d16e      	bne.n	80013c2 <__aeabi_dadd+0x312>
 80012e4:	1c70      	adds	r0, r6, #1
 80012e6:	0540      	lsls	r0, r0, #21
 80012e8:	0d40      	lsrs	r0, r0, #21
 80012ea:	2801      	cmp	r0, #1
 80012ec:	dc00      	bgt.n	80012f0 <__aeabi_dadd+0x240>
 80012ee:	e0f9      	b.n	80014e4 <__aeabi_dadd+0x434>
 80012f0:	1ab8      	subs	r0, r7, r2
 80012f2:	4684      	mov	ip, r0
 80012f4:	4287      	cmp	r7, r0
 80012f6:	4180      	sbcs	r0, r0
 80012f8:	1ae5      	subs	r5, r4, r3
 80012fa:	4240      	negs	r0, r0
 80012fc:	1a2d      	subs	r5, r5, r0
 80012fe:	0228      	lsls	r0, r5, #8
 8001300:	d400      	bmi.n	8001304 <__aeabi_dadd+0x254>
 8001302:	e089      	b.n	8001418 <__aeabi_dadd+0x368>
 8001304:	1bd7      	subs	r7, r2, r7
 8001306:	42ba      	cmp	r2, r7
 8001308:	4192      	sbcs	r2, r2
 800130a:	1b1c      	subs	r4, r3, r4
 800130c:	4252      	negs	r2, r2
 800130e:	1aa5      	subs	r5, r4, r2
 8001310:	46d8      	mov	r8, fp
 8001312:	e729      	b.n	8001168 <__aeabi_dadd+0xb8>
 8001314:	4645      	mov	r5, r8
 8001316:	2400      	movs	r4, #0
 8001318:	2700      	movs	r7, #0
 800131a:	e76a      	b.n	80011f2 <__aeabi_dadd+0x142>
 800131c:	4c45      	ldr	r4, [pc, #276]	; (8001434 <__aeabi_dadd+0x384>)
 800131e:	1af6      	subs	r6, r6, r3
 8001320:	402c      	ands	r4, r5
 8001322:	e749      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001324:	003d      	movs	r5, r7
 8001326:	3828      	subs	r0, #40	; 0x28
 8001328:	4085      	lsls	r5, r0
 800132a:	2700      	movs	r7, #0
 800132c:	e72e      	b.n	800118c <__aeabi_dadd+0xdc>
 800132e:	0038      	movs	r0, r7
 8001330:	f001 fc68 	bl	8002c04 <__clzsi2>
 8001334:	3020      	adds	r0, #32
 8001336:	e71d      	b.n	8001174 <__aeabi_dadd+0xc4>
 8001338:	430a      	orrs	r2, r1
 800133a:	1e51      	subs	r1, r2, #1
 800133c:	418a      	sbcs	r2, r1
 800133e:	2100      	movs	r1, #0
 8001340:	e707      	b.n	8001152 <__aeabi_dadd+0xa2>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_dadd+0x298>
 8001346:	e0f3      	b.n	8001530 <__aeabi_dadd+0x480>
 8001348:	1c70      	adds	r0, r6, #1
 800134a:	0543      	lsls	r3, r0, #21
 800134c:	0d5b      	lsrs	r3, r3, #21
 800134e:	2b01      	cmp	r3, #1
 8001350:	dc00      	bgt.n	8001354 <__aeabi_dadd+0x2a4>
 8001352:	e0ad      	b.n	80014b0 <__aeabi_dadd+0x400>
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <__aeabi_dadd+0x380>)
 8001356:	4298      	cmp	r0, r3
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x2ac>
 800135a:	e0d1      	b.n	8001500 <__aeabi_dadd+0x450>
 800135c:	18ba      	adds	r2, r7, r2
 800135e:	42ba      	cmp	r2, r7
 8001360:	41bf      	sbcs	r7, r7
 8001362:	1864      	adds	r4, r4, r1
 8001364:	427f      	negs	r7, r7
 8001366:	19e4      	adds	r4, r4, r7
 8001368:	07e7      	lsls	r7, r4, #31
 800136a:	0852      	lsrs	r2, r2, #1
 800136c:	4317      	orrs	r7, r2
 800136e:	0864      	lsrs	r4, r4, #1
 8001370:	0006      	movs	r6, r0
 8001372:	e721      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <__aeabi_dadd+0x380>)
 8001376:	4285      	cmp	r5, r0
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x2cc>
 800137a:	e093      	b.n	80014a4 <__aeabi_dadd+0x3f4>
 800137c:	001d      	movs	r5, r3
 800137e:	e6d0      	b.n	8001122 <__aeabi_dadd+0x72>
 8001380:	0029      	movs	r1, r5
 8001382:	3e1f      	subs	r6, #31
 8001384:	40f1      	lsrs	r1, r6
 8001386:	2b20      	cmp	r3, #32
 8001388:	d100      	bne.n	800138c <__aeabi_dadd+0x2dc>
 800138a:	e08d      	b.n	80014a8 <__aeabi_dadd+0x3f8>
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	409d      	lsls	r5, r3
 8001392:	432f      	orrs	r7, r5
 8001394:	1e7d      	subs	r5, r7, #1
 8001396:	41af      	sbcs	r7, r5
 8001398:	2400      	movs	r4, #0
 800139a:	430f      	orrs	r7, r1
 800139c:	2600      	movs	r6, #0
 800139e:	e744      	b.n	800122a <__aeabi_dadd+0x17a>
 80013a0:	002b      	movs	r3, r5
 80013a2:	0008      	movs	r0, r1
 80013a4:	3b20      	subs	r3, #32
 80013a6:	40d8      	lsrs	r0, r3
 80013a8:	0003      	movs	r3, r0
 80013aa:	2d20      	cmp	r5, #32
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dadd+0x300>
 80013ae:	e07d      	b.n	80014ac <__aeabi_dadd+0x3fc>
 80013b0:	2040      	movs	r0, #64	; 0x40
 80013b2:	1b45      	subs	r5, r0, r5
 80013b4:	40a9      	lsls	r1, r5
 80013b6:	430a      	orrs	r2, r1
 80013b8:	1e51      	subs	r1, r2, #1
 80013ba:	418a      	sbcs	r2, r1
 80013bc:	2100      	movs	r1, #0
 80013be:	431a      	orrs	r2, r3
 80013c0:	e6c7      	b.n	8001152 <__aeabi_dadd+0xa2>
 80013c2:	2e00      	cmp	r6, #0
 80013c4:	d050      	beq.n	8001468 <__aeabi_dadd+0x3b8>
 80013c6:	4e1a      	ldr	r6, [pc, #104]	; (8001430 <__aeabi_dadd+0x380>)
 80013c8:	42b0      	cmp	r0, r6
 80013ca:	d057      	beq.n	800147c <__aeabi_dadd+0x3cc>
 80013cc:	2680      	movs	r6, #128	; 0x80
 80013ce:	426b      	negs	r3, r5
 80013d0:	4699      	mov	r9, r3
 80013d2:	0436      	lsls	r6, r6, #16
 80013d4:	4334      	orrs	r4, r6
 80013d6:	464b      	mov	r3, r9
 80013d8:	2b38      	cmp	r3, #56	; 0x38
 80013da:	dd00      	ble.n	80013de <__aeabi_dadd+0x32e>
 80013dc:	e0d6      	b.n	800158c <__aeabi_dadd+0x4dc>
 80013de:	2b1f      	cmp	r3, #31
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dadd+0x334>
 80013e2:	e135      	b.n	8001650 <__aeabi_dadd+0x5a0>
 80013e4:	2620      	movs	r6, #32
 80013e6:	1af5      	subs	r5, r6, r3
 80013e8:	0026      	movs	r6, r4
 80013ea:	40ae      	lsls	r6, r5
 80013ec:	46b2      	mov	sl, r6
 80013ee:	003e      	movs	r6, r7
 80013f0:	40de      	lsrs	r6, r3
 80013f2:	46ac      	mov	ip, r5
 80013f4:	0035      	movs	r5, r6
 80013f6:	4656      	mov	r6, sl
 80013f8:	432e      	orrs	r6, r5
 80013fa:	4665      	mov	r5, ip
 80013fc:	40af      	lsls	r7, r5
 80013fe:	1e7d      	subs	r5, r7, #1
 8001400:	41af      	sbcs	r7, r5
 8001402:	40dc      	lsrs	r4, r3
 8001404:	4337      	orrs	r7, r6
 8001406:	1bd7      	subs	r7, r2, r7
 8001408:	42ba      	cmp	r2, r7
 800140a:	4192      	sbcs	r2, r2
 800140c:	1b0c      	subs	r4, r1, r4
 800140e:	4252      	negs	r2, r2
 8001410:	1aa4      	subs	r4, r4, r2
 8001412:	0006      	movs	r6, r0
 8001414:	46d8      	mov	r8, fp
 8001416:	e6a3      	b.n	8001160 <__aeabi_dadd+0xb0>
 8001418:	4664      	mov	r4, ip
 800141a:	4667      	mov	r7, ip
 800141c:	432c      	orrs	r4, r5
 800141e:	d000      	beq.n	8001422 <__aeabi_dadd+0x372>
 8001420:	e6a2      	b.n	8001168 <__aeabi_dadd+0xb8>
 8001422:	2500      	movs	r5, #0
 8001424:	2600      	movs	r6, #0
 8001426:	2700      	movs	r7, #0
 8001428:	e706      	b.n	8001238 <__aeabi_dadd+0x188>
 800142a:	001e      	movs	r6, r3
 800142c:	e6c4      	b.n	80011b8 <__aeabi_dadd+0x108>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	000007ff 	.word	0x000007ff
 8001434:	ff7fffff 	.word	0xff7fffff
 8001438:	800fffff 	.word	0x800fffff
 800143c:	2b1f      	cmp	r3, #31
 800143e:	dc63      	bgt.n	8001508 <__aeabi_dadd+0x458>
 8001440:	2020      	movs	r0, #32
 8001442:	1ac3      	subs	r3, r0, r3
 8001444:	0008      	movs	r0, r1
 8001446:	4098      	lsls	r0, r3
 8001448:	469c      	mov	ip, r3
 800144a:	4683      	mov	fp, r0
 800144c:	4653      	mov	r3, sl
 800144e:	0010      	movs	r0, r2
 8001450:	40d8      	lsrs	r0, r3
 8001452:	0003      	movs	r3, r0
 8001454:	4658      	mov	r0, fp
 8001456:	4318      	orrs	r0, r3
 8001458:	4663      	mov	r3, ip
 800145a:	409a      	lsls	r2, r3
 800145c:	1e53      	subs	r3, r2, #1
 800145e:	419a      	sbcs	r2, r3
 8001460:	4653      	mov	r3, sl
 8001462:	4302      	orrs	r2, r0
 8001464:	40d9      	lsrs	r1, r3
 8001466:	e703      	b.n	8001270 <__aeabi_dadd+0x1c0>
 8001468:	0026      	movs	r6, r4
 800146a:	433e      	orrs	r6, r7
 800146c:	d006      	beq.n	800147c <__aeabi_dadd+0x3cc>
 800146e:	43eb      	mvns	r3, r5
 8001470:	4699      	mov	r9, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0c7      	beq.n	8001406 <__aeabi_dadd+0x356>
 8001476:	4e94      	ldr	r6, [pc, #592]	; (80016c8 <__aeabi_dadd+0x618>)
 8001478:	42b0      	cmp	r0, r6
 800147a:	d1ac      	bne.n	80013d6 <__aeabi_dadd+0x326>
 800147c:	000c      	movs	r4, r1
 800147e:	0017      	movs	r7, r2
 8001480:	0006      	movs	r6, r0
 8001482:	46d8      	mov	r8, fp
 8001484:	e698      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001486:	4b90      	ldr	r3, [pc, #576]	; (80016c8 <__aeabi_dadd+0x618>)
 8001488:	459a      	cmp	sl, r3
 800148a:	d00b      	beq.n	80014a4 <__aeabi_dadd+0x3f4>
 800148c:	4682      	mov	sl, r0
 800148e:	e6e7      	b.n	8001260 <__aeabi_dadd+0x1b0>
 8001490:	2800      	cmp	r0, #0
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x3e6>
 8001494:	e09e      	b.n	80015d4 <__aeabi_dadd+0x524>
 8001496:	0018      	movs	r0, r3
 8001498:	4310      	orrs	r0, r2
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x3ee>
 800149c:	e0e9      	b.n	8001672 <__aeabi_dadd+0x5c2>
 800149e:	001c      	movs	r4, r3
 80014a0:	0017      	movs	r7, r2
 80014a2:	46d8      	mov	r8, fp
 80014a4:	4e88      	ldr	r6, [pc, #544]	; (80016c8 <__aeabi_dadd+0x618>)
 80014a6:	e687      	b.n	80011b8 <__aeabi_dadd+0x108>
 80014a8:	2500      	movs	r5, #0
 80014aa:	e772      	b.n	8001392 <__aeabi_dadd+0x2e2>
 80014ac:	2100      	movs	r1, #0
 80014ae:	e782      	b.n	80013b6 <__aeabi_dadd+0x306>
 80014b0:	0023      	movs	r3, r4
 80014b2:	433b      	orrs	r3, r7
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x40a>
 80014b8:	e0ab      	b.n	8001612 <__aeabi_dadd+0x562>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x410>
 80014be:	e0e7      	b.n	8001690 <__aeabi_dadd+0x5e0>
 80014c0:	000b      	movs	r3, r1
 80014c2:	4313      	orrs	r3, r2
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x418>
 80014c6:	e677      	b.n	80011b8 <__aeabi_dadd+0x108>
 80014c8:	18ba      	adds	r2, r7, r2
 80014ca:	42ba      	cmp	r2, r7
 80014cc:	41bf      	sbcs	r7, r7
 80014ce:	1864      	adds	r4, r4, r1
 80014d0:	427f      	negs	r7, r7
 80014d2:	19e4      	adds	r4, r4, r7
 80014d4:	0223      	lsls	r3, r4, #8
 80014d6:	d400      	bmi.n	80014da <__aeabi_dadd+0x42a>
 80014d8:	e0f2      	b.n	80016c0 <__aeabi_dadd+0x610>
 80014da:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <__aeabi_dadd+0x61c>)
 80014dc:	0017      	movs	r7, r2
 80014de:	401c      	ands	r4, r3
 80014e0:	0006      	movs	r6, r0
 80014e2:	e669      	b.n	80011b8 <__aeabi_dadd+0x108>
 80014e4:	0020      	movs	r0, r4
 80014e6:	4338      	orrs	r0, r7
 80014e8:	2e00      	cmp	r6, #0
 80014ea:	d1d1      	bne.n	8001490 <__aeabi_dadd+0x3e0>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d15b      	bne.n	80015a8 <__aeabi_dadd+0x4f8>
 80014f0:	001c      	movs	r4, r3
 80014f2:	4314      	orrs	r4, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x448>
 80014f6:	e0a8      	b.n	800164a <__aeabi_dadd+0x59a>
 80014f8:	001c      	movs	r4, r3
 80014fa:	0017      	movs	r7, r2
 80014fc:	46d8      	mov	r8, fp
 80014fe:	e65b      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001500:	0006      	movs	r6, r0
 8001502:	2400      	movs	r4, #0
 8001504:	2700      	movs	r7, #0
 8001506:	e697      	b.n	8001238 <__aeabi_dadd+0x188>
 8001508:	4650      	mov	r0, sl
 800150a:	000b      	movs	r3, r1
 800150c:	3820      	subs	r0, #32
 800150e:	40c3      	lsrs	r3, r0
 8001510:	4699      	mov	r9, r3
 8001512:	4653      	mov	r3, sl
 8001514:	2b20      	cmp	r3, #32
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x46a>
 8001518:	e095      	b.n	8001646 <__aeabi_dadd+0x596>
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	4650      	mov	r0, sl
 800151e:	1a1b      	subs	r3, r3, r0
 8001520:	4099      	lsls	r1, r3
 8001522:	430a      	orrs	r2, r1
 8001524:	1e51      	subs	r1, r2, #1
 8001526:	418a      	sbcs	r2, r1
 8001528:	464b      	mov	r3, r9
 800152a:	2100      	movs	r1, #0
 800152c:	431a      	orrs	r2, r3
 800152e:	e69f      	b.n	8001270 <__aeabi_dadd+0x1c0>
 8001530:	2e00      	cmp	r6, #0
 8001532:	d130      	bne.n	8001596 <__aeabi_dadd+0x4e6>
 8001534:	0026      	movs	r6, r4
 8001536:	433e      	orrs	r6, r7
 8001538:	d067      	beq.n	800160a <__aeabi_dadd+0x55a>
 800153a:	43db      	mvns	r3, r3
 800153c:	469a      	mov	sl, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01c      	beq.n	800157c <__aeabi_dadd+0x4cc>
 8001542:	4e61      	ldr	r6, [pc, #388]	; (80016c8 <__aeabi_dadd+0x618>)
 8001544:	42b0      	cmp	r0, r6
 8001546:	d060      	beq.n	800160a <__aeabi_dadd+0x55a>
 8001548:	4653      	mov	r3, sl
 800154a:	2b38      	cmp	r3, #56	; 0x38
 800154c:	dd00      	ble.n	8001550 <__aeabi_dadd+0x4a0>
 800154e:	e096      	b.n	800167e <__aeabi_dadd+0x5ce>
 8001550:	2b1f      	cmp	r3, #31
 8001552:	dd00      	ble.n	8001556 <__aeabi_dadd+0x4a6>
 8001554:	e09f      	b.n	8001696 <__aeabi_dadd+0x5e6>
 8001556:	2620      	movs	r6, #32
 8001558:	1af3      	subs	r3, r6, r3
 800155a:	0026      	movs	r6, r4
 800155c:	409e      	lsls	r6, r3
 800155e:	469c      	mov	ip, r3
 8001560:	46b3      	mov	fp, r6
 8001562:	4653      	mov	r3, sl
 8001564:	003e      	movs	r6, r7
 8001566:	40de      	lsrs	r6, r3
 8001568:	0033      	movs	r3, r6
 800156a:	465e      	mov	r6, fp
 800156c:	431e      	orrs	r6, r3
 800156e:	4663      	mov	r3, ip
 8001570:	409f      	lsls	r7, r3
 8001572:	1e7b      	subs	r3, r7, #1
 8001574:	419f      	sbcs	r7, r3
 8001576:	4653      	mov	r3, sl
 8001578:	40dc      	lsrs	r4, r3
 800157a:	4337      	orrs	r7, r6
 800157c:	18bf      	adds	r7, r7, r2
 800157e:	4297      	cmp	r7, r2
 8001580:	4192      	sbcs	r2, r2
 8001582:	1864      	adds	r4, r4, r1
 8001584:	4252      	negs	r2, r2
 8001586:	18a4      	adds	r4, r4, r2
 8001588:	0006      	movs	r6, r0
 800158a:	e678      	b.n	800127e <__aeabi_dadd+0x1ce>
 800158c:	4327      	orrs	r7, r4
 800158e:	1e7c      	subs	r4, r7, #1
 8001590:	41a7      	sbcs	r7, r4
 8001592:	2400      	movs	r4, #0
 8001594:	e737      	b.n	8001406 <__aeabi_dadd+0x356>
 8001596:	4e4c      	ldr	r6, [pc, #304]	; (80016c8 <__aeabi_dadd+0x618>)
 8001598:	42b0      	cmp	r0, r6
 800159a:	d036      	beq.n	800160a <__aeabi_dadd+0x55a>
 800159c:	2680      	movs	r6, #128	; 0x80
 800159e:	425b      	negs	r3, r3
 80015a0:	0436      	lsls	r6, r6, #16
 80015a2:	469a      	mov	sl, r3
 80015a4:	4334      	orrs	r4, r6
 80015a6:	e7cf      	b.n	8001548 <__aeabi_dadd+0x498>
 80015a8:	0018      	movs	r0, r3
 80015aa:	4310      	orrs	r0, r2
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x500>
 80015ae:	e603      	b.n	80011b8 <__aeabi_dadd+0x108>
 80015b0:	1ab8      	subs	r0, r7, r2
 80015b2:	4684      	mov	ip, r0
 80015b4:	4567      	cmp	r7, ip
 80015b6:	41ad      	sbcs	r5, r5
 80015b8:	1ae0      	subs	r0, r4, r3
 80015ba:	426d      	negs	r5, r5
 80015bc:	1b40      	subs	r0, r0, r5
 80015be:	0205      	lsls	r5, r0, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_dadd+0x514>
 80015c2:	e62c      	b.n	800121e <__aeabi_dadd+0x16e>
 80015c4:	1bd7      	subs	r7, r2, r7
 80015c6:	42ba      	cmp	r2, r7
 80015c8:	4192      	sbcs	r2, r2
 80015ca:	1b1c      	subs	r4, r3, r4
 80015cc:	4252      	negs	r2, r2
 80015ce:	1aa4      	subs	r4, r4, r2
 80015d0:	46d8      	mov	r8, fp
 80015d2:	e5f1      	b.n	80011b8 <__aeabi_dadd+0x108>
 80015d4:	0018      	movs	r0, r3
 80015d6:	4310      	orrs	r0, r2
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x52c>
 80015da:	e763      	b.n	80014a4 <__aeabi_dadd+0x3f4>
 80015dc:	08f8      	lsrs	r0, r7, #3
 80015de:	0767      	lsls	r7, r4, #29
 80015e0:	4307      	orrs	r7, r0
 80015e2:	2080      	movs	r0, #128	; 0x80
 80015e4:	08e4      	lsrs	r4, r4, #3
 80015e6:	0300      	lsls	r0, r0, #12
 80015e8:	4204      	tst	r4, r0
 80015ea:	d008      	beq.n	80015fe <__aeabi_dadd+0x54e>
 80015ec:	08dd      	lsrs	r5, r3, #3
 80015ee:	4205      	tst	r5, r0
 80015f0:	d105      	bne.n	80015fe <__aeabi_dadd+0x54e>
 80015f2:	08d2      	lsrs	r2, r2, #3
 80015f4:	0759      	lsls	r1, r3, #29
 80015f6:	4311      	orrs	r1, r2
 80015f8:	000f      	movs	r7, r1
 80015fa:	002c      	movs	r4, r5
 80015fc:	46d8      	mov	r8, fp
 80015fe:	0f7b      	lsrs	r3, r7, #29
 8001600:	00e4      	lsls	r4, r4, #3
 8001602:	431c      	orrs	r4, r3
 8001604:	00ff      	lsls	r7, r7, #3
 8001606:	4e30      	ldr	r6, [pc, #192]	; (80016c8 <__aeabi_dadd+0x618>)
 8001608:	e5d6      	b.n	80011b8 <__aeabi_dadd+0x108>
 800160a:	000c      	movs	r4, r1
 800160c:	0017      	movs	r7, r2
 800160e:	0006      	movs	r6, r0
 8001610:	e5d2      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d038      	beq.n	8001688 <__aeabi_dadd+0x5d8>
 8001616:	000b      	movs	r3, r1
 8001618:	4313      	orrs	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x56e>
 800161c:	e742      	b.n	80014a4 <__aeabi_dadd+0x3f4>
 800161e:	08f8      	lsrs	r0, r7, #3
 8001620:	0767      	lsls	r7, r4, #29
 8001622:	4307      	orrs	r7, r0
 8001624:	2080      	movs	r0, #128	; 0x80
 8001626:	08e4      	lsrs	r4, r4, #3
 8001628:	0300      	lsls	r0, r0, #12
 800162a:	4204      	tst	r4, r0
 800162c:	d0e7      	beq.n	80015fe <__aeabi_dadd+0x54e>
 800162e:	08cb      	lsrs	r3, r1, #3
 8001630:	4203      	tst	r3, r0
 8001632:	d1e4      	bne.n	80015fe <__aeabi_dadd+0x54e>
 8001634:	08d2      	lsrs	r2, r2, #3
 8001636:	0749      	lsls	r1, r1, #29
 8001638:	4311      	orrs	r1, r2
 800163a:	000f      	movs	r7, r1
 800163c:	001c      	movs	r4, r3
 800163e:	e7de      	b.n	80015fe <__aeabi_dadd+0x54e>
 8001640:	2700      	movs	r7, #0
 8001642:	2400      	movs	r4, #0
 8001644:	e5d5      	b.n	80011f2 <__aeabi_dadd+0x142>
 8001646:	2100      	movs	r1, #0
 8001648:	e76b      	b.n	8001522 <__aeabi_dadd+0x472>
 800164a:	2500      	movs	r5, #0
 800164c:	2700      	movs	r7, #0
 800164e:	e5f3      	b.n	8001238 <__aeabi_dadd+0x188>
 8001650:	464e      	mov	r6, r9
 8001652:	0025      	movs	r5, r4
 8001654:	3e20      	subs	r6, #32
 8001656:	40f5      	lsrs	r5, r6
 8001658:	464b      	mov	r3, r9
 800165a:	002e      	movs	r6, r5
 800165c:	2b20      	cmp	r3, #32
 800165e:	d02d      	beq.n	80016bc <__aeabi_dadd+0x60c>
 8001660:	2540      	movs	r5, #64	; 0x40
 8001662:	1aed      	subs	r5, r5, r3
 8001664:	40ac      	lsls	r4, r5
 8001666:	4327      	orrs	r7, r4
 8001668:	1e7c      	subs	r4, r7, #1
 800166a:	41a7      	sbcs	r7, r4
 800166c:	2400      	movs	r4, #0
 800166e:	4337      	orrs	r7, r6
 8001670:	e6c9      	b.n	8001406 <__aeabi_dadd+0x356>
 8001672:	2480      	movs	r4, #128	; 0x80
 8001674:	2500      	movs	r5, #0
 8001676:	0324      	lsls	r4, r4, #12
 8001678:	4e13      	ldr	r6, [pc, #76]	; (80016c8 <__aeabi_dadd+0x618>)
 800167a:	2700      	movs	r7, #0
 800167c:	e5dc      	b.n	8001238 <__aeabi_dadd+0x188>
 800167e:	4327      	orrs	r7, r4
 8001680:	1e7c      	subs	r4, r7, #1
 8001682:	41a7      	sbcs	r7, r4
 8001684:	2400      	movs	r4, #0
 8001686:	e779      	b.n	800157c <__aeabi_dadd+0x4cc>
 8001688:	000c      	movs	r4, r1
 800168a:	0017      	movs	r7, r2
 800168c:	4e0e      	ldr	r6, [pc, #56]	; (80016c8 <__aeabi_dadd+0x618>)
 800168e:	e593      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001690:	000c      	movs	r4, r1
 8001692:	0017      	movs	r7, r2
 8001694:	e590      	b.n	80011b8 <__aeabi_dadd+0x108>
 8001696:	4656      	mov	r6, sl
 8001698:	0023      	movs	r3, r4
 800169a:	3e20      	subs	r6, #32
 800169c:	40f3      	lsrs	r3, r6
 800169e:	4699      	mov	r9, r3
 80016a0:	4653      	mov	r3, sl
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d00e      	beq.n	80016c4 <__aeabi_dadd+0x614>
 80016a6:	2340      	movs	r3, #64	; 0x40
 80016a8:	4656      	mov	r6, sl
 80016aa:	1b9b      	subs	r3, r3, r6
 80016ac:	409c      	lsls	r4, r3
 80016ae:	4327      	orrs	r7, r4
 80016b0:	1e7c      	subs	r4, r7, #1
 80016b2:	41a7      	sbcs	r7, r4
 80016b4:	464b      	mov	r3, r9
 80016b6:	2400      	movs	r4, #0
 80016b8:	431f      	orrs	r7, r3
 80016ba:	e75f      	b.n	800157c <__aeabi_dadd+0x4cc>
 80016bc:	2400      	movs	r4, #0
 80016be:	e7d2      	b.n	8001666 <__aeabi_dadd+0x5b6>
 80016c0:	0017      	movs	r7, r2
 80016c2:	e5b2      	b.n	800122a <__aeabi_dadd+0x17a>
 80016c4:	2400      	movs	r4, #0
 80016c6:	e7f2      	b.n	80016ae <__aeabi_dadd+0x5fe>
 80016c8:	000007ff 	.word	0x000007ff
 80016cc:	ff7fffff 	.word	0xff7fffff

080016d0 <__aeabi_ddiv>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	4645      	mov	r5, r8
 80016d6:	46de      	mov	lr, fp
 80016d8:	464e      	mov	r6, r9
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	004c      	lsls	r4, r1, #1
 80016de:	030e      	lsls	r6, r1, #12
 80016e0:	b087      	sub	sp, #28
 80016e2:	4683      	mov	fp, r0
 80016e4:	4692      	mov	sl, r2
 80016e6:	001d      	movs	r5, r3
 80016e8:	4680      	mov	r8, r0
 80016ea:	0b36      	lsrs	r6, r6, #12
 80016ec:	0d64      	lsrs	r4, r4, #21
 80016ee:	0fcf      	lsrs	r7, r1, #31
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d04f      	beq.n	8001794 <__aeabi_ddiv+0xc4>
 80016f4:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <__aeabi_ddiv+0x1e4>)
 80016f6:	429c      	cmp	r4, r3
 80016f8:	d035      	beq.n	8001766 <__aeabi_ddiv+0x96>
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	0f42      	lsrs	r2, r0, #29
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	00f6      	lsls	r6, r6, #3
 8001702:	4313      	orrs	r3, r2
 8001704:	4333      	orrs	r3, r6
 8001706:	4699      	mov	r9, r3
 8001708:	00c3      	lsls	r3, r0, #3
 800170a:	4698      	mov	r8, r3
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <__aeabi_ddiv+0x1e8>)
 800170e:	2600      	movs	r6, #0
 8001710:	469c      	mov	ip, r3
 8001712:	2300      	movs	r3, #0
 8001714:	4464      	add	r4, ip
 8001716:	9303      	str	r3, [sp, #12]
 8001718:	032b      	lsls	r3, r5, #12
 800171a:	0b1b      	lsrs	r3, r3, #12
 800171c:	469b      	mov	fp, r3
 800171e:	006b      	lsls	r3, r5, #1
 8001720:	0fed      	lsrs	r5, r5, #31
 8001722:	4650      	mov	r0, sl
 8001724:	0d5b      	lsrs	r3, r3, #21
 8001726:	9501      	str	r5, [sp, #4]
 8001728:	d05e      	beq.n	80017e8 <__aeabi_ddiv+0x118>
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <__aeabi_ddiv+0x1e4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d053      	beq.n	80017d8 <__aeabi_ddiv+0x108>
 8001730:	465a      	mov	r2, fp
 8001732:	00d1      	lsls	r1, r2, #3
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	0f40      	lsrs	r0, r0, #29
 8001738:	0412      	lsls	r2, r2, #16
 800173a:	4302      	orrs	r2, r0
 800173c:	430a      	orrs	r2, r1
 800173e:	4693      	mov	fp, r2
 8001740:	4652      	mov	r2, sl
 8001742:	00d1      	lsls	r1, r2, #3
 8001744:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <__aeabi_ddiv+0x1e8>)
 8001746:	4694      	mov	ip, r2
 8001748:	2200      	movs	r2, #0
 800174a:	4463      	add	r3, ip
 800174c:	0038      	movs	r0, r7
 800174e:	4068      	eors	r0, r5
 8001750:	4684      	mov	ip, r0
 8001752:	9002      	str	r0, [sp, #8]
 8001754:	1ae4      	subs	r4, r4, r3
 8001756:	4316      	orrs	r6, r2
 8001758:	2e0f      	cmp	r6, #15
 800175a:	d900      	bls.n	800175e <__aeabi_ddiv+0x8e>
 800175c:	e0b4      	b.n	80018c8 <__aeabi_ddiv+0x1f8>
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <__aeabi_ddiv+0x1ec>)
 8001760:	00b6      	lsls	r6, r6, #2
 8001762:	599b      	ldr	r3, [r3, r6]
 8001764:	469f      	mov	pc, r3
 8001766:	0003      	movs	r3, r0
 8001768:	4333      	orrs	r3, r6
 800176a:	4699      	mov	r9, r3
 800176c:	d16c      	bne.n	8001848 <__aeabi_ddiv+0x178>
 800176e:	2300      	movs	r3, #0
 8001770:	4698      	mov	r8, r3
 8001772:	3302      	adds	r3, #2
 8001774:	2608      	movs	r6, #8
 8001776:	9303      	str	r3, [sp, #12]
 8001778:	e7ce      	b.n	8001718 <__aeabi_ddiv+0x48>
 800177a:	46cb      	mov	fp, r9
 800177c:	4641      	mov	r1, r8
 800177e:	9a03      	ldr	r2, [sp, #12]
 8001780:	9701      	str	r7, [sp, #4]
 8001782:	2a02      	cmp	r2, #2
 8001784:	d165      	bne.n	8001852 <__aeabi_ddiv+0x182>
 8001786:	9b01      	ldr	r3, [sp, #4]
 8001788:	4c4a      	ldr	r4, [pc, #296]	; (80018b4 <__aeabi_ddiv+0x1e4>)
 800178a:	469c      	mov	ip, r3
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	4698      	mov	r8, r3
 8001792:	e06b      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001794:	0003      	movs	r3, r0
 8001796:	4333      	orrs	r3, r6
 8001798:	4699      	mov	r9, r3
 800179a:	d04e      	beq.n	800183a <__aeabi_ddiv+0x16a>
 800179c:	2e00      	cmp	r6, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_ddiv+0xd2>
 80017a0:	e1bc      	b.n	8001b1c <__aeabi_ddiv+0x44c>
 80017a2:	0030      	movs	r0, r6
 80017a4:	f001 fa2e 	bl	8002c04 <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b0b      	subs	r3, #11
 80017ac:	2b1c      	cmp	r3, #28
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_ddiv+0xe2>
 80017b0:	e1ac      	b.n	8001b0c <__aeabi_ddiv+0x43c>
 80017b2:	221d      	movs	r2, #29
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	465a      	mov	r2, fp
 80017b8:	0001      	movs	r1, r0
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	3908      	subs	r1, #8
 80017be:	408e      	lsls	r6, r1
 80017c0:	0013      	movs	r3, r2
 80017c2:	4333      	orrs	r3, r6
 80017c4:	4699      	mov	r9, r3
 80017c6:	465b      	mov	r3, fp
 80017c8:	408b      	lsls	r3, r1
 80017ca:	4698      	mov	r8, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	4c3c      	ldr	r4, [pc, #240]	; (80018c0 <__aeabi_ddiv+0x1f0>)
 80017d0:	2600      	movs	r6, #0
 80017d2:	1a24      	subs	r4, r4, r0
 80017d4:	9303      	str	r3, [sp, #12]
 80017d6:	e79f      	b.n	8001718 <__aeabi_ddiv+0x48>
 80017d8:	4651      	mov	r1, sl
 80017da:	465a      	mov	r2, fp
 80017dc:	4311      	orrs	r1, r2
 80017de:	d129      	bne.n	8001834 <__aeabi_ddiv+0x164>
 80017e0:	2200      	movs	r2, #0
 80017e2:	4693      	mov	fp, r2
 80017e4:	3202      	adds	r2, #2
 80017e6:	e7b1      	b.n	800174c <__aeabi_ddiv+0x7c>
 80017e8:	4659      	mov	r1, fp
 80017ea:	4301      	orrs	r1, r0
 80017ec:	d01e      	beq.n	800182c <__aeabi_ddiv+0x15c>
 80017ee:	465b      	mov	r3, fp
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0x126>
 80017f4:	e19e      	b.n	8001b34 <__aeabi_ddiv+0x464>
 80017f6:	4658      	mov	r0, fp
 80017f8:	f001 fa04 	bl	8002c04 <__clzsi2>
 80017fc:	0003      	movs	r3, r0
 80017fe:	3b0b      	subs	r3, #11
 8001800:	2b1c      	cmp	r3, #28
 8001802:	dd00      	ble.n	8001806 <__aeabi_ddiv+0x136>
 8001804:	e18f      	b.n	8001b26 <__aeabi_ddiv+0x456>
 8001806:	0002      	movs	r2, r0
 8001808:	4659      	mov	r1, fp
 800180a:	3a08      	subs	r2, #8
 800180c:	4091      	lsls	r1, r2
 800180e:	468b      	mov	fp, r1
 8001810:	211d      	movs	r1, #29
 8001812:	1acb      	subs	r3, r1, r3
 8001814:	4651      	mov	r1, sl
 8001816:	40d9      	lsrs	r1, r3
 8001818:	000b      	movs	r3, r1
 800181a:	4659      	mov	r1, fp
 800181c:	430b      	orrs	r3, r1
 800181e:	4651      	mov	r1, sl
 8001820:	469b      	mov	fp, r3
 8001822:	4091      	lsls	r1, r2
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <__aeabi_ddiv+0x1f0>)
 8001826:	2200      	movs	r2, #0
 8001828:	1a1b      	subs	r3, r3, r0
 800182a:	e78f      	b.n	800174c <__aeabi_ddiv+0x7c>
 800182c:	2300      	movs	r3, #0
 800182e:	2201      	movs	r2, #1
 8001830:	469b      	mov	fp, r3
 8001832:	e78b      	b.n	800174c <__aeabi_ddiv+0x7c>
 8001834:	4651      	mov	r1, sl
 8001836:	2203      	movs	r2, #3
 8001838:	e788      	b.n	800174c <__aeabi_ddiv+0x7c>
 800183a:	2300      	movs	r3, #0
 800183c:	4698      	mov	r8, r3
 800183e:	3301      	adds	r3, #1
 8001840:	2604      	movs	r6, #4
 8001842:	2400      	movs	r4, #0
 8001844:	9303      	str	r3, [sp, #12]
 8001846:	e767      	b.n	8001718 <__aeabi_ddiv+0x48>
 8001848:	2303      	movs	r3, #3
 800184a:	46b1      	mov	r9, r6
 800184c:	9303      	str	r3, [sp, #12]
 800184e:	260c      	movs	r6, #12
 8001850:	e762      	b.n	8001718 <__aeabi_ddiv+0x48>
 8001852:	2a03      	cmp	r2, #3
 8001854:	d100      	bne.n	8001858 <__aeabi_ddiv+0x188>
 8001856:	e25c      	b.n	8001d12 <__aeabi_ddiv+0x642>
 8001858:	9b01      	ldr	r3, [sp, #4]
 800185a:	2a01      	cmp	r2, #1
 800185c:	d000      	beq.n	8001860 <__aeabi_ddiv+0x190>
 800185e:	e1e4      	b.n	8001c2a <__aeabi_ddiv+0x55a>
 8001860:	4013      	ands	r3, r2
 8001862:	469c      	mov	ip, r3
 8001864:	2300      	movs	r3, #0
 8001866:	2400      	movs	r4, #0
 8001868:	2200      	movs	r2, #0
 800186a:	4698      	mov	r8, r3
 800186c:	2100      	movs	r1, #0
 800186e:	0312      	lsls	r2, r2, #12
 8001870:	0b13      	lsrs	r3, r2, #12
 8001872:	0d0a      	lsrs	r2, r1, #20
 8001874:	0512      	lsls	r2, r2, #20
 8001876:	431a      	orrs	r2, r3
 8001878:	0523      	lsls	r3, r4, #20
 800187a:	4c12      	ldr	r4, [pc, #72]	; (80018c4 <__aeabi_ddiv+0x1f4>)
 800187c:	4640      	mov	r0, r8
 800187e:	4022      	ands	r2, r4
 8001880:	4313      	orrs	r3, r2
 8001882:	4662      	mov	r2, ip
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	07d2      	lsls	r2, r2, #31
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	4313      	orrs	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	b007      	add	sp, #28
 8001890:	bc3c      	pop	{r2, r3, r4, r5}
 8001892:	4690      	mov	r8, r2
 8001894:	4699      	mov	r9, r3
 8001896:	46a2      	mov	sl, r4
 8001898:	46ab      	mov	fp, r5
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189c:	2300      	movs	r3, #0
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	469c      	mov	ip, r3
 80018a2:	0312      	lsls	r2, r2, #12
 80018a4:	4698      	mov	r8, r3
 80018a6:	4c03      	ldr	r4, [pc, #12]	; (80018b4 <__aeabi_ddiv+0x1e4>)
 80018a8:	e7e0      	b.n	800186c <__aeabi_ddiv+0x19c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	4c01      	ldr	r4, [pc, #4]	; (80018b4 <__aeabi_ddiv+0x1e4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	4698      	mov	r8, r3
 80018b2:	e7db      	b.n	800186c <__aeabi_ddiv+0x19c>
 80018b4:	000007ff 	.word	0x000007ff
 80018b8:	fffffc01 	.word	0xfffffc01
 80018bc:	0800dd9c 	.word	0x0800dd9c
 80018c0:	fffffc0d 	.word	0xfffffc0d
 80018c4:	800fffff 	.word	0x800fffff
 80018c8:	45d9      	cmp	r9, fp
 80018ca:	d900      	bls.n	80018ce <__aeabi_ddiv+0x1fe>
 80018cc:	e139      	b.n	8001b42 <__aeabi_ddiv+0x472>
 80018ce:	d100      	bne.n	80018d2 <__aeabi_ddiv+0x202>
 80018d0:	e134      	b.n	8001b3c <__aeabi_ddiv+0x46c>
 80018d2:	2300      	movs	r3, #0
 80018d4:	4646      	mov	r6, r8
 80018d6:	464d      	mov	r5, r9
 80018d8:	469a      	mov	sl, r3
 80018da:	3c01      	subs	r4, #1
 80018dc:	465b      	mov	r3, fp
 80018de:	0e0a      	lsrs	r2, r1, #24
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	431a      	orrs	r2, r3
 80018e4:	020b      	lsls	r3, r1, #8
 80018e6:	0c17      	lsrs	r7, r2, #16
 80018e8:	9303      	str	r3, [sp, #12]
 80018ea:	0413      	lsls	r3, r2, #16
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	0039      	movs	r1, r7
 80018f0:	0028      	movs	r0, r5
 80018f2:	4690      	mov	r8, r2
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f7fe fc2b 	bl	8000150 <__udivsi3>
 80018fa:	0002      	movs	r2, r0
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	4683      	mov	fp, r0
 8001900:	435a      	muls	r2, r3
 8001902:	0028      	movs	r0, r5
 8001904:	0039      	movs	r1, r7
 8001906:	4691      	mov	r9, r2
 8001908:	f7fe fca8 	bl	800025c <__aeabi_uidivmod>
 800190c:	0c35      	lsrs	r5, r6, #16
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	430d      	orrs	r5, r1
 8001912:	45a9      	cmp	r9, r5
 8001914:	d90d      	bls.n	8001932 <__aeabi_ddiv+0x262>
 8001916:	465b      	mov	r3, fp
 8001918:	4445      	add	r5, r8
 800191a:	3b01      	subs	r3, #1
 800191c:	45a8      	cmp	r8, r5
 800191e:	d900      	bls.n	8001922 <__aeabi_ddiv+0x252>
 8001920:	e13a      	b.n	8001b98 <__aeabi_ddiv+0x4c8>
 8001922:	45a9      	cmp	r9, r5
 8001924:	d800      	bhi.n	8001928 <__aeabi_ddiv+0x258>
 8001926:	e137      	b.n	8001b98 <__aeabi_ddiv+0x4c8>
 8001928:	2302      	movs	r3, #2
 800192a:	425b      	negs	r3, r3
 800192c:	469c      	mov	ip, r3
 800192e:	4445      	add	r5, r8
 8001930:	44e3      	add	fp, ip
 8001932:	464b      	mov	r3, r9
 8001934:	1aeb      	subs	r3, r5, r3
 8001936:	0039      	movs	r1, r7
 8001938:	0018      	movs	r0, r3
 800193a:	9304      	str	r3, [sp, #16]
 800193c:	f7fe fc08 	bl	8000150 <__udivsi3>
 8001940:	9b01      	ldr	r3, [sp, #4]
 8001942:	0005      	movs	r5, r0
 8001944:	4343      	muls	r3, r0
 8001946:	0039      	movs	r1, r7
 8001948:	9804      	ldr	r0, [sp, #16]
 800194a:	4699      	mov	r9, r3
 800194c:	f7fe fc86 	bl	800025c <__aeabi_uidivmod>
 8001950:	0433      	lsls	r3, r6, #16
 8001952:	0409      	lsls	r1, r1, #16
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	430b      	orrs	r3, r1
 8001958:	4599      	cmp	r9, r3
 800195a:	d909      	bls.n	8001970 <__aeabi_ddiv+0x2a0>
 800195c:	4443      	add	r3, r8
 800195e:	1e6a      	subs	r2, r5, #1
 8001960:	4598      	cmp	r8, r3
 8001962:	d900      	bls.n	8001966 <__aeabi_ddiv+0x296>
 8001964:	e11a      	b.n	8001b9c <__aeabi_ddiv+0x4cc>
 8001966:	4599      	cmp	r9, r3
 8001968:	d800      	bhi.n	800196c <__aeabi_ddiv+0x29c>
 800196a:	e117      	b.n	8001b9c <__aeabi_ddiv+0x4cc>
 800196c:	3d02      	subs	r5, #2
 800196e:	4443      	add	r3, r8
 8001970:	464a      	mov	r2, r9
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	465a      	mov	r2, fp
 8001976:	0412      	lsls	r2, r2, #16
 8001978:	432a      	orrs	r2, r5
 800197a:	9903      	ldr	r1, [sp, #12]
 800197c:	4693      	mov	fp, r2
 800197e:	0c10      	lsrs	r0, r2, #16
 8001980:	0c0a      	lsrs	r2, r1, #16
 8001982:	4691      	mov	r9, r2
 8001984:	0409      	lsls	r1, r1, #16
 8001986:	465a      	mov	r2, fp
 8001988:	0c09      	lsrs	r1, r1, #16
 800198a:	464e      	mov	r6, r9
 800198c:	000d      	movs	r5, r1
 800198e:	0412      	lsls	r2, r2, #16
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	4345      	muls	r5, r0
 8001994:	9105      	str	r1, [sp, #20]
 8001996:	4351      	muls	r1, r2
 8001998:	4372      	muls	r2, r6
 800199a:	4370      	muls	r0, r6
 800199c:	1952      	adds	r2, r2, r5
 800199e:	0c0e      	lsrs	r6, r1, #16
 80019a0:	18b2      	adds	r2, r6, r2
 80019a2:	4295      	cmp	r5, r2
 80019a4:	d903      	bls.n	80019ae <__aeabi_ddiv+0x2de>
 80019a6:	2580      	movs	r5, #128	; 0x80
 80019a8:	026d      	lsls	r5, r5, #9
 80019aa:	46ac      	mov	ip, r5
 80019ac:	4460      	add	r0, ip
 80019ae:	0c15      	lsrs	r5, r2, #16
 80019b0:	0409      	lsls	r1, r1, #16
 80019b2:	0412      	lsls	r2, r2, #16
 80019b4:	0c09      	lsrs	r1, r1, #16
 80019b6:	1828      	adds	r0, r5, r0
 80019b8:	1852      	adds	r2, r2, r1
 80019ba:	4283      	cmp	r3, r0
 80019bc:	d200      	bcs.n	80019c0 <__aeabi_ddiv+0x2f0>
 80019be:	e0ce      	b.n	8001b5e <__aeabi_ddiv+0x48e>
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x2f4>
 80019c2:	e0c8      	b.n	8001b56 <__aeabi_ddiv+0x486>
 80019c4:	1a1d      	subs	r5, r3, r0
 80019c6:	4653      	mov	r3, sl
 80019c8:	1a9e      	subs	r6, r3, r2
 80019ca:	45b2      	cmp	sl, r6
 80019cc:	4192      	sbcs	r2, r2
 80019ce:	4252      	negs	r2, r2
 80019d0:	1aab      	subs	r3, r5, r2
 80019d2:	469a      	mov	sl, r3
 80019d4:	4598      	cmp	r8, r3
 80019d6:	d100      	bne.n	80019da <__aeabi_ddiv+0x30a>
 80019d8:	e117      	b.n	8001c0a <__aeabi_ddiv+0x53a>
 80019da:	0039      	movs	r1, r7
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe fbb7 	bl	8000150 <__udivsi3>
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	0005      	movs	r5, r0
 80019e6:	4343      	muls	r3, r0
 80019e8:	0039      	movs	r1, r7
 80019ea:	4650      	mov	r0, sl
 80019ec:	9304      	str	r3, [sp, #16]
 80019ee:	f7fe fc35 	bl	800025c <__aeabi_uidivmod>
 80019f2:	9804      	ldr	r0, [sp, #16]
 80019f4:	040b      	lsls	r3, r1, #16
 80019f6:	0c31      	lsrs	r1, r6, #16
 80019f8:	4319      	orrs	r1, r3
 80019fa:	4288      	cmp	r0, r1
 80019fc:	d909      	bls.n	8001a12 <__aeabi_ddiv+0x342>
 80019fe:	4441      	add	r1, r8
 8001a00:	1e6b      	subs	r3, r5, #1
 8001a02:	4588      	cmp	r8, r1
 8001a04:	d900      	bls.n	8001a08 <__aeabi_ddiv+0x338>
 8001a06:	e107      	b.n	8001c18 <__aeabi_ddiv+0x548>
 8001a08:	4288      	cmp	r0, r1
 8001a0a:	d800      	bhi.n	8001a0e <__aeabi_ddiv+0x33e>
 8001a0c:	e104      	b.n	8001c18 <__aeabi_ddiv+0x548>
 8001a0e:	3d02      	subs	r5, #2
 8001a10:	4441      	add	r1, r8
 8001a12:	9b04      	ldr	r3, [sp, #16]
 8001a14:	1acb      	subs	r3, r1, r3
 8001a16:	0018      	movs	r0, r3
 8001a18:	0039      	movs	r1, r7
 8001a1a:	9304      	str	r3, [sp, #16]
 8001a1c:	f7fe fb98 	bl	8000150 <__udivsi3>
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	4682      	mov	sl, r0
 8001a24:	4343      	muls	r3, r0
 8001a26:	0039      	movs	r1, r7
 8001a28:	9804      	ldr	r0, [sp, #16]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f7fe fc16 	bl	800025c <__aeabi_uidivmod>
 8001a30:	9801      	ldr	r0, [sp, #4]
 8001a32:	040b      	lsls	r3, r1, #16
 8001a34:	0431      	lsls	r1, r6, #16
 8001a36:	0c09      	lsrs	r1, r1, #16
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	4288      	cmp	r0, r1
 8001a3c:	d90d      	bls.n	8001a5a <__aeabi_ddiv+0x38a>
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4441      	add	r1, r8
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4588      	cmp	r8, r1
 8001a46:	d900      	bls.n	8001a4a <__aeabi_ddiv+0x37a>
 8001a48:	e0e8      	b.n	8001c1c <__aeabi_ddiv+0x54c>
 8001a4a:	4288      	cmp	r0, r1
 8001a4c:	d800      	bhi.n	8001a50 <__aeabi_ddiv+0x380>
 8001a4e:	e0e5      	b.n	8001c1c <__aeabi_ddiv+0x54c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	425b      	negs	r3, r3
 8001a54:	469c      	mov	ip, r3
 8001a56:	4441      	add	r1, r8
 8001a58:	44e2      	add	sl, ip
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	042d      	lsls	r5, r5, #16
 8001a5e:	1ace      	subs	r6, r1, r3
 8001a60:	4651      	mov	r1, sl
 8001a62:	4329      	orrs	r1, r5
 8001a64:	9d05      	ldr	r5, [sp, #20]
 8001a66:	464f      	mov	r7, r9
 8001a68:	002a      	movs	r2, r5
 8001a6a:	040b      	lsls	r3, r1, #16
 8001a6c:	0c08      	lsrs	r0, r1, #16
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	435a      	muls	r2, r3
 8001a72:	4345      	muls	r5, r0
 8001a74:	437b      	muls	r3, r7
 8001a76:	4378      	muls	r0, r7
 8001a78:	195b      	adds	r3, r3, r5
 8001a7a:	0c17      	lsrs	r7, r2, #16
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	429d      	cmp	r5, r3
 8001a80:	d903      	bls.n	8001a8a <__aeabi_ddiv+0x3ba>
 8001a82:	2580      	movs	r5, #128	; 0x80
 8001a84:	026d      	lsls	r5, r5, #9
 8001a86:	46ac      	mov	ip, r5
 8001a88:	4460      	add	r0, ip
 8001a8a:	0c1d      	lsrs	r5, r3, #16
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	1828      	adds	r0, r5, r0
 8001a94:	189b      	adds	r3, r3, r2
 8001a96:	4286      	cmp	r6, r0
 8001a98:	d200      	bcs.n	8001a9c <__aeabi_ddiv+0x3cc>
 8001a9a:	e093      	b.n	8001bc4 <__aeabi_ddiv+0x4f4>
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_ddiv+0x3d0>
 8001a9e:	e08e      	b.n	8001bbe <__aeabi_ddiv+0x4ee>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	4319      	orrs	r1, r3
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <__aeabi_ddiv+0x658>)
 8001aa6:	18e3      	adds	r3, r4, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	dc00      	bgt.n	8001aae <__aeabi_ddiv+0x3de>
 8001aac:	e099      	b.n	8001be2 <__aeabi_ddiv+0x512>
 8001aae:	074a      	lsls	r2, r1, #29
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_ddiv+0x3e4>
 8001ab2:	e09e      	b.n	8001bf2 <__aeabi_ddiv+0x522>
 8001ab4:	465a      	mov	r2, fp
 8001ab6:	01d2      	lsls	r2, r2, #7
 8001ab8:	d506      	bpl.n	8001ac8 <__aeabi_ddiv+0x3f8>
 8001aba:	465a      	mov	r2, fp
 8001abc:	4b9b      	ldr	r3, [pc, #620]	; (8001d2c <__aeabi_ddiv+0x65c>)
 8001abe:	401a      	ands	r2, r3
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	4693      	mov	fp, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	18e3      	adds	r3, r4, r3
 8001ac8:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <__aeabi_ddiv+0x660>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	dd68      	ble.n	8001ba0 <__aeabi_ddiv+0x4d0>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9a02      	ldr	r2, [sp, #8]
 8001ad2:	4c98      	ldr	r4, [pc, #608]	; (8001d34 <__aeabi_ddiv+0x664>)
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4694      	mov	ip, r2
 8001ada:	4698      	mov	r8, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	e6c5      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	0312      	lsls	r2, r2, #12
 8001ae6:	4213      	tst	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <__aeabi_ddiv+0x430>
 8001aea:	465b      	mov	r3, fp
 8001aec:	4213      	tst	r3, r2
 8001aee:	d106      	bne.n	8001afe <__aeabi_ddiv+0x42e>
 8001af0:	431a      	orrs	r2, r3
 8001af2:	0312      	lsls	r2, r2, #12
 8001af4:	0b12      	lsrs	r2, r2, #12
 8001af6:	46ac      	mov	ip, r5
 8001af8:	4688      	mov	r8, r1
 8001afa:	4c8e      	ldr	r4, [pc, #568]	; (8001d34 <__aeabi_ddiv+0x664>)
 8001afc:	e6b6      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001afe:	464b      	mov	r3, r9
 8001b00:	431a      	orrs	r2, r3
 8001b02:	0312      	lsls	r2, r2, #12
 8001b04:	0b12      	lsrs	r2, r2, #12
 8001b06:	46bc      	mov	ip, r7
 8001b08:	4c8a      	ldr	r4, [pc, #552]	; (8001d34 <__aeabi_ddiv+0x664>)
 8001b0a:	e6af      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	465a      	mov	r2, fp
 8001b10:	3b28      	subs	r3, #40	; 0x28
 8001b12:	409a      	lsls	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	4691      	mov	r9, r2
 8001b18:	4698      	mov	r8, r3
 8001b1a:	e657      	b.n	80017cc <__aeabi_ddiv+0xfc>
 8001b1c:	4658      	mov	r0, fp
 8001b1e:	f001 f871 	bl	8002c04 <__clzsi2>
 8001b22:	3020      	adds	r0, #32
 8001b24:	e640      	b.n	80017a8 <__aeabi_ddiv+0xd8>
 8001b26:	0003      	movs	r3, r0
 8001b28:	4652      	mov	r2, sl
 8001b2a:	3b28      	subs	r3, #40	; 0x28
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4693      	mov	fp, r2
 8001b32:	e677      	b.n	8001824 <__aeabi_ddiv+0x154>
 8001b34:	f001 f866 	bl	8002c04 <__clzsi2>
 8001b38:	3020      	adds	r0, #32
 8001b3a:	e65f      	b.n	80017fc <__aeabi_ddiv+0x12c>
 8001b3c:	4588      	cmp	r8, r1
 8001b3e:	d200      	bcs.n	8001b42 <__aeabi_ddiv+0x472>
 8001b40:	e6c7      	b.n	80018d2 <__aeabi_ddiv+0x202>
 8001b42:	464b      	mov	r3, r9
 8001b44:	07de      	lsls	r6, r3, #31
 8001b46:	085d      	lsrs	r5, r3, #1
 8001b48:	4643      	mov	r3, r8
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	431e      	orrs	r6, r3
 8001b4e:	4643      	mov	r3, r8
 8001b50:	07db      	lsls	r3, r3, #31
 8001b52:	469a      	mov	sl, r3
 8001b54:	e6c2      	b.n	80018dc <__aeabi_ddiv+0x20c>
 8001b56:	2500      	movs	r5, #0
 8001b58:	4592      	cmp	sl, r2
 8001b5a:	d300      	bcc.n	8001b5e <__aeabi_ddiv+0x48e>
 8001b5c:	e733      	b.n	80019c6 <__aeabi_ddiv+0x2f6>
 8001b5e:	9e03      	ldr	r6, [sp, #12]
 8001b60:	4659      	mov	r1, fp
 8001b62:	46b4      	mov	ip, r6
 8001b64:	44e2      	add	sl, ip
 8001b66:	45b2      	cmp	sl, r6
 8001b68:	41ad      	sbcs	r5, r5
 8001b6a:	426d      	negs	r5, r5
 8001b6c:	4445      	add	r5, r8
 8001b6e:	18eb      	adds	r3, r5, r3
 8001b70:	3901      	subs	r1, #1
 8001b72:	4598      	cmp	r8, r3
 8001b74:	d207      	bcs.n	8001b86 <__aeabi_ddiv+0x4b6>
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d900      	bls.n	8001b7c <__aeabi_ddiv+0x4ac>
 8001b7a:	e07f      	b.n	8001c7c <__aeabi_ddiv+0x5ac>
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x4b0>
 8001b7e:	e0bc      	b.n	8001cfa <__aeabi_ddiv+0x62a>
 8001b80:	1a1d      	subs	r5, r3, r0
 8001b82:	468b      	mov	fp, r1
 8001b84:	e71f      	b.n	80019c6 <__aeabi_ddiv+0x2f6>
 8001b86:	4598      	cmp	r8, r3
 8001b88:	d1fa      	bne.n	8001b80 <__aeabi_ddiv+0x4b0>
 8001b8a:	9d03      	ldr	r5, [sp, #12]
 8001b8c:	4555      	cmp	r5, sl
 8001b8e:	d9f2      	bls.n	8001b76 <__aeabi_ddiv+0x4a6>
 8001b90:	4643      	mov	r3, r8
 8001b92:	468b      	mov	fp, r1
 8001b94:	1a1d      	subs	r5, r3, r0
 8001b96:	e716      	b.n	80019c6 <__aeabi_ddiv+0x2f6>
 8001b98:	469b      	mov	fp, r3
 8001b9a:	e6ca      	b.n	8001932 <__aeabi_ddiv+0x262>
 8001b9c:	0015      	movs	r5, r2
 8001b9e:	e6e7      	b.n	8001970 <__aeabi_ddiv+0x2a0>
 8001ba0:	465a      	mov	r2, fp
 8001ba2:	08c9      	lsrs	r1, r1, #3
 8001ba4:	0752      	lsls	r2, r2, #29
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	055b      	lsls	r3, r3, #21
 8001baa:	4690      	mov	r8, r2
 8001bac:	0d5c      	lsrs	r4, r3, #21
 8001bae:	465a      	mov	r2, fp
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9902      	ldr	r1, [sp, #8]
 8001bb4:	0252      	lsls	r2, r2, #9
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	0b12      	lsrs	r2, r2, #12
 8001bba:	468c      	mov	ip, r1
 8001bbc:	e656      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x4f4>
 8001bc2:	e76f      	b.n	8001aa4 <__aeabi_ddiv+0x3d4>
 8001bc4:	4446      	add	r6, r8
 8001bc6:	1e4a      	subs	r2, r1, #1
 8001bc8:	45b0      	cmp	r8, r6
 8001bca:	d929      	bls.n	8001c20 <__aeabi_ddiv+0x550>
 8001bcc:	0011      	movs	r1, r2
 8001bce:	4286      	cmp	r6, r0
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_ddiv+0x504>
 8001bd2:	e765      	b.n	8001aa0 <__aeabi_ddiv+0x3d0>
 8001bd4:	9a03      	ldr	r2, [sp, #12]
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_ddiv+0x50c>
 8001bda:	e761      	b.n	8001aa0 <__aeabi_ddiv+0x3d0>
 8001bdc:	e762      	b.n	8001aa4 <__aeabi_ddiv+0x3d4>
 8001bde:	2101      	movs	r1, #1
 8001be0:	4249      	negs	r1, r1
 8001be2:	2001      	movs	r0, #1
 8001be4:	1ac2      	subs	r2, r0, r3
 8001be6:	2a38      	cmp	r2, #56	; 0x38
 8001be8:	dd21      	ble.n	8001c2e <__aeabi_ddiv+0x55e>
 8001bea:	9b02      	ldr	r3, [sp, #8]
 8001bec:	4003      	ands	r3, r0
 8001bee:	469c      	mov	ip, r3
 8001bf0:	e638      	b.n	8001864 <__aeabi_ddiv+0x194>
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	2a04      	cmp	r2, #4
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_ddiv+0x52c>
 8001bfa:	e75b      	b.n	8001ab4 <__aeabi_ddiv+0x3e4>
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	1d11      	adds	r1, r2, #4
 8001c00:	4291      	cmp	r1, r2
 8001c02:	4192      	sbcs	r2, r2
 8001c04:	4252      	negs	r2, r2
 8001c06:	4493      	add	fp, r2
 8001c08:	e754      	b.n	8001ab4 <__aeabi_ddiv+0x3e4>
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <__aeabi_ddiv+0x658>)
 8001c0c:	18e3      	adds	r3, r4, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dde5      	ble.n	8001bde <__aeabi_ddiv+0x50e>
 8001c12:	2201      	movs	r2, #1
 8001c14:	4252      	negs	r2, r2
 8001c16:	e7f2      	b.n	8001bfe <__aeabi_ddiv+0x52e>
 8001c18:	001d      	movs	r5, r3
 8001c1a:	e6fa      	b.n	8001a12 <__aeabi_ddiv+0x342>
 8001c1c:	469a      	mov	sl, r3
 8001c1e:	e71c      	b.n	8001a5a <__aeabi_ddiv+0x38a>
 8001c20:	42b0      	cmp	r0, r6
 8001c22:	d839      	bhi.n	8001c98 <__aeabi_ddiv+0x5c8>
 8001c24:	d06e      	beq.n	8001d04 <__aeabi_ddiv+0x634>
 8001c26:	0011      	movs	r1, r2
 8001c28:	e73a      	b.n	8001aa0 <__aeabi_ddiv+0x3d0>
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	e73a      	b.n	8001aa4 <__aeabi_ddiv+0x3d4>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc3c      	bgt.n	8001cac <__aeabi_ddiv+0x5dc>
 8001c32:	2320      	movs	r3, #32
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	000c      	movs	r4, r1
 8001c38:	4658      	mov	r0, fp
 8001c3a:	4099      	lsls	r1, r3
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	1e4b      	subs	r3, r1, #1
 8001c40:	4199      	sbcs	r1, r3
 8001c42:	465b      	mov	r3, fp
 8001c44:	40d4      	lsrs	r4, r2
 8001c46:	40d3      	lsrs	r3, r2
 8001c48:	4320      	orrs	r0, r4
 8001c4a:	4308      	orrs	r0, r1
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	0743      	lsls	r3, r0, #29
 8001c50:	d009      	beq.n	8001c66 <__aeabi_ddiv+0x596>
 8001c52:	230f      	movs	r3, #15
 8001c54:	4003      	ands	r3, r0
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d005      	beq.n	8001c66 <__aeabi_ddiv+0x596>
 8001c5a:	0001      	movs	r1, r0
 8001c5c:	1d08      	adds	r0, r1, #4
 8001c5e:	4288      	cmp	r0, r1
 8001c60:	419b      	sbcs	r3, r3
 8001c62:	425b      	negs	r3, r3
 8001c64:	18d2      	adds	r2, r2, r3
 8001c66:	0213      	lsls	r3, r2, #8
 8001c68:	d53a      	bpl.n	8001ce0 <__aeabi_ddiv+0x610>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9a02      	ldr	r2, [sp, #8]
 8001c6e:	2401      	movs	r4, #1
 8001c70:	401a      	ands	r2, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	4694      	mov	ip, r2
 8001c76:	4698      	mov	r8, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	e5f7      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4249      	negs	r1, r1
 8001c80:	468c      	mov	ip, r1
 8001c82:	9d03      	ldr	r5, [sp, #12]
 8001c84:	44e3      	add	fp, ip
 8001c86:	46ac      	mov	ip, r5
 8001c88:	44e2      	add	sl, ip
 8001c8a:	45aa      	cmp	sl, r5
 8001c8c:	41ad      	sbcs	r5, r5
 8001c8e:	426d      	negs	r5, r5
 8001c90:	4445      	add	r5, r8
 8001c92:	18ed      	adds	r5, r5, r3
 8001c94:	1a2d      	subs	r5, r5, r0
 8001c96:	e696      	b.n	80019c6 <__aeabi_ddiv+0x2f6>
 8001c98:	1e8a      	subs	r2, r1, #2
 8001c9a:	9903      	ldr	r1, [sp, #12]
 8001c9c:	004d      	lsls	r5, r1, #1
 8001c9e:	428d      	cmp	r5, r1
 8001ca0:	4189      	sbcs	r1, r1
 8001ca2:	4249      	negs	r1, r1
 8001ca4:	4441      	add	r1, r8
 8001ca6:	1876      	adds	r6, r6, r1
 8001ca8:	9503      	str	r5, [sp, #12]
 8001caa:	e78f      	b.n	8001bcc <__aeabi_ddiv+0x4fc>
 8001cac:	201f      	movs	r0, #31
 8001cae:	4240      	negs	r0, r0
 8001cb0:	1ac3      	subs	r3, r0, r3
 8001cb2:	4658      	mov	r0, fp
 8001cb4:	40d8      	lsrs	r0, r3
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	2a20      	cmp	r2, #32
 8001cba:	d028      	beq.n	8001d0e <__aeabi_ddiv+0x63e>
 8001cbc:	2040      	movs	r0, #64	; 0x40
 8001cbe:	465d      	mov	r5, fp
 8001cc0:	1a82      	subs	r2, r0, r2
 8001cc2:	4095      	lsls	r5, r2
 8001cc4:	4329      	orrs	r1, r5
 8001cc6:	1e4a      	subs	r2, r1, #1
 8001cc8:	4191      	sbcs	r1, r2
 8001cca:	4319      	orrs	r1, r3
 8001ccc:	2307      	movs	r3, #7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	d009      	beq.n	8001ce8 <__aeabi_ddiv+0x618>
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0008      	movs	r0, r1
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d1bd      	bne.n	8001c5c <__aeabi_ddiv+0x58c>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	0753      	lsls	r3, r2, #29
 8001ce4:	0252      	lsls	r2, r2, #9
 8001ce6:	0b12      	lsrs	r2, r2, #12
 8001ce8:	08c9      	lsrs	r1, r1, #3
 8001cea:	4319      	orrs	r1, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	4688      	mov	r8, r1
 8001cf0:	9902      	ldr	r1, [sp, #8]
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	e5b8      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001cfa:	4552      	cmp	r2, sl
 8001cfc:	d8be      	bhi.n	8001c7c <__aeabi_ddiv+0x5ac>
 8001cfe:	468b      	mov	fp, r1
 8001d00:	2500      	movs	r5, #0
 8001d02:	e660      	b.n	80019c6 <__aeabi_ddiv+0x2f6>
 8001d04:	9d03      	ldr	r5, [sp, #12]
 8001d06:	429d      	cmp	r5, r3
 8001d08:	d3c6      	bcc.n	8001c98 <__aeabi_ddiv+0x5c8>
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	e762      	b.n	8001bd4 <__aeabi_ddiv+0x504>
 8001d0e:	2500      	movs	r5, #0
 8001d10:	e7d8      	b.n	8001cc4 <__aeabi_ddiv+0x5f4>
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	465b      	mov	r3, fp
 8001d16:	0312      	lsls	r2, r2, #12
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	9b01      	ldr	r3, [sp, #4]
 8001d1c:	0312      	lsls	r2, r2, #12
 8001d1e:	0b12      	lsrs	r2, r2, #12
 8001d20:	469c      	mov	ip, r3
 8001d22:	4688      	mov	r8, r1
 8001d24:	4c03      	ldr	r4, [pc, #12]	; (8001d34 <__aeabi_ddiv+0x664>)
 8001d26:	e5a1      	b.n	800186c <__aeabi_ddiv+0x19c>
 8001d28:	000003ff 	.word	0x000003ff
 8001d2c:	feffffff 	.word	0xfeffffff
 8001d30:	000007fe 	.word	0x000007fe
 8001d34:	000007ff 	.word	0x000007ff

08001d38 <__eqdf2>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	464f      	mov	r7, r9
 8001d3c:	4646      	mov	r6, r8
 8001d3e:	46d6      	mov	lr, sl
 8001d40:	005c      	lsls	r4, r3, #1
 8001d42:	b5c0      	push	{r6, r7, lr}
 8001d44:	031f      	lsls	r7, r3, #12
 8001d46:	0fdb      	lsrs	r3, r3, #31
 8001d48:	469a      	mov	sl, r3
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <__eqdf2+0x70>)
 8001d4c:	030e      	lsls	r6, r1, #12
 8001d4e:	004d      	lsls	r5, r1, #1
 8001d50:	4684      	mov	ip, r0
 8001d52:	4680      	mov	r8, r0
 8001d54:	0b36      	lsrs	r6, r6, #12
 8001d56:	0d6d      	lsrs	r5, r5, #21
 8001d58:	0fc9      	lsrs	r1, r1, #31
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	0b3f      	lsrs	r7, r7, #12
 8001d5e:	0d64      	lsrs	r4, r4, #21
 8001d60:	2001      	movs	r0, #1
 8001d62:	429d      	cmp	r5, r3
 8001d64:	d008      	beq.n	8001d78 <__eqdf2+0x40>
 8001d66:	429c      	cmp	r4, r3
 8001d68:	d001      	beq.n	8001d6e <__eqdf2+0x36>
 8001d6a:	42a5      	cmp	r5, r4
 8001d6c:	d00b      	beq.n	8001d86 <__eqdf2+0x4e>
 8001d6e:	bc1c      	pop	{r2, r3, r4}
 8001d70:	4690      	mov	r8, r2
 8001d72:	4699      	mov	r9, r3
 8001d74:	46a2      	mov	sl, r4
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	4663      	mov	r3, ip
 8001d7a:	4333      	orrs	r3, r6
 8001d7c:	d1f7      	bne.n	8001d6e <__eqdf2+0x36>
 8001d7e:	42ac      	cmp	r4, r5
 8001d80:	d1f5      	bne.n	8001d6e <__eqdf2+0x36>
 8001d82:	433a      	orrs	r2, r7
 8001d84:	d1f3      	bne.n	8001d6e <__eqdf2+0x36>
 8001d86:	2001      	movs	r0, #1
 8001d88:	42be      	cmp	r6, r7
 8001d8a:	d1f0      	bne.n	8001d6e <__eqdf2+0x36>
 8001d8c:	45c8      	cmp	r8, r9
 8001d8e:	d1ee      	bne.n	8001d6e <__eqdf2+0x36>
 8001d90:	4551      	cmp	r1, sl
 8001d92:	d007      	beq.n	8001da4 <__eqdf2+0x6c>
 8001d94:	2d00      	cmp	r5, #0
 8001d96:	d1ea      	bne.n	8001d6e <__eqdf2+0x36>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	431e      	orrs	r6, r3
 8001d9c:	0030      	movs	r0, r6
 8001d9e:	1e46      	subs	r6, r0, #1
 8001da0:	41b0      	sbcs	r0, r6
 8001da2:	e7e4      	b.n	8001d6e <__eqdf2+0x36>
 8001da4:	2000      	movs	r0, #0
 8001da6:	e7e2      	b.n	8001d6e <__eqdf2+0x36>
 8001da8:	000007ff 	.word	0x000007ff

08001dac <__gedf2>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	4645      	mov	r5, r8
 8001db0:	46de      	mov	lr, fp
 8001db2:	4657      	mov	r7, sl
 8001db4:	464e      	mov	r6, r9
 8001db6:	b5e0      	push	{r5, r6, r7, lr}
 8001db8:	031f      	lsls	r7, r3, #12
 8001dba:	0b3d      	lsrs	r5, r7, #12
 8001dbc:	4f2c      	ldr	r7, [pc, #176]	; (8001e70 <__gedf2+0xc4>)
 8001dbe:	030e      	lsls	r6, r1, #12
 8001dc0:	004c      	lsls	r4, r1, #1
 8001dc2:	46ab      	mov	fp, r5
 8001dc4:	005d      	lsls	r5, r3, #1
 8001dc6:	4684      	mov	ip, r0
 8001dc8:	0b36      	lsrs	r6, r6, #12
 8001dca:	0d64      	lsrs	r4, r4, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	4690      	mov	r8, r2
 8001dd0:	0d6d      	lsrs	r5, r5, #21
 8001dd2:	0fdb      	lsrs	r3, r3, #31
 8001dd4:	42bc      	cmp	r4, r7
 8001dd6:	d02a      	beq.n	8001e2e <__gedf2+0x82>
 8001dd8:	4f25      	ldr	r7, [pc, #148]	; (8001e70 <__gedf2+0xc4>)
 8001dda:	42bd      	cmp	r5, r7
 8001ddc:	d02d      	beq.n	8001e3a <__gedf2+0x8e>
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d10f      	bne.n	8001e02 <__gedf2+0x56>
 8001de2:	4330      	orrs	r0, r6
 8001de4:	0007      	movs	r7, r0
 8001de6:	4681      	mov	r9, r0
 8001de8:	4278      	negs	r0, r7
 8001dea:	4178      	adcs	r0, r7
 8001dec:	b2c0      	uxtb	r0, r0
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	d117      	bne.n	8001e22 <__gedf2+0x76>
 8001df2:	465f      	mov	r7, fp
 8001df4:	433a      	orrs	r2, r7
 8001df6:	d114      	bne.n	8001e22 <__gedf2+0x76>
 8001df8:	464b      	mov	r3, r9
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <__gedf2+0x6a>
 8001e00:	e006      	b.n	8001e10 <__gedf2+0x64>
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d102      	bne.n	8001e0c <__gedf2+0x60>
 8001e06:	4658      	mov	r0, fp
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	d001      	beq.n	8001e10 <__gedf2+0x64>
 8001e0c:	4299      	cmp	r1, r3
 8001e0e:	d018      	beq.n	8001e42 <__gedf2+0x96>
 8001e10:	4248      	negs	r0, r1
 8001e12:	2101      	movs	r1, #1
 8001e14:	4308      	orrs	r0, r1
 8001e16:	bc3c      	pop	{r2, r3, r4, r5}
 8001e18:	4690      	mov	r8, r2
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	46ab      	mov	fp, r5
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d0f2      	beq.n	8001e0c <__gedf2+0x60>
 8001e26:	2001      	movs	r0, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4318      	orrs	r0, r3
 8001e2c:	e7f3      	b.n	8001e16 <__gedf2+0x6a>
 8001e2e:	0037      	movs	r7, r6
 8001e30:	4307      	orrs	r7, r0
 8001e32:	d0d1      	beq.n	8001dd8 <__gedf2+0x2c>
 8001e34:	2002      	movs	r0, #2
 8001e36:	4240      	negs	r0, r0
 8001e38:	e7ed      	b.n	8001e16 <__gedf2+0x6a>
 8001e3a:	465f      	mov	r7, fp
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	d0ce      	beq.n	8001dde <__gedf2+0x32>
 8001e40:	e7f8      	b.n	8001e34 <__gedf2+0x88>
 8001e42:	42ac      	cmp	r4, r5
 8001e44:	dce4      	bgt.n	8001e10 <__gedf2+0x64>
 8001e46:	da03      	bge.n	8001e50 <__gedf2+0xa4>
 8001e48:	1e48      	subs	r0, r1, #1
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4308      	orrs	r0, r1
 8001e4e:	e7e2      	b.n	8001e16 <__gedf2+0x6a>
 8001e50:	455e      	cmp	r6, fp
 8001e52:	d8dd      	bhi.n	8001e10 <__gedf2+0x64>
 8001e54:	d006      	beq.n	8001e64 <__gedf2+0xb8>
 8001e56:	2000      	movs	r0, #0
 8001e58:	455e      	cmp	r6, fp
 8001e5a:	d2dc      	bcs.n	8001e16 <__gedf2+0x6a>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	1e48      	subs	r0, r1, #1
 8001e60:	4318      	orrs	r0, r3
 8001e62:	e7d8      	b.n	8001e16 <__gedf2+0x6a>
 8001e64:	45c4      	cmp	ip, r8
 8001e66:	d8d3      	bhi.n	8001e10 <__gedf2+0x64>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	45c4      	cmp	ip, r8
 8001e6c:	d3f6      	bcc.n	8001e5c <__gedf2+0xb0>
 8001e6e:	e7d2      	b.n	8001e16 <__gedf2+0x6a>
 8001e70:	000007ff 	.word	0x000007ff

08001e74 <__ledf2>:
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	464e      	mov	r6, r9
 8001e78:	4645      	mov	r5, r8
 8001e7a:	46de      	mov	lr, fp
 8001e7c:	4657      	mov	r7, sl
 8001e7e:	005c      	lsls	r4, r3, #1
 8001e80:	b5e0      	push	{r5, r6, r7, lr}
 8001e82:	031f      	lsls	r7, r3, #12
 8001e84:	0fdb      	lsrs	r3, r3, #31
 8001e86:	4699      	mov	r9, r3
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <__ledf2+0xc0>)
 8001e8a:	030e      	lsls	r6, r1, #12
 8001e8c:	004d      	lsls	r5, r1, #1
 8001e8e:	0fc9      	lsrs	r1, r1, #31
 8001e90:	4684      	mov	ip, r0
 8001e92:	0b36      	lsrs	r6, r6, #12
 8001e94:	0d6d      	lsrs	r5, r5, #21
 8001e96:	468b      	mov	fp, r1
 8001e98:	4690      	mov	r8, r2
 8001e9a:	0b3f      	lsrs	r7, r7, #12
 8001e9c:	0d64      	lsrs	r4, r4, #21
 8001e9e:	429d      	cmp	r5, r3
 8001ea0:	d020      	beq.n	8001ee4 <__ledf2+0x70>
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <__ledf2+0xc0>)
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	d022      	beq.n	8001eee <__ledf2+0x7a>
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	d112      	bne.n	8001ed2 <__ledf2+0x5e>
 8001eac:	4330      	orrs	r0, r6
 8001eae:	4243      	negs	r3, r0
 8001eb0:	4143      	adcs	r3, r0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d01f      	beq.n	8001ef8 <__ledf2+0x84>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <__ledf2+0x62>
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	4303      	orrs	r3, r0
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	bc3c      	pop	{r2, r3, r4, r5}
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	46a2      	mov	sl, r4
 8001ece:	46ab      	mov	fp, r5
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d016      	beq.n	8001f04 <__ledf2+0x90>
 8001ed6:	45cb      	cmp	fp, r9
 8001ed8:	d017      	beq.n	8001f0a <__ledf2+0x96>
 8001eda:	465b      	mov	r3, fp
 8001edc:	4259      	negs	r1, r3
 8001ede:	2301      	movs	r3, #1
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	e7ef      	b.n	8001ec4 <__ledf2+0x50>
 8001ee4:	0031      	movs	r1, r6
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	4301      	orrs	r1, r0
 8001eea:	d1eb      	bne.n	8001ec4 <__ledf2+0x50>
 8001eec:	e7d9      	b.n	8001ea2 <__ledf2+0x2e>
 8001eee:	0039      	movs	r1, r7
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	d1e6      	bne.n	8001ec4 <__ledf2+0x50>
 8001ef6:	e7d7      	b.n	8001ea8 <__ledf2+0x34>
 8001ef8:	433a      	orrs	r2, r7
 8001efa:	d1dd      	bne.n	8001eb8 <__ledf2+0x44>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d0e0      	beq.n	8001ec4 <__ledf2+0x50>
 8001f02:	e7ea      	b.n	8001eda <__ledf2+0x66>
 8001f04:	433a      	orrs	r2, r7
 8001f06:	d1e6      	bne.n	8001ed6 <__ledf2+0x62>
 8001f08:	e7e7      	b.n	8001eda <__ledf2+0x66>
 8001f0a:	42a5      	cmp	r5, r4
 8001f0c:	dce5      	bgt.n	8001eda <__ledf2+0x66>
 8001f0e:	db05      	blt.n	8001f1c <__ledf2+0xa8>
 8001f10:	42be      	cmp	r6, r7
 8001f12:	d8e2      	bhi.n	8001eda <__ledf2+0x66>
 8001f14:	d007      	beq.n	8001f26 <__ledf2+0xb2>
 8001f16:	2300      	movs	r3, #0
 8001f18:	42be      	cmp	r6, r7
 8001f1a:	d2d3      	bcs.n	8001ec4 <__ledf2+0x50>
 8001f1c:	4659      	mov	r1, fp
 8001f1e:	2301      	movs	r3, #1
 8001f20:	3901      	subs	r1, #1
 8001f22:	430b      	orrs	r3, r1
 8001f24:	e7ce      	b.n	8001ec4 <__ledf2+0x50>
 8001f26:	45c4      	cmp	ip, r8
 8001f28:	d8d7      	bhi.n	8001eda <__ledf2+0x66>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	45c4      	cmp	ip, r8
 8001f2e:	d3f5      	bcc.n	8001f1c <__ledf2+0xa8>
 8001f30:	e7c8      	b.n	8001ec4 <__ledf2+0x50>
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	000007ff 	.word	0x000007ff

08001f38 <__aeabi_dmul>:
 8001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3a:	4657      	mov	r7, sl
 8001f3c:	4645      	mov	r5, r8
 8001f3e:	46de      	mov	lr, fp
 8001f40:	464e      	mov	r6, r9
 8001f42:	b5e0      	push	{r5, r6, r7, lr}
 8001f44:	030c      	lsls	r4, r1, #12
 8001f46:	4698      	mov	r8, r3
 8001f48:	004e      	lsls	r6, r1, #1
 8001f4a:	0b23      	lsrs	r3, r4, #12
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	0007      	movs	r7, r0
 8001f50:	4692      	mov	sl, r2
 8001f52:	469b      	mov	fp, r3
 8001f54:	0d76      	lsrs	r6, r6, #21
 8001f56:	0fcd      	lsrs	r5, r1, #31
 8001f58:	2e00      	cmp	r6, #0
 8001f5a:	d06b      	beq.n	8002034 <__aeabi_dmul+0xfc>
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <__aeabi_dmul+0x1dc>)
 8001f5e:	429e      	cmp	r6, r3
 8001f60:	d035      	beq.n	8001fce <__aeabi_dmul+0x96>
 8001f62:	2480      	movs	r4, #128	; 0x80
 8001f64:	465b      	mov	r3, fp
 8001f66:	0f42      	lsrs	r2, r0, #29
 8001f68:	0424      	lsls	r4, r4, #16
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4314      	orrs	r4, r2
 8001f6e:	431c      	orrs	r4, r3
 8001f70:	00c3      	lsls	r3, r0, #3
 8001f72:	4699      	mov	r9, r3
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <__aeabi_dmul+0x1e0>)
 8001f76:	46a3      	mov	fp, r4
 8001f78:	469c      	mov	ip, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2700      	movs	r7, #0
 8001f7e:	4466      	add	r6, ip
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	4643      	mov	r3, r8
 8001f84:	031c      	lsls	r4, r3, #12
 8001f86:	005a      	lsls	r2, r3, #1
 8001f88:	0fdb      	lsrs	r3, r3, #31
 8001f8a:	4650      	mov	r0, sl
 8001f8c:	0b24      	lsrs	r4, r4, #12
 8001f8e:	0d52      	lsrs	r2, r2, #21
 8001f90:	4698      	mov	r8, r3
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dmul+0x5e>
 8001f94:	e076      	b.n	8002084 <__aeabi_dmul+0x14c>
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <__aeabi_dmul+0x1dc>)
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d06d      	beq.n	8002078 <__aeabi_dmul+0x140>
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	0f41      	lsrs	r1, r0, #29
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	495c      	ldr	r1, [pc, #368]	; (8002118 <__aeabi_dmul+0x1e0>)
 8001fa6:	00e4      	lsls	r4, r4, #3
 8001fa8:	468c      	mov	ip, r1
 8001faa:	431c      	orrs	r4, r3
 8001fac:	00c3      	lsls	r3, r0, #3
 8001fae:	2000      	movs	r0, #0
 8001fb0:	4462      	add	r2, ip
 8001fb2:	4641      	mov	r1, r8
 8001fb4:	18b6      	adds	r6, r6, r2
 8001fb6:	4069      	eors	r1, r5
 8001fb8:	1c72      	adds	r2, r6, #1
 8001fba:	9101      	str	r1, [sp, #4]
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	4307      	orrs	r7, r0
 8001fc0:	2f0f      	cmp	r7, #15
 8001fc2:	d900      	bls.n	8001fc6 <__aeabi_dmul+0x8e>
 8001fc4:	e0b0      	b.n	8002128 <__aeabi_dmul+0x1f0>
 8001fc6:	4a55      	ldr	r2, [pc, #340]	; (800211c <__aeabi_dmul+0x1e4>)
 8001fc8:	00bf      	lsls	r7, r7, #2
 8001fca:	59d2      	ldr	r2, [r2, r7]
 8001fcc:	4697      	mov	pc, r2
 8001fce:	465b      	mov	r3, fp
 8001fd0:	4303      	orrs	r3, r0
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dmul+0xa0>
 8001fd6:	e087      	b.n	80020e8 <__aeabi_dmul+0x1b0>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	469b      	mov	fp, r3
 8001fdc:	3302      	adds	r3, #2
 8001fde:	2708      	movs	r7, #8
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	e7ce      	b.n	8001f82 <__aeabi_dmul+0x4a>
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	9201      	str	r2, [sp, #4]
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d067      	beq.n	80020bc <__aeabi_dmul+0x184>
 8001fec:	2803      	cmp	r0, #3
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dmul+0xba>
 8001ff0:	e20e      	b.n	8002410 <__aeabi_dmul+0x4d8>
 8001ff2:	2801      	cmp	r0, #1
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dmul+0xc0>
 8001ff6:	e162      	b.n	80022be <__aeabi_dmul+0x386>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4699      	mov	r9, r3
 8002000:	9901      	ldr	r1, [sp, #4]
 8002002:	4001      	ands	r1, r0
 8002004:	b2cd      	uxtb	r5, r1
 8002006:	2100      	movs	r1, #0
 8002008:	0312      	lsls	r2, r2, #12
 800200a:	0d0b      	lsrs	r3, r1, #20
 800200c:	0b12      	lsrs	r2, r2, #12
 800200e:	051b      	lsls	r3, r3, #20
 8002010:	4313      	orrs	r3, r2
 8002012:	4a43      	ldr	r2, [pc, #268]	; (8002120 <__aeabi_dmul+0x1e8>)
 8002014:	0524      	lsls	r4, r4, #20
 8002016:	4013      	ands	r3, r2
 8002018:	431c      	orrs	r4, r3
 800201a:	0064      	lsls	r4, r4, #1
 800201c:	07ed      	lsls	r5, r5, #31
 800201e:	0864      	lsrs	r4, r4, #1
 8002020:	432c      	orrs	r4, r5
 8002022:	4648      	mov	r0, r9
 8002024:	0021      	movs	r1, r4
 8002026:	b007      	add	sp, #28
 8002028:	bc3c      	pop	{r2, r3, r4, r5}
 800202a:	4690      	mov	r8, r2
 800202c:	4699      	mov	r9, r3
 800202e:	46a2      	mov	sl, r4
 8002030:	46ab      	mov	fp, r5
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002034:	4303      	orrs	r3, r0
 8002036:	4699      	mov	r9, r3
 8002038:	d04f      	beq.n	80020da <__aeabi_dmul+0x1a2>
 800203a:	465b      	mov	r3, fp
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <__aeabi_dmul+0x10a>
 8002040:	e189      	b.n	8002356 <__aeabi_dmul+0x41e>
 8002042:	4658      	mov	r0, fp
 8002044:	f000 fdde 	bl	8002c04 <__clzsi2>
 8002048:	0003      	movs	r3, r0
 800204a:	3b0b      	subs	r3, #11
 800204c:	2b1c      	cmp	r3, #28
 800204e:	dd00      	ble.n	8002052 <__aeabi_dmul+0x11a>
 8002050:	e17a      	b.n	8002348 <__aeabi_dmul+0x410>
 8002052:	221d      	movs	r2, #29
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	003a      	movs	r2, r7
 8002058:	0001      	movs	r1, r0
 800205a:	465c      	mov	r4, fp
 800205c:	40da      	lsrs	r2, r3
 800205e:	3908      	subs	r1, #8
 8002060:	408c      	lsls	r4, r1
 8002062:	0013      	movs	r3, r2
 8002064:	408f      	lsls	r7, r1
 8002066:	4323      	orrs	r3, r4
 8002068:	469b      	mov	fp, r3
 800206a:	46b9      	mov	r9, r7
 800206c:	2300      	movs	r3, #0
 800206e:	4e2d      	ldr	r6, [pc, #180]	; (8002124 <__aeabi_dmul+0x1ec>)
 8002070:	2700      	movs	r7, #0
 8002072:	1a36      	subs	r6, r6, r0
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	e784      	b.n	8001f82 <__aeabi_dmul+0x4a>
 8002078:	4653      	mov	r3, sl
 800207a:	4323      	orrs	r3, r4
 800207c:	d12a      	bne.n	80020d4 <__aeabi_dmul+0x19c>
 800207e:	2400      	movs	r4, #0
 8002080:	2002      	movs	r0, #2
 8002082:	e796      	b.n	8001fb2 <__aeabi_dmul+0x7a>
 8002084:	4653      	mov	r3, sl
 8002086:	4323      	orrs	r3, r4
 8002088:	d020      	beq.n	80020cc <__aeabi_dmul+0x194>
 800208a:	2c00      	cmp	r4, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dmul+0x158>
 800208e:	e157      	b.n	8002340 <__aeabi_dmul+0x408>
 8002090:	0020      	movs	r0, r4
 8002092:	f000 fdb7 	bl	8002c04 <__clzsi2>
 8002096:	0003      	movs	r3, r0
 8002098:	3b0b      	subs	r3, #11
 800209a:	2b1c      	cmp	r3, #28
 800209c:	dd00      	ble.n	80020a0 <__aeabi_dmul+0x168>
 800209e:	e149      	b.n	8002334 <__aeabi_dmul+0x3fc>
 80020a0:	211d      	movs	r1, #29
 80020a2:	1acb      	subs	r3, r1, r3
 80020a4:	4651      	mov	r1, sl
 80020a6:	0002      	movs	r2, r0
 80020a8:	40d9      	lsrs	r1, r3
 80020aa:	4653      	mov	r3, sl
 80020ac:	3a08      	subs	r2, #8
 80020ae:	4094      	lsls	r4, r2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	430c      	orrs	r4, r1
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <__aeabi_dmul+0x1ec>)
 80020b6:	1a12      	subs	r2, r2, r0
 80020b8:	2000      	movs	r0, #0
 80020ba:	e77a      	b.n	8001fb2 <__aeabi_dmul+0x7a>
 80020bc:	2501      	movs	r5, #1
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	4c14      	ldr	r4, [pc, #80]	; (8002114 <__aeabi_dmul+0x1dc>)
 80020c2:	401d      	ands	r5, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	2200      	movs	r2, #0
 80020c8:	4699      	mov	r9, r3
 80020ca:	e79c      	b.n	8002006 <__aeabi_dmul+0xce>
 80020cc:	2400      	movs	r4, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2001      	movs	r0, #1
 80020d2:	e76e      	b.n	8001fb2 <__aeabi_dmul+0x7a>
 80020d4:	4653      	mov	r3, sl
 80020d6:	2003      	movs	r0, #3
 80020d8:	e76b      	b.n	8001fb2 <__aeabi_dmul+0x7a>
 80020da:	2300      	movs	r3, #0
 80020dc:	469b      	mov	fp, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	2704      	movs	r7, #4
 80020e2:	2600      	movs	r6, #0
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	e74c      	b.n	8001f82 <__aeabi_dmul+0x4a>
 80020e8:	2303      	movs	r3, #3
 80020ea:	4681      	mov	r9, r0
 80020ec:	270c      	movs	r7, #12
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	e747      	b.n	8001f82 <__aeabi_dmul+0x4a>
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	2300      	movs	r3, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	0312      	lsls	r2, r2, #12
 80020fa:	4699      	mov	r9, r3
 80020fc:	4c05      	ldr	r4, [pc, #20]	; (8002114 <__aeabi_dmul+0x1dc>)
 80020fe:	e782      	b.n	8002006 <__aeabi_dmul+0xce>
 8002100:	465c      	mov	r4, fp
 8002102:	464b      	mov	r3, r9
 8002104:	9802      	ldr	r0, [sp, #8]
 8002106:	e76f      	b.n	8001fe8 <__aeabi_dmul+0xb0>
 8002108:	465c      	mov	r4, fp
 800210a:	464b      	mov	r3, r9
 800210c:	9501      	str	r5, [sp, #4]
 800210e:	9802      	ldr	r0, [sp, #8]
 8002110:	e76a      	b.n	8001fe8 <__aeabi_dmul+0xb0>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	000007ff 	.word	0x000007ff
 8002118:	fffffc01 	.word	0xfffffc01
 800211c:	0800dddc 	.word	0x0800dddc
 8002120:	800fffff 	.word	0x800fffff
 8002124:	fffffc0d 	.word	0xfffffc0d
 8002128:	464a      	mov	r2, r9
 800212a:	4649      	mov	r1, r9
 800212c:	0c17      	lsrs	r7, r2, #16
 800212e:	0c1a      	lsrs	r2, r3, #16
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	0408      	lsls	r0, r1, #16
 8002136:	0019      	movs	r1, r3
 8002138:	0c00      	lsrs	r0, r0, #16
 800213a:	4341      	muls	r1, r0
 800213c:	0015      	movs	r5, r2
 800213e:	4688      	mov	r8, r1
 8002140:	0019      	movs	r1, r3
 8002142:	437d      	muls	r5, r7
 8002144:	4379      	muls	r1, r7
 8002146:	9503      	str	r5, [sp, #12]
 8002148:	4689      	mov	r9, r1
 800214a:	0029      	movs	r1, r5
 800214c:	0015      	movs	r5, r2
 800214e:	4345      	muls	r5, r0
 8002150:	444d      	add	r5, r9
 8002152:	9502      	str	r5, [sp, #8]
 8002154:	4645      	mov	r5, r8
 8002156:	0c2d      	lsrs	r5, r5, #16
 8002158:	46aa      	mov	sl, r5
 800215a:	9d02      	ldr	r5, [sp, #8]
 800215c:	4455      	add	r5, sl
 800215e:	45a9      	cmp	r9, r5
 8002160:	d906      	bls.n	8002170 <__aeabi_dmul+0x238>
 8002162:	468a      	mov	sl, r1
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0249      	lsls	r1, r1, #9
 8002168:	4689      	mov	r9, r1
 800216a:	44ca      	add	sl, r9
 800216c:	4651      	mov	r1, sl
 800216e:	9103      	str	r1, [sp, #12]
 8002170:	0c29      	lsrs	r1, r5, #16
 8002172:	9104      	str	r1, [sp, #16]
 8002174:	4641      	mov	r1, r8
 8002176:	0409      	lsls	r1, r1, #16
 8002178:	042d      	lsls	r5, r5, #16
 800217a:	0c09      	lsrs	r1, r1, #16
 800217c:	4688      	mov	r8, r1
 800217e:	0029      	movs	r1, r5
 8002180:	0c25      	lsrs	r5, r4, #16
 8002182:	0424      	lsls	r4, r4, #16
 8002184:	4441      	add	r1, r8
 8002186:	0c24      	lsrs	r4, r4, #16
 8002188:	9105      	str	r1, [sp, #20]
 800218a:	0021      	movs	r1, r4
 800218c:	4341      	muls	r1, r0
 800218e:	4688      	mov	r8, r1
 8002190:	0021      	movs	r1, r4
 8002192:	4379      	muls	r1, r7
 8002194:	468a      	mov	sl, r1
 8002196:	4368      	muls	r0, r5
 8002198:	4641      	mov	r1, r8
 800219a:	4450      	add	r0, sl
 800219c:	4681      	mov	r9, r0
 800219e:	0c08      	lsrs	r0, r1, #16
 80021a0:	4448      	add	r0, r9
 80021a2:	436f      	muls	r7, r5
 80021a4:	4582      	cmp	sl, r0
 80021a6:	d903      	bls.n	80021b0 <__aeabi_dmul+0x278>
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0249      	lsls	r1, r1, #9
 80021ac:	4689      	mov	r9, r1
 80021ae:	444f      	add	r7, r9
 80021b0:	0c01      	lsrs	r1, r0, #16
 80021b2:	4689      	mov	r9, r1
 80021b4:	0039      	movs	r1, r7
 80021b6:	4449      	add	r1, r9
 80021b8:	9102      	str	r1, [sp, #8]
 80021ba:	4641      	mov	r1, r8
 80021bc:	040f      	lsls	r7, r1, #16
 80021be:	9904      	ldr	r1, [sp, #16]
 80021c0:	0c3f      	lsrs	r7, r7, #16
 80021c2:	4688      	mov	r8, r1
 80021c4:	0400      	lsls	r0, r0, #16
 80021c6:	19c0      	adds	r0, r0, r7
 80021c8:	4480      	add	r8, r0
 80021ca:	4641      	mov	r1, r8
 80021cc:	9104      	str	r1, [sp, #16]
 80021ce:	4659      	mov	r1, fp
 80021d0:	0c0f      	lsrs	r7, r1, #16
 80021d2:	0409      	lsls	r1, r1, #16
 80021d4:	0c09      	lsrs	r1, r1, #16
 80021d6:	4688      	mov	r8, r1
 80021d8:	4359      	muls	r1, r3
 80021da:	468a      	mov	sl, r1
 80021dc:	0039      	movs	r1, r7
 80021de:	4351      	muls	r1, r2
 80021e0:	4689      	mov	r9, r1
 80021e2:	4641      	mov	r1, r8
 80021e4:	434a      	muls	r2, r1
 80021e6:	4651      	mov	r1, sl
 80021e8:	0c09      	lsrs	r1, r1, #16
 80021ea:	468b      	mov	fp, r1
 80021ec:	437b      	muls	r3, r7
 80021ee:	18d2      	adds	r2, r2, r3
 80021f0:	445a      	add	r2, fp
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d903      	bls.n	80021fe <__aeabi_dmul+0x2c6>
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	469b      	mov	fp, r3
 80021fc:	44d9      	add	r9, fp
 80021fe:	4651      	mov	r1, sl
 8002200:	0409      	lsls	r1, r1, #16
 8002202:	0c09      	lsrs	r1, r1, #16
 8002204:	468a      	mov	sl, r1
 8002206:	4641      	mov	r1, r8
 8002208:	4361      	muls	r1, r4
 800220a:	437c      	muls	r4, r7
 800220c:	0c13      	lsrs	r3, r2, #16
 800220e:	0412      	lsls	r2, r2, #16
 8002210:	444b      	add	r3, r9
 8002212:	4452      	add	r2, sl
 8002214:	46a1      	mov	r9, r4
 8002216:	468a      	mov	sl, r1
 8002218:	003c      	movs	r4, r7
 800221a:	4641      	mov	r1, r8
 800221c:	436c      	muls	r4, r5
 800221e:	434d      	muls	r5, r1
 8002220:	4651      	mov	r1, sl
 8002222:	444d      	add	r5, r9
 8002224:	0c0f      	lsrs	r7, r1, #16
 8002226:	197d      	adds	r5, r7, r5
 8002228:	45a9      	cmp	r9, r5
 800222a:	d903      	bls.n	8002234 <__aeabi_dmul+0x2fc>
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0249      	lsls	r1, r1, #9
 8002230:	4688      	mov	r8, r1
 8002232:	4444      	add	r4, r8
 8002234:	9f04      	ldr	r7, [sp, #16]
 8002236:	9903      	ldr	r1, [sp, #12]
 8002238:	46b8      	mov	r8, r7
 800223a:	4441      	add	r1, r8
 800223c:	468b      	mov	fp, r1
 800223e:	4583      	cmp	fp, r0
 8002240:	4180      	sbcs	r0, r0
 8002242:	4241      	negs	r1, r0
 8002244:	4688      	mov	r8, r1
 8002246:	4651      	mov	r1, sl
 8002248:	0408      	lsls	r0, r1, #16
 800224a:	042f      	lsls	r7, r5, #16
 800224c:	0c00      	lsrs	r0, r0, #16
 800224e:	183f      	adds	r7, r7, r0
 8002250:	4658      	mov	r0, fp
 8002252:	9902      	ldr	r1, [sp, #8]
 8002254:	1810      	adds	r0, r2, r0
 8002256:	4689      	mov	r9, r1
 8002258:	4290      	cmp	r0, r2
 800225a:	4192      	sbcs	r2, r2
 800225c:	444f      	add	r7, r9
 800225e:	46ba      	mov	sl, r7
 8002260:	4252      	negs	r2, r2
 8002262:	4699      	mov	r9, r3
 8002264:	4693      	mov	fp, r2
 8002266:	44c2      	add	sl, r8
 8002268:	44d1      	add	r9, sl
 800226a:	44cb      	add	fp, r9
 800226c:	428f      	cmp	r7, r1
 800226e:	41bf      	sbcs	r7, r7
 8002270:	45c2      	cmp	sl, r8
 8002272:	4189      	sbcs	r1, r1
 8002274:	4599      	cmp	r9, r3
 8002276:	419b      	sbcs	r3, r3
 8002278:	4593      	cmp	fp, r2
 800227a:	4192      	sbcs	r2, r2
 800227c:	427f      	negs	r7, r7
 800227e:	4249      	negs	r1, r1
 8002280:	0c2d      	lsrs	r5, r5, #16
 8002282:	4252      	negs	r2, r2
 8002284:	430f      	orrs	r7, r1
 8002286:	425b      	negs	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	197f      	adds	r7, r7, r5
 800228c:	18ff      	adds	r7, r7, r3
 800228e:	465b      	mov	r3, fp
 8002290:	193c      	adds	r4, r7, r4
 8002292:	0ddb      	lsrs	r3, r3, #23
 8002294:	9a05      	ldr	r2, [sp, #20]
 8002296:	0264      	lsls	r4, r4, #9
 8002298:	431c      	orrs	r4, r3
 800229a:	0243      	lsls	r3, r0, #9
 800229c:	4313      	orrs	r3, r2
 800229e:	1e5d      	subs	r5, r3, #1
 80022a0:	41ab      	sbcs	r3, r5
 80022a2:	465a      	mov	r2, fp
 80022a4:	0dc0      	lsrs	r0, r0, #23
 80022a6:	4303      	orrs	r3, r0
 80022a8:	0252      	lsls	r2, r2, #9
 80022aa:	4313      	orrs	r3, r2
 80022ac:	01e2      	lsls	r2, r4, #7
 80022ae:	d556      	bpl.n	800235e <__aeabi_dmul+0x426>
 80022b0:	2001      	movs	r0, #1
 80022b2:	085a      	lsrs	r2, r3, #1
 80022b4:	4003      	ands	r3, r0
 80022b6:	4313      	orrs	r3, r2
 80022b8:	07e2      	lsls	r2, r4, #31
 80022ba:	4313      	orrs	r3, r2
 80022bc:	0864      	lsrs	r4, r4, #1
 80022be:	485a      	ldr	r0, [pc, #360]	; (8002428 <__aeabi_dmul+0x4f0>)
 80022c0:	4460      	add	r0, ip
 80022c2:	2800      	cmp	r0, #0
 80022c4:	dd4d      	ble.n	8002362 <__aeabi_dmul+0x42a>
 80022c6:	075a      	lsls	r2, r3, #29
 80022c8:	d009      	beq.n	80022de <__aeabi_dmul+0x3a6>
 80022ca:	220f      	movs	r2, #15
 80022cc:	401a      	ands	r2, r3
 80022ce:	2a04      	cmp	r2, #4
 80022d0:	d005      	beq.n	80022de <__aeabi_dmul+0x3a6>
 80022d2:	1d1a      	adds	r2, r3, #4
 80022d4:	429a      	cmp	r2, r3
 80022d6:	419b      	sbcs	r3, r3
 80022d8:	425b      	negs	r3, r3
 80022da:	18e4      	adds	r4, r4, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	01e2      	lsls	r2, r4, #7
 80022e0:	d504      	bpl.n	80022ec <__aeabi_dmul+0x3b4>
 80022e2:	2080      	movs	r0, #128	; 0x80
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <__aeabi_dmul+0x4f4>)
 80022e6:	00c0      	lsls	r0, r0, #3
 80022e8:	4014      	ands	r4, r2
 80022ea:	4460      	add	r0, ip
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <__aeabi_dmul+0x4f8>)
 80022ee:	4290      	cmp	r0, r2
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dmul+0x3bc>
 80022f2:	e6e3      	b.n	80020bc <__aeabi_dmul+0x184>
 80022f4:	2501      	movs	r5, #1
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	0762      	lsls	r2, r4, #29
 80022fa:	431a      	orrs	r2, r3
 80022fc:	0264      	lsls	r4, r4, #9
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	4691      	mov	r9, r2
 8002302:	0b22      	lsrs	r2, r4, #12
 8002304:	0544      	lsls	r4, r0, #21
 8002306:	0d64      	lsrs	r4, r4, #21
 8002308:	401d      	ands	r5, r3
 800230a:	e67c      	b.n	8002006 <__aeabi_dmul+0xce>
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	4659      	mov	r1, fp
 8002310:	0312      	lsls	r2, r2, #12
 8002312:	4211      	tst	r1, r2
 8002314:	d008      	beq.n	8002328 <__aeabi_dmul+0x3f0>
 8002316:	4214      	tst	r4, r2
 8002318:	d106      	bne.n	8002328 <__aeabi_dmul+0x3f0>
 800231a:	4322      	orrs	r2, r4
 800231c:	0312      	lsls	r2, r2, #12
 800231e:	0b12      	lsrs	r2, r2, #12
 8002320:	4645      	mov	r5, r8
 8002322:	4699      	mov	r9, r3
 8002324:	4c43      	ldr	r4, [pc, #268]	; (8002434 <__aeabi_dmul+0x4fc>)
 8002326:	e66e      	b.n	8002006 <__aeabi_dmul+0xce>
 8002328:	465b      	mov	r3, fp
 800232a:	431a      	orrs	r2, r3
 800232c:	0312      	lsls	r2, r2, #12
 800232e:	0b12      	lsrs	r2, r2, #12
 8002330:	4c40      	ldr	r4, [pc, #256]	; (8002434 <__aeabi_dmul+0x4fc>)
 8002332:	e668      	b.n	8002006 <__aeabi_dmul+0xce>
 8002334:	0003      	movs	r3, r0
 8002336:	4654      	mov	r4, sl
 8002338:	3b28      	subs	r3, #40	; 0x28
 800233a:	409c      	lsls	r4, r3
 800233c:	2300      	movs	r3, #0
 800233e:	e6b9      	b.n	80020b4 <__aeabi_dmul+0x17c>
 8002340:	f000 fc60 	bl	8002c04 <__clzsi2>
 8002344:	3020      	adds	r0, #32
 8002346:	e6a6      	b.n	8002096 <__aeabi_dmul+0x15e>
 8002348:	0003      	movs	r3, r0
 800234a:	3b28      	subs	r3, #40	; 0x28
 800234c:	409f      	lsls	r7, r3
 800234e:	2300      	movs	r3, #0
 8002350:	46bb      	mov	fp, r7
 8002352:	4699      	mov	r9, r3
 8002354:	e68a      	b.n	800206c <__aeabi_dmul+0x134>
 8002356:	f000 fc55 	bl	8002c04 <__clzsi2>
 800235a:	3020      	adds	r0, #32
 800235c:	e674      	b.n	8002048 <__aeabi_dmul+0x110>
 800235e:	46b4      	mov	ip, r6
 8002360:	e7ad      	b.n	80022be <__aeabi_dmul+0x386>
 8002362:	2501      	movs	r5, #1
 8002364:	1a2a      	subs	r2, r5, r0
 8002366:	2a38      	cmp	r2, #56	; 0x38
 8002368:	dd06      	ble.n	8002378 <__aeabi_dmul+0x440>
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	2400      	movs	r4, #0
 800236e:	401d      	ands	r5, r3
 8002370:	2300      	movs	r3, #0
 8002372:	2200      	movs	r2, #0
 8002374:	4699      	mov	r9, r3
 8002376:	e646      	b.n	8002006 <__aeabi_dmul+0xce>
 8002378:	2a1f      	cmp	r2, #31
 800237a:	dc21      	bgt.n	80023c0 <__aeabi_dmul+0x488>
 800237c:	2520      	movs	r5, #32
 800237e:	0020      	movs	r0, r4
 8002380:	1aad      	subs	r5, r5, r2
 8002382:	001e      	movs	r6, r3
 8002384:	40ab      	lsls	r3, r5
 8002386:	40a8      	lsls	r0, r5
 8002388:	40d6      	lsrs	r6, r2
 800238a:	1e5d      	subs	r5, r3, #1
 800238c:	41ab      	sbcs	r3, r5
 800238e:	4330      	orrs	r0, r6
 8002390:	4318      	orrs	r0, r3
 8002392:	40d4      	lsrs	r4, r2
 8002394:	0743      	lsls	r3, r0, #29
 8002396:	d009      	beq.n	80023ac <__aeabi_dmul+0x474>
 8002398:	230f      	movs	r3, #15
 800239a:	4003      	ands	r3, r0
 800239c:	2b04      	cmp	r3, #4
 800239e:	d005      	beq.n	80023ac <__aeabi_dmul+0x474>
 80023a0:	0003      	movs	r3, r0
 80023a2:	1d18      	adds	r0, r3, #4
 80023a4:	4298      	cmp	r0, r3
 80023a6:	419b      	sbcs	r3, r3
 80023a8:	425b      	negs	r3, r3
 80023aa:	18e4      	adds	r4, r4, r3
 80023ac:	0223      	lsls	r3, r4, #8
 80023ae:	d521      	bpl.n	80023f4 <__aeabi_dmul+0x4bc>
 80023b0:	2501      	movs	r5, #1
 80023b2:	9b01      	ldr	r3, [sp, #4]
 80023b4:	2401      	movs	r4, #1
 80023b6:	401d      	ands	r5, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	4699      	mov	r9, r3
 80023be:	e622      	b.n	8002006 <__aeabi_dmul+0xce>
 80023c0:	251f      	movs	r5, #31
 80023c2:	0021      	movs	r1, r4
 80023c4:	426d      	negs	r5, r5
 80023c6:	1a28      	subs	r0, r5, r0
 80023c8:	40c1      	lsrs	r1, r0
 80023ca:	0008      	movs	r0, r1
 80023cc:	2a20      	cmp	r2, #32
 80023ce:	d01d      	beq.n	800240c <__aeabi_dmul+0x4d4>
 80023d0:	355f      	adds	r5, #95	; 0x5f
 80023d2:	1aaa      	subs	r2, r5, r2
 80023d4:	4094      	lsls	r4, r2
 80023d6:	4323      	orrs	r3, r4
 80023d8:	1e5c      	subs	r4, r3, #1
 80023da:	41a3      	sbcs	r3, r4
 80023dc:	2507      	movs	r5, #7
 80023de:	4303      	orrs	r3, r0
 80023e0:	401d      	ands	r5, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d009      	beq.n	80023fc <__aeabi_dmul+0x4c4>
 80023e8:	220f      	movs	r2, #15
 80023ea:	2400      	movs	r4, #0
 80023ec:	401a      	ands	r2, r3
 80023ee:	0018      	movs	r0, r3
 80023f0:	2a04      	cmp	r2, #4
 80023f2:	d1d6      	bne.n	80023a2 <__aeabi_dmul+0x46a>
 80023f4:	0003      	movs	r3, r0
 80023f6:	0765      	lsls	r5, r4, #29
 80023f8:	0264      	lsls	r4, r4, #9
 80023fa:	0b22      	lsrs	r2, r4, #12
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	432b      	orrs	r3, r5
 8002400:	2501      	movs	r5, #1
 8002402:	4699      	mov	r9, r3
 8002404:	9b01      	ldr	r3, [sp, #4]
 8002406:	2400      	movs	r4, #0
 8002408:	401d      	ands	r5, r3
 800240a:	e5fc      	b.n	8002006 <__aeabi_dmul+0xce>
 800240c:	2400      	movs	r4, #0
 800240e:	e7e2      	b.n	80023d6 <__aeabi_dmul+0x49e>
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	2501      	movs	r5, #1
 8002414:	0312      	lsls	r2, r2, #12
 8002416:	4322      	orrs	r2, r4
 8002418:	9901      	ldr	r1, [sp, #4]
 800241a:	0312      	lsls	r2, r2, #12
 800241c:	0b12      	lsrs	r2, r2, #12
 800241e:	400d      	ands	r5, r1
 8002420:	4699      	mov	r9, r3
 8002422:	4c04      	ldr	r4, [pc, #16]	; (8002434 <__aeabi_dmul+0x4fc>)
 8002424:	e5ef      	b.n	8002006 <__aeabi_dmul+0xce>
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	000003ff 	.word	0x000003ff
 800242c:	feffffff 	.word	0xfeffffff
 8002430:	000007fe 	.word	0x000007fe
 8002434:	000007ff 	.word	0x000007ff

08002438 <__aeabi_dsub>:
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	4646      	mov	r6, r8
 800243c:	46d6      	mov	lr, sl
 800243e:	464f      	mov	r7, r9
 8002440:	030c      	lsls	r4, r1, #12
 8002442:	b5c0      	push	{r6, r7, lr}
 8002444:	0fcd      	lsrs	r5, r1, #31
 8002446:	004e      	lsls	r6, r1, #1
 8002448:	0a61      	lsrs	r1, r4, #9
 800244a:	0f44      	lsrs	r4, r0, #29
 800244c:	430c      	orrs	r4, r1
 800244e:	00c1      	lsls	r1, r0, #3
 8002450:	0058      	lsls	r0, r3, #1
 8002452:	0d40      	lsrs	r0, r0, #21
 8002454:	4684      	mov	ip, r0
 8002456:	468a      	mov	sl, r1
 8002458:	000f      	movs	r7, r1
 800245a:	0319      	lsls	r1, r3, #12
 800245c:	0f50      	lsrs	r0, r2, #29
 800245e:	0a49      	lsrs	r1, r1, #9
 8002460:	4301      	orrs	r1, r0
 8002462:	48c6      	ldr	r0, [pc, #792]	; (800277c <__aeabi_dsub+0x344>)
 8002464:	0d76      	lsrs	r6, r6, #21
 8002466:	46a8      	mov	r8, r5
 8002468:	0fdb      	lsrs	r3, r3, #31
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	4584      	cmp	ip, r0
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x3a>
 8002470:	e0d8      	b.n	8002624 <__aeabi_dsub+0x1ec>
 8002472:	2001      	movs	r0, #1
 8002474:	4043      	eors	r3, r0
 8002476:	42ab      	cmp	r3, r5
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x44>
 800247a:	e0a6      	b.n	80025ca <__aeabi_dsub+0x192>
 800247c:	4660      	mov	r0, ip
 800247e:	1a35      	subs	r5, r6, r0
 8002480:	2d00      	cmp	r5, #0
 8002482:	dc00      	bgt.n	8002486 <__aeabi_dsub+0x4e>
 8002484:	e105      	b.n	8002692 <__aeabi_dsub+0x25a>
 8002486:	2800      	cmp	r0, #0
 8002488:	d110      	bne.n	80024ac <__aeabi_dsub+0x74>
 800248a:	000b      	movs	r3, r1
 800248c:	4313      	orrs	r3, r2
 800248e:	d100      	bne.n	8002492 <__aeabi_dsub+0x5a>
 8002490:	e0d7      	b.n	8002642 <__aeabi_dsub+0x20a>
 8002492:	1e6b      	subs	r3, r5, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d000      	beq.n	800249a <__aeabi_dsub+0x62>
 8002498:	e14b      	b.n	8002732 <__aeabi_dsub+0x2fa>
 800249a:	4653      	mov	r3, sl
 800249c:	1a9f      	subs	r7, r3, r2
 800249e:	45ba      	cmp	sl, r7
 80024a0:	4180      	sbcs	r0, r0
 80024a2:	1a64      	subs	r4, r4, r1
 80024a4:	4240      	negs	r0, r0
 80024a6:	1a24      	subs	r4, r4, r0
 80024a8:	2601      	movs	r6, #1
 80024aa:	e01e      	b.n	80024ea <__aeabi_dsub+0xb2>
 80024ac:	4bb3      	ldr	r3, [pc, #716]	; (800277c <__aeabi_dsub+0x344>)
 80024ae:	429e      	cmp	r6, r3
 80024b0:	d048      	beq.n	8002544 <__aeabi_dsub+0x10c>
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	4319      	orrs	r1, r3
 80024b8:	2d38      	cmp	r5, #56	; 0x38
 80024ba:	dd00      	ble.n	80024be <__aeabi_dsub+0x86>
 80024bc:	e119      	b.n	80026f2 <__aeabi_dsub+0x2ba>
 80024be:	2d1f      	cmp	r5, #31
 80024c0:	dd00      	ble.n	80024c4 <__aeabi_dsub+0x8c>
 80024c2:	e14c      	b.n	800275e <__aeabi_dsub+0x326>
 80024c4:	2320      	movs	r3, #32
 80024c6:	000f      	movs	r7, r1
 80024c8:	1b5b      	subs	r3, r3, r5
 80024ca:	0010      	movs	r0, r2
 80024cc:	409a      	lsls	r2, r3
 80024ce:	409f      	lsls	r7, r3
 80024d0:	40e8      	lsrs	r0, r5
 80024d2:	1e53      	subs	r3, r2, #1
 80024d4:	419a      	sbcs	r2, r3
 80024d6:	40e9      	lsrs	r1, r5
 80024d8:	4307      	orrs	r7, r0
 80024da:	4317      	orrs	r7, r2
 80024dc:	4653      	mov	r3, sl
 80024de:	1bdf      	subs	r7, r3, r7
 80024e0:	1a61      	subs	r1, r4, r1
 80024e2:	45ba      	cmp	sl, r7
 80024e4:	41a4      	sbcs	r4, r4
 80024e6:	4264      	negs	r4, r4
 80024e8:	1b0c      	subs	r4, r1, r4
 80024ea:	0223      	lsls	r3, r4, #8
 80024ec:	d400      	bmi.n	80024f0 <__aeabi_dsub+0xb8>
 80024ee:	e0c5      	b.n	800267c <__aeabi_dsub+0x244>
 80024f0:	0264      	lsls	r4, r4, #9
 80024f2:	0a65      	lsrs	r5, r4, #9
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0xc2>
 80024f8:	e0f6      	b.n	80026e8 <__aeabi_dsub+0x2b0>
 80024fa:	0028      	movs	r0, r5
 80024fc:	f000 fb82 	bl	8002c04 <__clzsi2>
 8002500:	0003      	movs	r3, r0
 8002502:	3b08      	subs	r3, #8
 8002504:	2b1f      	cmp	r3, #31
 8002506:	dd00      	ble.n	800250a <__aeabi_dsub+0xd2>
 8002508:	e0e9      	b.n	80026de <__aeabi_dsub+0x2a6>
 800250a:	2220      	movs	r2, #32
 800250c:	003c      	movs	r4, r7
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	409d      	lsls	r5, r3
 8002512:	40d4      	lsrs	r4, r2
 8002514:	409f      	lsls	r7, r3
 8002516:	4325      	orrs	r5, r4
 8002518:	429e      	cmp	r6, r3
 800251a:	dd00      	ble.n	800251e <__aeabi_dsub+0xe6>
 800251c:	e0db      	b.n	80026d6 <__aeabi_dsub+0x29e>
 800251e:	1b9e      	subs	r6, r3, r6
 8002520:	1c73      	adds	r3, r6, #1
 8002522:	2b1f      	cmp	r3, #31
 8002524:	dd00      	ble.n	8002528 <__aeabi_dsub+0xf0>
 8002526:	e10a      	b.n	800273e <__aeabi_dsub+0x306>
 8002528:	2220      	movs	r2, #32
 800252a:	0038      	movs	r0, r7
 800252c:	1ad2      	subs	r2, r2, r3
 800252e:	0029      	movs	r1, r5
 8002530:	4097      	lsls	r7, r2
 8002532:	002c      	movs	r4, r5
 8002534:	4091      	lsls	r1, r2
 8002536:	40d8      	lsrs	r0, r3
 8002538:	1e7a      	subs	r2, r7, #1
 800253a:	4197      	sbcs	r7, r2
 800253c:	40dc      	lsrs	r4, r3
 800253e:	2600      	movs	r6, #0
 8002540:	4301      	orrs	r1, r0
 8002542:	430f      	orrs	r7, r1
 8002544:	077b      	lsls	r3, r7, #29
 8002546:	d009      	beq.n	800255c <__aeabi_dsub+0x124>
 8002548:	230f      	movs	r3, #15
 800254a:	403b      	ands	r3, r7
 800254c:	2b04      	cmp	r3, #4
 800254e:	d005      	beq.n	800255c <__aeabi_dsub+0x124>
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	42bb      	cmp	r3, r7
 8002554:	41bf      	sbcs	r7, r7
 8002556:	427f      	negs	r7, r7
 8002558:	19e4      	adds	r4, r4, r7
 800255a:	001f      	movs	r7, r3
 800255c:	0223      	lsls	r3, r4, #8
 800255e:	d525      	bpl.n	80025ac <__aeabi_dsub+0x174>
 8002560:	4b86      	ldr	r3, [pc, #536]	; (800277c <__aeabi_dsub+0x344>)
 8002562:	3601      	adds	r6, #1
 8002564:	429e      	cmp	r6, r3
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x132>
 8002568:	e0af      	b.n	80026ca <__aeabi_dsub+0x292>
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <__aeabi_dsub+0x348>)
 800256c:	2501      	movs	r5, #1
 800256e:	401c      	ands	r4, r3
 8002570:	4643      	mov	r3, r8
 8002572:	0762      	lsls	r2, r4, #29
 8002574:	08ff      	lsrs	r7, r7, #3
 8002576:	0264      	lsls	r4, r4, #9
 8002578:	0576      	lsls	r6, r6, #21
 800257a:	4317      	orrs	r7, r2
 800257c:	0b24      	lsrs	r4, r4, #12
 800257e:	0d76      	lsrs	r6, r6, #21
 8002580:	401d      	ands	r5, r3
 8002582:	2100      	movs	r1, #0
 8002584:	0324      	lsls	r4, r4, #12
 8002586:	0b23      	lsrs	r3, r4, #12
 8002588:	0d0c      	lsrs	r4, r1, #20
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <__aeabi_dsub+0x34c>)
 800258c:	0524      	lsls	r4, r4, #20
 800258e:	431c      	orrs	r4, r3
 8002590:	4014      	ands	r4, r2
 8002592:	0533      	lsls	r3, r6, #20
 8002594:	4323      	orrs	r3, r4
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	07ed      	lsls	r5, r5, #31
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	432b      	orrs	r3, r5
 800259e:	0038      	movs	r0, r7
 80025a0:	0019      	movs	r1, r3
 80025a2:	bc1c      	pop	{r2, r3, r4}
 80025a4:	4690      	mov	r8, r2
 80025a6:	4699      	mov	r9, r3
 80025a8:	46a2      	mov	sl, r4
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ac:	2501      	movs	r5, #1
 80025ae:	4643      	mov	r3, r8
 80025b0:	0762      	lsls	r2, r4, #29
 80025b2:	08ff      	lsrs	r7, r7, #3
 80025b4:	4317      	orrs	r7, r2
 80025b6:	08e4      	lsrs	r4, r4, #3
 80025b8:	401d      	ands	r5, r3
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <__aeabi_dsub+0x344>)
 80025bc:	429e      	cmp	r6, r3
 80025be:	d036      	beq.n	800262e <__aeabi_dsub+0x1f6>
 80025c0:	0324      	lsls	r4, r4, #12
 80025c2:	0576      	lsls	r6, r6, #21
 80025c4:	0b24      	lsrs	r4, r4, #12
 80025c6:	0d76      	lsrs	r6, r6, #21
 80025c8:	e7db      	b.n	8002582 <__aeabi_dsub+0x14a>
 80025ca:	4663      	mov	r3, ip
 80025cc:	1af3      	subs	r3, r6, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	dc00      	bgt.n	80025d4 <__aeabi_dsub+0x19c>
 80025d2:	e094      	b.n	80026fe <__aeabi_dsub+0x2c6>
 80025d4:	4660      	mov	r0, ip
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d035      	beq.n	8002646 <__aeabi_dsub+0x20e>
 80025da:	4868      	ldr	r0, [pc, #416]	; (800277c <__aeabi_dsub+0x344>)
 80025dc:	4286      	cmp	r6, r0
 80025de:	d0b1      	beq.n	8002544 <__aeabi_dsub+0x10c>
 80025e0:	2780      	movs	r7, #128	; 0x80
 80025e2:	043f      	lsls	r7, r7, #16
 80025e4:	4339      	orrs	r1, r7
 80025e6:	2b38      	cmp	r3, #56	; 0x38
 80025e8:	dc00      	bgt.n	80025ec <__aeabi_dsub+0x1b4>
 80025ea:	e0fd      	b.n	80027e8 <__aeabi_dsub+0x3b0>
 80025ec:	430a      	orrs	r2, r1
 80025ee:	0017      	movs	r7, r2
 80025f0:	2100      	movs	r1, #0
 80025f2:	1e7a      	subs	r2, r7, #1
 80025f4:	4197      	sbcs	r7, r2
 80025f6:	4457      	add	r7, sl
 80025f8:	4557      	cmp	r7, sl
 80025fa:	4180      	sbcs	r0, r0
 80025fc:	1909      	adds	r1, r1, r4
 80025fe:	4244      	negs	r4, r0
 8002600:	190c      	adds	r4, r1, r4
 8002602:	0223      	lsls	r3, r4, #8
 8002604:	d53a      	bpl.n	800267c <__aeabi_dsub+0x244>
 8002606:	4b5d      	ldr	r3, [pc, #372]	; (800277c <__aeabi_dsub+0x344>)
 8002608:	3601      	adds	r6, #1
 800260a:	429e      	cmp	r6, r3
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x1d8>
 800260e:	e14b      	b.n	80028a8 <__aeabi_dsub+0x470>
 8002610:	2201      	movs	r2, #1
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <__aeabi_dsub+0x348>)
 8002614:	401c      	ands	r4, r3
 8002616:	087b      	lsrs	r3, r7, #1
 8002618:	4017      	ands	r7, r2
 800261a:	431f      	orrs	r7, r3
 800261c:	07e2      	lsls	r2, r4, #31
 800261e:	4317      	orrs	r7, r2
 8002620:	0864      	lsrs	r4, r4, #1
 8002622:	e78f      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002624:	0008      	movs	r0, r1
 8002626:	4310      	orrs	r0, r2
 8002628:	d000      	beq.n	800262c <__aeabi_dsub+0x1f4>
 800262a:	e724      	b.n	8002476 <__aeabi_dsub+0x3e>
 800262c:	e721      	b.n	8002472 <__aeabi_dsub+0x3a>
 800262e:	0023      	movs	r3, r4
 8002630:	433b      	orrs	r3, r7
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x1fe>
 8002634:	e1b9      	b.n	80029aa <__aeabi_dsub+0x572>
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	0312      	lsls	r2, r2, #12
 800263a:	4314      	orrs	r4, r2
 800263c:	0324      	lsls	r4, r4, #12
 800263e:	0b24      	lsrs	r4, r4, #12
 8002640:	e79f      	b.n	8002582 <__aeabi_dsub+0x14a>
 8002642:	002e      	movs	r6, r5
 8002644:	e77e      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002646:	0008      	movs	r0, r1
 8002648:	4310      	orrs	r0, r2
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x216>
 800264c:	e0ca      	b.n	80027e4 <__aeabi_dsub+0x3ac>
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	4684      	mov	ip, r0
 8002652:	2800      	cmp	r0, #0
 8002654:	d000      	beq.n	8002658 <__aeabi_dsub+0x220>
 8002656:	e0e7      	b.n	8002828 <__aeabi_dsub+0x3f0>
 8002658:	4452      	add	r2, sl
 800265a:	4552      	cmp	r2, sl
 800265c:	4180      	sbcs	r0, r0
 800265e:	1864      	adds	r4, r4, r1
 8002660:	4240      	negs	r0, r0
 8002662:	1824      	adds	r4, r4, r0
 8002664:	0017      	movs	r7, r2
 8002666:	2601      	movs	r6, #1
 8002668:	0223      	lsls	r3, r4, #8
 800266a:	d507      	bpl.n	800267c <__aeabi_dsub+0x244>
 800266c:	2602      	movs	r6, #2
 800266e:	e7cf      	b.n	8002610 <__aeabi_dsub+0x1d8>
 8002670:	4664      	mov	r4, ip
 8002672:	432c      	orrs	r4, r5
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x240>
 8002676:	e1b3      	b.n	80029e0 <__aeabi_dsub+0x5a8>
 8002678:	002c      	movs	r4, r5
 800267a:	4667      	mov	r7, ip
 800267c:	077b      	lsls	r3, r7, #29
 800267e:	d000      	beq.n	8002682 <__aeabi_dsub+0x24a>
 8002680:	e762      	b.n	8002548 <__aeabi_dsub+0x110>
 8002682:	0763      	lsls	r3, r4, #29
 8002684:	08ff      	lsrs	r7, r7, #3
 8002686:	431f      	orrs	r7, r3
 8002688:	2501      	movs	r5, #1
 800268a:	4643      	mov	r3, r8
 800268c:	08e4      	lsrs	r4, r4, #3
 800268e:	401d      	ands	r5, r3
 8002690:	e793      	b.n	80025ba <__aeabi_dsub+0x182>
 8002692:	2d00      	cmp	r5, #0
 8002694:	d178      	bne.n	8002788 <__aeabi_dsub+0x350>
 8002696:	1c75      	adds	r5, r6, #1
 8002698:	056d      	lsls	r5, r5, #21
 800269a:	0d6d      	lsrs	r5, r5, #21
 800269c:	2d01      	cmp	r5, #1
 800269e:	dc00      	bgt.n	80026a2 <__aeabi_dsub+0x26a>
 80026a0:	e0f2      	b.n	8002888 <__aeabi_dsub+0x450>
 80026a2:	4650      	mov	r0, sl
 80026a4:	1a80      	subs	r0, r0, r2
 80026a6:	4582      	cmp	sl, r0
 80026a8:	41bf      	sbcs	r7, r7
 80026aa:	1a65      	subs	r5, r4, r1
 80026ac:	427f      	negs	r7, r7
 80026ae:	1bed      	subs	r5, r5, r7
 80026b0:	4684      	mov	ip, r0
 80026b2:	0228      	lsls	r0, r5, #8
 80026b4:	d400      	bmi.n	80026b8 <__aeabi_dsub+0x280>
 80026b6:	e08c      	b.n	80027d2 <__aeabi_dsub+0x39a>
 80026b8:	4650      	mov	r0, sl
 80026ba:	1a17      	subs	r7, r2, r0
 80026bc:	42ba      	cmp	r2, r7
 80026be:	4192      	sbcs	r2, r2
 80026c0:	1b0c      	subs	r4, r1, r4
 80026c2:	4255      	negs	r5, r2
 80026c4:	1b65      	subs	r5, r4, r5
 80026c6:	4698      	mov	r8, r3
 80026c8:	e714      	b.n	80024f4 <__aeabi_dsub+0xbc>
 80026ca:	2501      	movs	r5, #1
 80026cc:	4643      	mov	r3, r8
 80026ce:	2400      	movs	r4, #0
 80026d0:	401d      	ands	r5, r3
 80026d2:	2700      	movs	r7, #0
 80026d4:	e755      	b.n	8002582 <__aeabi_dsub+0x14a>
 80026d6:	4c2a      	ldr	r4, [pc, #168]	; (8002780 <__aeabi_dsub+0x348>)
 80026d8:	1af6      	subs	r6, r6, r3
 80026da:	402c      	ands	r4, r5
 80026dc:	e732      	b.n	8002544 <__aeabi_dsub+0x10c>
 80026de:	003d      	movs	r5, r7
 80026e0:	3828      	subs	r0, #40	; 0x28
 80026e2:	4085      	lsls	r5, r0
 80026e4:	2700      	movs	r7, #0
 80026e6:	e717      	b.n	8002518 <__aeabi_dsub+0xe0>
 80026e8:	0038      	movs	r0, r7
 80026ea:	f000 fa8b 	bl	8002c04 <__clzsi2>
 80026ee:	3020      	adds	r0, #32
 80026f0:	e706      	b.n	8002500 <__aeabi_dsub+0xc8>
 80026f2:	430a      	orrs	r2, r1
 80026f4:	0017      	movs	r7, r2
 80026f6:	2100      	movs	r1, #0
 80026f8:	1e7a      	subs	r2, r7, #1
 80026fa:	4197      	sbcs	r7, r2
 80026fc:	e6ee      	b.n	80024dc <__aeabi_dsub+0xa4>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d000      	beq.n	8002704 <__aeabi_dsub+0x2cc>
 8002702:	e0e5      	b.n	80028d0 <__aeabi_dsub+0x498>
 8002704:	1c73      	adds	r3, r6, #1
 8002706:	469c      	mov	ip, r3
 8002708:	055b      	lsls	r3, r3, #21
 800270a:	0d5b      	lsrs	r3, r3, #21
 800270c:	2b01      	cmp	r3, #1
 800270e:	dc00      	bgt.n	8002712 <__aeabi_dsub+0x2da>
 8002710:	e09f      	b.n	8002852 <__aeabi_dsub+0x41a>
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <__aeabi_dsub+0x344>)
 8002714:	459c      	cmp	ip, r3
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0x2e2>
 8002718:	e0c5      	b.n	80028a6 <__aeabi_dsub+0x46e>
 800271a:	4452      	add	r2, sl
 800271c:	4552      	cmp	r2, sl
 800271e:	4180      	sbcs	r0, r0
 8002720:	1864      	adds	r4, r4, r1
 8002722:	4240      	negs	r0, r0
 8002724:	1824      	adds	r4, r4, r0
 8002726:	07e7      	lsls	r7, r4, #31
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	4317      	orrs	r7, r2
 800272c:	0864      	lsrs	r4, r4, #1
 800272e:	4666      	mov	r6, ip
 8002730:	e708      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002732:	4812      	ldr	r0, [pc, #72]	; (800277c <__aeabi_dsub+0x344>)
 8002734:	4285      	cmp	r5, r0
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x302>
 8002738:	e085      	b.n	8002846 <__aeabi_dsub+0x40e>
 800273a:	001d      	movs	r5, r3
 800273c:	e6bc      	b.n	80024b8 <__aeabi_dsub+0x80>
 800273e:	0029      	movs	r1, r5
 8002740:	3e1f      	subs	r6, #31
 8002742:	40f1      	lsrs	r1, r6
 8002744:	2b20      	cmp	r3, #32
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x312>
 8002748:	e07f      	b.n	800284a <__aeabi_dsub+0x412>
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	409d      	lsls	r5, r3
 8002750:	432f      	orrs	r7, r5
 8002752:	1e7d      	subs	r5, r7, #1
 8002754:	41af      	sbcs	r7, r5
 8002756:	2400      	movs	r4, #0
 8002758:	430f      	orrs	r7, r1
 800275a:	2600      	movs	r6, #0
 800275c:	e78e      	b.n	800267c <__aeabi_dsub+0x244>
 800275e:	002b      	movs	r3, r5
 8002760:	000f      	movs	r7, r1
 8002762:	3b20      	subs	r3, #32
 8002764:	40df      	lsrs	r7, r3
 8002766:	2d20      	cmp	r5, #32
 8002768:	d071      	beq.n	800284e <__aeabi_dsub+0x416>
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	1b5d      	subs	r5, r3, r5
 800276e:	40a9      	lsls	r1, r5
 8002770:	430a      	orrs	r2, r1
 8002772:	1e51      	subs	r1, r2, #1
 8002774:	418a      	sbcs	r2, r1
 8002776:	2100      	movs	r1, #0
 8002778:	4317      	orrs	r7, r2
 800277a:	e6af      	b.n	80024dc <__aeabi_dsub+0xa4>
 800277c:	000007ff 	.word	0x000007ff
 8002780:	ff7fffff 	.word	0xff7fffff
 8002784:	800fffff 	.word	0x800fffff
 8002788:	2e00      	cmp	r6, #0
 800278a:	d03e      	beq.n	800280a <__aeabi_dsub+0x3d2>
 800278c:	4eb3      	ldr	r6, [pc, #716]	; (8002a5c <__aeabi_dsub+0x624>)
 800278e:	45b4      	cmp	ip, r6
 8002790:	d045      	beq.n	800281e <__aeabi_dsub+0x3e6>
 8002792:	2680      	movs	r6, #128	; 0x80
 8002794:	0436      	lsls	r6, r6, #16
 8002796:	426d      	negs	r5, r5
 8002798:	4334      	orrs	r4, r6
 800279a:	2d38      	cmp	r5, #56	; 0x38
 800279c:	dd00      	ble.n	80027a0 <__aeabi_dsub+0x368>
 800279e:	e0a8      	b.n	80028f2 <__aeabi_dsub+0x4ba>
 80027a0:	2d1f      	cmp	r5, #31
 80027a2:	dd00      	ble.n	80027a6 <__aeabi_dsub+0x36e>
 80027a4:	e11f      	b.n	80029e6 <__aeabi_dsub+0x5ae>
 80027a6:	2620      	movs	r6, #32
 80027a8:	0027      	movs	r7, r4
 80027aa:	4650      	mov	r0, sl
 80027ac:	1b76      	subs	r6, r6, r5
 80027ae:	40b7      	lsls	r7, r6
 80027b0:	40e8      	lsrs	r0, r5
 80027b2:	4307      	orrs	r7, r0
 80027b4:	4650      	mov	r0, sl
 80027b6:	40b0      	lsls	r0, r6
 80027b8:	1e46      	subs	r6, r0, #1
 80027ba:	41b0      	sbcs	r0, r6
 80027bc:	40ec      	lsrs	r4, r5
 80027be:	4338      	orrs	r0, r7
 80027c0:	1a17      	subs	r7, r2, r0
 80027c2:	42ba      	cmp	r2, r7
 80027c4:	4192      	sbcs	r2, r2
 80027c6:	1b0c      	subs	r4, r1, r4
 80027c8:	4252      	negs	r2, r2
 80027ca:	1aa4      	subs	r4, r4, r2
 80027cc:	4666      	mov	r6, ip
 80027ce:	4698      	mov	r8, r3
 80027d0:	e68b      	b.n	80024ea <__aeabi_dsub+0xb2>
 80027d2:	4664      	mov	r4, ip
 80027d4:	4667      	mov	r7, ip
 80027d6:	432c      	orrs	r4, r5
 80027d8:	d000      	beq.n	80027dc <__aeabi_dsub+0x3a4>
 80027da:	e68b      	b.n	80024f4 <__aeabi_dsub+0xbc>
 80027dc:	2500      	movs	r5, #0
 80027de:	2600      	movs	r6, #0
 80027e0:	2700      	movs	r7, #0
 80027e2:	e6ea      	b.n	80025ba <__aeabi_dsub+0x182>
 80027e4:	001e      	movs	r6, r3
 80027e6:	e6ad      	b.n	8002544 <__aeabi_dsub+0x10c>
 80027e8:	2b1f      	cmp	r3, #31
 80027ea:	dc60      	bgt.n	80028ae <__aeabi_dsub+0x476>
 80027ec:	2720      	movs	r7, #32
 80027ee:	1af8      	subs	r0, r7, r3
 80027f0:	000f      	movs	r7, r1
 80027f2:	4684      	mov	ip, r0
 80027f4:	4087      	lsls	r7, r0
 80027f6:	0010      	movs	r0, r2
 80027f8:	40d8      	lsrs	r0, r3
 80027fa:	4307      	orrs	r7, r0
 80027fc:	4660      	mov	r0, ip
 80027fe:	4082      	lsls	r2, r0
 8002800:	1e50      	subs	r0, r2, #1
 8002802:	4182      	sbcs	r2, r0
 8002804:	40d9      	lsrs	r1, r3
 8002806:	4317      	orrs	r7, r2
 8002808:	e6f5      	b.n	80025f6 <__aeabi_dsub+0x1be>
 800280a:	0026      	movs	r6, r4
 800280c:	4650      	mov	r0, sl
 800280e:	4306      	orrs	r6, r0
 8002810:	d005      	beq.n	800281e <__aeabi_dsub+0x3e6>
 8002812:	43ed      	mvns	r5, r5
 8002814:	2d00      	cmp	r5, #0
 8002816:	d0d3      	beq.n	80027c0 <__aeabi_dsub+0x388>
 8002818:	4e90      	ldr	r6, [pc, #576]	; (8002a5c <__aeabi_dsub+0x624>)
 800281a:	45b4      	cmp	ip, r6
 800281c:	d1bd      	bne.n	800279a <__aeabi_dsub+0x362>
 800281e:	000c      	movs	r4, r1
 8002820:	0017      	movs	r7, r2
 8002822:	4666      	mov	r6, ip
 8002824:	4698      	mov	r8, r3
 8002826:	e68d      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002828:	488c      	ldr	r0, [pc, #560]	; (8002a5c <__aeabi_dsub+0x624>)
 800282a:	4283      	cmp	r3, r0
 800282c:	d00b      	beq.n	8002846 <__aeabi_dsub+0x40e>
 800282e:	4663      	mov	r3, ip
 8002830:	e6d9      	b.n	80025e6 <__aeabi_dsub+0x1ae>
 8002832:	2d00      	cmp	r5, #0
 8002834:	d000      	beq.n	8002838 <__aeabi_dsub+0x400>
 8002836:	e096      	b.n	8002966 <__aeabi_dsub+0x52e>
 8002838:	0008      	movs	r0, r1
 800283a:	4310      	orrs	r0, r2
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x408>
 800283e:	e0e2      	b.n	8002a06 <__aeabi_dsub+0x5ce>
 8002840:	000c      	movs	r4, r1
 8002842:	0017      	movs	r7, r2
 8002844:	4698      	mov	r8, r3
 8002846:	4e85      	ldr	r6, [pc, #532]	; (8002a5c <__aeabi_dsub+0x624>)
 8002848:	e67c      	b.n	8002544 <__aeabi_dsub+0x10c>
 800284a:	2500      	movs	r5, #0
 800284c:	e780      	b.n	8002750 <__aeabi_dsub+0x318>
 800284e:	2100      	movs	r1, #0
 8002850:	e78e      	b.n	8002770 <__aeabi_dsub+0x338>
 8002852:	0023      	movs	r3, r4
 8002854:	4650      	mov	r0, sl
 8002856:	4303      	orrs	r3, r0
 8002858:	2e00      	cmp	r6, #0
 800285a:	d000      	beq.n	800285e <__aeabi_dsub+0x426>
 800285c:	e0a8      	b.n	80029b0 <__aeabi_dsub+0x578>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x42c>
 8002862:	e0de      	b.n	8002a22 <__aeabi_dsub+0x5ea>
 8002864:	000b      	movs	r3, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x434>
 800286a:	e66b      	b.n	8002544 <__aeabi_dsub+0x10c>
 800286c:	4452      	add	r2, sl
 800286e:	4552      	cmp	r2, sl
 8002870:	4180      	sbcs	r0, r0
 8002872:	1864      	adds	r4, r4, r1
 8002874:	4240      	negs	r0, r0
 8002876:	1824      	adds	r4, r4, r0
 8002878:	0017      	movs	r7, r2
 800287a:	0223      	lsls	r3, r4, #8
 800287c:	d400      	bmi.n	8002880 <__aeabi_dsub+0x448>
 800287e:	e6fd      	b.n	800267c <__aeabi_dsub+0x244>
 8002880:	4b77      	ldr	r3, [pc, #476]	; (8002a60 <__aeabi_dsub+0x628>)
 8002882:	4666      	mov	r6, ip
 8002884:	401c      	ands	r4, r3
 8002886:	e65d      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002888:	0025      	movs	r5, r4
 800288a:	4650      	mov	r0, sl
 800288c:	4305      	orrs	r5, r0
 800288e:	2e00      	cmp	r6, #0
 8002890:	d1cf      	bne.n	8002832 <__aeabi_dsub+0x3fa>
 8002892:	2d00      	cmp	r5, #0
 8002894:	d14f      	bne.n	8002936 <__aeabi_dsub+0x4fe>
 8002896:	000c      	movs	r4, r1
 8002898:	4314      	orrs	r4, r2
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x466>
 800289c:	e0a0      	b.n	80029e0 <__aeabi_dsub+0x5a8>
 800289e:	000c      	movs	r4, r1
 80028a0:	0017      	movs	r7, r2
 80028a2:	4698      	mov	r8, r3
 80028a4:	e64e      	b.n	8002544 <__aeabi_dsub+0x10c>
 80028a6:	4666      	mov	r6, ip
 80028a8:	2400      	movs	r4, #0
 80028aa:	2700      	movs	r7, #0
 80028ac:	e685      	b.n	80025ba <__aeabi_dsub+0x182>
 80028ae:	001f      	movs	r7, r3
 80028b0:	0008      	movs	r0, r1
 80028b2:	3f20      	subs	r7, #32
 80028b4:	40f8      	lsrs	r0, r7
 80028b6:	0007      	movs	r7, r0
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x486>
 80028bc:	e08e      	b.n	80029dc <__aeabi_dsub+0x5a4>
 80028be:	2040      	movs	r0, #64	; 0x40
 80028c0:	1ac3      	subs	r3, r0, r3
 80028c2:	4099      	lsls	r1, r3
 80028c4:	430a      	orrs	r2, r1
 80028c6:	1e51      	subs	r1, r2, #1
 80028c8:	418a      	sbcs	r2, r1
 80028ca:	2100      	movs	r1, #0
 80028cc:	4317      	orrs	r7, r2
 80028ce:	e692      	b.n	80025f6 <__aeabi_dsub+0x1be>
 80028d0:	2e00      	cmp	r6, #0
 80028d2:	d114      	bne.n	80028fe <__aeabi_dsub+0x4c6>
 80028d4:	0026      	movs	r6, r4
 80028d6:	4650      	mov	r0, sl
 80028d8:	4306      	orrs	r6, r0
 80028da:	d062      	beq.n	80029a2 <__aeabi_dsub+0x56a>
 80028dc:	43db      	mvns	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d15c      	bne.n	800299c <__aeabi_dsub+0x564>
 80028e2:	1887      	adds	r7, r0, r2
 80028e4:	4297      	cmp	r7, r2
 80028e6:	4192      	sbcs	r2, r2
 80028e8:	1864      	adds	r4, r4, r1
 80028ea:	4252      	negs	r2, r2
 80028ec:	18a4      	adds	r4, r4, r2
 80028ee:	4666      	mov	r6, ip
 80028f0:	e687      	b.n	8002602 <__aeabi_dsub+0x1ca>
 80028f2:	4650      	mov	r0, sl
 80028f4:	4320      	orrs	r0, r4
 80028f6:	1e44      	subs	r4, r0, #1
 80028f8:	41a0      	sbcs	r0, r4
 80028fa:	2400      	movs	r4, #0
 80028fc:	e760      	b.n	80027c0 <__aeabi_dsub+0x388>
 80028fe:	4e57      	ldr	r6, [pc, #348]	; (8002a5c <__aeabi_dsub+0x624>)
 8002900:	45b4      	cmp	ip, r6
 8002902:	d04e      	beq.n	80029a2 <__aeabi_dsub+0x56a>
 8002904:	2680      	movs	r6, #128	; 0x80
 8002906:	0436      	lsls	r6, r6, #16
 8002908:	425b      	negs	r3, r3
 800290a:	4334      	orrs	r4, r6
 800290c:	2b38      	cmp	r3, #56	; 0x38
 800290e:	dd00      	ble.n	8002912 <__aeabi_dsub+0x4da>
 8002910:	e07f      	b.n	8002a12 <__aeabi_dsub+0x5da>
 8002912:	2b1f      	cmp	r3, #31
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0x4e0>
 8002916:	e08b      	b.n	8002a30 <__aeabi_dsub+0x5f8>
 8002918:	2620      	movs	r6, #32
 800291a:	0027      	movs	r7, r4
 800291c:	4650      	mov	r0, sl
 800291e:	1af6      	subs	r6, r6, r3
 8002920:	40b7      	lsls	r7, r6
 8002922:	40d8      	lsrs	r0, r3
 8002924:	4307      	orrs	r7, r0
 8002926:	4650      	mov	r0, sl
 8002928:	40b0      	lsls	r0, r6
 800292a:	1e46      	subs	r6, r0, #1
 800292c:	41b0      	sbcs	r0, r6
 800292e:	4307      	orrs	r7, r0
 8002930:	40dc      	lsrs	r4, r3
 8002932:	18bf      	adds	r7, r7, r2
 8002934:	e7d6      	b.n	80028e4 <__aeabi_dsub+0x4ac>
 8002936:	000d      	movs	r5, r1
 8002938:	4315      	orrs	r5, r2
 800293a:	d100      	bne.n	800293e <__aeabi_dsub+0x506>
 800293c:	e602      	b.n	8002544 <__aeabi_dsub+0x10c>
 800293e:	4650      	mov	r0, sl
 8002940:	1a80      	subs	r0, r0, r2
 8002942:	4582      	cmp	sl, r0
 8002944:	41bf      	sbcs	r7, r7
 8002946:	1a65      	subs	r5, r4, r1
 8002948:	427f      	negs	r7, r7
 800294a:	1bed      	subs	r5, r5, r7
 800294c:	4684      	mov	ip, r0
 800294e:	0228      	lsls	r0, r5, #8
 8002950:	d400      	bmi.n	8002954 <__aeabi_dsub+0x51c>
 8002952:	e68d      	b.n	8002670 <__aeabi_dsub+0x238>
 8002954:	4650      	mov	r0, sl
 8002956:	1a17      	subs	r7, r2, r0
 8002958:	42ba      	cmp	r2, r7
 800295a:	4192      	sbcs	r2, r2
 800295c:	1b0c      	subs	r4, r1, r4
 800295e:	4252      	negs	r2, r2
 8002960:	1aa4      	subs	r4, r4, r2
 8002962:	4698      	mov	r8, r3
 8002964:	e5ee      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002966:	000d      	movs	r5, r1
 8002968:	4315      	orrs	r5, r2
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x536>
 800296c:	e76b      	b.n	8002846 <__aeabi_dsub+0x40e>
 800296e:	4650      	mov	r0, sl
 8002970:	0767      	lsls	r7, r4, #29
 8002972:	08c0      	lsrs	r0, r0, #3
 8002974:	4307      	orrs	r7, r0
 8002976:	2080      	movs	r0, #128	; 0x80
 8002978:	08e4      	lsrs	r4, r4, #3
 800297a:	0300      	lsls	r0, r0, #12
 800297c:	4204      	tst	r4, r0
 800297e:	d007      	beq.n	8002990 <__aeabi_dsub+0x558>
 8002980:	08cd      	lsrs	r5, r1, #3
 8002982:	4205      	tst	r5, r0
 8002984:	d104      	bne.n	8002990 <__aeabi_dsub+0x558>
 8002986:	002c      	movs	r4, r5
 8002988:	4698      	mov	r8, r3
 800298a:	08d7      	lsrs	r7, r2, #3
 800298c:	0749      	lsls	r1, r1, #29
 800298e:	430f      	orrs	r7, r1
 8002990:	0f7b      	lsrs	r3, r7, #29
 8002992:	00e4      	lsls	r4, r4, #3
 8002994:	431c      	orrs	r4, r3
 8002996:	00ff      	lsls	r7, r7, #3
 8002998:	4e30      	ldr	r6, [pc, #192]	; (8002a5c <__aeabi_dsub+0x624>)
 800299a:	e5d3      	b.n	8002544 <__aeabi_dsub+0x10c>
 800299c:	4e2f      	ldr	r6, [pc, #188]	; (8002a5c <__aeabi_dsub+0x624>)
 800299e:	45b4      	cmp	ip, r6
 80029a0:	d1b4      	bne.n	800290c <__aeabi_dsub+0x4d4>
 80029a2:	000c      	movs	r4, r1
 80029a4:	0017      	movs	r7, r2
 80029a6:	4666      	mov	r6, ip
 80029a8:	e5cc      	b.n	8002544 <__aeabi_dsub+0x10c>
 80029aa:	2700      	movs	r7, #0
 80029ac:	2400      	movs	r4, #0
 80029ae:	e5e8      	b.n	8002582 <__aeabi_dsub+0x14a>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d039      	beq.n	8002a28 <__aeabi_dsub+0x5f0>
 80029b4:	000b      	movs	r3, r1
 80029b6:	4313      	orrs	r3, r2
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x584>
 80029ba:	e744      	b.n	8002846 <__aeabi_dsub+0x40e>
 80029bc:	08c0      	lsrs	r0, r0, #3
 80029be:	0767      	lsls	r7, r4, #29
 80029c0:	4307      	orrs	r7, r0
 80029c2:	2080      	movs	r0, #128	; 0x80
 80029c4:	08e4      	lsrs	r4, r4, #3
 80029c6:	0300      	lsls	r0, r0, #12
 80029c8:	4204      	tst	r4, r0
 80029ca:	d0e1      	beq.n	8002990 <__aeabi_dsub+0x558>
 80029cc:	08cb      	lsrs	r3, r1, #3
 80029ce:	4203      	tst	r3, r0
 80029d0:	d1de      	bne.n	8002990 <__aeabi_dsub+0x558>
 80029d2:	08d7      	lsrs	r7, r2, #3
 80029d4:	0749      	lsls	r1, r1, #29
 80029d6:	430f      	orrs	r7, r1
 80029d8:	001c      	movs	r4, r3
 80029da:	e7d9      	b.n	8002990 <__aeabi_dsub+0x558>
 80029dc:	2100      	movs	r1, #0
 80029de:	e771      	b.n	80028c4 <__aeabi_dsub+0x48c>
 80029e0:	2500      	movs	r5, #0
 80029e2:	2700      	movs	r7, #0
 80029e4:	e5e9      	b.n	80025ba <__aeabi_dsub+0x182>
 80029e6:	002e      	movs	r6, r5
 80029e8:	0027      	movs	r7, r4
 80029ea:	3e20      	subs	r6, #32
 80029ec:	40f7      	lsrs	r7, r6
 80029ee:	2d20      	cmp	r5, #32
 80029f0:	d02f      	beq.n	8002a52 <__aeabi_dsub+0x61a>
 80029f2:	2640      	movs	r6, #64	; 0x40
 80029f4:	1b75      	subs	r5, r6, r5
 80029f6:	40ac      	lsls	r4, r5
 80029f8:	4650      	mov	r0, sl
 80029fa:	4320      	orrs	r0, r4
 80029fc:	1e44      	subs	r4, r0, #1
 80029fe:	41a0      	sbcs	r0, r4
 8002a00:	2400      	movs	r4, #0
 8002a02:	4338      	orrs	r0, r7
 8002a04:	e6dc      	b.n	80027c0 <__aeabi_dsub+0x388>
 8002a06:	2480      	movs	r4, #128	; 0x80
 8002a08:	2500      	movs	r5, #0
 8002a0a:	0324      	lsls	r4, r4, #12
 8002a0c:	4e13      	ldr	r6, [pc, #76]	; (8002a5c <__aeabi_dsub+0x624>)
 8002a0e:	2700      	movs	r7, #0
 8002a10:	e5d3      	b.n	80025ba <__aeabi_dsub+0x182>
 8002a12:	4650      	mov	r0, sl
 8002a14:	4320      	orrs	r0, r4
 8002a16:	0007      	movs	r7, r0
 8002a18:	1e78      	subs	r0, r7, #1
 8002a1a:	4187      	sbcs	r7, r0
 8002a1c:	2400      	movs	r4, #0
 8002a1e:	18bf      	adds	r7, r7, r2
 8002a20:	e760      	b.n	80028e4 <__aeabi_dsub+0x4ac>
 8002a22:	000c      	movs	r4, r1
 8002a24:	0017      	movs	r7, r2
 8002a26:	e58d      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002a28:	000c      	movs	r4, r1
 8002a2a:	0017      	movs	r7, r2
 8002a2c:	4e0b      	ldr	r6, [pc, #44]	; (8002a5c <__aeabi_dsub+0x624>)
 8002a2e:	e589      	b.n	8002544 <__aeabi_dsub+0x10c>
 8002a30:	001e      	movs	r6, r3
 8002a32:	0027      	movs	r7, r4
 8002a34:	3e20      	subs	r6, #32
 8002a36:	40f7      	lsrs	r7, r6
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d00c      	beq.n	8002a56 <__aeabi_dsub+0x61e>
 8002a3c:	2640      	movs	r6, #64	; 0x40
 8002a3e:	1af3      	subs	r3, r6, r3
 8002a40:	409c      	lsls	r4, r3
 8002a42:	4650      	mov	r0, sl
 8002a44:	4320      	orrs	r0, r4
 8002a46:	1e44      	subs	r4, r0, #1
 8002a48:	41a0      	sbcs	r0, r4
 8002a4a:	4307      	orrs	r7, r0
 8002a4c:	2400      	movs	r4, #0
 8002a4e:	18bf      	adds	r7, r7, r2
 8002a50:	e748      	b.n	80028e4 <__aeabi_dsub+0x4ac>
 8002a52:	2400      	movs	r4, #0
 8002a54:	e7d0      	b.n	80029f8 <__aeabi_dsub+0x5c0>
 8002a56:	2400      	movs	r4, #0
 8002a58:	e7f3      	b.n	8002a42 <__aeabi_dsub+0x60a>
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	000007ff 	.word	0x000007ff
 8002a60:	ff7fffff 	.word	0xff7fffff

08002a64 <__aeabi_dcmpun>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4e0e      	ldr	r6, [pc, #56]	; (8002aa0 <__aeabi_dcmpun+0x3c>)
 8002a68:	030d      	lsls	r5, r1, #12
 8002a6a:	031c      	lsls	r4, r3, #12
 8002a6c:	0049      	lsls	r1, r1, #1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	0b2d      	lsrs	r5, r5, #12
 8002a72:	0d49      	lsrs	r1, r1, #21
 8002a74:	0b24      	lsrs	r4, r4, #12
 8002a76:	0d5b      	lsrs	r3, r3, #21
 8002a78:	42b1      	cmp	r1, r6
 8002a7a:	d004      	beq.n	8002a86 <__aeabi_dcmpun+0x22>
 8002a7c:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__aeabi_dcmpun+0x3c>)
 8002a7e:	2000      	movs	r0, #0
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d008      	beq.n	8002a96 <__aeabi_dcmpun+0x32>
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	4305      	orrs	r5, r0
 8002a88:	2001      	movs	r0, #1
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d1fa      	bne.n	8002a84 <__aeabi_dcmpun+0x20>
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <__aeabi_dcmpun+0x3c>)
 8002a90:	2000      	movs	r0, #0
 8002a92:	428b      	cmp	r3, r1
 8002a94:	d1f6      	bne.n	8002a84 <__aeabi_dcmpun+0x20>
 8002a96:	4314      	orrs	r4, r2
 8002a98:	0020      	movs	r0, r4
 8002a9a:	1e44      	subs	r4, r0, #1
 8002a9c:	41a0      	sbcs	r0, r4
 8002a9e:	e7f1      	b.n	8002a84 <__aeabi_dcmpun+0x20>
 8002aa0:	000007ff 	.word	0x000007ff

08002aa4 <__aeabi_d2iz>:
 8002aa4:	b530      	push	{r4, r5, lr}
 8002aa6:	4d13      	ldr	r5, [pc, #76]	; (8002af4 <__aeabi_d2iz+0x50>)
 8002aa8:	030a      	lsls	r2, r1, #12
 8002aaa:	004b      	lsls	r3, r1, #1
 8002aac:	0b12      	lsrs	r2, r2, #12
 8002aae:	0d5b      	lsrs	r3, r3, #21
 8002ab0:	0fc9      	lsrs	r1, r1, #31
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	42ab      	cmp	r3, r5
 8002ab6:	dd10      	ble.n	8002ada <__aeabi_d2iz+0x36>
 8002ab8:	4c0f      	ldr	r4, [pc, #60]	; (8002af8 <__aeabi_d2iz+0x54>)
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	dc0f      	bgt.n	8002ade <__aeabi_d2iz+0x3a>
 8002abe:	2480      	movs	r4, #128	; 0x80
 8002ac0:	4d0e      	ldr	r5, [pc, #56]	; (8002afc <__aeabi_d2iz+0x58>)
 8002ac2:	0364      	lsls	r4, r4, #13
 8002ac4:	4322      	orrs	r2, r4
 8002ac6:	1aed      	subs	r5, r5, r3
 8002ac8:	2d1f      	cmp	r5, #31
 8002aca:	dd0b      	ble.n	8002ae4 <__aeabi_d2iz+0x40>
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <__aeabi_d2iz+0x5c>)
 8002ace:	1ac3      	subs	r3, r0, r3
 8002ad0:	40da      	lsrs	r2, r3
 8002ad2:	4254      	negs	r4, r2
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d100      	bne.n	8002ada <__aeabi_d2iz+0x36>
 8002ad8:	0014      	movs	r4, r2
 8002ada:	0020      	movs	r0, r4
 8002adc:	bd30      	pop	{r4, r5, pc}
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <__aeabi_d2iz+0x60>)
 8002ae0:	18cc      	adds	r4, r1, r3
 8002ae2:	e7fa      	b.n	8002ada <__aeabi_d2iz+0x36>
 8002ae4:	4c08      	ldr	r4, [pc, #32]	; (8002b08 <__aeabi_d2iz+0x64>)
 8002ae6:	40e8      	lsrs	r0, r5
 8002ae8:	46a4      	mov	ip, r4
 8002aea:	4463      	add	r3, ip
 8002aec:	409a      	lsls	r2, r3
 8002aee:	4302      	orrs	r2, r0
 8002af0:	e7ef      	b.n	8002ad2 <__aeabi_d2iz+0x2e>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	000003fe 	.word	0x000003fe
 8002af8:	0000041d 	.word	0x0000041d
 8002afc:	00000433 	.word	0x00000433
 8002b00:	00000413 	.word	0x00000413
 8002b04:	7fffffff 	.word	0x7fffffff
 8002b08:	fffffbed 	.word	0xfffffbed

08002b0c <__aeabi_i2d>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d030      	beq.n	8002b74 <__aeabi_i2d+0x68>
 8002b12:	17c3      	asrs	r3, r0, #31
 8002b14:	18c4      	adds	r4, r0, r3
 8002b16:	405c      	eors	r4, r3
 8002b18:	0fc5      	lsrs	r5, r0, #31
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	f000 f872 	bl	8002c04 <__clzsi2>
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <__aeabi_i2d+0x74>)
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <__aeabi_i2d+0x78>)
 8002b24:	1a1b      	subs	r3, r3, r0
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	2a1f      	cmp	r2, #31
 8002b2a:	dd18      	ble.n	8002b5e <__aeabi_i2d+0x52>
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <__aeabi_i2d+0x7c>)
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	4094      	lsls	r4, r2
 8002b32:	2200      	movs	r2, #0
 8002b34:	0324      	lsls	r4, r4, #12
 8002b36:	055b      	lsls	r3, r3, #21
 8002b38:	0b24      	lsrs	r4, r4, #12
 8002b3a:	0d5b      	lsrs	r3, r3, #21
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	0010      	movs	r0, r2
 8002b40:	0324      	lsls	r4, r4, #12
 8002b42:	0d0a      	lsrs	r2, r1, #20
 8002b44:	0b24      	lsrs	r4, r4, #12
 8002b46:	0512      	lsls	r2, r2, #20
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	4c10      	ldr	r4, [pc, #64]	; (8002b8c <__aeabi_i2d+0x80>)
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	4022      	ands	r2, r4
 8002b50:	4313      	orrs	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	07ed      	lsls	r5, r5, #31
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	432b      	orrs	r3, r5
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	0021      	movs	r1, r4
 8002b60:	4091      	lsls	r1, r2
 8002b62:	000a      	movs	r2, r1
 8002b64:	210b      	movs	r1, #11
 8002b66:	1a08      	subs	r0, r1, r0
 8002b68:	40c4      	lsrs	r4, r0
 8002b6a:	055b      	lsls	r3, r3, #21
 8002b6c:	0324      	lsls	r4, r4, #12
 8002b6e:	0b24      	lsrs	r4, r4, #12
 8002b70:	0d5b      	lsrs	r3, r3, #21
 8002b72:	e7e3      	b.n	8002b3c <__aeabi_i2d+0x30>
 8002b74:	2500      	movs	r5, #0
 8002b76:	2300      	movs	r3, #0
 8002b78:	2400      	movs	r4, #0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	e7de      	b.n	8002b3c <__aeabi_i2d+0x30>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	0000041e 	.word	0x0000041e
 8002b84:	00000433 	.word	0x00000433
 8002b88:	00000413 	.word	0x00000413
 8002b8c:	800fffff 	.word	0x800fffff

08002b90 <__aeabi_cfrcmple>:
 8002b90:	4684      	mov	ip, r0
 8002b92:	1c08      	adds	r0, r1, #0
 8002b94:	4661      	mov	r1, ip
 8002b96:	e7ff      	b.n	8002b98 <__aeabi_cfcmpeq>

08002b98 <__aeabi_cfcmpeq>:
 8002b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b9a:	f000 f8c3 	bl	8002d24 <__lesf2>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d401      	bmi.n	8002ba6 <__aeabi_cfcmpeq+0xe>
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	42c8      	cmn	r0, r1
 8002ba6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002ba8 <__aeabi_fcmpeq>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	f000 f855 	bl	8002c58 <__eqsf2>
 8002bae:	4240      	negs	r0, r0
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	bd10      	pop	{r4, pc}

08002bb4 <__aeabi_fcmplt>:
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	f000 f8b5 	bl	8002d24 <__lesf2>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	db01      	blt.n	8002bc2 <__aeabi_fcmplt+0xe>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)

08002bc8 <__aeabi_fcmple>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	f000 f8ab 	bl	8002d24 <__lesf2>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	dd01      	ble.n	8002bd6 <__aeabi_fcmple+0xe>
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)

08002bdc <__aeabi_fcmpgt>:
 8002bdc:	b510      	push	{r4, lr}
 8002bde:	f000 f861 	bl	8002ca4 <__gesf2>
 8002be2:	2800      	cmp	r0, #0
 8002be4:	dc01      	bgt.n	8002bea <__aeabi_fcmpgt+0xe>
 8002be6:	2000      	movs	r0, #0
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	2001      	movs	r0, #1
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)

08002bf0 <__aeabi_fcmpge>:
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	f000 f857 	bl	8002ca4 <__gesf2>
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	da01      	bge.n	8002bfe <__aeabi_fcmpge+0xe>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	2001      	movs	r0, #1
 8002c00:	bd10      	pop	{r4, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)

08002c04 <__clzsi2>:
 8002c04:	211c      	movs	r1, #28
 8002c06:	2301      	movs	r3, #1
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	d301      	bcc.n	8002c12 <__clzsi2+0xe>
 8002c0e:	0c00      	lsrs	r0, r0, #16
 8002c10:	3910      	subs	r1, #16
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	4298      	cmp	r0, r3
 8002c16:	d301      	bcc.n	8002c1c <__clzsi2+0x18>
 8002c18:	0a00      	lsrs	r0, r0, #8
 8002c1a:	3908      	subs	r1, #8
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	d301      	bcc.n	8002c26 <__clzsi2+0x22>
 8002c22:	0900      	lsrs	r0, r0, #4
 8002c24:	3904      	subs	r1, #4
 8002c26:	a202      	add	r2, pc, #8	; (adr r2, 8002c30 <__clzsi2+0x2c>)
 8002c28:	5c10      	ldrb	r0, [r2, r0]
 8002c2a:	1840      	adds	r0, r0, r1
 8002c2c:	4770      	bx	lr
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	02020304 	.word	0x02020304
 8002c34:	01010101 	.word	0x01010101
	...

08002c40 <__clzdi2>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	2900      	cmp	r1, #0
 8002c44:	d103      	bne.n	8002c4e <__clzdi2+0xe>
 8002c46:	f7ff ffdd 	bl	8002c04 <__clzsi2>
 8002c4a:	3020      	adds	r0, #32
 8002c4c:	e002      	b.n	8002c54 <__clzdi2+0x14>
 8002c4e:	1c08      	adds	r0, r1, #0
 8002c50:	f7ff ffd8 	bl	8002c04 <__clzsi2>
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)

08002c58 <__eqsf2>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	0042      	lsls	r2, r0, #1
 8002c5c:	0245      	lsls	r5, r0, #9
 8002c5e:	024e      	lsls	r6, r1, #9
 8002c60:	004c      	lsls	r4, r1, #1
 8002c62:	0fc3      	lsrs	r3, r0, #31
 8002c64:	0a6d      	lsrs	r5, r5, #9
 8002c66:	0e12      	lsrs	r2, r2, #24
 8002c68:	0a76      	lsrs	r6, r6, #9
 8002c6a:	0e24      	lsrs	r4, r4, #24
 8002c6c:	0fc9      	lsrs	r1, r1, #31
 8002c6e:	2001      	movs	r0, #1
 8002c70:	2aff      	cmp	r2, #255	; 0xff
 8002c72:	d006      	beq.n	8002c82 <__eqsf2+0x2a>
 8002c74:	2cff      	cmp	r4, #255	; 0xff
 8002c76:	d003      	beq.n	8002c80 <__eqsf2+0x28>
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d101      	bne.n	8002c80 <__eqsf2+0x28>
 8002c7c:	42b5      	cmp	r5, r6
 8002c7e:	d006      	beq.n	8002c8e <__eqsf2+0x36>
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	d1fc      	bne.n	8002c80 <__eqsf2+0x28>
 8002c86:	2cff      	cmp	r4, #255	; 0xff
 8002c88:	d1fa      	bne.n	8002c80 <__eqsf2+0x28>
 8002c8a:	2e00      	cmp	r6, #0
 8002c8c:	d1f8      	bne.n	8002c80 <__eqsf2+0x28>
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	d006      	beq.n	8002ca0 <__eqsf2+0x48>
 8002c92:	2001      	movs	r0, #1
 8002c94:	2a00      	cmp	r2, #0
 8002c96:	d1f3      	bne.n	8002c80 <__eqsf2+0x28>
 8002c98:	0028      	movs	r0, r5
 8002c9a:	1e45      	subs	r5, r0, #1
 8002c9c:	41a8      	sbcs	r0, r5
 8002c9e:	e7ef      	b.n	8002c80 <__eqsf2+0x28>
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	e7ed      	b.n	8002c80 <__eqsf2+0x28>

08002ca4 <__gesf2>:
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	0042      	lsls	r2, r0, #1
 8002ca8:	0245      	lsls	r5, r0, #9
 8002caa:	024c      	lsls	r4, r1, #9
 8002cac:	0fc3      	lsrs	r3, r0, #31
 8002cae:	0048      	lsls	r0, r1, #1
 8002cb0:	0a6d      	lsrs	r5, r5, #9
 8002cb2:	0e12      	lsrs	r2, r2, #24
 8002cb4:	0a64      	lsrs	r4, r4, #9
 8002cb6:	0e00      	lsrs	r0, r0, #24
 8002cb8:	0fc9      	lsrs	r1, r1, #31
 8002cba:	2aff      	cmp	r2, #255	; 0xff
 8002cbc:	d01e      	beq.n	8002cfc <__gesf2+0x58>
 8002cbe:	28ff      	cmp	r0, #255	; 0xff
 8002cc0:	d021      	beq.n	8002d06 <__gesf2+0x62>
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d10a      	bne.n	8002cdc <__gesf2+0x38>
 8002cc6:	426e      	negs	r6, r5
 8002cc8:	416e      	adcs	r6, r5
 8002cca:	b2f6      	uxtb	r6, r6
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d10f      	bne.n	8002cf0 <__gesf2+0x4c>
 8002cd0:	2c00      	cmp	r4, #0
 8002cd2:	d10d      	bne.n	8002cf0 <__gesf2+0x4c>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	2d00      	cmp	r5, #0
 8002cd8:	d009      	beq.n	8002cee <__gesf2+0x4a>
 8002cda:	e005      	b.n	8002ce8 <__gesf2+0x44>
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d101      	bne.n	8002ce4 <__gesf2+0x40>
 8002ce0:	2c00      	cmp	r4, #0
 8002ce2:	d001      	beq.n	8002ce8 <__gesf2+0x44>
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d011      	beq.n	8002d0c <__gesf2+0x68>
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4258      	negs	r0, r3
 8002cec:	4308      	orrs	r0, r1
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	d0f7      	beq.n	8002ce4 <__gesf2+0x40>
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	3901      	subs	r1, #1
 8002cf8:	4308      	orrs	r0, r1
 8002cfa:	e7f8      	b.n	8002cee <__gesf2+0x4a>
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	d0de      	beq.n	8002cbe <__gesf2+0x1a>
 8002d00:	2002      	movs	r0, #2
 8002d02:	4240      	negs	r0, r0
 8002d04:	e7f3      	b.n	8002cee <__gesf2+0x4a>
 8002d06:	2c00      	cmp	r4, #0
 8002d08:	d0db      	beq.n	8002cc2 <__gesf2+0x1e>
 8002d0a:	e7f9      	b.n	8002d00 <__gesf2+0x5c>
 8002d0c:	4282      	cmp	r2, r0
 8002d0e:	dceb      	bgt.n	8002ce8 <__gesf2+0x44>
 8002d10:	db04      	blt.n	8002d1c <__gesf2+0x78>
 8002d12:	42a5      	cmp	r5, r4
 8002d14:	d8e8      	bhi.n	8002ce8 <__gesf2+0x44>
 8002d16:	2000      	movs	r0, #0
 8002d18:	42a5      	cmp	r5, r4
 8002d1a:	d2e8      	bcs.n	8002cee <__gesf2+0x4a>
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	4308      	orrs	r0, r1
 8002d22:	e7e4      	b.n	8002cee <__gesf2+0x4a>

08002d24 <__lesf2>:
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	0042      	lsls	r2, r0, #1
 8002d28:	024d      	lsls	r5, r1, #9
 8002d2a:	004c      	lsls	r4, r1, #1
 8002d2c:	0246      	lsls	r6, r0, #9
 8002d2e:	0a76      	lsrs	r6, r6, #9
 8002d30:	0e12      	lsrs	r2, r2, #24
 8002d32:	0fc3      	lsrs	r3, r0, #31
 8002d34:	0a6d      	lsrs	r5, r5, #9
 8002d36:	0e24      	lsrs	r4, r4, #24
 8002d38:	0fc9      	lsrs	r1, r1, #31
 8002d3a:	2aff      	cmp	r2, #255	; 0xff
 8002d3c:	d016      	beq.n	8002d6c <__lesf2+0x48>
 8002d3e:	2cff      	cmp	r4, #255	; 0xff
 8002d40:	d018      	beq.n	8002d74 <__lesf2+0x50>
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d10a      	bne.n	8002d5c <__lesf2+0x38>
 8002d46:	4270      	negs	r0, r6
 8002d48:	4170      	adcs	r0, r6
 8002d4a:	b2c0      	uxtb	r0, r0
 8002d4c:	2c00      	cmp	r4, #0
 8002d4e:	d015      	beq.n	8002d7c <__lesf2+0x58>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d005      	beq.n	8002d60 <__lesf2+0x3c>
 8002d54:	2001      	movs	r0, #1
 8002d56:	3901      	subs	r1, #1
 8002d58:	4308      	orrs	r0, r1
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5c:	2c00      	cmp	r4, #0
 8002d5e:	d013      	beq.n	8002d88 <__lesf2+0x64>
 8002d60:	4299      	cmp	r1, r3
 8002d62:	d014      	beq.n	8002d8e <__lesf2+0x6a>
 8002d64:	2001      	movs	r0, #1
 8002d66:	425b      	negs	r3, r3
 8002d68:	4318      	orrs	r0, r3
 8002d6a:	e7f6      	b.n	8002d5a <__lesf2+0x36>
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	d1f3      	bne.n	8002d5a <__lesf2+0x36>
 8002d72:	e7e4      	b.n	8002d3e <__lesf2+0x1a>
 8002d74:	2002      	movs	r0, #2
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d1ef      	bne.n	8002d5a <__lesf2+0x36>
 8002d7a:	e7e2      	b.n	8002d42 <__lesf2+0x1e>
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	d1e7      	bne.n	8002d50 <__lesf2+0x2c>
 8002d80:	2000      	movs	r0, #0
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d0e9      	beq.n	8002d5a <__lesf2+0x36>
 8002d86:	e7ed      	b.n	8002d64 <__lesf2+0x40>
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	d1e9      	bne.n	8002d60 <__lesf2+0x3c>
 8002d8c:	e7ea      	b.n	8002d64 <__lesf2+0x40>
 8002d8e:	42a2      	cmp	r2, r4
 8002d90:	dc06      	bgt.n	8002da0 <__lesf2+0x7c>
 8002d92:	dbdf      	blt.n	8002d54 <__lesf2+0x30>
 8002d94:	42ae      	cmp	r6, r5
 8002d96:	d803      	bhi.n	8002da0 <__lesf2+0x7c>
 8002d98:	2000      	movs	r0, #0
 8002d9a:	42ae      	cmp	r6, r5
 8002d9c:	d3da      	bcc.n	8002d54 <__lesf2+0x30>
 8002d9e:	e7dc      	b.n	8002d5a <__lesf2+0x36>
 8002da0:	2001      	movs	r0, #1
 8002da2:	4249      	negs	r1, r1
 8002da4:	4308      	orrs	r0, r1
 8002da6:	e7d8      	b.n	8002d5a <__lesf2+0x36>

08002da8 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_InitTick+0x44>)
{
 8002daa:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8002dac:	6819      	ldr	r1, [r3, #0]
{
 8002dae:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 8002db0:	2900      	cmp	r1, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8002db8:	20fa      	movs	r0, #250	; 0xfa
 8002dba:	0080      	lsls	r0, r0, #2
 8002dbc:	f7fd f9c8 	bl	8000150 <__udivsi3>
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_InitTick+0x48>)
 8002dc2:	0001      	movs	r1, r0
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7fd f9c3 	bl	8000150 <__udivsi3>
 8002dca:	f000 fc73 	bl	80036b4 <HAL_SYSTICK_Config>
 8002dce:	1e04      	subs	r4, r0, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	2d03      	cmp	r5, #3
 8002dd4:	d8ee      	bhi.n	8002db4 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	2001      	movs	r0, #1
 8002dda:	0029      	movs	r1, r5
 8002ddc:	4240      	negs	r0, r0
 8002dde:	f000 fc1d 	bl	800361c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <HAL_InitTick+0x4c>)
 8002de4:	0020      	movs	r0, r4
 8002de6:	601d      	str	r5, [r3, #0]
 8002de8:	e7e5      	b.n	8002db6 <HAL_InitTick+0xe>
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000410 	.word	0x20000410
 8002df4:	20000004 	.word	0x20000004

08002df8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_Init+0x24>)
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	6811      	ldr	r1, [r2, #0]
{
 8002e00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7ff ffce 	bl	8002da8 <HAL_InitTick>
 8002e0c:	1e04      	subs	r4, r0, #0
 8002e0e:	d103      	bne.n	8002e18 <HAL_Init+0x20>
  HAL_MspInit();
 8002e10:	f008 fa4a 	bl	800b2a8 <HAL_MspInit>
}
 8002e14:	0020      	movs	r0, r4
 8002e16:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002e18:	2401      	movs	r4, #1
 8002e1a:	e7fb      	b.n	8002e14 <HAL_Init+0x1c>
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_IncTick+0x10>)
 8002e22:	4904      	ldr	r1, [pc, #16]	; (8002e34 <HAL_IncTick+0x14>)
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	6809      	ldr	r1, [r1, #0]
 8002e28:	185b      	adds	r3, r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	4770      	bx	lr
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20000a38 	.word	0x20000a38
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <HAL_GetTick+0x8>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
}
 8002e3c:	4770      	bx	lr
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000a38 	.word	0x20000a38

08002e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff fff6 	bl	8002e38 <HAL_GetTick>
 8002e4c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	1c63      	adds	r3, r4, #1
 8002e50:	d002      	beq.n	8002e58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_Delay+0x20>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e58:	f7ff ffee 	bl	8002e38 <HAL_GetTick>
 8002e5c:	1b40      	subs	r0, r0, r5
 8002e5e:	4284      	cmp	r4, r0
 8002e60:	d8fa      	bhi.n	8002e58 <HAL_Delay+0x14>
  {
  }
}
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	20000000 	.word	0x20000000

08002e68 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e68:	6880      	ldr	r0, [r0, #8]
 8002e6a:	0740      	lsls	r0, r0, #29
 8002e6c:	0fc0      	lsrs	r0, r0, #31
}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e70:	2300      	movs	r3, #0
{
 8002e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e74:	b085      	sub	sp, #20
 8002e76:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8002e7a:	2501      	movs	r5, #1
  if(hadc == NULL)
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	d100      	bne.n	8002e82 <HAL_ADC_Init+0x12>
 8002e80:	e09a      	b.n	8002fb8 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002e84:	429d      	cmp	r5, r3
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e88:	f004 f8b4 	bl	8006ff4 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002e92:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e94:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	6826      	ldr	r6, [r4, #0]
 8002e98:	055b      	lsls	r3, r3, #21
 8002e9a:	68b2      	ldr	r2, [r6, #8]
 8002e9c:	421a      	tst	r2, r3
 8002e9e:	d100      	bne.n	8002ea2 <HAL_ADC_Init+0x32>
 8002ea0:	e0d0      	b.n	8003044 <HAL_ADC_Init+0x1d4>
 8002ea2:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	d400      	bmi.n	8002eac <HAL_ADC_Init+0x3c>
 8002eaa:	e0d8      	b.n	800305e <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eac:	0030      	movs	r0, r6
 8002eae:	f7ff ffdb 	bl	8002e68 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8002eb6:	401e      	ands	r6, r3
 8002eb8:	d000      	beq.n	8002ebc <HAL_ADC_Init+0x4c>
 8002eba:	e0be      	b.n	800303a <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d000      	beq.n	8002ec2 <HAL_ADC_Init+0x52>
 8002ec0:	e0bb      	b.n	800303a <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ec4:	4a7c      	ldr	r2, [pc, #496]	; (80030b8 <HAL_ADC_Init+0x248>)
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	2302      	movs	r3, #2
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ece:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	07d2      	lsls	r2, r2, #31
 8002ed4:	d400      	bmi.n	8002ed8 <HAL_ADC_Init+0x68>
 8002ed6:	e0cb      	b.n	8003070 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ed8:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eda:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002edc:	1e78      	subs	r0, r7, #1
 8002ede:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ee0:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ee2:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ee4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee6:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ee8:	9001      	str	r0, [sp, #4]
 8002eea:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eec:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002eee:	7ea2      	ldrb	r2, [r4, #26]
 8002ef0:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002ef2:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	0352      	lsls	r2, r2, #13
 8002ef8:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002efa:	2800      	cmp	r0, #0
 8002efc:	da66      	bge.n	8002fcc <HAL_ADC_Init+0x15c>
 8002efe:	0047      	lsls	r7, r0, #1
 8002f00:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002f02:	0022      	movs	r2, r4
 8002f04:	322c      	adds	r2, #44	; 0x2c
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	9901      	ldr	r1, [sp, #4]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	4317      	orrs	r7, r2
 8002f12:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f14:	1c62      	adds	r2, r4, #1
 8002f16:	7fd2      	ldrb	r2, [r2, #31]
 8002f18:	2a01      	cmp	r2, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f1c:	4661      	mov	r1, ip
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d157      	bne.n	8002fd2 <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	0039      	movs	r1, r7
 8002f26:	0252      	lsls	r2, r2, #9
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f32:	21e0      	movs	r1, #224	; 0xe0
 8002f34:	0049      	lsls	r1, r1, #1
 8002f36:	400a      	ands	r2, r1
 8002f38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	9901      	ldr	r1, [sp, #4]
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8002f42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f46:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8002f48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f4a:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8002f4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002f4e:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8002f50:	0021      	movs	r1, r4
 8002f52:	313c      	adds	r1, #60	; 0x3c
 8002f54:	7809      	ldrb	r1, [r1, #0]
 8002f56:	2901      	cmp	r1, #1
 8002f58:	d100      	bne.n	8002f5c <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8002f5a:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	4f57      	ldr	r7, [pc, #348]	; (80030bc <HAL_ADC_Init+0x24c>)
 8002f60:	4039      	ands	r1, r7
 8002f62:	9f01      	ldr	r7, [sp, #4]
 8002f64:	4339      	orrs	r1, r7
 8002f66:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	4f55      	ldr	r7, [pc, #340]	; (80030c0 <HAL_ADC_Init+0x250>)
 8002f6c:	4039      	ands	r1, r7
 8002f6e:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8002f70:	2107      	movs	r1, #7
 8002f72:	2770      	movs	r7, #112	; 0x70
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	438a      	bics	r2, r1
 8002f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	615a      	str	r2, [r3, #20]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f84:	43ba      	bics	r2, r7
 8002f86:	0109      	lsls	r1, r1, #4
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d12a      	bne.n	8002fe6 <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002f90:	2210      	movs	r2, #16
 8002f92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f94:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002f96:	430a      	orrs	r2, r1
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f9a:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_ADC_Init+0x254>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	9a01      	ldr	r2, [sp, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d13d      	bne.n	8003022 <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa6:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002faa:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fae:	4393      	bics	r3, r2
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002fb8:	0028      	movs	r0, r5
 8002fba:	b005      	add	sp, #20
 8002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 8002fbe:	9b03      	ldr	r3, [sp, #12]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 8002fc4:	9b03      	ldr	r3, [sp, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_Init+0x14e>
 8002fca:	e76a      	b.n	8002ea2 <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002fcc:	2780      	movs	r7, #128	; 0x80
 8002fce:	03bf      	lsls	r7, r7, #14
 8002fd0:	e797      	b.n	8002f02 <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002fd4:	468c      	mov	ip, r1
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	4667      	mov	r7, ip
 8002fda:	4339      	orrs	r1, r7
 8002fdc:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002fe4:	e7a2      	b.n	8002f2c <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0392      	lsls	r2, r2, #14
 8002fea:	4290      	cmp	r0, r2
 8002fec:	d1d5      	bne.n	8002f9a <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002fee:	200f      	movs	r0, #15
 8002ff0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002ff2:	000f      	movs	r7, r1
 8002ff4:	00b2      	lsls	r2, r6, #2
 8002ff6:	40d7      	lsrs	r7, r2
 8002ff8:	003a      	movs	r2, r7
 8002ffa:	4002      	ands	r2, r0
 8002ffc:	2a0f      	cmp	r2, #15
 8002ffe:	d00d      	beq.n	800301c <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003000:	3601      	adds	r6, #1
 8003002:	2e08      	cmp	r6, #8
 8003004:	d1f5      	bne.n	8002ff2 <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003006:	4830      	ldr	r0, [pc, #192]	; (80030c8 <HAL_ADC_Init+0x258>)
 8003008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300a:	69e2      	ldr	r2, [r4, #28]
 800300c:	1812      	adds	r2, r2, r0
 800300e:	201c      	movs	r0, #28
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4002      	ands	r2, r0
 8003014:	382c      	subs	r0, #44	; 0x2c
 8003016:	4090      	lsls	r0, r2
 8003018:	0002      	movs	r2, r0
 800301a:	e7bc      	b.n	8002f96 <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 800301c:	2e01      	cmp	r6, #1
 800301e:	d0b7      	beq.n	8002f90 <HAL_ADC_Init+0x120>
 8003020:	e7f1      	b.n	8003006 <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8003022:	2212      	movs	r2, #18
 8003024:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003028:	4393      	bics	r3, r2
 800302a:	001a      	movs	r2, r3
 800302c:	2310      	movs	r3, #16
 800302e:	4313      	orrs	r3, r2
 8003030:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003034:	432b      	orrs	r3, r5
 8003036:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003038:	e7be      	b.n	8002fb8 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800303c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	4313      	orrs	r3, r2
 8003040:	65a3      	str	r3, [r4, #88]	; 0x58
 8003042:	e7b9      	b.n	8002fb8 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 8003044:	68b2      	ldr	r2, [r6, #8]
 8003046:	4921      	ldr	r1, [pc, #132]	; (80030cc <HAL_ADC_Init+0x25c>)
 8003048:	400a      	ands	r2, r1
 800304a:	4313      	orrs	r3, r2
 800304c:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_ADC_Init+0x260>)
 8003050:	4920      	ldr	r1, [pc, #128]	; (80030d4 <HAL_ADC_Init+0x264>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	f7fd f87c 	bl	8000150 <__udivsi3>
 8003058:	0040      	lsls	r0, r0, #1
 800305a:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 800305c:	e7b2      	b.n	8002fc4 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003060:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003064:	4313      	orrs	r3, r2
 8003066:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800306a:	432b      	orrs	r3, r5
 800306c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800306e:	e71d      	b.n	8002eac <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8003070:	2118      	movs	r1, #24
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	438a      	bics	r2, r1
 8003076:	68a1      	ldr	r1, [r4, #8]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800307c:	6861      	ldr	r1, [r4, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	0f88      	lsrs	r0, r1, #30
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	0780      	lsls	r0, r0, #30
 8003086:	0892      	lsrs	r2, r2, #2
 8003088:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800308a:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800308c:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800308e:	004a      	lsls	r2, r1, #1
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	05c0      	lsls	r0, r0, #23
 8003094:	4282      	cmp	r2, r0
 8003096:	d100      	bne.n	800309a <HAL_ADC_Init+0x22a>
 8003098:	e71e      	b.n	8002ed8 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	0612      	lsls	r2, r2, #24
 800309e:	4291      	cmp	r1, r2
 80030a0:	d100      	bne.n	80030a4 <HAL_ADC_Init+0x234>
 80030a2:	e719      	b.n	8002ed8 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80030a4:	480c      	ldr	r0, [pc, #48]	; (80030d8 <HAL_ADC_Init+0x268>)
 80030a6:	4f0d      	ldr	r7, [pc, #52]	; (80030dc <HAL_ADC_Init+0x26c>)
 80030a8:	6802      	ldr	r2, [r0, #0]
 80030aa:	403a      	ands	r2, r7
 80030ac:	27f0      	movs	r7, #240	; 0xf0
 80030ae:	03bf      	lsls	r7, r7, #14
 80030b0:	4039      	ands	r1, r7
 80030b2:	430a      	orrs	r2, r1
 80030b4:	6002      	str	r2, [r0, #0]
 80030b6:	e70f      	b.n	8002ed8 <HAL_ADC_Init+0x68>
 80030b8:	fffffefd 	.word	0xfffffefd
 80030bc:	fffe0219 	.word	0xfffe0219
 80030c0:	dffffc02 	.word	0xdffffc02
 80030c4:	833fffe7 	.word	0x833fffe7
 80030c8:	3fffffff 	.word	0x3fffffff
 80030cc:	6fffffe8 	.word	0x6fffffe8
 80030d0:	20000410 	.word	0x20000410
 80030d4:	00030d40 	.word	0x00030d40
 80030d8:	40012708 	.word	0x40012708
 80030dc:	ffc3ffff 	.word	0xffc3ffff

080030e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030e2:	6945      	ldr	r5, [r0, #20]
{
 80030e4:	0004      	movs	r4, r0
 80030e6:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030e8:	2d08      	cmp	r5, #8
 80030ea:	d00a      	beq.n	8003102 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80030ec:	6803      	ldr	r3, [r0, #0]
 80030ee:	2001      	movs	r0, #1
 80030f0:	68db      	ldr	r3, [r3, #12]
      
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80030f2:	2504      	movs	r5, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80030f4:	4203      	tst	r3, r0
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	2320      	movs	r3, #32
 80030fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80030fc:	4313      	orrs	r3, r2
 80030fe:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }
  
  /* Return function status */
  return HAL_OK;
}
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003102:	f7ff fe99 	bl	8002e38 <HAL_GetTick>
 8003106:	0007      	movs	r7, r0
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	422b      	tst	r3, r5
 800310e:	d026      	beq.n	800315e <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4313      	orrs	r3, r2
 8003118:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	68c2      	ldr	r2, [r0, #12]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	421a      	tst	r2, r3
 8003122:	d114      	bne.n	800314e <HAL_ADC_PollForConversion+0x6e>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8003124:	7ea3      	ldrb	r3, [r4, #26]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <HAL_ADC_PollForConversion+0x6e>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800312a:	6803      	ldr	r3, [r0, #0]
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	d50e      	bpl.n	800314e <HAL_ADC_PollForConversion+0x6e>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003130:	f7ff fe9a 	bl	8002e68 <LL_ADC_REG_IsConversionOngoing>
 8003134:	2800      	cmp	r0, #0
 8003136:	d124      	bne.n	8003182 <HAL_ADC_PollForConversion+0xa2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003138:	210c      	movs	r1, #12
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6853      	ldr	r3, [r2, #4]
 800313e:	438b      	bics	r3, r1
 8003140:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003144:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_ADC_PollForConversion+0xb4>)
 8003146:	401a      	ands	r2, r3
 8003148:	2301      	movs	r3, #1
 800314a:	4313      	orrs	r3, r2
 800314c:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800314e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003150:	7e23      	ldrb	r3, [r4, #24]
 8003152:	4283      	cmp	r3, r0
 8003154:	d1d4      	bne.n	8003100 <HAL_ADC_PollForConversion+0x20>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003156:	220c      	movs	r2, #12
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e7d0      	b.n	8003100 <HAL_ADC_PollForConversion+0x20>
    if(Timeout != HAL_MAX_DELAY)
 800315e:	1c73      	adds	r3, r6, #1
 8003160:	d0d3      	beq.n	800310a <HAL_ADC_PollForConversion+0x2a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003162:	f7ff fe69 	bl	8002e38 <HAL_GetTick>
 8003166:	1bc0      	subs	r0, r0, r7
 8003168:	4286      	cmp	r6, r0
 800316a:	d301      	bcc.n	8003170 <HAL_ADC_PollForConversion+0x90>
 800316c:	2e00      	cmp	r6, #0
 800316e:	d1cb      	bne.n	8003108 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003170:	2304      	movs	r3, #4
 8003172:	6da2      	ldr	r2, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8003174:	3454      	adds	r4, #84	; 0x54
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003176:	4313      	orrs	r3, r2
 8003178:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800317a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800317c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800317e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003180:	e7be      	b.n	8003100 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003182:	2320      	movs	r3, #32
 8003184:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003186:	4313      	orrs	r3, r2
 8003188:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	2301      	movs	r3, #1
 800318c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800318e:	4313      	orrs	r3, r2
 8003190:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003192:	e7dc      	b.n	800314e <HAL_ADC_PollForConversion+0x6e>
 8003194:	fffffefe 	.word	0xfffffefe

08003198 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003198:	6803      	ldr	r3, [r0, #0]
 800319a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800319c:	4770      	bx	lr

0800319e <HAL_ADC_LevelOutOfWindowCallback>:
 800319e:	4770      	bx	lr

080031a0 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_ADC_IRQHandler>:
{
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031a6:	6803      	ldr	r3, [r0, #0]
{
 80031a8:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031aa:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031ac:	685e      	ldr	r6, [r3, #4]
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031ae:	2302      	movs	r3, #2
 80031b0:	421d      	tst	r5, r3
 80031b2:	d00f      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x30>
 80031b4:	421e      	tst	r6, r3
 80031b6:	d00d      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x30>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031ba:	06db      	lsls	r3, r3, #27
 80031bc:	d404      	bmi.n	80031c8 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	4313      	orrs	r3, r2
 80031c6:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031c8:	0020      	movs	r0, r4
 80031ca:	f000 fa25 	bl	8003618 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 80031ce:	2202      	movs	r2, #2
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	601a      	str	r2, [r3, #0]
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031d4:	2304      	movs	r3, #4
 80031d6:	421d      	tst	r5, r3
 80031d8:	d001      	beq.n	80031de <HAL_ADC_IRQHandler+0x3a>
 80031da:	421e      	tst	r6, r3
 80031dc:	d104      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x44>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80031de:	2308      	movs	r3, #8
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031e0:	421d      	tst	r5, r3
 80031e2:	d02a      	beq.n	800323a <HAL_ADC_IRQHandler+0x96>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 80031e4:	421e      	tst	r6, r3
 80031e6:	d028      	beq.n	800323a <HAL_ADC_IRQHandler+0x96>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031ea:	06db      	lsls	r3, r3, #27
 80031ec:	d404      	bmi.n	80031f8 <HAL_ADC_IRQHandler+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4313      	orrs	r3, r2
 80031f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80031f8:	23c0      	movs	r3, #192	; 0xc0
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	68c2      	ldr	r2, [r0, #12]
 8003200:	421a      	tst	r2, r3
 8003202:	d114      	bne.n	800322e <HAL_ADC_IRQHandler+0x8a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8003204:	7ea3      	ldrb	r3, [r4, #26]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d111      	bne.n	800322e <HAL_ADC_IRQHandler+0x8a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	071b      	lsls	r3, r3, #28
 800320e:	d50e      	bpl.n	800322e <HAL_ADC_IRQHandler+0x8a>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003210:	f7ff fe2a 	bl	8002e68 <LL_ADC_REG_IsConversionOngoing>
 8003214:	2800      	cmp	r0, #0
 8003216:	d15a      	bne.n	80032ce <HAL_ADC_IRQHandler+0x12a>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003218:	210c      	movs	r1, #12
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	6853      	ldr	r3, [r2, #4]
 800321e:	438b      	bics	r3, r1
 8003220:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003224:	4a35      	ldr	r2, [pc, #212]	; (80032fc <HAL_ADC_IRQHandler+0x158>)
 8003226:	401a      	ands	r2, r3
 8003228:	2301      	movs	r3, #1
 800322a:	4313      	orrs	r3, r2
 800322c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800322e:	0020      	movs	r0, r4
 8003230:	f005 fb1b 	bl	800886a <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003234:	220c      	movs	r2, #12
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 800323a:	2780      	movs	r7, #128	; 0x80
 800323c:	423d      	tst	r5, r7
 800323e:	d00b      	beq.n	8003258 <HAL_ADC_IRQHandler+0xb4>
 8003240:	423e      	tst	r6, r7
 8003242:	d009      	beq.n	8003258 <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	4313      	orrs	r3, r2
 800324c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800324e:	0020      	movs	r0, r4
 8003250:	f7ff ffa5 	bl	800319e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 8003258:	2780      	movs	r7, #128	; 0x80
 800325a:	007f      	lsls	r7, r7, #1
 800325c:	423d      	tst	r5, r7
 800325e:	d00b      	beq.n	8003278 <HAL_ADC_IRQHandler+0xd4>
 8003260:	423e      	tst	r6, r7
 8003262:	d009      	beq.n	8003278 <HAL_ADC_IRQHandler+0xd4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	4313      	orrs	r3, r2
 800326c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800326e:	0020      	movs	r0, r4
 8003270:	f000 f9d0 	bl	8003614 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 8003278:	2780      	movs	r7, #128	; 0x80
 800327a:	00bf      	lsls	r7, r7, #2
 800327c:	423d      	tst	r5, r7
 800327e:	d00b      	beq.n	8003298 <HAL_ADC_IRQHandler+0xf4>
 8003280:	423e      	tst	r6, r7
 8003282:	d009      	beq.n	8003298 <HAL_ADC_IRQHandler+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003288:	02db      	lsls	r3, r3, #11
 800328a:	4313      	orrs	r3, r2
 800328c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800328e:	0020      	movs	r0, r4
 8003290:	f000 f9c1 	bl	8003616 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	601f      	str	r7, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 8003298:	2310      	movs	r3, #16
 800329a:	421d      	tst	r5, r3
 800329c:	d00b      	beq.n	80032b6 <HAL_ADC_IRQHandler+0x112>
 800329e:	421e      	tst	r6, r3
 80032a0:	d009      	beq.n	80032b6 <HAL_ADC_IRQHandler+0x112>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x13c>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80032a8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	079b      	lsls	r3, r3, #30
 80032ae:	d117      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x13c>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032b0:	2210      	movs	r2, #16
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80032b6:	2780      	movs	r7, #128	; 0x80
 80032b8:	01bf      	lsls	r7, r7, #6
 80032ba:	423d      	tst	r5, r7
 80032bc:	d006      	beq.n	80032cc <HAL_ADC_IRQHandler+0x128>
 80032be:	423e      	tst	r6, r7
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_IRQHandler+0x128>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80032c2:	0020      	movs	r0, r4
 80032c4:	f000 f9a9 	bl	800361a <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	601f      	str	r7, [r3, #0]
}
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ce:	2320      	movs	r3, #32
 80032d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80032d2:	4313      	orrs	r3, r2
 80032d4:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	2301      	movs	r3, #1
 80032d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032da:	4313      	orrs	r3, r2
 80032dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80032de:	e7a6      	b.n	800322e <HAL_ADC_IRQHandler+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032ea:	2302      	movs	r3, #2
 80032ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80032ee:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032f0:	4313      	orrs	r3, r2
 80032f2:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 80032f4:	f7ff ff54 	bl	80031a0 <HAL_ADC_ErrorCallback>
 80032f8:	e7da      	b.n	80032b0 <HAL_ADC_IRQHandler+0x10c>
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	fffffefe 	.word	0xfffffefe

08003300 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003300:	2300      	movs	r3, #0
{
 8003302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003304:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 8003306:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	0003      	movs	r3, r0
 800330a:	3354      	adds	r3, #84	; 0x54
 800330c:	781a      	ldrb	r2, [r3, #0]
{
 800330e:	0005      	movs	r5, r0
 8003310:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 8003312:	2402      	movs	r4, #2
 8003314:	2a01      	cmp	r2, #1
 8003316:	d100      	bne.n	800331a <HAL_ADC_ConfigChannel+0x1a>
 8003318:	e0c1      	b.n	800349e <HAL_ADC_ConfigChannel+0x19e>
 800331a:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 800331e:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003320:	f7ff fda2 	bl	8002e68 <LL_ADC_REG_IsConversionOngoing>
 8003324:	9003      	str	r0, [sp, #12]
 8003326:	2800      	cmp	r0, #0
 8003328:	d000      	beq.n	800332c <HAL_ADC_ConfigChannel+0x2c>
 800332a:	e0ef      	b.n	800350c <HAL_ADC_ConfigChannel+0x20c>
 800332c:	2204      	movs	r2, #4
 800332e:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4694      	mov	ip, r2
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	9801      	ldr	r0, [sp, #4]
 8003338:	692b      	ldr	r3, [r5, #16]
 800333a:	0609      	lsls	r1, r1, #24
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	42a0      	cmp	r0, r4
 8003340:	d100      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x44>
 8003342:	e0b6      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003344:	4660      	mov	r0, ip
 8003346:	4383      	bics	r3, r0
 8003348:	428b      	cmp	r3, r1
 800334a:	d113      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800334c:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800334e:	0353      	lsls	r3, r2, #13
 8003350:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003352:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8003354:	4303      	orrs	r3, r0
 8003356:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003358:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	496e      	ldr	r1, [pc, #440]	; (8003518 <HAL_ADC_ConfigChannel+0x218>)
 800335e:	6944      	ldr	r4, [r0, #20]
 8003360:	4019      	ands	r1, r3
 8003362:	4061      	eors	r1, r4
 8003364:	0213      	lsls	r3, r2, #8
 8003366:	400b      	ands	r3, r1
 8003368:	4063      	eors	r3, r4
 800336a:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800336c:	2a00      	cmp	r2, #0
 800336e:	db65      	blt.n	800343c <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	2400      	movs	r4, #0
 8003372:	e091      	b.n	8003498 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003374:	211f      	movs	r1, #31
 8003376:	9b01      	ldr	r3, [sp, #4]
 8003378:	400b      	ands	r3, r1
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	230f      	movs	r3, #15
 800337e:	9802      	ldr	r0, [sp, #8]
 8003380:	4083      	lsls	r3, r0
 8003382:	43db      	mvns	r3, r3
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	9804      	ldr	r0, [sp, #16]
 8003388:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800338a:	4003      	ands	r3, r0
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	0350      	lsls	r0, r2, #13
 8003390:	0013      	movs	r3, r2
 8003392:	2800      	cmp	r0, #0
 8003394:	d115      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0xc2>
 8003396:	0e90      	lsrs	r0, r2, #26
 8003398:	4008      	ands	r0, r1
 800339a:	9902      	ldr	r1, [sp, #8]
 800339c:	4088      	lsls	r0, r1
 800339e:	9905      	ldr	r1, [sp, #20]
 80033a0:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033a2:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80033a4:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033a6:	0889      	lsrs	r1, r1, #2
 80033a8:	69e8      	ldr	r0, [r5, #28]
 80033aa:	3101      	adds	r1, #1
 80033ac:	4281      	cmp	r1, r0
 80033ae:	d8d3      	bhi.n	8003358 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 80033b0:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033b2:	6829      	ldr	r1, [r5, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80033ba:	40a3      	lsls	r3, r4
 80033bc:	9c04      	ldr	r4, [sp, #16]
 80033be:	4020      	ands	r0, r4
 80033c0:	e7c8      	b.n	8003354 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80033c2:	9803      	ldr	r0, [sp, #12]
 80033c4:	4232      	tst	r2, r6
 80033c6:	d1e8      	bne.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033c8:	0030      	movs	r0, r6
 80033ca:	4222      	tst	r2, r4
 80033cc:	d1e5      	bne.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033ce:	4661      	mov	r1, ip
 80033d0:	0020      	movs	r0, r4
 80033d2:	420a      	tst	r2, r1
 80033d4:	d1e1      	bne.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033d6:	2003      	movs	r0, #3
 80033d8:	0711      	lsls	r1, r2, #28
 80033da:	d4de      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033dc:	4660      	mov	r0, ip
 80033de:	06d1      	lsls	r1, r2, #27
 80033e0:	d4db      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033e2:	2005      	movs	r0, #5
 80033e4:	0691      	lsls	r1, r2, #26
 80033e6:	d4d8      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033e8:	3001      	adds	r0, #1
 80033ea:	0651      	lsls	r1, r2, #25
 80033ec:	d4d5      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033ee:	3001      	adds	r0, #1
 80033f0:	0611      	lsls	r1, r2, #24
 80033f2:	d4d2      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033f4:	3001      	adds	r0, #1
 80033f6:	05d1      	lsls	r1, r2, #23
 80033f8:	d4cf      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 80033fa:	3001      	adds	r0, #1
 80033fc:	0591      	lsls	r1, r2, #22
 80033fe:	d4cc      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003400:	3001      	adds	r0, #1
 8003402:	0551      	lsls	r1, r2, #21
 8003404:	d4c9      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003406:	3001      	adds	r0, #1
 8003408:	0511      	lsls	r1, r2, #20
 800340a:	d4c6      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 800340c:	3001      	adds	r0, #1
 800340e:	04d1      	lsls	r1, r2, #19
 8003410:	d4c3      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003412:	3001      	adds	r0, #1
 8003414:	0491      	lsls	r1, r2, #18
 8003416:	d4c0      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003418:	3001      	adds	r0, #1
 800341a:	0451      	lsls	r1, r2, #17
 800341c:	d4bd      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 800341e:	3001      	adds	r0, #1
 8003420:	0411      	lsls	r1, r2, #16
 8003422:	d4ba      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003424:	3001      	adds	r0, #1
 8003426:	03d1      	lsls	r1, r2, #15
 8003428:	d4b7      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 800342a:	3001      	adds	r0, #1
 800342c:	0391      	lsls	r1, r2, #14
 800342e:	d4b4      	bmi.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003430:	2080      	movs	r0, #128	; 0x80
 8003432:	02c0      	lsls	r0, r0, #11
 8003434:	4010      	ands	r0, r2
 8003436:	d0b0      	beq.n	800339a <HAL_ADC_ConfigChannel+0x9a>
 8003438:	2012      	movs	r0, #18
 800343a:	e7ae      	b.n	800339a <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800343c:	21e0      	movs	r1, #224	; 0xe0
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003440:	4837      	ldr	r0, [pc, #220]	; (8003520 <HAL_ADC_ConfigChannel+0x220>)
 8003442:	681c      	ldr	r4, [r3, #0]
 8003444:	0449      	lsls	r1, r1, #17
 8003446:	4021      	ands	r1, r4
 8003448:	4282      	cmp	r2, r0
 800344a:	d117      	bne.n	800347c <HAL_ADC_ConfigChannel+0x17c>
 800344c:	2080      	movs	r0, #128	; 0x80
 800344e:	0400      	lsls	r0, r0, #16
 8003450:	4204      	tst	r4, r0
 8003452:	d18d      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4c33      	ldr	r4, [pc, #204]	; (8003524 <HAL_ADC_ConfigChannel+0x224>)
 8003458:	4022      	ands	r2, r4
 800345a:	430a      	orrs	r2, r1
 800345c:	4302      	orrs	r2, r0
 800345e:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_ADC_ConfigChannel+0x228>)
 8003462:	4932      	ldr	r1, [pc, #200]	; (800352c <HAL_ADC_ConfigChannel+0x22c>)
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f7fc fe73 	bl	8000150 <__udivsi3>
 800346a:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 800346c:	9b07      	ldr	r3, [sp, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d100      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x174>
 8003472:	e77d      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8003474:	9b07      	ldr	r3, [sp, #28]
 8003476:	3b01      	subs	r3, #1
 8003478:	9307      	str	r3, [sp, #28]
 800347a:	e7f7      	b.n	800346c <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347c:	482c      	ldr	r0, [pc, #176]	; (8003530 <HAL_ADC_ConfigChannel+0x230>)
 800347e:	4282      	cmp	r2, r0
 8003480:	d110      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1a4>
 8003482:	2080      	movs	r0, #128	; 0x80
 8003484:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003486:	4004      	ands	r4, r0
 8003488:	d000      	beq.n	800348c <HAL_ADC_ConfigChannel+0x18c>
 800348a:	e771      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4e25      	ldr	r6, [pc, #148]	; (8003524 <HAL_ADC_ConfigChannel+0x224>)
 8003490:	4032      	ands	r2, r6
 8003492:	430a      	orrs	r2, r1
 8003494:	4302      	orrs	r2, r0
 8003496:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003498:	2300      	movs	r3, #0
 800349a:	3554      	adds	r5, #84	; 0x54
 800349c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800349e:	0020      	movs	r0, r4
 80034a0:	b009      	add	sp, #36	; 0x24
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a4:	4823      	ldr	r0, [pc, #140]	; (8003534 <HAL_ADC_ConfigChannel+0x234>)
 80034a6:	4282      	cmp	r2, r0
 80034a8:	d000      	beq.n	80034ac <HAL_ADC_ConfigChannel+0x1ac>
 80034aa:	e761      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
 80034ac:	2080      	movs	r0, #128	; 0x80
 80034ae:	03c0      	lsls	r0, r0, #15
 80034b0:	e7e9      	b.n	8003486 <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034b2:	4660      	mov	r0, ip
 80034b4:	4383      	bics	r3, r0
 80034b6:	428b      	cmp	r3, r1
 80034b8:	d105      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80034ba:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80034bc:	0351      	lsls	r1, r2, #13
 80034be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80034c0:	0b49      	lsrs	r1, r1, #13
 80034c2:	438b      	bics	r3, r1
 80034c4:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	db00      	blt.n	80034cc <HAL_ADC_ConfigChannel+0x1cc>
 80034ca:	e751      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ce:	4914      	ldr	r1, [pc, #80]	; (8003520 <HAL_ADC_ConfigChannel+0x220>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	428a      	cmp	r2, r1
 80034d4:	d108      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80034d6:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034d8:	681c      	ldr	r4, [r3, #0]
 80034da:	0452      	lsls	r2, r2, #17
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80034de:	4002      	ands	r2, r0
 80034e0:	4021      	ands	r1, r4
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e743      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80034e8:	4911      	ldr	r1, [pc, #68]	; (8003530 <HAL_ADC_ConfigChannel+0x230>)
 80034ea:	428a      	cmp	r2, r1
 80034ec:	d103      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80034ee:	22c0      	movs	r2, #192	; 0xc0
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	0412      	lsls	r2, r2, #16
 80034f4:	e7f2      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034f6:	490f      	ldr	r1, [pc, #60]	; (8003534 <HAL_ADC_ConfigChannel+0x234>)
 80034f8:	428a      	cmp	r2, r1
 80034fa:	d000      	beq.n	80034fe <HAL_ADC_ConfigChannel+0x1fe>
 80034fc:	e738      	b.n	8003370 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80034fe:	22c0      	movs	r2, #192	; 0xc0
 8003500:	0452      	lsls	r2, r2, #17
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	4002      	ands	r2, r0
 8003506:	4807      	ldr	r0, [pc, #28]	; (8003524 <HAL_ADC_ConfigChannel+0x224>)
 8003508:	4001      	ands	r1, r0
 800350a:	e7ea      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	2320      	movs	r3, #32
 800350e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003510:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003512:	4313      	orrs	r3, r2
 8003514:	65ab      	str	r3, [r5, #88]	; 0x58
 8003516:	e7bf      	b.n	8003498 <HAL_ADC_ConfigChannel+0x198>
 8003518:	07ffff00 	.word	0x07ffff00
 800351c:	40012708 	.word	0x40012708
 8003520:	b0001000 	.word	0xb0001000
 8003524:	fe3fffff 	.word	0xfe3fffff
 8003528:	20000410 	.word	0x20000410
 800352c:	00030d40 	.word	0x00030d40
 8003530:	b8004000 	.word	0xb8004000
 8003534:	b4002000 	.word	0xb4002000

08003538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800353a:	2401      	movs	r4, #1
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353c:	6802      	ldr	r2, [r0, #0]
{
 800353e:	0005      	movs	r5, r0
 8003540:	6893      	ldr	r3, [r2, #8]
 8003542:	4223      	tst	r3, r4
 8003544:	d00a      	beq.n	800355c <ADC_Enable+0x24>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003546:	2000      	movs	r0, #0
}
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	2310      	movs	r3, #16
 800354c:	6daa      	ldr	r2, [r5, #88]	; 0x58
      return HAL_ERROR;
 800354e:	0020      	movs	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003550:	4313      	orrs	r3, r2
 8003552:	65ab      	str	r3, [r5, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003556:	4323      	orrs	r3, r4
 8003558:	65eb      	str	r3, [r5, #92]	; 0x5c
      return HAL_ERROR;
 800355a:	e7f5      	b.n	8003548 <ADC_Enable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800355c:	6891      	ldr	r1, [r2, #8]
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <ADC_Enable+0x78>)
 8003560:	4219      	tst	r1, r3
 8003562:	d1f2      	bne.n	800354a <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	4e13      	ldr	r6, [pc, #76]	; (80035b4 <ADC_Enable+0x7c>)
 8003568:	4033      	ands	r3, r6
 800356a:	4323      	orrs	r3, r4
 800356c:	6093      	str	r3, [r2, #8]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800356e:	7e6b      	ldrb	r3, [r5, #25]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d0e8      	beq.n	8003546 <ADC_Enable+0xe>
      tickstart = HAL_GetTick();
 8003574:	f7ff fc60 	bl	8002e38 <HAL_GetTick>
 8003578:	0007      	movs	r7, r0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800357a:	682a      	ldr	r2, [r5, #0]
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	4223      	tst	r3, r4
 8003580:	d1e1      	bne.n	8003546 <ADC_Enable+0xe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003582:	6893      	ldr	r3, [r2, #8]
 8003584:	4223      	tst	r3, r4
 8003586:	d00d      	beq.n	80035a4 <ADC_Enable+0x6c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003588:	f7ff fc56 	bl	8002e38 <HAL_GetTick>
 800358c:	1bc0      	subs	r0, r0, r7
 800358e:	2802      	cmp	r0, #2
 8003590:	d9f3      	bls.n	800357a <ADC_Enable+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003592:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003598:	4313      	orrs	r3, r2
 800359a:	65ab      	str	r3, [r5, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800359e:	4303      	orrs	r3, r0
 80035a0:	65eb      	str	r3, [r5, #92]	; 0x5c
 80035a2:	e7d1      	b.n	8003548 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 80035a4:	6893      	ldr	r3, [r2, #8]
 80035a6:	4033      	ands	r3, r6
 80035a8:	4323      	orrs	r3, r4
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e7ec      	b.n	8003588 <ADC_Enable+0x50>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	80000017 	.word	0x80000017
 80035b4:	7fffffe8 	.word	0x7fffffe8

080035b8 <HAL_ADC_Start>:
{
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035bc:	6800      	ldr	r0, [r0, #0]
 80035be:	f7ff fc53 	bl	8002e68 <LL_ADC_REG_IsConversionOngoing>
 80035c2:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 80035c4:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	d11d      	bne.n	8003606 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 80035ca:	0025      	movs	r5, r4
 80035cc:	3554      	adds	r5, #84	; 0x54
 80035ce:	782b      	ldrb	r3, [r5, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d018      	beq.n	8003606 <HAL_ADC_Start+0x4e>
 80035d4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80035d6:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 80035d8:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 80035da:	f7ff ffad 	bl	8003538 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80035de:	2800      	cmp	r0, #0
 80035e0:	d112      	bne.n	8003608 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 80035e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 80035e6:	490a      	ldr	r1, [pc, #40]	; (8003610 <HAL_ADC_Start+0x58>)
 80035e8:	401a      	ands	r2, r3
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035f0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80035f2:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035f4:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80035f6:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
      __HAL_UNLOCK(hadc);
 80035fc:	7028      	strb	r0, [r5, #0]
 80035fe:	4011      	ands	r1, r2
 8003600:	2204      	movs	r2, #4
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003608:	702e      	strb	r6, [r5, #0]
 800360a:	e7fc      	b.n	8003606 <HAL_ADC_Start+0x4e>
 800360c:	fffff0fe 	.word	0xfffff0fe
 8003610:	7fffffe8 	.word	0x7fffffe8

08003614 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8003614:	4770      	bx	lr

08003616 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8003616:	4770      	bx	lr

08003618 <HAL_ADCEx_EndOfSamplingCallback>:
 8003618:	4770      	bx	lr

0800361a <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800361a:	4770      	bx	lr

0800361c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003620:	2800      	cmp	r0, #0
 8003622:	db12      	blt.n	800364a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003624:	0883      	lsrs	r3, r0, #2
 8003626:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_NVIC_SetPriority+0x58>)
 8003628:	2403      	movs	r4, #3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	189b      	adds	r3, r3, r2
 800362e:	22ff      	movs	r2, #255	; 0xff
 8003630:	4020      	ands	r0, r4
 8003632:	40a0      	lsls	r0, r4
 8003634:	0014      	movs	r4, r2
 8003636:	25c0      	movs	r5, #192	; 0xc0
 8003638:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800363a:	4011      	ands	r1, r2
 800363c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363e:	00ad      	lsls	r5, r5, #2
 8003640:	595e      	ldr	r6, [r3, r5]
 8003642:	43a6      	bics	r6, r4
 8003644:	4331      	orrs	r1, r6
 8003646:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003648:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800364a:	2403      	movs	r4, #3
 800364c:	230f      	movs	r3, #15
 800364e:	b2c0      	uxtb	r0, r0
 8003650:	4003      	ands	r3, r0
 8003652:	4020      	ands	r0, r4
 8003654:	40a0      	lsls	r0, r4
 8003656:	34fc      	adds	r4, #252	; 0xfc
 8003658:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800365a:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800365c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800365e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003660:	3b08      	subs	r3, #8
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <HAL_NVIC_SetPriority+0x5c>)
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	189b      	adds	r3, r3, r2
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	43aa      	bics	r2, r5
 800366e:	4311      	orrs	r1, r2
 8003670:	61d9      	str	r1, [r3, #28]
 8003672:	e7e9      	b.n	8003648 <HAL_NVIC_SetPriority+0x2c>
 8003674:	e000e100 	.word	0xe000e100
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800367c:	2800      	cmp	r0, #0
 800367e:	db05      	blt.n	800368c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003680:	231f      	movs	r3, #31
 8003682:	4018      	ands	r0, r3
 8003684:	3b1e      	subs	r3, #30
 8003686:	4083      	lsls	r3, r0
 8003688:	4a01      	ldr	r2, [pc, #4]	; (8003690 <HAL_NVIC_EnableIRQ+0x14>)
 800368a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800368c:	4770      	bx	lr
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	e000e100 	.word	0xe000e100

08003694 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003694:	2800      	cmp	r0, #0
 8003696:	db09      	blt.n	80036ac <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003698:	231f      	movs	r3, #31
 800369a:	4018      	ands	r0, r3
 800369c:	3b1e      	subs	r3, #30
 800369e:	4083      	lsls	r3, r0
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <HAL_NVIC_DisableIRQ+0x1c>)
 80036a2:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036a8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80036ac:	4770      	bx	lr
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	e000e104 	.word	0xe000e104

080036b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_SYSTICK_Config+0x28>)
 80036b6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d80d      	bhi.n	80036da <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036be:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c2:	4808      	ldr	r0, [pc, #32]	; (80036e4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c6:	6a03      	ldr	r3, [r0, #32]
 80036c8:	0609      	lsls	r1, r1, #24
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	430b      	orrs	r3, r1
 80036d0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80036da:	4770      	bx	lr
 80036dc:	00ffffff 	.word	0x00ffffff
 80036e0:	e000e010 	.word	0xe000e010
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	db07      	blt.n	80036fc <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ec:	231f      	movs	r3, #31
 80036ee:	22c0      	movs	r2, #192	; 0xc0
 80036f0:	4018      	ands	r0, r3
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	4083      	lsls	r3, r0
 80036f6:	4902      	ldr	r1, [pc, #8]	; (8003700 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80036f8:	0052      	lsls	r2, r2, #1
 80036fa:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80036fc:	4770      	bx	lr
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	e000e100 	.word	0xe000e100

08003704 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003706:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003708:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800370a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800370c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800370e:	2c00      	cmp	r4, #0
 8003710:	d002      	beq.n	8003718 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003712:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003714:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003716:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003718:	251c      	movs	r5, #28
 800371a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800371c:	4e08      	ldr	r6, [pc, #32]	; (8003740 <DMA_SetConfig+0x3c>)
 800371e:	4025      	ands	r5, r4
 8003720:	2401      	movs	r4, #1
 8003722:	40ac      	lsls	r4, r5
 8003724:	6877      	ldr	r7, [r6, #4]
 8003726:	433c      	orrs	r4, r7
 8003728:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800372a:	6804      	ldr	r4, [r0, #0]
 800372c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372e:	6883      	ldr	r3, [r0, #8]
 8003730:	2b10      	cmp	r3, #16
 8003732:	d102      	bne.n	800373a <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003734:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003736:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800373a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800373c:	60e2      	str	r2, [r4, #12]
}
 800373e:	e7fb      	b.n	8003738 <DMA_SetConfig+0x34>
 8003740:	40020000 	.word	0x40020000

08003744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003744:	b510      	push	{r4, lr}
 8003746:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003748:	7800      	ldrb	r0, [r0, #0]
 800374a:	2114      	movs	r1, #20
 800374c:	3808      	subs	r0, #8
 800374e:	f7fc fcff 	bl	8000150 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	189b      	adds	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003760:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003762:	231c      	movs	r3, #28
 8003764:	4018      	ands	r0, r3
 8003766:	3b1b      	subs	r3, #27
 8003768:	4083      	lsls	r3, r0
 800376a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800376c:	bd10      	pop	{r4, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	10008200 	.word	0x10008200
 8003774:	40020880 	.word	0x40020880

08003778 <HAL_DMA_Init>:
{
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800377c:	2001      	movs	r0, #1
  if (hdma == NULL)
 800377e:	2c00      	cmp	r4, #0
 8003780:	d048      	beq.n	8003814 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003782:	6825      	ldr	r5, [r4, #0]
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_DMA_Init+0xa8>)
 8003786:	2114      	movs	r1, #20
 8003788:	18e8      	adds	r0, r5, r3
 800378a:	f7fc fce1 	bl	8000150 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800378e:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003790:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8003792:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003794:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003796:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800379c:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800379e:	4013      	ands	r3, r2
 80037a0:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	682a      	ldr	r2, [r5, #0]
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037aa:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6961      	ldr	r1, [r4, #20]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	69a1      	ldr	r1, [r4, #24]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	69e1      	ldr	r1, [r4, #28]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6a21      	ldr	r1, [r4, #32]
 80037bc:	430b      	orrs	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c2:	f7ff ffbf 	bl	8003744 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	68a2      	ldr	r2, [r4, #8]
 80037ca:	01db      	lsls	r3, r3, #7
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d0:	2300      	movs	r3, #0
 80037d2:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037d4:	6862      	ldr	r2, [r4, #4]
 80037d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037d8:	b2d3      	uxtb	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80037de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037e0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e2:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037e4:	2a03      	cmp	r2, #3
 80037e6:	d816      	bhi.n	8003816 <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037e8:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ea:	4810      	ldr	r0, [pc, #64]	; (800382c <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037ec:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037ee:	2203      	movs	r2, #3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4013      	ands	r3, r2
 80037f4:	3a02      	subs	r2, #2
 80037f6:	409a      	lsls	r2, r3
 80037f8:	65a2      	str	r2, [r4, #88]	; 0x58
 80037fa:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037fc:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037fe:	0089      	lsls	r1, r1, #2
 8003800:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003802:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003804:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003806:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003808:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800380a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 800380e:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003810:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8003812:	77e0      	strb	r0, [r4, #31]
}
 8003814:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800381a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800381c:	65a3      	str	r3, [r4, #88]	; 0x58
 800381e:	e7f3      	b.n	8003808 <HAL_DMA_Init+0x90>
 8003820:	bffdfff8 	.word	0xbffdfff8
 8003824:	ffff800f 	.word	0xffff800f
 8003828:	1000823f 	.word	0x1000823f
 800382c:	40020940 	.word	0x40020940

08003830 <HAL_DMA_Start_IT>:
{
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003832:	1d46      	adds	r6, r0, #5
 8003834:	7ff5      	ldrb	r5, [r6, #31]
{
 8003836:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003838:	2002      	movs	r0, #2
 800383a:	2d01      	cmp	r5, #1
 800383c:	d030      	beq.n	80038a0 <HAL_DMA_Start_IT+0x70>
 800383e:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8003840:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003842:	77f5      	strb	r5, [r6, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8003844:	7ffd      	ldrb	r5, [r7, #31]
 8003846:	b2ed      	uxtb	r5, r5
 8003848:	2d01      	cmp	r5, #1
 800384a:	d127      	bne.n	800389c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800384c:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003850:	6827      	ldr	r7, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003852:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	43a8      	bics	r0, r5
 8003858:	6038      	str	r0, [r7, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800385a:	0020      	movs	r0, r4
 800385c:	f7ff ff52 	bl	8003704 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003860:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	2a00      	cmp	r2, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003868:	220e      	movs	r2, #14
 800386a:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003870:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003872:	6811      	ldr	r1, [r2, #0]
 8003874:	03c9      	lsls	r1, r1, #15
 8003876:	d504      	bpl.n	8003882 <HAL_DMA_Start_IT+0x52>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	6810      	ldr	r0, [r2, #0]
 800387c:	0049      	lsls	r1, r1, #1
 800387e:	4301      	orrs	r1, r0
 8003880:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003882:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003884:	2a00      	cmp	r2, #0
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Start_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	6810      	ldr	r0, [r2, #0]
 800388c:	0049      	lsls	r1, r1, #1
 800388e:	4301      	orrs	r1, r0
 8003890:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003892:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800389c:	2300      	movs	r3, #0
 800389e:	77f3      	strb	r3, [r6, #31]
}
 80038a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038a2:	2104      	movs	r1, #4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	438a      	bics	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	220a      	movs	r2, #10
 80038ae:	e7dd      	b.n	800386c <HAL_DMA_Start_IT+0x3c>

080038b0 <HAL_DMA_Abort_IT>:
{
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80038b2:	2301      	movs	r3, #1
 80038b4:	1d41      	adds	r1, r0, #5
 80038b6:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038b8:	1d84      	adds	r4, r0, #6
 80038ba:	7fe2      	ldrb	r2, [r4, #31]
 80038bc:	2a02      	cmp	r2, #2
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c0:	2204      	movs	r2, #4
 80038c2:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c8:	260e      	movs	r6, #14
 80038ca:	6802      	ldr	r2, [r0, #0]
 80038cc:	6815      	ldr	r5, [r2, #0]
 80038ce:	43b5      	bics	r5, r6
 80038d0:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80038d2:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d4:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80038d6:	439d      	bics	r5, r3
 80038d8:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038da:	6832      	ldr	r2, [r6, #0]
 80038dc:	4d11      	ldr	r5, [pc, #68]	; (8003924 <HAL_DMA_Abort_IT+0x74>)
 80038de:	402a      	ands	r2, r5
 80038e0:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80038e2:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038e4:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80038e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80038e8:	4e0f      	ldr	r6, [pc, #60]	; (8003928 <HAL_DMA_Abort_IT+0x78>)
 80038ea:	402a      	ands	r2, r5
 80038ec:	4093      	lsls	r3, r2
 80038ee:	6877      	ldr	r7, [r6, #4]
 80038f0:	433b      	orrs	r3, r7
 80038f2:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80038f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80038f8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80038fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003900:	4665      	mov	r5, ip
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	402a      	ands	r2, r5
 8003906:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003908:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800390a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800390c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	2301      	movs	r3, #1
 8003910:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003912:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8003914:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003916:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 800391a:	42a2      	cmp	r2, r4
 800391c:	d0d2      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800391e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	0023      	movs	r3, r4
 8003922:	e7cf      	b.n	80038c4 <HAL_DMA_Abort_IT+0x14>
 8003924:	fffffeff 	.word	0xfffffeff
 8003928:	40020000 	.word	0x40020000

0800392c <HAL_DMA_IRQHandler>:
{
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800392e:	211c      	movs	r1, #28
 8003930:	2704      	movs	r7, #4
 8003932:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003936:	4021      	ands	r1, r4
 8003938:	003c      	movs	r4, r7
 800393a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800393c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800393e:	6802      	ldr	r2, [r0, #0]
 8003940:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003942:	4234      	tst	r4, r6
 8003944:	d00f      	beq.n	8003966 <HAL_DMA_IRQHandler+0x3a>
 8003946:	423d      	tst	r5, r7
 8003948:	d00d      	beq.n	8003966 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394a:	6811      	ldr	r1, [r2, #0]
 800394c:	0689      	lsls	r1, r1, #26
 800394e:	d402      	bmi.n	8003956 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003950:	6811      	ldr	r1, [r2, #0]
 8003952:	43b9      	bics	r1, r7
 8003954:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4314      	orrs	r4, r2
 800395a:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800395c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01b      	beq.n	800399a <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8003962:	4798      	blx	r3
  return;
 8003964:	e019      	b.n	800399a <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003966:	2702      	movs	r7, #2
 8003968:	003c      	movs	r4, r7
 800396a:	408c      	lsls	r4, r1
 800396c:	4234      	tst	r4, r6
 800396e:	d015      	beq.n	800399c <HAL_DMA_IRQHandler+0x70>
 8003970:	423d      	tst	r5, r7
 8003972:	d013      	beq.n	800399c <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	0689      	lsls	r1, r1, #26
 8003978:	d406      	bmi.n	8003988 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800397a:	250a      	movs	r5, #10
 800397c:	6811      	ldr	r1, [r2, #0]
 800397e:	43a9      	bics	r1, r5
 8003980:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003982:	2101      	movs	r1, #1
 8003984:	1d82      	adds	r2, r0, #6
 8003986:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 800398c:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800398e:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 8003990:	1d43      	adds	r3, r0, #5
 8003992:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8003994:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003996:	4293      	cmp	r3, r2
 8003998:	d1e3      	bne.n	8003962 <HAL_DMA_IRQHandler+0x36>
}
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800399c:	2408      	movs	r4, #8
 800399e:	0027      	movs	r7, r4
 80039a0:	408f      	lsls	r7, r1
 80039a2:	423e      	tst	r6, r7
 80039a4:	d0f9      	beq.n	800399a <HAL_DMA_IRQHandler+0x6e>
 80039a6:	4225      	tst	r5, r4
 80039a8:	d0f7      	beq.n	800399a <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039aa:	250e      	movs	r5, #14
 80039ac:	6814      	ldr	r4, [r2, #0]
 80039ae:	43ac      	bics	r4, r5
 80039b0:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80039b2:	2201      	movs	r2, #1
 80039b4:	0015      	movs	r5, r2
 80039b6:	408d      	lsls	r5, r1
 80039b8:	0029      	movs	r1, r5
 80039ba:	685c      	ldr	r4, [r3, #4]
 80039bc:	4321      	orrs	r1, r4
 80039be:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039c0:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039c2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80039c4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80039c6:	2200      	movs	r2, #0
 80039c8:	1d43      	adds	r3, r0, #5
 80039ca:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80039cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039ce:	e7e2      	b.n	8003996 <HAL_DMA_IRQHandler+0x6a>
 80039d0:	40020000 	.word	0x40020000

080039d4 <HAL_DMA_GetState>:
  return hdma->State;
 80039d4:	3006      	adds	r0, #6
 80039d6:	7fc0      	ldrb	r0, [r0, #31]
 80039d8:	b2c0      	uxtb	r0, r0
}
 80039da:	4770      	bx	lr

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	680b      	ldr	r3, [r1, #0]
{
 80039e0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80039e4:	2300      	movs	r3, #0
{
 80039e6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e8:	9a02      	ldr	r2, [sp, #8]
 80039ea:	40da      	lsrs	r2, r3
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 80039ee:	b005      	add	sp, #20
 80039f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	9203      	str	r2, [sp, #12]
 80039f8:	9903      	ldr	r1, [sp, #12]
 80039fa:	9a02      	ldr	r2, [sp, #8]
 80039fc:	400a      	ands	r2, r1
 80039fe:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8003a00:	d100      	bne.n	8003a04 <HAL_GPIO_Init+0x28>
 8003a02:	e085      	b.n	8003b10 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a04:	9a01      	ldr	r2, [sp, #4]
 8003a06:	2110      	movs	r1, #16
 8003a08:	6852      	ldr	r2, [r2, #4]
 8003a0a:	0016      	movs	r6, r2
 8003a0c:	438e      	bics	r6, r1
 8003a0e:	2e02      	cmp	r6, #2
 8003a10:	d10e      	bne.n	8003a30 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a12:	2507      	movs	r5, #7
 8003a14:	401d      	ands	r5, r3
 8003a16:	00ad      	lsls	r5, r5, #2
 8003a18:	3901      	subs	r1, #1
 8003a1a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8003a1c:	08dc      	lsrs	r4, r3, #3
 8003a1e:	00a4      	lsls	r4, r4, #2
 8003a20:	1904      	adds	r4, r0, r4
 8003a22:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a24:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a26:	9901      	ldr	r1, [sp, #4]
 8003a28:	6909      	ldr	r1, [r1, #16]
 8003a2a:	40a9      	lsls	r1, r5
 8003a2c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003a2e:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a30:	2403      	movs	r4, #3
 8003a32:	005f      	lsls	r7, r3, #1
 8003a34:	40bc      	lsls	r4, r7
 8003a36:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8003a38:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a3a:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a3c:	4025      	ands	r5, r4
 8003a3e:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a40:	2503      	movs	r5, #3
 8003a42:	4015      	ands	r5, r2
 8003a44:	40bd      	lsls	r5, r7
 8003a46:	4661      	mov	r1, ip
 8003a48:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8003a4a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4c:	2e01      	cmp	r6, #1
 8003a4e:	d80f      	bhi.n	8003a70 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a50:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8003a52:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a54:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a58:	40bd      	lsls	r5, r7
 8003a5a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003a5c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a5e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a60:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a62:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a64:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a66:	2101      	movs	r1, #1
 8003a68:	400d      	ands	r5, r1
 8003a6a:	409d      	lsls	r5, r3
 8003a6c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003a6e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8003a70:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a72:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a74:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a76:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a78:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a7a:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a7c:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a7e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003a80:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a82:	420a      	tst	r2, r1
 8003a84:	d044      	beq.n	8003b10 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a86:	2603      	movs	r6, #3
 8003a88:	240f      	movs	r4, #15
 8003a8a:	4922      	ldr	r1, [pc, #136]	; (8003b14 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8003a8c:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a8e:	401e      	ands	r6, r3
 8003a90:	00ad      	lsls	r5, r5, #2
 8003a92:	00f6      	lsls	r6, r6, #3
 8003a94:	186d      	adds	r5, r5, r1
 8003a96:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a98:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8003a9a:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a9c:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a9e:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003aa0:	2400      	movs	r4, #0
 8003aa2:	4288      	cmp	r0, r1
 8003aa4:	d00c      	beq.n	8003ac0 <HAL_GPIO_Init+0xe4>
 8003aa6:	491c      	ldr	r1, [pc, #112]	; (8003b18 <HAL_GPIO_Init+0x13c>)
 8003aa8:	3401      	adds	r4, #1
 8003aaa:	4288      	cmp	r0, r1
 8003aac:	d008      	beq.n	8003ac0 <HAL_GPIO_Init+0xe4>
 8003aae:	491b      	ldr	r1, [pc, #108]	; (8003b1c <HAL_GPIO_Init+0x140>)
 8003ab0:	3401      	adds	r4, #1
 8003ab2:	4288      	cmp	r0, r1
 8003ab4:	d004      	beq.n	8003ac0 <HAL_GPIO_Init+0xe4>
 8003ab6:	491a      	ldr	r1, [pc, #104]	; (8003b20 <HAL_GPIO_Init+0x144>)
 8003ab8:	3403      	adds	r4, #3
 8003aba:	4288      	cmp	r0, r1
 8003abc:	d100      	bne.n	8003ac0 <HAL_GPIO_Init+0xe4>
 8003abe:	3c02      	subs	r4, #2
 8003ac0:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8003ac2:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ac4:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8003ac6:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8003ac8:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8003aca:	4c16      	ldr	r4, [pc, #88]	; (8003b24 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8003acc:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8003ace:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8003ad0:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad2:	03d1      	lsls	r1, r2, #15
 8003ad4:	d401      	bmi.n	8003ada <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8003ad6:	003e      	movs	r6, r7
 8003ad8:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8003ada:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8003adc:	4e12      	ldr	r6, [pc, #72]	; (8003b28 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8003ade:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8003ae0:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8003ae2:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae4:	0391      	lsls	r1, r2, #14
 8003ae6:	d401      	bmi.n	8003aec <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8003ae8:	402c      	ands	r4, r5
 8003aea:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8003aec:	4c09      	ldr	r4, [pc, #36]	; (8003b14 <HAL_GPIO_Init+0x138>)
 8003aee:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8003af0:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8003af2:	9e00      	ldr	r6, [sp, #0]
 8003af4:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af6:	02d1      	lsls	r1, r2, #11
 8003af8:	d401      	bmi.n	8003afe <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8003afa:	003e      	movs	r6, r7
 8003afc:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8003afe:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8003b00:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8003b02:	9f00      	ldr	r7, [sp, #0]
 8003b04:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b06:	0292      	lsls	r2, r2, #10
 8003b08:	d401      	bmi.n	8003b0e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8003b0a:	402e      	ands	r6, r5
 8003b0c:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8003b0e:	6067      	str	r7, [r4, #4]
    position++;
 8003b10:	3301      	adds	r3, #1
 8003b12:	e769      	b.n	80039e8 <HAL_GPIO_Init+0xc>
 8003b14:	40021800 	.word	0x40021800
 8003b18:	50000400 	.word	0x50000400
 8003b1c:	50000800 	.word	0x50000800
 8003b20:	50000c00 	.word	0x50000c00
 8003b24:	40021804 	.word	0x40021804
 8003b28:	40021808 	.word	0x40021808

08003b2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b2c:	6900      	ldr	r0, [r0, #16]
 8003b2e:	4008      	ands	r0, r1
 8003b30:	1e41      	subs	r1, r0, #1
 8003b32:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003b34:	b2c0      	uxtb	r0, r0
}
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b3c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b3e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b40:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003b42:	e7fc      	b.n	8003b3e <HAL_GPIO_WritePin+0x6>

08003b44 <HAL_GPIO_EXTI_Rising_Callback>:
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b48:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003b4a:	4d08      	ldr	r5, [pc, #32]	; (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8003b4c:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003b4e:	68eb      	ldr	r3, [r5, #12]
 8003b50:	4218      	tst	r0, r3
 8003b52:	d002      	beq.n	8003b5a <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003b54:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003b56:	f7ff fff5 	bl	8003b44 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003b5a:	692b      	ldr	r3, [r5, #16]
 8003b5c:	4223      	tst	r3, r4
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003b60:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003b62:	0020      	movs	r0, r4
 8003b64:	f004 fdc4 	bl	80086f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40021800 	.word	0x40021800

08003b70 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b70:	6803      	ldr	r3, [r0, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	0792      	lsls	r2, r2, #30
 8003b76:	d501      	bpl.n	8003b7c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	4211      	tst	r1, r2
 8003b82:	d102      	bne.n	8003b8a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	619a      	str	r2, [r3, #24]
  }
}
 8003b8a:	4770      	bx	lr

08003b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003b90:	0589      	lsls	r1, r1, #22
 8003b92:	4333      	orrs	r3, r6
 8003b94:	0d89      	lsrs	r1, r1, #22
 8003b96:	4319      	orrs	r1, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	6804      	ldr	r4, [r0, #0]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	0d70      	lsrs	r0, r6, #21
 8003ba0:	4018      	ands	r0, r3
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <I2C_TransferConfig+0x28>)
 8003ba4:	6865      	ldr	r5, [r4, #4]
 8003ba6:	0412      	lsls	r2, r2, #16
 8003ba8:	4318      	orrs	r0, r3
 8003baa:	4385      	bics	r5, r0
 8003bac:	4311      	orrs	r1, r2
 8003bae:	4329      	orrs	r1, r5
 8003bb0:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	03ff63ff 	.word	0x03ff63ff

08003bb8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003bb8:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bbc:	4c16      	ldr	r4, [pc, #88]	; (8003c18 <I2C_Enable_IRQ+0x60>)
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d002      	beq.n	8003bca <I2C_Enable_IRQ+0x12>
 8003bc4:	4c15      	ldr	r4, [pc, #84]	; (8003c1c <I2C_Enable_IRQ+0x64>)
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	d114      	bne.n	8003bf4 <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 8003bca:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bcc:	4211      	tst	r1, r2
 8003bce:	d000      	beq.n	8003bd2 <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bd0:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003bd2:	2211      	movs	r2, #17
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	2a11      	cmp	r2, #17
 8003bd8:	d101      	bne.n	8003bde <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bda:	327f      	adds	r2, #127	; 0x7f
 8003bdc:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003bde:	2212      	movs	r2, #18
 8003be0:	4011      	ands	r1, r2
 8003be2:	4291      	cmp	r1, r2
 8003be4:	d101      	bne.n	8003bea <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003be6:	324e      	adds	r2, #78	; 0x4e
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003be8:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003bea:	6802      	ldr	r2, [r0, #0]
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 8003bf4:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bf6:	4211      	tst	r1, r2
 8003bf8:	d000      	beq.n	8003bfc <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bfa:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bfc:	07ca      	lsls	r2, r1, #31
 8003bfe:	d501      	bpl.n	8003c04 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c00:	22f2      	movs	r2, #242	; 0xf2
 8003c02:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c04:	078a      	lsls	r2, r1, #30
 8003c06:	d501      	bpl.n	8003c0c <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c08:	22f4      	movs	r2, #244	; 0xf4
 8003c0a:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003c0c:	2212      	movs	r2, #18
 8003c0e:	4011      	ands	r1, r2
 8003c10:	4291      	cmp	r1, r2
 8003c12:	d1ea      	bne.n	8003bea <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 8003c14:	320e      	adds	r2, #14
 8003c16:	e7e7      	b.n	8003be8 <I2C_Enable_IRQ+0x30>
 8003c18:	08004875 	.word	0x08004875
 8003c1c:	08004795 	.word	0x08004795

08003c20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c20:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8003c22:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c24:	07ca      	lsls	r2, r1, #31
 8003c26:	d508      	bpl.n	8003c3a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c28:	0003      	movs	r3, r0
 8003c2a:	3341      	adds	r3, #65	; 0x41
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	2328      	movs	r3, #40	; 0x28
 8003c30:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c32:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c34:	2a28      	cmp	r2, #40	; 0x28
 8003c36:	d000      	beq.n	8003c3a <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c38:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c3a:	078a      	lsls	r2, r1, #30
 8003c3c:	d508      	bpl.n	8003c50 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3e:	0002      	movs	r2, r0
 8003c40:	2428      	movs	r4, #40	; 0x28
 8003c42:	3241      	adds	r2, #65	; 0x41
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4022      	ands	r2, r4
 8003c48:	42a2      	cmp	r2, r4
 8003c4a:	d116      	bne.n	8003c7a <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c4c:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c4e:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c50:	074a      	lsls	r2, r1, #29
 8003c52:	d501      	bpl.n	8003c58 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c54:	22b8      	movs	r2, #184	; 0xb8
 8003c56:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003c58:	2211      	movs	r2, #17
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	2a11      	cmp	r2, #17
 8003c5e:	d101      	bne.n	8003c64 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c60:	327f      	adds	r2, #127	; 0x7f
 8003c62:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003c64:	2212      	movs	r2, #18
 8003c66:	4011      	ands	r1, r2
 8003c68:	4291      	cmp	r1, r2
 8003c6a:	d101      	bne.n	8003c70 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c6c:	324e      	adds	r2, #78	; 0x4e
 8003c6e:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c70:	6801      	ldr	r1, [r0, #0]
 8003c72:	680a      	ldr	r2, [r1, #0]
 8003c74:	439a      	bics	r2, r3
 8003c76:	600a      	str	r2, [r1, #0]
}
 8003c78:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c7a:	22f4      	movs	r2, #244	; 0xf4
 8003c7c:	e7e7      	b.n	8003c4e <I2C_Disable_IRQ+0x2e>

08003c7e <I2C_WaitOnFlagUntilTimeout>:
{
 8003c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c80:	0004      	movs	r4, r0
 8003c82:	000e      	movs	r6, r1
 8003c84:	0017      	movs	r7, r2
 8003c86:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	6993      	ldr	r3, [r2, #24]
 8003c8c:	4033      	ands	r3, r6
 8003c8e:	1b9b      	subs	r3, r3, r6
 8003c90:	4259      	negs	r1, r3
 8003c92:	414b      	adcs	r3, r1
 8003c94:	42bb      	cmp	r3, r7
 8003c96:	d001      	beq.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e017      	b.n	8003ccc <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	1c6b      	adds	r3, r5, #1
 8003c9e:	d0f4      	beq.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7ff f8ca 	bl	8002e38 <HAL_GetTick>
 8003ca4:	9b06      	ldr	r3, [sp, #24]
 8003ca6:	1ac0      	subs	r0, r0, r3
 8003ca8:	4285      	cmp	r5, r0
 8003caa:	d301      	bcc.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	d1eb      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003cb4:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	0023      	movs	r3, r4
 8003cbc:	3341      	adds	r3, #65	; 0x41
 8003cbe:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	0022      	movs	r2, r4
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003cc6:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003cca:	7023      	strb	r3, [r4, #0]
}
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cd0 <I2C_IsAcknowledgeFailed>:
{
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd2:	6803      	ldr	r3, [r0, #0]
{
 8003cd4:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd6:	6998      	ldr	r0, [r3, #24]
 8003cd8:	2310      	movs	r3, #16
{
 8003cda:	000e      	movs	r6, r1
 8003cdc:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cde:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce0:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d118      	bne.n	8003d18 <I2C_IsAcknowledgeFailed+0x48>
}
 8003ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003ce8:	1c72      	adds	r2, r6, #1
 8003cea:	d016      	beq.n	8003d1a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cec:	f7ff f8a4 	bl	8002e38 <HAL_GetTick>
 8003cf0:	1bc0      	subs	r0, r0, r7
 8003cf2:	4286      	cmp	r6, r0
 8003cf4:	d301      	bcc.n	8003cfa <I2C_IsAcknowledgeFailed+0x2a>
 8003cf6:	2e00      	cmp	r6, #0
 8003cf8:	d10e      	bne.n	8003d18 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	0023      	movs	r3, r4
 8003d04:	3341      	adds	r3, #65	; 0x41
 8003d06:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	0022      	movs	r2, r4
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d0e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8003d12:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8003d14:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003d16:	e7e6      	b.n	8003ce6 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	422a      	tst	r2, r5
 8003d1e:	d0e3      	beq.n	8003ce8 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003d22:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d26:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003d28:	f7ff ff22 	bl	8003b70 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	4906      	ldr	r1, [pc, #24]	; (8003d48 <I2C_IsAcknowledgeFailed+0x78>)
 8003d30:	6853      	ldr	r3, [r2, #4]
 8003d32:	400b      	ands	r3, r1
 8003d34:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d36:	2304      	movs	r3, #4
 8003d38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	0023      	movs	r3, r4
 8003d40:	3341      	adds	r3, #65	; 0x41
 8003d42:	701d      	strb	r5, [r3, #0]
 8003d44:	e7e0      	b.n	8003d08 <I2C_IsAcknowledgeFailed+0x38>
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	0004      	movs	r4, r0
 8003d50:	000d      	movs	r5, r1
 8003d52:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d54:	2702      	movs	r7, #2
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	423b      	tst	r3, r7
 8003d5c:	d001      	beq.n	8003d62 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003d5e:	2000      	movs	r0, #0
}
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	0032      	movs	r2, r6
 8003d64:	0029      	movs	r1, r5
 8003d66:	0020      	movs	r0, r4
 8003d68:	f7ff ffb2 	bl	8003cd0 <I2C_IsAcknowledgeFailed>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d115      	bne.n	8003d9c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	1c6b      	adds	r3, r5, #1
 8003d72:	d0f0      	beq.n	8003d56 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7ff f860 	bl	8002e38 <HAL_GetTick>
 8003d78:	1b80      	subs	r0, r0, r6
 8003d7a:	4285      	cmp	r5, r0
 8003d7c:	d301      	bcc.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	d1e9      	bne.n	8003d56 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d82:	2220      	movs	r2, #32
 8003d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d86:	4313      	orrs	r3, r2
 8003d88:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	0023      	movs	r3, r4
 8003d8c:	3341      	adds	r3, #65	; 0x41
 8003d8e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	0022      	movs	r2, r4
 8003d92:	2300      	movs	r3, #0
 8003d94:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003d96:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003d9a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	e7df      	b.n	8003d60 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003da0 <I2C_RequestMemoryWrite>:
{
 8003da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003da2:	0014      	movs	r4, r2
 8003da4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <I2C_RequestMemoryWrite+0x60>)
{
 8003daa:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	045b      	lsls	r3, r3, #17
 8003db2:	f7ff feeb 	bl	8003b8c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	9906      	ldr	r1, [sp, #24]
 8003dba:	0028      	movs	r0, r5
 8003dbc:	f7ff ffc6 	bl	8003d4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d001      	beq.n	8003dc8 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
}
 8003dc6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003dc8:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dca:	2e01      	cmp	r6, #1
 8003dcc:	d10d      	bne.n	8003dea <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dce:	b2e4      	uxtb	r4, r4
 8003dd0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	9b06      	ldr	r3, [sp, #24]
 8003ddc:	0028      	movs	r0, r5
 8003dde:	f7ff ff4e 	bl	8003c7e <I2C_WaitOnFlagUntilTimeout>
 8003de2:	1e43      	subs	r3, r0, #1
 8003de4:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003de6:	b2c0      	uxtb	r0, r0
 8003de8:	e7ed      	b.n	8003dc6 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dea:	0a22      	lsrs	r2, r4, #8
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	9906      	ldr	r1, [sp, #24]
 8003df0:	9a07      	ldr	r2, [sp, #28]
 8003df2:	0028      	movs	r0, r5
 8003df4:	f7ff ffaa 	bl	8003d4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d1e3      	bne.n	8003dc4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	e7e6      	b.n	8003dce <I2C_RequestMemoryWrite+0x2e>
 8003e00:	80002000 	.word	0x80002000

08003e04 <I2C_RequestMemoryRead>:
{
 8003e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e06:	0005      	movs	r5, r0
 8003e08:	0014      	movs	r4, r2
 8003e0a:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <I2C_RequestMemoryRead+0x60>)
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	f7ff feba 	bl	8003b8c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e18:	9a07      	ldr	r2, [sp, #28]
 8003e1a:	9906      	ldr	r1, [sp, #24]
 8003e1c:	0028      	movs	r0, r5
 8003e1e:	f7ff ff95 	bl	8003d4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 8003e26:	2001      	movs	r0, #1
}
 8003e28:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003e2a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2c:	2e01      	cmp	r6, #1
 8003e2e:	d10d      	bne.n	8003e4c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e30:	b2e4      	uxtb	r4, r4
 8003e32:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	2200      	movs	r2, #0
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2140      	movs	r1, #64	; 0x40
 8003e3c:	9b06      	ldr	r3, [sp, #24]
 8003e3e:	0028      	movs	r0, r5
 8003e40:	f7ff ff1d 	bl	8003c7e <I2C_WaitOnFlagUntilTimeout>
 8003e44:	1e43      	subs	r3, r0, #1
 8003e46:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003e48:	b2c0      	uxtb	r0, r0
 8003e4a:	e7ed      	b.n	8003e28 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e4c:	0a22      	lsrs	r2, r4, #8
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	9906      	ldr	r1, [sp, #24]
 8003e52:	9a07      	ldr	r2, [sp, #28]
 8003e54:	0028      	movs	r0, r5
 8003e56:	f7ff ff79 	bl	8003d4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d1e3      	bne.n	8003e26 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	e7e6      	b.n	8003e30 <I2C_RequestMemoryRead+0x2c>
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	80002000 	.word	0x80002000

08003e68 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	000d      	movs	r5, r1
 8003e6e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e70:	2720      	movs	r7, #32
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	423b      	tst	r3, r7
 8003e78:	d001      	beq.n	8003e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
}
 8003e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	0032      	movs	r2, r6
 8003e80:	0029      	movs	r1, r5
 8003e82:	0020      	movs	r0, r4
 8003e84:	f7ff ff24 	bl	8003cd0 <I2C_IsAcknowledgeFailed>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d113      	bne.n	8003eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe ffd4 	bl	8002e38 <HAL_GetTick>
 8003e90:	1b80      	subs	r0, r0, r6
 8003e92:	4285      	cmp	r5, r0
 8003e94:	d301      	bcc.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003e96:	2d00      	cmp	r5, #0
 8003e98:	d1eb      	bne.n	8003e72 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	0023      	movs	r3, r4
 8003ea4:	3341      	adds	r3, #65	; 0x41
 8003ea6:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	0022      	movs	r2, r4
 8003eaa:	2300      	movs	r3, #0
 8003eac:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003eae:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003eb2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	e7e1      	b.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003eb8 <HAL_I2C_Init>:
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ebc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	d03f      	beq.n	8003f42 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec2:	0025      	movs	r5, r4
 8003ec4:	3541      	adds	r5, #65	; 0x41
 8003ec6:	782b      	ldrb	r3, [r5, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003ece:	0022      	movs	r2, r4
 8003ed0:	3240      	adds	r2, #64	; 0x40
 8003ed2:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8003ed4:	0020      	movs	r0, r4
 8003ed6:	f003 fee9 	bl	8007cac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003edc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ede:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003ee0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68a6      	ldr	r6, [r4, #8]
 8003ee8:	438a      	bics	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eec:	6861      	ldr	r1, [r4, #4]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_I2C_Init+0xa0>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_I2C_Init+0xa4>)
 8003ef8:	4011      	ands	r1, r2
 8003efa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efc:	2801      	cmp	r0, #1
 8003efe:	d121      	bne.n	8003f44 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	0209      	lsls	r1, r1, #8
 8003f04:	4331      	orrs	r1, r6
 8003f06:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f08:	6858      	ldr	r0, [r3, #4]
 8003f0a:	4915      	ldr	r1, [pc, #84]	; (8003f60 <HAL_I2C_Init+0xa8>)
 8003f0c:	4301      	orrs	r1, r0
 8003f0e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f10:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f12:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f14:	400a      	ands	r2, r1
 8003f16:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f18:	6961      	ldr	r1, [r4, #20]
 8003f1a:	6922      	ldr	r2, [r4, #16]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	69a1      	ldr	r1, [r4, #24]
 8003f20:	0209      	lsls	r1, r1, #8
 8003f22:	430a      	orrs	r2, r1
 8003f24:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f26:	6a21      	ldr	r1, [r4, #32]
 8003f28:	69e2      	ldr	r2, [r4, #28]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003f2e:	2201      	movs	r2, #1
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	3442      	adds	r4, #66	; 0x42
 8003f40:	7020      	strb	r0, [r4, #0]
}
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f44:	2184      	movs	r1, #132	; 0x84
 8003f46:	0209      	lsls	r1, r1, #8
 8003f48:	4331      	orrs	r1, r6
 8003f4a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f4c:	2802      	cmp	r0, #2
 8003f4e:	d1db      	bne.n	8003f08 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	0109      	lsls	r1, r1, #4
 8003f54:	6059      	str	r1, [r3, #4]
 8003f56:	e7d7      	b.n	8003f08 <HAL_I2C_Init+0x50>
 8003f58:	f0ffffff 	.word	0xf0ffffff
 8003f5c:	ffff7fff 	.word	0xffff7fff
 8003f60:	02008000 	.word	0x02008000

08003f64 <HAL_I2C_Mem_Read>:
{
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	0007      	movs	r7, r0
{
 8003f68:	b089      	sub	sp, #36	; 0x24
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	ab0e      	add	r3, sp, #56	; 0x38
 8003f6e:	9206      	str	r2, [sp, #24]
 8003f70:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f72:	3741      	adds	r7, #65	; 0x41
{
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	9204      	str	r2, [sp, #16]
 8003f78:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f7a:	783b      	ldrb	r3, [r7, #0]
{
 8003f7c:	0004      	movs	r4, r0
 8003f7e:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003f80:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d108      	bne.n	8003f98 <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x2c>
 8003f8a:	9b05      	ldr	r3, [sp, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
}
 8003f98:	b009      	add	sp, #36	; 0x24
 8003f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	3340      	adds	r3, #64	; 0x40
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d0f7      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x34>
 8003fa8:	2201      	movs	r2, #1
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fae:	f7fe ff43 	bl	8002e38 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fb2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003fb4:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fb6:	9000      	str	r0, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	0209      	lsls	r1, r1, #8
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f7ff fe5d 	bl	8003c7e <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	1e06      	subs	r6, r0, #0
 8003fc6:	d1e6      	bne.n	8003f96 <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc8:	2322      	movs	r3, #34	; 0x22
 8003fca:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	0027      	movs	r7, r4
 8003fce:	331e      	adds	r3, #30
 8003fd0:	3742      	adds	r7, #66	; 0x42
 8003fd2:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8003fd4:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003fd8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fda:	466b      	mov	r3, sp
 8003fdc:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8003fde:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003fe0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe2:	9b02      	ldr	r3, [sp, #8]
 8003fe4:	9a06      	ldr	r2, [sp, #24]
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fea:	0029      	movs	r1, r5
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0020      	movs	r0, r4
 8003ff0:	9b07      	ldr	r3, [sp, #28]
 8003ff2:	f7ff ff07 	bl	8003e04 <I2C_RequestMemoryRead>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_I2C_Mem_Read+0x9c>
      __HAL_UNLOCK(hi2c);
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	701e      	strb	r6, [r3, #0]
 8003ffe:	e7ca      	b.n	8003f96 <HAL_I2C_Mem_Read+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004000:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004002:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <HAL_I2C_Mem_Read+0x174>)
 8004004:	2aff      	cmp	r2, #255	; 0xff
 8004006:	d958      	bls.n	80040ba <HAL_I2C_Mem_Read+0x156>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004012:	0029      	movs	r1, r5
 8004014:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004016:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004018:	f7ff fdb8 	bl	8003b8c <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401c:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	9b02      	ldr	r3, [sp, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2104      	movs	r1, #4
 8004026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004028:	0020      	movs	r0, r4
 800402a:	f7ff fe28 	bl	8003c7e <I2C_WaitOnFlagUntilTimeout>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1b1      	bne.n	8003f96 <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800403a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800403c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800403e:	3301      	adds	r3, #1
 8004040:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004042:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004044:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004046:	3b01      	subs	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800404c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800404e:	b292      	uxth	r2, r2
 8004050:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <HAL_I2C_Mem_Read+0x124>
 8004056:	2a00      	cmp	r2, #0
 8004058:	d116      	bne.n	8004088 <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800405a:	9b02      	ldr	r3, [sp, #8]
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	0020      	movs	r0, r4
 8004062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004064:	f7ff fe0b 	bl	8003c7e <I2C_WaitOnFlagUntilTimeout>
 8004068:	2800      	cmp	r0, #0
 800406a:	d000      	beq.n	800406e <HAL_I2C_Mem_Read+0x10a>
 800406c:	e793      	b.n	8003f96 <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004070:	2bff      	cmp	r3, #255	; 0xff
 8004072:	d92a      	bls.n	80040ca <HAL_I2C_Mem_Read+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004074:	23ff      	movs	r3, #255	; 0xff
 8004076:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	9000      	str	r0, [sp, #0]
 800407e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004080:	0029      	movs	r1, r5
 8004082:	0020      	movs	r0, r4
 8004084:	f7ff fd82 	bl	8003b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004088:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1c7      	bne.n	800401e <HAL_I2C_Mem_Read+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	9a02      	ldr	r2, [sp, #8]
 8004090:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004092:	0020      	movs	r0, r4
 8004094:	f7ff fee8 	bl	8003e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004098:	2800      	cmp	r0, #0
 800409a:	d000      	beq.n	800409e <HAL_I2C_Mem_Read+0x13a>
 800409c:	e77b      	b.n	8003f96 <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409e:	2120      	movs	r1, #32
 80040a0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80040a2:	4d0e      	ldr	r5, [pc, #56]	; (80040dc <HAL_I2C_Mem_Read+0x178>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	402a      	ands	r2, r5
 80040aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80040ae:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	3341      	adds	r3, #65	; 0x41
 80040b2:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b4:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80040b6:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80040b8:	e76e      	b.n	8003f98 <HAL_I2C_Mem_Read+0x34>
      hi2c->XferSize = hi2c->XferCount;
 80040ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040bc:	b292      	uxth	r2, r2
 80040be:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	e7a3      	b.n	8004012 <HAL_I2C_Mem_Read+0xae>
          hi2c->XferSize = hi2c->XferCount;
 80040ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040cc:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80040ce:	b292      	uxth	r2, r2
 80040d0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	9000      	str	r0, [sp, #0]
 80040d6:	e7d3      	b.n	8004080 <HAL_I2C_Mem_Read+0x11c>
 80040d8:	80002400 	.word	0x80002400
 80040dc:	fe00e800 	.word	0xfe00e800

080040e0 <HAL_I2C_Mem_Write_DMA>:
{
 80040e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e2:	0007      	movs	r7, r0
{
 80040e4:	b089      	sub	sp, #36	; 0x24
 80040e6:	9307      	str	r3, [sp, #28]
 80040e8:	ab0e      	add	r3, sp, #56	; 0x38
 80040ea:	9206      	str	r2, [sp, #24]
 80040ec:	cb04      	ldmia	r3!, {r2}
 80040ee:	9105      	str	r1, [sp, #20]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	9202      	str	r2, [sp, #8]
 80040f4:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	3741      	adds	r7, #65	; 0x41
 80040f8:	783b      	ldrb	r3, [r7, #0]
{
 80040fa:	0004      	movs	r4, r0
    return HAL_BUSY;
 80040fc:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d171      	bne.n	80041e6 <HAL_I2C_Mem_Write_DMA+0x106>
    if ((pData == NULL) || (Size == 0U))
 8004102:	2a00      	cmp	r2, #0
 8004104:	d002      	beq.n	800410c <HAL_I2C_Mem_Write_DMA+0x2c>
 8004106:	9b04      	ldr	r3, [sp, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_I2C_Mem_Write_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004112:	2501      	movs	r5, #1
 8004114:	e067      	b.n	80041e6 <HAL_I2C_Mem_Write_DMA+0x106>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004116:	6803      	ldr	r3, [r0, #0]
 8004118:	699e      	ldr	r6, [r3, #24]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	401e      	ands	r6, r3
 8004120:	d161      	bne.n	80041e6 <HAL_I2C_Mem_Write_DMA+0x106>
    __HAL_LOCK(hi2c);
 8004122:	0003      	movs	r3, r0
 8004124:	3340      	adds	r3, #64	; 0x40
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	2a01      	cmp	r2, #1
 800412a:	d05c      	beq.n	80041e6 <HAL_I2C_Mem_Write_DMA+0x106>
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004130:	f7fe fe82 	bl	8002e38 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004134:	2321      	movs	r3, #33	; 0x21
 8004136:	703b      	strb	r3, [r7, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004138:	0023      	movs	r3, r4
 800413a:	3342      	adds	r3, #66	; 0x42
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	2340      	movs	r3, #64	; 0x40
 8004140:	9a03      	ldr	r2, [sp, #12]
 8004142:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 8004144:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004146:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004148:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800414a:	466b      	mov	r3, sp
 800414c:	8a1b      	ldrh	r3, [r3, #16]
 800414e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_I2C_Mem_Write_DMA+0x13c>)
 8004152:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <HAL_I2C_Mem_Write_DMA+0x140>)
 8004156:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004158:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800415a:	2bff      	cmp	r3, #255	; 0xff
 800415c:	d915      	bls.n	800418a <HAL_I2C_Mem_Write_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800415e:	23ff      	movs	r3, #255	; 0xff
 8004160:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 8004166:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004168:	2319      	movs	r3, #25
 800416a:	9001      	str	r0, [sp, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	9a06      	ldr	r2, [sp, #24]
 8004170:	9b07      	ldr	r3, [sp, #28]
 8004172:	9905      	ldr	r1, [sp, #20]
 8004174:	0020      	movs	r0, r4
 8004176:	f7ff fe13 	bl	8003da0 <I2C_RequestMemoryWrite>
 800417a:	0027      	movs	r7, r4
 800417c:	0006      	movs	r6, r0
 800417e:	3740      	adds	r7, #64	; 0x40
 8004180:	2800      	cmp	r0, #0
 8004182:	d007      	beq.n	8004194 <HAL_I2C_Mem_Write_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 8004184:	2300      	movs	r3, #0
 8004186:	703b      	strb	r3, [r7, #0]
 8004188:	e7c3      	b.n	8004112 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800418a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800418c:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	049b      	lsls	r3, r3, #18
 8004192:	e7e8      	b.n	8004166 <HAL_I2C_Mem_Write_DMA+0x86>
    if (hi2c->hdmatx != NULL)
 8004194:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004196:	2800      	cmp	r0, #0
 8004198:	d028      	beq.n	80041ec <HAL_I2C_Mem_Write_DMA+0x10c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_I2C_Mem_Write_DMA+0x144>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800419c:	6822      	ldr	r2, [r4, #0]
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800419e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_I2C_Mem_Write_DMA+0x148>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80041a2:	6306      	str	r6, [r0, #48]	; 0x30
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80041a4:	6343      	str	r3, [r0, #52]	; 0x34
      hi2c->hdmatx->XferAbortCallback = NULL;
 80041a6:	6386      	str	r6, [r0, #56]	; 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80041a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041aa:	3228      	adds	r2, #40	; 0x28
 80041ac:	9902      	ldr	r1, [sp, #8]
 80041ae:	f7ff fb3f 	bl	8003830 <HAL_DMA_Start_IT>
 80041b2:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 80041b4:	d126      	bne.n	8004204 <HAL_I2C_Mem_Write_DMA+0x124>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80041b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80041b8:	9000      	str	r0, [sp, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	9b04      	ldr	r3, [sp, #16]
 80041be:	9905      	ldr	r1, [sp, #20]
 80041c0:	0020      	movs	r0, r4
 80041c2:	f7ff fce3 	bl	8003b8c <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80041c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80041ca:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80041d2:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 80041d4:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80041d6:	f7ff fcef 	bl	8003bb8 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	01db      	lsls	r3, r3, #7
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6013      	str	r3, [r2, #0]
}
 80041e6:	0028      	movs	r0, r5
 80041e8:	b009      	add	sp, #36	; 0x24
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 80041ec:	0023      	movs	r3, r4
 80041ee:	2220      	movs	r2, #32
 80041f0:	3341      	adds	r3, #65	; 0x41
 80041f2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004200:	7038      	strb	r0, [r7, #0]
 8004202:	e786      	b.n	8004112 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004204:	0023      	movs	r3, r4
 8004206:	2220      	movs	r2, #32
 8004208:	3341      	adds	r3, #65	; 0x41
 800420a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004210:	2310      	movs	r3, #16
 8004212:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004214:	4313      	orrs	r3, r2
 8004216:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004218:	703e      	strb	r6, [r7, #0]
 800421a:	e77a      	b.n	8004112 <HAL_I2C_Mem_Write_DMA+0x32>
 800421c:	ffff0000 	.word	0xffff0000
 8004220:	08004875 	.word	0x08004875
 8004224:	0800499d 	.word	0x0800499d
 8004228:	08004985 	.word	0x08004985

0800422c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800422c:	6803      	ldr	r3, [r0, #0]
{
 800422e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004230:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004232:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004234:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004236:	2b00      	cmp	r3, #0
 8004238:	d000      	beq.n	800423c <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800423a:	4798      	blx	r3
}
 800423c:	bd10      	pop	{r4, pc}

0800423e <HAL_I2C_MasterTxCpltCallback>:
 800423e:	4770      	bx	lr

08004240 <HAL_I2C_MasterRxCpltCallback>:
 8004240:	4770      	bx	lr

08004242 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	0003      	movs	r3, r0
{
 8004244:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	2500      	movs	r5, #0
 8004248:	2220      	movs	r2, #32
 800424a:	0006      	movs	r6, r0
 800424c:	3342      	adds	r3, #66	; 0x42
 800424e:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004250:	3b01      	subs	r3, #1
 8004252:	7819      	ldrb	r1, [r3, #0]
{
 8004254:	0004      	movs	r4, r0
 8004256:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8004258:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800425a:	2921      	cmp	r1, #33	; 0x21
 800425c:	d10a      	bne.n	8004274 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800425e:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8004260:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004262:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004264:	3920      	subs	r1, #32
 8004266:	f7ff fcdb 	bl	8003c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800426a:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800426c:	0020      	movs	r0, r4
 800426e:	f7ff ffe6 	bl	800423e <HAL_I2C_MasterTxCpltCallback>
}
 8004272:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004274:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 8004276:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004278:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800427a:	2102      	movs	r1, #2
 800427c:	f7ff fcd0 	bl	8003c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004280:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004282:	0020      	movs	r0, r4
 8004284:	f7ff ffdc 	bl	8004240 <HAL_I2C_MasterRxCpltCallback>
}
 8004288:	e7f3      	b.n	8004272 <I2C_ITMasterSeqCplt+0x30>

0800428a <HAL_I2C_SlaveTxCpltCallback>:
 800428a:	4770      	bx	lr

0800428c <HAL_I2C_SlaveRxCpltCallback>:
 800428c:	4770      	bx	lr

0800428e <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	0003      	movs	r3, r0
{
 8004290:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	2500      	movs	r5, #0
 8004294:	3342      	adds	r3, #66	; 0x42
 8004296:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004298:	3b01      	subs	r3, #1
 800429a:	781a      	ldrb	r2, [r3, #0]
{
 800429c:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800429e:	2a29      	cmp	r2, #41	; 0x29
 80042a0:	d10d      	bne.n	80042be <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042a2:	3a01      	subs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a6:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042a8:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042aa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042ac:	f7ff fcb8 	bl	8003c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042b0:	0023      	movs	r3, r4
 80042b2:	3340      	adds	r3, #64	; 0x40
 80042b4:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042b6:	0020      	movs	r0, r4
 80042b8:	f7ff ffe7 	bl	800428a <HAL_I2C_SlaveTxCpltCallback>
}
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	2a2a      	cmp	r2, #42	; 0x2a
 80042c2:	d1fb      	bne.n	80042bc <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042c4:	3a02      	subs	r2, #2
 80042c6:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042c8:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042ca:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042cc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042ce:	f7ff fca7 	bl	8003c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042d2:	0023      	movs	r3, r4
 80042d4:	3340      	adds	r3, #64	; 0x40
 80042d6:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042d8:	0020      	movs	r0, r4
 80042da:	f7ff ffd7 	bl	800428c <HAL_I2C_SlaveRxCpltCallback>
}
 80042de:	e7ed      	b.n	80042bc <I2C_ITSlaveSeqCplt+0x2e>

080042e0 <HAL_I2C_AddrCallback>:
}
 80042e0:	4770      	bx	lr

080042e2 <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042e2:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80042e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042e6:	3341      	adds	r3, #65	; 0x41
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80042ec:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ee:	401a      	ands	r2, r3
 80042f0:	6803      	ldr	r3, [r0, #0]
 80042f2:	2a28      	cmp	r2, #40	; 0x28
 80042f4:	d137      	bne.n	8004366 <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042f6:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80042f8:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042fa:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80042fc:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80042fe:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8004300:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004302:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004304:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004306:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8004308:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800430a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430c:	2902      	cmp	r1, #2
 800430e:	d121      	bne.n	8004354 <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004310:	0592      	lsls	r2, r2, #22
 8004312:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004314:	09d1      	lsrs	r1, r2, #7
 8004316:	404e      	eors	r6, r1
 8004318:	2106      	movs	r1, #6
 800431a:	400e      	ands	r6, r1
 800431c:	d110      	bne.n	8004340 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 800431e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004320:	3101      	adds	r1, #1
 8004322:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004324:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004326:	2902      	cmp	r1, #2
 8004328:	d109      	bne.n	800433e <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800432a:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800432c:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800432e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004330:	0003      	movs	r3, r0
 8004332:	3340      	adds	r3, #64	; 0x40
 8004334:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004336:	0029      	movs	r1, r5
 8004338:	0020      	movs	r0, r4
 800433a:	f7ff ffd1 	bl	80042e0 <HAL_I2C_AddrCallback>
}
 800433e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004340:	2104      	movs	r1, #4
 8004342:	f7ff fc6d 	bl	8003c20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004346:	0023      	movs	r3, r4
 8004348:	2200      	movs	r2, #0
 800434a:	3340      	adds	r3, #64	; 0x40
 800434c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800434e:	9a01      	ldr	r2, [sp, #4]
 8004350:	403a      	ands	r2, r7
 8004352:	e7f0      	b.n	8004336 <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004354:	2104      	movs	r1, #4
 8004356:	f7ff fc63 	bl	8003c20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800435a:	0023      	movs	r3, r4
 800435c:	2200      	movs	r2, #0
 800435e:	3340      	adds	r3, #64	; 0x40
 8004360:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004362:	0032      	movs	r2, r6
 8004364:	e7e7      	b.n	8004336 <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004366:	2208      	movs	r2, #8
 8004368:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	3440      	adds	r4, #64	; 0x40
 800436e:	7023      	strb	r3, [r4, #0]
 8004370:	e7e5      	b.n	800433e <I2C_ITAddrCplt.isra.8+0x5c>

08004372 <HAL_I2C_ListenCpltCallback>:
 8004372:	4770      	bx	lr

08004374 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <I2C_ITListenCplt+0x64>)
{
 8004376:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004378:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800437c:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800437e:	6303      	str	r3, [r0, #48]	; 0x30
{
 8004380:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8004382:	2020      	movs	r0, #32
 8004384:	3241      	adds	r2, #65	; 0x41
 8004386:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800438a:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 800438c:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800438e:	4211      	tst	r1, r2
 8004390:	d012      	beq.n	80043b8 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800439a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439c:	3301      	adds	r3, #1
 800439e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80043a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80043a6:	3b01      	subs	r3, #1
 80043a8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043b4:	431a      	orrs	r2, r3
 80043b6:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043b8:	2107      	movs	r1, #7
 80043ba:	0020      	movs	r0, r4
 80043bc:	f7ff fc30 	bl	8003c20 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c0:	2210      	movs	r2, #16
 80043c2:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80043c4:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80043c8:	0023      	movs	r3, r4
 80043ca:	2200      	movs	r2, #0
 80043cc:	3340      	adds	r3, #64	; 0x40
 80043ce:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80043d0:	f7ff ffcf 	bl	8004372 <HAL_I2C_ListenCpltCallback>
}
 80043d4:	bd10      	pop	{r4, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	ffff0000 	.word	0xffff0000

080043dc <HAL_I2C_MemRxCpltCallback>:
 80043dc:	4770      	bx	lr

080043de <HAL_I2C_ErrorCallback>:
 80043de:	4770      	bx	lr

080043e0 <HAL_I2C_AbortCpltCallback>:
}
 80043e0:	4770      	bx	lr
	...

080043e4 <I2C_ITError>:
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043e6:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043e8:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ea:	2600      	movs	r6, #0
 80043ec:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043ee:	3541      	adds	r5, #65	; 0x41
 80043f0:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043f2:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043f4:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80043f6:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043f8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043fa:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80043fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80043fe:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8004400:	4311      	orrs	r1, r2
 8004402:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004404:	2b02      	cmp	r3, #2
 8004406:	d822      	bhi.n	800444e <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004408:	2103      	movs	r1, #3
 800440a:	f7ff fc09 	bl	8003c20 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800440e:	2328      	movs	r3, #40	; 0x28
 8004410:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8004414:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004416:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8004418:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	01d2      	lsls	r2, r2, #7
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004422:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004424:	d01e      	beq.n	8004464 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004426:	4925      	ldr	r1, [pc, #148]	; (80044bc <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8004428:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800442a:	400a      	ands	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800442e:	2800      	cmp	r0, #0
 8004430:	d00c      	beq.n	800444c <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004432:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 8004434:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004436:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004438:	0023      	movs	r3, r4
 800443a:	3340      	adds	r3, #64	; 0x40
 800443c:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800443e:	f7ff fa37 	bl	80038b0 <HAL_DMA_Abort_IT>
 8004442:	2800      	cmp	r0, #0
 8004444:	d002      	beq.n	800444c <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004446:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004448:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800444a:	4798      	blx	r3
}
 800444c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800444e:	2107      	movs	r1, #7
 8004450:	f7ff fbe6 	bl	8003c20 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004454:	782b      	ldrb	r3, [r5, #0]
 8004456:	2b60      	cmp	r3, #96	; 0x60
 8004458:	d001      	beq.n	800445e <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800445a:	2320      	movs	r3, #32
 800445c:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	6323      	str	r3, [r4, #48]	; 0x30
 8004462:	e7d8      	b.n	8004416 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004464:	2080      	movs	r0, #128	; 0x80
 8004466:	0200      	lsls	r0, r0, #8
 8004468:	4002      	ands	r2, r0
 800446a:	d011      	beq.n	8004490 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4815      	ldr	r0, [pc, #84]	; (80044c4 <I2C_ITError+0xe0>)
 8004470:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8004472:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004474:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004476:	2800      	cmp	r0, #0
 8004478:	d0e8      	beq.n	800444c <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <I2C_ITError+0xdc>)
 800447c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800447e:	0023      	movs	r3, r4
 8004480:	3340      	adds	r3, #64	; 0x40
 8004482:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004484:	f7ff fa14 	bl	80038b0 <HAL_DMA_Abort_IT>
 8004488:	2800      	cmp	r0, #0
 800448a:	d0df      	beq.n	800444c <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800448c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800448e:	e7db      	b.n	8004448 <I2C_ITError+0x64>
 8004490:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004492:	7829      	ldrb	r1, [r5, #0]
 8004494:	3340      	adds	r3, #64	; 0x40
 8004496:	2960      	cmp	r1, #96	; 0x60
 8004498:	d106      	bne.n	80044a8 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	3940      	subs	r1, #64	; 0x40
 800449c:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800449e:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80044a0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80044a2:	f7ff ff9d 	bl	80043e0 <HAL_I2C_AbortCpltCallback>
 80044a6:	e7d1      	b.n	800444c <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 80044a8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80044aa:	0020      	movs	r0, r4
 80044ac:	f7ff ff97 	bl	80043de <HAL_I2C_ErrorCallback>
}
 80044b0:	e7cc      	b.n	800444c <I2C_ITError+0x68>
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	ffff0000 	.word	0xffff0000
 80044b8:	080045bd 	.word	0x080045bd
 80044bc:	ffffbfff 	.word	0xffffbfff
 80044c0:	08004a45 	.word	0x08004a45
 80044c4:	ffff7fff 	.word	0xffff7fff

080044c8 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c8:	2220      	movs	r2, #32
{
 80044ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044cc:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044ce:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044d0:	6803      	ldr	r3, [r0, #0]
{
 80044d2:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044d4:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80044d6:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80044da:	f7ff fba1 	bl	8003c20 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	022d      	lsls	r5, r5, #8
 80044e2:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80044e4:	4933      	ldr	r1, [pc, #204]	; (80045b4 <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044e6:	432a      	orrs	r2, r5
 80044e8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80044ea:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80044ec:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 80044ee:	400a      	ands	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80044f2:	f7ff fb3d 	bl	8003b70 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044f6:	0473      	lsls	r3, r6, #17
 80044f8:	d538      	bpl.n	800456c <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 80044fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	b29b      	uxth	r3, r3
 8004506:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004508:	2304      	movs	r3, #4
 800450a:	421f      	tst	r7, r3
 800450c:	d010      	beq.n	8004530 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800450e:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8004518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800451e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8004524:	3b01      	subs	r3, #1
 8004526:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800452a:	3b01      	subs	r3, #1
 800452c:	b29b      	uxth	r3, r3
 800452e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004536:	2304      	movs	r3, #4
 8004538:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800453a:	4313      	orrs	r3, r2
 800453c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	2300      	movs	r3, #0
 8004542:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8004546:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800454a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800454c:	6363      	str	r3, [r4, #52]	; 0x34
 800454e:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004550:	429e      	cmp	r6, r3
 8004552:	d00f      	beq.n	8004574 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004554:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004556:	0020      	movs	r0, r4
 8004558:	f7ff ff44 	bl	80043e4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800455c:	782b      	ldrb	r3, [r5, #0]
 800455e:	2b28      	cmp	r3, #40	; 0x28
 8004560:	d103      	bne.n	800456a <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004562:	0039      	movs	r1, r7
 8004564:	0020      	movs	r0, r4
 8004566:	f7ff ff05 	bl	8004374 <I2C_ITListenCplt>
}
 800456a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800456c:	422e      	tst	r6, r5
 800456e:	d0cb      	beq.n	8004508 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8004570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004572:	e7c3      	b.n	80044fc <I2C_ITSlaveCplt+0x34>
 8004574:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004578:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <I2C_ITSlaveCplt+0xf0>)
 800457a:	3740      	adds	r7, #64	; 0x40
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004580:	0020      	movs	r0, r4
 8004582:	f7ff fe84 	bl	800428e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8004588:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800458c:	2320      	movs	r3, #32
 800458e:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004590:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004592:	f7ff feee 	bl	8004372 <HAL_I2C_ListenCpltCallback>
 8004596:	e7e8      	b.n	800456a <I2C_ITSlaveCplt+0xa2>
 8004598:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800459a:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800459c:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80045a0:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045a2:	2a22      	cmp	r2, #34	; 0x22
 80045a4:	d102      	bne.n	80045ac <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a6:	f7ff fe71 	bl	800428c <HAL_I2C_SlaveRxCpltCallback>
 80045aa:	e7de      	b.n	800456a <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ac:	f7ff fe6d 	bl	800428a <HAL_I2C_SlaveTxCpltCallback>
}
 80045b0:	e7db      	b.n	800456a <I2C_ITSlaveCplt+0xa2>
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	fe00e800 	.word	0xfe00e800
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_Slave_ISR_IT>:
{
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80045be:	0007      	movs	r7, r0
 80045c0:	3740      	adds	r7, #64	; 0x40
{
 80045c2:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80045c4:	783a      	ldrb	r2, [r7, #0]
{
 80045c6:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80045c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 80045ca:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 80045cc:	2002      	movs	r0, #2
 80045ce:	2a01      	cmp	r2, #1
 80045d0:	d021      	beq.n	8004616 <I2C_Slave_ISR_IT+0x5a>
 80045d2:	2201      	movs	r2, #1
 80045d4:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045d6:	320f      	adds	r2, #15
 80045d8:	4211      	tst	r1, r2
 80045da:	d03b      	beq.n	8004654 <I2C_Slave_ISR_IT+0x98>
 80045dc:	4216      	tst	r6, r2
 80045de:	d039      	beq.n	8004654 <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 80045e0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d128      	bne.n	8004638 <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80045e6:	0022      	movs	r2, r4
 80045e8:	3241      	adds	r2, #65	; 0x41
 80045ea:	7811      	ldrb	r1, [r2, #0]
 80045ec:	2928      	cmp	r1, #40	; 0x28
 80045ee:	d113      	bne.n	8004618 <I2C_Slave_ISR_IT+0x5c>
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	0489      	lsls	r1, r1, #18
 80045f4:	428b      	cmp	r3, r1
 80045f6:	d10f      	bne.n	8004618 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045f8:	0029      	movs	r1, r5
 80045fa:	0020      	movs	r0, r4
 80045fc:	f7ff feba 	bl	8004374 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004600:	2320      	movs	r3, #32
 8004602:	421d      	tst	r5, r3
 8004604:	d005      	beq.n	8004612 <I2C_Slave_ISR_IT+0x56>
 8004606:	421e      	tst	r6, r3
 8004608:	d003      	beq.n	8004612 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800460a:	0029      	movs	r1, r5
 800460c:	0020      	movs	r0, r4
 800460e:	f7ff ff5b 	bl	80044c8 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8004612:	2000      	movs	r0, #0
 8004614:	7038      	strb	r0, [r7, #0]
}
 8004616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004618:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800461a:	7810      	ldrb	r0, [r2, #0]
 800461c:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461e:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004620:	2829      	cmp	r0, #41	; 0x29
 8004622:	d1ed      	bne.n	8004600 <I2C_Slave_ISR_IT+0x44>
 8004624:	482c      	ldr	r0, [pc, #176]	; (80046d8 <I2C_Slave_ISR_IT+0x11c>)
 8004626:	4283      	cmp	r3, r0
 8004628:	d0ea      	beq.n	8004600 <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 800462a:	0020      	movs	r0, r4
 800462c:	f7ff faa0 	bl	8003b70 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004630:	0020      	movs	r0, r4
 8004632:	f7ff fe2c 	bl	800428e <I2C_ITSlaveSeqCplt>
 8004636:	e7e3      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800463c:	2204      	movs	r2, #4
 800463e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004640:	430a      	orrs	r2, r1
 8004642:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004644:	4a25      	ldr	r2, [pc, #148]	; (80046dc <I2C_Slave_ISR_IT+0x120>)
 8004646:	4213      	tst	r3, r2
 8004648:	d1da      	bne.n	8004600 <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800464a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800464c:	0020      	movs	r0, r4
 800464e:	f7ff fec9 	bl	80043e4 <I2C_ITError>
 8004652:	e7d5      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004654:	2204      	movs	r2, #4
 8004656:	4215      	tst	r5, r2
 8004658:	d01a      	beq.n	8004690 <I2C_Slave_ISR_IT+0xd4>
 800465a:	4216      	tst	r6, r2
 800465c:	d018      	beq.n	8004690 <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 800465e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004660:	2900      	cmp	r1, #0
 8004662:	d00e      	beq.n	8004682 <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8004664:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800466a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466c:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800466e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004670:	3201      	adds	r2, #1
 8004672:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004674:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004676:	3a01      	subs	r2, #1
 8004678:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800467a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800467c:	3a01      	subs	r2, #1
 800467e:	b292      	uxth	r2, r2
 8004680:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8004682:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004684:	2a00      	cmp	r2, #0
 8004686:	d1bb      	bne.n	8004600 <I2C_Slave_ISR_IT+0x44>
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <I2C_Slave_ISR_IT+0x11c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d1d0      	bne.n	8004630 <I2C_Slave_ISR_IT+0x74>
 800468e:	e7b7      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004690:	2208      	movs	r2, #8
 8004692:	4215      	tst	r5, r2
 8004694:	d005      	beq.n	80046a2 <I2C_Slave_ISR_IT+0xe6>
 8004696:	4216      	tst	r6, r2
 8004698:	d003      	beq.n	80046a2 <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800469a:	0020      	movs	r0, r4
 800469c:	f7ff fe21 	bl	80042e2 <I2C_ITAddrCplt.isra.8>
 80046a0:	e7ae      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046a2:	2202      	movs	r2, #2
 80046a4:	4215      	tst	r5, r2
 80046a6:	d0ab      	beq.n	8004600 <I2C_Slave_ISR_IT+0x44>
 80046a8:	4216      	tst	r6, r2
 80046aa:	d0a9      	beq.n	8004600 <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 80046ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	d00d      	beq.n	80046ce <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80046b8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ba:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80046bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80046be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046c8:	3b01      	subs	r3, #1
 80046ca:	8523      	strh	r3, [r4, #40]	; 0x28
 80046cc:	e798      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046ce:	4a03      	ldr	r2, [pc, #12]	; (80046dc <I2C_Slave_ISR_IT+0x120>)
 80046d0:	4213      	tst	r3, r2
 80046d2:	d000      	beq.n	80046d6 <I2C_Slave_ISR_IT+0x11a>
 80046d4:	e794      	b.n	8004600 <I2C_Slave_ISR_IT+0x44>
 80046d6:	e7ab      	b.n	8004630 <I2C_Slave_ISR_IT+0x74>
 80046d8:	ffff0000 	.word	0xffff0000
 80046dc:	feffffff 	.word	0xfeffffff

080046e0 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e0:	2220      	movs	r2, #32
 80046e2:	6803      	ldr	r3, [r0, #0]
{
 80046e4:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e6:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80046e8:	685a      	ldr	r2, [r3, #4]
{
 80046ea:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 80046ec:	4827      	ldr	r0, [pc, #156]	; (800478c <I2C_ITMasterCplt+0xac>)
 80046ee:	4002      	ands	r2, r0
 80046f0:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80046f2:	2200      	movs	r2, #0
 80046f4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80046f6:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046f8:	4a25      	ldr	r2, [pc, #148]	; (8004790 <I2C_ITMasterCplt+0xb0>)
 80046fa:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80046fc:	2210      	movs	r2, #16
 80046fe:	4211      	tst	r1, r2
 8004700:	d004      	beq.n	800470c <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004704:	2304      	movs	r3, #4
 8004706:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004708:	4313      	orrs	r3, r2
 800470a:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800470c:	0020      	movs	r0, r4
 800470e:	f7ff fa2f 	bl	8003b70 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004712:	2103      	movs	r1, #3
 8004714:	0020      	movs	r0, r4
 8004716:	f7ff fa83 	bl	8003c20 <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800471a:	0022      	movs	r2, r4
 800471c:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 800471e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004720:	7811      	ldrb	r1, [r2, #0]
 8004722:	2960      	cmp	r1, #96	; 0x60
 8004724:	d001      	beq.n	800472a <I2C_ITMasterCplt+0x4a>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800472a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800472c:	0020      	movs	r0, r4
 800472e:	f7ff fe59 	bl	80043e4 <I2C_ITError>
}
 8004732:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004734:	7811      	ldrb	r1, [r2, #0]
 8004736:	2921      	cmp	r1, #33	; 0x21
 8004738:	d112      	bne.n	8004760 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 800473a:	3901      	subs	r1, #1
 800473c:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800473e:	0022      	movs	r2, r4
 8004740:	0021      	movs	r1, r4
 8004742:	3242      	adds	r2, #66	; 0x42
 8004744:	7810      	ldrb	r0, [r2, #0]
 8004746:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800474a:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800474c:	2840      	cmp	r0, #64	; 0x40
 800474e:	d103      	bne.n	8004758 <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004750:	0020      	movs	r0, r4
 8004752:	f006 fcfb 	bl	800b14c <HAL_I2C_MemTxCpltCallback>
 8004756:	e7ec      	b.n	8004732 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004758:	0020      	movs	r0, r4
 800475a:	f7ff fd70 	bl	800423e <HAL_I2C_MasterTxCpltCallback>
 800475e:	e7e8      	b.n	8004732 <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004760:	7811      	ldrb	r1, [r2, #0]
 8004762:	2922      	cmp	r1, #34	; 0x22
 8004764:	d1e5      	bne.n	8004732 <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	3902      	subs	r1, #2
 8004768:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800476a:	0022      	movs	r2, r4
 800476c:	0021      	movs	r1, r4
 800476e:	3242      	adds	r2, #66	; 0x42
 8004770:	7810      	ldrb	r0, [r2, #0]
 8004772:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8004776:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004778:	2840      	cmp	r0, #64	; 0x40
 800477a:	d103      	bne.n	8004784 <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800477c:	0020      	movs	r0, r4
 800477e:	f7ff fe2d 	bl	80043dc <HAL_I2C_MemRxCpltCallback>
 8004782:	e7d6      	b.n	8004732 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004784:	0020      	movs	r0, r4
 8004786:	f7ff fd5b 	bl	8004240 <HAL_I2C_MasterRxCpltCallback>
}
 800478a:	e7d2      	b.n	8004732 <I2C_ITMasterCplt+0x52>
 800478c:	fe00e800 	.word	0xfe00e800
 8004790:	ffff0000 	.word	0xffff0000

08004794 <I2C_Slave_ISR_DMA>:
{
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8004796:	0005      	movs	r5, r0
 8004798:	3540      	adds	r5, #64	; 0x40
 800479a:	782b      	ldrb	r3, [r5, #0]
{
 800479c:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800479e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80047a0:	2002      	movs	r0, #2
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d02d      	beq.n	8004802 <I2C_Slave_ISR_DMA+0x6e>
 80047a6:	2301      	movs	r3, #1
 80047a8:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80047aa:	330f      	adds	r3, #15
 80047ac:	4219      	tst	r1, r3
 80047ae:	d04b      	beq.n	8004848 <I2C_Slave_ISR_DMA+0xb4>
 80047b0:	421a      	tst	r2, r3
 80047b2:	d049      	beq.n	8004848 <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047b4:	20c0      	movs	r0, #192	; 0xc0
 80047b6:	0200      	lsls	r0, r0, #8
 80047b8:	4202      	tst	r2, r0
 80047ba:	d042      	beq.n	8004842 <I2C_Slave_ISR_DMA+0xae>
      if (hi2c->hdmarx != NULL)
 80047bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 80047be:	1e03      	subs	r3, r0, #0
      if (hi2c->hdmarx != NULL)
 80047c0:	d006      	beq.n	80047d0 <I2C_Slave_ISR_DMA+0x3c>
  uint32_t treatdmanack = 0U;
 80047c2:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80047c4:	0417      	lsls	r7, r2, #16
 80047c6:	d503      	bpl.n	80047d0 <I2C_Slave_ISR_DMA+0x3c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80047c8:	6803      	ldr	r3, [r0, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 80047cc:	4258      	negs	r0, r3
 80047ce:	4143      	adcs	r3, r0
      if (hi2c->hdmatx != NULL)
 80047d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d005      	beq.n	80047e2 <I2C_Slave_ISR_DMA+0x4e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80047d6:	0452      	lsls	r2, r2, #17
 80047d8:	d503      	bpl.n	80047e2 <I2C_Slave_ISR_DMA+0x4e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80047da:	6802      	ldr	r2, [r0, #0]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	2a00      	cmp	r2, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_Slave_ISR_DMA+0x52>
      if (treatdmanack == 1U)
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d11e      	bne.n	8004824 <I2C_Slave_ISR_DMA+0x90>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80047e6:	0023      	movs	r3, r4
 80047e8:	3341      	adds	r3, #65	; 0x41
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	2a28      	cmp	r2, #40	; 0x28
 80047ee:	d109      	bne.n	8004804 <I2C_Slave_ISR_DMA+0x70>
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	0492      	lsls	r2, r2, #18
 80047f4:	4296      	cmp	r6, r2
 80047f6:	d105      	bne.n	8004804 <I2C_Slave_ISR_DMA+0x70>
          I2C_ITListenCplt(hi2c, ITFlags);
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7ff fdbb 	bl	8004374 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 80047fe:	2000      	movs	r0, #0
 8004800:	7028      	strb	r0, [r5, #0]
}
 8004802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004804:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004806:	7819      	ldrb	r1, [r3, #0]
 8004808:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480a:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800480c:	2929      	cmp	r1, #41	; 0x29
 800480e:	d1f6      	bne.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <I2C_Slave_ISR_DMA+0xd8>)
 8004812:	428e      	cmp	r6, r1
 8004814:	d0f3      	beq.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
          I2C_Flush_TXDR(hi2c);
 8004816:	0020      	movs	r0, r4
 8004818:	f7ff f9aa 	bl	8003b70 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800481c:	0020      	movs	r0, r4
 800481e:	f7ff fd36 	bl	800428e <I2C_ITSlaveSeqCplt>
 8004822:	e7ec      	b.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	2210      	movs	r2, #16
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482a:	2304      	movs	r3, #4
 800482c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800482e:	4313      	orrs	r3, r2
 8004830:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <I2C_Slave_ISR_DMA+0xdc>)
 8004834:	421e      	tst	r6, r3
 8004836:	d1e2      	bne.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004838:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800483a:	0020      	movs	r0, r4
 800483c:	f7ff fdd2 	bl	80043e4 <I2C_ITError>
 8004840:	e7dd      	b.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	61d3      	str	r3, [r2, #28]
 8004846:	e7da      	b.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004848:	2308      	movs	r3, #8
 800484a:	4219      	tst	r1, r3
 800484c:	d005      	beq.n	800485a <I2C_Slave_ISR_DMA+0xc6>
 800484e:	421a      	tst	r2, r3
 8004850:	d003      	beq.n	800485a <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004852:	0020      	movs	r0, r4
 8004854:	f7ff fd45 	bl	80042e2 <I2C_ITAddrCplt.isra.8>
 8004858:	e7d1      	b.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800485a:	2320      	movs	r3, #32
 800485c:	4219      	tst	r1, r3
 800485e:	d0ce      	beq.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
 8004860:	421a      	tst	r2, r3
 8004862:	d0cc      	beq.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004864:	0020      	movs	r0, r4
 8004866:	f7ff fe2f 	bl	80044c8 <I2C_ITSlaveCplt>
 800486a:	e7c8      	b.n	80047fe <I2C_Slave_ISR_DMA+0x6a>
 800486c:	ffff0000 	.word	0xffff0000
 8004870:	feffffff 	.word	0xfeffffff

08004874 <I2C_Master_ISR_DMA>:
{
 8004874:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8004876:	0005      	movs	r5, r0
 8004878:	3540      	adds	r5, #64	; 0x40
 800487a:	782b      	ldrb	r3, [r5, #0]
{
 800487c:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 800487e:	2002      	movs	r0, #2
 8004880:	2b01      	cmp	r3, #1
 8004882:	d015      	beq.n	80048b0 <I2C_Master_ISR_DMA+0x3c>
 8004884:	2301      	movs	r3, #1
 8004886:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004888:	330f      	adds	r3, #15
 800488a:	4219      	tst	r1, r3
 800488c:	d011      	beq.n	80048b2 <I2C_Master_ISR_DMA+0x3e>
 800488e:	421a      	tst	r2, r3
 8004890:	d00f      	beq.n	80048b2 <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004894:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004896:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004898:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800489a:	3b0c      	subs	r3, #12
 800489c:	4313      	orrs	r3, r2
 800489e:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80048a0:	2112      	movs	r1, #18
 80048a2:	f7ff f989 	bl	8003bb8 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80048a6:	0020      	movs	r0, r4
 80048a8:	f7ff f962 	bl	8003b70 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80048ac:	2000      	movs	r0, #0
 80048ae:	7028      	strb	r0, [r5, #0]
}
 80048b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80048b2:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048b4:	0608      	lsls	r0, r1, #24
 80048b6:	d544      	bpl.n	8004942 <I2C_Master_ISR_DMA+0xce>
 80048b8:	421a      	tst	r2, r3
 80048ba:	d042      	beq.n	8004942 <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	6811      	ldr	r1, [r2, #0]
 80048c0:	4399      	bics	r1, r3
 80048c2:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 80048c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d02f      	beq.n	800492a <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80048ca:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80048ce:	0589      	lsls	r1, r1, #22
 80048d0:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d2:	2bff      	cmp	r3, #255	; 0xff
 80048d4:	d91b      	bls.n	800490e <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d6:	23ff      	movs	r3, #255	; 0xff
 80048d8:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80048de:	2000      	movs	r0, #0
 80048e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	0020      	movs	r0, r4
 80048e8:	f7ff f950 	bl	8003b8c <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80048ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048f6:	0023      	movs	r3, r4
 80048f8:	3341      	adds	r3, #65	; 0x41
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80048fe:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004900:	2a22      	cmp	r2, #34	; 0x22
 8004902:	d10f      	bne.n	8004924 <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e7ce      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 800490e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004910:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8004912:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <I2C_Master_ISR_DMA+0x10c>)
 8004916:	429a      	cmp	r2, r3
 8004918:	d001      	beq.n	800491e <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 800491a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800491c:	e7df      	b.n	80048de <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	049b      	lsls	r3, r3, #18
 8004922:	e7dc      	b.n	80048de <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	01d2      	lsls	r2, r2, #7
 8004928:	e7ee      	b.n	8004908 <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800492a:	6853      	ldr	r3, [r2, #4]
 800492c:	019b      	lsls	r3, r3, #6
 800492e:	d403      	bmi.n	8004938 <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 8004930:	0020      	movs	r0, r4
 8004932:	f7ff fc86 	bl	8004242 <I2C_ITMasterSeqCplt>
 8004936:	e7b9      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	0020      	movs	r0, r4
 800493c:	f7ff fd52 	bl	80043e4 <I2C_ITError>
 8004940:	e7b4      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004942:	4219      	tst	r1, r3
 8004944:	d012      	beq.n	800496c <I2C_Master_ISR_DMA+0xf8>
 8004946:	421a      	tst	r2, r3
 8004948:	d010      	beq.n	800496c <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 800494a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f3      	bne.n	8004938 <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	0192      	lsls	r2, r2, #6
 8004956:	d4a9      	bmi.n	80048ac <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <I2C_Master_ISR_DMA+0x10c>)
 800495c:	4291      	cmp	r1, r2
 800495e:	d1e7      	bne.n	8004930 <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	01d2      	lsls	r2, r2, #7
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e79f      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800496c:	2320      	movs	r3, #32
 800496e:	4219      	tst	r1, r3
 8004970:	d09c      	beq.n	80048ac <I2C_Master_ISR_DMA+0x38>
 8004972:	421a      	tst	r2, r3
 8004974:	d100      	bne.n	8004978 <I2C_Master_ISR_DMA+0x104>
 8004976:	e799      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004978:	0020      	movs	r0, r4
 800497a:	f7ff feb1 	bl	80046e0 <I2C_ITMasterCplt>
 800497e:	e795      	b.n	80048ac <I2C_Master_ISR_DMA+0x38>
 8004980:	ffff0000 	.word	0xffff0000

08004984 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004984:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004986:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004988:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800498a:	6802      	ldr	r2, [r0, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	6851      	ldr	r1, [r2, #4]
 8004990:	430b      	orrs	r3, r1
 8004992:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004994:	2110      	movs	r1, #16
 8004996:	f7ff fd25 	bl	80043e4 <I2C_ITError>
}
 800499a:	bd10      	pop	{r4, pc}

0800499c <I2C_DMAMasterTransmitCplt>:
{
 800499c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800499e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049a0:	4911      	ldr	r1, [pc, #68]	; (80049e8 <I2C_DMAMasterTransmitCplt+0x4c>)
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	400b      	ands	r3, r1
 80049a8:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80049aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80049b0:	2112      	movs	r1, #18
 80049b2:	0020      	movs	r0, r4
 80049b4:	f7ff f900 	bl	8003bb8 <I2C_Enable_IRQ>
}
 80049b8:	e013      	b.n	80049e2 <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 80049ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049bc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80049be:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 80049c2:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c4:	2bff      	cmp	r3, #255	; 0xff
 80049c6:	d90d      	bls.n	80049e4 <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c8:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 80049ca:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 80049cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049ce:	3228      	adds	r2, #40	; 0x28
 80049d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049d2:	f7fe ff2d 	bl	8003830 <HAL_DMA_Start_IT>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d0ea      	beq.n	80049b0 <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80049da:	2110      	movs	r1, #16
 80049dc:	0020      	movs	r0, r4
 80049de:	f7ff fd01 	bl	80043e4 <I2C_ITError>
}
 80049e2:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 80049e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049e6:	e7f0      	b.n	80049ca <I2C_DMAMasterTransmitCplt+0x2e>
 80049e8:	ffffbfff 	.word	0xffffbfff

080049ec <HAL_I2C_ER_IRQHandler>:
{
 80049ec:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049ee:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049f0:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049f2:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80049f4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049f6:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049f8:	4229      	tst	r1, r5
 80049fa:	d006      	beq.n	8004a0a <HAL_I2C_ER_IRQHandler+0x1e>
 80049fc:	0614      	lsls	r4, r2, #24
 80049fe:	d504      	bpl.n	8004a0a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004a00:	2401      	movs	r4, #1
 8004a02:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8004a04:	4334      	orrs	r4, r6
 8004a06:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a08:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a0a:	2580      	movs	r5, #128	; 0x80
 8004a0c:	00ed      	lsls	r5, r5, #3
 8004a0e:	4229      	tst	r1, r5
 8004a10:	d006      	beq.n	8004a20 <HAL_I2C_ER_IRQHandler+0x34>
 8004a12:	0614      	lsls	r4, r2, #24
 8004a14:	d504      	bpl.n	8004a20 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004a16:	2408      	movs	r4, #8
 8004a18:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8004a1a:	4334      	orrs	r4, r6
 8004a1c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a1e:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a20:	2480      	movs	r4, #128	; 0x80
 8004a22:	00a4      	lsls	r4, r4, #2
 8004a24:	4221      	tst	r1, r4
 8004a26:	d006      	beq.n	8004a36 <HAL_I2C_ER_IRQHandler+0x4a>
 8004a28:	0612      	lsls	r2, r2, #24
 8004a2a:	d504      	bpl.n	8004a36 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004a30:	430a      	orrs	r2, r1
 8004a32:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a34:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a36:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8004a38:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a3a:	4219      	tst	r1, r3
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8004a3e:	f7ff fcd1 	bl	80043e4 <I2C_ITError>
}
 8004a42:	bd70      	pop	{r4, r5, r6, pc}

08004a44 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004a44:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a46:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004a48:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004a4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004a4c:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004a4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004a50:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a52:	0003      	movs	r3, r0
 8004a54:	3341      	adds	r3, #65	; 0x41
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	2a60      	cmp	r2, #96	; 0x60
 8004a5a:	d104      	bne.n	8004a66 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	3a40      	subs	r2, #64	; 0x40
 8004a5e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a60:	f7ff fcbe 	bl	80043e0 <HAL_I2C_AbortCpltCallback>
}
 8004a64:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8004a66:	f7ff fcba 	bl	80043de <HAL_I2C_ErrorCallback>
}
 8004a6a:	e7fb      	b.n	8004a64 <I2C_DMAAbort+0x20>

08004a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	0004      	movs	r4, r0
 8004a70:	3441      	adds	r4, #65	; 0x41
 8004a72:	7822      	ldrb	r2, [r4, #0]
{
 8004a74:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	2a20      	cmp	r2, #32
 8004a7c:	d118      	bne.n	8004ab0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8004a7e:	001d      	movs	r5, r3
 8004a80:	3540      	adds	r5, #64	; 0x40
 8004a82:	782e      	ldrb	r6, [r5, #0]
 8004a84:	2e01      	cmp	r6, #1
 8004a86:	d013      	beq.n	8004ab0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8004a88:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8a:	3022      	adds	r0, #34	; 0x22
 8004a8c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004a8e:	681e      	ldr	r6, [r3, #0]
 8004a90:	3823      	subs	r0, #35	; 0x23
 8004a92:	4386      	bics	r6, r0
 8004a94:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a96:	681e      	ldr	r6, [r3, #0]
 8004a98:	4f06      	ldr	r7, [pc, #24]	; (8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8004a9a:	403e      	ands	r6, r7
 8004a9c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a9e:	681e      	ldr	r6, [r3, #0]
 8004aa0:	4331      	orrs	r1, r6
 8004aa2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	4308      	orrs	r0, r1
 8004aa8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004aaa:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004aae:	7028      	strb	r0, [r5, #0]
  }
}
 8004ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	ffffefff 	.word	0xffffefff

08004ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aba:	0005      	movs	r5, r0
 8004abc:	3541      	adds	r5, #65	; 0x41
 8004abe:	782a      	ldrb	r2, [r5, #0]
{
 8004ac0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	2a20      	cmp	r2, #32
 8004ac8:	d117      	bne.n	8004afa <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8004aca:	001c      	movs	r4, r3
 8004acc:	3440      	adds	r4, #64	; 0x40
 8004ace:	7826      	ldrb	r6, [r4, #0]
 8004ad0:	2e01      	cmp	r6, #1
 8004ad2:	d012      	beq.n	8004afa <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8004ad4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad6:	3022      	adds	r0, #34	; 0x22
 8004ad8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004ada:	681e      	ldr	r6, [r3, #0]
 8004adc:	3823      	subs	r0, #35	; 0x23
 8004ade:	4386      	bics	r6, r0
 8004ae0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004ae2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004ae4:	4f05      	ldr	r7, [pc, #20]	; (8004afc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8004ae6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004ae8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8004aea:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004aec:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	4308      	orrs	r0, r1
 8004af2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004af4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004af8:	7020      	strb	r0, [r4, #0]
  }
}
 8004afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004afc:	fffff0ff 	.word	0xfffff0ff

08004b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b00:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b02:	4c10      	ldr	r4, [pc, #64]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8004b04:	4910      	ldr	r1, [pc, #64]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8004b06:	6823      	ldr	r3, [r4, #0]
{
 8004b08:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b0a:	400b      	ands	r3, r1
 8004b0c:	4303      	orrs	r3, r0
 8004b0e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b10:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004b12:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10c      	bne.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8004b1c:	490c      	ldr	r1, [pc, #48]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	2306      	movs	r3, #6
 8004b22:	4358      	muls	r0, r3
 8004b24:	f7fb fb14 	bl	8000150 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b28:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004b2a:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b2c:	00d2      	lsls	r2, r2, #3
 8004b2e:	6960      	ldr	r0, [r4, #20]
 8004b30:	4010      	ands	r0, r2
 8004b32:	d100      	bne.n	8004b36 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8004b34:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	e7f7      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8004b3e:	2003      	movs	r0, #3
 8004b40:	e7f8      	b.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x34>
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	40007000 	.word	0x40007000
 8004b48:	fffff9ff 	.word	0xfffff9ff
 8004b4c:	20000410 	.word	0x20000410
 8004b50:	000f4240 	.word	0x000f4240

08004b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b56:	0004      	movs	r4, r0
 8004b58:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d102      	bne.n	8004b64 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8004b60:	b005      	add	sp, #20
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b64:	6803      	ldr	r3, [r0, #0]
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d410      	bmi.n	8004b8c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	079b      	lsls	r3, r3, #30
 8004b6e:	d45c      	bmi.n	8004c2a <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	071b      	lsls	r3, r3, #28
 8004b74:	d500      	bpl.n	8004b78 <HAL_RCC_OscConfig+0x24>
 8004b76:	e0c2      	b.n	8004cfe <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	075b      	lsls	r3, r3, #29
 8004b7c:	d500      	bpl.n	8004b80 <HAL_RCC_OscConfig+0x2c>
 8004b7e:	e0f4      	b.n	8004d6a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b80:	69e2      	ldr	r2, [r4, #28]
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d000      	beq.n	8004b88 <HAL_RCC_OscConfig+0x34>
 8004b86:	e173      	b.n	8004e70 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e7e9      	b.n	8004b60 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8c:	2238      	movs	r2, #56	; 0x38
 8004b8e:	4dac      	ldr	r5, [pc, #688]	; (8004e40 <HAL_RCC_OscConfig+0x2ec>)
 8004b90:	68ab      	ldr	r3, [r5, #8]
 8004b92:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b94:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b9c:	0793      	lsls	r3, r2, #30
 8004b9e:	d108      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	039b      	lsls	r3, r3, #14
 8004ba4:	d5e1      	bpl.n	8004b6a <HAL_RCC_OscConfig+0x16>
 8004ba6:	6863      	ldr	r3, [r4, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1de      	bne.n	8004b6a <HAL_RCC_OscConfig+0x16>
 8004bac:	e7d7      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d0f6      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	0252      	lsls	r2, r2, #9
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d111      	bne.n	8004be0 <HAL_RCC_OscConfig+0x8c>
 8004bbc:	682a      	ldr	r2, [r5, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bc2:	f7fe f939 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004bc8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bca:	02b6      	lsls	r6, r6, #10
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	4233      	tst	r3, r6
 8004bd0:	d1cb      	bne.n	8004b6a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd2:	f7fe f931 	bl	8002e38 <HAL_GetTick>
 8004bd6:	1bc0      	subs	r0, r0, r7
 8004bd8:	2864      	cmp	r0, #100	; 0x64
 8004bda:	d9f7      	bls.n	8004bcc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8004bdc:	2003      	movs	r0, #3
 8004bde:	e7bf      	b.n	8004b60 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	21a0      	movs	r1, #160	; 0xa0
 8004be2:	02c9      	lsls	r1, r1, #11
 8004be4:	428b      	cmp	r3, r1
 8004be6:	d108      	bne.n	8004bfa <HAL_RCC_OscConfig+0xa6>
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	6829      	ldr	r1, [r5, #0]
 8004bec:	02db      	lsls	r3, r3, #11
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	e7e3      	b.n	8004bc2 <HAL_RCC_OscConfig+0x6e>
 8004bfa:	682a      	ldr	r2, [r5, #0]
 8004bfc:	4991      	ldr	r1, [pc, #580]	; (8004e44 <HAL_RCC_OscConfig+0x2f0>)
 8004bfe:	400a      	ands	r2, r1
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	682a      	ldr	r2, [r5, #0]
 8004c04:	4990      	ldr	r1, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x2f4>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1d9      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8004c0e:	f7fe f913 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004c14:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c16:	02b6      	lsls	r6, r6, #10
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	4233      	tst	r3, r6
 8004c1c:	d0a5      	beq.n	8004b6a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fe f90b 	bl	8002e38 <HAL_GetTick>
 8004c22:	1bc0      	subs	r0, r0, r7
 8004c24:	2864      	cmp	r0, #100	; 0x64
 8004c26:	d9f7      	bls.n	8004c18 <HAL_RCC_OscConfig+0xc4>
 8004c28:	e7d8      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2a:	2338      	movs	r3, #56	; 0x38
 8004c2c:	4d84      	ldr	r5, [pc, #528]	; (8004e40 <HAL_RCC_OscConfig+0x2ec>)
 8004c2e:	68aa      	ldr	r2, [r5, #8]
 8004c30:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c32:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d129      	bne.n	8004c8c <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c38:	2103      	movs	r1, #3
 8004c3a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c3c:	2a02      	cmp	r2, #2
 8004c3e:	d127      	bne.n	8004c90 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	682a      	ldr	r2, [r5, #0]
 8004c42:	0552      	lsls	r2, r2, #21
 8004c44:	d503      	bpl.n	8004c4e <HAL_RCC_OscConfig+0xfa>
 8004c46:	68e2      	ldr	r2, [r4, #12]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d100      	bne.n	8004c4e <HAL_RCC_OscConfig+0xfa>
 8004c4c:	e787      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	6869      	ldr	r1, [r5, #4]
 8004c50:	6962      	ldr	r2, [r4, #20]
 8004c52:	487e      	ldr	r0, [pc, #504]	; (8004e4c <HAL_RCC_OscConfig+0x2f8>)
 8004c54:	0212      	lsls	r2, r2, #8
 8004c56:	4001      	ands	r1, r0
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	4a7b      	ldr	r2, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x2fc>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	6922      	ldr	r2, [r4, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	4a79      	ldr	r2, [pc, #484]	; (8004e54 <HAL_RCC_OscConfig+0x300>)
 8004c70:	049b      	lsls	r3, r3, #18
 8004c72:	0f5b      	lsrs	r3, r3, #29
 8004c74:	40da      	lsrs	r2, r3
 8004c76:	0013      	movs	r3, r2
 8004c78:	4a77      	ldr	r2, [pc, #476]	; (8004e58 <HAL_RCC_OscConfig+0x304>)
 8004c7a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c7c:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <HAL_RCC_OscConfig+0x308>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	f7fe f892 	bl	8002da8 <HAL_InitTick>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d100      	bne.n	8004c8a <HAL_RCC_OscConfig+0x136>
 8004c88:	e772      	b.n	8004b70 <HAL_RCC_OscConfig+0x1c>
 8004c8a:	e768      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0d7      	beq.n	8004c40 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c90:	68e3      	ldr	r3, [r4, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	4a6d      	ldr	r2, [pc, #436]	; (8004e50 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca0:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	682a      	ldr	r2, [r5, #0]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cb0:	f7fe f8c2 	bl	8002e38 <HAL_GetTick>
 8004cb4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb6:	682b      	ldr	r3, [r5, #0]
 8004cb8:	4233      	tst	r3, r6
 8004cba:	d007      	beq.n	8004ccc <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	686a      	ldr	r2, [r5, #4]
 8004cbe:	6963      	ldr	r3, [r4, #20]
 8004cc0:	4962      	ldr	r1, [pc, #392]	; (8004e4c <HAL_RCC_OscConfig+0x2f8>)
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	606b      	str	r3, [r5, #4]
 8004cca:	e751      	b.n	8004b70 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fe f8b4 	bl	8002e38 <HAL_GetTick>
 8004cd0:	1bc0      	subs	r0, r0, r7
 8004cd2:	2802      	cmp	r0, #2
 8004cd4:	d9ef      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x162>
 8004cd6:	e781      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	4a61      	ldr	r2, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cdc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4013      	ands	r3, r2
 8004ce0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ce2:	f7fe f8a9 	bl	8002e38 <HAL_GetTick>
 8004ce6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce8:	00f6      	lsls	r6, r6, #3
 8004cea:	682b      	ldr	r3, [r5, #0]
 8004cec:	4233      	tst	r3, r6
 8004cee:	d100      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x19e>
 8004cf0:	e73e      	b.n	8004b70 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe f8a1 	bl	8002e38 <HAL_GetTick>
 8004cf6:	1bc0      	subs	r0, r0, r7
 8004cf8:	2802      	cmp	r0, #2
 8004cfa:	d9f6      	bls.n	8004cea <HAL_RCC_OscConfig+0x196>
 8004cfc:	e76e      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004cfe:	2138      	movs	r1, #56	; 0x38
 8004d00:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCC_OscConfig+0x2ec>)
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	001d      	movs	r5, r3
 8004d06:	400a      	ands	r2, r1
 8004d08:	2a18      	cmp	r2, #24
 8004d0a:	d108      	bne.n	8004d1e <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	079b      	lsls	r3, r3, #30
 8004d10:	d400      	bmi.n	8004d14 <HAL_RCC_OscConfig+0x1c0>
 8004d12:	e731      	b.n	8004b78 <HAL_RCC_OscConfig+0x24>
 8004d14:	69a3      	ldr	r3, [r4, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d000      	beq.n	8004d1c <HAL_RCC_OscConfig+0x1c8>
 8004d1a:	e72d      	b.n	8004b78 <HAL_RCC_OscConfig+0x24>
 8004d1c:	e71f      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1e:	69a2      	ldr	r2, [r4, #24]
 8004d20:	2301      	movs	r3, #1
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8004d26:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d28:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004d2e:	f7fe f883 	bl	8002e38 <HAL_GetTick>
 8004d32:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d34:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004d36:	4233      	tst	r3, r6
 8004d38:	d000      	beq.n	8004d3c <HAL_RCC_OscConfig+0x1e8>
 8004d3a:	e71d      	b.n	8004b78 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fe f87c 	bl	8002e38 <HAL_GetTick>
 8004d40:	1bc0      	subs	r0, r0, r7
 8004d42:	2802      	cmp	r0, #2
 8004d44:	d9f6      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1e0>
 8004d46:	e749      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8004d48:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d4a:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8004d4c:	439a      	bics	r2, r3
 8004d4e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004d50:	f7fe f872 	bl	8002e38 <HAL_GetTick>
 8004d54:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d56:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004d58:	4233      	tst	r3, r6
 8004d5a:	d100      	bne.n	8004d5e <HAL_RCC_OscConfig+0x20a>
 8004d5c:	e70c      	b.n	8004b78 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fe f86b 	bl	8002e38 <HAL_GetTick>
 8004d62:	1bc0      	subs	r0, r0, r7
 8004d64:	2802      	cmp	r0, #2
 8004d66:	d9f6      	bls.n	8004d56 <HAL_RCC_OscConfig+0x202>
 8004d68:	e738      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004d6a:	2138      	movs	r1, #56	; 0x38
 8004d6c:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_OscConfig+0x2ec>)
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	001d      	movs	r5, r3
 8004d72:	400a      	ands	r2, r1
 8004d74:	2a20      	cmp	r2, #32
 8004d76:	d108      	bne.n	8004d8a <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d400      	bmi.n	8004d80 <HAL_RCC_OscConfig+0x22c>
 8004d7e:	e6ff      	b.n	8004b80 <HAL_RCC_OscConfig+0x2c>
 8004d80:	68a3      	ldr	r3, [r4, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d000      	beq.n	8004d88 <HAL_RCC_OscConfig+0x234>
 8004d86:	e6fb      	b.n	8004b80 <HAL_RCC_OscConfig+0x2c>
 8004d88:	e6e9      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	0552      	lsls	r2, r2, #21
 8004d90:	4213      	tst	r3, r2
 8004d92:	d100      	bne.n	8004d96 <HAL_RCC_OscConfig+0x242>
 8004d94:	e0f6      	b.n	8004f84 <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d98:	2780      	movs	r7, #128	; 0x80
 8004d9a:	4e32      	ldr	r6, [pc, #200]	; (8004e64 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8004d9c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	007f      	lsls	r7, r7, #1
 8004da2:	423b      	tst	r3, r7
 8004da4:	d015      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d122      	bne.n	8004df2 <HAL_RCC_OscConfig+0x29e>
 8004dac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004dae:	4313      	orrs	r3, r2
 8004db0:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8004db2:	f7fe f841 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004db8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dba:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004dbc:	423b      	tst	r3, r7
 8004dbe:	d038      	beq.n	8004e32 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8004dc0:	9b00      	ldr	r3, [sp, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d000      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x274>
 8004dc6:	e6db      	b.n	8004b80 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004dca:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <HAL_RCC_OscConfig+0x314>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004dd0:	e6d6      	b.n	8004b80 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd2:	6833      	ldr	r3, [r6, #0]
 8004dd4:	433b      	orrs	r3, r7
 8004dd6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f82e 	bl	8002e38 <HAL_GetTick>
 8004ddc:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dde:	6833      	ldr	r3, [r6, #0]
 8004de0:	423b      	tst	r3, r7
 8004de2:	d1e0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de4:	f7fe f828 	bl	8002e38 <HAL_GetTick>
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	1ac0      	subs	r0, r0, r3
 8004dec:	2802      	cmp	r0, #2
 8004dee:	d9f6      	bls.n	8004dde <HAL_RCC_OscConfig+0x28a>
 8004df0:	e6f4      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d105      	bne.n	8004e04 <HAL_RCC_OscConfig+0x2b0>
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	65eb      	str	r3, [r5, #92]	; 0x5c
 8004dfe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004e00:	2301      	movs	r3, #1
 8004e02:	e7d4      	b.n	8004dae <HAL_RCC_OscConfig+0x25a>
 8004e04:	2101      	movs	r1, #1
 8004e06:	438a      	bics	r2, r1
 8004e08:	65ea      	str	r2, [r5, #92]	; 0x5c
 8004e0a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004e0c:	3103      	adds	r1, #3
 8004e0e:	438a      	bics	r2, r1
 8004e10:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1cd      	bne.n	8004db2 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8004e16:	f7fe f80f 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004e1c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e20:	423b      	tst	r3, r7
 8004e22:	d0cd      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe f808 	bl	8002e38 <HAL_GetTick>
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_RCC_OscConfig+0x318>)
 8004e2a:	1b80      	subs	r0, r0, r6
 8004e2c:	4298      	cmp	r0, r3
 8004e2e:	d9f6      	bls.n	8004e1e <HAL_RCC_OscConfig+0x2ca>
 8004e30:	e6d4      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fe f801 	bl	8002e38 <HAL_GetTick>
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCC_OscConfig+0x318>)
 8004e38:	1b80      	subs	r0, r0, r6
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	d9bd      	bls.n	8004dba <HAL_RCC_OscConfig+0x266>
 8004e3e:	e6cd      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	fffeffff 	.word	0xfffeffff
 8004e48:	fffbffff 	.word	0xfffbffff
 8004e4c:	ffff80ff 	.word	0xffff80ff
 8004e50:	ffffc7ff 	.word	0xffffc7ff
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	20000410 	.word	0x20000410
 8004e5c:	20000004 	.word	0x20000004
 8004e60:	fffffeff 	.word	0xfffffeff
 8004e64:	40007000 	.word	0x40007000
 8004e68:	efffffff 	.word	0xefffffff
 8004e6c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e70:	2038      	movs	r0, #56	; 0x38
 8004e72:	4b49      	ldr	r3, [pc, #292]	; (8004f98 <HAL_RCC_OscConfig+0x444>)
 8004e74:	6899      	ldr	r1, [r3, #8]
 8004e76:	001d      	movs	r5, r3
 8004e78:	4001      	ands	r1, r0
 8004e7a:	2910      	cmp	r1, #16
 8004e7c:	d054      	beq.n	8004f28 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4946      	ldr	r1, [pc, #280]	; (8004f9c <HAL_RCC_OscConfig+0x448>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e86:	2a02      	cmp	r2, #2
 8004e88:	d137      	bne.n	8004efa <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 8004e8a:	f7fd ffd5 	bl	8002e38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004e90:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e92:	04b6      	lsls	r6, r6, #18
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	4233      	tst	r3, r6
 8004e98:	d129      	bne.n	8004eee <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e9c:	6a23      	ldr	r3, [r4, #32]
 8004e9e:	68ea      	ldr	r2, [r5, #12]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	493f      	ldr	r1, [pc, #252]	; (8004fa0 <HAL_RCC_OscConfig+0x44c>)
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb6:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	0212      	lsls	r2, r2, #8
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	682a      	ldr	r2, [r5, #0]
 8004ec2:	045b      	lsls	r3, r3, #17
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	68ea      	ldr	r2, [r5, #12]
 8004ecc:	055b      	lsls	r3, r3, #21
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004ed2:	f7fd ffb1 	bl	8002e38 <HAL_GetTick>
 8004ed6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed8:	04a4      	lsls	r4, r4, #18
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	4223      	tst	r3, r4
 8004ede:	d000      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x38e>
 8004ee0:	e652      	b.n	8004b88 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fd ffa9 	bl	8002e38 <HAL_GetTick>
 8004ee6:	1b80      	subs	r0, r0, r6
 8004ee8:	2802      	cmp	r0, #2
 8004eea:	d9f6      	bls.n	8004eda <HAL_RCC_OscConfig+0x386>
 8004eec:	e676      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eee:	f7fd ffa3 	bl	8002e38 <HAL_GetTick>
 8004ef2:	1bc0      	subs	r0, r0, r7
 8004ef4:	2802      	cmp	r0, #2
 8004ef6:	d9cd      	bls.n	8004e94 <HAL_RCC_OscConfig+0x340>
 8004ef8:	e670      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004efa:	2203      	movs	r2, #3
 8004efc:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efe:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004f00:	4393      	bics	r3, r2
 8004f02:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f04:	68eb      	ldr	r3, [r5, #12]
 8004f06:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004f0e:	f7fd ff93 	bl	8002e38 <HAL_GetTick>
 8004f12:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	4223      	tst	r3, r4
 8004f18:	d100      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
 8004f1a:	e635      	b.n	8004b88 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fd ff8c 	bl	8002e38 <HAL_GetTick>
 8004f20:	1b80      	subs	r0, r0, r6
 8004f22:	2802      	cmp	r0, #2
 8004f24:	d9f6      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
 8004f26:	e659      	b.n	8004bdc <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d100      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3da>
 8004f2c:	e617      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8004f2e:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f30:	2303      	movs	r3, #3
 8004f32:	6a22      	ldr	r2, [r4, #32]
 8004f34:	4003      	ands	r3, r0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d000      	beq.n	8004f3c <HAL_RCC_OscConfig+0x3e8>
 8004f3a:	e610      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3c:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f40:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d000      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3f4>
 8004f46:	e60a      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f48:	22fe      	movs	r2, #254	; 0xfe
 8004f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f4c:	01d2      	lsls	r2, r2, #7
 8004f4e:	4002      	ands	r2, r0
 8004f50:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d000      	beq.n	8004f58 <HAL_RCC_OscConfig+0x404>
 8004f56:	e602      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f58:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f5c:	039b      	lsls	r3, r3, #14
 8004f5e:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d000      	beq.n	8004f66 <HAL_RCC_OscConfig+0x412>
 8004f64:	e5fb      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f66:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f68:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f6a:	051b      	lsls	r3, r3, #20
 8004f6c:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d000      	beq.n	8004f74 <HAL_RCC_OscConfig+0x420>
 8004f72:	e5f4      	b.n	8004b5e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f76:	0f40      	lsrs	r0, r0, #29
 8004f78:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f7a:	1ac0      	subs	r0, r0, r3
 8004f7c:	1e43      	subs	r3, r0, #1
 8004f7e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004f80:	b2c0      	uxtb	r0, r0
 8004f82:	e5ed      	b.n	8004b60 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004f86:	4313      	orrs	r3, r2
 8004f88:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004f8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e700      	b.n	8004d98 <HAL_RCC_OscConfig+0x244>
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	feffffff 	.word	0xfeffffff
 8004fa0:	11c1808c 	.word	0x11c1808c
 8004fa4:	eefeffff 	.word	0xeefeffff

08004fa8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fa8:	2338      	movs	r3, #56	; 0x38
 8004faa:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8004fac:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fae:	6891      	ldr	r1, [r2, #8]
 8004fb0:	0014      	movs	r4, r2
 8004fb2:	4219      	tst	r1, r3
 8004fb4:	d108      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004fba:	481c      	ldr	r0, [pc, #112]	; (800502c <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004fbc:	049b      	lsls	r3, r3, #18
 8004fbe:	0f5b      	lsrs	r3, r3, #29
 8004fc0:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8004fc2:	f7fb f8c5 	bl	8000150 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004fc8:	6891      	ldr	r1, [r2, #8]
 8004fca:	4019      	ands	r1, r3
 8004fcc:	2908      	cmp	r1, #8
 8004fce:	d025      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004fd0:	6891      	ldr	r1, [r2, #8]
 8004fd2:	4019      	ands	r1, r3
 8004fd4:	2910      	cmp	r1, #16
 8004fd6:	d115      	bne.n	8005004 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fd8:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fda:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe0:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe2:	0649      	lsls	r1, r1, #25
 8004fe4:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe6:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe8:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fea:	4015      	ands	r5, r2
    switch (pllsource)
 8004fec:	079b      	lsls	r3, r3, #30
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ff0:	480f      	ldr	r0, [pc, #60]	; (8005030 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ff2:	f7fb f8ad 	bl	8000150 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ff6:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ff8:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ffa:	0f49      	lsrs	r1, r1, #29
 8004ffc:	3101      	adds	r1, #1
 8004ffe:	e7e0      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005000:	480a      	ldr	r0, [pc, #40]	; (800502c <HAL_RCC_GetSysClockFreq+0x84>)
 8005002:	e7f6      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005004:	6891      	ldr	r1, [r2, #8]
 8005006:	4019      	ands	r1, r3
 8005008:	2920      	cmp	r1, #32
 800500a:	d009      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800500c:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800500e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005010:	4013      	ands	r3, r2
 8005012:	2b18      	cmp	r3, #24
 8005014:	d1d7      	bne.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8005016:	20fa      	movs	r0, #250	; 0xfa
 8005018:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 800501a:	e7d4      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800501c:	4804      	ldr	r0, [pc, #16]	; (8005030 <HAL_RCC_GetSysClockFreq+0x88>)
 800501e:	e7d2      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8005020:	2080      	movs	r0, #128	; 0x80
 8005022:	0200      	lsls	r0, r0, #8
 8005024:	e7cf      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1e>
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	40021000 	.word	0x40021000
 800502c:	00f42400 	.word	0x00f42400
 8005030:	007a1200 	.word	0x007a1200

08005034 <HAL_RCC_ClockConfig>:
{
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	0005      	movs	r5, r0
 8005038:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800503a:	2800      	cmp	r0, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800503e:	2001      	movs	r0, #1
}
 8005040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005042:	2707      	movs	r7, #7
 8005044:	4c4a      	ldr	r4, [pc, #296]	; (8005170 <HAL_RCC_ClockConfig+0x13c>)
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	403b      	ands	r3, r7
 800504a:	428b      	cmp	r3, r1
 800504c:	d32a      	bcc.n	80050a4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504e:	6829      	ldr	r1, [r5, #0]
 8005050:	078b      	lsls	r3, r1, #30
 8005052:	d43b      	bmi.n	80050cc <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005054:	07cb      	lsls	r3, r1, #31
 8005056:	d448      	bmi.n	80050ea <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005058:	2707      	movs	r7, #7
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	403b      	ands	r3, r7
 800505e:	429e      	cmp	r6, r3
 8005060:	d20a      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	43bb      	bics	r3, r7
 8005066:	4333      	orrs	r3, r6
 8005068:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800506a:	f7fd fee5 	bl	8002e38 <HAL_GetTick>
 800506e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	403b      	ands	r3, r7
 8005074:	429e      	cmp	r6, r3
 8005076:	d16b      	bne.n	8005150 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	4c3e      	ldr	r4, [pc, #248]	; (8005174 <HAL_RCC_ClockConfig+0x140>)
 800507c:	075b      	lsls	r3, r3, #29
 800507e:	d46f      	bmi.n	8005160 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005080:	f7ff ff92 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <HAL_RCC_ClockConfig+0x144>)
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	0f1b      	lsrs	r3, r3, #28
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	221f      	movs	r2, #31
 8005092:	4013      	ands	r3, r2
 8005094:	40d8      	lsrs	r0, r3
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <HAL_RCC_ClockConfig+0x148>)
 8005098:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_ClockConfig+0x14c>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f7fd fe83 	bl	8002da8 <HAL_InitTick>
 80050a2:	e7cd      	b.n	8005040 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	43bb      	bics	r3, r7
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80050ac:	f7fd fec4 	bl	8002e38 <HAL_GetTick>
 80050b0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	403b      	ands	r3, r7
 80050b6:	429e      	cmp	r6, r3
 80050b8:	d0c9      	beq.n	800504e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ba:	f7fd febd 	bl	8002e38 <HAL_GetTick>
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	1ac0      	subs	r0, r0, r3
 80050c2:	4b30      	ldr	r3, [pc, #192]	; (8005184 <HAL_RCC_ClockConfig+0x150>)
 80050c4:	4298      	cmp	r0, r3
 80050c6:	d9f4      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80050c8:	2003      	movs	r0, #3
 80050ca:	e7b9      	b.n	8005040 <HAL_RCC_ClockConfig+0xc>
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ce:	074b      	lsls	r3, r1, #29
 80050d0:	d504      	bpl.n	80050dc <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050d2:	23e0      	movs	r3, #224	; 0xe0
 80050d4:	6890      	ldr	r0, [r2, #8]
 80050d6:	01db      	lsls	r3, r3, #7
 80050d8:	4303      	orrs	r3, r0
 80050da:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	482a      	ldr	r0, [pc, #168]	; (8005188 <HAL_RCC_ClockConfig+0x154>)
 80050e0:	4003      	ands	r3, r0
 80050e2:	68a8      	ldr	r0, [r5, #8]
 80050e4:	4303      	orrs	r3, r0
 80050e6:	6093      	str	r3, [r2, #8]
 80050e8:	e7b4      	b.n	8005054 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ea:	686a      	ldr	r2, [r5, #4]
 80050ec:	4f21      	ldr	r7, [pc, #132]	; (8005174 <HAL_RCC_ClockConfig+0x140>)
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	d119      	bne.n	8005126 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	039b      	lsls	r3, r3, #14
 80050f6:	d5a2      	bpl.n	800503e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f8:	2107      	movs	r1, #7
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	438b      	bics	r3, r1
 80050fe:	4313      	orrs	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8005102:	f7fd fe99 	bl	8002e38 <HAL_GetTick>
 8005106:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005108:	2338      	movs	r3, #56	; 0x38
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	401a      	ands	r2, r3
 800510e:	686b      	ldr	r3, [r5, #4]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	429a      	cmp	r2, r3
 8005114:	d0a0      	beq.n	8005058 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005116:	f7fd fe8f 	bl	8002e38 <HAL_GetTick>
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	1ac0      	subs	r0, r0, r3
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_ClockConfig+0x150>)
 8005120:	4298      	cmp	r0, r3
 8005122:	d9f1      	bls.n	8005108 <HAL_RCC_ClockConfig+0xd4>
 8005124:	e7d0      	b.n	80050c8 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005126:	2a02      	cmp	r2, #2
 8005128:	d103      	bne.n	8005132 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	d4e3      	bmi.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
 8005130:	e785      	b.n	800503e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005132:	2a00      	cmp	r2, #0
 8005134:	d103      	bne.n	800513e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	055b      	lsls	r3, r3, #21
 800513a:	d4dd      	bmi.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
 800513c:	e77f      	b.n	800503e <HAL_RCC_ClockConfig+0xa>
 800513e:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005140:	2a03      	cmp	r2, #3
 8005142:	d103      	bne.n	800514c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005144:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005146:	4219      	tst	r1, r3
 8005148:	d1d6      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
 800514a:	e778      	b.n	800503e <HAL_RCC_ClockConfig+0xa>
 800514c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800514e:	e7fa      	b.n	8005146 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fd fe72 	bl	8002e38 <HAL_GetTick>
 8005154:	9b01      	ldr	r3, [sp, #4]
 8005156:	1ac0      	subs	r0, r0, r3
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCC_ClockConfig+0x150>)
 800515a:	4298      	cmp	r0, r3
 800515c:	d988      	bls.n	8005070 <HAL_RCC_ClockConfig+0x3c>
 800515e:	e7b3      	b.n	80050c8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x158>)
 8005164:	4013      	ands	r3, r2
 8005166:	68ea      	ldr	r2, [r5, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60a3      	str	r3, [r4, #8]
 800516c:	e788      	b.n	8005080 <HAL_RCC_ClockConfig+0x4c>
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	40022000 	.word	0x40022000
 8005174:	40021000 	.word	0x40021000
 8005178:	08010d54 	.word	0x08010d54
 800517c:	20000410 	.word	0x20000410
 8005180:	20000004 	.word	0x20000004
 8005184:	00001388 	.word	0x00001388
 8005188:	fffff0ff 	.word	0xfffff0ff
 800518c:	ffff8fff 	.word	0xffff8fff

08005190 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005192:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	045b      	lsls	r3, r3, #17
 8005198:	0f5b      	lsrs	r3, r3, #29
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	589b      	ldr	r3, [r3, r2]
 800519e:	221f      	movs	r2, #31
 80051a0:	4013      	ands	r3, r2
 80051a2:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a4:	6810      	ldr	r0, [r2, #0]
 80051a6:	40d8      	lsrs	r0, r3
}
 80051a8:	4770      	bx	lr
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	40021000 	.word	0x40021000
 80051b0:	08010d94 	.word	0x08010d94
 80051b4:	20000410 	.word	0x20000410

080051b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051bc:	682b      	ldr	r3, [r5, #0]
{
 80051be:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c0:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c2:	039b      	lsls	r3, r3, #14
 80051c4:	d550      	bpl.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	4c6f      	ldr	r4, [pc, #444]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	0552      	lsls	r2, r2, #21
 80051cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d0:	4213      	tst	r3, r2
 80051d2:	d108      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051d6:	4313      	orrs	r3, r2
 80051d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80051da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051dc:	4013      	ands	r3, r2
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e6:	2780      	movs	r7, #128	; 0x80
 80051e8:	4e68      	ldr	r6, [pc, #416]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ea:	007f      	lsls	r7, r7, #1
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	433b      	orrs	r3, r7
 80051f0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f2:	f7fd fe21 	bl	8002e38 <HAL_GetTick>
 80051f6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	423b      	tst	r3, r7
 80051fc:	d026      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051fe:	23c0      	movs	r3, #192	; 0xc0
 8005200:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005206:	d00f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005208:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800520a:	4293      	cmp	r3, r2
 800520c:	d00c      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800520e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005210:	4b5f      	ldr	r3, [pc, #380]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005212:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005214:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	0252      	lsls	r2, r2, #9
 800521a:	430a      	orrs	r2, r1
 800521c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800521e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005220:	495c      	ldr	r1, [pc, #368]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005222:	400a      	ands	r2, r1
 8005224:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005226:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005228:	07db      	lsls	r3, r3, #31
 800522a:	d507      	bpl.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fd fe04 	bl	8002e38 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005230:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8005232:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005234:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005236:	423b      	tst	r3, r7
 8005238:	d100      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800523a:	e09d      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800523e:	4a54      	ldr	r2, [pc, #336]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005240:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005242:	4013      	ands	r3, r2
 8005244:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005246:	4313      	orrs	r3, r2
 8005248:	65e3      	str	r3, [r4, #92]	; 0x5c
 800524a:	e006      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fd fdf4 	bl	8002e38 <HAL_GetTick>
 8005250:	9b01      	ldr	r3, [sp, #4]
 8005252:	1ac0      	subs	r0, r0, r3
 8005254:	2802      	cmp	r0, #2
 8005256:	d9cf      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8005258:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800525a:	9b00      	ldr	r3, [sp, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d103      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005260:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005262:	4a4d      	ldr	r2, [pc, #308]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005264:	4013      	ands	r3, r2
 8005266:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	07da      	lsls	r2, r3, #31
 800526c:	d506      	bpl.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526e:	2403      	movs	r4, #3
 8005270:	4945      	ldr	r1, [pc, #276]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005272:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005274:	43a2      	bics	r2, r4
 8005276:	686c      	ldr	r4, [r5, #4]
 8005278:	4322      	orrs	r2, r4
 800527a:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800527c:	079a      	lsls	r2, r3, #30
 800527e:	d506      	bpl.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005280:	240c      	movs	r4, #12
 8005282:	4941      	ldr	r1, [pc, #260]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005286:	43a2      	bics	r2, r4
 8005288:	68ac      	ldr	r4, [r5, #8]
 800528a:	4322      	orrs	r2, r4
 800528c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800528e:	069a      	lsls	r2, r3, #26
 8005290:	d506      	bpl.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005292:	493d      	ldr	r1, [pc, #244]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005294:	4c41      	ldr	r4, [pc, #260]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005296:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005298:	4022      	ands	r2, r4
 800529a:	68ec      	ldr	r4, [r5, #12]
 800529c:	4322      	orrs	r2, r4
 800529e:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052a0:	059a      	lsls	r2, r3, #22
 80052a2:	d506      	bpl.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052a4:	4938      	ldr	r1, [pc, #224]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a6:	4c3e      	ldr	r4, [pc, #248]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80052a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80052aa:	4022      	ands	r2, r4
 80052ac:	69ac      	ldr	r4, [r5, #24]
 80052ae:	4322      	orrs	r2, r4
 80052b0:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052b2:	055a      	lsls	r2, r3, #21
 80052b4:	d506      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052b6:	4934      	ldr	r1, [pc, #208]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b8:	4c3a      	ldr	r4, [pc, #232]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80052ba:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80052bc:	4022      	ands	r2, r4
 80052be:	69ec      	ldr	r4, [r5, #28]
 80052c0:	4322      	orrs	r2, r4
 80052c2:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c4:	065a      	lsls	r2, r3, #25
 80052c6:	d506      	bpl.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052c8:	492f      	ldr	r1, [pc, #188]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	4c37      	ldr	r4, [pc, #220]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80052cc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80052ce:	4022      	ands	r2, r4
 80052d0:	692c      	ldr	r4, [r5, #16]
 80052d2:	4322      	orrs	r2, r4
 80052d4:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052d6:	045a      	lsls	r2, r3, #17
 80052d8:	d50f      	bpl.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052da:	492b      	ldr	r1, [pc, #172]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052dc:	6a2c      	ldr	r4, [r5, #32]
 80052de:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	0892      	lsrs	r2, r2, #2
 80052e4:	4322      	orrs	r2, r4
 80052e6:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	05d2      	lsls	r2, r2, #23
 80052ec:	4294      	cmp	r4, r2
 80052ee:	d104      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	68cc      	ldr	r4, [r1, #12]
 80052f4:	0252      	lsls	r2, r2, #9
 80052f6:	4322      	orrs	r2, r4
 80052f8:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052fa:	031a      	lsls	r2, r3, #12
 80052fc:	d506      	bpl.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052fe:	2440      	movs	r4, #64	; 0x40
 8005300:	4921      	ldr	r1, [pc, #132]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005304:	43a2      	bics	r2, r4
 8005306:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005308:	4322      	orrs	r2, r4
 800530a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800530c:	029a      	lsls	r2, r3, #10
 800530e:	d50f      	bpl.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005310:	491d      	ldr	r1, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	4e26      	ldr	r6, [pc, #152]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005314:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005316:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005318:	4032      	ands	r2, r6
 800531a:	4322      	orrs	r2, r4
 800531c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	03d2      	lsls	r2, r2, #15
 8005322:	4294      	cmp	r4, r2
 8005324:	d104      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	68cc      	ldr	r4, [r1, #12]
 800532a:	0452      	lsls	r2, r2, #17
 800532c:	4322      	orrs	r2, r4
 800532e:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005330:	025a      	lsls	r2, r3, #9
 8005332:	d50d      	bpl.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005334:	4c14      	ldr	r4, [pc, #80]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	4e1e      	ldr	r6, [pc, #120]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005338:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800533a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800533c:	4031      	ands	r1, r6
 800533e:	4311      	orrs	r1, r2
 8005340:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	0449      	lsls	r1, r1, #17
 8005346:	428a      	cmp	r2, r1
 8005348:	d102      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800534a:	68e1      	ldr	r1, [r4, #12]
 800534c:	430a      	orrs	r2, r1
 800534e:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005350:	051b      	lsls	r3, r3, #20
 8005352:	d50f      	bpl.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005354:	490c      	ldr	r1, [pc, #48]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	4c17      	ldr	r4, [pc, #92]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005358:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800535a:	696a      	ldr	r2, [r5, #20]
 800535c:	4023      	ands	r3, r4
 800535e:	4313      	orrs	r3, r2
 8005360:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	429a      	cmp	r2, r3
 8005368:	d104      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	68ca      	ldr	r2, [r1, #12]
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	4313      	orrs	r3, r2
 8005372:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8005374:	b005      	add	sp, #20
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fd fd5e 	bl	8002e38 <HAL_GetTick>
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800537e:	1b80      	subs	r0, r0, r6
 8005380:	4298      	cmp	r0, r3
 8005382:	d800      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005384:	e756      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005386:	e767      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
 8005390:	fffffcff 	.word	0xfffffcff
 8005394:	fffeffff 	.word	0xfffeffff
 8005398:	efffffff 	.word	0xefffffff
 800539c:	fffff3ff 	.word	0xfffff3ff
 80053a0:	fff3ffff 	.word	0xfff3ffff
 80053a4:	ffcfffff 	.word	0xffcfffff
 80053a8:	ffffcfff 	.word	0xffffcfff
 80053ac:	ffbfffff 	.word	0xffbfffff
 80053b0:	feffffff 	.word	0xfeffffff
 80053b4:	ffff3fff 	.word	0xffff3fff
 80053b8:	00001388 	.word	0x00001388

080053bc <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80053bc:	21a0      	movs	r1, #160	; 0xa0
 80053be:	6802      	ldr	r2, [r0, #0]
{
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80053c2:	68d3      	ldr	r3, [r2, #12]
{
 80053c4:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80053c6:	438b      	bics	r3, r1
 80053c8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80053ca:	f7fd fd35 	bl	8002e38 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053ce:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80053d0:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053d2:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053d4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	422b      	tst	r3, r5
 80053dc:	d001      	beq.n	80053e2 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80053de:	2000      	movs	r0, #0
}
 80053e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053e2:	f7fd fd29 	bl	8002e38 <HAL_GetTick>
 80053e6:	1b80      	subs	r0, r0, r6
 80053e8:	42b8      	cmp	r0, r7
 80053ea:	d9f4      	bls.n	80053d6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80053ec:	2003      	movs	r0, #3
 80053ee:	e7f7      	b.n	80053e0 <HAL_RTC_WaitForSynchro+0x24>

080053f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053f2:	2740      	movs	r7, #64	; 0x40
 80053f4:	6803      	ldr	r3, [r0, #0]
{
 80053f6:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053f8:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 80053fa:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053fc:	423a      	tst	r2, r7
 80053fe:	d10c      	bne.n	800541a <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	68d9      	ldr	r1, [r3, #12]
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005408:	f7fd fd16 	bl	8002e38 <HAL_GetTick>
 800540c:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	423b      	tst	r3, r7
 8005414:	d101      	bne.n	800541a <RTC_EnterInitMode+0x2a>
 8005416:	2c03      	cmp	r4, #3
 8005418:	d101      	bne.n	800541e <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 800541a:	0020      	movs	r0, r4
 800541c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800541e:	f7fd fd0b 	bl	8002e38 <HAL_GetTick>
 8005422:	23fa      	movs	r3, #250	; 0xfa
 8005424:	1b80      	subs	r0, r0, r6
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4298      	cmp	r0, r3
 800542a:	d9f0      	bls.n	800540e <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800542c:	002b      	movs	r3, r5
 800542e:	2403      	movs	r4, #3
 8005430:	3329      	adds	r3, #41	; 0x29
 8005432:	701c      	strb	r4, [r3, #0]
 8005434:	e7eb      	b.n	800540e <RTC_EnterInitMode+0x1e>
	...

08005438 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005438:	2280      	movs	r2, #128	; 0x80
{
 800543a:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800543c:	4c0f      	ldr	r4, [pc, #60]	; (800547c <RTC_ExitInitMode+0x44>)
{
 800543e:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005440:	68e3      	ldr	r3, [r4, #12]
 8005442:	4393      	bics	r3, r2
 8005444:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	3a60      	subs	r2, #96	; 0x60
 800544a:	4213      	tst	r3, r2
 800544c:	d107      	bne.n	800545e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800544e:	f7ff ffb5 	bl	80053bc <HAL_RTC_WaitForSynchro>
 8005452:	2800      	cmp	r0, #0
 8005454:	d002      	beq.n	800545c <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005456:	2003      	movs	r0, #3
 8005458:	3529      	adds	r5, #41	; 0x29
 800545a:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800545c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800545e:	69a3      	ldr	r3, [r4, #24]
 8005460:	4393      	bics	r3, r2
 8005462:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005464:	f7ff ffaa 	bl	80053bc <HAL_RTC_WaitForSynchro>
 8005468:	2800      	cmp	r0, #0
 800546a:	d002      	beq.n	8005472 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800546c:	2003      	movs	r0, #3
 800546e:	3529      	adds	r5, #41	; 0x29
 8005470:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005472:	2320      	movs	r3, #32
 8005474:	69a2      	ldr	r2, [r4, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61a3      	str	r3, [r4, #24]
 800547a:	e7ef      	b.n	800545c <RTC_ExitInitMode+0x24>
 800547c:	40002800 	.word	0x40002800

08005480 <HAL_RTC_Init>:
{
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005484:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8005486:	2c00      	cmp	r4, #0
 8005488:	d047      	beq.n	800551a <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800548a:	0025      	movs	r5, r4
 800548c:	3529      	adds	r5, #41	; 0x29
 800548e:	782b      	ldrb	r3, [r5, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d108      	bne.n	80054a8 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8005496:	0022      	movs	r2, r4
 8005498:	3228      	adds	r2, #40	; 0x28
 800549a:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800549c:	2388      	movs	r3, #136	; 0x88
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 80054a2:	0020      	movs	r0, r4
 80054a4:	f005 fce8 	bl	800ae78 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054a8:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054aa:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054ac:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ae:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 80054b0:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
 80054b4:	3a77      	subs	r2, #119	; 0x77
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80054b8:	f7ff ff9a 	bl	80053f0 <RTC_EnterInitMode>
    if(status == HAL_OK)
 80054bc:	2800      	cmp	r0, #0
 80054be:	d125      	bne.n	800550c <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	4916      	ldr	r1, [pc, #88]	; (800551c <HAL_RTC_Init+0x9c>)
 80054c4:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054c6:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80054c8:	400a      	ands	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054cc:	68a2      	ldr	r2, [r4, #8]
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	4302      	orrs	r2, r0
 80054d2:	69e0      	ldr	r0, [r4, #28]
 80054d4:	4302      	orrs	r2, r0
 80054d6:	430a      	orrs	r2, r1
 80054d8:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054da:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 80054dc:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054e0:	68e2      	ldr	r2, [r4, #12]
 80054e2:	6919      	ldr	r1, [r3, #16]
 80054e4:	0412      	lsls	r2, r2, #16
 80054e6:	430a      	orrs	r2, r1
 80054e8:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80054ea:	f7ff ffa5 	bl	8005438 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d10c      	bne.n	800550c <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80054f2:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80054f4:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80054f6:	6993      	ldr	r3, [r2, #24]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	08db      	lsrs	r3, r3, #3
 80054fc:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80054fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005500:	6991      	ldr	r1, [r2, #24]
 8005502:	4333      	orrs	r3, r6
 8005504:	69a6      	ldr	r6, [r4, #24]
 8005506:	4333      	orrs	r3, r6
 8005508:	430b      	orrs	r3, r1
 800550a:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005512:	2800      	cmp	r0, #0
 8005514:	d101      	bne.n	800551a <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8005516:	2301      	movs	r3, #1
 8005518:	702b      	strb	r3, [r5, #0]
}
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	fb8fffbf 	.word	0xfb8fffbf

08005520 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005520:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 8005522:	2809      	cmp	r0, #9
 8005524:	d803      	bhi.n	800552e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4318      	orrs	r0, r3
 800552a:	b2c0      	uxtb	r0, r0
}
 800552c:	4770      	bx	lr
    Param -= 10U;
 800552e:	380a      	subs	r0, #10
    bcdhigh++;
 8005530:	3301      	adds	r3, #1
    Param -= 10U;
 8005532:	b2c0      	uxtb	r0, r0
 8005534:	e7f5      	b.n	8005522 <RTC_ByteToBcd2+0x2>
	...

08005538 <HAL_RTC_SetTime>:
{
 8005538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800553a:	0007      	movs	r7, r0
 800553c:	2302      	movs	r3, #2
{
 800553e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hrtc);
 8005540:	3728      	adds	r7, #40	; 0x28
 8005542:	783a      	ldrb	r2, [r7, #0]
{
 8005544:	0005      	movs	r5, r0
 8005546:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005548:	0018      	movs	r0, r3
 800554a:	2a01      	cmp	r2, #1
 800554c:	d049      	beq.n	80055e2 <HAL_RTC_SetTime+0xaa>
 800554e:	2201      	movs	r2, #1
 8005550:	703a      	strb	r2, [r7, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005552:	002a      	movs	r2, r5
 8005554:	3229      	adds	r2, #41	; 0x29
 8005556:	7013      	strb	r3, [r2, #0]
 8005558:	9200      	str	r2, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555a:	22ca      	movs	r2, #202	; 0xca
 800555c:	682b      	ldr	r3, [r5, #0]
  status = RTC_EnterInitMode(hrtc);
 800555e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
 8005562:	3a77      	subs	r2, #119	; 0x77
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8005566:	f7ff ff43 	bl	80053f0 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800556a:	2800      	cmp	r0, #0
 800556c:	d12f      	bne.n	80055ce <HAL_RTC_SetTime+0x96>
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	682b      	ldr	r3, [r5, #0]
    if(Format == RTC_FORMAT_BIN)
 8005572:	9901      	ldr	r1, [sp, #4]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	7820      	ldrb	r0, [r4, #0]
 8005578:	7866      	ldrb	r6, [r4, #1]
 800557a:	4013      	ands	r3, r2
    if(Format == RTC_FORMAT_BIN)
 800557c:	2900      	cmp	r1, #0
 800557e:	d131      	bne.n	80055e4 <HAL_RTC_SetTime+0xac>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005580:	2b00      	cmp	r3, #0
 8005582:	d100      	bne.n	8005586 <HAL_RTC_SetTime+0x4e>
        sTime->TimeFormat = 0x00U;
 8005584:	70e3      	strb	r3, [r4, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005586:	f7ff ffcb 	bl	8005520 <RTC_ByteToBcd2>
 800558a:	9001      	str	r0, [sp, #4]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800558c:	0030      	movs	r0, r6
 800558e:	f7ff ffc7 	bl	8005520 <RTC_ByteToBcd2>
 8005592:	0006      	movs	r6, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005594:	78a0      	ldrb	r0, [r4, #2]
 8005596:	f7ff ffc3 	bl	8005520 <RTC_ByteToBcd2>
 800559a:	0003      	movs	r3, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800559c:	78e0      	ldrb	r0, [r4, #3]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800559e:	0236      	lsls	r6, r6, #8
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055a0:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055a2:	4318      	orrs	r0, r3
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055aa:	4306      	orrs	r6, r0
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055ac:	4813      	ldr	r0, [pc, #76]	; (80055fc <HAL_RTC_SetTime+0xc4>)
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	4006      	ands	r6, r0
 80055b2:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	4912      	ldr	r1, [pc, #72]	; (8005600 <HAL_RTC_SetTime+0xc8>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055b8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80055ba:	400a      	ands	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055be:	68e2      	ldr	r2, [r4, #12]
 80055c0:	6999      	ldr	r1, [r3, #24]
 80055c2:	4302      	orrs	r2, r0
 80055c4:	430a      	orrs	r2, r1
 80055c6:	619a      	str	r2, [r3, #24]
    status = RTC_ExitInitMode(hrtc);
 80055c8:	0028      	movs	r0, r5
 80055ca:	f7ff ff35 	bl	8005438 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ce:	22ff      	movs	r2, #255	; 0xff
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d102      	bne.n	80055de <HAL_RTC_SetTime+0xa6>
   hrtc->State = HAL_RTC_STATE_READY;
 80055d8:	2301      	movs	r3, #1
 80055da:	9a00      	ldr	r2, [sp, #0]
 80055dc:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 80055de:	2300      	movs	r3, #0
 80055e0:	703b      	strb	r3, [r7, #0]
}
 80055e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d100      	bne.n	80055ea <HAL_RTC_SetTime+0xb2>
        sTime->TimeFormat = 0x00U;
 80055e8:	70e3      	strb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055ea:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055ec:	0236      	lsls	r6, r6, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055ee:	4306      	orrs	r6, r0
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055f0:	78a0      	ldrb	r0, [r4, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055f2:	4306      	orrs	r6, r0
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055f4:	78e0      	ldrb	r0, [r4, #3]
 80055f6:	0580      	lsls	r0, r0, #22
 80055f8:	e7d7      	b.n	80055aa <HAL_RTC_SetTime+0x72>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	007f7f7f 	.word	0x007f7f7f
 8005600:	fffbffff 	.word	0xfffbffff

08005604 <HAL_RTC_SetDate>:
{
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8005606:	0006      	movs	r6, r0
 8005608:	2302      	movs	r3, #2
 800560a:	3628      	adds	r6, #40	; 0x28
{
 800560c:	000c      	movs	r4, r1
 __HAL_LOCK(hrtc);
 800560e:	7831      	ldrb	r1, [r6, #0]
{
 8005610:	0005      	movs	r5, r0
 8005612:	b085      	sub	sp, #20
 __HAL_LOCK(hrtc);
 8005614:	0018      	movs	r0, r3
 8005616:	2901      	cmp	r1, #1
 8005618:	d03e      	beq.n	8005698 <HAL_RTC_SetDate+0x94>
 800561a:	2101      	movs	r1, #1
 800561c:	7031      	strb	r1, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800561e:	0029      	movs	r1, r5
 8005620:	3129      	adds	r1, #41	; 0x29
 8005622:	700b      	strb	r3, [r1, #0]
 8005624:	9101      	str	r1, [sp, #4]
 8005626:	7863      	ldrb	r3, [r4, #1]
 8005628:	78e0      	ldrb	r0, [r4, #3]
 800562a:	78a7      	ldrb	r7, [r4, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800562c:	2a00      	cmp	r2, #0
 800562e:	d135      	bne.n	800569c <HAL_RTC_SetDate+0x98>
 8005630:	3210      	adds	r2, #16
 8005632:	4213      	tst	r3, r2
 8005634:	d002      	beq.n	800563c <HAL_RTC_SetDate+0x38>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005636:	4393      	bics	r3, r2
 8005638:	330a      	adds	r3, #10
 800563a:	7063      	strb	r3, [r4, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800563c:	f7ff ff70 	bl	8005520 <RTC_ByteToBcd2>
 8005640:	9002      	str	r0, [sp, #8]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005642:	7860      	ldrb	r0, [r4, #1]
 8005644:	f7ff ff6c 	bl	8005520 <RTC_ByteToBcd2>
 8005648:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800564a:	0038      	movs	r0, r7
 800564c:	f7ff ff68 	bl	8005520 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005650:	7827      	ldrb	r7, [r4, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005652:	9b02      	ldr	r3, [sp, #8]
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005654:	037f      	lsls	r7, r7, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005656:	4307      	orrs	r7, r0
 8005658:	0418      	lsls	r0, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800565a:	9b03      	ldr	r3, [sp, #12]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800565c:	4307      	orrs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800565e:	0218      	lsls	r0, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005660:	22ca      	movs	r2, #202	; 0xca
 8005662:	682b      	ldr	r3, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005664:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
 8005668:	3a77      	subs	r2, #119	; 0x77
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800566c:	0028      	movs	r0, r5
 800566e:	f7ff febf 	bl	80053f0 <RTC_EnterInitMode>
  if(status == HAL_OK)
 8005672:	2800      	cmp	r0, #0
 8005674:	d106      	bne.n	8005684 <HAL_RTC_SetDate+0x80>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005676:	480d      	ldr	r0, [pc, #52]	; (80056ac <HAL_RTC_SetDate+0xa8>)
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	4007      	ands	r7, r0
 800567c:	605f      	str	r7, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800567e:	0028      	movs	r0, r5
 8005680:	f7ff feda 	bl	8005438 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800568a:	2800      	cmp	r0, #0
 800568c:	d102      	bne.n	8005694 <HAL_RTC_SetDate+0x90>
    hrtc->State = HAL_RTC_STATE_READY;
 800568e:	2301      	movs	r3, #1
 8005690:	9a01      	ldr	r2, [sp, #4]
 8005692:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8005694:	2300      	movs	r3, #0
 8005696:	7033      	strb	r3, [r6, #0]
}
 8005698:	b005      	add	sp, #20
 800569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800569c:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800569e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80056a0:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80056a2:	7820      	ldrb	r0, [r4, #0]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80056a4:	431f      	orrs	r7, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80056a6:	0340      	lsls	r0, r0, #13
 80056a8:	e7da      	b.n	8005660 <HAL_RTC_SetDate+0x5c>
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	00ffff3f 	.word	0x00ffff3f

080056b0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80056b0:	230a      	movs	r3, #10
 80056b2:	0902      	lsrs	r2, r0, #4
 80056b4:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80056b6:	220f      	movs	r2, #15
 80056b8:	4010      	ands	r0, r2
 80056ba:	1818      	adds	r0, r3, r0
 80056bc:	b2c0      	uxtb	r0, r0
}
 80056be:	4770      	bx	lr

080056c0 <HAL_RTC_GetTime>:
{
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056c4:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056c6:	6801      	ldr	r1, [r0, #0]
 80056c8:	688b      	ldr	r3, [r1, #8]
 80056ca:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056cc:	690b      	ldr	r3, [r1, #16]
 80056ce:	045b      	lsls	r3, r3, #17
 80056d0:	0c5b      	lsrs	r3, r3, #17
 80056d2:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056d4:	680b      	ldr	r3, [r1, #0]
 80056d6:	490d      	ldr	r1, [pc, #52]	; (800570c <HAL_RTC_GetTime+0x4c>)
 80056d8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80056da:	0298      	lsls	r0, r3, #10
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056dc:	0a1e      	lsrs	r6, r3, #8
 80056de:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80056e0:	0e80      	lsrs	r0, r0, #26
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056e2:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80056e4:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80056e6:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056e8:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056ea:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80056ec:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d10a      	bne.n	8005708 <HAL_RTC_GetTime+0x48>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056f2:	f7ff ffdd 	bl	80056b0 <RTC_Bcd2ToByte>
 80056f6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056f8:	0030      	movs	r0, r6
 80056fa:	f7ff ffd9 	bl	80056b0 <RTC_Bcd2ToByte>
 80056fe:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005700:	0028      	movs	r0, r5
 8005702:	f7ff ffd5 	bl	80056b0 <RTC_Bcd2ToByte>
 8005706:	70a0      	strb	r0, [r4, #2]
}
 8005708:	2000      	movs	r0, #0
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	007f7f7f 	.word	0x007f7f7f

08005710 <HAL_RTC_GetDate>:
{
 8005710:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005712:	253f      	movs	r5, #63	; 0x3f
{
 8005714:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005716:	6803      	ldr	r3, [r0, #0]
 8005718:	490d      	ldr	r1, [pc, #52]	; (8005750 <HAL_RTC_GetDate+0x40>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800571e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005720:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005722:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005724:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005726:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005728:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800572a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800572c:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800572e:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005730:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8005732:	2a00      	cmp	r2, #0
 8005734:	d10a      	bne.n	800574c <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005736:	f7ff ffbb 	bl	80056b0 <RTC_Bcd2ToByte>
 800573a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800573c:	0030      	movs	r0, r6
 800573e:	f7ff ffb7 	bl	80056b0 <RTC_Bcd2ToByte>
 8005742:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005744:	0028      	movs	r0, r5
 8005746:	f7ff ffb3 	bl	80056b0 <RTC_Bcd2ToByte>
 800574a:	70a0      	strb	r0, [r4, #2]
}
 800574c:	2000      	movs	r0, #0
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	00ffff3f 	.word	0x00ffff3f

08005754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8005758:	2001      	movs	r0, #1
  if (hspi == NULL)
 800575a:	2c00      	cmp	r4, #0
 800575c:	d04b      	beq.n	80057f6 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575e:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005760:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005762:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005764:	355d      	adds	r5, #93	; 0x5d
 8005766:	782b      	ldrb	r3, [r5, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800576e:	0022      	movs	r2, r4
 8005770:	325c      	adds	r2, #92	; 0x5c
 8005772:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005774:	0020      	movs	r0, r4
 8005776:	f005 fbbf 	bl	800aef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800577a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800577c:	2240      	movs	r2, #64	; 0x40
 800577e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005780:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005782:	680b      	ldr	r3, [r1, #0]
 8005784:	2000      	movs	r0, #0
 8005786:	4393      	bics	r3, r2
 8005788:	600b      	str	r3, [r1, #0]
 800578a:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800578c:	68e2      	ldr	r2, [r4, #12]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	429a      	cmp	r2, r3
 8005792:	d931      	bls.n	80057f8 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005794:	26f0      	movs	r6, #240	; 0xf0
 8005796:	0136      	lsls	r6, r6, #4
 8005798:	42b2      	cmp	r2, r6
 800579a:	d133      	bne.n	8005804 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800579c:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800579e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d103      	bne.n	80057ac <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d92f      	bls.n	8005808 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80057a8:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80057aa:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80057ac:	68a7      	ldr	r7, [r4, #8]
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	69a0      	ldr	r0, [r4, #24]
 80057b2:	433b      	orrs	r3, r7
 80057b4:	6927      	ldr	r7, [r4, #16]
 80057b6:	433b      	orrs	r3, r7
 80057b8:	6967      	ldr	r7, [r4, #20]
 80057ba:	433b      	orrs	r3, r7
 80057bc:	69e7      	ldr	r7, [r4, #28]
 80057be:	433b      	orrs	r3, r7
 80057c0:	6a27      	ldr	r7, [r4, #32]
 80057c2:	433b      	orrs	r3, r7
 80057c4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80057c6:	433b      	orrs	r3, r7
 80057c8:	2780      	movs	r7, #128	; 0x80
 80057ca:	00bf      	lsls	r7, r7, #2
 80057cc:	4007      	ands	r7, r0
 80057ce:	433b      	orrs	r3, r7
 80057d0:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80057d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d4:	0c00      	lsrs	r0, r0, #16
 80057d6:	431a      	orrs	r2, r3
 80057d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057da:	431a      	orrs	r2, r3
 80057dc:	2304      	movs	r3, #4
 80057de:	4018      	ands	r0, r3
 80057e0:	4310      	orrs	r0, r2
 80057e2:	4306      	orrs	r6, r0
 80057e4:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057e6:	69cb      	ldr	r3, [r1, #28]
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ea:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ec:	4013      	ands	r3, r2
 80057ee:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80057f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057f2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057f4:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 80057f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f8:	2680      	movs	r6, #128	; 0x80
 80057fa:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0ce      	beq.n	800579e <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005800:	62a0      	str	r0, [r4, #40]	; 0x28
 8005802:	e7cc      	b.n	800579e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005804:	0006      	movs	r6, r0
 8005806:	e7fb      	b.n	8005800 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005808:	2301      	movs	r3, #1
 800580a:	e7ce      	b.n	80057aa <HAL_SPI_Init+0x56>
 800580c:	fffff7ff 	.word	0xfffff7ff

08005810 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005810:	2201      	movs	r2, #1
 8005812:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	4807      	ldr	r0, [pc, #28]	; (8005834 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005816:	68d9      	ldr	r1, [r3, #12]
 8005818:	4311      	orrs	r1, r2
 800581a:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581c:	6899      	ldr	r1, [r3, #8]
 800581e:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	2906      	cmp	r1, #6
 8005822:	d005      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x20>
 8005824:	3807      	subs	r0, #7
 8005826:	4281      	cmp	r1, r0
 8005828:	d002      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x20>
  {
    __HAL_TIM_ENABLE(htim);
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8005830:	2000      	movs	r0, #0
 8005832:	4770      	bx	lr
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005838:	2101      	movs	r1, #1
 800583a:	6803      	ldr	r3, [r0, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	438a      	bics	r2, r1
 8005840:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005842:	6a18      	ldr	r0, [r3, #32]
 8005844:	4a05      	ldr	r2, [pc, #20]	; (800585c <HAL_TIM_Base_Stop_IT+0x24>)
 8005846:	4210      	tst	r0, r2
 8005848:	d106      	bne.n	8005858 <HAL_TIM_Base_Stop_IT+0x20>
 800584a:	6a18      	ldr	r0, [r3, #32]
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_TIM_Base_Stop_IT+0x28>)
 800584e:	4210      	tst	r0, r2
 8005850:	d102      	bne.n	8005858 <HAL_TIM_Base_Stop_IT+0x20>
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	438a      	bics	r2, r1
 8005856:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8005858:	2000      	movs	r0, #0
 800585a:	4770      	bx	lr
 800585c:	00001111 	.word	0x00001111
 8005860:	00000444 	.word	0x00000444

08005864 <HAL_TIM_OC_DelayElapsedCallback>:
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_IC_CaptureCallback>:
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_TriggerCallback>:
 800586a:	4770      	bx	lr

0800586c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800586c:	2202      	movs	r2, #2
 800586e:	6803      	ldr	r3, [r0, #0]
{
 8005870:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005872:	6919      	ldr	r1, [r3, #16]
{
 8005874:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005876:	4211      	tst	r1, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800587a:	68d9      	ldr	r1, [r3, #12]
 800587c:	4211      	tst	r1, r2
 800587e:	d00b      	beq.n	8005898 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005880:	3a05      	subs	r2, #5
 8005882:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005884:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005886:	3204      	adds	r2, #4
 8005888:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800588a:	079b      	lsls	r3, r3, #30
 800588c:	d100      	bne.n	8005890 <HAL_TIM_IRQHandler+0x24>
 800588e:	e086      	b.n	800599e <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005890:	f7ff ffe9 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005894:	2300      	movs	r3, #0
 8005896:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005898:	2204      	movs	r2, #4
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	6919      	ldr	r1, [r3, #16]
 800589e:	4211      	tst	r1, r2
 80058a0:	d011      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a2:	68d9      	ldr	r1, [r3, #12]
 80058a4:	4211      	tst	r1, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a8:	3a09      	subs	r2, #9
 80058aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ac:	3207      	adds	r2, #7
 80058ae:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	23c0      	movs	r3, #192	; 0xc0
 80058b4:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	421a      	tst	r2, r3
 80058ba:	d100      	bne.n	80058be <HAL_TIM_IRQHandler+0x52>
 80058bc:	e075      	b.n	80059aa <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	f7ff ffd2 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	2300      	movs	r3, #0
 80058c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c6:	2208      	movs	r2, #8
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	6919      	ldr	r1, [r3, #16]
 80058cc:	4211      	tst	r1, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_IRQHandler+0x82>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	4211      	tst	r1, r2
 80058d4:	d00b      	beq.n	80058ee <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058d6:	3a11      	subs	r2, #17
 80058d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058dc:	320d      	adds	r2, #13
 80058de:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058e2:	079b      	lsls	r3, r3, #30
 80058e4:	d067      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	f7ff ffbe 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	2300      	movs	r3, #0
 80058ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ee:	2210      	movs	r2, #16
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	6919      	ldr	r1, [r3, #16]
 80058f4:	4211      	tst	r1, r2
 80058f6:	d010      	beq.n	800591a <HAL_TIM_IRQHandler+0xae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	4211      	tst	r1, r2
 80058fc:	d00d      	beq.n	800591a <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058fe:	3a21      	subs	r2, #33	; 0x21
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005902:	3219      	adds	r2, #25
 8005904:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	23c0      	movs	r3, #192	; 0xc0
 800590a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800590e:	421a      	tst	r2, r3
 8005910:	d057      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	f7ff ffa8 	bl	8005866 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	2300      	movs	r3, #0
 8005918:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800591a:	2201      	movs	r2, #1
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	6919      	ldr	r1, [r3, #16]
 8005920:	4211      	tst	r1, r2
 8005922:	d007      	beq.n	8005934 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005924:	68d9      	ldr	r1, [r3, #12]
 8005926:	4211      	tst	r1, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800592a:	3a03      	subs	r2, #3
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592e:	0020      	movs	r0, r4
 8005930:	f002 fce8 	bl	8008304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005934:	2280      	movs	r2, #128	; 0x80
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	4211      	tst	r1, r2
 800593c:	d008      	beq.n	8005950 <HAL_TIM_IRQHandler+0xe4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593e:	68d9      	ldr	r1, [r3, #12]
 8005940:	4211      	tst	r1, r2
 8005942:	d005      	beq.n	8005950 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005944:	3a02      	subs	r2, #2
 8005946:	3aff      	subs	r2, #255	; 0xff
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800594a:	0020      	movs	r0, r4
 800594c:	f000 f9dd 	bl	8005d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	05d2      	lsls	r2, r2, #23
 8005956:	d507      	bpl.n	8005968 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	0612      	lsls	r2, r2, #24
 800595c:	d504      	bpl.n	8005968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800595e:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005960:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005962:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005964:	f000 f9d2 	bl	8005d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	6919      	ldr	r1, [r3, #16]
 800596e:	4211      	tst	r1, r2
 8005970:	d007      	beq.n	8005982 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005972:	68d9      	ldr	r1, [r3, #12]
 8005974:	4211      	tst	r1, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005978:	3a81      	subs	r2, #129	; 0x81
 800597a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597c:	0020      	movs	r0, r4
 800597e:	f7ff ff74 	bl	800586a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005982:	2220      	movs	r2, #32
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	6919      	ldr	r1, [r3, #16]
 8005988:	4211      	tst	r1, r2
 800598a:	d007      	beq.n	800599c <HAL_TIM_IRQHandler+0x130>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800598c:	68d9      	ldr	r1, [r3, #12]
 800598e:	4211      	tst	r1, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005992:	3a41      	subs	r2, #65	; 0x41
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005996:	0020      	movs	r0, r4
 8005998:	f000 f9b6 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	f7ff ff61 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a2:	0020      	movs	r0, r4
 80059a4:	f7ff ff60 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
 80059a8:	e774      	b.n	8005894 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	f7ff ff5b 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ae:	0020      	movs	r0, r4
 80059b0:	f7ff ff5a 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
 80059b4:	e785      	b.n	80058c2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	f7ff ff55 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ba:	0020      	movs	r0, r4
 80059bc:	f7ff ff54 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
 80059c0:	e793      	b.n	80058ea <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	f7ff ff4f 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c6:	0020      	movs	r0, r4
 80059c8:	f7ff ff4e 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
 80059cc:	e7a3      	b.n	8005916 <HAL_TIM_IRQHandler+0xaa>
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	fffffeff 	.word	0xfffffeff

080059d4 <HAL_TIM_Base_GetState>:
 80059d4:	303d      	adds	r0, #61	; 0x3d
 80059d6:	7800      	ldrb	r0, [r0, #0]
 80059d8:	b2c0      	uxtb	r0, r0
 80059da:	4770      	bx	lr

080059dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <TIM_Base_SetConfig+0x84>)
{
 80059de:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80059e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e2:	4290      	cmp	r0, r2
 80059e4:	d006      	beq.n	80059f4 <TIM_Base_SetConfig+0x18>
 80059e6:	2480      	movs	r4, #128	; 0x80
 80059e8:	05e4      	lsls	r4, r4, #23
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	d002      	beq.n	80059f4 <TIM_Base_SetConfig+0x18>
 80059ee:	4c1d      	ldr	r4, [pc, #116]	; (8005a64 <TIM_Base_SetConfig+0x88>)
 80059f0:	42a0      	cmp	r0, r4
 80059f2:	d10c      	bne.n	8005a0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	2470      	movs	r4, #112	; 0x70
 80059f6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80059f8:	684c      	ldr	r4, [r1, #4]
 80059fa:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fc:	4290      	cmp	r0, r2
 80059fe:	d012      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a00:	2480      	movs	r4, #128	; 0x80
 8005a02:	05e4      	lsls	r4, r4, #23
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d00e      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a08:	4c16      	ldr	r4, [pc, #88]	; (8005a64 <TIM_Base_SetConfig+0x88>)
 8005a0a:	42a0      	cmp	r0, r4
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a0e:	4c16      	ldr	r4, [pc, #88]	; (8005a68 <TIM_Base_SetConfig+0x8c>)
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d008      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a14:	4c15      	ldr	r4, [pc, #84]	; (8005a6c <TIM_Base_SetConfig+0x90>)
 8005a16:	42a0      	cmp	r0, r4
 8005a18:	d005      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a1a:	4c15      	ldr	r4, [pc, #84]	; (8005a70 <TIM_Base_SetConfig+0x94>)
 8005a1c:	42a0      	cmp	r0, r4
 8005a1e:	d002      	beq.n	8005a26 <TIM_Base_SetConfig+0x4a>
 8005a20:	4c14      	ldr	r4, [pc, #80]	; (8005a74 <TIM_Base_SetConfig+0x98>)
 8005a22:	42a0      	cmp	r0, r4
 8005a24:	d103      	bne.n	8005a2e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	4c14      	ldr	r4, [pc, #80]	; (8005a78 <TIM_Base_SetConfig+0x9c>)
 8005a28:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	68cc      	ldr	r4, [r1, #12]
 8005a2c:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2e:	2480      	movs	r4, #128	; 0x80
 8005a30:	43a3      	bics	r3, r4
 8005a32:	694c      	ldr	r4, [r1, #20]
 8005a34:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8005a36:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	688b      	ldr	r3, [r1, #8]
 8005a3a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	680b      	ldr	r3, [r1, #0]
 8005a3e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a40:	4290      	cmp	r0, r2
 8005a42:	d008      	beq.n	8005a56 <TIM_Base_SetConfig+0x7a>
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <TIM_Base_SetConfig+0x90>)
 8005a46:	4298      	cmp	r0, r3
 8005a48:	d005      	beq.n	8005a56 <TIM_Base_SetConfig+0x7a>
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <TIM_Base_SetConfig+0x94>)
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	d002      	beq.n	8005a56 <TIM_Base_SetConfig+0x7a>
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <TIM_Base_SetConfig+0x98>)
 8005a52:	4298      	cmp	r0, r3
 8005a54:	d101      	bne.n	8005a5a <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	6143      	str	r3, [r0, #20]
}
 8005a5e:	bd10      	pop	{r4, pc}
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40002000 	.word	0x40002000
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800
 8005a78:	fffffcff 	.word	0xfffffcff

08005a7c <HAL_TIM_Base_Init>:
{
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
  if (htim == NULL)
 8005a82:	2c00      	cmp	r4, #0
 8005a84:	d014      	beq.n	8005ab0 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	0025      	movs	r5, r4
 8005a88:	353d      	adds	r5, #61	; 0x3d
 8005a8a:	782b      	ldrb	r3, [r5, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005a92:	0022      	movs	r2, r4
 8005a94:	323c      	adds	r2, #60	; 0x3c
 8005a96:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8005a98:	0020      	movs	r0, r4
 8005a9a:	f005 fdc9 	bl	800b630 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	1d21      	adds	r1, r4, #4
 8005aa6:	f7ff ff99 	bl	80059dc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	2301      	movs	r3, #1
  return HAL_OK;
 8005aac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005aae:	702b      	strb	r3, [r5, #0]
}
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	4d03      	ldr	r5, [pc, #12]	; (8005ac8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aba:	430a      	orrs	r2, r1
 8005abc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abe:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac4:	6083      	str	r3, [r0, #8]
}
 8005ac6:	bd30      	pop	{r4, r5, pc}
 8005ac8:	ffff00ff 	.word	0xffff00ff

08005acc <HAL_TIM_ConfigClockSource>:
{
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005ace:	0005      	movs	r5, r0
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	353c      	adds	r5, #60	; 0x3c
 8005ad4:	782a      	ldrb	r2, [r5, #0]
{
 8005ad6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005ad8:	0018      	movs	r0, r3
 8005ada:	2a01      	cmp	r2, #1
 8005adc:	d016      	beq.n	8005b0c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ade:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8005ae0:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8005ae2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8005ae6:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005aea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aec:	4a3f      	ldr	r2, [pc, #252]	; (8005bec <HAL_TIM_ConfigClockSource+0x120>)
 8005aee:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005af0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005af2:	680b      	ldr	r3, [r1, #0]
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d063      	beq.n	8005bc0 <HAL_TIM_ConfigClockSource+0xf4>
 8005af8:	d814      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x58>
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d00b      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x4a>
 8005afe:	d806      	bhi.n	8005b0e <HAL_TIM_ConfigClockSource+0x42>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005b0a:	7028      	strb	r0, [r5, #0]
}
 8005b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d001      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x4a>
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d1f6      	bne.n	8005b04 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b16:	4a36      	ldr	r2, [pc, #216]	; (8005bf0 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8005b18:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1a:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	430b      	orrs	r3, r1
 8005b22:	e019      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	d034      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0xc6>
 8005b28:	d818      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x90>
 8005b2a:	2b50      	cmp	r3, #80	; 0x50
 8005b2c:	d1ea      	bne.n	8005b04 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2e:	684a      	ldr	r2, [r1, #4]
 8005b30:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005b32:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b34:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b36:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b38:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b3a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b42:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b44:	240a      	movs	r4, #10
 8005b46:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005b48:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b4c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005b4e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <HAL_TIM_ConfigClockSource+0x124>)
 8005b52:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b54:	2357      	movs	r3, #87	; 0x57
 8005b56:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8005b58:	6083      	str	r3, [r0, #8]
 8005b5a:	e7d3      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8005b5c:	2b70      	cmp	r3, #112	; 0x70
 8005b5e:	d00d      	beq.n	8005b7c <HAL_TIM_ConfigClockSource+0xb0>
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	0192      	lsls	r2, r2, #6
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d1cd      	bne.n	8005b04 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005b68:	68cb      	ldr	r3, [r1, #12]
 8005b6a:	684a      	ldr	r2, [r1, #4]
 8005b6c:	6889      	ldr	r1, [r1, #8]
 8005b6e:	f7ff ffa1 	bl	8005ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	6891      	ldr	r1, [r2, #8]
 8005b7a:	e007      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8005b7c:	68cb      	ldr	r3, [r1, #12]
 8005b7e:	684a      	ldr	r2, [r1, #4]
 8005b80:	6889      	ldr	r1, [r1, #8]
 8005b82:	f7ff ff97 	bl	8005ab4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6093      	str	r3, [r2, #8]
      break;
 8005b90:	e7b8      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b92:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b94:	684b      	ldr	r3, [r1, #4]
 8005b96:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b98:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9a:	4f16      	ldr	r7, [pc, #88]	; (8005bf4 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b9c:	43a1      	bics	r1, r4
 8005b9e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba2:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ba4:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8005baa:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bac:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bae:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bb4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005bb6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <HAL_TIM_ConfigClockSource+0x124>)
 8005bba:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bbc:	2367      	movs	r3, #103	; 0x67
 8005bbe:	e7ca      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc0:	684a      	ldr	r2, [r1, #4]
 8005bc2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005bc4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bca:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bcc:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	240a      	movs	r4, #10
 8005bd8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005bda:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005bdc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bde:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005be0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	4a03      	ldr	r2, [pc, #12]	; (8005bf0 <HAL_TIM_ConfigClockSource+0x124>)
 8005be4:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be6:	2347      	movs	r3, #71	; 0x47
 8005be8:	e7b5      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x8a>
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	ffce0088 	.word	0xffce0088
 8005bf0:	ffcfff8f 	.word	0xffcfff8f
 8005bf4:	ffff0fff 	.word	0xffff0fff

08005bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfa:	0004      	movs	r4, r0
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	343c      	adds	r4, #60	; 0x3c
 8005c00:	7825      	ldrb	r5, [r4, #0]
{
 8005c02:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005c04:	0010      	movs	r0, r2
 8005c06:	2d01      	cmp	r5, #1
 8005c08:	d01a      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0a:	001d      	movs	r5, r3
 8005c0c:	353d      	adds	r5, #61	; 0x3d
 8005c0e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c10:	4e0c      	ldr	r6, [pc, #48]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005c16:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c18:	42b2      	cmp	r2, r6
 8005c1a:	d103      	bne.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c1c:	4e0a      	ldr	r6, [pc, #40]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005c1e:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c20:	684e      	ldr	r6, [r1, #4]
 8005c22:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c24:	2670      	movs	r6, #112	; 0x70
 8005c26:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c28:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2a:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c2c:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2e:	2680      	movs	r6, #128	; 0x80
 8005c30:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c32:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c34:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005c38:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8005c3a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8005c3e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	ff0fffff 	.word	0xff0fffff

08005c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c4c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4e:	0004      	movs	r4, r0
 8005c50:	343c      	adds	r4, #60	; 0x3c
 8005c52:	7823      	ldrb	r3, [r4, #0]
{
 8005c54:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8005c56:	2002      	movs	r0, #2
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d039      	beq.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c5c:	68c8      	ldr	r0, [r1, #12]
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c60:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c62:	4003      	ands	r3, r0
 8005c64:	6888      	ldr	r0, [r1, #8]
 8005c66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c68:	481b      	ldr	r0, [pc, #108]	; (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005c6a:	4003      	ands	r3, r0
 8005c6c:	6848      	ldr	r0, [r1, #4]
 8005c6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c70:	481a      	ldr	r0, [pc, #104]	; (8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005c72:	4003      	ands	r3, r0
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c78:	4819      	ldr	r0, [pc, #100]	; (8005ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8005c7a:	4003      	ands	r3, r0
 8005c7c:	6908      	ldr	r0, [r1, #16]
 8005c7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c80:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005c82:	4003      	ands	r3, r0
 8005c84:	6948      	ldr	r0, [r1, #20]
 8005c86:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c88:	4817      	ldr	r0, [pc, #92]	; (8005ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005c8a:	4003      	ands	r3, r0
 8005c8c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8005c8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c90:	4816      	ldr	r0, [pc, #88]	; (8005cec <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005c92:	4003      	ands	r3, r0
 8005c94:	6988      	ldr	r0, [r1, #24]
 8005c96:	0400      	lsls	r0, r0, #16
 8005c98:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c9a:	4815      	ldr	r0, [pc, #84]	; (8005cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005c9c:	4282      	cmp	r2, r0
 8005c9e:	d114      	bne.n	8005cca <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ca0:	4814      	ldr	r0, [pc, #80]	; (8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005ca2:	4003      	ands	r3, r0
 8005ca4:	69c8      	ldr	r0, [r1, #28]
 8005ca6:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ca8:	4813      	ldr	r0, [pc, #76]	; (8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005caa:	4018      	ands	r0, r3
 8005cac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005cae:	051b      	lsls	r3, r3, #20
 8005cb0:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cb2:	4812      	ldr	r0, [pc, #72]	; (8005cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005cb4:	4003      	ands	r3, r0
 8005cb6:	6a08      	ldr	r0, [r1, #32]
 8005cb8:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cba:	4811      	ldr	r0, [pc, #68]	; (8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005cbc:	4003      	ands	r3, r0
 8005cbe:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005cc0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cc2:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005cc4:	480f      	ldr	r0, [pc, #60]	; (8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005cc6:	4003      	ands	r3, r0
 8005cc8:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005cca:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8005ccc:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005cce:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	fffffcff 	.word	0xfffffcff
 8005cd8:	fffffbff 	.word	0xfffffbff
 8005cdc:	fffff7ff 	.word	0xfffff7ff
 8005ce0:	ffffefff 	.word	0xffffefff
 8005ce4:	ffffdfff 	.word	0xffffdfff
 8005ce8:	ffffbfff 	.word	0xffffbfff
 8005cec:	fff0ffff 	.word	0xfff0ffff
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	efffffff 	.word	0xefffffff
 8005cf8:	ff0fffff 	.word	0xff0fffff
 8005cfc:	feffffff 	.word	0xfeffffff
 8005d00:	fdffffff 	.word	0xfdffffff
 8005d04:	dfffffff 	.word	0xdfffffff

08005d08 <HAL_TIMEx_CommutCallback>:
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIMEx_BreakCallback>:
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d0c:	4770      	bx	lr
	...

08005d10 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d10:	6803      	ldr	r3, [r0, #0]
 8005d12:	4907      	ldr	r1, [pc, #28]	; (8005d30 <UART_EndRxTransfer+0x20>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	4905      	ldr	r1, [pc, #20]	; (8005d34 <UART_EndRxTransfer+0x24>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	0003      	movs	r3, r0
 8005d24:	2220      	movs	r2, #32
 8005d26:	3308      	adds	r3, #8
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8005d2e:	4770      	bx	lr
 8005d30:	fffffedf 	.word	0xfffffedf
 8005d34:	effffffe 	.word	0xeffffffe

08005d38 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d38:	1d03      	adds	r3, r0, #4
 8005d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8005d3c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d3e:	2b21      	cmp	r3, #33	; 0x21
 8005d40:	d10d      	bne.n	8005d5e <UART_TxISR_16BIT+0x26>
  {
    if (huart->TxXferCount == 0U)
 8005d42:	0001      	movs	r1, r0
 8005d44:	3156      	adds	r1, #86	; 0x56
 8005d46:	880a      	ldrh	r2, [r1, #0]
 8005d48:	6803      	ldr	r3, [r0, #0]
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	d108      	bne.n	8005d60 <UART_TxISR_16BIT+0x28>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	438a      	bics	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d56:	2240      	movs	r2, #64	; 0x40
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d5e:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d60:	6d04      	ldr	r4, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d62:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8005d64:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d66:	05d2      	lsls	r2, r2, #23
 8005d68:	0dd2      	lsrs	r2, r2, #23
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005d6c:	6504      	str	r4, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005d6e:	880b      	ldrh	r3, [r1, #0]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	800b      	strh	r3, [r1, #0]
}
 8005d76:	e7f2      	b.n	8005d5e <UART_TxISR_16BIT+0x26>

08005d78 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d78:	1d03      	adds	r3, r0, #4
 8005d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8005d7c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d7e:	2b21      	cmp	r3, #33	; 0x21
 8005d80:	d113      	bne.n	8005daa <UART_TxISR_16BIT_FIFOEN+0x32>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d82:	0003      	movs	r3, r0
    {
      if (huart->TxXferCount == 0U)
 8005d84:	0004      	movs	r4, r0
        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005d86:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d88:	336a      	adds	r3, #106	; 0x6a
 8005d8a:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8005d8c:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d00b      	beq.n	8005daa <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8005d92:	8821      	ldrh	r1, [r4, #0]
 8005d94:	6803      	ldr	r3, [r0, #0]
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d108      	bne.n	8005dac <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	490c      	ldr	r1, [pc, #48]	; (8005dd0 <UART_TxISR_16BIT_FIFOEN+0x58>)
 8005d9e:	400a      	ands	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da2:	2240      	movs	r2, #64	; 0x40
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
      {
        /* Nothing to do */
      }
    }
  }
}
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005dac:	69d9      	ldr	r1, [r3, #28]
 8005dae:	4229      	tst	r1, r5
 8005db0:	d00a      	beq.n	8005dc8 <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005db2:	6d06      	ldr	r6, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005db4:	8831      	ldrh	r1, [r6, #0]
        huart->pTxBuffPtr += 2U;
 8005db6:	3602      	adds	r6, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005db8:	05c9      	lsls	r1, r1, #23
 8005dba:	0dc9      	lsrs	r1, r1, #23
 8005dbc:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005dbe:	6506      	str	r6, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005dc0:	8823      	ldrh	r3, [r4, #0]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	e7df      	b.n	8005d8e <UART_TxISR_16BIT_FIFOEN+0x16>
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	ff7fffff 	.word	0xff7fffff

08005dd4 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dd4:	1d03      	adds	r3, r0, #4
 8005dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8005dd8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dda:	2b21      	cmp	r3, #33	; 0x21
 8005ddc:	d10d      	bne.n	8005dfa <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 8005dde:	0001      	movs	r1, r0
 8005de0:	3156      	adds	r1, #86	; 0x56
 8005de2:	880a      	ldrh	r2, [r1, #0]
 8005de4:	6803      	ldr	r3, [r0, #0]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d108      	bne.n	8005dfc <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	438a      	bics	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005df2:	2240      	movs	r2, #64	; 0x40
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005dfc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005dfe:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8005e00:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005e02:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005e04:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005e06:	880b      	ldrh	r3, [r1, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	800b      	strh	r3, [r1, #0]
}
 8005e0e:	e7f4      	b.n	8005dfa <UART_TxISR_8BIT+0x26>

08005e10 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e10:	1d03      	adds	r3, r0, #4
 8005e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8005e14:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e16:	2b21      	cmp	r3, #33	; 0x21
 8005e18:	d113      	bne.n	8005e42 <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e1a:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8005e1c:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005e1e:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e20:	336a      	adds	r3, #106	; 0x6a
 8005e22:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8005e24:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	d00b      	beq.n	8005e42 <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8005e2a:	8821      	ldrh	r1, [r4, #0]
 8005e2c:	6803      	ldr	r3, [r0, #0]
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d108      	bne.n	8005e44 <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	490b      	ldr	r1, [pc, #44]	; (8005e64 <UART_TxISR_8BIT_FIFOEN+0x54>)
 8005e36:	400a      	ands	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005e44:	69d9      	ldr	r1, [r3, #28]
 8005e46:	4229      	tst	r1, r5
 8005e48:	d008      	beq.n	8005e5c <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005e4a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005e4c:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8005e4e:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005e50:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005e52:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005e54:	8823      	ldrh	r3, [r4, #0]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e5c:	3a01      	subs	r2, #1
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	e7e1      	b.n	8005e26 <UART_TxISR_8BIT_FIFOEN+0x16>
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	ff7fffff 	.word	0xff7fffff

08005e68 <HAL_UART_Transmit_IT>:
{
 8005e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6a:	1d06      	adds	r6, r0, #4
 8005e6c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8005e6e:	0003      	movs	r3, r0
    return HAL_BUSY;
 8005e70:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e72:	2c20      	cmp	r4, #32
 8005e74:	d137      	bne.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
      return HAL_ERROR;
 8005e76:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d034      	beq.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d032      	beq.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	2480      	movs	r4, #128	; 0x80
 8005e82:	689d      	ldr	r5, [r3, #8]
 8005e84:	0164      	lsls	r4, r4, #5
 8005e86:	42a5      	cmp	r5, r4
 8005e88:	d104      	bne.n	8005e94 <HAL_UART_Transmit_IT+0x2c>
 8005e8a:	691c      	ldr	r4, [r3, #16]
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Transmit_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e90:	4201      	tst	r1, r0
 8005e92:	d128      	bne.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
    __HAL_LOCK(huart);
 8005e94:	001c      	movs	r4, r3
 8005e96:	347c      	adds	r4, #124	; 0x7c
 8005e98:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 8005e9a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005e9c:	2f01      	cmp	r7, #1
 8005e9e:	d022      	beq.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
 8005ea0:	3801      	subs	r0, #1
 8005ea2:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8005ea4:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	3154      	adds	r1, #84	; 0x54
 8005eaa:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8005eac:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8005eae:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	3134      	adds	r1, #52	; 0x34
    huart->TxISR       = NULL;
 8005eb2:	671a      	str	r2, [r3, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	600a      	str	r2, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb6:	3221      	adds	r2, #33	; 0x21
 8005eb8:	67f2      	str	r2, [r6, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005eba:	2080      	movs	r0, #128	; 0x80
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8005ec0:	0580      	lsls	r0, r0, #22
 8005ec2:	0152      	lsls	r2, r2, #5
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	4286      	cmp	r6, r0
 8005ec8:	d110      	bne.n	8005eec <HAL_UART_Transmit_IT+0x84>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	4295      	cmp	r5, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_UART_Transmit_IT+0x80>
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	d109      	bne.n	8005ee8 <HAL_UART_Transmit_IT+0x80>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <HAL_UART_Transmit_IT+0xa4>)
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005ed6:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005ed8:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8005eda:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	041b      	lsls	r3, r3, #16
 8005ee0:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8005ee2:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005ee4:	608b      	str	r3, [r1, #8]
}
 8005ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <HAL_UART_Transmit_IT+0xa8>)
 8005eea:	e7f4      	b.n	8005ed6 <HAL_UART_Transmit_IT+0x6e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	4295      	cmp	r5, r2
 8005eee:	d10b      	bne.n	8005f08 <HAL_UART_Transmit_IT+0xa0>
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d108      	bne.n	8005f08 <HAL_UART_Transmit_IT+0xa0>
        huart->TxISR = UART_TxISR_16BIT;
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <HAL_UART_Transmit_IT+0xac>)
        huart->TxISR = UART_TxISR_8BIT;
 8005ef8:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005efa:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8005efc:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005efe:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8005f00:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
 8005f06:	e7ee      	b.n	8005ee6 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT;
 8005f08:	4a03      	ldr	r2, [pc, #12]	; (8005f18 <HAL_UART_Transmit_IT+0xb0>)
 8005f0a:	e7f5      	b.n	8005ef8 <HAL_UART_Transmit_IT+0x90>
 8005f0c:	08005d79 	.word	0x08005d79
 8005f10:	08005e11 	.word	0x08005e11
 8005f14:	08005d39 	.word	0x08005d39
 8005f18:	08005dd5 	.word	0x08005dd5

08005f1c <HAL_UART_Receive_IT>:
{
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f1e:	0006      	movs	r6, r0
 8005f20:	3608      	adds	r6, #8
 8005f22:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8005f24:	0003      	movs	r3, r0
    return HAL_BUSY;
 8005f26:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f28:	2c20      	cmp	r4, #32
 8005f2a:	d151      	bne.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
      return HAL_ERROR;
 8005f2c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d04e      	beq.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d04c      	beq.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f36:	2580      	movs	r5, #128	; 0x80
 8005f38:	689c      	ldr	r4, [r3, #8]
 8005f3a:	016d      	lsls	r5, r5, #5
 8005f3c:	42ac      	cmp	r4, r5
 8005f3e:	d104      	bne.n	8005f4a <HAL_UART_Receive_IT+0x2e>
 8005f40:	691d      	ldr	r5, [r3, #16]
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f46:	4201      	tst	r1, r0
 8005f48:	d142      	bne.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
    __HAL_LOCK(huart);
 8005f4a:	001d      	movs	r5, r3
 8005f4c:	357c      	adds	r5, #124	; 0x7c
 8005f4e:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 8005f50:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005f52:	2f01      	cmp	r7, #1
 8005f54:	d03c      	beq.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
 8005f56:	3801      	subs	r0, #1
 8005f58:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8005f5a:	6599      	str	r1, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005f5c:	0019      	movs	r1, r3
    huart->RxISR       = NULL;
 8005f5e:	2000      	movs	r0, #0
    UART_MASK_COMPUTATION(huart);
 8005f60:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 8005f62:	315c      	adds	r1, #92	; 0x5c
 8005f64:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8005f66:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8005f68:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 8005f6a:	66d8      	str	r0, [r3, #108]	; 0x6c
 8005f6c:	3104      	adds	r1, #4
    UART_MASK_COMPUTATION(huart);
 8005f6e:	42bc      	cmp	r4, r7
 8005f70:	d131      	bne.n	8005fd6 <HAL_UART_Receive_IT+0xba>
 8005f72:	6918      	ldr	r0, [r3, #16]
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d12c      	bne.n	8005fd2 <HAL_UART_Receive_IT+0xb6>
 8005f78:	4828      	ldr	r0, [pc, #160]	; (800601c <HAL_UART_Receive_IT+0x100>)
 8005f7a:	8008      	strh	r0, [r1, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	2000      	movs	r0, #0
 8005f80:	3188      	adds	r1, #136	; 0x88
 8005f82:	6008      	str	r0, [r1, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f84:	2122      	movs	r1, #34	; 0x22
 8005f86:	67f1      	str	r1, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	688e      	ldr	r6, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f8e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	4330      	orrs	r0, r6
 8005f92:	6088      	str	r0, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f94:	2680      	movs	r6, #128	; 0x80
 8005f96:	2080      	movs	r0, #128	; 0x80
 8005f98:	05b6      	lsls	r6, r6, #22
 8005f9a:	0140      	lsls	r0, r0, #5
 8005f9c:	42b7      	cmp	r7, r6
 8005f9e:	d12c      	bne.n	8005ffa <HAL_UART_Receive_IT+0xde>
 8005fa0:	001e      	movs	r6, r3
 8005fa2:	3668      	adds	r6, #104	; 0x68
 8005fa4:	8836      	ldrh	r6, [r6, #0]
 8005fa6:	4296      	cmp	r6, r2
 8005fa8:	d827      	bhi.n	8005ffa <HAL_UART_Receive_IT+0xde>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005faa:	4284      	cmp	r4, r0
 8005fac:	d123      	bne.n	8005ff6 <HAL_UART_Receive_IT+0xda>
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d120      	bne.n	8005ff6 <HAL_UART_Receive_IT+0xda>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005fb4:	4a1a      	ldr	r2, [pc, #104]	; (8006020 <HAL_UART_Receive_IT+0x104>)
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005fb6:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb8:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8005fba:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fbc:	680a      	ldr	r2, [r1, #0]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8005fc2:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	600b      	str	r3, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	055b      	lsls	r3, r3, #21
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	608b      	str	r3, [r1, #8]
}
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8005fd2:	20ff      	movs	r0, #255	; 0xff
 8005fd4:	e7d1      	b.n	8005f7a <HAL_UART_Receive_IT+0x5e>
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	d104      	bne.n	8005fe4 <HAL_UART_Receive_IT+0xc8>
 8005fda:	6918      	ldr	r0, [r3, #16]
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d0f8      	beq.n	8005fd2 <HAL_UART_Receive_IT+0xb6>
 8005fe0:	207f      	movs	r0, #127	; 0x7f
 8005fe2:	e7ca      	b.n	8005f7a <HAL_UART_Receive_IT+0x5e>
 8005fe4:	2780      	movs	r7, #128	; 0x80
 8005fe6:	057f      	lsls	r7, r7, #21
 8005fe8:	42bc      	cmp	r4, r7
 8005fea:	d1c6      	bne.n	8005f7a <HAL_UART_Receive_IT+0x5e>
 8005fec:	6918      	ldr	r0, [r3, #16]
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d0f6      	beq.n	8005fe0 <HAL_UART_Receive_IT+0xc4>
 8005ff2:	203f      	movs	r0, #63	; 0x3f
 8005ff4:	e7c1      	b.n	8005f7a <HAL_UART_Receive_IT+0x5e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ff6:	4a0b      	ldr	r2, [pc, #44]	; (8006024 <HAL_UART_Receive_IT+0x108>)
 8005ff8:	e7dd      	b.n	8005fb6 <HAL_UART_Receive_IT+0x9a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	4284      	cmp	r4, r0
 8005ffc:	d10c      	bne.n	8006018 <HAL_UART_Receive_IT+0xfc>
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	2a00      	cmp	r2, #0
 8006002:	d109      	bne.n	8006018 <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_16BIT;
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <HAL_UART_Receive_IT+0x10c>)
        huart->RxISR = UART_RxISR_8BIT;
 8006006:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006008:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800600a:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800600c:	680a      	ldr	r2, [r1, #0]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8006012:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006014:	600b      	str	r3, [r1, #0]
 8006016:	e7db      	b.n	8005fd0 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8006018:	4a04      	ldr	r2, [pc, #16]	; (800602c <HAL_UART_Receive_IT+0x110>)
 800601a:	e7f4      	b.n	8006006 <HAL_UART_Receive_IT+0xea>
 800601c:	000001ff 	.word	0x000001ff
 8006020:	080061a1 	.word	0x080061a1
 8006024:	080060f5 	.word	0x080060f5
 8006028:	08006095 	.word	0x08006095
 800602c:	08006031 	.word	0x08006031

08006030 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006030:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006032:	0004      	movs	r4, r0
 8006034:	3408      	adds	r4, #8
 8006036:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006038:	6803      	ldr	r3, [r0, #0]
 800603a:	2a22      	cmp	r2, #34	; 0x22
 800603c:	d123      	bne.n	8006086 <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800603e:	0002      	movs	r2, r0
 8006040:	3260      	adds	r2, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	4013      	ands	r3, r2
 8006048:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800604a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800604c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800604e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006050:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8006052:	3301      	adds	r3, #1
 8006054:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006056:	8813      	ldrh	r3, [r2, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800605e:	8813      	ldrh	r3, [r2, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10e      	bne.n	8006084 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006066:	6802      	ldr	r2, [r0, #0]
 8006068:	4d09      	ldr	r5, [pc, #36]	; (8006090 <UART_RxISR_8BIT+0x60>)
 800606a:	6811      	ldr	r1, [r2, #0]
 800606c:	4029      	ands	r1, r5
 800606e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	6891      	ldr	r1, [r2, #8]
 8006072:	3523      	adds	r5, #35	; 0x23
 8006074:	35ff      	adds	r5, #255	; 0xff
 8006076:	43a9      	bics	r1, r5
 8006078:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800607a:	2220      	movs	r2, #32
 800607c:	67e2      	str	r2, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800607e:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006080:	f002 fb4e 	bl	8008720 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006084:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006086:	2208      	movs	r2, #8
 8006088:	6999      	ldr	r1, [r3, #24]
 800608a:	430a      	orrs	r2, r1
 800608c:	619a      	str	r2, [r3, #24]
}
 800608e:	e7f9      	b.n	8006084 <UART_RxISR_8BIT+0x54>
 8006090:	fffffedf 	.word	0xfffffedf

08006094 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006094:	0001      	movs	r1, r0
 8006096:	3108      	adds	r1, #8
 8006098:	6fca      	ldr	r2, [r1, #124]	; 0x7c
{
 800609a:	b570      	push	{r4, r5, r6, lr}
 800609c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609e:	2a22      	cmp	r2, #34	; 0x22
 80060a0:	d121      	bne.n	80060e6 <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 80060a2:	0005      	movs	r5, r0
 80060a4:	3560      	adds	r5, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80060a8:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060aa:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80060ac:	402c      	ands	r4, r5
 80060ae:	8014      	strh	r4, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80060b0:	0004      	movs	r4, r0
    huart->pRxBuffPtr += 2U;
 80060b2:	3202      	adds	r2, #2
 80060b4:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80060b6:	345e      	adds	r4, #94	; 0x5e
 80060b8:	8822      	ldrh	r2, [r4, #0]
 80060ba:	3a01      	subs	r2, #1
 80060bc:	b292      	uxth	r2, r2
 80060be:	8022      	strh	r2, [r4, #0]

    if (huart->RxXferCount == 0U)
 80060c0:	8822      	ldrh	r2, [r4, #0]
 80060c2:	b292      	uxth	r2, r2
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d10d      	bne.n	80060e4 <UART_RxISR_16BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	4d09      	ldr	r5, [pc, #36]	; (80060f0 <UART_RxISR_16BIT+0x5c>)
 80060cc:	402c      	ands	r4, r5
 80060ce:	601c      	str	r4, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d0:	689c      	ldr	r4, [r3, #8]
 80060d2:	3523      	adds	r5, #35	; 0x23
 80060d4:	35ff      	adds	r5, #255	; 0xff
 80060d6:	43ac      	bics	r4, r5
 80060d8:	609c      	str	r4, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060da:	2320      	movs	r3, #32
 80060dc:	67cb      	str	r3, [r1, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060de:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060e0:	f002 fb1e 	bl	8008720 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e6:	2208      	movs	r2, #8
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	619a      	str	r2, [r3, #24]
}
 80060ee:	e7f9      	b.n	80060e4 <UART_RxISR_16BIT+0x50>
 80060f0:	fffffedf 	.word	0xfffffedf

080060f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f6:	0007      	movs	r7, r0
 80060f8:	3708      	adds	r7, #8
 80060fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 80060fc:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fe:	2b22      	cmp	r3, #34	; 0x22
 8006100:	d140      	bne.n	8006184 <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8006102:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006104:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 8006106:	3360      	adds	r3, #96	; 0x60
 8006108:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800610a:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 800610c:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800610e:	8835      	ldrh	r5, [r6, #0]
 8006110:	0022      	movs	r2, r4
 8006112:	325e      	adds	r2, #94	; 0x5e
 8006114:	2d00      	cmp	r5, #0
 8006116:	d112      	bne.n	800613e <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006118:	8813      	ldrh	r3, [r2, #0]
 800611a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00d      	beq.n	800613c <UART_RxISR_8BIT_FIFOEN+0x48>
 8006120:	8832      	ldrh	r2, [r6, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d90a      	bls.n	800613c <UART_RxISR_8BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4919      	ldr	r1, [pc, #100]	; (8006190 <UART_RxISR_8BIT_FIFOEN+0x9c>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	400a      	ands	r2, r1
 800612e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006130:	4a18      	ldr	r2, [pc, #96]	; (8006194 <UART_RxISR_8BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006132:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8006134:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006136:	2220      	movs	r2, #32
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800613c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800613e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006140:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006144:	400b      	ands	r3, r1
 8006146:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006148:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 800614a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800614c:	3301      	adds	r3, #1
 800614e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006150:	8813      	ldrh	r3, [r2, #0]
 8006152:	3b01      	subs	r3, #1
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
      if (huart->RxXferCount == 0U)
 8006158:	8813      	ldrh	r3, [r2, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10e      	bne.n	800617e <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	480d      	ldr	r0, [pc, #52]	; (8006198 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	4001      	ands	r1, r0
 8006168:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800616a:	6891      	ldr	r1, [r2, #8]
 800616c:	480b      	ldr	r0, [pc, #44]	; (800619c <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800616e:	4001      	ands	r1, r0
 8006170:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006172:	2220      	movs	r2, #32
        HAL_UART_RxCpltCallback(huart);
 8006174:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8006176:	67fa      	str	r2, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 8006178:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800617a:	f002 fad1 	bl	8008720 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800617e:	3d01      	subs	r5, #1
 8006180:	b2ad      	uxth	r5, r5
 8006182:	e7c5      	b.n	8006110 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006184:	2308      	movs	r3, #8
 8006186:	6802      	ldr	r2, [r0, #0]
 8006188:	6991      	ldr	r1, [r2, #24]
 800618a:	430b      	orrs	r3, r1
 800618c:	6193      	str	r3, [r2, #24]
}
 800618e:	e7d5      	b.n	800613c <UART_RxISR_8BIT_FIFOEN+0x48>
 8006190:	efffffff 	.word	0xefffffff
 8006194:	08006031 	.word	0x08006031
 8006198:	fffffeff 	.word	0xfffffeff
 800619c:	effffffe 	.word	0xeffffffe

080061a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a2:	0007      	movs	r7, r0
 80061a4:	3708      	adds	r7, #8
 80061a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 80061a8:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061aa:	2b22      	cmp	r3, #34	; 0x22
 80061ac:	d140      	bne.n	8006230 <UART_RxISR_16BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 80061ae:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80061b0:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 80061b2:	3360      	adds	r3, #96	; 0x60
 80061b4:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80061b6:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 80061b8:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80061ba:	8835      	ldrh	r5, [r6, #0]
 80061bc:	0021      	movs	r1, r4
 80061be:	315e      	adds	r1, #94	; 0x5e
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d112      	bne.n	80061ea <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061c4:	880b      	ldrh	r3, [r1, #0]
 80061c6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <UART_RxISR_16BIT_FIFOEN+0x48>
 80061cc:	8832      	ldrh	r2, [r6, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90a      	bls.n	80061e8 <UART_RxISR_16BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	4919      	ldr	r1, [pc, #100]	; (800623c <UART_RxISR_16BIT_FIFOEN+0x9c>)
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	400a      	ands	r2, r1
 80061da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <UART_RxISR_16BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061de:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80061e0:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061e2:	2220      	movs	r2, #32
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ec:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061ee:	4694      	mov	ip, r2
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80061f2:	9a01      	ldr	r2, [sp, #4]
 80061f4:	4010      	ands	r0, r2
 80061f6:	4662      	mov	r2, ip
 80061f8:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80061fa:	3202      	adds	r2, #2
 80061fc:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80061fe:	880a      	ldrh	r2, [r1, #0]
 8006200:	3a01      	subs	r2, #1
 8006202:	b292      	uxth	r2, r2
 8006204:	800a      	strh	r2, [r1, #0]
      if (huart->RxXferCount == 0U)
 8006206:	880a      	ldrh	r2, [r1, #0]
 8006208:	b292      	uxth	r2, r2
 800620a:	2a00      	cmp	r2, #0
 800620c:	d10d      	bne.n	800622a <UART_RxISR_16BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	480c      	ldr	r0, [pc, #48]	; (8006244 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 8006212:	4001      	ands	r1, r0
 8006214:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006216:	6899      	ldr	r1, [r3, #8]
 8006218:	480b      	ldr	r0, [pc, #44]	; (8006248 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 800621a:	4001      	ands	r1, r0
 800621c:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800621e:	2320      	movs	r3, #32
        HAL_UART_RxCpltCallback(huart);
 8006220:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 8006224:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8006226:	f002 fa7b 	bl	8008720 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800622a:	3d01      	subs	r5, #1
 800622c:	b2ad      	uxth	r5, r5
 800622e:	e7c5      	b.n	80061bc <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006230:	2308      	movs	r3, #8
 8006232:	6802      	ldr	r2, [r0, #0]
 8006234:	6991      	ldr	r1, [r2, #24]
 8006236:	430b      	orrs	r3, r1
 8006238:	6193      	str	r3, [r2, #24]
}
 800623a:	e7d5      	b.n	80061e8 <UART_RxISR_16BIT_FIFOEN+0x48>
 800623c:	efffffff 	.word	0xefffffff
 8006240:	08006095 	.word	0x08006095
 8006244:	fffffeff 	.word	0xfffffeff
 8006248:	effffffe 	.word	0xeffffffe

0800624c <HAL_UART_ErrorCallback>:
 800624c:	4770      	bx	lr
	...

08006250 <HAL_UART_IRQHandler>:
{
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006252:	6802      	ldr	r2, [r0, #0]
{
 8006254:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006256:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006258:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800625a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800625c:	071d      	lsls	r5, r3, #28
 800625e:	d10d      	bne.n	800627c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006260:	2520      	movs	r5, #32
 8006262:	422b      	tst	r3, r5
 8006264:	d100      	bne.n	8006268 <HAL_UART_IRQHandler+0x18>
 8006266:	e080      	b.n	800636a <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006268:	4229      	tst	r1, r5
 800626a:	d102      	bne.n	8006272 <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800626c:	00c5      	lsls	r5, r0, #3
 800626e:	d400      	bmi.n	8006272 <HAL_UART_IRQHandler+0x22>
 8006270:	e07b      	b.n	800636a <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8006272:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      huart->TxISR(huart);
 8006274:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006276:	2b00      	cmp	r3, #0
 8006278:	d16d      	bne.n	8006356 <HAL_UART_IRQHandler+0x106>
 800627a:	e06d      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800627c:	4d55      	ldr	r5, [pc, #340]	; (80063d4 <HAL_UART_IRQHandler+0x184>)
 800627e:	4005      	ands	r5, r0
 8006280:	9500      	str	r5, [sp, #0]
 8006282:	d104      	bne.n	800628e <HAL_UART_IRQHandler+0x3e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006284:	3521      	adds	r5, #33	; 0x21
 8006286:	35ff      	adds	r5, #255	; 0xff
 8006288:	4229      	tst	r1, r5
 800628a:	d100      	bne.n	800628e <HAL_UART_IRQHandler+0x3e>
 800628c:	e06d      	b.n	800636a <HAL_UART_IRQHandler+0x11a>
 800628e:	0025      	movs	r5, r4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006290:	2601      	movs	r6, #1
 8006292:	3588      	adds	r5, #136	; 0x88
 8006294:	4233      	tst	r3, r6
 8006296:	d005      	beq.n	80062a4 <HAL_UART_IRQHandler+0x54>
 8006298:	05cf      	lsls	r7, r1, #23
 800629a:	d503      	bpl.n	80062a4 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800629c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800629e:	682f      	ldr	r7, [r5, #0]
 80062a0:	433e      	orrs	r6, r7
 80062a2:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a4:	2602      	movs	r6, #2
 80062a6:	4233      	tst	r3, r6
 80062a8:	d00c      	beq.n	80062c4 <HAL_UART_IRQHandler+0x74>
 80062aa:	07c7      	lsls	r7, r0, #31
 80062ac:	d50a      	bpl.n	80062c4 <HAL_UART_IRQHandler+0x74>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ae:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b2:	3788      	adds	r7, #136	; 0x88
 80062b4:	683e      	ldr	r6, [r7, #0]
 80062b6:	9701      	str	r7, [sp, #4]
 80062b8:	46b4      	mov	ip, r6
 80062ba:	2604      	movs	r6, #4
 80062bc:	4667      	mov	r7, ip
 80062be:	433e      	orrs	r6, r7
 80062c0:	9f01      	ldr	r7, [sp, #4]
 80062c2:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062c4:	2604      	movs	r6, #4
 80062c6:	4233      	tst	r3, r6
 80062c8:	d00c      	beq.n	80062e4 <HAL_UART_IRQHandler+0x94>
 80062ca:	07c7      	lsls	r7, r0, #31
 80062cc:	d50a      	bpl.n	80062e4 <HAL_UART_IRQHandler+0x94>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ce:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062d0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d2:	3788      	adds	r7, #136	; 0x88
 80062d4:	683e      	ldr	r6, [r7, #0]
 80062d6:	9701      	str	r7, [sp, #4]
 80062d8:	46b4      	mov	ip, r6
 80062da:	2602      	movs	r6, #2
 80062dc:	4667      	mov	r7, ip
 80062de:	433e      	orrs	r6, r7
 80062e0:	9f01      	ldr	r7, [sp, #4]
 80062e2:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062e4:	071e      	lsls	r6, r3, #28
 80062e6:	d509      	bpl.n	80062fc <HAL_UART_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062e8:	068e      	lsls	r6, r1, #26
 80062ea:	d402      	bmi.n	80062f2 <HAL_UART_IRQHandler+0xa2>
 80062ec:	9e00      	ldr	r6, [sp, #0]
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	d004      	beq.n	80062fc <HAL_UART_IRQHandler+0xac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f2:	2608      	movs	r6, #8
 80062f4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062f6:	682a      	ldr	r2, [r5, #0]
 80062f8:	4316      	orrs	r6, r2
 80062fa:	602e      	str	r6, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062fc:	682a      	ldr	r2, [r5, #0]
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d02a      	beq.n	8006358 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006302:	2220      	movs	r2, #32
 8006304:	4213      	tst	r3, r2
 8006306:	d008      	beq.n	800631a <HAL_UART_IRQHandler+0xca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006308:	4211      	tst	r1, r2
 800630a:	d101      	bne.n	8006310 <HAL_UART_IRQHandler+0xc0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800630c:	00c3      	lsls	r3, r0, #3
 800630e:	d504      	bpl.n	800631a <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8006310:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8006316:	0020      	movs	r0, r4
 8006318:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800631a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800631c:	682e      	ldr	r6, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800631e:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8006320:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006322:	065b      	lsls	r3, r3, #25
 8006324:	d402      	bmi.n	800632c <HAL_UART_IRQHandler+0xdc>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006326:	2308      	movs	r3, #8
 8006328:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800632a:	d01a      	beq.n	8006362 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 800632c:	f7ff fcf0 	bl	8005d10 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	2140      	movs	r1, #64	; 0x40
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	420a      	tst	r2, r1
 8006338:	d00f      	beq.n	800635a <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800633c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633e:	438a      	bics	r2, r1
 8006340:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006342:	2800      	cmp	r0, #0
 8006344:	d009      	beq.n	800635a <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <HAL_UART_IRQHandler+0x188>)
 8006348:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634a:	f7fd fab1 	bl	80038b0 <HAL_DMA_Abort_IT>
 800634e:	2800      	cmp	r0, #0
 8006350:	d002      	beq.n	8006358 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006352:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006354:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006356:	4798      	blx	r3
}
 8006358:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800635a:	0020      	movs	r0, r4
 800635c:	f7ff ff76 	bl	800624c <HAL_UART_ErrorCallback>
 8006360:	e7fa      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 8006362:	f7ff ff73 	bl	800624c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006366:	602e      	str	r6, [r5, #0]
 8006368:	e7f6      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800636a:	2580      	movs	r5, #128	; 0x80
 800636c:	036d      	lsls	r5, r5, #13
 800636e:	422b      	tst	r3, r5
 8006370:	d006      	beq.n	8006380 <HAL_UART_IRQHandler+0x130>
 8006372:	0246      	lsls	r6, r0, #9
 8006374:	d504      	bpl.n	8006380 <HAL_UART_IRQHandler+0x130>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006376:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006378:	0020      	movs	r0, r4
 800637a:	f000 fd95 	bl	8006ea8 <HAL_UARTEx_WakeupCallback>
    return;
 800637e:	e7eb      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006380:	2580      	movs	r5, #128	; 0x80
 8006382:	422b      	tst	r3, r5
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0x142>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006386:	4229      	tst	r1, r5
 8006388:	d101      	bne.n	800638e <HAL_UART_IRQHandler+0x13e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800638a:	0200      	lsls	r0, r0, #8
 800638c:	d501      	bpl.n	8006392 <HAL_UART_IRQHandler+0x142>
    if (huart->TxISR != NULL)
 800638e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006390:	e770      	b.n	8006274 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006392:	2040      	movs	r0, #64	; 0x40
 8006394:	4203      	tst	r3, r0
 8006396:	d00d      	beq.n	80063b4 <HAL_UART_IRQHandler+0x164>
 8006398:	4201      	tst	r1, r0
 800639a:	d00b      	beq.n	80063b4 <HAL_UART_IRQHandler+0x164>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	4383      	bics	r3, r0
 80063a0:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	2220      	movs	r2, #32
 80063a4:	1d23      	adds	r3, r4, #4
 80063a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->TxISR = NULL;
 80063a8:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 80063aa:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80063ac:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80063ae:	f002 fa5b 	bl	8008868 <HAL_UART_TxCpltCallback>
 80063b2:	e7d1      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063b4:	021a      	lsls	r2, r3, #8
 80063b6:	d505      	bpl.n	80063c4 <HAL_UART_IRQHandler+0x174>
 80063b8:	004a      	lsls	r2, r1, #1
 80063ba:	d503      	bpl.n	80063c4 <HAL_UART_IRQHandler+0x174>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063bc:	0020      	movs	r0, r4
 80063be:	f000 fd75 	bl	8006eac <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80063c2:	e7c9      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063c4:	01db      	lsls	r3, r3, #7
 80063c6:	d5c7      	bpl.n	8006358 <HAL_UART_IRQHandler+0x108>
 80063c8:	2900      	cmp	r1, #0
 80063ca:	dac5      	bge.n	8006358 <HAL_UART_IRQHandler+0x108>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063cc:	0020      	movs	r0, r4
 80063ce:	f000 fd6c 	bl	8006eaa <HAL_UARTEx_RxFifoFullCallback>
    return;
 80063d2:	e7c1      	b.n	8006358 <HAL_UART_IRQHandler+0x108>
 80063d4:	10000001 	.word	0x10000001
 80063d8:	080063dd 	.word	0x080063dd

080063dc <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	0002      	movs	r2, r0
{
 80063e2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80063e4:	325e      	adds	r2, #94	; 0x5e
 80063e6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80063e8:	3a08      	subs	r2, #8
 80063ea:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80063ec:	f7ff ff2e 	bl	800624c <HAL_UART_ErrorCallback>
}
 80063f0:	bd10      	pop	{r4, pc}
	...

080063f4 <UART_SetConfig>:
{
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80063f8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063fa:	69c1      	ldr	r1, [r0, #28]
 80063fc:	6883      	ldr	r3, [r0, #8]
 80063fe:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006400:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006402:	4303      	orrs	r3, r0
 8006404:	6960      	ldr	r0, [r4, #20]
 8006406:	4303      	orrs	r3, r0
 8006408:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800640a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800640c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800640e:	4da4      	ldr	r5, [pc, #656]	; (80066a0 <UART_SetConfig+0x2ac>)
 8006410:	4028      	ands	r0, r5
 8006412:	4303      	orrs	r3, r0
 8006414:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006416:	6853      	ldr	r3, [r2, #4]
 8006418:	48a2      	ldr	r0, [pc, #648]	; (80066a4 <UART_SetConfig+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800641a:	4da3      	ldr	r5, [pc, #652]	; (80066a8 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800641c:	4003      	ands	r3, r0
 800641e:	68e0      	ldr	r0, [r4, #12]
 8006420:	4303      	orrs	r3, r0
 8006422:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006424:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006426:	42aa      	cmp	r2, r5
 8006428:	d001      	beq.n	800642e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800642a:	6a23      	ldr	r3, [r4, #32]
 800642c:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642e:	6893      	ldr	r3, [r2, #8]
 8006430:	4e9e      	ldr	r6, [pc, #632]	; (80066ac <UART_SetConfig+0x2b8>)
 8006432:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006434:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006436:	4303      	orrs	r3, r0
 8006438:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800643a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800643c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643e:	43b0      	bics	r0, r6
 8006440:	4318      	orrs	r0, r3
 8006442:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006444:	489a      	ldr	r0, [pc, #616]	; (80066b0 <UART_SetConfig+0x2bc>)
 8006446:	4282      	cmp	r2, r0
 8006448:	d117      	bne.n	800647a <UART_SetConfig+0x86>
 800644a:	2003      	movs	r0, #3
 800644c:	4a99      	ldr	r2, [pc, #612]	; (80066b4 <UART_SetConfig+0x2c0>)
 800644e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006450:	4002      	ands	r2, r0
 8006452:	4899      	ldr	r0, [pc, #612]	; (80066b8 <UART_SetConfig+0x2c4>)
 8006454:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	0212      	lsls	r2, r2, #8
 800645a:	4291      	cmp	r1, r2
 800645c:	d000      	beq.n	8006460 <UART_SetConfig+0x6c>
 800645e:	e289      	b.n	8006974 <UART_SetConfig+0x580>
    switch (clocksource)
 8006460:	2808      	cmp	r0, #8
 8006462:	d82b      	bhi.n	80064bc <UART_SetConfig+0xc8>
 8006464:	f7f9 fe6a 	bl	800013c <__gnu_thumb1_case_uhi>
 8006468:	002a037d 	.word	0x002a037d
 800646c:	002a021a 	.word	0x002a021a
 8006470:	002a024e 	.word	0x002a024e
 8006474:	002a002a 	.word	0x002a002a
 8006478:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 800647a:	4890      	ldr	r0, [pc, #576]	; (80066bc <UART_SetConfig+0x2c8>)
 800647c:	4282      	cmp	r2, r0
 800647e:	d105      	bne.n	800648c <UART_SetConfig+0x98>
 8006480:	200c      	movs	r0, #12
 8006482:	4a8c      	ldr	r2, [pc, #560]	; (80066b4 <UART_SetConfig+0x2c0>)
 8006484:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006486:	4002      	ands	r2, r0
 8006488:	488d      	ldr	r0, [pc, #564]	; (80066c0 <UART_SetConfig+0x2cc>)
 800648a:	e7e3      	b.n	8006454 <UART_SetConfig+0x60>
 800648c:	488d      	ldr	r0, [pc, #564]	; (80066c4 <UART_SetConfig+0x2d0>)
 800648e:	4282      	cmp	r2, r0
 8006490:	d100      	bne.n	8006494 <UART_SetConfig+0xa0>
 8006492:	e361      	b.n	8006b58 <UART_SetConfig+0x764>
 8006494:	488c      	ldr	r0, [pc, #560]	; (80066c8 <UART_SetConfig+0x2d4>)
 8006496:	4282      	cmp	r2, r0
 8006498:	d100      	bne.n	800649c <UART_SetConfig+0xa8>
 800649a:	e35d      	b.n	8006b58 <UART_SetConfig+0x764>
 800649c:	2010      	movs	r0, #16
 800649e:	42aa      	cmp	r2, r5
 80064a0:	d1d9      	bne.n	8006456 <UART_SetConfig+0x62>
 80064a2:	21c0      	movs	r1, #192	; 0xc0
 80064a4:	2080      	movs	r0, #128	; 0x80
 80064a6:	4a83      	ldr	r2, [pc, #524]	; (80066b4 <UART_SetConfig+0x2c0>)
 80064a8:	0109      	lsls	r1, r1, #4
 80064aa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80064ac:	00c0      	lsls	r0, r0, #3
 80064ae:	400a      	ands	r2, r1
 80064b0:	4282      	cmp	r2, r0
 80064b2:	d100      	bne.n	80064b6 <UART_SetConfig+0xc2>
 80064b4:	e09c      	b.n	80065f0 <UART_SetConfig+0x1fc>
 80064b6:	d80d      	bhi.n	80064d4 <UART_SetConfig+0xe0>
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d04e      	beq.n	800655a <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 80064bc:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80064be:	0021      	movs	r1, r4
 80064c0:	2301      	movs	r3, #1
 80064c2:	316a      	adds	r1, #106	; 0x6a
 80064c4:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 80064c6:	3902      	subs	r1, #2
 80064c8:	800b      	strh	r3, [r1, #0]
  huart->RxISR = NULL;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 80064ce:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80064d0:	6723      	str	r3, [r4, #112]	; 0x70
}
 80064d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d4:	2080      	movs	r0, #128	; 0x80
 80064d6:	0100      	lsls	r0, r0, #4
 80064d8:	4282      	cmp	r2, r0
 80064da:	d06e      	beq.n	80065ba <UART_SetConfig+0x1c6>
 80064dc:	428a      	cmp	r2, r1
 80064de:	d1ed      	bne.n	80064bc <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d100      	bne.n	80064e6 <UART_SetConfig+0xf2>
 80064e4:	e0c7      	b.n	8006676 <UART_SetConfig+0x282>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d100      	bne.n	80064ec <UART_SetConfig+0xf8>
 80064ea:	e0c7      	b.n	800667c <UART_SetConfig+0x288>
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d100      	bne.n	80064f2 <UART_SetConfig+0xfe>
 80064f0:	e0c8      	b.n	8006684 <UART_SetConfig+0x290>
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d100      	bne.n	80064f8 <UART_SetConfig+0x104>
 80064f6:	e0c8      	b.n	800668a <UART_SetConfig+0x296>
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d100      	bne.n	80064fe <UART_SetConfig+0x10a>
 80064fc:	e0c7      	b.n	800668e <UART_SetConfig+0x29a>
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d100      	bne.n	8006504 <UART_SetConfig+0x110>
 8006502:	e0c7      	b.n	8006694 <UART_SetConfig+0x2a0>
 8006504:	2b06      	cmp	r3, #6
 8006506:	d100      	bne.n	800650a <UART_SetConfig+0x116>
 8006508:	e0c6      	b.n	8006698 <UART_SetConfig+0x2a4>
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	2b07      	cmp	r3, #7
 800650e:	d100      	bne.n	8006512 <UART_SetConfig+0x11e>
 8006510:	e0c4      	b.n	800669c <UART_SetConfig+0x2a8>
 8006512:	2b08      	cmp	r3, #8
 8006514:	d100      	bne.n	8006518 <UART_SetConfig+0x124>
 8006516:	e0f7      	b.n	8006708 <UART_SetConfig+0x314>
 8006518:	2b09      	cmp	r3, #9
 800651a:	d100      	bne.n	800651e <UART_SetConfig+0x12a>
 800651c:	e0f6      	b.n	800670c <UART_SetConfig+0x318>
 800651e:	2b0a      	cmp	r3, #10
 8006520:	d100      	bne.n	8006524 <UART_SetConfig+0x130>
 8006522:	e0f5      	b.n	8006710 <UART_SetConfig+0x31c>
 8006524:	2b0b      	cmp	r3, #11
 8006526:	d000      	beq.n	800652a <UART_SetConfig+0x136>
 8006528:	e0a6      	b.n	8006678 <UART_SetConfig+0x284>
 800652a:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800652c:	2003      	movs	r0, #3
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	4350      	muls	r0, r2
 8006532:	4288      	cmp	r0, r1
 8006534:	d8c2      	bhi.n	80064bc <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006536:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006538:	4288      	cmp	r0, r1
 800653a:	d3bf      	bcc.n	80064bc <UART_SetConfig+0xc8>
        switch (clocksource)
 800653c:	2b08      	cmp	r3, #8
 800653e:	d900      	bls.n	8006542 <UART_SetConfig+0x14e>
 8006540:	e1a9      	b.n	8006896 <UART_SetConfig+0x4a2>
 8006542:	0018      	movs	r0, r3
 8006544:	f7f9 fdfa 	bl	800013c <__gnu_thumb1_case_uhi>
 8006548:	01a700e6 	.word	0x01a700e6
 800654c:	01a70138 	.word	0x01a70138
 8006550:	01a7016e 	.word	0x01a7016e
 8006554:	01a701a7 	.word	0x01a701a7
 8006558:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800655a:	f7fe fe19 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 800655e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006560:	2101      	movs	r1, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d021      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006566:	1849      	adds	r1, r1, r1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d01e      	beq.n	80065aa <UART_SetConfig+0x1b6>
 800656c:	3102      	adds	r1, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d01b      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006572:	3102      	adds	r1, #2
 8006574:	2b03      	cmp	r3, #3
 8006576:	d018      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006578:	3102      	adds	r1, #2
 800657a:	2b04      	cmp	r3, #4
 800657c:	d015      	beq.n	80065aa <UART_SetConfig+0x1b6>
 800657e:	3102      	adds	r1, #2
 8006580:	2b05      	cmp	r3, #5
 8006582:	d012      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006584:	3102      	adds	r1, #2
 8006586:	2b06      	cmp	r3, #6
 8006588:	d00f      	beq.n	80065aa <UART_SetConfig+0x1b6>
 800658a:	3104      	adds	r1, #4
 800658c:	2b07      	cmp	r3, #7
 800658e:	d00c      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006590:	3110      	adds	r1, #16
 8006592:	2b08      	cmp	r3, #8
 8006594:	d009      	beq.n	80065aa <UART_SetConfig+0x1b6>
 8006596:	3120      	adds	r1, #32
 8006598:	2b09      	cmp	r3, #9
 800659a:	d006      	beq.n	80065aa <UART_SetConfig+0x1b6>
 800659c:	3140      	adds	r1, #64	; 0x40
 800659e:	2b0a      	cmp	r3, #10
 80065a0:	d003      	beq.n	80065aa <UART_SetConfig+0x1b6>
 80065a2:	397f      	subs	r1, #127	; 0x7f
 80065a4:	2b0b      	cmp	r3, #11
 80065a6:	d100      	bne.n	80065aa <UART_SetConfig+0x1b6>
 80065a8:	31ff      	adds	r1, #255	; 0xff
 80065aa:	f7f9 fdd1 	bl	8000150 <__udivsi3>
        break;
 80065ae:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80065b0:	0001      	movs	r1, r0
 80065b2:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 80065b4:	4291      	cmp	r1, r2
 80065b6:	d1b9      	bne.n	800652c <UART_SetConfig+0x138>
 80065b8:	e781      	b.n	80064be <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d059      	beq.n	8006672 <UART_SetConfig+0x27e>
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d043      	beq.n	800664a <UART_SetConfig+0x256>
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d043      	beq.n	800664e <UART_SetConfig+0x25a>
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d043      	beq.n	8006652 <UART_SetConfig+0x25e>
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d043      	beq.n	8006656 <UART_SetConfig+0x262>
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d043      	beq.n	800665a <UART_SetConfig+0x266>
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	d043      	beq.n	800665e <UART_SetConfig+0x26a>
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	d043      	beq.n	8006662 <UART_SetConfig+0x26e>
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d043      	beq.n	8006666 <UART_SetConfig+0x272>
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d043      	beq.n	800666a <UART_SetConfig+0x276>
 80065e2:	2b0a      	cmp	r3, #10
 80065e4:	d043      	beq.n	800666e <UART_SetConfig+0x27a>
 80065e6:	2b0b      	cmp	r3, #11
 80065e8:	d143      	bne.n	8006672 <UART_SetConfig+0x27e>
 80065ea:	4938      	ldr	r1, [pc, #224]	; (80066cc <UART_SetConfig+0x2d8>)
 80065ec:	2302      	movs	r3, #2
 80065ee:	e79d      	b.n	800652c <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80065f0:	f7fe fcda 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 80065f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f6:	2101      	movs	r1, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d021      	beq.n	8006640 <UART_SetConfig+0x24c>
 80065fc:	1849      	adds	r1, r1, r1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d01e      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006602:	3102      	adds	r1, #2
 8006604:	2b02      	cmp	r3, #2
 8006606:	d01b      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006608:	3102      	adds	r1, #2
 800660a:	2b03      	cmp	r3, #3
 800660c:	d018      	beq.n	8006640 <UART_SetConfig+0x24c>
 800660e:	3102      	adds	r1, #2
 8006610:	2b04      	cmp	r3, #4
 8006612:	d015      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006614:	3102      	adds	r1, #2
 8006616:	2b05      	cmp	r3, #5
 8006618:	d012      	beq.n	8006640 <UART_SetConfig+0x24c>
 800661a:	3102      	adds	r1, #2
 800661c:	2b06      	cmp	r3, #6
 800661e:	d00f      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006620:	3104      	adds	r1, #4
 8006622:	2b07      	cmp	r3, #7
 8006624:	d00c      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006626:	3110      	adds	r1, #16
 8006628:	2b08      	cmp	r3, #8
 800662a:	d009      	beq.n	8006640 <UART_SetConfig+0x24c>
 800662c:	3120      	adds	r1, #32
 800662e:	2b09      	cmp	r3, #9
 8006630:	d006      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006632:	3140      	adds	r1, #64	; 0x40
 8006634:	2b0a      	cmp	r3, #10
 8006636:	d003      	beq.n	8006640 <UART_SetConfig+0x24c>
 8006638:	397f      	subs	r1, #127	; 0x7f
 800663a:	2b0b      	cmp	r3, #11
 800663c:	d100      	bne.n	8006640 <UART_SetConfig+0x24c>
 800663e:	31ff      	adds	r1, #255	; 0xff
 8006640:	f7f9 fd86 	bl	8000150 <__udivsi3>
        break;
 8006644:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006646:	0001      	movs	r1, r0
        break;
 8006648:	e7b3      	b.n	80065b2 <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800664a:	4921      	ldr	r1, [pc, #132]	; (80066d0 <UART_SetConfig+0x2dc>)
 800664c:	e7ce      	b.n	80065ec <UART_SetConfig+0x1f8>
 800664e:	4921      	ldr	r1, [pc, #132]	; (80066d4 <UART_SetConfig+0x2e0>)
 8006650:	e76c      	b.n	800652c <UART_SetConfig+0x138>
 8006652:	4921      	ldr	r1, [pc, #132]	; (80066d8 <UART_SetConfig+0x2e4>)
 8006654:	e7ca      	b.n	80065ec <UART_SetConfig+0x1f8>
 8006656:	4921      	ldr	r1, [pc, #132]	; (80066dc <UART_SetConfig+0x2e8>)
 8006658:	e7c8      	b.n	80065ec <UART_SetConfig+0x1f8>
 800665a:	4921      	ldr	r1, [pc, #132]	; (80066e0 <UART_SetConfig+0x2ec>)
 800665c:	e7c6      	b.n	80065ec <UART_SetConfig+0x1f8>
 800665e:	4921      	ldr	r1, [pc, #132]	; (80066e4 <UART_SetConfig+0x2f0>)
 8006660:	e7c4      	b.n	80065ec <UART_SetConfig+0x1f8>
 8006662:	4921      	ldr	r1, [pc, #132]	; (80066e8 <UART_SetConfig+0x2f4>)
 8006664:	e7c2      	b.n	80065ec <UART_SetConfig+0x1f8>
 8006666:	4921      	ldr	r1, [pc, #132]	; (80066ec <UART_SetConfig+0x2f8>)
 8006668:	e7c0      	b.n	80065ec <UART_SetConfig+0x1f8>
 800666a:	4921      	ldr	r1, [pc, #132]	; (80066f0 <UART_SetConfig+0x2fc>)
 800666c:	e7be      	b.n	80065ec <UART_SetConfig+0x1f8>
 800666e:	4921      	ldr	r1, [pc, #132]	; (80066f4 <UART_SetConfig+0x300>)
 8006670:	e7bc      	b.n	80065ec <UART_SetConfig+0x1f8>
 8006672:	4921      	ldr	r1, [pc, #132]	; (80066f8 <UART_SetConfig+0x304>)
 8006674:	e7ba      	b.n	80065ec <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006676:	2180      	movs	r1, #128	; 0x80
 8006678:	0209      	lsls	r1, r1, #8
 800667a:	e001      	b.n	8006680 <UART_SetConfig+0x28c>
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	01c9      	lsls	r1, r1, #7
 8006680:	2308      	movs	r3, #8
 8006682:	e753      	b.n	800652c <UART_SetConfig+0x138>
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	0189      	lsls	r1, r1, #6
 8006688:	e7fa      	b.n	8006680 <UART_SetConfig+0x28c>
 800668a:	491c      	ldr	r1, [pc, #112]	; (80066fc <UART_SetConfig+0x308>)
 800668c:	e7f8      	b.n	8006680 <UART_SetConfig+0x28c>
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	0149      	lsls	r1, r1, #5
 8006692:	e7f5      	b.n	8006680 <UART_SetConfig+0x28c>
 8006694:	491a      	ldr	r1, [pc, #104]	; (8006700 <UART_SetConfig+0x30c>)
 8006696:	e7f3      	b.n	8006680 <UART_SetConfig+0x28c>
 8006698:	491a      	ldr	r1, [pc, #104]	; (8006704 <UART_SetConfig+0x310>)
 800669a:	e7f1      	b.n	8006680 <UART_SetConfig+0x28c>
 800669c:	0109      	lsls	r1, r1, #4
 800669e:	e7ef      	b.n	8006680 <UART_SetConfig+0x28c>
 80066a0:	cfff69f3 	.word	0xcfff69f3
 80066a4:	ffffcfff 	.word	0xffffcfff
 80066a8:	40008000 	.word	0x40008000
 80066ac:	11fff4ff 	.word	0x11fff4ff
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40021000 	.word	0x40021000
 80066b8:	0800de1c 	.word	0x0800de1c
 80066bc:	40004400 	.word	0x40004400
 80066c0:	0800de20 	.word	0x0800de20
 80066c4:	40004800 	.word	0x40004800
 80066c8:	40004c00 	.word	0x40004c00
 80066cc:	0000f424 	.word	0x0000f424
 80066d0:	007a1200 	.word	0x007a1200
 80066d4:	003d0900 	.word	0x003d0900
 80066d8:	0028b0aa 	.word	0x0028b0aa
 80066dc:	001e8480 	.word	0x001e8480
 80066e0:	00186a00 	.word	0x00186a00
 80066e4:	00145855 	.word	0x00145855
 80066e8:	000f4240 	.word	0x000f4240
 80066ec:	0007a120 	.word	0x0007a120
 80066f0:	0003d090 	.word	0x0003d090
 80066f4:	0001e848 	.word	0x0001e848
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	00001555 	.word	0x00001555
 8006700:	00000ccc 	.word	0x00000ccc
 8006704:	00000aaa 	.word	0x00000aaa
 8006708:	00c9      	lsls	r1, r1, #3
 800670a:	e70f      	b.n	800652c <UART_SetConfig+0x138>
 800670c:	0089      	lsls	r1, r1, #2
 800670e:	e7b7      	b.n	8006680 <UART_SetConfig+0x28c>
 8006710:	0049      	lsls	r1, r1, #1
 8006712:	e7b5      	b.n	8006680 <UART_SetConfig+0x28c>
            pclk = HAL_RCC_GetPCLK1Freq();
 8006714:	f7fe fd3c 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800671a:	2201      	movs	r2, #1
 800671c:	2300      	movs	r3, #0
 800671e:	2900      	cmp	r1, #0
 8006720:	d02e      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006722:	2202      	movs	r2, #2
 8006724:	2300      	movs	r3, #0
 8006726:	2901      	cmp	r1, #1
 8006728:	d02a      	beq.n	8006780 <UART_SetConfig+0x38c>
 800672a:	2204      	movs	r2, #4
 800672c:	2300      	movs	r3, #0
 800672e:	2902      	cmp	r1, #2
 8006730:	d026      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006732:	2206      	movs	r2, #6
 8006734:	2300      	movs	r3, #0
 8006736:	2903      	cmp	r1, #3
 8006738:	d022      	beq.n	8006780 <UART_SetConfig+0x38c>
 800673a:	2208      	movs	r2, #8
 800673c:	2300      	movs	r3, #0
 800673e:	2904      	cmp	r1, #4
 8006740:	d01e      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006742:	220a      	movs	r2, #10
 8006744:	2300      	movs	r3, #0
 8006746:	2905      	cmp	r1, #5
 8006748:	d01a      	beq.n	8006780 <UART_SetConfig+0x38c>
 800674a:	220c      	movs	r2, #12
 800674c:	2300      	movs	r3, #0
 800674e:	2906      	cmp	r1, #6
 8006750:	d016      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006752:	2210      	movs	r2, #16
 8006754:	2300      	movs	r3, #0
 8006756:	2907      	cmp	r1, #7
 8006758:	d012      	beq.n	8006780 <UART_SetConfig+0x38c>
 800675a:	2220      	movs	r2, #32
 800675c:	2300      	movs	r3, #0
 800675e:	2908      	cmp	r1, #8
 8006760:	d00e      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006762:	2240      	movs	r2, #64	; 0x40
 8006764:	2300      	movs	r3, #0
 8006766:	2909      	cmp	r1, #9
 8006768:	d00a      	beq.n	8006780 <UART_SetConfig+0x38c>
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	2300      	movs	r3, #0
 800676e:	290a      	cmp	r1, #10
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x38c>
 8006772:	2201      	movs	r2, #1
 8006774:	2300      	movs	r3, #0
 8006776:	290b      	cmp	r1, #11
 8006778:	d102      	bne.n	8006780 <UART_SetConfig+0x38c>
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	2300      	movs	r3, #0
 800677e:	0052      	lsls	r2, r2, #1
 8006780:	2100      	movs	r1, #0
 8006782:	f7f9 fe99 	bl	80004b8 <__aeabi_uldivmod>
 8006786:	2700      	movs	r7, #0
 8006788:	6865      	ldr	r5, [r4, #4]
 800678a:	0e06      	lsrs	r6, r0, #24
 800678c:	020b      	lsls	r3, r1, #8
 800678e:	4333      	orrs	r3, r6
 8006790:	0202      	lsls	r2, r0, #8
 8006792:	086e      	lsrs	r6, r5, #1
 8006794:	1992      	adds	r2, r2, r6
 8006796:	417b      	adcs	r3, r7
 8006798:	0010      	movs	r0, r2
 800679a:	0019      	movs	r1, r3
 800679c:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679e:	003b      	movs	r3, r7
 80067a0:	f7f9 fe8a 	bl	80004b8 <__aeabi_uldivmod>
            break;
 80067a4:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067a6:	4b96      	ldr	r3, [pc, #600]	; (8006a00 <UART_SetConfig+0x60c>)
 80067a8:	4996      	ldr	r1, [pc, #600]	; (8006a04 <UART_SetConfig+0x610>)
 80067aa:	18c3      	adds	r3, r0, r3
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d900      	bls.n	80067b2 <UART_SetConfig+0x3be>
 80067b0:	e684      	b.n	80064bc <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	60d8      	str	r0, [r3, #12]
 80067b6:	e682      	b.n	80064be <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d030      	beq.n	8006820 <UART_SetConfig+0x42c>
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d01a      	beq.n	80067f8 <UART_SetConfig+0x404>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d01a      	beq.n	80067fc <UART_SetConfig+0x408>
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d01a      	beq.n	8006800 <UART_SetConfig+0x40c>
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d01a      	beq.n	8006804 <UART_SetConfig+0x410>
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d01a      	beq.n	8006808 <UART_SetConfig+0x414>
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d01a      	beq.n	800680c <UART_SetConfig+0x418>
 80067d6:	2b07      	cmp	r3, #7
 80067d8:	d01a      	beq.n	8006810 <UART_SetConfig+0x41c>
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d01a      	beq.n	8006814 <UART_SetConfig+0x420>
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d01a      	beq.n	8006818 <UART_SetConfig+0x424>
 80067e2:	2b0a      	cmp	r3, #10
 80067e4:	d01a      	beq.n	800681c <UART_SetConfig+0x428>
 80067e6:	2b0b      	cmp	r3, #11
 80067e8:	d11a      	bne.n	8006820 <UART_SetConfig+0x42c>
 80067ea:	4887      	ldr	r0, [pc, #540]	; (8006a08 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ec:	2100      	movs	r1, #0
 80067ee:	2700      	movs	r7, #0
 80067f0:	0856      	lsrs	r6, r2, #1
 80067f2:	1980      	adds	r0, r0, r6
 80067f4:	4179      	adcs	r1, r7
 80067f6:	e7d2      	b.n	800679e <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f8:	4884      	ldr	r0, [pc, #528]	; (8006a0c <UART_SetConfig+0x618>)
 80067fa:	e7f7      	b.n	80067ec <UART_SetConfig+0x3f8>
 80067fc:	4884      	ldr	r0, [pc, #528]	; (8006a10 <UART_SetConfig+0x61c>)
 80067fe:	e7f5      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006800:	4884      	ldr	r0, [pc, #528]	; (8006a14 <UART_SetConfig+0x620>)
 8006802:	e7f3      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006804:	4884      	ldr	r0, [pc, #528]	; (8006a18 <UART_SetConfig+0x624>)
 8006806:	e7f1      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006808:	4884      	ldr	r0, [pc, #528]	; (8006a1c <UART_SetConfig+0x628>)
 800680a:	e7ef      	b.n	80067ec <UART_SetConfig+0x3f8>
 800680c:	4884      	ldr	r0, [pc, #528]	; (8006a20 <UART_SetConfig+0x62c>)
 800680e:	e7ed      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006810:	4884      	ldr	r0, [pc, #528]	; (8006a24 <UART_SetConfig+0x630>)
 8006812:	e7eb      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006814:	4884      	ldr	r0, [pc, #528]	; (8006a28 <UART_SetConfig+0x634>)
 8006816:	e7e9      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006818:	4884      	ldr	r0, [pc, #528]	; (8006a2c <UART_SetConfig+0x638>)
 800681a:	e7e7      	b.n	80067ec <UART_SetConfig+0x3f8>
 800681c:	4884      	ldr	r0, [pc, #528]	; (8006a30 <UART_SetConfig+0x63c>)
 800681e:	e7e5      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006820:	4884      	ldr	r0, [pc, #528]	; (8006a34 <UART_SetConfig+0x640>)
 8006822:	e7e3      	b.n	80067ec <UART_SetConfig+0x3f8>
            pclk = HAL_RCC_GetSysClockFreq();
 8006824:	f7fe fbc0 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8006828:	e776      	b.n	8006718 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800682a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d018      	beq.n	8006862 <UART_SetConfig+0x46e>
 8006830:	2b01      	cmp	r3, #1
 8006832:	d019      	beq.n	8006868 <UART_SetConfig+0x474>
 8006834:	2b02      	cmp	r3, #2
 8006836:	d01a      	beq.n	800686e <UART_SetConfig+0x47a>
 8006838:	2b03      	cmp	r3, #3
 800683a:	d01b      	beq.n	8006874 <UART_SetConfig+0x480>
 800683c:	2b04      	cmp	r3, #4
 800683e:	d01b      	beq.n	8006878 <UART_SetConfig+0x484>
 8006840:	2b05      	cmp	r3, #5
 8006842:	d01c      	beq.n	800687e <UART_SetConfig+0x48a>
 8006844:	2b06      	cmp	r3, #6
 8006846:	d01c      	beq.n	8006882 <UART_SetConfig+0x48e>
 8006848:	2080      	movs	r0, #128	; 0x80
 800684a:	2b07      	cmp	r3, #7
 800684c:	d01b      	beq.n	8006886 <UART_SetConfig+0x492>
 800684e:	2b08      	cmp	r3, #8
 8006850:	d01b      	beq.n	800688a <UART_SetConfig+0x496>
 8006852:	2b09      	cmp	r3, #9
 8006854:	d01b      	beq.n	800688e <UART_SetConfig+0x49a>
 8006856:	2b0a      	cmp	r3, #10
 8006858:	d01b      	beq.n	8006892 <UART_SetConfig+0x49e>
 800685a:	2b0b      	cmp	r3, #11
 800685c:	d102      	bne.n	8006864 <UART_SetConfig+0x470>
 800685e:	0200      	lsls	r0, r0, #8
 8006860:	e7c4      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006862:	2080      	movs	r0, #128	; 0x80
 8006864:	0400      	lsls	r0, r0, #16
 8006866:	e7c1      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006868:	2080      	movs	r0, #128	; 0x80
 800686a:	03c0      	lsls	r0, r0, #15
 800686c:	e7be      	b.n	80067ec <UART_SetConfig+0x3f8>
 800686e:	2080      	movs	r0, #128	; 0x80
 8006870:	0380      	lsls	r0, r0, #14
 8006872:	e7bb      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006874:	4870      	ldr	r0, [pc, #448]	; (8006a38 <UART_SetConfig+0x644>)
 8006876:	e7b9      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006878:	2080      	movs	r0, #128	; 0x80
 800687a:	0340      	lsls	r0, r0, #13
 800687c:	e7b6      	b.n	80067ec <UART_SetConfig+0x3f8>
 800687e:	486f      	ldr	r0, [pc, #444]	; (8006a3c <UART_SetConfig+0x648>)
 8006880:	e7b4      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006882:	486f      	ldr	r0, [pc, #444]	; (8006a40 <UART_SetConfig+0x64c>)
 8006884:	e7b2      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006886:	0300      	lsls	r0, r0, #12
 8006888:	e7b0      	b.n	80067ec <UART_SetConfig+0x3f8>
 800688a:	02c0      	lsls	r0, r0, #11
 800688c:	e7ae      	b.n	80067ec <UART_SetConfig+0x3f8>
 800688e:	0280      	lsls	r0, r0, #10
 8006890:	e7ac      	b.n	80067ec <UART_SetConfig+0x3f8>
 8006892:	0240      	lsls	r0, r0, #9
 8006894:	e7aa      	b.n	80067ec <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 8006896:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006898:	2000      	movs	r0, #0
 800689a:	e784      	b.n	80067a6 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02f      	beq.n	8006900 <UART_SetConfig+0x50c>
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d019      	beq.n	80068d8 <UART_SetConfig+0x4e4>
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d019      	beq.n	80068dc <UART_SetConfig+0x4e8>
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d019      	beq.n	80068e0 <UART_SetConfig+0x4ec>
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d019      	beq.n	80068e4 <UART_SetConfig+0x4f0>
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d019      	beq.n	80068e8 <UART_SetConfig+0x4f4>
 80068b4:	2b06      	cmp	r3, #6
 80068b6:	d019      	beq.n	80068ec <UART_SetConfig+0x4f8>
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	d019      	beq.n	80068f0 <UART_SetConfig+0x4fc>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d019      	beq.n	80068f4 <UART_SetConfig+0x500>
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d019      	beq.n	80068f8 <UART_SetConfig+0x504>
 80068c4:	2b0a      	cmp	r3, #10
 80068c6:	d019      	beq.n	80068fc <UART_SetConfig+0x508>
 80068c8:	2b0b      	cmp	r3, #11
 80068ca:	d119      	bne.n	8006900 <UART_SetConfig+0x50c>
 80068cc:	485d      	ldr	r0, [pc, #372]	; (8006a44 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ce:	6863      	ldr	r3, [r4, #4]
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	085b      	lsrs	r3, r3, #1
 80068d4:	1818      	adds	r0, r3, r0
 80068d6:	e173      	b.n	8006bc0 <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d8:	484b      	ldr	r0, [pc, #300]	; (8006a08 <UART_SetConfig+0x614>)
 80068da:	e7f8      	b.n	80068ce <UART_SetConfig+0x4da>
 80068dc:	485a      	ldr	r0, [pc, #360]	; (8006a48 <UART_SetConfig+0x654>)
 80068de:	e7f6      	b.n	80068ce <UART_SetConfig+0x4da>
 80068e0:	485a      	ldr	r0, [pc, #360]	; (8006a4c <UART_SetConfig+0x658>)
 80068e2:	e7f4      	b.n	80068ce <UART_SetConfig+0x4da>
 80068e4:	485a      	ldr	r0, [pc, #360]	; (8006a50 <UART_SetConfig+0x65c>)
 80068e6:	e7f2      	b.n	80068ce <UART_SetConfig+0x4da>
 80068e8:	485a      	ldr	r0, [pc, #360]	; (8006a54 <UART_SetConfig+0x660>)
 80068ea:	e7f0      	b.n	80068ce <UART_SetConfig+0x4da>
 80068ec:	485a      	ldr	r0, [pc, #360]	; (8006a58 <UART_SetConfig+0x664>)
 80068ee:	e7ee      	b.n	80068ce <UART_SetConfig+0x4da>
 80068f0:	485a      	ldr	r0, [pc, #360]	; (8006a5c <UART_SetConfig+0x668>)
 80068f2:	e7ec      	b.n	80068ce <UART_SetConfig+0x4da>
 80068f4:	485a      	ldr	r0, [pc, #360]	; (8006a60 <UART_SetConfig+0x66c>)
 80068f6:	e7ea      	b.n	80068ce <UART_SetConfig+0x4da>
 80068f8:	485a      	ldr	r0, [pc, #360]	; (8006a64 <UART_SetConfig+0x670>)
 80068fa:	e7e8      	b.n	80068ce <UART_SetConfig+0x4da>
 80068fc:	485a      	ldr	r0, [pc, #360]	; (8006a68 <UART_SetConfig+0x674>)
 80068fe:	e7e6      	b.n	80068ce <UART_SetConfig+0x4da>
 8006900:	484b      	ldr	r0, [pc, #300]	; (8006a30 <UART_SetConfig+0x63c>)
 8006902:	e7e4      	b.n	80068ce <UART_SetConfig+0x4da>
        pclk = HAL_RCC_GetSysClockFreq();
 8006904:	f7fe fb50 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8006908:	e12d      	b.n	8006b66 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <UART_SetConfig+0x54c>
 800690e:	2b01      	cmp	r3, #1
 8006910:	d019      	beq.n	8006946 <UART_SetConfig+0x552>
 8006912:	2b02      	cmp	r3, #2
 8006914:	d01a      	beq.n	800694c <UART_SetConfig+0x558>
 8006916:	2b03      	cmp	r3, #3
 8006918:	d01b      	beq.n	8006952 <UART_SetConfig+0x55e>
 800691a:	2b04      	cmp	r3, #4
 800691c:	d01b      	beq.n	8006956 <UART_SetConfig+0x562>
 800691e:	2b05      	cmp	r3, #5
 8006920:	d01c      	beq.n	800695c <UART_SetConfig+0x568>
 8006922:	2b06      	cmp	r3, #6
 8006924:	d01c      	beq.n	8006960 <UART_SetConfig+0x56c>
 8006926:	2080      	movs	r0, #128	; 0x80
 8006928:	2b07      	cmp	r3, #7
 800692a:	d01b      	beq.n	8006964 <UART_SetConfig+0x570>
 800692c:	2b08      	cmp	r3, #8
 800692e:	d01b      	beq.n	8006968 <UART_SetConfig+0x574>
 8006930:	2b09      	cmp	r3, #9
 8006932:	d01b      	beq.n	800696c <UART_SetConfig+0x578>
 8006934:	2b0a      	cmp	r3, #10
 8006936:	d01b      	beq.n	8006970 <UART_SetConfig+0x57c>
 8006938:	2b0b      	cmp	r3, #11
 800693a:	d102      	bne.n	8006942 <UART_SetConfig+0x54e>
 800693c:	0040      	lsls	r0, r0, #1
 800693e:	e7c6      	b.n	80068ce <UART_SetConfig+0x4da>
 8006940:	2080      	movs	r0, #128	; 0x80
 8006942:	0240      	lsls	r0, r0, #9
 8006944:	e7c3      	b.n	80068ce <UART_SetConfig+0x4da>
 8006946:	2080      	movs	r0, #128	; 0x80
 8006948:	0200      	lsls	r0, r0, #8
 800694a:	e7c0      	b.n	80068ce <UART_SetConfig+0x4da>
 800694c:	2080      	movs	r0, #128	; 0x80
 800694e:	01c0      	lsls	r0, r0, #7
 8006950:	e7bd      	b.n	80068ce <UART_SetConfig+0x4da>
 8006952:	4846      	ldr	r0, [pc, #280]	; (8006a6c <UART_SetConfig+0x678>)
 8006954:	e7bb      	b.n	80068ce <UART_SetConfig+0x4da>
 8006956:	2080      	movs	r0, #128	; 0x80
 8006958:	0180      	lsls	r0, r0, #6
 800695a:	e7b8      	b.n	80068ce <UART_SetConfig+0x4da>
 800695c:	4844      	ldr	r0, [pc, #272]	; (8006a70 <UART_SetConfig+0x67c>)
 800695e:	e7b6      	b.n	80068ce <UART_SetConfig+0x4da>
 8006960:	4844      	ldr	r0, [pc, #272]	; (8006a74 <UART_SetConfig+0x680>)
 8006962:	e7b4      	b.n	80068ce <UART_SetConfig+0x4da>
 8006964:	0140      	lsls	r0, r0, #5
 8006966:	e7b2      	b.n	80068ce <UART_SetConfig+0x4da>
 8006968:	0100      	lsls	r0, r0, #4
 800696a:	e7b0      	b.n	80068ce <UART_SetConfig+0x4da>
 800696c:	00c0      	lsls	r0, r0, #3
 800696e:	e7ae      	b.n	80068ce <UART_SetConfig+0x4da>
 8006970:	0080      	lsls	r0, r0, #2
 8006972:	e7ac      	b.n	80068ce <UART_SetConfig+0x4da>
    switch (clocksource)
 8006974:	2808      	cmp	r0, #8
 8006976:	d900      	bls.n	800697a <UART_SetConfig+0x586>
 8006978:	e0eb      	b.n	8006b52 <UART_SetConfig+0x75e>
 800697a:	f7f9 fbd5 	bl	8000128 <__gnu_thumb1_case_uqi>
 800697e:	ea05      	.short	0xea05
 8006980:	eab3ea7f 	.word	0xeab3ea7f
 8006984:	eaea      	.short	0xeaea
 8006986:	b6          	.byte	0xb6
 8006987:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fe fc02 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698e:	2101      	movs	r1, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d021      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 8006994:	1849      	adds	r1, r1, r1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d01e      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 800699a:	3102      	adds	r1, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d01b      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069a0:	3102      	adds	r1, #2
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d018      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069a6:	3102      	adds	r1, #2
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d015      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069ac:	3102      	adds	r1, #2
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d012      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069b2:	3102      	adds	r1, #2
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d00f      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069b8:	3104      	adds	r1, #4
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d00c      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069be:	3110      	adds	r1, #16
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d009      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069c4:	3120      	adds	r1, #32
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d006      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069ca:	3140      	adds	r1, #64	; 0x40
 80069cc:	2b0a      	cmp	r3, #10
 80069ce:	d003      	beq.n	80069d8 <UART_SetConfig+0x5e4>
 80069d0:	397f      	subs	r1, #127	; 0x7f
 80069d2:	2b0b      	cmp	r3, #11
 80069d4:	d100      	bne.n	80069d8 <UART_SetConfig+0x5e4>
 80069d6:	31ff      	adds	r1, #255	; 0xff
 80069d8:	6865      	ldr	r5, [r4, #4]
 80069da:	f7f9 fbb9 	bl	8000150 <__udivsi3>
 80069de:	0029      	movs	r1, r5
 80069e0:	086b      	lsrs	r3, r5, #1
 80069e2:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e4:	f7f9 fbb4 	bl	8000150 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80069e8:	2200      	movs	r2, #0
 80069ea:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ec:	0019      	movs	r1, r3
 80069ee:	4822      	ldr	r0, [pc, #136]	; (8006a78 <UART_SetConfig+0x684>)
 80069f0:	3910      	subs	r1, #16
 80069f2:	4281      	cmp	r1, r0
 80069f4:	d900      	bls.n	80069f8 <UART_SetConfig+0x604>
 80069f6:	e561      	b.n	80064bc <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	60cb      	str	r3, [r1, #12]
 80069fc:	e55f      	b.n	80064be <UART_SetConfig+0xca>
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	fffffd00 	.word	0xfffffd00
 8006a04:	000ffcff 	.word	0x000ffcff
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	7a120000 	.word	0x7a120000
 8006a10:	3d090000 	.word	0x3d090000
 8006a14:	28b0aa00 	.word	0x28b0aa00
 8006a18:	1e848000 	.word	0x1e848000
 8006a1c:	186a0000 	.word	0x186a0000
 8006a20:	14585500 	.word	0x14585500
 8006a24:	0f424000 	.word	0x0f424000
 8006a28:	07a12000 	.word	0x07a12000
 8006a2c:	03d09000 	.word	0x03d09000
 8006a30:	01e84800 	.word	0x01e84800
 8006a34:	f4240000 	.word	0xf4240000
 8006a38:	00155500 	.word	0x00155500
 8006a3c:	000ccc00 	.word	0x000ccc00
 8006a40:	000aaa00 	.word	0x000aaa00
 8006a44:	0001e848 	.word	0x0001e848
 8006a48:	007a1200 	.word	0x007a1200
 8006a4c:	00516154 	.word	0x00516154
 8006a50:	003d0900 	.word	0x003d0900
 8006a54:	0030d400 	.word	0x0030d400
 8006a58:	0028b0aa 	.word	0x0028b0aa
 8006a5c:	001e8480 	.word	0x001e8480
 8006a60:	000f4240 	.word	0x000f4240
 8006a64:	0007a120 	.word	0x0007a120
 8006a68:	0003d090 	.word	0x0003d090
 8006a6c:	00002aaa 	.word	0x00002aaa
 8006a70:	00001998 	.word	0x00001998
 8006a74:	00001554 	.word	0x00001554
 8006a78:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02f      	beq.n	8006ae0 <UART_SetConfig+0x6ec>
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d019      	beq.n	8006ab8 <UART_SetConfig+0x6c4>
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d019      	beq.n	8006abc <UART_SetConfig+0x6c8>
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d019      	beq.n	8006ac0 <UART_SetConfig+0x6cc>
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d019      	beq.n	8006ac4 <UART_SetConfig+0x6d0>
 8006a90:	2b05      	cmp	r3, #5
 8006a92:	d019      	beq.n	8006ac8 <UART_SetConfig+0x6d4>
 8006a94:	2b06      	cmp	r3, #6
 8006a96:	d019      	beq.n	8006acc <UART_SetConfig+0x6d8>
 8006a98:	2b07      	cmp	r3, #7
 8006a9a:	d019      	beq.n	8006ad0 <UART_SetConfig+0x6dc>
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d019      	beq.n	8006ad4 <UART_SetConfig+0x6e0>
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d019      	beq.n	8006ad8 <UART_SetConfig+0x6e4>
 8006aa4:	2b0a      	cmp	r3, #10
 8006aa6:	d019      	beq.n	8006adc <UART_SetConfig+0x6e8>
 8006aa8:	2b0b      	cmp	r3, #11
 8006aaa:	d119      	bne.n	8006ae0 <UART_SetConfig+0x6ec>
 8006aac:	484e      	ldr	r0, [pc, #312]	; (8006be8 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	1818      	adds	r0, r3, r0
 8006ab6:	e795      	b.n	80069e4 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab8:	484c      	ldr	r0, [pc, #304]	; (8006bec <UART_SetConfig+0x7f8>)
 8006aba:	e7f8      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006abc:	484c      	ldr	r0, [pc, #304]	; (8006bf0 <UART_SetConfig+0x7fc>)
 8006abe:	e7f6      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ac0:	484c      	ldr	r0, [pc, #304]	; (8006bf4 <UART_SetConfig+0x800>)
 8006ac2:	e7f4      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ac4:	484c      	ldr	r0, [pc, #304]	; (8006bf8 <UART_SetConfig+0x804>)
 8006ac6:	e7f2      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ac8:	484c      	ldr	r0, [pc, #304]	; (8006bfc <UART_SetConfig+0x808>)
 8006aca:	e7f0      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006acc:	484c      	ldr	r0, [pc, #304]	; (8006c00 <UART_SetConfig+0x80c>)
 8006ace:	e7ee      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ad0:	484c      	ldr	r0, [pc, #304]	; (8006c04 <UART_SetConfig+0x810>)
 8006ad2:	e7ec      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ad4:	484c      	ldr	r0, [pc, #304]	; (8006c08 <UART_SetConfig+0x814>)
 8006ad6:	e7ea      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ad8:	484c      	ldr	r0, [pc, #304]	; (8006c0c <UART_SetConfig+0x818>)
 8006ada:	e7e8      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006adc:	484c      	ldr	r0, [pc, #304]	; (8006c10 <UART_SetConfig+0x81c>)
 8006ade:	e7e6      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006ae0:	484c      	ldr	r0, [pc, #304]	; (8006c14 <UART_SetConfig+0x820>)
 8006ae2:	e7e4      	b.n	8006aae <UART_SetConfig+0x6ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae4:	f7fe fa60 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8006ae8:	e750      	b.n	800698c <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d018      	beq.n	8006b20 <UART_SetConfig+0x72c>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d018      	beq.n	8006b24 <UART_SetConfig+0x730>
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d019      	beq.n	8006b2a <UART_SetConfig+0x736>
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d01a      	beq.n	8006b30 <UART_SetConfig+0x73c>
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d01a      	beq.n	8006b34 <UART_SetConfig+0x740>
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d01b      	beq.n	8006b3a <UART_SetConfig+0x746>
 8006b02:	2b06      	cmp	r3, #6
 8006b04:	d01b      	beq.n	8006b3e <UART_SetConfig+0x74a>
 8006b06:	2080      	movs	r0, #128	; 0x80
 8006b08:	2b07      	cmp	r3, #7
 8006b0a:	d01a      	beq.n	8006b42 <UART_SetConfig+0x74e>
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d01a      	beq.n	8006b46 <UART_SetConfig+0x752>
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d01a      	beq.n	8006b4a <UART_SetConfig+0x756>
 8006b14:	2b0a      	cmp	r3, #10
 8006b16:	d01a      	beq.n	8006b4e <UART_SetConfig+0x75a>
 8006b18:	2b0b      	cmp	r3, #11
 8006b1a:	d0c8      	beq.n	8006aae <UART_SetConfig+0x6ba>
 8006b1c:	0200      	lsls	r0, r0, #8
 8006b1e:	e7c6      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b20:	2080      	movs	r0, #128	; 0x80
 8006b22:	e7fb      	b.n	8006b1c <UART_SetConfig+0x728>
 8006b24:	2080      	movs	r0, #128	; 0x80
 8006b26:	01c0      	lsls	r0, r0, #7
 8006b28:	e7c1      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b2a:	2080      	movs	r0, #128	; 0x80
 8006b2c:	0180      	lsls	r0, r0, #6
 8006b2e:	e7be      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b30:	4839      	ldr	r0, [pc, #228]	; (8006c18 <UART_SetConfig+0x824>)
 8006b32:	e7bc      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b34:	2080      	movs	r0, #128	; 0x80
 8006b36:	0140      	lsls	r0, r0, #5
 8006b38:	e7b9      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b3a:	4838      	ldr	r0, [pc, #224]	; (8006c1c <UART_SetConfig+0x828>)
 8006b3c:	e7b7      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b3e:	4838      	ldr	r0, [pc, #224]	; (8006c20 <UART_SetConfig+0x82c>)
 8006b40:	e7b5      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b42:	0100      	lsls	r0, r0, #4
 8006b44:	e7b3      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b46:	00c0      	lsls	r0, r0, #3
 8006b48:	e7b1      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b4a:	0080      	lsls	r0, r0, #2
 8006b4c:	e7af      	b.n	8006aae <UART_SetConfig+0x6ba>
 8006b4e:	0040      	lsls	r0, r0, #1
 8006b50:	e7ad      	b.n	8006aae <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 8006b52:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e749      	b.n	80069ec <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	2380      	movs	r3, #128	; 0x80
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d000      	beq.n	8006b62 <UART_SetConfig+0x76e>
 8006b60:	e712      	b.n	8006988 <UART_SetConfig+0x594>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b62:	f7fe fb15 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b68:	2101      	movs	r1, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d021      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b6e:	1849      	adds	r1, r1, r1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d01e      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b74:	3102      	adds	r1, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d01b      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b7a:	3102      	adds	r1, #2
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d018      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b80:	3102      	adds	r1, #2
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d015      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b86:	3102      	adds	r1, #2
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d012      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b8c:	3102      	adds	r1, #2
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d00f      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b92:	3104      	adds	r1, #4
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	d00c      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b98:	3110      	adds	r1, #16
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d009      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006b9e:	3120      	adds	r1, #32
 8006ba0:	2b09      	cmp	r3, #9
 8006ba2:	d006      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006ba4:	3140      	adds	r1, #64	; 0x40
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d003      	beq.n	8006bb2 <UART_SetConfig+0x7be>
 8006baa:	397f      	subs	r1, #127	; 0x7f
 8006bac:	2b0b      	cmp	r3, #11
 8006bae:	d100      	bne.n	8006bb2 <UART_SetConfig+0x7be>
 8006bb0:	31ff      	adds	r1, #255	; 0xff
 8006bb2:	f7f9 facd 	bl	8000150 <__udivsi3>
 8006bb6:	6865      	ldr	r5, [r4, #4]
 8006bb8:	0040      	lsls	r0, r0, #1
 8006bba:	0029      	movs	r1, r5
 8006bbc:	086b      	lsrs	r3, r5, #1
 8006bbe:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc0:	f7f9 fac6 	bl	8000150 <__udivsi3>
 8006bc4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <UART_SetConfig+0x830>)
 8006bca:	3b10      	subs	r3, #16
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d900      	bls.n	8006bd2 <UART_SetConfig+0x7de>
 8006bd0:	e474      	b.n	80064bc <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd2:	230f      	movs	r3, #15
 8006bd4:	0002      	movs	r2, r0
 8006bd6:	439a      	bics	r2, r3
 8006bd8:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bda:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8006bdc:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bde:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8006be0:	4318      	orrs	r0, r3
 8006be2:	60d0      	str	r0, [r2, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	e46a      	b.n	80064be <UART_SetConfig+0xca>
 8006be8:	0000f424 	.word	0x0000f424
 8006bec:	007a1200 	.word	0x007a1200
 8006bf0:	003d0900 	.word	0x003d0900
 8006bf4:	0028b0aa 	.word	0x0028b0aa
 8006bf8:	001e8480 	.word	0x001e8480
 8006bfc:	00186a00 	.word	0x00186a00
 8006c00:	00145855 	.word	0x00145855
 8006c04:	000f4240 	.word	0x000f4240
 8006c08:	0007a120 	.word	0x0007a120
 8006c0c:	0003d090 	.word	0x0003d090
 8006c10:	0001e848 	.word	0x0001e848
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	00001555 	.word	0x00001555
 8006c1c:	00000ccc 	.word	0x00000ccc
 8006c20:	00000aaa 	.word	0x00000aaa
 8006c24:	0000ffef 	.word	0x0000ffef

08006c28 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c28:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006c2a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	d506      	bpl.n	8006c3e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c30:	6801      	ldr	r1, [r0, #0]
 8006c32:	4c28      	ldr	r4, [pc, #160]	; (8006cd4 <UART_AdvFeatureConfig+0xac>)
 8006c34:	684a      	ldr	r2, [r1, #4]
 8006c36:	4022      	ands	r2, r4
 8006c38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006c3a:	4322      	orrs	r2, r4
 8006c3c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3e:	079a      	lsls	r2, r3, #30
 8006c40:	d506      	bpl.n	8006c50 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c42:	6801      	ldr	r1, [r0, #0]
 8006c44:	4c24      	ldr	r4, [pc, #144]	; (8006cd8 <UART_AdvFeatureConfig+0xb0>)
 8006c46:	684a      	ldr	r2, [r1, #4]
 8006c48:	4022      	ands	r2, r4
 8006c4a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006c4c:	4322      	orrs	r2, r4
 8006c4e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c50:	075a      	lsls	r2, r3, #29
 8006c52:	d506      	bpl.n	8006c62 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c54:	6801      	ldr	r1, [r0, #0]
 8006c56:	4c21      	ldr	r4, [pc, #132]	; (8006cdc <UART_AdvFeatureConfig+0xb4>)
 8006c58:	684a      	ldr	r2, [r1, #4]
 8006c5a:	4022      	ands	r2, r4
 8006c5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006c5e:	4322      	orrs	r2, r4
 8006c60:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c62:	071a      	lsls	r2, r3, #28
 8006c64:	d506      	bpl.n	8006c74 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c66:	6801      	ldr	r1, [r0, #0]
 8006c68:	4c1d      	ldr	r4, [pc, #116]	; (8006ce0 <UART_AdvFeatureConfig+0xb8>)
 8006c6a:	684a      	ldr	r2, [r1, #4]
 8006c6c:	4022      	ands	r2, r4
 8006c6e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006c70:	4322      	orrs	r2, r4
 8006c72:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c74:	06da      	lsls	r2, r3, #27
 8006c76:	d506      	bpl.n	8006c86 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c78:	6801      	ldr	r1, [r0, #0]
 8006c7a:	4c1a      	ldr	r4, [pc, #104]	; (8006ce4 <UART_AdvFeatureConfig+0xbc>)
 8006c7c:	688a      	ldr	r2, [r1, #8]
 8006c7e:	4022      	ands	r2, r4
 8006c80:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006c82:	4322      	orrs	r2, r4
 8006c84:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	069a      	lsls	r2, r3, #26
 8006c88:	d506      	bpl.n	8006c98 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c8a:	6801      	ldr	r1, [r0, #0]
 8006c8c:	4c16      	ldr	r4, [pc, #88]	; (8006ce8 <UART_AdvFeatureConfig+0xc0>)
 8006c8e:	688a      	ldr	r2, [r1, #8]
 8006c90:	4022      	ands	r2, r4
 8006c92:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006c94:	4322      	orrs	r2, r4
 8006c96:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c98:	065a      	lsls	r2, r3, #25
 8006c9a:	d510      	bpl.n	8006cbe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c9c:	6801      	ldr	r1, [r0, #0]
 8006c9e:	4d13      	ldr	r5, [pc, #76]	; (8006cec <UART_AdvFeatureConfig+0xc4>)
 8006ca0:	684a      	ldr	r2, [r1, #4]
 8006ca2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006ca4:	402a      	ands	r2, r5
 8006ca6:	4322      	orrs	r2, r4
 8006ca8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	2280      	movs	r2, #128	; 0x80
 8006cac:	0352      	lsls	r2, r2, #13
 8006cae:	4294      	cmp	r4, r2
 8006cb0:	d105      	bne.n	8006cbe <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb2:	684a      	ldr	r2, [r1, #4]
 8006cb4:	4c0e      	ldr	r4, [pc, #56]	; (8006cf0 <UART_AdvFeatureConfig+0xc8>)
 8006cb6:	4022      	ands	r2, r4
 8006cb8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006cba:	4322      	orrs	r2, r4
 8006cbc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cbe:	061b      	lsls	r3, r3, #24
 8006cc0:	d506      	bpl.n	8006cd0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc2:	6802      	ldr	r2, [r0, #0]
 8006cc4:	490b      	ldr	r1, [pc, #44]	; (8006cf4 <UART_AdvFeatureConfig+0xcc>)
 8006cc6:	6853      	ldr	r3, [r2, #4]
 8006cc8:	400b      	ands	r3, r1
 8006cca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6053      	str	r3, [r2, #4]
}
 8006cd0:	bd30      	pop	{r4, r5, pc}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	fffdffff 	.word	0xfffdffff
 8006cd8:	fffeffff 	.word	0xfffeffff
 8006cdc:	fffbffff 	.word	0xfffbffff
 8006ce0:	ffff7fff 	.word	0xffff7fff
 8006ce4:	ffffefff 	.word	0xffffefff
 8006ce8:	ffffdfff 	.word	0xffffdfff
 8006cec:	ffefffff 	.word	0xffefffff
 8006cf0:	ff9fffff 	.word	0xff9fffff
 8006cf4:	fff7ffff 	.word	0xfff7ffff

08006cf8 <UART_WaitOnFlagUntilTimeout>:
{
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	0004      	movs	r4, r0
 8006cfc:	000e      	movs	r6, r1
 8006cfe:	0015      	movs	r5, r2
 8006d00:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	69d3      	ldr	r3, [r2, #28]
 8006d06:	4033      	ands	r3, r6
 8006d08:	1b9b      	subs	r3, r3, r6
 8006d0a:	4259      	negs	r1, r3
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	d001      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006d12:	2000      	movs	r0, #0
 8006d14:	e01e      	b.n	8006d54 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	d0f3      	beq.n	8006d04 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1c:	f7fc f88c 	bl	8002e38 <HAL_GetTick>
 8006d20:	9b06      	ldr	r3, [sp, #24]
 8006d22:	1bc0      	subs	r0, r0, r7
 8006d24:	4283      	cmp	r3, r0
 8006d26:	d301      	bcc.n	8006d2c <UART_WaitOnFlagUntilTimeout+0x34>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1ea      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d2c:	0022      	movs	r2, r4
 8006d2e:	ca08      	ldmia	r2!, {r3}
 8006d30:	4809      	ldr	r0, [pc, #36]	; (8006d58 <UART_WaitOnFlagUntilTimeout+0x60>)
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	4001      	ands	r1, r0
 8006d36:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d38:	6899      	ldr	r1, [r3, #8]
 8006d3a:	30a3      	adds	r0, #163	; 0xa3
 8006d3c:	30ff      	adds	r0, #255	; 0xff
 8006d3e:	4381      	bics	r1, r0
 8006d40:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006d42:	2320      	movs	r3, #32
 8006d44:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d46:	0022      	movs	r2, r4
 8006d48:	3208      	adds	r2, #8
 8006d4a:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	347c      	adds	r4, #124	; 0x7c
 8006d50:	7023      	strb	r3, [r4, #0]
 8006d52:	3002      	adds	r0, #2
}
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	fffffe5f 	.word	0xfffffe5f

08006d5c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	0003      	movs	r3, r0
{
 8006d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d60:	2600      	movs	r6, #0
{
 8006d62:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	3388      	adds	r3, #136	; 0x88
 8006d66:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8006d68:	f7fc f866 	bl	8002e38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006d6e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	071b      	lsls	r3, r3, #28
 8006d74:	d417      	bmi.n	8006da6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	075b      	lsls	r3, r3, #29
 8006d7c:	d50a      	bpl.n	8006d94 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <UART_CheckIdleState+0x64>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	03c9      	lsls	r1, r1, #15
 8006d88:	002b      	movs	r3, r5
 8006d8a:	0020      	movs	r0, r4
 8006d8c:	f7ff ffb4 	bl	8006cf8 <UART_WaitOnFlagUntilTimeout>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d113      	bne.n	8006dbc <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8006d94:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006d96:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d98:	1d22      	adds	r2, r4, #4
 8006d9a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006d9c:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	3204      	adds	r2, #4
 8006da0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006da2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006da4:	e00b      	b.n	8006dbe <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <UART_CheckIdleState+0x64>)
 8006daa:	0032      	movs	r2, r6
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	0389      	lsls	r1, r1, #14
 8006db0:	0003      	movs	r3, r0
 8006db2:	0020      	movs	r0, r4
 8006db4:	f7ff ffa0 	bl	8006cf8 <UART_WaitOnFlagUntilTimeout>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d0dc      	beq.n	8006d76 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006dbc:	2003      	movs	r0, #3
}
 8006dbe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006dc0:	01ffffff 	.word	0x01ffffff

08006dc4 <HAL_UART_Init>:
{
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006dc8:	d101      	bne.n	8006dce <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006dca:	2001      	movs	r0, #1
}
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006dce:	1d05      	adds	r5, r0, #4
 8006dd0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	327c      	adds	r2, #124	; 0x7c
 8006dda:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006ddc:	f004 fce6 	bl	800b7ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006de0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006de2:	2101      	movs	r1, #1
 8006de4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006de6:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006de8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dea:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006dec:	438b      	bics	r3, r1
 8006dee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df0:	f7ff fb00 	bl	80063f4 <UART_SetConfig>
 8006df4:	2801      	cmp	r0, #1
 8006df6:	d0e8      	beq.n	8006dca <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8006dfe:	0020      	movs	r0, r4
 8006e00:	f7ff ff12 	bl	8006c28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	4908      	ldr	r1, [pc, #32]	; (8006e28 <HAL_UART_Init+0x64>)
 8006e08:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006e0a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e0c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	438a      	bics	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006e18:	2201      	movs	r2, #1
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006e20:	f7ff ff9c 	bl	8006d5c <UART_CheckIdleState>
 8006e24:	e7d2      	b.n	8006dcc <HAL_UART_Init+0x8>
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	ffffb7ff 	.word	0xffffb7ff

08006e2c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006e2c:	2301      	movs	r3, #1
{
 8006e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e30:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006e32:	aa02      	add	r2, sp, #8
 8006e34:	7013      	strb	r3, [r2, #0]
 8006e36:	7053      	strb	r3, [r2, #1]
 8006e38:	7093      	strb	r3, [r2, #2]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	a902      	add	r1, sp, #8
 8006e3e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e40:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006e42:	2200      	movs	r2, #0
 8006e44:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e46:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006e48:	718a      	strb	r2, [r1, #6]
 8006e4a:	71ca      	strb	r2, [r1, #7]
 8006e4c:	710e      	strb	r6, [r1, #4]
 8006e4e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e50:	70a5      	strb	r5, [r4, #2]
 8006e52:	2104      	movs	r1, #4
 8006e54:	0007      	movs	r7, r0
 8006e56:	0005      	movs	r5, r0
 8006e58:	3208      	adds	r2, #8
 8006e5a:	7022      	strb	r2, [r4, #0]
 8006e5c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e5e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e60:	7061      	strb	r1, [r4, #1]
 8006e62:	70e1      	strb	r1, [r4, #3]
 8006e64:	7163      	strb	r3, [r4, #5]
 8006e66:	71a3      	strb	r3, [r4, #6]
 8006e68:	71e3      	strb	r3, [r4, #7]
 8006e6a:	376a      	adds	r7, #106	; 0x6a
 8006e6c:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d103      	bne.n	8006e7a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8006e72:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8006e74:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e76:	b007      	add	sp, #28
 8006e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e7e:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e80:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e82:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006e84:	aa02      	add	r2, sp, #8
 8006e86:	5cd0      	ldrb	r0, [r2, r3]
 8006e88:	5ce1      	ldrb	r1, [r4, r3]
 8006e8a:	00c0      	lsls	r0, r0, #3
 8006e8c:	f7f9 f9ea 	bl	8000264 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e90:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006e92:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e94:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006e96:	401e      	ands	r6, r3
 8006e98:	ab02      	add	r3, sp, #8
 8006e9a:	5d98      	ldrb	r0, [r3, r6]
 8006e9c:	5da1      	ldrb	r1, [r4, r6]
 8006e9e:	00c0      	lsls	r0, r0, #3
 8006ea0:	f7f9 f9e0 	bl	8000264 <__divsi3>
 8006ea4:	8028      	strh	r0, [r5, #0]
}
 8006ea6:	e7e6      	b.n	8006e76 <UARTEx_SetNbDataToProcess+0x4a>

08006ea8 <HAL_UARTEx_WakeupCallback>:
 8006ea8:	4770      	bx	lr

08006eaa <HAL_UARTEx_RxFifoFullCallback>:
 8006eaa:	4770      	bx	lr

08006eac <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006eac:	4770      	bx	lr

08006eae <HAL_UARTEx_EnableFifoMode>:
{
 8006eae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006eb0:	0004      	movs	r4, r0
 8006eb2:	347c      	adds	r4, #124	; 0x7c
 8006eb4:	7822      	ldrb	r2, [r4, #0]
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	2a01      	cmp	r2, #1
 8006eba:	d014      	beq.n	8006ee6 <HAL_UARTEx_EnableFifoMode+0x38>
 8006ebc:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006ebe:	1d05      	adds	r5, r0, #4
 8006ec0:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 8006ec2:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ec4:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	43b1      	bics	r1, r6
 8006ece:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	0589      	lsls	r1, r1, #22
 8006ed4:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006ed6:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed8:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006eda:	f7ff ffa7 	bl	8006e2c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006ede:	2320      	movs	r3, #32
 8006ee0:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	7023      	strb	r3, [r4, #0]
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}

08006eea <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006eec:	0005      	movs	r5, r0
 8006eee:	357c      	adds	r5, #124	; 0x7c
 8006ef0:	782b      	ldrb	r3, [r5, #0]
{
 8006ef2:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006ef4:	2002      	movs	r0, #2
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d017      	beq.n	8006f2a <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006efa:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006efc:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8006efe:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006f00:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8006f02:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006f04:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f06:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	4383      	bics	r3, r0
 8006f0c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f0e:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f10:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	4319      	orrs	r1, r3
 8006f18:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f1a:	f7ff ff87 	bl	8006e2c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006f20:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f22:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f24:	2320      	movs	r3, #32
 8006f26:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006f28:	7028      	strb	r0, [r5, #0]
}
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f2c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006f2e:	0005      	movs	r5, r0
 8006f30:	357c      	adds	r5, #124	; 0x7c
 8006f32:	782b      	ldrb	r3, [r5, #0]
{
 8006f34:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006f36:	2002      	movs	r0, #2
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d017      	beq.n	8006f6c <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006f3c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006f3e:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006f40:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8006f42:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006f44:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4382      	bics	r2, r0
 8006f4e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	4807      	ldr	r0, [pc, #28]	; (8006f70 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8006f54:	4002      	ands	r2, r0
 8006f56:	4311      	orrs	r1, r2
 8006f58:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f5a:	0020      	movs	r0, r4
 8006f5c:	f7ff ff66 	bl	8006e2c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f60:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006f62:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f64:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f66:	2320      	movs	r3, #32
 8006f68:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006f6a:	7028      	strb	r0, [r5, #0]
}
 8006f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	f1ffffff 	.word	0xf1ffffff

08006f74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006f74:	b530      	push	{r4, r5, lr}
 8006f76:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006f78:	220c      	movs	r2, #12
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	a801      	add	r0, sp, #4
 8006f7e:	f004 fcbc 	bl	800b8fa <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006f82:	4c1a      	ldr	r4, [pc, #104]	; (8006fec <MX_ADC1_Init+0x78>)
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <MX_ADC1_Init+0x7c>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006f86:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8006f88:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006f8a:	23b0      	movs	r3, #176	; 0xb0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006f8c:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8006f8e:	039b      	lsls	r3, r3, #14
 8006f90:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006f92:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006f94:	6162      	str	r2, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006f96:	1962      	adds	r2, r4, r5
 8006f98:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006f9a:	0022      	movs	r2, r4
 8006f9c:	322c      	adds	r2, #44	; 0x2c
 8006f9e:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
 8006fa4:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006fa6:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8006fa8:	323c      	adds	r2, #60	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006faa:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fac:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006fae:	6123      	str	r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006fb0:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006fb2:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006fb4:	76a5      	strb	r5, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006fb6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006fb8:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006fba:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006fbc:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006fbe:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006fc0:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006fc2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006fc4:	f7fb ff54 	bl	8002e70 <HAL_ADC_Init>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d001      	beq.n	8006fd0 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8006fcc:	f001 fc4e 	bl	800886c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006fd0:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006fd2:	a901      	add	r1, sp, #4
 8006fd4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8006fd6:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006fd8:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006fda:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006fdc:	f7fc f990 	bl	8003300 <HAL_ADC_ConfigChannel>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8006fe4:	f001 fc42 	bl	800886c <Error_Handler>
  }

}
 8006fe8:	b005      	add	sp, #20
 8006fea:	bd30      	pop	{r4, r5, pc}
 8006fec:	20000a48 	.word	0x20000a48
 8006ff0:	40012400 	.word	0x40012400

08006ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	0004      	movs	r4, r0
 8006ff8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffa:	2214      	movs	r2, #20
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	a803      	add	r0, sp, #12
 8007000:	f004 fc7b 	bl	800b8fa <memset>
  if(adcHandle->Instance==ADC1)
 8007004:	4b14      	ldr	r3, [pc, #80]	; (8007058 <HAL_ADC_MspInit+0x64>)
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d122      	bne.n	8007052 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800700c:	2080      	movs	r0, #128	; 0x80
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <HAL_ADC_MspInit+0x68>)
 8007010:	0340      	lsls	r0, r0, #13
 8007012:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007014:	4301      	orrs	r1, r0
 8007016:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007018:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800701a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701c:	4002      	ands	r2, r0
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007024:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007026:	430a      	orrs	r2, r1
 8007028:	635a      	str	r2, [r3, #52]	; 0x34
 800702a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800702c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800702e:	400b      	ands	r3, r1
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 8007034:	2321      	movs	r3, #33	; 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007036:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|DET_5V_Pin;
 8007038:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800703a:	3b1e      	subs	r3, #30
 800703c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800703e:	f7fc fccd 	bl	80039dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8007042:	2200      	movs	r2, #0
 8007044:	200c      	movs	r0, #12
 8007046:	0011      	movs	r1, r2
 8007048:	f7fc fae8 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800704c:	200c      	movs	r0, #12
 800704e:	f7fc fb15 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007052:	b008      	add	sp, #32
 8007054:	bd10      	pop	{r4, pc}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	40012400 	.word	0x40012400
 800705c:	40021000 	.word	0x40021000

08007060 <bluetoothFifoFlush>:
	return 1;
}


//Vymazani bt bufferu
void bluetoothFifoFlush(){
 8007060:	b510      	push	{r4, lr}
	memset(btFifo, 0, btFifoIndex);
 8007062:	4c04      	ldr	r4, [pc, #16]	; (8007074 <bluetoothFifoFlush+0x14>)
 8007064:	2100      	movs	r1, #0
 8007066:	8822      	ldrh	r2, [r4, #0]
 8007068:	4803      	ldr	r0, [pc, #12]	; (8007078 <bluetoothFifoFlush+0x18>)
 800706a:	f004 fc46 	bl	800b8fa <memset>
	btFifoIndex = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	8023      	strh	r3, [r4, #0]
}
 8007072:	bd10      	pop	{r4, pc}
 8007074:	20002fc4 	.word	0x20002fc4
 8007078:	2000265d 	.word	0x2000265d

0800707c <bluetoothMsgFifoFlush>:

//Vymazani bufferu pro bt zpravy
void bluetoothMsgFifoFlush(){
 800707c:	b510      	push	{r4, lr}
	memset(btMsgFifo, 0, btMsgFifoIndex);
 800707e:	4c04      	ldr	r4, [pc, #16]	; (8007090 <bluetoothMsgFifoFlush+0x14>)
 8007080:	2100      	movs	r1, #0
 8007082:	8822      	ldrh	r2, [r4, #0]
 8007084:	4803      	ldr	r0, [pc, #12]	; (8007094 <bluetoothMsgFifoFlush+0x18>)
 8007086:	f004 fc38 	bl	800b8fa <memset>
	btMsgFifoIndex = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	8023      	strh	r3, [r4, #0]
}
 800708e:	bd10      	pop	{r4, pc}
 8007090:	20003b04 	.word	0x20003b04
 8007094:	20003027 	.word	0x20003027

08007098 <bluetoothDecodeMsg>:
uint8_t bluetoothDecodeMsg(){
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(strstr((char *)btMsgFifo, "%BONDED") != 0){
 800709a:	4c3c      	ldr	r4, [pc, #240]	; (800718c <bluetoothDecodeMsg+0xf4>)
 800709c:	493c      	ldr	r1, [pc, #240]	; (8007190 <bluetoothDecodeMsg+0xf8>)
 800709e:	0020      	movs	r0, r4
 80070a0:	f004 fd50 	bl	800bb44 <strstr>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d005      	beq.n	80070b4 <bluetoothDecodeMsg+0x1c>
		btStreamOpen = 1;
 80070a8:	2201      	movs	r2, #1
 80070aa:	4b3a      	ldr	r3, [pc, #232]	; (8007194 <bluetoothDecodeMsg+0xfc>)
 80070ac:	701a      	strb	r2, [r3, #0]
		btCmdMode = 0;
 80070ae:	2200      	movs	r2, #0
 80070b0:	4b39      	ldr	r3, [pc, #228]	; (8007198 <bluetoothDecodeMsg+0x100>)
 80070b2:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%CONNECT") != 0){
 80070b4:	4939      	ldr	r1, [pc, #228]	; (800719c <bluetoothDecodeMsg+0x104>)
 80070b6:	0020      	movs	r0, r4
 80070b8:	f004 fd44 	bl	800bb44 <strstr>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d01e      	beq.n	80070fe <bluetoothDecodeMsg+0x66>
		sscanf((char *)index+9, "%*d,%02X%02X%02X%02X%02X%02X", &btPairReq.mac[0], &btPairReq.mac[1], &btPairReq.mac[2], &btPairReq.mac[3], &btPairReq.mac[4], &btPairReq.mac[5]);
 80070c0:	4b37      	ldr	r3, [pc, #220]	; (80071a0 <bluetoothDecodeMsg+0x108>)
 80070c2:	4a38      	ldr	r2, [pc, #224]	; (80071a4 <bluetoothDecodeMsg+0x10c>)
 80070c4:	9303      	str	r3, [sp, #12]
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <bluetoothDecodeMsg+0x110>)
 80070c8:	4938      	ldr	r1, [pc, #224]	; (80071ac <bluetoothDecodeMsg+0x114>)
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	4b38      	ldr	r3, [pc, #224]	; (80071b0 <bluetoothDecodeMsg+0x118>)
 80070ce:	3009      	adds	r0, #9
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	4b38      	ldr	r3, [pc, #224]	; (80071b4 <bluetoothDecodeMsg+0x11c>)
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4b38      	ldr	r3, [pc, #224]	; (80071b8 <bluetoothDecodeMsg+0x120>)
 80070d8:	f004 fcf4 	bl	800bac4 <siscanf>
		sprintf(btPairReq.name, "%02X-%02X-%02X-%02X-%02X-%02X", btPairReq.mac[0], btPairReq.mac[1], btPairReq.mac[2], btPairReq.mac[3], btPairReq.mac[4], btPairReq.mac[5]);
 80070dc:	4837      	ldr	r0, [pc, #220]	; (80071bc <bluetoothDecodeMsg+0x124>)
 80070de:	4938      	ldr	r1, [pc, #224]	; (80071c0 <bluetoothDecodeMsg+0x128>)
 80070e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80070e6:	9302      	str	r3, [sp, #8]
 80070e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80070f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80070f4:	f004 fcc4 	bl	800ba80 <siprintf>
		btCmdMode = 0;
 80070f8:	2200      	movs	r2, #0
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <bluetoothDecodeMsg+0x100>)
 80070fc:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%DISCONNECT") != 0){
 80070fe:	4931      	ldr	r1, [pc, #196]	; (80071c4 <bluetoothDecodeMsg+0x12c>)
 8007100:	0020      	movs	r0, r4
 8007102:	f004 fd1f 	bl	800bb44 <strstr>
 8007106:	2800      	cmp	r0, #0
 8007108:	d007      	beq.n	800711a <bluetoothDecodeMsg+0x82>
		oledType = OLED_MENU;
 800710a:	2202      	movs	r2, #2
 800710c:	4b2e      	ldr	r3, [pc, #184]	; (80071c8 <bluetoothDecodeMsg+0x130>)
 800710e:	601a      	str	r2, [r3, #0]
		btStreamOpen = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	4a20      	ldr	r2, [pc, #128]	; (8007194 <bluetoothDecodeMsg+0xfc>)
 8007114:	7013      	strb	r3, [r2, #0]
		btCmdMode = 0;
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <bluetoothDecodeMsg+0x100>)
 8007118:	7013      	strb	r3, [r2, #0]
	if(strstr((char *)btMsgFifo, "%KEY:") != 0){
 800711a:	492c      	ldr	r1, [pc, #176]	; (80071cc <bluetoothDecodeMsg+0x134>)
 800711c:	0020      	movs	r0, r4
 800711e:	f004 fd11 	bl	800bb44 <strstr>
 8007122:	2800      	cmp	r0, #0
 8007124:	d008      	beq.n	8007138 <bluetoothDecodeMsg+0xa0>
		sscanf((char *)index+5, "%06ld", &btPairReq.pin);
 8007126:	492a      	ldr	r1, [pc, #168]	; (80071d0 <bluetoothDecodeMsg+0x138>)
 8007128:	3005      	adds	r0, #5
 800712a:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <bluetoothDecodeMsg+0x13c>)
 800712c:	f004 fcca 	bl	800bac4 <siscanf>
		oled_setDisplayedSplash(oled_BtDevPairRequestSplash, &btPairReq);
 8007130:	4922      	ldr	r1, [pc, #136]	; (80071bc <bluetoothDecodeMsg+0x124>)
 8007132:	4829      	ldr	r0, [pc, #164]	; (80071d8 <bluetoothDecodeMsg+0x140>)
 8007134:	f002 fe50 	bl	8009dd8 <oled_setDisplayedSplash>
	if(strstr((char *)btMsgFifo, "%STREAM_OPEN") != 0){
 8007138:	4928      	ldr	r1, [pc, #160]	; (80071dc <bluetoothDecodeMsg+0x144>)
 800713a:	0020      	movs	r0, r4
 800713c:	f004 fd02 	bl	800bb44 <strstr>
 8007140:	2800      	cmp	r0, #0
 8007142:	d005      	beq.n	8007150 <bluetoothDecodeMsg+0xb8>
		btStreamOpen = 1;
 8007144:	2201      	movs	r2, #1
 8007146:	4b13      	ldr	r3, [pc, #76]	; (8007194 <bluetoothDecodeMsg+0xfc>)
 8007148:	701a      	strb	r2, [r3, #0]
		btCmdMode = 0;
 800714a:	2200      	movs	r2, #0
 800714c:	4b12      	ldr	r3, [pc, #72]	; (8007198 <bluetoothDecodeMsg+0x100>)
 800714e:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%SECURED") != 0){
 8007150:	4923      	ldr	r1, [pc, #140]	; (80071e0 <bluetoothDecodeMsg+0x148>)
 8007152:	0020      	movs	r0, r4
 8007154:	f004 fcf6 	bl	800bb44 <strstr>
 8007158:	2800      	cmp	r0, #0
 800715a:	d005      	beq.n	8007168 <bluetoothDecodeMsg+0xd0>
		btStreamOpen = 1;
 800715c:	2201      	movs	r2, #1
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <bluetoothDecodeMsg+0xfc>)
 8007160:	701a      	strb	r2, [r3, #0]
		btCmdMode = 0;
 8007162:	2200      	movs	r2, #0
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <bluetoothDecodeMsg+0x100>)
 8007166:	701a      	strb	r2, [r3, #0]
	if(strstr((char *)btMsgFifo, "%KEY_REQ") != 0){
 8007168:	491e      	ldr	r1, [pc, #120]	; (80071e4 <bluetoothDecodeMsg+0x14c>)
 800716a:	0020      	movs	r0, r4
 800716c:	f004 fcea 	bl	800bb44 <strstr>
 8007170:	2800      	cmp	r0, #0
 8007172:	d005      	beq.n	8007180 <bluetoothDecodeMsg+0xe8>
		btPairReq.pin = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	4911      	ldr	r1, [pc, #68]	; (80071bc <bluetoothDecodeMsg+0x124>)
		oled_setDisplayedSplash(oled_BtDevKeyRequestSplash, &btPairReq);
 8007178:	481b      	ldr	r0, [pc, #108]	; (80071e8 <bluetoothDecodeMsg+0x150>)
		btPairReq.pin = 0;
 800717a:	658b      	str	r3, [r1, #88]	; 0x58
		oled_setDisplayedSplash(oled_BtDevKeyRequestSplash, &btPairReq);
 800717c:	f002 fe2c 	bl	8009dd8 <oled_setDisplayedSplash>
	bluetoothMsgFifoFlush();
 8007180:	f7ff ff7c 	bl	800707c <bluetoothMsgFifoFlush>
}
 8007184:	2001      	movs	r0, #1
 8007186:	b004      	add	sp, #16
 8007188:	bd10      	pop	{r4, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	20003027 	.word	0x20003027
 8007190:	0800de42 	.word	0x0800de42
 8007194:	20002c94 	.word	0x20002c94
 8007198:	20003026 	.word	0x20003026
 800719c:	0800de4a 	.word	0x0800de4a
 80071a0:	200028a0 	.word	0x200028a0
 80071a4:	2000288c 	.word	0x2000288c
 80071a8:	2000289c 	.word	0x2000289c
 80071ac:	0800de53 	.word	0x0800de53
 80071b0:	20002898 	.word	0x20002898
 80071b4:	20002894 	.word	0x20002894
 80071b8:	20002890 	.word	0x20002890
 80071bc:	20002858 	.word	0x20002858
 80071c0:	0800de70 	.word	0x0800de70
 80071c4:	0800de8e 	.word	0x0800de8e
 80071c8:	20000c40 	.word	0x20000c40
 80071cc:	0800de9a 	.word	0x0800de9a
 80071d0:	0800e0dd 	.word	0x0800e0dd
 80071d4:	200028b0 	.word	0x200028b0
 80071d8:	0800a7d1 	.word	0x0800a7d1
 80071dc:	0800dea0 	.word	0x0800dea0
 80071e0:	0800dead 	.word	0x0800dead
 80071e4:	0800deb6 	.word	0x0800deb6
 80071e8:	0800a945 	.word	0x0800a945

080071ec <bluetoothCMD_ACK>:
}



//Rutina pro odeslani prikazu a kontrolu odpovedi v podobe stringu ale bez zaznamenani odpovedi
uint8_t bluetoothCMD_ACK(char *cmd, char *ack){
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	0004      	movs	r4, r0
 80071f0:	000e      	movs	r6, r1

	//Vycisti se buffer
	bluetoothFifoFlush();
 80071f2:	f7ff ff35 	bl	8007060 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 80071f6:	7823      	ldrb	r3, [r4, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11f      	bne.n	800723c <bluetoothCMD_ACK+0x50>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Ceka se nez se vrati vyzadana odpoved nebo nez nastane timeout
	uint32_t now = HAL_GetTick();
 80071fc:	f7fb fe1c 	bl	8002e38 <HAL_GetTick>
 8007200:	0004      	movs	r4, r0
	while(strstr((char *)btFifo, ack) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 8007202:	4f18      	ldr	r7, [pc, #96]	; (8007264 <bluetoothCMD_ACK+0x78>)
 8007204:	0031      	movs	r1, r6
 8007206:	0038      	movs	r0, r7
 8007208:	f004 fc9c 	bl	800bb44 <strstr>
 800720c:	4d16      	ldr	r5, [pc, #88]	; (8007268 <bluetoothCMD_ACK+0x7c>)
 800720e:	2800      	cmp	r0, #0
 8007210:	d021      	beq.n	8007256 <bluetoothCMD_ACK+0x6a>

	//Odpoved se zkopiruje
	memcpy(btMsgFifo, btFifo, btFifoIndex);
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <bluetoothCMD_ACK+0x80>)
 8007214:	0039      	movs	r1, r7
 8007216:	881e      	ldrh	r6, [r3, #0]
 8007218:	4815      	ldr	r0, [pc, #84]	; (8007270 <bluetoothCMD_ACK+0x84>)
 800721a:	0032      	movs	r2, r6
 800721c:	f004 fb64 	bl	800b8e8 <memcpy>
	btMsgFifoIndex = btFifoIndex;
 8007220:	4b14      	ldr	r3, [pc, #80]	; (8007274 <bluetoothCMD_ACK+0x88>)
 8007222:	801e      	strh	r6, [r3, #0]
	//Radeji se dekoduje, pokud do ni prisel napriklad jeste nejaky prikaz
	bluetoothDecodeMsg();
 8007224:	f7ff ff38 	bl	8007098 <bluetoothDecodeMsg>
	//Vycisti se buffer
	bluetoothFifoFlush();
 8007228:	f7ff ff1a 	bl	8007060 <bluetoothFifoFlush>

	//Pokud byl timeout, vrati 0
	if(HAL_GetTick() - now >= BT_TIMEOUT) return 0;
 800722c:	f7fb fe04 	bl	8002e38 <HAL_GetTick>
 8007230:	2300      	movs	r3, #0
 8007232:	1b04      	subs	r4, r0, r4
 8007234:	42a5      	cmp	r5, r4
 8007236:	415b      	adcs	r3, r3
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 8007238:	b2db      	uxtb	r3, r3
 800723a:	e00a      	b.n	8007252 <bluetoothCMD_ACK+0x66>
 800723c:	0020      	movs	r0, r4
 800723e:	f7f8 ff6b 	bl	8000118 <strlen>
 8007242:	0021      	movs	r1, r4
 8007244:	b282      	uxth	r2, r0
 8007246:	480c      	ldr	r0, [pc, #48]	; (8007278 <bluetoothCMD_ACK+0x8c>)
 8007248:	f7fe fe0e 	bl	8005e68 <HAL_UART_Transmit_IT>
 800724c:	2300      	movs	r3, #0
 800724e:	4298      	cmp	r0, r3
 8007250:	d0d4      	beq.n	80071fc <bluetoothCMD_ACK+0x10>

	return 1;

}
 8007252:	0018      	movs	r0, r3
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while(strstr((char *)btFifo, ack) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 8007256:	f7fb fdef 	bl	8002e38 <HAL_GetTick>
 800725a:	1b00      	subs	r0, r0, r4
 800725c:	42a8      	cmp	r0, r5
 800725e:	d9d0      	bls.n	8007202 <bluetoothCMD_ACK+0x16>
 8007260:	e7d7      	b.n	8007212 <bluetoothCMD_ACK+0x26>
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	2000265d 	.word	0x2000265d
 8007268:	0000176f 	.word	0x0000176f
 800726c:	20002fc4 	.word	0x20002fc4
 8007270:	20003027 	.word	0x20003027
 8007274:	20003b04 	.word	0x20003b04
 8007278:	200048cc 	.word	0x200048cc

0800727c <bluetoothEnterCMD>:
uint8_t bluetoothEnterCMD(){
 800727c:	b510      	push	{r4, lr}
	if(btCmdMode) return 1;
 800727e:	4c06      	ldr	r4, [pc, #24]	; (8007298 <bluetoothEnterCMD+0x1c>)
 8007280:	7823      	ldrb	r3, [r4, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <bluetoothEnterCMD+0x16>
	if(!bluetoothCMD_ACK("$$$", "CMD>"));
 8007286:	4905      	ldr	r1, [pc, #20]	; (800729c <bluetoothEnterCMD+0x20>)
 8007288:	4805      	ldr	r0, [pc, #20]	; (80072a0 <bluetoothEnterCMD+0x24>)
 800728a:	f7ff ffaf 	bl	80071ec <bluetoothCMD_ACK>
	btCmdMode = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	7023      	strb	r3, [r4, #0]
}
 8007292:	2001      	movs	r0, #1
 8007294:	bd10      	pop	{r4, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	20003026 	.word	0x20003026
 800729c:	0800debf 	.word	0x0800debf
 80072a0:	0800dec4 	.word	0x0800dec4

080072a4 <bluetoothLeaveCMD>:
uint8_t bluetoothLeaveCMD(){
 80072a4:	b510      	push	{r4, lr}
	if(!btCmdMode) return 1;
 80072a6:	4c06      	ldr	r4, [pc, #24]	; (80072c0 <bluetoothLeaveCMD+0x1c>)
 80072a8:	7823      	ldrb	r3, [r4, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <bluetoothLeaveCMD+0x16>
	if(!bluetoothCMD_ACK("---\r", BT_END));
 80072ae:	4905      	ldr	r1, [pc, #20]	; (80072c4 <bluetoothLeaveCMD+0x20>)
 80072b0:	4805      	ldr	r0, [pc, #20]	; (80072c8 <bluetoothLeaveCMD+0x24>)
 80072b2:	f7ff ff9b 	bl	80071ec <bluetoothCMD_ACK>
	btCmdMode = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	7023      	strb	r3, [r4, #0]
}
 80072ba:	2001      	movs	r0, #1
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	20003026 	.word	0x20003026
 80072c4:	0800e034 	.word	0x0800e034
 80072c8:	0800e039 	.word	0x0800e039

080072cc <bluetoothInit>:
uint8_t bluetoothInit(){
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	btFifoIndex = 0;
 80072ce:	2400      	movs	r4, #0
	btCmdMode = 1;
 80072d0:	2601      	movs	r6, #1
	btFifoIndex = 0;
 80072d2:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <bluetoothInit+0x13c>)
	workerDesert(&workerBtEnterPairingKey);
 80072d4:	484d      	ldr	r0, [pc, #308]	; (800740c <bluetoothInit+0x140>)
	btFifoIndex = 0;
 80072d6:	801c      	strh	r4, [r3, #0]
	btMsgFifoIndex = 0;
 80072d8:	4b4d      	ldr	r3, [pc, #308]	; (8007410 <bluetoothInit+0x144>)
 80072da:	801c      	strh	r4, [r3, #0]
	btCmdMode = 1;
 80072dc:	4b4d      	ldr	r3, [pc, #308]	; (8007414 <bluetoothInit+0x148>)
 80072de:	701e      	strb	r6, [r3, #0]
	btStatusMsg = 0;
 80072e0:	4b4d      	ldr	r3, [pc, #308]	; (8007418 <bluetoothInit+0x14c>)
 80072e2:	701c      	strb	r4, [r3, #0]
	btStreamOpen = 0;
 80072e4:	4b4d      	ldr	r3, [pc, #308]	; (800741c <bluetoothInit+0x150>)
 80072e6:	701c      	strb	r4, [r3, #0]
	btNullCounter = 0;
 80072e8:	4b4d      	ldr	r3, [pc, #308]	; (8007420 <bluetoothInit+0x154>)
 80072ea:	701c      	strb	r4, [r3, #0]
	btComMessageFlag = 0;
 80072ec:	4b4d      	ldr	r3, [pc, #308]	; (8007424 <bluetoothInit+0x158>)
 80072ee:	701c      	strb	r4, [r3, #0]
	btComMessageSizeFlag = 0;
 80072f0:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <bluetoothInit+0x15c>)
 80072f2:	701c      	strb	r4, [r3, #0]
	btMessageLen = 0;
 80072f4:	4b4d      	ldr	r3, [pc, #308]	; (800742c <bluetoothInit+0x160>)
 80072f6:	801c      	strh	r4, [r3, #0]
	btMsgReceivedFlag = 0;
 80072f8:	4b4d      	ldr	r3, [pc, #308]	; (8007430 <bluetoothInit+0x164>)
 80072fa:	701c      	strb	r4, [r3, #0]
	workerDesert(&workerBtEnterPairingKey);
 80072fc:	f001 fabc 	bl	8008878 <workerDesert>
	workerDesert(&workerBtBondDev);
 8007300:	484c      	ldr	r0, [pc, #304]	; (8007434 <bluetoothInit+0x168>)
 8007302:	f001 fab9 	bl	8008878 <workerDesert>
	workerDesert(&workerBtScanDev);
 8007306:	484c      	ldr	r0, [pc, #304]	; (8007438 <bluetoothInit+0x16c>)
 8007308:	f001 fab6 	bl	8008878 <workerDesert>
	btModule.mac[0] = 0xD8;
 800730c:	23d8      	movs	r3, #216	; 0xd8
 800730e:	4d4b      	ldr	r5, [pc, #300]	; (800743c <bluetoothInit+0x170>)
	sprintf(btModule.name, "MIDIController");
 8007310:	4f4b      	ldr	r7, [pc, #300]	; (8007440 <bluetoothInit+0x174>)
	btModule.mac[0] = 0xD8;
 8007312:	636b      	str	r3, [r5, #52]	; 0x34
	btModule.mac[1] = 0x80;
 8007314:	3b58      	subs	r3, #88	; 0x58
 8007316:	63ab      	str	r3, [r5, #56]	; 0x38
	btModule.mac[2] = 0x39;
 8007318:	3b47      	subs	r3, #71	; 0x47
 800731a:	63eb      	str	r3, [r5, #60]	; 0x3c
	btModule.mac[3] = 0xFE;
 800731c:	33c5      	adds	r3, #197	; 0xc5
 800731e:	642b      	str	r3, [r5, #64]	; 0x40
	btModule.mac[4] = 0x59;
 8007320:	3ba5      	subs	r3, #165	; 0xa5
 8007322:	646b      	str	r3, [r5, #68]	; 0x44
	sprintf(btModule.name, "MIDIController");
 8007324:	0039      	movs	r1, r7
	btModule.mac[5] = 0x96;
 8007326:	333d      	adds	r3, #61	; 0x3d
	sprintf(btModule.name, "MIDIController");
 8007328:	0028      	movs	r0, r5
	btModule.mac[5] = 0x96;
 800732a:	64ab      	str	r3, [r5, #72]	; 0x48
	sprintf(btModule.name, "MIDIController");
 800732c:	f004 fc02 	bl	800bb34 <strcpy>
	btModule.rssi = 0;
 8007330:	3554      	adds	r5, #84	; 0x54
	HAL_UART_Receive_IT(&huart2, &btFifoByte, 1);
 8007332:	0032      	movs	r2, r6
 8007334:	4943      	ldr	r1, [pc, #268]	; (8007444 <bluetoothInit+0x178>)
 8007336:	4844      	ldr	r0, [pc, #272]	; (8007448 <bluetoothInit+0x17c>)
	btModule.rssi = 0;
 8007338:	702c      	strb	r4, [r5, #0]
	HAL_UART_Receive_IT(&huart2, &btFifoByte, 1);
 800733a:	f7fe fdef 	bl	8005f1c <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_RESET);
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	0022      	movs	r2, r4
 8007342:	0049      	lsls	r1, r1, #1
 8007344:	4841      	ldr	r0, [pc, #260]	; (800744c <bluetoothInit+0x180>)
 8007346:	f7fc fbf7 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_MODE_GPIO_Port, BT_MODE_Pin, GPIO_PIN_SET);
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	0032      	movs	r2, r6
 800734e:	0089      	lsls	r1, r1, #2
 8007350:	483e      	ldr	r0, [pc, #248]	; (800744c <bluetoothInit+0x180>)
 8007352:	f7fc fbf1 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007356:	200a      	movs	r0, #10
 8007358:	f7fb fd74 	bl	8002e44 <HAL_Delay>
	HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_SET);
 800735c:	2180      	movs	r1, #128	; 0x80
 800735e:	0032      	movs	r2, r6
 8007360:	0049      	lsls	r1, r1, #1
 8007362:	483a      	ldr	r0, [pc, #232]	; (800744c <bluetoothInit+0x180>)
 8007364:	f7fc fbe8 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007368:	2064      	movs	r0, #100	; 0x64
 800736a:	f7fb fd6b 	bl	8002e44 <HAL_Delay>
	btCmdMode = 0;
 800736e:	4b29      	ldr	r3, [pc, #164]	; (8007414 <bluetoothInit+0x148>)
 8007370:	701c      	strb	r4, [r3, #0]
	if(!bluetoothEnterCMD()) return 0;
 8007372:	f7ff ff83 	bl	800727c <bluetoothEnterCMD>
 8007376:	42a0      	cmp	r0, r4
 8007378:	d101      	bne.n	800737e <bluetoothInit+0xb2>
 800737a:	2000      	movs	r0, #0
}
 800737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!bluetoothCMD_ACK("GS\r", "E0")){
 800737e:	4934      	ldr	r1, [pc, #208]	; (8007450 <bluetoothInit+0x184>)
 8007380:	4834      	ldr	r0, [pc, #208]	; (8007454 <bluetoothInit+0x188>)
 8007382:	f7ff ff33 	bl	80071ec <bluetoothCMD_ACK>
 8007386:	4c34      	ldr	r4, [pc, #208]	; (8007458 <bluetoothInit+0x18c>)
 8007388:	2800      	cmp	r0, #0
 800738a:	d029      	beq.n	80073e0 <bluetoothInit+0x114>
	if(!bluetoothCMD_ACK("GN\r", "MIDIController")){
 800738c:	0039      	movs	r1, r7
 800738e:	4833      	ldr	r0, [pc, #204]	; (800745c <bluetoothInit+0x190>)
 8007390:	f7ff ff2c 	bl	80071ec <bluetoothCMD_ACK>
 8007394:	2800      	cmp	r0, #0
 8007396:	d030      	beq.n	80073fa <bluetoothInit+0x12e>
	if(!bluetoothCMD_ACK("SGA,0\r", BT_AOK)) return 0;
 8007398:	0021      	movs	r1, r4
 800739a:	4831      	ldr	r0, [pc, #196]	; (8007460 <bluetoothInit+0x194>)
 800739c:	f7ff ff26 	bl	80071ec <bluetoothCMD_ACK>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0ea      	beq.n	800737a <bluetoothInit+0xae>
	if(!bluetoothCMD_ACK("SGC,0\r", BT_AOK)) return 0;
 80073a4:	0021      	movs	r1, r4
 80073a6:	482f      	ldr	r0, [pc, #188]	; (8007464 <bluetoothInit+0x198>)
 80073a8:	f7ff ff20 	bl	80071ec <bluetoothCMD_ACK>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d0e4      	beq.n	800737a <bluetoothInit+0xae>
	if(!bluetoothCMD_ACK("SDA,0180\r", BT_AOK)) return 0;
 80073b0:	0021      	movs	r1, r4
 80073b2:	482d      	ldr	r0, [pc, #180]	; (8007468 <bluetoothInit+0x19c>)
 80073b4:	f7ff ff1a 	bl	80071ec <bluetoothCMD_ACK>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d0de      	beq.n	800737a <bluetoothInit+0xae>
	if(!bluetoothCMD_ACK("SDN,Vojtech Vosahlo\r", BT_AOK)) return 0;
 80073bc:	0021      	movs	r1, r4
 80073be:	482b      	ldr	r0, [pc, #172]	; (800746c <bluetoothInit+0x1a0>)
 80073c0:	f7ff ff14 	bl	80071ec <bluetoothCMD_ACK>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d0d8      	beq.n	800737a <bluetoothInit+0xae>
	if(!bluetoothCMD_ACK("SA,3\r", BT_AOK)) return 0;
 80073c8:	0021      	movs	r1, r4
 80073ca:	4829      	ldr	r0, [pc, #164]	; (8007470 <bluetoothInit+0x1a4>)
 80073cc:	f7ff ff0e 	bl	80071ec <bluetoothCMD_ACK>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d0d2      	beq.n	800737a <bluetoothInit+0xae>
	if(!bluetoothLeaveCMD()) return 0;
 80073d4:	f7ff ff66 	bl	80072a4 <bluetoothLeaveCMD>
 80073d8:	1e43      	subs	r3, r0, #1
 80073da:	4198      	sbcs	r0, r3
	if(!bluetoothEnterCMD()) return 0;
 80073dc:	b2c0      	uxtb	r0, r0
 80073de:	e7cd      	b.n	800737c <bluetoothInit+0xb0>
		if(!bluetoothCMD_ACK("SS,E0\r", BT_AOK)) return 0;
 80073e0:	0021      	movs	r1, r4
 80073e2:	4824      	ldr	r0, [pc, #144]	; (8007474 <bluetoothInit+0x1a8>)
 80073e4:	f7ff ff02 	bl	80071ec <bluetoothCMD_ACK>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d0c6      	beq.n	800737a <bluetoothInit+0xae>
		if(!bluetoothCMD_ACK("R,1\r", "REBOOT")) return 0;
 80073ec:	4922      	ldr	r1, [pc, #136]	; (8007478 <bluetoothInit+0x1ac>)
 80073ee:	4823      	ldr	r0, [pc, #140]	; (800747c <bluetoothInit+0x1b0>)
 80073f0:	f7ff fefc 	bl	80071ec <bluetoothCMD_ACK>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d1c9      	bne.n	800738c <bluetoothInit+0xc0>
 80073f8:	e7bf      	b.n	800737a <bluetoothInit+0xae>
		if(!bluetoothCMD_ACK("SN,MIDIController\r", BT_AOK)) return 0;
 80073fa:	0021      	movs	r1, r4
 80073fc:	4820      	ldr	r0, [pc, #128]	; (8007480 <bluetoothInit+0x1b4>)
 80073fe:	f7ff fef5 	bl	80071ec <bluetoothCMD_ACK>
 8007402:	2800      	cmp	r0, #0
 8007404:	d1c8      	bne.n	8007398 <bluetoothInit+0xcc>
 8007406:	e7b8      	b.n	800737a <bluetoothInit+0xae>
 8007408:	20002fc4 	.word	0x20002fc4
 800740c:	20000c46 	.word	0x20000c46
 8007410:	20003b04 	.word	0x20003b04
 8007414:	20003026 	.word	0x20003026
 8007418:	20002c95 	.word	0x20002c95
 800741c:	20002c94 	.word	0x20002c94
 8007420:	20002f80 	.word	0x20002f80
 8007424:	200028bb 	.word	0x200028bb
 8007428:	200028b8 	.word	0x200028b8
 800742c:	20000ac0 	.word	0x20000ac0
 8007430:	20000c54 	.word	0x20000c54
 8007434:	200028be 	.word	0x200028be
 8007438:	20000c49 	.word	0x20000c49
 800743c:	20002fc8 	.word	0x20002fc8
 8007440:	0800dfbd 	.word	0x0800dfbd
 8007444:	20000af8 	.word	0x20000af8
 8007448:	200048cc 	.word	0x200048cc
 800744c:	50000400 	.word	0x50000400
 8007450:	0800dfcc 	.word	0x0800dfcc
 8007454:	0800dfcf 	.word	0x0800dfcf
 8007458:	0800dfd7 	.word	0x0800dfd7
 800745c:	0800dfd3 	.word	0x0800dfd3
 8007460:	0800dfee 	.word	0x0800dfee
 8007464:	0800e008 	.word	0x0800e008
 8007468:	0800e00f 	.word	0x0800e00f
 800746c:	0800e019 	.word	0x0800e019
 8007470:	0800e02e 	.word	0x0800e02e
 8007474:	0800dfdb 	.word	0x0800dfdb
 8007478:	0800dfe2 	.word	0x0800dfe2
 800747c:	0800dfe9 	.word	0x0800dfe9
 8007480:	0800dff5 	.word	0x0800dff5

08007484 <bluetoothCMD_Until>:

//Rutina pro odeslani prikazu a zastaveni na terminatoru, vrati zpet i text odpovedi
uint8_t bluetoothCMD_Until(char *cmd, char *terminator, char (*recvBuffer)[]){
 8007484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007486:	0004      	movs	r4, r0
 8007488:	000f      	movs	r7, r1
 800748a:	9201      	str	r2, [sp, #4]

	//Vycisti se buffer
	bluetoothFifoFlush();
 800748c:	f7ff fde8 	bl	8007060 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 8007490:	7823      	ldrb	r3, [r4, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d11b      	bne.n	80074ce <bluetoothCMD_Until+0x4a>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Ceka se nez se vrati terminator nebo nez nastane timeout
	uint32_t now = HAL_GetTick();
 8007496:	f7fb fccf 	bl	8002e38 <HAL_GetTick>
 800749a:	0004      	movs	r4, r0
	while(strstr((char *)btFifo, terminator) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 800749c:	4d15      	ldr	r5, [pc, #84]	; (80074f4 <bluetoothCMD_Until+0x70>)
 800749e:	0039      	movs	r1, r7
 80074a0:	0028      	movs	r0, r5
 80074a2:	f004 fb4f 	bl	800bb44 <strstr>
 80074a6:	4e14      	ldr	r6, [pc, #80]	; (80074f8 <bluetoothCMD_Until+0x74>)
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d01d      	beq.n	80074e8 <bluetoothCMD_Until+0x64>

	//Odpoved se okopiruje do bufferu na vraceni
	memcpy(recvBuffer, (char *)btFifo, btFifoIndex-1);
 80074ac:	4b13      	ldr	r3, [pc, #76]	; (80074fc <bluetoothCMD_Until+0x78>)
 80074ae:	0029      	movs	r1, r5
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	9801      	ldr	r0, [sp, #4]
 80074b4:	3a01      	subs	r2, #1
 80074b6:	f004 fa17 	bl	800b8e8 <memcpy>

	//Vycisti se buffer
	bluetoothFifoFlush();
 80074ba:	f7ff fdd1 	bl	8007060 <bluetoothFifoFlush>

	//Pokud byl timeout, vrati 0
	if(HAL_GetTick() - now >= BT_TIMEOUT) return 0;
 80074be:	f7fb fcbb 	bl	8002e38 <HAL_GetTick>
 80074c2:	2300      	movs	r3, #0
 80074c4:	1b04      	subs	r4, r0, r4
 80074c6:	42a6      	cmp	r6, r4
 80074c8:	415b      	adcs	r3, r3
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	e00a      	b.n	80074e4 <bluetoothCMD_Until+0x60>
 80074ce:	0020      	movs	r0, r4
 80074d0:	f7f8 fe22 	bl	8000118 <strlen>
 80074d4:	0021      	movs	r1, r4
 80074d6:	b282      	uxth	r2, r0
 80074d8:	4809      	ldr	r0, [pc, #36]	; (8007500 <bluetoothCMD_Until+0x7c>)
 80074da:	f7fe fcc5 	bl	8005e68 <HAL_UART_Transmit_IT>
 80074de:	2300      	movs	r3, #0
 80074e0:	4298      	cmp	r0, r3
 80074e2:	d0d8      	beq.n	8007496 <bluetoothCMD_Until+0x12>

	return 1;
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	while(strstr((char *)btFifo, terminator) == 0 && HAL_GetTick() - now < BT_TIMEOUT);
 80074e8:	f7fb fca6 	bl	8002e38 <HAL_GetTick>
 80074ec:	1b00      	subs	r0, r0, r4
 80074ee:	42b0      	cmp	r0, r6
 80074f0:	d9d4      	bls.n	800749c <bluetoothCMD_Until+0x18>
 80074f2:	e7db      	b.n	80074ac <bluetoothCMD_Until+0x28>
 80074f4:	2000265d 	.word	0x2000265d
 80074f8:	0000176f 	.word	0x0000176f
 80074fc:	20002fc4 	.word	0x20002fc4
 8007500:	200048cc 	.word	0x200048cc

08007504 <bluetoothCMD_Time>:

//Rutina pro odeslani prikazu a zaznamenavani odpovedi po nejaky cas
uint8_t bluetoothCMD_Time(char *cmd, uint8_t s, char (*recvBuffer)[]){
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	0006      	movs	r6, r0
 8007508:	000c      	movs	r4, r1
 800750a:	0015      	movs	r5, r2

	//Vycisti se buffer
	bluetoothFifoFlush();
 800750c:	f7ff fda8 	bl	8007060 <bluetoothFifoFlush>

	//Odesle se prikaz
	if(strlen(cmd) > 0){
 8007510:	7833      	ldrb	r3, [r6, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d115      	bne.n	8007542 <bluetoothCMD_Time+0x3e>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
	}

	//Pocka se zadany cas
	uint32_t now = HAL_GetTick();
 8007516:	f7fb fc8f 	bl	8002e38 <HAL_GetTick>

	while(HAL_GetTick() - now < (s*1000));
 800751a:	23fa      	movs	r3, #250	; 0xfa
	uint32_t now = HAL_GetTick();
 800751c:	0006      	movs	r6, r0
	while(HAL_GetTick() - now < (s*1000));
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	435c      	muls	r4, r3
 8007522:	f7fb fc89 	bl	8002e38 <HAL_GetTick>
 8007526:	1b80      	subs	r0, r0, r6
 8007528:	42a0      	cmp	r0, r4
 800752a:	d3fa      	bcc.n	8007522 <bluetoothCMD_Time+0x1e>

	//Odpoved se okopiruje do bufferu na vraceni
	memcpy(recvBuffer, (char *)btFifo, btFifoIndex-1);
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <bluetoothCMD_Time+0x58>)
 800752e:	490c      	ldr	r1, [pc, #48]	; (8007560 <bluetoothCMD_Time+0x5c>)
 8007530:	881a      	ldrh	r2, [r3, #0]
 8007532:	0028      	movs	r0, r5
 8007534:	3a01      	subs	r2, #1
 8007536:	f004 f9d7 	bl	800b8e8 <memcpy>

	//Vycisti se buffer
	bluetoothFifoFlush();
 800753a:	f7ff fd91 	bl	8007060 <bluetoothFifoFlush>

	return 1;
 800753e:	2301      	movs	r3, #1
 8007540:	e00a      	b.n	8007558 <bluetoothCMD_Time+0x54>
		if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)cmd, strlen(cmd)) != HAL_OK) return 0;
 8007542:	0030      	movs	r0, r6
 8007544:	f7f8 fde8 	bl	8000118 <strlen>
 8007548:	0031      	movs	r1, r6
 800754a:	b282      	uxth	r2, r0
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <bluetoothCMD_Time+0x60>)
 800754e:	f7fe fc8b 	bl	8005e68 <HAL_UART_Transmit_IT>
 8007552:	2300      	movs	r3, #0
 8007554:	4298      	cmp	r0, r3
 8007556:	d0de      	beq.n	8007516 <bluetoothCMD_Time+0x12>
}
 8007558:	0018      	movs	r0, r3
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	20002fc4 	.word	0x20002fc4
 8007560:	2000265d 	.word	0x2000265d
 8007564:	200048cc 	.word	0x200048cc

08007568 <bluetoothConnect>:

	return 1;
}

//Rutina pro pripojeni k zarizeni
uint8_t bluetoothConnect(char * mac){
 8007568:	b570      	push	{r4, r5, r6, lr}
	//Vstoupi do CMD modu
	if(!btCmdMode) bluetoothEnterCMD();
 800756a:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <bluetoothConnect+0x3c>)
uint8_t bluetoothConnect(char * mac){
 800756c:	0005      	movs	r5, r0
	if(!btCmdMode) bluetoothEnterCMD();
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <bluetoothConnect+0x10>
 8007574:	f7ff fe82 	bl	800727c <bluetoothEnterCMD>
	//Okopiruje si MAC
	char * cmd = (char *) malloc(50);
 8007578:	2032      	movs	r0, #50	; 0x32
 800757a:	f004 f9a1 	bl	800b8c0 <malloc>
 800757e:	0004      	movs	r4, r0
	//Vysle prikaz pro pripojeni
	sprintf(cmd, "C,0,%s\r", mac);
 8007580:	002a      	movs	r2, r5
 8007582:	4909      	ldr	r1, [pc, #36]	; (80075a8 <bluetoothConnect+0x40>)
 8007584:	f004 fa7c 	bl	800ba80 <siprintf>
	//sprintf(oledHeader, "%s" ,cmd);
	//Pokud se pripojeni nepovedlo, vrati 0
	if(!bluetoothCMD_ACK(cmd, "%STREAM_OPEN")){
 8007588:	0020      	movs	r0, r4
 800758a:	4908      	ldr	r1, [pc, #32]	; (80075ac <bluetoothConnect+0x44>)
 800758c:	f7ff fe2e 	bl	80071ec <bluetoothCMD_ACK>
 8007590:	1e04      	subs	r4, r0, #0
 8007592:	d103      	bne.n	800759c <bluetoothConnect+0x34>
		//Odejde z CMD modu
		bluetoothLeaveCMD();
 8007594:	f7ff fe86 	bl	80072a4 <bluetoothLeaveCMD>

	//Odejde z CMD modu
	//bluetoothLeaveCMD();

	return 1;
}
 8007598:	0020      	movs	r0, r4
 800759a:	bd70      	pop	{r4, r5, r6, pc}
	}else btStreamOpen = 1;
 800759c:	2401      	movs	r4, #1
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <bluetoothConnect+0x48>)
 80075a0:	701c      	strb	r4, [r3, #0]
	return 1;
 80075a2:	e7f9      	b.n	8007598 <bluetoothConnect+0x30>
 80075a4:	20003026 	.word	0x20003026
 80075a8:	0800de2d 	.word	0x0800de2d
 80075ac:	0800dea0 	.word	0x0800dea0
 80075b0:	20002c94 	.word	0x20002c94

080075b4 <countOccurances>:

	return 1;
}

//Rutina pro pocitani vyskytu v textu
uint32_t countOccurances(char * buff, char * what){
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	000c      	movs	r4, r1
	uint32_t count = 0;
 80075b8:	2500      	movs	r5, #0
	const char * tmp = buff;
	while((tmp = strstr(tmp, what)))
 80075ba:	0021      	movs	r1, r4
 80075bc:	f004 fac2 	bl	800bb44 <strstr>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d101      	bne.n	80075c8 <countOccurances+0x14>
		count++;
		tmp++;
	}

	return count;
}
 80075c4:	0028      	movs	r0, r5
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
		count++;
 80075c8:	3501      	adds	r5, #1
		tmp++;
 80075ca:	3001      	adds	r0, #1
 80075cc:	e7f5      	b.n	80075ba <countOccurances+0x6>

080075ce <replacechar>:

//Rutina pro nahrazeni charakteru v textu
uint32_t replacechar(char *str, char orig, char rep){
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	000d      	movs	r5, r1
 80075d2:	0016      	movs	r6, r2
    char *ix = str;
    uint32_t n = 0;
 80075d4:	2400      	movs	r4, #0
    while((ix = strchr(ix, orig)) != NULL) {
 80075d6:	0029      	movs	r1, r5
 80075d8:	f004 fa9e 	bl	800bb18 <strchr>
 80075dc:	1e03      	subs	r3, r0, #0
 80075de:	d101      	bne.n	80075e4 <replacechar+0x16>
        *ix++ = rep;
        n++;
    }
    return n;
}
 80075e0:	0020      	movs	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
        *ix++ = rep;
 80075e4:	1c58      	adds	r0, r3, #1
 80075e6:	701e      	strb	r6, [r3, #0]
        n++;
 80075e8:	3401      	adds	r4, #1
 80075ea:	e7f4      	b.n	80075d6 <replacechar+0x8>

080075ec <splitString>:

//Rutina pro rozdeleni stringu na substringy
uint32_t splitString(char * string, char * delim, char ** array){
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	0016      	movs	r6, r2
 80075f0:	000d      	movs	r5, r1

	uint32_t count = 0;
	char * token = strtok(string, delim);
 80075f2:	f004 fabf 	bl	800bb74 <strtok>
	array[count++] = token;

	while( token != NULL ) {
 80075f6:	2401      	movs	r4, #1
	array[count++] = token;
 80075f8:	6030      	str	r0, [r6, #0]
	while( token != NULL ) {
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d101      	bne.n	8007602 <splitString+0x16>
	      token = strtok(NULL, delim);
	      array[count++] = token;
	}

	return count;
}
 80075fe:	0020      	movs	r0, r4
 8007600:	bd70      	pop	{r4, r5, r6, pc}
	      token = strtok(NULL, delim);
 8007602:	0029      	movs	r1, r5
 8007604:	2000      	movs	r0, #0
 8007606:	f004 fab5 	bl	800bb74 <strtok>
	      array[count++] = token;
 800760a:	00a3      	lsls	r3, r4, #2
 800760c:	50f0      	str	r0, [r6, r3]
 800760e:	3401      	adds	r4, #1
 8007610:	e7f3      	b.n	80075fa <splitString+0xe>
	...

08007614 <bluetoothGetScannedDevices>:
	memset(buff, 0, 300);
 8007614:	2296      	movs	r2, #150	; 0x96
uint8_t bluetoothGetScannedDevices(){
 8007616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007618:	b0e9      	sub	sp, #420	; 0x1a4
	memset(buff, 0, 300);
 800761a:	0052      	lsls	r2, r2, #1
 800761c:	2100      	movs	r1, #0
 800761e:	a81d      	add	r0, sp, #116	; 0x74
 8007620:	f004 f96b 	bl	800b8fa <memset>
	if(!bluetoothEnterCMD()) return 0;
 8007624:	f7ff fe2a 	bl	800727c <bluetoothEnterCMD>
 8007628:	2800      	cmp	r0, #0
 800762a:	d102      	bne.n	8007632 <bluetoothGetScannedDevices+0x1e>
		if(!bluetoothLeaveCMD()) return 0;
 800762c:	2000      	movs	r0, #0
}
 800762e:	b069      	add	sp, #420	; 0x1a4
 8007630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!bluetoothCMD_Time("F\r", 15, &buff)){
 8007632:	aa1d      	add	r2, sp, #116	; 0x74
 8007634:	210f      	movs	r1, #15
 8007636:	4892      	ldr	r0, [pc, #584]	; (8007880 <bluetoothGetScannedDevices+0x26c>)
 8007638:	f7ff ff64 	bl	8007504 <bluetoothCMD_Time>
 800763c:	2800      	cmp	r0, #0
 800763e:	d102      	bne.n	8007646 <bluetoothGetScannedDevices+0x32>
		if(!bluetoothLeaveCMD()) return 0;
 8007640:	f7ff fe30 	bl	80072a4 <bluetoothLeaveCMD>
 8007644:	e7f2      	b.n	800762c <bluetoothGetScannedDevices+0x18>
	btScannedCount = countOccurances(buff, "%")/2;
 8007646:	498f      	ldr	r1, [pc, #572]	; (8007884 <bluetoothGetScannedDevices+0x270>)
 8007648:	a81d      	add	r0, sp, #116	; 0x74
 800764a:	f7ff ffb3 	bl	80075b4 <countOccurances>
 800764e:	4c8e      	ldr	r4, [pc, #568]	; (8007888 <bluetoothGetScannedDevices+0x274>)
 8007650:	0840      	lsrs	r0, r0, #1
 8007652:	7020      	strb	r0, [r4, #0]
	replacechar(buff, '\r', ' ');
 8007654:	2220      	movs	r2, #32
 8007656:	210d      	movs	r1, #13
 8007658:	a81d      	add	r0, sp, #116	; 0x74
 800765a:	f7ff ffb8 	bl	80075ce <replacechar>
	splitString(buff, "\n", devices);
 800765e:	aa09      	add	r2, sp, #36	; 0x24
 8007660:	498a      	ldr	r1, [pc, #552]	; (800788c <bluetoothGetScannedDevices+0x278>)
 8007662:	a81d      	add	r0, sp, #116	; 0x74
 8007664:	f7ff ffc2 	bl	80075ec <splitString>
	if(btScannedCount != 0){
 8007668:	7823      	ldrb	r3, [r4, #0]
 800766a:	2600      	movs	r6, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d000      	beq.n	8007672 <bluetoothGetScannedDevices+0x5e>
 8007670:	e08e      	b.n	8007790 <bluetoothGetScannedDevices+0x17c>
	if(!bluetoothCMD_Until("X\r", BT_CMD, &buff)){
 8007672:	aa1d      	add	r2, sp, #116	; 0x74
 8007674:	4986      	ldr	r1, [pc, #536]	; (8007890 <bluetoothGetScannedDevices+0x27c>)
 8007676:	4887      	ldr	r0, [pc, #540]	; (8007894 <bluetoothGetScannedDevices+0x280>)
 8007678:	f7ff ff04 	bl	8007484 <bluetoothCMD_Until>
 800767c:	2800      	cmp	r0, #0
 800767e:	d0df      	beq.n	8007640 <bluetoothGetScannedDevices+0x2c>
	if(!bluetoothLeaveCMD()) return 0;
 8007680:	f7ff fe10 	bl	80072a4 <bluetoothLeaveCMD>
 8007684:	2800      	cmp	r0, #0
 8007686:	d0d1      	beq.n	800762c <bluetoothGetScannedDevices+0x18>
	if(btScannedCount == 0) return 0;
 8007688:	4b7f      	ldr	r3, [pc, #508]	; (8007888 <bluetoothGetScannedDevices+0x274>)
 800768a:	7818      	ldrb	r0, [r3, #0]
 800768c:	1e43      	subs	r3, r0, #1
 800768e:	4198      	sbcs	r0, r3
	if(!bluetoothEnterCMD()) return 0;
 8007690:	b2c0      	uxtb	r0, r0
 8007692:	e7cc      	b.n	800762e <bluetoothGetScannedDevices+0x1a>
			if(strstr((char *)devices[i+1], ",,") - (char *)devices[i+1] < 16 && strstr((char *)devices[i+1], ",,")){
 8007694:	1c73      	adds	r3, r6, #1
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	aa09      	add	r2, sp, #36	; 0x24
 800769a:	589f      	ldr	r7, [r3, r2]
 800769c:	497e      	ldr	r1, [pc, #504]	; (8007898 <bluetoothGetScannedDevices+0x284>)
 800769e:	0038      	movs	r0, r7
 80076a0:	f004 fa50 	bl	800bb44 <strstr>
 80076a4:	4c7d      	ldr	r4, [pc, #500]	; (800789c <bluetoothGetScannedDevices+0x288>)
 80076a6:	1bc3      	subs	r3, r0, r7
 80076a8:	2b0f      	cmp	r3, #15
 80076aa:	dc37      	bgt.n	800771c <bluetoothGetScannedDevices+0x108>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d100      	bne.n	80076b2 <bluetoothGetScannedDevices+0x9e>
 80076b0:	e086      	b.n	80077c0 <bluetoothGetScannedDevices+0x1ac>
 80076b2:	205c      	movs	r0, #92	; 0x5c
 80076b4:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,,%[^,],%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].uuid, &btScanned[i].rssi);
 80076b6:	0001      	movs	r1, r0
 80076b8:	3154      	adds	r1, #84	; 0x54
 80076ba:	1861      	adds	r1, r4, r1
 80076bc:	1825      	adds	r5, r4, r0
 80076be:	9106      	str	r1, [sp, #24]
 80076c0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80076c2:	0003      	movs	r3, r0
 80076c4:	9105      	str	r1, [sp, #20]
 80076c6:	0001      	movs	r1, r0
 80076c8:	314c      	adds	r1, #76	; 0x4c
 80076ca:	1861      	adds	r1, r4, r1
 80076cc:	9104      	str	r1, [sp, #16]
 80076ce:	0001      	movs	r1, r0
 80076d0:	3148      	adds	r1, #72	; 0x48
 80076d2:	1861      	adds	r1, r4, r1
 80076d4:	9103      	str	r1, [sp, #12]
 80076d6:	0001      	movs	r1, r0
 80076d8:	3144      	adds	r1, #68	; 0x44
 80076da:	1861      	adds	r1, r4, r1
 80076dc:	0002      	movs	r2, r0
 80076de:	9102      	str	r1, [sp, #8]
 80076e0:	0001      	movs	r1, r0
 80076e2:	3338      	adds	r3, #56	; 0x38
 80076e4:	303c      	adds	r0, #60	; 0x3c
 80076e6:	3234      	adds	r2, #52	; 0x34
 80076e8:	3140      	adds	r1, #64	; 0x40
 80076ea:	18e3      	adds	r3, r4, r3
 80076ec:	18a2      	adds	r2, r4, r2
 80076ee:	1861      	adds	r1, r4, r1
 80076f0:	1824      	adds	r4, r4, r0
 80076f2:	9101      	str	r1, [sp, #4]
 80076f4:	9400      	str	r4, [sp, #0]
 80076f6:	496a      	ldr	r1, [pc, #424]	; (80078a0 <bluetoothGetScannedDevices+0x28c>)
 80076f8:	0038      	movs	r0, r7
 80076fa:	f004 f9e3 	bl	800bac4 <siscanf>
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 80076fe:	0028      	movs	r0, r5
 8007700:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007702:	4968      	ldr	r1, [pc, #416]	; (80078a4 <bluetoothGetScannedDevices+0x290>)
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007714:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 8007716:	f004 f9b3 	bl	800ba80 <siprintf>
 800771a:	e024      	b.n	8007766 <bluetoothGetScannedDevices+0x152>
 800771c:	205c      	movs	r0, #92	; 0x5c
 800771e:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%[^,],,%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].name, &btScanned[i].rssi);
 8007720:	0001      	movs	r1, r0
 8007722:	3154      	adds	r1, #84	; 0x54
 8007724:	1861      	adds	r1, r4, r1
 8007726:	9106      	str	r1, [sp, #24]
 8007728:	1821      	adds	r1, r4, r0
 800772a:	9105      	str	r1, [sp, #20]
 800772c:	0001      	movs	r1, r0
 800772e:	314c      	adds	r1, #76	; 0x4c
 8007730:	1861      	adds	r1, r4, r1
 8007732:	9104      	str	r1, [sp, #16]
 8007734:	0001      	movs	r1, r0
 8007736:	3148      	adds	r1, #72	; 0x48
 8007738:	1861      	adds	r1, r4, r1
 800773a:	9103      	str	r1, [sp, #12]
 800773c:	0001      	movs	r1, r0
 800773e:	3144      	adds	r1, #68	; 0x44
 8007740:	1861      	adds	r1, r4, r1
 8007742:	0003      	movs	r3, r0
 8007744:	0002      	movs	r2, r0
 8007746:	9102      	str	r1, [sp, #8]
 8007748:	0001      	movs	r1, r0
 800774a:	3338      	adds	r3, #56	; 0x38
 800774c:	303c      	adds	r0, #60	; 0x3c
 800774e:	3234      	adds	r2, #52	; 0x34
 8007750:	3140      	adds	r1, #64	; 0x40
 8007752:	1861      	adds	r1, r4, r1
 8007754:	18e3      	adds	r3, r4, r3
 8007756:	18a2      	adds	r2, r4, r2
 8007758:	1824      	adds	r4, r4, r0
 800775a:	9101      	str	r1, [sp, #4]
 800775c:	9400      	str	r4, [sp, #0]
 800775e:	4952      	ldr	r1, [pc, #328]	; (80078a8 <bluetoothGetScannedDevices+0x294>)
 8007760:	0038      	movs	r0, r7
 8007762:	f004 f9af 	bl	800bac4 <siscanf>
			btScanedDevices[i].font = &Font_11x18;
 8007766:	4951      	ldr	r1, [pc, #324]	; (80078ac <bluetoothGetScannedDevices+0x298>)
 8007768:	0170      	lsls	r0, r6, #5
 800776a:	4a51      	ldr	r2, [pc, #324]	; (80078b0 <bluetoothGetScannedDevices+0x29c>)
 800776c:	180b      	adds	r3, r1, r0
 800776e:	609a      	str	r2, [r3, #8]
			btScanedDevices[i].name = btScanned[i].name;
 8007770:	225c      	movs	r2, #92	; 0x5c
 8007772:	4372      	muls	r2, r6
 8007774:	4c49      	ldr	r4, [pc, #292]	; (800789c <bluetoothGetScannedDevices+0x288>)
		for(i = 0; i < btScannedCount; i++){
 8007776:	3601      	adds	r6, #1
			btScanedDevices[i].name = btScanned[i].name;
 8007778:	1912      	adds	r2, r2, r4
 800777a:	5042      	str	r2, [r0, r1]
			btScanedDevices[i].selected = 0;
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
			btScanedDevices[i].hasSpecialSelector = 0;
 8007780:	60da      	str	r2, [r3, #12]
			btScanedDevices[i].specharNotSelected = 0;
 8007782:	611a      	str	r2, [r3, #16]
			btScanedDevices[i].specharSelected = 0;
 8007784:	615a      	str	r2, [r3, #20]
			btScanedDevices[i].submenuLevel = 3;
 8007786:	3203      	adds	r2, #3
 8007788:	619a      	str	r2, [r3, #24]
			btScanedDevices[i].parentItem = &bluetoothmenu[0].name;
 800778a:	4a4a      	ldr	r2, [pc, #296]	; (80078b4 <bluetoothGetScannedDevices+0x2a0>)
		for(i = 0; i < btScannedCount; i++){
 800778c:	b2f6      	uxtb	r6, r6
			btScanedDevices[i].parentItem = &bluetoothmenu[0].name;
 800778e:	61da      	str	r2, [r3, #28]
		for(i = 0; i < btScannedCount; i++){
 8007790:	4b3d      	ldr	r3, [pc, #244]	; (8007888 <bluetoothGetScannedDevices+0x274>)
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	4296      	cmp	r6, r2
 8007796:	d200      	bcs.n	800779a <bluetoothGetScannedDevices+0x186>
 8007798:	e77c      	b.n	8007694 <bluetoothGetScannedDevices+0x80>
		btScanedDevices[btScannedCount].font = &Font_11x18;
 800779a:	4944      	ldr	r1, [pc, #272]	; (80078ac <bluetoothGetScannedDevices+0x298>)
 800779c:	0152      	lsls	r2, r2, #5
 800779e:	4844      	ldr	r0, [pc, #272]	; (80078b0 <bluetoothGetScannedDevices+0x29c>)
 80077a0:	188b      	adds	r3, r1, r2
 80077a2:	6098      	str	r0, [r3, #8]
		btScanedDevices[btScannedCount].name = "Zpet";
 80077a4:	4844      	ldr	r0, [pc, #272]	; (80078b8 <bluetoothGetScannedDevices+0x2a4>)
 80077a6:	5050      	str	r0, [r2, r1]
		btScanedDevices[btScannedCount].hasSpecialSelector = 1;
 80077a8:	2101      	movs	r1, #1
		btScanedDevices[btScannedCount].selected = 0;
 80077aa:	2200      	movs	r2, #0
		btScanedDevices[btScannedCount].hasSpecialSelector = 1;
 80077ac:	60d9      	str	r1, [r3, #12]
		btScanedDevices[btScannedCount].specharNotSelected = 36;
 80077ae:	3123      	adds	r1, #35	; 0x23
 80077b0:	6119      	str	r1, [r3, #16]
		btScanedDevices[btScannedCount].specharSelected = 37;
 80077b2:	3101      	adds	r1, #1
 80077b4:	6159      	str	r1, [r3, #20]
		btScanedDevices[btScannedCount].submenuLevel = 3;
 80077b6:	3922      	subs	r1, #34	; 0x22
		btScanedDevices[btScannedCount].selected = 0;
 80077b8:	605a      	str	r2, [r3, #4]
		btScanedDevices[btScannedCount].submenuLevel = 3;
 80077ba:	6199      	str	r1, [r3, #24]
		btScanedDevices[btScannedCount].parentItem = 0;
 80077bc:	61da      	str	r2, [r3, #28]
 80077be:	e758      	b.n	8007672 <bluetoothGetScannedDevices+0x5e>
			}else if(strstr((char *)devices[i+1], "Brcst") - (char *)devices[i+1] >= 16){
 80077c0:	493e      	ldr	r1, [pc, #248]	; (80078bc <bluetoothGetScannedDevices+0x2a8>)
 80077c2:	0038      	movs	r0, r7
 80077c4:	f004 f9be 	bl	800bb44 <strstr>
 80077c8:	1bc0      	subs	r0, r0, r7
 80077ca:	280f      	cmp	r0, #15
 80077cc:	dd30      	ble.n	8007830 <bluetoothGetScannedDevices+0x21c>
 80077ce:	255c      	movs	r5, #92	; 0x5c
 80077d0:	4375      	muls	r5, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%02X,%*[^%]", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, &btScanned[i].rssi);
 80077d2:	0029      	movs	r1, r5
 80077d4:	3154      	adds	r1, #84	; 0x54
 80077d6:	1861      	adds	r1, r4, r1
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	0029      	movs	r1, r5
 80077dc:	314c      	adds	r1, #76	; 0x4c
 80077de:	1861      	adds	r1, r4, r1
 80077e0:	9104      	str	r1, [sp, #16]
 80077e2:	0029      	movs	r1, r5
 80077e4:	3148      	adds	r1, #72	; 0x48
 80077e6:	1861      	adds	r1, r4, r1
 80077e8:	9103      	str	r1, [sp, #12]
 80077ea:	0029      	movs	r1, r5
 80077ec:	3144      	adds	r1, #68	; 0x44
 80077ee:	1861      	adds	r1, r4, r1
 80077f0:	9102      	str	r1, [sp, #8]
 80077f2:	0029      	movs	r1, r5
 80077f4:	3140      	adds	r1, #64	; 0x40
 80077f6:	1861      	adds	r1, r4, r1
 80077f8:	9101      	str	r1, [sp, #4]
 80077fa:	0029      	movs	r1, r5
 80077fc:	002b      	movs	r3, r5
 80077fe:	002a      	movs	r2, r5
 8007800:	313c      	adds	r1, #60	; 0x3c
 8007802:	1861      	adds	r1, r4, r1
 8007804:	3338      	adds	r3, #56	; 0x38
 8007806:	3234      	adds	r2, #52	; 0x34
 8007808:	18e3      	adds	r3, r4, r3
 800780a:	18a2      	adds	r2, r4, r2
 800780c:	9100      	str	r1, [sp, #0]
 800780e:	0038      	movs	r0, r7
 8007810:	492b      	ldr	r1, [pc, #172]	; (80078c0 <bluetoothGetScannedDevices+0x2ac>)
 8007812:	f004 f957 	bl	800bac4 <siscanf>
				sprintf(btScanned[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btScanned[i].mac[0], btScanned[i].mac[1], btScanned[i].mac[2], btScanned[i].mac[3], btScanned[i].mac[4], btScanned[i].mac[5]);
 8007816:	1960      	adds	r0, r4, r5
 8007818:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800781a:	4922      	ldr	r1, [pc, #136]	; (80078a4 <bluetoothGetScannedDevices+0x290>)
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007820:	9302      	str	r3, [sp, #8]
 8007822:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800782c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800782e:	e772      	b.n	8007716 <bluetoothGetScannedDevices+0x102>
 8007830:	205c      	movs	r0, #92	; 0x5c
 8007832:	4370      	muls	r0, r6
				sscanf((char *)devices[i+1], "%*[%]%02X%02X%02X%02X%02X%02X,%d,%[^,],%[^,],%02X", &btScanned[i].mac[0], &btScanned[i].mac[1], &btScanned[i].mac[2], &btScanned[i].mac[3], &btScanned[i].mac[4], &btScanned[i].mac[5], &btScanned[i].mactype, btScanned[i].name, btScanned[i].uuid, &btScanned[i].rssi);
 8007834:	0001      	movs	r1, r0
 8007836:	3154      	adds	r1, #84	; 0x54
 8007838:	1861      	adds	r1, r4, r1
 800783a:	9107      	str	r1, [sp, #28]
 800783c:	1821      	adds	r1, r4, r0
 800783e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8007840:	9105      	str	r1, [sp, #20]
 8007842:	0001      	movs	r1, r0
 8007844:	314c      	adds	r1, #76	; 0x4c
 8007846:	1861      	adds	r1, r4, r1
 8007848:	9104      	str	r1, [sp, #16]
 800784a:	0001      	movs	r1, r0
 800784c:	3148      	adds	r1, #72	; 0x48
 800784e:	1861      	adds	r1, r4, r1
 8007850:	9103      	str	r1, [sp, #12]
 8007852:	0001      	movs	r1, r0
 8007854:	3144      	adds	r1, #68	; 0x44
 8007856:	1861      	adds	r1, r4, r1
 8007858:	0003      	movs	r3, r0
 800785a:	0002      	movs	r2, r0
 800785c:	9102      	str	r1, [sp, #8]
 800785e:	0001      	movs	r1, r0
 8007860:	3338      	adds	r3, #56	; 0x38
 8007862:	303c      	adds	r0, #60	; 0x3c
 8007864:	3234      	adds	r2, #52	; 0x34
 8007866:	3140      	adds	r1, #64	; 0x40
 8007868:	1861      	adds	r1, r4, r1
 800786a:	18e3      	adds	r3, r4, r3
 800786c:	18a2      	adds	r2, r4, r2
 800786e:	1824      	adds	r4, r4, r0
 8007870:	9101      	str	r1, [sp, #4]
 8007872:	9506      	str	r5, [sp, #24]
 8007874:	9400      	str	r4, [sp, #0]
 8007876:	4913      	ldr	r1, [pc, #76]	; (80078c4 <bluetoothGetScannedDevices+0x2b0>)
 8007878:	0038      	movs	r0, r7
 800787a:	f004 f923 	bl	800bac4 <siscanf>
 800787e:	e772      	b.n	8007766 <bluetoothGetScannedDevices+0x152>
 8007880:	0800deec 	.word	0x0800deec
 8007884:	0800deef 	.word	0x0800deef
 8007888:	20002c9e 	.word	0x20002c9e
 800788c:	0800def1 	.word	0x0800def1
 8007890:	0800debf 	.word	0x0800debf
 8007894:	0800dfba 	.word	0x0800dfba
 8007898:	0800def3 	.word	0x0800def3
 800789c:	200018e8 	.word	0x200018e8
 80078a0:	0800def6 	.word	0x0800def6
 80078a4:	0800de70 	.word	0x0800de70
 80078a8:	0800df23 	.word	0x0800df23
 80078ac:	20002d00 	.word	0x20002d00
 80078b0:	200003e8 	.word	0x200003e8
 80078b4:	20000008 	.word	0x20000008
 80078b8:	0800dfb5 	.word	0x0800dfb5
 80078bc:	0800df50 	.word	0x0800df50
 80078c0:	0800df56 	.word	0x0800df56
 80078c4:	0800df83 	.word	0x0800df83

080078c8 <bluetoothGetBondedDevices>:
	memset(buff, 0, 300);
 80078c8:	2296      	movs	r2, #150	; 0x96
uint8_t bluetoothGetBondedDevices(){
 80078ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078cc:	b0e7      	sub	sp, #412	; 0x19c
	memset(buff, 0, 300);
 80078ce:	0052      	lsls	r2, r2, #1
 80078d0:	2100      	movs	r1, #0
 80078d2:	a81b      	add	r0, sp, #108	; 0x6c
 80078d4:	f004 f811 	bl	800b8fa <memset>
	if(!bluetoothEnterCMD()) return 0;
 80078d8:	f7ff fcd0 	bl	800727c <bluetoothEnterCMD>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d103      	bne.n	80078e8 <bluetoothGetBondedDevices+0x20>
 80078e0:	2400      	movs	r4, #0
}
 80078e2:	0020      	movs	r0, r4
 80078e4:	b067      	add	sp, #412	; 0x19c
 80078e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!bluetoothCMD_Until("LB\r", BT_END, &buff)){
 80078e8:	aa1b      	add	r2, sp, #108	; 0x6c
 80078ea:	4941      	ldr	r1, [pc, #260]	; (80079f0 <bluetoothGetBondedDevices+0x128>)
 80078ec:	4841      	ldr	r0, [pc, #260]	; (80079f4 <bluetoothGetBondedDevices+0x12c>)
 80078ee:	f7ff fdc9 	bl	8007484 <bluetoothCMD_Until>
 80078f2:	1e04      	subs	r4, r0, #0
 80078f4:	d102      	bne.n	80078fc <bluetoothGetBondedDevices+0x34>
		if(!bluetoothLeaveCMD()) return 0;
 80078f6:	f7ff fcd5 	bl	80072a4 <bluetoothLeaveCMD>
 80078fa:	e7f2      	b.n	80078e2 <bluetoothGetBondedDevices+0x1a>
	btBondedCount = countOccurances(buff, "\n");
 80078fc:	4d3e      	ldr	r5, [pc, #248]	; (80079f8 <bluetoothGetBondedDevices+0x130>)
 80078fe:	a81b      	add	r0, sp, #108	; 0x6c
 8007900:	0029      	movs	r1, r5
 8007902:	f7ff fe57 	bl	80075b4 <countOccurances>
 8007906:	4c3d      	ldr	r4, [pc, #244]	; (80079fc <bluetoothGetBondedDevices+0x134>)
	replacechar(buff, '\r', ' ');
 8007908:	2220      	movs	r2, #32
	btBondedCount = countOccurances(buff, "\n");
 800790a:	7020      	strb	r0, [r4, #0]
	replacechar(buff, '\r', ' ');
 800790c:	210d      	movs	r1, #13
 800790e:	a81b      	add	r0, sp, #108	; 0x6c
 8007910:	f7ff fe5d 	bl	80075ce <replacechar>
	splitString(buff, "\n", devices);
 8007914:	0029      	movs	r1, r5
 8007916:	aa07      	add	r2, sp, #28
 8007918:	a81b      	add	r0, sp, #108	; 0x6c
 800791a:	f7ff fe67 	bl	80075ec <splitString>
	if(btBondedCount != 0){
 800791e:	7823      	ldrb	r3, [r4, #0]
 8007920:	2500      	movs	r5, #0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d14c      	bne.n	80079c0 <bluetoothGetBondedDevices+0xf8>
	if(!bluetoothLeaveCMD()) return 0;
 8007926:	f7ff fcbd 	bl	80072a4 <bluetoothLeaveCMD>
 800792a:	2800      	cmp	r0, #0
 800792c:	d0d8      	beq.n	80078e0 <bluetoothGetBondedDevices+0x18>
	if(btBondedCount == 0) return 0;
 800792e:	4b33      	ldr	r3, [pc, #204]	; (80079fc <bluetoothGetBondedDevices+0x134>)
 8007930:	781c      	ldrb	r4, [r3, #0]
 8007932:	1e63      	subs	r3, r4, #1
 8007934:	419c      	sbcs	r4, r3
	if(!bluetoothEnterCMD()) return 0;
 8007936:	b2e4      	uxtb	r4, r4
 8007938:	e7d3      	b.n	80078e2 <bluetoothGetBondedDevices+0x1a>
 800793a:	265c      	movs	r6, #92	; 0x5c
 800793c:	436e      	muls	r6, r5
			sscanf((char *)devices[i], "%*d,%02X%02X%02X%02X%02X%02X,%d", &btBonded[i].mac[0], &btBonded[i].mac[1], &btBonded[i].mac[2], &btBonded[i].mac[3], &btBonded[i].mac[4], &btBonded[i].mac[5], &btBonded[i].mactype);
 800793e:	0031      	movs	r1, r6
 8007940:	4c2f      	ldr	r4, [pc, #188]	; (8007a00 <bluetoothGetBondedDevices+0x138>)
 8007942:	314c      	adds	r1, #76	; 0x4c
 8007944:	1909      	adds	r1, r1, r4
 8007946:	9104      	str	r1, [sp, #16]
 8007948:	0031      	movs	r1, r6
 800794a:	3148      	adds	r1, #72	; 0x48
 800794c:	1909      	adds	r1, r1, r4
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	0031      	movs	r1, r6
 8007952:	3144      	adds	r1, #68	; 0x44
 8007954:	1909      	adds	r1, r1, r4
 8007956:	9102      	str	r1, [sp, #8]
 8007958:	0031      	movs	r1, r6
 800795a:	3140      	adds	r1, #64	; 0x40
 800795c:	1909      	adds	r1, r1, r4
 800795e:	9101      	str	r1, [sp, #4]
 8007960:	0031      	movs	r1, r6
 8007962:	0033      	movs	r3, r6
 8007964:	0032      	movs	r2, r6
 8007966:	313c      	adds	r1, #60	; 0x3c
 8007968:	1909      	adds	r1, r1, r4
 800796a:	9100      	str	r1, [sp, #0]
 800796c:	00a8      	lsls	r0, r5, #2
 800796e:	3338      	adds	r3, #56	; 0x38
 8007970:	3234      	adds	r2, #52	; 0x34
 8007972:	af07      	add	r7, sp, #28
 8007974:	191b      	adds	r3, r3, r4
 8007976:	1912      	adds	r2, r2, r4
 8007978:	4922      	ldr	r1, [pc, #136]	; (8007a04 <bluetoothGetBondedDevices+0x13c>)
			sprintf(btBonded[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btBonded[i].mac[0], btBonded[i].mac[1], btBonded[i].mac[2], btBonded[i].mac[3], btBonded[i].mac[4], btBonded[i].mac[5]);
 800797a:	1934      	adds	r4, r6, r4
			sscanf((char *)devices[i], "%*d,%02X%02X%02X%02X%02X%02X,%d", &btBonded[i].mac[0], &btBonded[i].mac[1], &btBonded[i].mac[2], &btBonded[i].mac[3], &btBonded[i].mac[4], &btBonded[i].mac[5], &btBonded[i].mactype);
 800797c:	59c0      	ldr	r0, [r0, r7]
 800797e:	f004 f8a1 	bl	800bac4 <siscanf>
			sprintf(btBonded[i].name, "%02X-%02X-%02X-%02X-%02X-%02X", btBonded[i].mac[0], btBonded[i].mac[1], btBonded[i].mac[2], btBonded[i].mac[3], btBonded[i].mac[4], btBonded[i].mac[5]);
 8007982:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007984:	4920      	ldr	r1, [pc, #128]	; (8007a08 <bluetoothGetBondedDevices+0x140>)
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800798a:	0020      	movs	r0, r4
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800799a:	f004 f871 	bl	800ba80 <siprintf>
			btBondedDevicesMenu[i].font = &Font_11x18;
 800799e:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <bluetoothGetBondedDevices+0x144>)
 80079a0:	0169      	lsls	r1, r5, #5
 80079a2:	1853      	adds	r3, r2, r1
			btBondedDevicesMenu[i].name = btBonded[i].name;
 80079a4:	508c      	str	r4, [r1, r2]
			btBondedDevicesMenu[i].selected = 0;
 80079a6:	2200      	movs	r2, #0
 80079a8:	605a      	str	r2, [r3, #4]
			btBondedDevicesMenu[i].hasSpecialSelector = 0;
 80079aa:	60da      	str	r2, [r3, #12]
			btBondedDevicesMenu[i].specharNotSelected = 0;
 80079ac:	611a      	str	r2, [r3, #16]
			btBondedDevicesMenu[i].specharSelected = 0;
 80079ae:	615a      	str	r2, [r3, #20]
			btBondedDevicesMenu[i].submenuLevel = 3;
 80079b0:	3203      	adds	r2, #3
			btBondedDevicesMenu[i].font = &Font_11x18;
 80079b2:	4817      	ldr	r0, [pc, #92]	; (8007a10 <bluetoothGetBondedDevices+0x148>)
			btBondedDevicesMenu[i].submenuLevel = 3;
 80079b4:	619a      	str	r2, [r3, #24]
			btBondedDevicesMenu[i].parentItem = &bluetoothmenu[0].name;
 80079b6:	4a17      	ldr	r2, [pc, #92]	; (8007a14 <bluetoothGetBondedDevices+0x14c>)
		for(i = 0; i < btBondedCount; i++){
 80079b8:	3501      	adds	r5, #1
			btBondedDevicesMenu[i].font = &Font_11x18;
 80079ba:	6098      	str	r0, [r3, #8]
			btBondedDevicesMenu[i].parentItem = &bluetoothmenu[0].name;
 80079bc:	61da      	str	r2, [r3, #28]
		for(i = 0; i < btBondedCount; i++){
 80079be:	b2ed      	uxtb	r5, r5
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <bluetoothGetBondedDevices+0x134>)
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	4295      	cmp	r5, r2
 80079c6:	d3b8      	bcc.n	800793a <bluetoothGetBondedDevices+0x72>
		btBondedDevicesMenu[btBondedCount].font = &Font_11x18;
 80079c8:	4910      	ldr	r1, [pc, #64]	; (8007a0c <bluetoothGetBondedDevices+0x144>)
 80079ca:	0152      	lsls	r2, r2, #5
 80079cc:	4810      	ldr	r0, [pc, #64]	; (8007a10 <bluetoothGetBondedDevices+0x148>)
 80079ce:	188b      	adds	r3, r1, r2
 80079d0:	6098      	str	r0, [r3, #8]
		btBondedDevicesMenu[btBondedCount].name = "Zpet";
 80079d2:	4811      	ldr	r0, [pc, #68]	; (8007a18 <bluetoothGetBondedDevices+0x150>)
 80079d4:	5050      	str	r0, [r2, r1]
		btBondedDevicesMenu[btBondedCount].hasSpecialSelector = 1;
 80079d6:	2101      	movs	r1, #1
		btBondedDevicesMenu[btBondedCount].selected = 0;
 80079d8:	2200      	movs	r2, #0
		btBondedDevicesMenu[btBondedCount].hasSpecialSelector = 1;
 80079da:	60d9      	str	r1, [r3, #12]
		btBondedDevicesMenu[btBondedCount].specharNotSelected = 36;
 80079dc:	3123      	adds	r1, #35	; 0x23
 80079de:	6119      	str	r1, [r3, #16]
		btBondedDevicesMenu[btBondedCount].specharSelected = 37;
 80079e0:	3101      	adds	r1, #1
 80079e2:	6159      	str	r1, [r3, #20]
		btBondedDevicesMenu[btBondedCount].submenuLevel = 3;
 80079e4:	3922      	subs	r1, #34	; 0x22
		btBondedDevicesMenu[btBondedCount].selected = 0;
 80079e6:	605a      	str	r2, [r3, #4]
		btBondedDevicesMenu[btBondedCount].submenuLevel = 3;
 80079e8:	6199      	str	r1, [r3, #24]
		btBondedDevicesMenu[btBondedCount].parentItem = 0;
 80079ea:	61da      	str	r2, [r3, #28]
 80079ec:	e79b      	b.n	8007926 <bluetoothGetBondedDevices+0x5e>
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	0800e034 	.word	0x0800e034
 80079f4:	0800dec8 	.word	0x0800dec8
 80079f8:	0800def1 	.word	0x0800def1
 80079fc:	20003230 	.word	0x20003230
 8007a00:	200028fc 	.word	0x200028fc
 8007a04:	0800decc 	.word	0x0800decc
 8007a08:	0800de70 	.word	0x0800de70
 8007a0c:	20000b00 	.word	0x20000b00
 8007a10:	200003e8 	.word	0x200003e8
 8007a14:	20000008 	.word	0x20000008
 8007a18:	0800dfb5 	.word	0x0800dfb5

08007a1c <bluetoothConnectKnown>:
uint8_t bluetoothConnectKnown(){
 8007a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1e:	255c      	movs	r5, #92	; 0x5c
 8007a20:	b089      	sub	sp, #36	; 0x24
	bluetoothGetScannedDevices();
 8007a22:	f7ff fdf7 	bl	8007614 <bluetoothGetScannedDevices>
	bluetoothGetBondedDevices();
 8007a26:	f7ff ff4f 	bl	80078c8 <bluetoothGetBondedDevices>
	for(uint8_t b = 0; b < btBondedCount; b++){
 8007a2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <bluetoothConnectKnown+0xc8>)
 8007a2c:	4a2e      	ldr	r2, [pc, #184]	; (8007ae8 <bluetoothConnectKnown+0xcc>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
	int8_t selected = -1;
 8007a30:	2401      	movs	r4, #1
	for(uint8_t b = 0; b < btBondedCount; b++){
 8007a32:	469c      	mov	ip, r3
		for(uint8_t s = 0; s < btScannedCount; s++){
 8007a34:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <bluetoothConnectKnown+0xd0>)
	int8_t selected = -1;
 8007a36:	4264      	negs	r4, r4
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	9507      	str	r5, [sp, #28]
 8007a3c:	436b      	muls	r3, r5
 8007a3e:	334c      	adds	r3, #76	; 0x4c
 8007a40:	189b      	adds	r3, r3, r2
	for(uint8_t b = 0; b < btBondedCount; b++){
 8007a42:	2200      	movs	r2, #0
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	b2d1      	uxtb	r1, r2
 8007a48:	458c      	cmp	ip, r1
 8007a4a:	d922      	bls.n	8007a92 <bluetoothConnectKnown+0x76>
 8007a4c:	9807      	ldr	r0, [sp, #28]
 8007a4e:	4d28      	ldr	r5, [pc, #160]	; (8007af0 <bluetoothConnectKnown+0xd4>)
 8007a50:	4350      	muls	r0, r2
 8007a52:	3034      	adds	r0, #52	; 0x34
 8007a54:	1940      	adds	r0, r0, r5
 8007a56:	9005      	str	r0, [sp, #20]
					selected = b;
 8007a58:	b250      	sxtb	r0, r2
 8007a5a:	4926      	ldr	r1, [pc, #152]	; (8007af4 <bluetoothConnectKnown+0xd8>)
 8007a5c:	9006      	str	r0, [sp, #24]
 8007a5e:	e00e      	b.n	8007a7e <bluetoothConnectKnown+0x62>
 8007a60:	3604      	adds	r6, #4
 8007a62:	3704      	adds	r7, #4
			for(uint8_t i = 0; i < 6; i++){
 8007a64:	428e      	cmp	r6, r1
 8007a66:	d009      	beq.n	8007a7c <bluetoothConnectKnown+0x60>
				if(btScanned[s].mac[i] == btBonded[b].mac[i]){
 8007a68:	6835      	ldr	r5, [r6, #0]
 8007a6a:	002b      	movs	r3, r5
 8007a6c:	683d      	ldr	r5, [r7, #0]
 8007a6e:	42ab      	cmp	r3, r5
 8007a70:	d101      	bne.n	8007a76 <bluetoothConnectKnown+0x5a>
					match++;
 8007a72:	3001      	adds	r0, #1
 8007a74:	b240      	sxtb	r0, r0
				if(match == 6){
 8007a76:	2806      	cmp	r0, #6
 8007a78:	d1f2      	bne.n	8007a60 <bluetoothConnectKnown+0x44>
					selected = b;
 8007a7a:	9c06      	ldr	r4, [sp, #24]
 8007a7c:	315c      	adds	r1, #92	; 0x5c
		for(uint8_t s = 0; s < btScannedCount; s++){
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d004      	beq.n	8007a8e <bluetoothConnectKnown+0x72>
 8007a84:	000e      	movs	r6, r1
 8007a86:	9f05      	ldr	r7, [sp, #20]
 8007a88:	3e18      	subs	r6, #24
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e7ec      	b.n	8007a68 <bluetoothConnectKnown+0x4c>
 8007a8e:	3201      	adds	r2, #1
 8007a90:	e7d9      	b.n	8007a46 <bluetoothConnectKnown+0x2a>
	if(selected != -1){
 8007a92:	1c63      	adds	r3, r4, #1
 8007a94:	d01e      	beq.n	8007ad4 <bluetoothConnectKnown+0xb8>
		char * mac = (char*) malloc(20);
 8007a96:	2014      	movs	r0, #20
 8007a98:	f003 ff12 	bl	800b8c0 <malloc>
		sprintf(mac, "%02X%02X%02X%02X%02X%02X", btBonded[selected].mac[0], btBonded[selected].mac[1], btBonded[selected].mac[2], btBonded[selected].mac[3], btBonded[selected].mac[4], btBonded[selected].mac[5]);
 8007a9c:	235c      	movs	r3, #92	; 0x5c
		char * mac = (char*) malloc(20);
 8007a9e:	0005      	movs	r5, r0
		sprintf(mac, "%02X%02X%02X%02X%02X%02X", btBonded[selected].mac[0], btBonded[selected].mac[1], btBonded[selected].mac[2], btBonded[selected].mac[3], btBonded[selected].mac[4], btBonded[selected].mac[5]);
 8007aa0:	4363      	muls	r3, r4
 8007aa2:	4c13      	ldr	r4, [pc, #76]	; (8007af0 <bluetoothConnectKnown+0xd4>)
 8007aa4:	4914      	ldr	r1, [pc, #80]	; (8007af8 <bluetoothConnectKnown+0xdc>)
 8007aa6:	18e4      	adds	r4, r4, r3
 8007aa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007abc:	f003 ffe0 	bl	800ba80 <siprintf>
		if(!bluetoothConnect(mac)){
 8007ac0:	0028      	movs	r0, r5
 8007ac2:	f7ff fd51 	bl	8007568 <bluetoothConnect>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d004      	beq.n	8007ad4 <bluetoothConnectKnown+0xb8>
	bluetoothLeaveCMD();
 8007aca:	f7ff fbeb 	bl	80072a4 <bluetoothLeaveCMD>
	return 1;
 8007ace:	2001      	movs	r0, #1
}
 8007ad0:	b009      	add	sp, #36	; 0x24
 8007ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!bluetoothConnect("D88039FFF0B0")) return 0;
 8007ad4:	4809      	ldr	r0, [pc, #36]	; (8007afc <bluetoothConnectKnown+0xe0>)
 8007ad6:	f7ff fd47 	bl	8007568 <bluetoothConnect>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d1f5      	bne.n	8007aca <bluetoothConnectKnown+0xae>
 8007ade:	2000      	movs	r0, #0
 8007ae0:	e7f6      	b.n	8007ad0 <bluetoothConnectKnown+0xb4>
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20003230 	.word	0x20003230
 8007ae8:	200018e8 	.word	0x200018e8
 8007aec:	20002c9e 	.word	0x20002c9e
 8007af0:	200028fc 	.word	0x200028fc
 8007af4:	20001934 	.word	0x20001934
 8007af8:	0800de57 	.word	0x0800de57
 8007afc:	0800de35 	.word	0x0800de35

08007b00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007b00:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007b02:	2001      	movs	r0, #1
 8007b04:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <MX_DMA_Init+0x28>)
 8007b06:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007b08:	4301      	orrs	r1, r0
 8007b0a:	6391      	str	r1, [r2, #56]	; 0x38
 8007b0c:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007b0e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007b10:	4003      	ands	r3, r0
 8007b12:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007b14:	0011      	movs	r1, r2
 8007b16:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007b18:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007b1a:	f7fb fd7f 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007b1e:	2009      	movs	r0, #9
 8007b20:	f7fb fdac 	bl	800367c <HAL_NVIC_EnableIRQ>

}
 8007b24:	bd07      	pop	{r0, r1, r2, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	40021000 	.word	0x40021000

08007b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007b2c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b2e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b30:	2702      	movs	r7, #2
{
 8007b32:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b34:	2214      	movs	r2, #20
 8007b36:	2100      	movs	r1, #0
 8007b38:	a803      	add	r0, sp, #12
 8007b3a:	f003 fede 	bl	800b8fa <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b3e:	2108      	movs	r1, #8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8007b40:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b42:	4b3c      	ldr	r3, [pc, #240]	; (8007c34 <MX_GPIO_Init+0x108>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8007b44:	4d3c      	ldr	r5, [pc, #240]	; (8007c38 <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8007b48:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4a:	4332      	orrs	r2, r6
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8007b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                          |KB_R5_Pin|BQ_OTG_Pin|BT_RST_Pin|BT_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b50:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b52:	4032      	ands	r2, r6
 8007b54:	9200      	str	r2, [sp, #0]
 8007b56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5a:	433a      	orrs	r2, r7
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8007b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b60:	403a      	ands	r2, r7
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8007b6e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b70:	400b      	ands	r3, r1
 8007b72:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8007b74:	310a      	adds	r1, #10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b76:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, POWER_ON_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8007b78:	f7fb ffde 	bl	8003b38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	0028      	movs	r0, r5
 8007b80:	492e      	ldr	r1, [pc, #184]	; (8007c3c <MX_GPIO_Init+0x110>)
 8007b82:	f7fb ffd9 	bl	8003b38 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 8007b88:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8a:	a903      	add	r1, sp, #12
 8007b8c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = POWER_ON_Pin|SPI_CS_Pin;
 8007b8e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b90:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b92:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b94:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b96:	f7fb ff21 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8007b9a:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <MX_GPIO_Init+0x114>)
                          |KB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b9c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = KB_R1_Pin|KB_R2_Pin|KB_R3_Pin|KB_R4_Pin 
 8007b9e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ba2:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ba6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007baa:	f7fb ff17 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8007bae:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8007bb0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8007bb2:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8007bb4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = SW_POWER_Pin;
 8007bb6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007bb8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bba:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(SW_POWER_GPIO_Port, &GPIO_InitStruct);
 8007bbc:	f7fb ff0e 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_ENTER_Pin;
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	01db      	lsls	r3, r3, #7
 8007bc4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007bc6:	4b1f      	ldr	r3, [pc, #124]	; (8007c44 <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8007bc8:	a903      	add	r1, sp, #12
 8007bca:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007bcc:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 8007bce:	3705      	adds	r7, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SW_ENTER_GPIO_Port, &GPIO_InitStruct);
 8007bd2:	f7fb ff03 	bl	80039dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bd6:	a903      	add	r1, sp, #12
 8007bd8:	481b      	ldr	r0, [pc, #108]	; (8007c48 <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Pin = KB_C1_Pin|KB_C2_Pin|KB_C3_Pin;
 8007bda:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bdc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bde:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007be0:	f7fb fefc 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_INT_Pin;
 8007be4:	2310      	movs	r3, #16
 8007be6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007be8:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <MX_GPIO_Init+0x120>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8007bea:	a903      	add	r1, sp, #12
 8007bec:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007bee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BQ_INT_GPIO_Port, &GPIO_InitStruct);
 8007bf2:	f7fb fef3 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 8007bf6:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 8007bf8:	a903      	add	r1, sp, #12
 8007bfa:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = BQ_OTG_Pin;
 8007bfc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bfe:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c00:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c02:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BQ_OTG_GPIO_Port, &GPIO_InitStruct);
 8007c04:	f7fb feea 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BT_RST_Pin|BT_MODE_Pin;
 8007c08:	23c0      	movs	r3, #192	; 0xc0
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007c0e:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c10:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007c12:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c14:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c16:	3b0e      	subs	r3, #14
 8007c18:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c1c:	f7fb fede 	bl	80039dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007c20:	0022      	movs	r2, r4
 8007c22:	0021      	movs	r1, r4
 8007c24:	0038      	movs	r0, r7
 8007c26:	f7fb fcf9 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007c2a:	0038      	movs	r0, r7
 8007c2c:	f7fb fd26 	bl	800367c <HAL_NVIC_EnableIRQ>

}
 8007c30:	b009      	add	sp, #36	; 0x24
 8007c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c34:	40021000 	.word	0x40021000
 8007c38:	50000400 	.word	0x50000400
 8007c3c:	00001f26 	.word	0x00001f26
 8007c40:	00001c06 	.word	0x00001c06
 8007c44:	10210000 	.word	0x10210000
 8007c48:	50000c00 	.word	0x50000c00
 8007c4c:	10110000 	.word	0x10110000

08007c50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007c50:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <MX_I2C1_Init+0x50>)
 8007c54:	4c13      	ldr	r4, [pc, #76]	; (8007ca4 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x00602173;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c56:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8007c58:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00602173;
 8007c5a:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007c5c:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00602173;
 8007c5e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007c60:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c62:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8007c64:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c66:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007c68:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007c6a:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c6c:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c6e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007c70:	f7fc f922 	bl	8003eb8 <HAL_I2C_Init>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d001      	beq.n	8007c7c <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8007c78:	f000 fdf8 	bl	800886c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	0020      	movs	r0, r4
 8007c80:	f7fc fef4 	bl	8004a6c <HAL_I2CEx_ConfigAnalogFilter>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d001      	beq.n	8007c8c <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8007c88:	f000 fdf0 	bl	800886c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	0020      	movs	r0, r4
 8007c90:	f7fc ff12 	bl	8004ab8 <HAL_I2CEx_ConfigDigitalFilter>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d001      	beq.n	8007c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007c98:	f000 fde8 	bl	800886c <Error_Handler>
  }

}
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	40005400 	.word	0x40005400
 8007ca4:	20003e40 	.word	0x20003e40
 8007ca8:	00602173 	.word	0x00602173

08007cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007cac:	b530      	push	{r4, r5, lr}
 8007cae:	0005      	movs	r5, r0
 8007cb0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb2:	2214      	movs	r2, #20
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	a803      	add	r0, sp, #12
 8007cb8:	f003 fe1f 	bl	800b8fa <memset>
  if(i2cHandle->Instance==I2C1)
 8007cbc:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <HAL_I2C_MspInit+0x9c>)
 8007cbe:	682a      	ldr	r2, [r5, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d13f      	bne.n	8007d44 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	4c21      	ldr	r4, [pc, #132]	; (8007d4c <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cc8:	4821      	ldr	r0, [pc, #132]	; (8007d50 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	6362      	str	r2, [r4, #52]	; 0x34
 8007cd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007cd8:	23c0      	movs	r3, #192	; 0xc0
 8007cda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cdc:	3bae      	subs	r3, #174	; 0xae
 8007cde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ce0:	3b11      	subs	r3, #17
 8007ce2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007ce6:	3305      	adds	r3, #5
 8007ce8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cea:	f7fb fe77 	bl	80039dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007cee:	2180      	movs	r1, #128	; 0x80
 8007cf0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007cf2:	0389      	lsls	r1, r1, #14
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	63e2      	str	r2, [r4, #60]	; 0x3c
 8007cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8007cfa:	4c16      	ldr	r4, [pc, #88]	; (8007d54 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007cfc:	400b      	ands	r3, r1
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <HAL_I2C_MspInit+0xac>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d04:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8007d06:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8007d08:	230b      	movs	r3, #11
 8007d0a:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d0c:	3305      	adds	r3, #5
 8007d0e:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d14:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d16:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007d18:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007d1a:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007d1c:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007d1e:	019b      	lsls	r3, r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d20:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007d22:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007d24:	f7fb fd28 	bl	8003778 <HAL_DMA_Init>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d001      	beq.n	8007d30 <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 8007d2c:	f000 fd9e 	bl	800886c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2017      	movs	r0, #23
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007d34:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007d36:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007d38:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007d3a:	f7fb fc6f 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007d3e:	2017      	movs	r0, #23
 8007d40:	f7fb fc9c 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007d44:	b009      	add	sp, #36	; 0x24
 8007d46:	bd30      	pop	{r4, r5, pc}
 8007d48:	40005400 	.word	0x40005400
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	50000400 	.word	0x50000400
 8007d54:	20003de4 	.word	0x20003de4
 8007d58:	40020008 	.word	0x40020008

08007d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d5c:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d5e:	2680      	movs	r6, #128	; 0x80
{
 8007d60:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d62:	2238      	movs	r2, #56	; 0x38
 8007d64:	2100      	movs	r1, #0
 8007d66:	a812      	add	r0, sp, #72	; 0x48
 8007d68:	f003 fdc7 	bl	800b8fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d6c:	2210      	movs	r2, #16
 8007d6e:	2100      	movs	r1, #0
 8007d70:	a801      	add	r0, sp, #4
 8007d72:	f003 fdc2 	bl	800b8fa <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d76:	00b6      	lsls	r6, r6, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d78:	2234      	movs	r2, #52	; 0x34
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	a805      	add	r0, sp, #20
 8007d7e:	f003 fdbc 	bl	800b8fa <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d82:	0030      	movs	r0, r6
 8007d84:	f7fc febc 	bl	8004b00 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007d88:	230a      	movs	r3, #10
 8007d8a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d8c:	33f6      	adds	r3, #246	; 0xf6
 8007d8e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d90:	3bc0      	subs	r3, #192	; 0xc0
 8007d92:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007d94:	3b3f      	subs	r3, #63	; 0x3f
 8007d96:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007d98:	3307      	adds	r3, #7
 8007d9a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d9c:	2380      	movs	r3, #128	; 0x80
 8007d9e:	029b      	lsls	r3, r3, #10
 8007da0:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007da2:	2380      	movs	r3, #128	; 0x80
 8007da4:	049b      	lsls	r3, r3, #18
 8007da6:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007da8:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007daa:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007dac:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007dae:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007db0:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007db2:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007db4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007db6:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007db8:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007dba:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dbc:	f7fc feca 	bl	8004b54 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007dc0:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007dc2:	0029      	movs	r1, r5
 8007dc4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007dc6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dc8:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007dcc:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007dce:	f7fd f931 	bl	8005034 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <SystemClock_Config+0x90>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007dd4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8007dd6:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007dd8:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007dda:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8007ddc:	940d      	str	r4, [sp, #52]	; 0x34
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8007dde:	940f      	str	r4, [sp, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007de0:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007de2:	f7fd f9e9 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8007de6:	b020      	add	sp, #128	; 0x80
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	00224042 	.word	0x00224042

08007df0 <main>:
{
 8007df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df2:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8007df4:	f7fb f800 	bl	8002df8 <HAL_Init>
  SystemClock_Config();
 8007df8:	f7ff ffb0 	bl	8007d5c <SystemClock_Config>
  MX_GPIO_Init();
 8007dfc:	f7ff fe96 	bl	8007b2c <MX_GPIO_Init>
  MX_DMA_Init();
 8007e00:	f7ff fe7e 	bl	8007b00 <MX_DMA_Init>
  MX_ADC1_Init();
 8007e04:	f7ff f8b6 	bl	8006f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007e08:	f7ff ff22 	bl	8007c50 <MX_I2C1_Init>
  MX_SPI1_Init();
 8007e0c:	f003 f84e 	bl	800aeac <MX_SPI1_Init>
  MX_UCPD1_Init();
 8007e10:	f003 fc86 	bl	800b720 <MX_UCPD1_Init>
  MX_TIM2_Init();
 8007e14:	f003 fb3e 	bl	800b494 <MX_TIM2_Init>
  MX_TIM1_Init();
 8007e18:	f003 faee 	bl	800b3f8 <MX_TIM1_Init>
  MX_RTC_Init();
 8007e1c:	f003 f810 	bl	800ae40 <MX_RTC_Init>
  MX_TIM3_Init();
 8007e20:	f003 fb74 	bl	800b50c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8007e24:	f003 fc8c 	bl	800b740 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8007e28:	f003 fbae 	bl	800b588 <MX_TIM6_Init>
  MX_TIM7_Init();
 8007e2c:	f003 fbd6 	bl	800b5dc <MX_TIM7_Init>
  midiController_init();
 8007e30:	f000 fd6a 	bl	8008908 <midiController_init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8007e34:	20a0      	movs	r0, #160	; 0xa0
 8007e36:	2201      	movs	r2, #1
 8007e38:	2102      	movs	r1, #2
 8007e3a:	05c0      	lsls	r0, r0, #23
 8007e3c:	f7fb fe7c 	bl	8003b38 <HAL_GPIO_WritePin>
  HAL_RTC_Init(&hrtc);
 8007e40:	48d6      	ldr	r0, [pc, #856]	; (800819c <main+0x3ac>)
 8007e42:	f7fd fb1d 	bl	8005480 <HAL_RTC_Init>
  oled_begin();
 8007e46:	f002 f9c5 	bl	800a1d4 <oled_begin>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e4a:	48d5      	ldr	r0, [pc, #852]	; (80081a0 <main+0x3b0>)
 8007e4c:	f7fd fce0 	bl	8005810 <HAL_TIM_Base_Start_IT>
  bluetoothInit();
 8007e50:	f7ff fa3c 	bl	80072cc <bluetoothInit>
  HAL_TIM_Base_Start_IT(&htim3);
 8007e54:	48d3      	ldr	r0, [pc, #844]	; (80081a4 <main+0x3b4>)
 8007e56:	f7fd fcdb 	bl	8005810 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8007e5a:	48d3      	ldr	r0, [pc, #844]	; (80081a8 <main+0x3b8>)
 8007e5c:	f7fd fcd8 	bl	8005810 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8007e60:	4cd2      	ldr	r4, [pc, #840]	; (80081ac <main+0x3bc>)
 8007e62:	0020      	movs	r0, r4
 8007e64:	f7fb fba8 	bl	80035b8 <HAL_ADC_Start>
  if(bluetoothConnectKnown()){
 8007e68:	f7ff fdd8 	bl	8007a1c <bluetoothConnectKnown>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d005      	beq.n	8007e7c <main+0x8c>
  	  btStreamOpen = 1;
 8007e70:	2201      	movs	r2, #1
 8007e72:	4bcf      	ldr	r3, [pc, #828]	; (80081b0 <main+0x3c0>)
 8007e74:	701a      	strb	r2, [r3, #0]
  	  btCmdMode = 0;
 8007e76:	2200      	movs	r2, #0
 8007e78:	4bce      	ldr	r3, [pc, #824]	; (80081b4 <main+0x3c4>)
 8007e7a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(2000);
 8007e7c:	20fa      	movs	r0, #250	; 0xfa
 8007e7e:	00c0      	lsls	r0, r0, #3
 8007e80:	f7fa ffe0 	bl	8002e44 <HAL_Delay>
  midiController_get_time();
 8007e84:	f000 ff7e 	bl	8008d84 <midiController_get_time>
  oledType = OLED_MENU;
 8007e88:	2202      	movs	r2, #2
 8007e8a:	4bcb      	ldr	r3, [pc, #812]	; (80081b8 <main+0x3c8>)
  turnOffEnable = 1;
 8007e8c:	2701      	movs	r7, #1
  HAL_ADC_PollForConversion (&hadc1, 1000);
 8007e8e:	21fa      	movs	r1, #250	; 0xfa
  oledType = OLED_MENU;
 8007e90:	601a      	str	r2, [r3, #0]
  battVoltageTempCount = 0;
 8007e92:	2200      	movs	r2, #0
  turnOffEnable = 1;
 8007e94:	4bc9      	ldr	r3, [pc, #804]	; (80081bc <main+0x3cc>)
  HAL_ADC_PollForConversion (&hadc1, 1000);
 8007e96:	0089      	lsls	r1, r1, #2
  turnOffEnable = 1;
 8007e98:	601f      	str	r7, [r3, #0]
  battVoltageTempCount = 0;
 8007e9a:	4bc9      	ldr	r3, [pc, #804]	; (80081c0 <main+0x3d0>)
  HAL_ADC_PollForConversion (&hadc1, 1000);
 8007e9c:	0020      	movs	r0, r4
  battVoltageTempCount = 0;
 8007e9e:	601a      	str	r2, [r3, #0]
  HAL_ADC_PollForConversion (&hadc1, 1000);
 8007ea0:	f7fb f91e 	bl	80030e0 <HAL_ADC_PollForConversion>
  battVoltage = HAL_ADC_GetValue(&hadc1);
 8007ea4:	0020      	movs	r0, r4
 8007ea6:	f7fb f977 	bl	8003198 <HAL_ADC_GetValue>
 8007eaa:	4bc6      	ldr	r3, [pc, #792]	; (80081c4 <main+0x3d4>)
 8007eac:	6018      	str	r0, [r3, #0]
	  	  if(workerTurnOff.assert){
 8007eae:	4bc6      	ldr	r3, [pc, #792]	; (80081c8 <main+0x3d8>)
 8007eb0:	781e      	ldrb	r6, [r3, #0]
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d01c      	beq.n	8007ef0 <main+0x100>
	  		HAL_TIM_Base_Stop_IT(&htim1);
 8007eb6:	48ba      	ldr	r0, [pc, #744]	; (80081a0 <main+0x3b0>)
 8007eb8:	f7fd fcbe 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	  		HAL_TIM_Base_Stop_IT(&htim2);
 8007ebc:	48c3      	ldr	r0, [pc, #780]	; (80081cc <main+0x3dc>)
 8007ebe:	f7fd fcbb 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	  		HAL_TIM_Base_Stop_IT(&htim3);
 8007ec2:	48b8      	ldr	r0, [pc, #736]	; (80081a4 <main+0x3b4>)
 8007ec4:	f7fd fcb8 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	  		HAL_TIM_Base_Stop_IT(&htim6);
 8007ec8:	48c1      	ldr	r0, [pc, #772]	; (80081d0 <main+0x3e0>)
 8007eca:	f7fd fcb5 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	  		HAL_TIM_Base_Stop_IT(&htim7);
 8007ece:	48b6      	ldr	r0, [pc, #728]	; (80081a8 <main+0x3b8>)
 8007ed0:	f7fd fcb2 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007ed4:	20a0      	movs	r0, #160	; 0xa0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2102      	movs	r1, #2
 8007eda:	05c0      	lsls	r0, r0, #23
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007edc:	24a0      	movs	r4, #160	; 0xa0
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007ede:	f7fb fe2b 	bl	8003b38 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007ee2:	05e4      	lsls	r4, r4, #23
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	0020      	movs	r0, r4
 8007eea:	f7fb fe25 	bl	8003b38 <HAL_GPIO_WritePin>
 8007eee:	e7f9      	b.n	8007ee4 <main+0xf4>
		  if(workerBtScanDev.assert){
 8007ef0:	4cb8      	ldr	r4, [pc, #736]	; (80081d4 <main+0x3e4>)
 8007ef2:	7823      	ldrb	r3, [r4, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00f      	beq.n	8007f18 <main+0x128>
			 if(bluetoothGetScannedDevices()){
 8007ef8:	f7ff fb8c 	bl	8007614 <bluetoothGetScannedDevices>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d100      	bne.n	8007f02 <main+0x112>
 8007f00:	e13a      	b.n	8008178 <main+0x388>
				 oled_setDisplayedMenu("btScanedDevices", &btScanedDevices, sizeof(btScanedDevices)-(20-btScannedCount-1)*sizeof(btScanedDevices[19]), 0);
 8007f02:	4bb5      	ldr	r3, [pc, #724]	; (80081d8 <main+0x3e8>)
 8007f04:	49b5      	ldr	r1, [pc, #724]	; (80081dc <main+0x3ec>)
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	48b5      	ldr	r0, [pc, #724]	; (80081e0 <main+0x3f0>)
 8007f0a:	3201      	adds	r2, #1
 8007f0c:	0152      	lsls	r2, r2, #5
 8007f0e:	0033      	movs	r3, r6
 8007f10:	f001 fd9a 	bl	8009a48 <oled_setDisplayedMenu>
			 workerBtScanDev.assert = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	7023      	strb	r3, [r4, #0]
		  if(workerBtBondDev.assert){
 8007f18:	4cb2      	ldr	r4, [pc, #712]	; (80081e4 <main+0x3f4>)
 8007f1a:	7823      	ldrb	r3, [r4, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00f      	beq.n	8007f40 <main+0x150>
			 if(bluetoothGetBondedDevices()){
 8007f20:	f7ff fcd2 	bl	80078c8 <bluetoothGetBondedDevices>
 8007f24:	1e01      	subs	r1, r0, #0
 8007f26:	d100      	bne.n	8007f2a <main+0x13a>
 8007f28:	e12b      	b.n	8008182 <main+0x392>
				 oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 8007f2a:	4baf      	ldr	r3, [pc, #700]	; (80081e8 <main+0x3f8>)
 8007f2c:	49af      	ldr	r1, [pc, #700]	; (80081ec <main+0x3fc>)
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	48af      	ldr	r0, [pc, #700]	; (80081f0 <main+0x400>)
 8007f32:	3201      	adds	r2, #1
 8007f34:	0152      	lsls	r2, r2, #5
 8007f36:	2300      	movs	r3, #0
 8007f38:	f001 fd86 	bl	8009a48 <oled_setDisplayedMenu>
			 workerBtBondDev.assert = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	7023      	strb	r3, [r4, #0]
	 	  if(btMsgReceivedFlag){
 8007f40:	4cac      	ldr	r4, [pc, #688]	; (80081f4 <main+0x404>)
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <main+0x168>
	 		  decodeMessage(uartMsgDecodeBuff, ((uartMsgDecodeBuff[6] & 0x04) >> 2));
 8007f48:	48ab      	ldr	r0, [pc, #684]	; (80081f8 <main+0x408>)
 8007f4a:	7981      	ldrb	r1, [r0, #6]
 8007f4c:	1089      	asrs	r1, r1, #2
 8007f4e:	4039      	ands	r1, r7
 8007f50:	f000 ffb8 	bl	8008ec4 <decodeMessage>
	 		  btMsgReceivedFlag = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	7023      	strb	r3, [r4, #0]
		  if(workerBtRemoveController.assert){
 8007f58:	4ca8      	ldr	r4, [pc, #672]	; (80081fc <main+0x40c>)
 8007f5a:	7823      	ldrb	r3, [r4, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01d      	beq.n	8007f9c <main+0x1ac>
		  		if(!btCmdMode) bluetoothEnterCMD();
 8007f60:	4d94      	ldr	r5, [pc, #592]	; (80081b4 <main+0x3c4>)
 8007f62:	782b      	ldrb	r3, [r5, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <main+0x17c>
 8007f68:	f7ff f988 	bl	800727c <bluetoothEnterCMD>
		  		sprintf(cmd,"U,%d\r", (btSelectedController+1));
 8007f6c:	4ba4      	ldr	r3, [pc, #656]	; (8008200 <main+0x410>)
 8007f6e:	49a5      	ldr	r1, [pc, #660]	; (8008204 <main+0x414>)
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	a805      	add	r0, sp, #20
 8007f74:	3201      	adds	r2, #1
 8007f76:	f003 fd83 	bl	800ba80 <siprintf>
		  		bluetoothCMD_ACK(cmd, BT_AOK);
 8007f7a:	49a3      	ldr	r1, [pc, #652]	; (8008208 <main+0x418>)
 8007f7c:	a805      	add	r0, sp, #20
 8007f7e:	f7ff f935 	bl	80071ec <bluetoothCMD_ACK>
		  		if(btCmdMode) bluetoothLeaveCMD();
 8007f82:	782b      	ldrb	r3, [r5, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <main+0x19c>
 8007f88:	f7ff f98c 	bl	80072a4 <bluetoothLeaveCMD>
		  		oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	22a0      	movs	r2, #160	; 0xa0
 8007f90:	499e      	ldr	r1, [pc, #632]	; (800820c <main+0x41c>)
 8007f92:	489f      	ldr	r0, [pc, #636]	; (8008210 <main+0x420>)
 8007f94:	f001 fd58 	bl	8009a48 <oled_setDisplayedMenu>
		  		workerBtRemoveController.assert = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	7023      	strb	r3, [r4, #0]
	 	  if(workerBtEnterPairingKey.assert){
 8007f9c:	4c9d      	ldr	r4, [pc, #628]	; (8008214 <main+0x424>)
 8007f9e:	7823      	ldrb	r3, [r4, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <main+0x1e4>
	 		  if(!btCmdMode) bluetoothEnterCMD();
 8007fa4:	4d83      	ldr	r5, [pc, #524]	; (80081b4 <main+0x3c4>)
 8007fa6:	782b      	ldrb	r3, [r5, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <main+0x1c0>
 8007fac:	f7ff f966 	bl	800727c <bluetoothEnterCMD>
	 		  sprintf(pin, "%06ld\r", btPairReq.pin);
 8007fb0:	4b99      	ldr	r3, [pc, #612]	; (8008218 <main+0x428>)
 8007fb2:	499a      	ldr	r1, [pc, #616]	; (800821c <main+0x42c>)
 8007fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fb6:	a805      	add	r0, sp, #20
 8007fb8:	f003 fd62 	bl	800ba80 <siprintf>
	 		  bluetoothCMD_ACK(pin, "");
 8007fbc:	4998      	ldr	r1, [pc, #608]	; (8008220 <main+0x430>)
 8007fbe:	a805      	add	r0, sp, #20
 8007fc0:	f7ff f914 	bl	80071ec <bluetoothCMD_ACK>
	 		 if(btCmdMode) bluetoothLeaveCMD();
 8007fc4:	782b      	ldrb	r3, [r5, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <main+0x1de>
 8007fca:	f7ff f96b 	bl	80072a4 <bluetoothLeaveCMD>
	 		 workerDesert(&workerBtEnterPairingKey);
 8007fce:	0020      	movs	r0, r4
 8007fd0:	f000 fc52 	bl	8008878 <workerDesert>
	 	 if(workerBtConnect.assert){
 8007fd4:	4c93      	ldr	r4, [pc, #588]	; (8008224 <main+0x434>)
 8007fd6:	7823      	ldrb	r3, [r4, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <main+0x1f8>
	 		 bluetoothConnect(workerBtConnectMAC);
 8007fdc:	4b92      	ldr	r3, [pc, #584]	; (8008228 <main+0x438>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	f7ff fac2 	bl	8007568 <bluetoothConnect>
	 		 workerBtConnect.assert = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	7023      	strb	r3, [r4, #0]
	 	if(workerGetSongs.assert){
 8007fe8:	4c90      	ldr	r4, [pc, #576]	; (800822c <main+0x43c>)
 8007fea:	7823      	ldrb	r3, [r4, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <main+0x21e>
	 		if(workerGetSongs.status == WORKER_OK){
 8007ff0:	7863      	ldrb	r3, [r4, #1]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d000      	beq.n	8007ff8 <main+0x208>
 8007ff6:	e0c8      	b.n	800818a <main+0x39a>
	 			oled_setDisplayedMenu("songmenu",&songMenu, (songMenuSize+1)*sizeof(struct menuitem), 1);
 8007ff8:	4b8d      	ldr	r3, [pc, #564]	; (8008230 <main+0x440>)
 8007ffa:	498e      	ldr	r1, [pc, #568]	; (8008234 <main+0x444>)
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	488e      	ldr	r0, [pc, #568]	; (8008238 <main+0x448>)
 8008000:	3201      	adds	r2, #1
 8008002:	0152      	lsls	r2, r2, #5
 8008004:	003b      	movs	r3, r7
 8008006:	f001 fd1f 	bl	8009a48 <oled_setDisplayedMenu>
	 			workerGetSongs.assert = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	7023      	strb	r3, [r4, #0]
	 	if(workerMiscelaneous.assert){
 800800e:	4b8b      	ldr	r3, [pc, #556]	; (800823c <main+0x44c>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02a      	beq.n	800806c <main+0x27c>
	 		HAL_ADC_PollForConversion (&hadc1, 1000);
 8008016:	21fa      	movs	r1, #250	; 0xfa
 8008018:	4c64      	ldr	r4, [pc, #400]	; (80081ac <main+0x3bc>)
 800801a:	0089      	lsls	r1, r1, #2
 800801c:	0020      	movs	r0, r4
 800801e:	f7fb f85f 	bl	80030e0 <HAL_ADC_PollForConversion>
	 		battVoltageTemp += HAL_ADC_GetValue(&hadc1);
 8008022:	0020      	movs	r0, r4
 8008024:	f7fb f8b8 	bl	8003198 <HAL_ADC_GetValue>
 8008028:	4c85      	ldr	r4, [pc, #532]	; (8008240 <main+0x450>)
	 		battVoltageTempCount++;
 800802a:	4d65      	ldr	r5, [pc, #404]	; (80081c0 <main+0x3d0>)
	 		battVoltageTemp += HAL_ADC_GetValue(&hadc1);
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	18c0      	adds	r0, r0, r3
	 		battVoltageTempCount++;
 8008030:	682b      	ldr	r3, [r5, #0]
	 		battVoltageTemp += HAL_ADC_GetValue(&hadc1);
 8008032:	6020      	str	r0, [r4, #0]
	 		battVoltageTempCount++;
 8008034:	1c59      	adds	r1, r3, #1
 8008036:	6029      	str	r1, [r5, #0]
	 		if(battVoltageTempCount >= 10){
 8008038:	2909      	cmp	r1, #9
 800803a:	dd06      	ble.n	800804a <main+0x25a>
	 			battVoltage = battVoltageTemp / battVoltageTempCount;
 800803c:	f7f8 f912 	bl	8000264 <__divsi3>
 8008040:	4b60      	ldr	r3, [pc, #384]	; (80081c4 <main+0x3d4>)
 8008042:	6018      	str	r0, [r3, #0]
	 			battVoltageTempCount = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	602b      	str	r3, [r5, #0]
	 			battVoltageTemp = 0;
 8008048:	6023      	str	r3, [r4, #0]
	 		char msg[] = {INTERNAL_COM, INTERNAL_COM_KEEPALIVE};
 800804a:	2200      	movs	r2, #0
 800804c:	ab05      	add	r3, sp, #20
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	32ab      	adds	r2, #171	; 0xab
 8008052:	705a      	strb	r2, [r3, #1]
	 		sendMsg(ADDRESS_CONTROLLER, ADDRESS_OTHER, 1, INTERNAL, msg, 2);
 8008054:	3aa9      	subs	r2, #169	; 0xa9
 8008056:	9201      	str	r2, [sp, #4]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	0038      	movs	r0, r7
 800805c:	003b      	movs	r3, r7
 800805e:	003a      	movs	r2, r7
 8008060:	2103      	movs	r1, #3
 8008062:	f000 fe9f 	bl	8008da4 <sendMsg>
	 		workerDesert(&workerMiscelaneous);
 8008066:	4875      	ldr	r0, [pc, #468]	; (800823c <main+0x44c>)
 8008068:	f000 fc06 	bl	8008878 <workerDesert>
	 	if(workerDispRefresh.assert){
 800806c:	4b75      	ldr	r3, [pc, #468]	; (8008244 <main+0x454>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d100      	bne.n	8008076 <main+0x286>
 8008074:	e10a      	b.n	800828c <main+0x49c>
	 		sprintf(buff, "%c%c%c%c", dispSong[3], dispSong[2], dispSong[1], dispSong[0]);
 8008076:	4c74      	ldr	r4, [pc, #464]	; (8008248 <main+0x458>)
 8008078:	a805      	add	r0, sp, #20
 800807a:	8821      	ldrh	r1, [r4, #0]
 800807c:	88a3      	ldrh	r3, [r4, #4]
 800807e:	88e2      	ldrh	r2, [r4, #6]
 8008080:	9101      	str	r1, [sp, #4]
 8008082:	8861      	ldrh	r1, [r4, #2]
 8008084:	9100      	str	r1, [sp, #0]
 8008086:	4971      	ldr	r1, [pc, #452]	; (800824c <main+0x45c>)
 8008088:	f003 fcfa 	bl	800ba80 <siprintf>
	 		if(strcmp(numDispSong.enteredValue,buff)){
 800808c:	a905      	add	r1, sp, #20
 800808e:	4870      	ldr	r0, [pc, #448]	; (8008250 <main+0x460>)
 8008090:	f7f8 f838 	bl	8000104 <strcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	d008      	beq.n	80080aa <main+0x2ba>
	 			dispSong[3] = numDispSong.enteredValue[0];
 8008098:	4b6e      	ldr	r3, [pc, #440]	; (8008254 <main+0x464>)
 800809a:	78da      	ldrb	r2, [r3, #3]
 800809c:	80e2      	strh	r2, [r4, #6]
	 			dispSong[2] = numDispSong.enteredValue[1];
 800809e:	791a      	ldrb	r2, [r3, #4]
 80080a0:	80a2      	strh	r2, [r4, #4]
	 			dispSong[1] = numDispSong.enteredValue[2];
 80080a2:	795a      	ldrb	r2, [r3, #5]
 80080a4:	8062      	strh	r2, [r4, #2]
	 			dispSong[0] = numDispSong.enteredValue[3];
 80080a6:	799b      	ldrb	r3, [r3, #6]
 80080a8:	8023      	strh	r3, [r4, #0]
	 		sprintf(buff, "%c%c", dispVerse[1], dispVerse[0]);
 80080aa:	4c6b      	ldr	r4, [pc, #428]	; (8008258 <main+0x468>)
 80080ac:	496b      	ldr	r1, [pc, #428]	; (800825c <main+0x46c>)
 80080ae:	7823      	ldrb	r3, [r4, #0]
 80080b0:	7862      	ldrb	r2, [r4, #1]
 80080b2:	a805      	add	r0, sp, #20
 80080b4:	f003 fce4 	bl	800ba80 <siprintf>
	 		if(strcmp(numDispSong.enteredValue,buff)){
 80080b8:	a905      	add	r1, sp, #20
 80080ba:	4865      	ldr	r0, [pc, #404]	; (8008250 <main+0x460>)
 80080bc:	f7f8 f822 	bl	8000104 <strcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d004      	beq.n	80080ce <main+0x2de>
	 			dispVerse[1] = numDispVerse.enteredValue[0];
 80080c4:	4b66      	ldr	r3, [pc, #408]	; (8008260 <main+0x470>)
 80080c6:	78da      	ldrb	r2, [r3, #3]
 80080c8:	7062      	strb	r2, [r4, #1]
	 			dispVerse[0] = numDispVerse.enteredValue[1];
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	7023      	strb	r3, [r4, #0]
	 		if(numDispLetter.enteredValue[0] != dispLetter){
 80080ce:	4b65      	ldr	r3, [pc, #404]	; (8008264 <main+0x474>)
 80080d0:	4d65      	ldr	r5, [pc, #404]	; (8008268 <main+0x478>)
 80080d2:	78db      	ldrb	r3, [r3, #3]
 80080d4:	782a      	ldrb	r2, [r5, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d001      	beq.n	80080de <main+0x2ee>
	 			changed = 1;
 80080da:	003e      	movs	r6, r7
	 			dispLetter = numDispLetter.enteredValue[0];
 80080dc:	702b      	strb	r3, [r5, #0]
	 		if(dispLED != dispLEDOld){
 80080de:	4b63      	ldr	r3, [pc, #396]	; (800826c <main+0x47c>)
 80080e0:	4a63      	ldr	r2, [pc, #396]	; (8008270 <main+0x480>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	7811      	ldrb	r1, [r2, #0]
 80080e6:	4299      	cmp	r1, r3
 80080e8:	d100      	bne.n	80080ec <main+0x2fc>
 80080ea:	e0c9      	b.n	8008280 <main+0x490>
	 			dispLEDOld = dispLED;
 80080ec:	7013      	strb	r3, [r2, #0]
	 			data[0] = 0xB0;
 80080ee:	22b0      	movs	r2, #176	; 0xb0
 80080f0:	a802      	add	r0, sp, #8
 80080f2:	7002      	strb	r2, [r0, #0]
	 			data[1] =  (dispVerse[0] <= '9' && dispVerse[0] >= '0') ? dispVerse[0]-48 : 0xE0;
 80080f4:	7822      	ldrb	r2, [r4, #0]
 80080f6:	3a30      	subs	r2, #48	; 0x30
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	2a09      	cmp	r2, #9
 80080fc:	d900      	bls.n	8008100 <main+0x310>
 80080fe:	22e0      	movs	r2, #224	; 0xe0
 8008100:	7042      	strb	r2, [r0, #1]
	 			data[2] =  (dispVerse[1] <= '9' && dispVerse[1] >= '0') ? dispVerse[1]-48 : 0xE0;
 8008102:	7862      	ldrb	r2, [r4, #1]
 8008104:	3a30      	subs	r2, #48	; 0x30
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	2a09      	cmp	r2, #9
 800810a:	d900      	bls.n	800810e <main+0x31e>
 800810c:	22e0      	movs	r2, #224	; 0xe0
 800810e:	7082      	strb	r2, [r0, #2]
	 			data[3] =  (dispSong[0] <= '9' && dispSong[0] >= '0') ? dispSong[0]-48 : 0xE0;
 8008110:	4a4d      	ldr	r2, [pc, #308]	; (8008248 <main+0x458>)
 8008112:	24e0      	movs	r4, #224	; 0xe0
 8008114:	8811      	ldrh	r1, [r2, #0]
 8008116:	3930      	subs	r1, #48	; 0x30
 8008118:	b28e      	uxth	r6, r1
 800811a:	2e09      	cmp	r6, #9
 800811c:	d800      	bhi.n	8008120 <main+0x330>
 800811e:	b2cc      	uxtb	r4, r1
 8008120:	70c4      	strb	r4, [r0, #3]
	 			data[4] =  (dispSong[1] <= '9' && dispSong[1] >= '0') ? dispSong[1]-48 : 0xE0;
 8008122:	8851      	ldrh	r1, [r2, #2]
 8008124:	24e0      	movs	r4, #224	; 0xe0
 8008126:	3930      	subs	r1, #48	; 0x30
 8008128:	b28e      	uxth	r6, r1
 800812a:	2e09      	cmp	r6, #9
 800812c:	d800      	bhi.n	8008130 <main+0x340>
 800812e:	b2cc      	uxtb	r4, r1
 8008130:	7104      	strb	r4, [r0, #4]
	 			data[5] =  (dispSong[2] <= '9' && dispSong[2] >= '0') ? dispSong[2]-48 : 0xE0;
 8008132:	8891      	ldrh	r1, [r2, #4]
 8008134:	24e0      	movs	r4, #224	; 0xe0
 8008136:	3930      	subs	r1, #48	; 0x30
 8008138:	b28e      	uxth	r6, r1
 800813a:	2e09      	cmp	r6, #9
 800813c:	d800      	bhi.n	8008140 <main+0x350>
 800813e:	b2cc      	uxtb	r4, r1
 8008140:	7144      	strb	r4, [r0, #5]
	 			data[6] =  (dispSong[3] <= '9' && dispSong[3] >= '0') ? dispSong[3]-48 : 0xE0;
 8008142:	88d2      	ldrh	r2, [r2, #6]
 8008144:	21e0      	movs	r1, #224	; 0xe0
 8008146:	3a30      	subs	r2, #48	; 0x30
 8008148:	b294      	uxth	r4, r2
 800814a:	2c09      	cmp	r4, #9
 800814c:	d800      	bhi.n	8008150 <main+0x360>
 800814e:	b2d1      	uxtb	r1, r2
	 			data[7] =  (dispLetter <= 'D' && dispLetter >= 'A') ? dispLetter-55 : 0xE0;
 8008150:	782a      	ldrb	r2, [r5, #0]
	 			data[6] =  (dispSong[3] <= '9' && dispSong[3] >= '0') ? dispSong[3]-48 : 0xE0;
 8008152:	7181      	strb	r1, [r0, #6]
	 			data[7] =  (dispLetter <= 'D' && dispLetter >= 'A') ? dispLetter-55 : 0xE0;
 8008154:	0014      	movs	r4, r2
 8008156:	3c41      	subs	r4, #65	; 0x41
 8008158:	21e0      	movs	r1, #224	; 0xe0
 800815a:	2c03      	cmp	r4, #3
 800815c:	d801      	bhi.n	8008162 <main+0x372>
 800815e:	3a37      	subs	r2, #55	; 0x37
 8008160:	b2d1      	uxtb	r1, r2
 8008162:	71c1      	strb	r1, [r0, #7]
	 			data[8] =  (dispLED <= 3 && dispLetter >= 0) ? 0x20 | dispLED : 0xE0;
 8008164:	22e0      	movs	r2, #224	; 0xe0
 8008166:	2b03      	cmp	r3, #3
 8008168:	d801      	bhi.n	800816e <main+0x37e>
 800816a:	3ac0      	subs	r2, #192	; 0xc0
 800816c:	431a      	orrs	r2, r3
	 			midiController_setDisplayRaw(data, 9);
 800816e:	2109      	movs	r1, #9
	 			data[8] =  (dispLED <= 3 && dispLetter >= 0) ? 0x20 | dispLED : 0xE0;
 8008170:	7202      	strb	r2, [r0, #8]
	 			midiController_setDisplayRaw(data, 9);
 8008172:	f000 fdfd 	bl	8008d70 <midiController_setDisplayRaw>
 8008176:	e086      	b.n	8008286 <main+0x496>
			 }else oled_setDisplayedSplash(oled_NothingFound, NULL);
 8008178:	0031      	movs	r1, r6
 800817a:	483e      	ldr	r0, [pc, #248]	; (8008274 <main+0x484>)
 800817c:	f001 fe2c 	bl	8009dd8 <oled_setDisplayedSplash>
 8008180:	e6c8      	b.n	8007f14 <main+0x124>
			 }else oled_setDisplayedSplash(oled_NothingFound, NULL);
 8008182:	483c      	ldr	r0, [pc, #240]	; (8008274 <main+0x484>)
 8008184:	f001 fe28 	bl	8009dd8 <oled_setDisplayedSplash>
 8008188:	e6d8      	b.n	8007f3c <main+0x14c>
	 		}else if(workerGetSongs.status == WORKER_ERR){
 800818a:	2b01      	cmp	r3, #1
 800818c:	d000      	beq.n	8008190 <main+0x3a0>
 800818e:	e73e      	b.n	800800e <main+0x21e>
	 			oled_setDisplayedSplash(oled_ErrorSplash, "pri nacitani pisni");
 8008190:	4939      	ldr	r1, [pc, #228]	; (8008278 <main+0x488>)
 8008192:	483a      	ldr	r0, [pc, #232]	; (800827c <main+0x48c>)
 8008194:	f001 fe20 	bl	8009dd8 <oled_setDisplayedSplash>
 8008198:	e737      	b.n	800800a <main+0x21a>
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	200042ec 	.word	0x200042ec
 80081a0:	2000480c 	.word	0x2000480c
 80081a4:	2000478c 	.word	0x2000478c
 80081a8:	2000488c 	.word	0x2000488c
 80081ac:	20000a48 	.word	0x20000a48
 80081b0:	20002c94 	.word	0x20002c94
 80081b4:	20003026 	.word	0x20003026
 80081b8:	20000c40 	.word	0x20000c40
 80081bc:	20000608 	.word	0x20000608
 80081c0:	20000c50 	.word	0x20000c50
 80081c4:	20000aac 	.word	0x20000aac
 80081c8:	200028bc 	.word	0x200028bc
 80081cc:	2000484c 	.word	0x2000484c
 80081d0:	200047cc 	.word	0x200047cc
 80081d4:	20000c49 	.word	0x20000c49
 80081d8:	20002c9e 	.word	0x20002c9e
 80081dc:	20002d00 	.word	0x20002d00
 80081e0:	0800e046 	.word	0x0800e046
 80081e4:	200028be 	.word	0x200028be
 80081e8:	20003230 	.word	0x20003230
 80081ec:	20000b00 	.word	0x20000b00
 80081f0:	0800e056 	.word	0x0800e056
 80081f4:	20000c54 	.word	0x20000c54
 80081f8:	200041bc 	.word	0x200041bc
 80081fc:	20002c9c 	.word	0x20002c9c
 8008200:	20003d94 	.word	0x20003d94
 8008204:	0800e06a 	.word	0x0800e06a
 8008208:	0800dfd7 	.word	0x0800dfd7
 800820c:	20000288 	.word	0x20000288
 8008210:	0800e070 	.word	0x0800e070
 8008214:	20000c46 	.word	0x20000c46
 8008218:	20002858 	.word	0x20002858
 800821c:	0800e079 	.word	0x0800e079
 8008220:	0800def2 	.word	0x0800def2
 8008224:	20000c44 	.word	0x20000c44
 8008228:	20003d98 	.word	0x20003d98
 800822c:	20002851 	.word	0x20002851
 8008230:	20000c48 	.word	0x20000c48
 8008234:	20000c68 	.word	0x20000c68
 8008238:	0800e080 	.word	0x0800e080
 800823c:	20003024 	.word	0x20003024
 8008240:	20000afc 	.word	0x20000afc
 8008244:	20000ac6 	.word	0x20000ac6
 8008248:	20003d9e 	.word	0x20003d9e
 800824c:	0800e09c 	.word	0x0800e09c
 8008250:	20000acb 	.word	0x20000acb
 8008254:	20000ac8 	.word	0x20000ac8
 8008258:	20000ac4 	.word	0x20000ac4
 800825c:	0800e0a0 	.word	0x0800e0a0
 8008260:	20002ccc 	.word	0x20002ccc
 8008264:	20003da8 	.word	0x20003da8
 8008268:	20002cfc 	.word	0x20002cfc
 800826c:	20003da7 	.word	0x20003da7
 8008270:	20000c64 	.word	0x20000c64
 8008274:	0800a77d 	.word	0x0800a77d
 8008278:	0800e089 	.word	0x0800e089
 800827c:	0800a659 	.word	0x0800a659
	 		if(changed){
 8008280:	2e00      	cmp	r6, #0
 8008282:	d000      	beq.n	8008286 <main+0x496>
 8008284:	e733      	b.n	80080ee <main+0x2fe>
	 		workerDesert(&workerDispRefresh);
 8008286:	481a      	ldr	r0, [pc, #104]	; (80082f0 <main+0x500>)
 8008288:	f000 faf6 	bl	8008878 <workerDesert>
		if(workerRecord.assert){
 800828c:	4c19      	ldr	r4, [pc, #100]	; (80082f4 <main+0x504>)
 800828e:	7823      	ldrb	r3, [r4, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d100      	bne.n	8008296 <main+0x4a6>
 8008294:	e60b      	b.n	8007eae <main+0xbe>
			if(workerRecord.status == WORKER_REQUEST){
 8008296:	7863      	ldrb	r3, [r4, #1]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d117      	bne.n	80082cc <main+0x4dc>
				sprintf(&msg[2], "%s", numRecordSong.enteredValue);
 800829c:	2016      	movs	r0, #22
				msg[0] = INTERNAL_COM;
 800829e:	2500      	movs	r5, #0
 80082a0:	ae05      	add	r6, sp, #20
				sprintf(&msg[2], "%s", numRecordSong.enteredValue);
 80082a2:	4915      	ldr	r1, [pc, #84]	; (80082f8 <main+0x508>)
 80082a4:	4468      	add	r0, sp
				msg[1] = INTERNAL_COM_CHECK_NAME;
 80082a6:	7073      	strb	r3, [r6, #1]
				msg[0] = INTERNAL_COM;
 80082a8:	7035      	strb	r5, [r6, #0]
				sprintf(&msg[2], "%s", numRecordSong.enteredValue);
 80082aa:	f003 fc43 	bl	800bb34 <strcpy>
				sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, strlen(numRecordSong.enteredValue)+2);
 80082ae:	4812      	ldr	r0, [pc, #72]	; (80082f8 <main+0x508>)
 80082b0:	f7f7 ff32 	bl	8000118 <strlen>
 80082b4:	3002      	adds	r0, #2
 80082b6:	b280      	uxth	r0, r0
 80082b8:	9001      	str	r0, [sp, #4]
 80082ba:	9600      	str	r6, [sp, #0]
 80082bc:	003b      	movs	r3, r7
 80082be:	002a      	movs	r2, r5
 80082c0:	0029      	movs	r1, r5
 80082c2:	0038      	movs	r0, r7
 80082c4:	f000 fd6e 	bl	8008da4 <sendMsg>
				workerRecord.status = WORKER_WAITING;
 80082c8:	7065      	strb	r5, [r4, #1]
 80082ca:	e5f0      	b.n	8007eae <main+0xbe>
			}else if(workerRecord.status == WORKER_OK){
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d107      	bne.n	80082e0 <main+0x4f0>
				midiController_record(ADDRESS_CONTROLLER, numRecordSong.enteredValue);
 80082d0:	4909      	ldr	r1, [pc, #36]	; (80082f8 <main+0x508>)
 80082d2:	0038      	movs	r0, r7
 80082d4:	f000 fb6e 	bl	80089b4 <midiController_record>
				workerDesert(&workerRecord);
 80082d8:	0020      	movs	r0, r4
 80082da:	f000 facd 	bl	8008878 <workerDesert>
 80082de:	e5e6      	b.n	8007eae <main+0xbe>
			}else if(workerRecord.status == WORKER_ERR){
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d000      	beq.n	80082e6 <main+0x4f6>
 80082e4:	e5e3      	b.n	8007eae <main+0xbe>
				oled_setDisplayedSplash(oled_NameExistsSplash, "");
 80082e6:	4905      	ldr	r1, [pc, #20]	; (80082fc <main+0x50c>)
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <main+0x510>)
 80082ea:	f001 fd75 	bl	8009dd8 <oled_setDisplayedSplash>
 80082ee:	e7f3      	b.n	80082d8 <main+0x4e8>
 80082f0:	20000ac6 	.word	0x20000ac6
 80082f4:	200028b9 	.word	0x200028b9
 80082f8:	200028c7 	.word	0x200028c7
 80082fc:	0800def2 	.word	0x0800def2
 8008300:	0800a6f9 	.word	0x0800a6f9

08008304 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == TIM2){
 8008304:	2380      	movs	r3, #128	; 0x80
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8008306:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(htim->Instance == TIM2){
 8008308:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800830a:	b085      	sub	sp, #20
 800830c:	0005      	movs	r5, r0
	if(htim->Instance == TIM2){
 800830e:	05db      	lsls	r3, r3, #23
 8008310:	429a      	cmp	r2, r3
 8008312:	d101      	bne.n	8008318 <HAL_TIM_PeriodElapsedCallback+0x14>
		//Obnovi se oled displej
		oled_refresh();
 8008314:	f002 f984 	bl	800a620 <oled_refresh>
	}

	if(htim->Instance == TIM1){
 8008318:	4bca      	ldr	r3, [pc, #808]	; (8008644 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800831a:	682a      	ldr	r2, [r5, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d17f      	bne.n	8008420 <HAL_TIM_PeriodElapsedCallback+0x11c>
		midiController_checkKeyboard();
 8008320:	f000 fbce 	bl	8008ac0 <midiController_checkKeyboard>

		if(keypad.changed){
 8008324:	4ac8      	ldr	r2, [pc, #800]	; (8008648 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8008326:	7c53      	ldrb	r3, [r2, #17]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d079      	beq.n	8008420 <HAL_TIM_PeriodElapsedCallback+0x11c>
			if(keypad.up){
 800832c:	7b14      	ldrb	r4, [r2, #12]
 800832e:	49c7      	ldr	r1, [pc, #796]	; (800864c <HAL_TIM_PeriodElapsedCallback+0x348>)
 8008330:	4bc7      	ldr	r3, [pc, #796]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8008332:	2c00      	cmp	r4, #0
 8008334:	d100      	bne.n	8008338 <HAL_TIM_PeriodElapsedCallback+0x34>
 8008336:	e127      	b.n	8008588 <HAL_TIM_PeriodElapsedCallback+0x284>
				encoderpos--;
 8008338:	6808      	ldr	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 800833a:	4ec6      	ldr	r6, [pc, #792]	; (8008654 <HAL_TIM_PeriodElapsedCallback+0x350>)
				encoderpos--;
 800833c:	3801      	subs	r0, #1
 800833e:	6008      	str	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	6030      	str	r0, [r6, #0]
				keyboardVertPos++;
 8008344:	3001      	adds	r0, #1
			}else if(keypad.down){
				encoderpos++;
				keyboardVertPosOld = keyboardVertPos;
				keyboardVertPos--;
 8008346:	6018      	str	r0, [r3, #0]
			}

			if(keypad.right){
 8008348:	7bd0      	ldrb	r0, [r2, #15]
 800834a:	4bc3      	ldr	r3, [pc, #780]	; (8008658 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800834c:	2800      	cmp	r0, #0
 800834e:	d100      	bne.n	8008352 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8008350:	e126      	b.n	80085a0 <HAL_TIM_PeriodElapsedCallback+0x29c>
				keyboardSidePos++;
 8008352:	681e      	ldr	r6, [r3, #0]
 8008354:	3601      	adds	r6, #1
			}else if(keypad.left){
				keyboardSidePos--;
 8008356:	601e      	str	r6, [r3, #0]
			}

			keypadClicks.zero |= keypad.zero;
 8008358:	4bc0      	ldr	r3, [pc, #768]	; (800865c <HAL_TIM_PeriodElapsedCallback+0x358>)
 800835a:	7a57      	ldrb	r7, [r2, #9]
 800835c:	7a5e      	ldrb	r6, [r3, #9]
 800835e:	433e      	orrs	r6, r7
 8008360:	725e      	strb	r6, [r3, #9]
			keypadClicks.one |= keypad.one;
 8008362:	7817      	ldrb	r7, [r2, #0]
 8008364:	781e      	ldrb	r6, [r3, #0]
 8008366:	433e      	orrs	r6, r7
 8008368:	701e      	strb	r6, [r3, #0]
			keypadClicks.two |= keypad.two;
 800836a:	7857      	ldrb	r7, [r2, #1]
 800836c:	785e      	ldrb	r6, [r3, #1]
 800836e:	433e      	orrs	r6, r7
 8008370:	705e      	strb	r6, [r3, #1]
			keypadClicks.three |= keypad.three;
 8008372:	7897      	ldrb	r7, [r2, #2]
 8008374:	789e      	ldrb	r6, [r3, #2]
 8008376:	433e      	orrs	r6, r7
 8008378:	709e      	strb	r6, [r3, #2]
			keypadClicks.four |= keypad.four;
 800837a:	78d7      	ldrb	r7, [r2, #3]
 800837c:	78de      	ldrb	r6, [r3, #3]
 800837e:	433e      	orrs	r6, r7
 8008380:	70de      	strb	r6, [r3, #3]
			keypadClicks.five |= keypad.five;
 8008382:	7917      	ldrb	r7, [r2, #4]
 8008384:	791e      	ldrb	r6, [r3, #4]
 8008386:	433e      	orrs	r6, r7
 8008388:	711e      	strb	r6, [r3, #4]
			keypadClicks.six |= keypad.six;
 800838a:	7957      	ldrb	r7, [r2, #5]
 800838c:	795e      	ldrb	r6, [r3, #5]
 800838e:	433e      	orrs	r6, r7
 8008390:	715e      	strb	r6, [r3, #5]
			keypadClicks.seven |= keypad.seven;
 8008392:	7997      	ldrb	r7, [r2, #6]
 8008394:	799e      	ldrb	r6, [r3, #6]
 8008396:	433e      	orrs	r6, r7
 8008398:	719e      	strb	r6, [r3, #6]
			keypadClicks.eight |= keypad.eight;
 800839a:	79d7      	ldrb	r7, [r2, #7]
 800839c:	79de      	ldrb	r6, [r3, #7]
 800839e:	433e      	orrs	r6, r7
 80083a0:	71de      	strb	r6, [r3, #7]
			keypadClicks.nine |= keypad.nine;
 80083a2:	7a17      	ldrb	r7, [r2, #8]
 80083a4:	7a1e      	ldrb	r6, [r3, #8]
 80083a6:	433e      	orrs	r6, r7
 80083a8:	721e      	strb	r6, [r3, #8]
			keypadClicks.down |= keypad.down;
 80083aa:	7b5e      	ldrb	r6, [r3, #13]
 80083ac:	7b57      	ldrb	r7, [r2, #13]
 80083ae:	433e      	orrs	r6, r7
 80083b0:	735e      	strb	r6, [r3, #13]
			keypadClicks.up |= keypad.up;
 80083b2:	7b1e      	ldrb	r6, [r3, #12]
 80083b4:	4334      	orrs	r4, r6
 80083b6:	731c      	strb	r4, [r3, #12]
			keypadClicks.left |= keypad.left;
 80083b8:	7b96      	ldrb	r6, [r2, #14]
 80083ba:	7b9c      	ldrb	r4, [r3, #14]
 80083bc:	4334      	orrs	r4, r6
 80083be:	739c      	strb	r4, [r3, #14]
			keypadClicks.right |= keypad.right;
 80083c0:	7bdc      	ldrb	r4, [r3, #15]
 80083c2:	4320      	orrs	r0, r4
 80083c4:	73d8      	strb	r0, [r3, #15]
			keypadClicks.enter |= keypad.enter;
 80083c6:	7c10      	ldrb	r0, [r2, #16]
 80083c8:	7c1c      	ldrb	r4, [r3, #16]
 80083ca:	4304      	orrs	r4, r0
 80083cc:	741c      	strb	r4, [r3, #16]
			keypadClicks.mf1 |= keypad.mf1;
 80083ce:	7a96      	ldrb	r6, [r2, #10]
 80083d0:	7a9c      	ldrb	r4, [r3, #10]
 80083d2:	4334      	orrs	r4, r6
 80083d4:	729c      	strb	r4, [r3, #10]
			keypadClicks.power |= keypad.power;
 80083d6:	7ad6      	ldrb	r6, [r2, #11]
 80083d8:	7adc      	ldrb	r4, [r3, #11]
 80083da:	4334      	orrs	r4, r6
 80083dc:	72dc      	strb	r4, [r3, #11]

			//Dopocita se pozice v dispmenu
			if(encoderpos >= (signed int)(dispmenusize)-1){
 80083de:	4ba0      	ldr	r3, [pc, #640]	; (8008660 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80083e0:	680c      	ldr	r4, [r1, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	dd00      	ble.n	80083ec <HAL_TIM_PeriodElapsedCallback+0xe8>
 80083ea:	e0e0      	b.n	80085ae <HAL_TIM_PeriodElapsedCallback+0x2aa>
				encoderpos = (signed int)(dispmenusize)-1;
			}else if(encoderpos < (signed int)0){
				encoderpos = 0;
 80083ec:	600b      	str	r3, [r1, #0]
			}

			if(keyboardSidePos >= keyboardSidePosMax){
 80083ee:	4b9a      	ldr	r3, [pc, #616]	; (8008658 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80083f0:	4c9c      	ldr	r4, [pc, #624]	; (8008664 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	6824      	ldr	r4, [r4, #0]
 80083f6:	42a1      	cmp	r1, r4
 80083f8:	da00      	bge.n	80083fc <HAL_TIM_PeriodElapsedCallback+0xf8>
 80083fa:	e0dd      	b.n	80085b8 <HAL_TIM_PeriodElapsedCallback+0x2b4>
				keyboardSidePos = keyboardSidePosMax;
 80083fc:	601c      	str	r4, [r3, #0]
			}else if(keyboardSidePos < 0){
				keyboardSidePos = 0;
			}

			if(keyboardVertPos >= keyboardVertPosMax){
 80083fe:	4b94      	ldr	r3, [pc, #592]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8008400:	4c99      	ldr	r4, [pc, #612]	; (8008668 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6824      	ldr	r4, [r4, #0]
 8008406:	42a1      	cmp	r1, r4
 8008408:	da00      	bge.n	800840c <HAL_TIM_PeriodElapsedCallback+0x108>
 800840a:	e0db      	b.n	80085c4 <HAL_TIM_PeriodElapsedCallback+0x2c0>
				keyboardVertPos = keyboardVertPosMax;
 800840c:	601c      	str	r4, [r3, #0]
			}else if(keyboardVertPos < 0){
				keyboardVertPos = 0;
			}


			if(keypad.enter > 0){
 800840e:	2800      	cmp	r0, #0
 8008410:	d004      	beq.n	800841c <HAL_TIM_PeriodElapsedCallback+0x118>
				encoderclick = 1;
 8008412:	2101      	movs	r1, #1
 8008414:	4b95      	ldr	r3, [pc, #596]	; (800866c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8008416:	6019      	str	r1, [r3, #0]
				keypad.enter = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	7413      	strb	r3, [r2, #16]
			}

			keypad.changed = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	7453      	strb	r3, [r2, #17]
		}


	}

	if(htim->Instance == TIM3){
 8008420:	4b93      	ldr	r3, [pc, #588]	; (8008670 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8008422:	682a      	ldr	r2, [r5, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d170      	bne.n	800850a <HAL_TIM_PeriodElapsedCallback+0x206>

		if(loadingStat == 2){
 8008428:	4c92      	ldr	r4, [pc, #584]	; (8008674 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d102      	bne.n	8008436 <HAL_TIM_PeriodElapsedCallback+0x132>
			workerAssert(&workerMiscelaneous);
 8008430:	4891      	ldr	r0, [pc, #580]	; (8008678 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8008432:	f000 fa1c 	bl	800886e <workerAssert>
		}

		midiController_keepalive_process();
 8008436:	f000 fc7b 	bl	8008d30 <midiController_keepalive_process>


		//Tady se dela scrollovani
		if(scrollPauseDone){
 800843a:	4a90      	ldr	r2, [pc, #576]	; (800867c <HAL_TIM_PeriodElapsedCallback+0x378>)
 800843c:	4b90      	ldr	r3, [pc, #576]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800843e:	6811      	ldr	r1, [r2, #0]
 8008440:	2900      	cmp	r1, #0
 8008442:	d100      	bne.n	8008446 <HAL_TIM_PeriodElapsedCallback+0x142>
 8008444:	e0c7      	b.n	80085d6 <HAL_TIM_PeriodElapsedCallback+0x2d2>
			if(scrollIndex <= scrollMax){
 8008446:	488f      	ldr	r0, [pc, #572]	; (8008684 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8008448:	4e8f      	ldr	r6, [pc, #572]	; (8008688 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800844a:	6801      	ldr	r1, [r0, #0]
 800844c:	6836      	ldr	r6, [r6, #0]
 800844e:	42b1      	cmp	r1, r6
 8008450:	dd00      	ble.n	8008454 <HAL_TIM_PeriodElapsedCallback+0x150>
 8008452:	e0bd      	b.n	80085d0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
				scrollIndex++;
 8008454:	3101      	adds	r1, #1
 8008456:	6001      	str	r1, [r0, #0]
			}else{
				scrollPauseDone = 0;
			}
		}else scrollPause++;

		if(scrollPause == OLED_MENU_SCROLL_PAUSE){
 8008458:	6819      	ldr	r1, [r3, #0]
 800845a:	2902      	cmp	r1, #2
 800845c:	d109      	bne.n	8008472 <HAL_TIM_PeriodElapsedCallback+0x16e>
			if(scrollIndex > 0){
 800845e:	4989      	ldr	r1, [pc, #548]	; (8008684 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	2800      	cmp	r0, #0
 8008464:	dc00      	bgt.n	8008468 <HAL_TIM_PeriodElapsedCallback+0x164>
 8008466:	e0ba      	b.n	80085de <HAL_TIM_PeriodElapsedCallback+0x2da>
				scrollPauseDone = 0;
 8008468:	2000      	movs	r0, #0
			}else scrollPauseDone = 1;
 800846a:	6010      	str	r0, [r2, #0]

			scrollPause = 0;
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
			scrollIndex = 0;
 8008470:	600a      	str	r2, [r1, #0]
		}

		if(loadingStat < 4){
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	2b03      	cmp	r3, #3
 8008476:	dd00      	ble.n	800847a <HAL_TIM_PeriodElapsedCallback+0x176>
 8008478:	e0b3      	b.n	80085e2 <HAL_TIM_PeriodElapsedCallback+0x2de>
			loadingStat <<= 1;
 800847a:	005b      	lsls	r3, r3, #1
		}else loadingStat = 1;

		if(battAnim < 4){
 800847c:	4a83      	ldr	r2, [pc, #524]	; (800868c <HAL_TIM_PeriodElapsedCallback+0x388>)
		}else loadingStat = 1;
 800847e:	6023      	str	r3, [r4, #0]
		if(battAnim < 4){
 8008480:	6813      	ldr	r3, [r2, #0]
 8008482:	2b03      	cmp	r3, #3
 8008484:	dd00      	ble.n	8008488 <HAL_TIM_PeriodElapsedCallback+0x184>
 8008486:	e0ae      	b.n	80085e6 <HAL_TIM_PeriodElapsedCallback+0x2e2>
			battAnim++;
 8008488:	3301      	adds	r3, #1
		}else battAnim = 0;
 800848a:	6013      	str	r3, [r2, #0]

		loadingToggle = ~loadingToggle;
 800848c:	4a80      	ldr	r2, [pc, #512]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0x38c>)

		if(btStatusMsg){
 800848e:	4e81      	ldr	r6, [pc, #516]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0x390>)
		loadingToggle = ~loadingToggle;
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	4c81      	ldr	r4, [pc, #516]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8008494:	43db      	mvns	r3, r3
 8008496:	6013      	str	r3, [r2, #0]
		if(btStatusMsg){
 8008498:	7833      	ldrb	r3, [r6, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <HAL_TIM_PeriodElapsedCallback+0x1ae>
			btStatusMsgWD++;
 800849e:	8823      	ldrh	r3, [r4, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8023      	strh	r3, [r4, #0]

			if(btStatusMsgWD >= 2){
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d904      	bls.n	80084b4 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				bluetoothMsgFifoFlush();
 80084aa:	f7fe fde7 	bl	800707c <bluetoothMsgFifoFlush>
				btStatusMsg = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	7033      	strb	r3, [r6, #0]
				btStatusMsgWD = 0;
			}
		}else btStatusMsgWD = 0;
 80084b2:	8023      	strh	r3, [r4, #0]


		if(turnOffEnable){
 80084b4:	4b79      	ldr	r3, [pc, #484]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x398>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <HAL_TIM_PeriodElapsedCallback+0x1da>
			if(keypad.power && turnOffCounter == 0){
 80084bc:	4b62      	ldr	r3, [pc, #392]	; (8008648 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80084be:	4c78      	ldr	r4, [pc, #480]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80084c0:	7ada      	ldrb	r2, [r3, #11]
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	2a00      	cmp	r2, #0
 80084c6:	d100      	bne.n	80084ca <HAL_TIM_PeriodElapsedCallback+0x1c6>
 80084c8:	e09d      	b.n	8008606 <HAL_TIM_PeriodElapsedCallback+0x302>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d000      	beq.n	80084d0 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 80084ce:	e08c      	b.n	80085ea <HAL_TIM_PeriodElapsedCallback+0x2e6>
				oled_setDisplayedSplash(oled_LoadingSplash, "Vypinam");
 80084d0:	4974      	ldr	r1, [pc, #464]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80084d2:	4875      	ldr	r0, [pc, #468]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80084d4:	f001 fc80 	bl	8009dd8 <oled_setDisplayedSplash>
				turnOffCounter++;
 80084d8:	6823      	ldr	r3, [r4, #0]
			}else if(keypad.power && turnOffCounter < TURN_OFF_DELAY*2){
				turnOffCounter++;
 80084da:	3301      	adds	r3, #1
 80084dc:	6023      	str	r3, [r4, #0]
				workerAssert(&workerTurnOff);
			}
		}


		HAL_I2C_Mem_Read(&hi2c1, (0x6B<<1), 0x08, 1, &I2C_buffer[8], 1, HAL_MAX_DELAY);
 80084de:	2301      	movs	r3, #1
 80084e0:	4a72      	ldr	r2, [pc, #456]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80084e2:	425b      	negs	r3, r3
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	3302      	adds	r3, #2
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	9200      	str	r2, [sp, #0]
 80084ec:	21d6      	movs	r1, #214	; 0xd6
 80084ee:	2208      	movs	r2, #8
 80084f0:	486f      	ldr	r0, [pc, #444]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80084f2:	f7fb fd37 	bl	8003f64 <HAL_I2C_Mem_Read>

		if((I2C_buffer[8] & 0x0C) == 0x01 || (I2C_buffer[8] & 0x0C) == 0x02){
			battStatus = 5;
		}else{
			if(battVoltage > 2960){
 80084f6:	22b9      	movs	r2, #185	; 0xb9
 80084f8:	4b6e      	ldr	r3, [pc, #440]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80084fa:	0112      	lsls	r2, r2, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4293      	cmp	r3, r2
 8008500:	dc00      	bgt.n	8008504 <HAL_TIM_PeriodElapsedCallback+0x200>
 8008502:	e08c      	b.n	800861e <HAL_TIM_PeriodElapsedCallback+0x31a>
				battStatus = 4;
 8008504:	2204      	movs	r2, #4
			}else if(battVoltage < 2900 && battVoltage > 2620){
				battStatus = 2;
			}else if(battVoltage < 2560){
				battStatus = 0;
 8008506:	4b6c      	ldr	r3, [pc, #432]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8008508:	701a      	strb	r2, [r3, #0]



	}

	if(htim->Instance == TIM6){
 800850a:	4b6c      	ldr	r3, [pc, #432]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800850c:	682a      	ldr	r2, [r5, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d121      	bne.n	8008556 <HAL_TIM_PeriodElapsedCallback+0x252>
		HAL_TIM_Base_Stop_IT(&htim6);
 8008512:	486b      	ldr	r0, [pc, #428]	; (80086c0 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8008514:	f7fd f990 	bl	8005838 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_DisableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008518:	2011      	movs	r0, #17
 800851a:	f7fb f8bb 	bl	8003694 <HAL_NVIC_DisableIRQ>

	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	4868      	ldr	r0, [pc, #416]	; (80086c4 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8008522:	01c9      	lsls	r1, r1, #7
 8008524:	f7fb fb02 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008528:	0002      	movs	r2, r0
 800852a:	4250      	negs	r0, r2
 800852c:	4150      	adcs	r0, r2
		keypad.changed = 1;
 800852e:	2201      	movs	r2, #1
	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8008530:	4b45      	ldr	r3, [pc, #276]	; (8008648 <HAL_TIM_PeriodElapsedCallback+0x344>)
		keypad.changed = 1;
 8008532:	745a      	strb	r2, [r3, #17]
		x++;
 8008534:	4a64      	ldr	r2, [pc, #400]	; (80086c8 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
	    keypad.enter = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8008536:	7418      	strb	r0, [r3, #16]
		x++;
 8008538:	6813      	ldr	r3, [r2, #0]

		//sprintf(oledHeader, "%d %d", x,  keypad.enter);

		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800853a:	2007      	movs	r0, #7
		x++;
 800853c:	3301      	adds	r3, #1
 800853e:	6013      	str	r3, [r2, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8008540:	f7fb f8d2 	bl	80036e8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008544:	2007      	movs	r0, #7
 8008546:	f7fb f899 	bl	800367c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800854a:	2007      	movs	r0, #7
 800854c:	f7fb f8cc 	bl	80036e8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008550:	2011      	movs	r0, #17
 8008552:	f7fb f893 	bl	800367c <HAL_NVIC_EnableIRQ>
	}

	if(htim->Instance == TIM7){
 8008556:	4b5d      	ldr	r3, [pc, #372]	; (80086cc <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8008558:	682a      	ldr	r2, [r5, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d112      	bne.n	8008584 <HAL_TIM_PeriodElapsedCallback+0x280>
		if(btData && btDataIcon == -1){
 800855e:	495c      	ldr	r1, [pc, #368]	; (80086d0 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8008560:	4b5c      	ldr	r3, [pc, #368]	; (80086d4 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8008562:	780a      	ldrb	r2, [r1, #0]
 8008564:	2a00      	cmp	r2, #0
 8008566:	d005      	beq.n	8008574 <HAL_TIM_PeriodElapsedCallback+0x270>
 8008568:	2200      	movs	r2, #0
 800856a:	569a      	ldrsb	r2, [r3, r2]
 800856c:	3201      	adds	r2, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIM_PeriodElapsedCallback+0x270>
			btDataIcon = 0;
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
		}

		if(btDataIcon != -1 && btDataIcon < 3){
 8008574:	2200      	movs	r2, #0
 8008576:	569a      	ldrsb	r2, [r3, r2]
 8008578:	1c50      	adds	r0, r2, #1
 800857a:	d003      	beq.n	8008584 <HAL_TIM_PeriodElapsedCallback+0x280>
 800857c:	2a02      	cmp	r2, #2
 800857e:	dc5c      	bgt.n	800863a <HAL_TIM_PeriodElapsedCallback+0x336>
			btDataIcon++;
 8008580:	3201      	adds	r2, #1
 8008582:	701a      	strb	r2, [r3, #0]
			btDataIcon = -1;
			btData = 0;
		}
	}

}
 8008584:	b005      	add	sp, #20
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else if(keypad.down){
 8008588:	7b50      	ldrb	r0, [r2, #13]
 800858a:	2800      	cmp	r0, #0
 800858c:	d100      	bne.n	8008590 <HAL_TIM_PeriodElapsedCallback+0x28c>
 800858e:	e6db      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0x44>
				encoderpos++;
 8008590:	6808      	ldr	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 8008592:	4e30      	ldr	r6, [pc, #192]	; (8008654 <HAL_TIM_PeriodElapsedCallback+0x350>)
				encoderpos++;
 8008594:	3001      	adds	r0, #1
 8008596:	6008      	str	r0, [r1, #0]
				keyboardVertPosOld = keyboardVertPos;
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	6030      	str	r0, [r6, #0]
				keyboardVertPos--;
 800859c:	3801      	subs	r0, #1
 800859e:	e6d2      	b.n	8008346 <HAL_TIM_PeriodElapsedCallback+0x42>
			}else if(keypad.left){
 80085a0:	7b96      	ldrb	r6, [r2, #14]
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d100      	bne.n	80085a8 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 80085a6:	e6d7      	b.n	8008358 <HAL_TIM_PeriodElapsedCallback+0x54>
				keyboardSidePos--;
 80085a8:	681e      	ldr	r6, [r3, #0]
 80085aa:	3e01      	subs	r6, #1
 80085ac:	e6d3      	b.n	8008356 <HAL_TIM_PeriodElapsedCallback+0x52>
			}else if(encoderpos < (signed int)0){
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	db00      	blt.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80085b2:	e71c      	b.n	80083ee <HAL_TIM_PeriodElapsedCallback+0xea>
				encoderpos = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	e719      	b.n	80083ec <HAL_TIM_PeriodElapsedCallback+0xe8>
			}else if(keyboardSidePos < 0){
 80085b8:	2900      	cmp	r1, #0
 80085ba:	db00      	blt.n	80085be <HAL_TIM_PeriodElapsedCallback+0x2ba>
 80085bc:	e71f      	b.n	80083fe <HAL_TIM_PeriodElapsedCallback+0xfa>
				keyboardSidePos = 0;
 80085be:	2100      	movs	r1, #0
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	e71c      	b.n	80083fe <HAL_TIM_PeriodElapsedCallback+0xfa>
			}else if(keyboardVertPos < 0){
 80085c4:	2900      	cmp	r1, #0
 80085c6:	db00      	blt.n	80085ca <HAL_TIM_PeriodElapsedCallback+0x2c6>
 80085c8:	e721      	b.n	800840e <HAL_TIM_PeriodElapsedCallback+0x10a>
				keyboardVertPos = 0;
 80085ca:	2100      	movs	r1, #0
 80085cc:	6019      	str	r1, [r3, #0]
 80085ce:	e71e      	b.n	800840e <HAL_TIM_PeriodElapsedCallback+0x10a>
				scrollPauseDone = 0;
 80085d0:	2100      	movs	r1, #0
 80085d2:	6011      	str	r1, [r2, #0]
 80085d4:	e740      	b.n	8008458 <HAL_TIM_PeriodElapsedCallback+0x154>
		}else scrollPause++;
 80085d6:	6819      	ldr	r1, [r3, #0]
 80085d8:	3101      	adds	r1, #1
 80085da:	6019      	str	r1, [r3, #0]
 80085dc:	e73c      	b.n	8008458 <HAL_TIM_PeriodElapsedCallback+0x154>
			}else scrollPauseDone = 1;
 80085de:	2001      	movs	r0, #1
 80085e0:	e743      	b.n	800846a <HAL_TIM_PeriodElapsedCallback+0x166>
		}else loadingStat = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e74a      	b.n	800847c <HAL_TIM_PeriodElapsedCallback+0x178>
		}else battAnim = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e74f      	b.n	800848a <HAL_TIM_PeriodElapsedCallback+0x186>
			}else if(keypad.power && turnOffCounter < TURN_OFF_DELAY*2){
 80085ea:	2b05      	cmp	r3, #5
 80085ec:	dc00      	bgt.n	80085f0 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80085ee:	e774      	b.n	80084da <HAL_TIM_PeriodElapsedCallback+0x1d6>
			}else if(turnOffCounter >= TURN_OFF_DELAY*2 && keypad.power){
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	dc00      	bgt.n	80085f8 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80085f6:	e772      	b.n	80084de <HAL_TIM_PeriodElapsedCallback+0x1da>
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	d00c      	beq.n	8008616 <HAL_TIM_PeriodElapsedCallback+0x312>
				oled_setDisplayedSplash(oled_ShutdownSplash, "");
 80085fc:	4936      	ldr	r1, [pc, #216]	; (80086d8 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80085fe:	4837      	ldr	r0, [pc, #220]	; (80086dc <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8008600:	f001 fbea 	bl	8009dd8 <oled_setDisplayedSplash>
 8008604:	e76b      	b.n	80084de <HAL_TIM_PeriodElapsedCallback+0x1da>
			}else if(!keypad.power && turnOffCounter > 0 && turnOffCounter < TURN_OFF_DELAY*2){
 8008606:	3b01      	subs	r3, #1
 8008608:	2b04      	cmp	r3, #4
 800860a:	d8f1      	bhi.n	80085f0 <HAL_TIM_PeriodElapsedCallback+0x2ec>
				turnOffCounter = 0;
 800860c:	6022      	str	r2, [r4, #0]
				oledType = OLED_MENU;
 800860e:	2202      	movs	r2, #2
 8008610:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	e763      	b.n	80084de <HAL_TIM_PeriodElapsedCallback+0x1da>
				workerAssert(&workerTurnOff);
 8008616:	4833      	ldr	r0, [pc, #204]	; (80086e4 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8008618:	f000 f929 	bl	800886e <workerAssert>
 800861c:	e75f      	b.n	80084de <HAL_TIM_PeriodElapsedCallback+0x1da>
			}else if(battVoltage < 2900 && battVoltage > 2620){
 800861e:	218b      	movs	r1, #139	; 0x8b
 8008620:	4a31      	ldr	r2, [pc, #196]	; (80086e8 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8008622:	0049      	lsls	r1, r1, #1
 8008624:	189a      	adds	r2, r3, r2
 8008626:	428a      	cmp	r2, r1
 8008628:	d801      	bhi.n	800862e <HAL_TIM_PeriodElapsedCallback+0x32a>
				battStatus = 2;
 800862a:	2202      	movs	r2, #2
 800862c:	e76b      	b.n	8008506 <HAL_TIM_PeriodElapsedCallback+0x202>
			}else if(battVoltage < 2560){
 800862e:	4a2f      	ldr	r2, [pc, #188]	; (80086ec <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	dd00      	ble.n	8008636 <HAL_TIM_PeriodElapsedCallback+0x332>
 8008634:	e769      	b.n	800850a <HAL_TIM_PeriodElapsedCallback+0x206>
				battStatus = 0;
 8008636:	2200      	movs	r2, #0
 8008638:	e765      	b.n	8008506 <HAL_TIM_PeriodElapsedCallback+0x202>
			btDataIcon = -1;
 800863a:	22ff      	movs	r2, #255	; 0xff
 800863c:	701a      	strb	r2, [r3, #0]
			btData = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	700b      	strb	r3, [r1, #0]
}
 8008642:	e79f      	b.n	8008584 <HAL_TIM_PeriodElapsedCallback+0x280>
 8008644:	40012c00 	.word	0x40012c00
 8008648:	20002ca8 	.word	0x20002ca8
 800864c:	20003b00 	.word	0x20003b00
 8008650:	20003224 	.word	0x20003224
 8008654:	200028f4 	.word	0x200028f4
 8008658:	20002ca4 	.word	0x20002ca4
 800865c:	20002cba 	.word	0x20002cba
 8008660:	20003b08 	.word	0x20003b08
 8008664:	20002f88 	.word	0x20002f88
 8008668:	20000c60 	.word	0x20000c60
 800866c:	200028b4 	.word	0x200028b4
 8008670:	40000400 	.word	0x40000400
 8008674:	20002c98 	.word	0x20002c98
 8008678:	20003024 	.word	0x20003024
 800867c:	20000ab4 	.word	0x20000ab4
 8008680:	20003b0c 	.word	0x20003b0c
 8008684:	20003b10 	.word	0x20003b10
 8008688:	20000abc 	.word	0x20000abc
 800868c:	20002fb4 	.word	0x20002fb4
 8008690:	20002fc0 	.word	0x20002fc0
 8008694:	20002c95 	.word	0x20002c95
 8008698:	20002cfe 	.word	0x20002cfe
 800869c:	20000608 	.word	0x20000608
 80086a0:	20000604 	.word	0x20000604
 80086a4:	0800e03e 	.word	0x0800e03e
 80086a8:	080091ed 	.word	0x080091ed
 80086ac:	20000a44 	.word	0x20000a44
 80086b0:	20003e40 	.word	0x20003e40
 80086b4:	20000aac 	.word	0x20000aac
 80086b8:	200028f8 	.word	0x200028f8
 80086bc:	40001000 	.word	0x40001000
 80086c0:	200047cc 	.word	0x200047cc
 80086c4:	50000400 	.word	0x50000400
 80086c8:	2000060c 	.word	0x2000060c
 80086cc:	40001400 	.word	0x40001400
 80086d0:	20003228 	.word	0x20003228
 80086d4:	20002cfd 	.word	0x20002cfd
 80086d8:	0800def2 	.word	0x0800def2
 80086dc:	0800a6b5 	.word	0x0800a6b5
 80086e0:	20000c40 	.word	0x20000c40
 80086e4:	200028bc 	.word	0x200028bc
 80086e8:	fffff5c3 	.word	0xfffff5c3
 80086ec:	000009ff 	.word	0x000009ff

080086f0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_14 && HAL_TIM_Base_GetState(&htim6) != HAL_TIM_STATE_BUSY){
 80086f0:	2380      	movs	r3, #128	; 0x80
{
 80086f2:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_14 && HAL_TIM_Base_GetState(&htim6) != HAL_TIM_STATE_BUSY){
 80086f4:	01db      	lsls	r3, r3, #7
 80086f6:	4298      	cmp	r0, r3
 80086f8:	d10e      	bne.n	8008718 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80086fa:	4c08      	ldr	r4, [pc, #32]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80086fc:	0020      	movs	r0, r4
 80086fe:	f7fd f969 	bl	80059d4 <HAL_TIM_Base_GetState>
 8008702:	2802      	cmp	r0, #2
 8008704:	d008      	beq.n	8008718 <HAL_GPIO_EXTI_Falling_Callback+0x28>
		HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008706:	2011      	movs	r0, #17
 8008708:	f7fa ffb8 	bl	800367c <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Start_IT(&htim6);
 800870c:	0020      	movs	r0, r4
 800870e:	f7fd f87f 	bl	8005810 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8008712:	2007      	movs	r0, #7
 8008714:	f7fa ffbe 	bl	8003694 <HAL_NVIC_DisableIRQ>
	}
}
 8008718:	bd10      	pop	{r4, pc}
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	200047cc 	.word	0x200047cc

08008720 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(huart->Instance == USART2){
 8008722:	6802      	ldr	r2, [r0, #0]
 8008724:	4b41      	ldr	r3, [pc, #260]	; (800882c <HAL_UART_RxCpltCallback+0x10c>)
 8008726:	429a      	cmp	r2, r3
 8008728:	d122      	bne.n	8008770 <HAL_UART_RxCpltCallback+0x50>
		//Pokud dostal status message od modulu
				if((btFifoByte == '%' || btStatusMsg) && !btCmdMode){
 800872a:	4d41      	ldr	r5, [pc, #260]	; (8008830 <HAL_UART_RxCpltCallback+0x110>)
 800872c:	7828      	ldrb	r0, [r5, #0]
 800872e:	2825      	cmp	r0, #37	; 0x25
 8008730:	d003      	beq.n	800873a <HAL_UART_RxCpltCallback+0x1a>
 8008732:	4b40      	ldr	r3, [pc, #256]	; (8008834 <HAL_UART_RxCpltCallback+0x114>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01b      	beq.n	8008772 <HAL_UART_RxCpltCallback+0x52>
 800873a:	4b3f      	ldr	r3, [pc, #252]	; (8008838 <HAL_UART_RxCpltCallback+0x118>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d117      	bne.n	8008772 <HAL_UART_RxCpltCallback+0x52>
					if(btFifoByte == '%') btStatusMsg = ~btStatusMsg;
 8008742:	2825      	cmp	r0, #37	; 0x25
 8008744:	d108      	bne.n	8008758 <HAL_UART_RxCpltCallback+0x38>
 8008746:	4a3b      	ldr	r2, [pc, #236]	; (8008834 <HAL_UART_RxCpltCallback+0x114>)
 8008748:	7813      	ldrb	r3, [r2, #0]
 800874a:	43db      	mvns	r3, r3
 800874c:	b2db      	uxtb	r3, r3
 800874e:	7013      	strb	r3, [r2, #0]
					if(btFifoByte == '%' && !btStatusMsg) bluetoothDecodeMsg();
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_UART_RxCpltCallback+0x38>
 8008754:	f7fe fca0 	bl	8007098 <bluetoothDecodeMsg>
					btMsgFifo[btMsgFifoIndex++] = btFifoByte;
 8008758:	4a38      	ldr	r2, [pc, #224]	; (800883c <HAL_UART_RxCpltCallback+0x11c>)
 800875a:	8813      	ldrh	r3, [r2, #0]
 800875c:	1c59      	adds	r1, r3, #1
 800875e:	8011      	strh	r1, [r2, #0]
 8008760:	7829      	ldrb	r1, [r5, #0]
 8008762:	4a37      	ldr	r2, [pc, #220]	; (8008840 <HAL_UART_RxCpltCallback+0x120>)
 8008764:	54d1      	strb	r1, [r2, r3]
						btComMessageSizeFlag = 0;
					}

				}

				HAL_UART_Receive_IT(&huart2, &btFifoByte, 1);
 8008766:	2201      	movs	r2, #1
 8008768:	0029      	movs	r1, r5
 800876a:	4836      	ldr	r0, [pc, #216]	; (8008844 <HAL_UART_RxCpltCallback+0x124>)
 800876c:	f7fd fbd6 	bl	8005f1c <HAL_UART_Receive_IT>
	}
}
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}else if(!btStatusMsg){
 8008772:	4b30      	ldr	r3, [pc, #192]	; (8008834 <HAL_UART_RxCpltCallback+0x114>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f5      	bne.n	8008766 <HAL_UART_RxCpltCallback+0x46>
					if(!btCmdMode && btFifoByte == 0 && btNullCounter < 4 && btComMessageSizeFlag < 2){
 800877a:	4b2f      	ldr	r3, [pc, #188]	; (8008838 <HAL_UART_RxCpltCallback+0x118>)
 800877c:	4c32      	ldr	r4, [pc, #200]	; (8008848 <HAL_UART_RxCpltCallback+0x128>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4a32      	ldr	r2, [pc, #200]	; (800884c <HAL_UART_RxCpltCallback+0x12c>)
 8008782:	4e33      	ldr	r6, [pc, #204]	; (8008850 <HAL_UART_RxCpltCallback+0x130>)
 8008784:	2b00      	cmp	r3, #0
 8008786:	d12e      	bne.n	80087e6 <HAL_UART_RxCpltCallback+0xc6>
 8008788:	2800      	cmp	r0, #0
 800878a:	d12c      	bne.n	80087e6 <HAL_UART_RxCpltCallback+0xc6>
 800878c:	7823      	ldrb	r3, [r4, #0]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d829      	bhi.n	80087e6 <HAL_UART_RxCpltCallback+0xc6>
 8008792:	4f30      	ldr	r7, [pc, #192]	; (8008854 <HAL_UART_RxCpltCallback+0x134>)
 8008794:	783f      	ldrb	r7, [r7, #0]
 8008796:	2f01      	cmp	r7, #1
 8008798:	d825      	bhi.n	80087e6 <HAL_UART_RxCpltCallback+0xc6>
						btNullCounter++;
 800879a:	3301      	adds	r3, #1
 800879c:	7023      	strb	r3, [r4, #0]
					btFifo[btFifoIndex++] = btFifoByte;
 800879e:	8837      	ldrh	r7, [r6, #0]
 80087a0:	492d      	ldr	r1, [pc, #180]	; (8008858 <HAL_UART_RxCpltCallback+0x138>)
 80087a2:	1c7b      	adds	r3, r7, #1
					if(btMessageLen > 0 && (btFifoIndex) >= btMessageLen+btComMessageStartIndex+6 && btNullCounter == 4 && btComMessageSizeFlag == 2){
 80087a4:	8812      	ldrh	r2, [r2, #0]
					btFifo[btFifoIndex++] = btFifoByte;
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	8033      	strh	r3, [r6, #0]
 80087aa:	55c8      	strb	r0, [r1, r7]
					if(btMessageLen > 0 && (btFifoIndex) >= btMessageLen+btComMessageStartIndex+6 && btNullCounter == 4 && btComMessageSizeFlag == 2){
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d0da      	beq.n	8008766 <HAL_UART_RxCpltCallback+0x46>
 80087b0:	482a      	ldr	r0, [pc, #168]	; (800885c <HAL_UART_RxCpltCallback+0x13c>)
 80087b2:	8807      	ldrh	r7, [r0, #0]
 80087b4:	18b8      	adds	r0, r7, r2
 80087b6:	3005      	adds	r0, #5
 80087b8:	4298      	cmp	r0, r3
 80087ba:	dad4      	bge.n	8008766 <HAL_UART_RxCpltCallback+0x46>
 80087bc:	7823      	ldrb	r3, [r4, #0]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d1d1      	bne.n	8008766 <HAL_UART_RxCpltCallback+0x46>
 80087c2:	4e24      	ldr	r6, [pc, #144]	; (8008854 <HAL_UART_RxCpltCallback+0x134>)
 80087c4:	7833      	ldrb	r3, [r6, #0]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d1cd      	bne.n	8008766 <HAL_UART_RxCpltCallback+0x46>
						memcpy(uartMsgDecodeBuff, btFifo+btComMessageStartIndex, btMessageLen+6);
 80087ca:	3206      	adds	r2, #6
 80087cc:	19c9      	adds	r1, r1, r7
 80087ce:	4824      	ldr	r0, [pc, #144]	; (8008860 <HAL_UART_RxCpltCallback+0x140>)
 80087d0:	f003 f88a 	bl	800b8e8 <memcpy>
						btMsgReceivedFlag = 1;
 80087d4:	2201      	movs	r2, #1
 80087d6:	4b23      	ldr	r3, [pc, #140]	; (8008864 <HAL_UART_RxCpltCallback+0x144>)
 80087d8:	701a      	strb	r2, [r3, #0]
						bluetoothFifoFlush();
 80087da:	f7fe fc41 	bl	8007060 <bluetoothFifoFlush>
						btNullCounter = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	7023      	strb	r3, [r4, #0]
						btComMessageSizeFlag = 0;
 80087e2:	7033      	strb	r3, [r6, #0]
 80087e4:	e7bf      	b.n	8008766 <HAL_UART_RxCpltCallback+0x46>
					}else if(btNullCounter == 4 && btComMessageSizeFlag < 2){
 80087e6:	7823      	ldrb	r3, [r4, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d1d8      	bne.n	800879e <HAL_UART_RxCpltCallback+0x7e>
 80087ec:	4b19      	ldr	r3, [pc, #100]	; (8008854 <HAL_UART_RxCpltCallback+0x134>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d80a      	bhi.n	800880a <HAL_UART_RxCpltCallback+0xea>
						btMsgReceivedFlag = 0;
 80087f4:	2700      	movs	r7, #0
 80087f6:	46bc      	mov	ip, r7
 80087f8:	4661      	mov	r1, ip
 80087fa:	4f1a      	ldr	r7, [pc, #104]	; (8008864 <HAL_UART_RxCpltCallback+0x144>)
						btComMessageSizeFlag++;
 80087fc:	3301      	adds	r3, #1
						btMsgReceivedFlag = 0;
 80087fe:	7039      	strb	r1, [r7, #0]
						btComMessageSizeFlag++;
 8008800:	4914      	ldr	r1, [pc, #80]	; (8008854 <HAL_UART_RxCpltCallback+0x134>)
 8008802:	700b      	strb	r3, [r1, #0]
						btMessageLen = 0;
 8008804:	4663      	mov	r3, ip
						btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 8008806:	8013      	strh	r3, [r2, #0]
 8008808:	e7c9      	b.n	800879e <HAL_UART_RxCpltCallback+0x7e>
					}else if(btNullCounter == 4 && btComMessageSizeFlag == 2 && btMessageLen == 0){
 800880a:	2b02      	cmp	r3, #2
 800880c:	d1c7      	bne.n	800879e <HAL_UART_RxCpltCallback+0x7e>
 800880e:	8813      	ldrh	r3, [r2, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1c4      	bne.n	800879e <HAL_UART_RxCpltCallback+0x7e>
						btComMessageStartIndex = btFifoIndex-6;
 8008814:	8833      	ldrh	r3, [r6, #0]
 8008816:	4f11      	ldr	r7, [pc, #68]	; (800885c <HAL_UART_RxCpltCallback+0x13c>)
 8008818:	3b06      	subs	r3, #6
						btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 800881a:	490f      	ldr	r1, [pc, #60]	; (8008858 <HAL_UART_RxCpltCallback+0x138>)
						btComMessageStartIndex = btFifoIndex-6;
 800881c:	b29b      	uxth	r3, r3
 800881e:	803b      	strh	r3, [r7, #0]
						btMessageLen = ((btFifo[btComMessageStartIndex+4] << 8) & 0xff00) | (btFifo[btComMessageStartIndex+5] & 0xff);
 8008820:	18cb      	adds	r3, r1, r3
 8008822:	791f      	ldrb	r7, [r3, #4]
 8008824:	795b      	ldrb	r3, [r3, #5]
 8008826:	023f      	lsls	r7, r7, #8
 8008828:	433b      	orrs	r3, r7
 800882a:	e7ec      	b.n	8008806 <HAL_UART_RxCpltCallback+0xe6>
 800882c:	40004400 	.word	0x40004400
 8008830:	20000af8 	.word	0x20000af8
 8008834:	20002c95 	.word	0x20002c95
 8008838:	20003026 	.word	0x20003026
 800883c:	20003b04 	.word	0x20003b04
 8008840:	20003027 	.word	0x20003027
 8008844:	200048cc 	.word	0x200048cc
 8008848:	20002f80 	.word	0x20002f80
 800884c:	20000ac0 	.word	0x20000ac0
 8008850:	20002fc4 	.word	0x20002fc4
 8008854:	200028b8 	.word	0x200028b8
 8008858:	2000265d 	.word	0x2000265d
 800885c:	20000ac2 	.word	0x20000ac2
 8008860:	200041bc 	.word	0x200041bc
 8008864:	20000c54 	.word	0x20000c54

08008868 <HAL_UART_TxCpltCallback>:
 8008868:	4770      	bx	lr

0800886a <HAL_ADC_ConvCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
}
 800886a:	4770      	bx	lr

0800886c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800886c:	4770      	bx	lr

0800886e <workerAssert>:
#include "oled.h"


//Funkce pro jednodussi ovladani workeru - aktivace
void workerAssert(struct worker * wrk){
	wrk->assert = 1;
 800886e:	2301      	movs	r3, #1
 8008870:	7003      	strb	r3, [r0, #0]
	wrk->status = WORKER_WAITING;
 8008872:	2300      	movs	r3, #0
 8008874:	7043      	strb	r3, [r0, #1]
}
 8008876:	4770      	bx	lr

08008878 <workerDesert>:

//Funkce pro jednodussi ovladani workeru - deaktivace
void workerDesert(struct worker * wrk){
	wrk->assert = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	7003      	strb	r3, [r0, #0]
	wrk->status = WORKER_WAITING;
 800887c:	7043      	strb	r3, [r0, #1]
}
 800887e:	4770      	bx	lr

08008880 <strToSongMenu>:

//Funkce pro vytvoreni menu pisni ze stringu vraceneho z PC
void strToSongMenu(char * str, uint8_t * size){
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//Spocita pocet pisni
	uint8_t items = countOccurances(str, "\n");
 8008882:	4f1b      	ldr	r7, [pc, #108]	; (80088f0 <strToSongMenu+0x70>)
void strToSongMenu(char * str, uint8_t * size){
 8008884:	000d      	movs	r5, r1
	uint8_t items = countOccurances(str, "\n");
 8008886:	0039      	movs	r1, r7
void strToSongMenu(char * str, uint8_t * size){
 8008888:	0006      	movs	r6, r0
	uint8_t items = countOccurances(str, "\n");
 800888a:	f7fe fe93 	bl	80075b4 <countOccurances>
 800888e:	7028      	strb	r0, [r5, #0]
	*size = items;
	splitString(str, "\n", songs);
 8008890:	4d18      	ldr	r5, [pc, #96]	; (80088f4 <strToSongMenu+0x74>)
	uint8_t items = countOccurances(str, "\n");
 8008892:	0004      	movs	r4, r0
	splitString(str, "\n", songs);
 8008894:	002a      	movs	r2, r5
 8008896:	0039      	movs	r1, r7
 8008898:	0030      	movs	r0, r6
 800889a:	f7fe fea7 	bl	80075ec <splitString>

	//Projde je a pro kazdou vytvori zaznam v menu
	for(int i = 0; i <= items; i++){
 800889e:	2200      	movs	r2, #0
 80088a0:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <strToSongMenu+0x78>)
			songMenu[i].name = songs[i];
			songMenu[i].font = &Font_11x18;
			songMenu[i].selected = 0;
 80088a2:	0011      	movs	r1, r2
 80088a4:	0018      	movs	r0, r3
 80088a6:	4e15      	ldr	r6, [pc, #84]	; (80088fc <strToSongMenu+0x7c>)
	for(int i = 0; i <= items; i++){
 80088a8:	b2e4      	uxtb	r4, r4
 80088aa:	42a2      	cmp	r2, r4
 80088ac:	dd10      	ble.n	80088d0 <strToSongMenu+0x50>

	//Vytvori tlacitko zpet
	songMenu[items].font = &Font_11x18;
	songMenu[items].name = "Zpet";
	songMenu[items].selected = 0;
	songMenu[items].hasSpecialSelector = 1;
 80088ae:	2101      	movs	r1, #1
	songMenu[items].name = "Zpet";
 80088b0:	4a13      	ldr	r2, [pc, #76]	; (8008900 <strToSongMenu+0x80>)
	songMenu[items].font = &Font_11x18;
 80088b2:	0164      	lsls	r4, r4, #5
	songMenu[items].name = "Zpet";
 80088b4:	5102      	str	r2, [r0, r4]
	songMenu[items].selected = 0;
 80088b6:	2200      	movs	r2, #0
	songMenu[items].font = &Font_11x18;
 80088b8:	1903      	adds	r3, r0, r4
	songMenu[items].hasSpecialSelector = 1;
 80088ba:	60d9      	str	r1, [r3, #12]
	songMenu[items].specharNotSelected = 36;
 80088bc:	3123      	adds	r1, #35	; 0x23
 80088be:	6119      	str	r1, [r3, #16]
	songMenu[items].specharSelected = 37;
 80088c0:	3101      	adds	r1, #1
 80088c2:	6159      	str	r1, [r3, #20]
	songMenu[items].submenuLevel = 3;
 80088c4:	3922      	subs	r1, #34	; 0x22
	songMenu[items].font = &Font_11x18;
 80088c6:	609e      	str	r6, [r3, #8]
	songMenu[items].selected = 0;
 80088c8:	605a      	str	r2, [r3, #4]
	songMenu[items].submenuLevel = 3;
 80088ca:	6199      	str	r1, [r3, #24]
	songMenu[items].parentItem = 0;
 80088cc:	61da      	str	r2, [r3, #28]

}
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			songMenu[i].name = songs[i];
 80088d0:	0097      	lsls	r7, r2, #2
 80088d2:	59ef      	ldr	r7, [r5, r7]
			songMenu[i].font = &Font_11x18;
 80088d4:	609e      	str	r6, [r3, #8]
			songMenu[i].name = songs[i];
 80088d6:	601f      	str	r7, [r3, #0]
			songMenu[i].submenuLevel = 3;
 80088d8:	2703      	movs	r7, #3
 80088da:	619f      	str	r7, [r3, #24]
			songMenu[i].parentItem = &bluetoothmenu[0].name;
 80088dc:	4f09      	ldr	r7, [pc, #36]	; (8008904 <strToSongMenu+0x84>)
			songMenu[i].selected = 0;
 80088de:	6059      	str	r1, [r3, #4]
			songMenu[i].hasSpecialSelector = 0;
 80088e0:	60d9      	str	r1, [r3, #12]
			songMenu[i].specharNotSelected = 0;
 80088e2:	6119      	str	r1, [r3, #16]
			songMenu[i].specharSelected = 0;
 80088e4:	6159      	str	r1, [r3, #20]
			songMenu[i].parentItem = &bluetoothmenu[0].name;
 80088e6:	61df      	str	r7, [r3, #28]
	for(int i = 0; i <= items; i++){
 80088e8:	3201      	adds	r2, #1
 80088ea:	3320      	adds	r3, #32
 80088ec:	e7dd      	b.n	80088aa <strToSongMenu+0x2a>
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	0800def1 	.word	0x0800def1
 80088f4:	20003970 	.word	0x20003970
 80088f8:	20000c68 	.word	0x20000c68
 80088fc:	200003e8 	.word	0x200003e8
 8008900:	0800dfb5 	.word	0x0800dfb5
 8008904:	20000008 	.word	0x20000008

08008908 <midiController_init>:



void midiController_init(){
	//Inicializace promennych pro chod zarizeni
	alivePC = 0;
 8008908:	2300      	movs	r3, #0
	aliveMain = 0;
	alivePCCounter = 0;
	aliveMainCounter = 0;
	btDataIcon = -1;
 800890a:	21ff      	movs	r1, #255	; 0xff
	alivePC = 0;
 800890c:	4a0e      	ldr	r2, [pc, #56]	; (8008948 <midiController_init+0x40>)
 800890e:	7013      	strb	r3, [r2, #0]
	aliveMain = 0;
 8008910:	4a0e      	ldr	r2, [pc, #56]	; (800894c <midiController_init+0x44>)
 8008912:	7013      	strb	r3, [r2, #0]
	alivePCCounter = 0;
 8008914:	4a0e      	ldr	r2, [pc, #56]	; (8008950 <midiController_init+0x48>)
 8008916:	7013      	strb	r3, [r2, #0]
	aliveMainCounter = 0;
 8008918:	4a0e      	ldr	r2, [pc, #56]	; (8008954 <midiController_init+0x4c>)
 800891a:	7013      	strb	r3, [r2, #0]
	btDataIcon = -1;
 800891c:	4a0e      	ldr	r2, [pc, #56]	; (8008958 <midiController_init+0x50>)
 800891e:	7011      	strb	r1, [r2, #0]
	dispSong[0] = '-';
 8008920:	222d      	movs	r2, #45	; 0x2d
 8008922:	490e      	ldr	r1, [pc, #56]	; (800895c <midiController_init+0x54>)
 8008924:	800a      	strh	r2, [r1, #0]
	dispSong[1] = '-';
 8008926:	804a      	strh	r2, [r1, #2]
	dispSong[2] = '-';
 8008928:	808a      	strh	r2, [r1, #4]
	dispSong[3] = '-';
 800892a:	80ca      	strh	r2, [r1, #6]
	dispVerse[0] = '-';
 800892c:	490c      	ldr	r1, [pc, #48]	; (8008960 <midiController_init+0x58>)
 800892e:	700a      	strb	r2, [r1, #0]
	dispVerse[1] = '-';
 8008930:	704a      	strb	r2, [r1, #1]
	dispLetter = '-';
 8008932:	490c      	ldr	r1, [pc, #48]	; (8008964 <midiController_init+0x5c>)
 8008934:	700a      	strb	r2, [r1, #0]
	dispLED = DISP_LED_CLEAR;
 8008936:	21e0      	movs	r1, #224	; 0xe0
 8008938:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <midiController_init+0x60>)
 800893a:	7011      	strb	r1, [r2, #0]
	dispLEDOld = 0;
 800893c:	4a0b      	ldr	r2, [pc, #44]	; (800896c <midiController_init+0x64>)
 800893e:	7013      	strb	r3, [r2, #0]
	wrk->assert = 0;
 8008940:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <midiController_init+0x68>)
 8008942:	7013      	strb	r3, [r2, #0]
	wrk->status = WORKER_WAITING;
 8008944:	7053      	strb	r3, [r2, #1]
	workerDesert(&workerBtRemoveController);
}
 8008946:	4770      	bx	lr
 8008948:	2000265c 	.word	0x2000265c
 800894c:	20003dd8 	.word	0x20003dd8
 8008950:	20002fbc 	.word	0x20002fbc
 8008954:	20003d9c 	.word	0x20003d9c
 8008958:	20002cfd 	.word	0x20002cfd
 800895c:	20003d9e 	.word	0x20003d9e
 8008960:	20000ac4 	.word	0x20000ac4
 8008964:	20002cfc 	.word	0x20002cfc
 8008968:	20003da7 	.word	0x20003da7
 800896c:	20000c64 	.word	0x20000c64
 8008970:	20002c9c 	.word	0x20002c9c

08008974 <midiController_current_On>:
void midiController_display_getState(){

}

//Rutina pro zapnuti proudoveho zdroje
void midiController_current_On(){
 8008974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char msg[3];
	msg[0] = INTERNAL_CURR;
	msg[1] = INTERNAL_CURR_SET_STATUS;
 8008976:	2001      	movs	r0, #1
	msg[0] = INTERNAL_CURR;
 8008978:	2203      	movs	r2, #3
 800897a:	ab03      	add	r3, sp, #12
 800897c:	701a      	strb	r2, [r3, #0]
	msg[1] = INTERNAL_CURR_SET_STATUS;
 800897e:	7058      	strb	r0, [r3, #1]
	msg[2] = 1;
 8008980:	7098      	strb	r0, [r3, #2]
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 3);
 8008982:	2102      	movs	r1, #2
 8008984:	9201      	str	r2, [sp, #4]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	0003      	movs	r3, r0
 800898c:	f000 fa0a 	bl	8008da4 <sendMsg>
}
 8008990:	b005      	add	sp, #20
 8008992:	bd00      	pop	{pc}

08008994 <midiController_current_Off>:

//Rutina pro vypnuti proudoveho zdroje
void midiController_current_Off(){
 8008994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char msg[3];
	msg[0] = INTERNAL_CURR;
	msg[1] = INTERNAL_CURR_SET_STATUS;
 8008996:	2001      	movs	r0, #1
	msg[0] = INTERNAL_CURR;
 8008998:	2103      	movs	r1, #3
	msg[2] = 0;
 800899a:	2200      	movs	r2, #0
	msg[0] = INTERNAL_CURR;
 800899c:	ab03      	add	r3, sp, #12
 800899e:	7019      	strb	r1, [r3, #0]
	msg[1] = INTERNAL_CURR_SET_STATUS;
 80089a0:	7058      	strb	r0, [r3, #1]
	msg[2] = 0;
 80089a2:	709a      	strb	r2, [r3, #2]
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, INTERNAL, msg, 3);
 80089a4:	9101      	str	r1, [sp, #4]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	3901      	subs	r1, #1
 80089aa:	0003      	movs	r3, r0
 80089ac:	f000 f9fa 	bl	8008da4 <sendMsg>
}
 80089b0:	b005      	add	sp, #20
 80089b2:	bd00      	pop	{pc}

080089b4 <midiController_record>:


//Rutina pro spusteni nahravani
void midiController_record(uint8_t initiator, char * songname){
 80089b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b6:	0004      	movs	r4, r0
 80089b8:	b09d      	sub	sp, #116	; 0x74
 80089ba:	000f      	movs	r7, r1
	//Spusteno z PC
	if(initiator == ADDRESS_PC){
 80089bc:	2800      	cmp	r0, #0
 80089be:	d10f      	bne.n	80089e0 <midiController_record+0x2c>
		memset(selectedSong, 0, 40);
 80089c0:	4d16      	ldr	r5, [pc, #88]	; (8008a1c <midiController_record+0x68>)
 80089c2:	0001      	movs	r1, r0
 80089c4:	2228      	movs	r2, #40	; 0x28
 80089c6:	0028      	movs	r0, r5
 80089c8:	f002 ff97 	bl	800b8fa <memset>
		sprintf(selectedSong, "%s", songname);
 80089cc:	0039      	movs	r1, r7
 80089ce:	0028      	movs	r0, r5
 80089d0:	f003 f8b0 	bl	800bb34 <strcpy>
		//Jen se zobrazi obrazovka nahravani
		oled_setDisplayedSplash(oled_recordingSplash, songname);
 80089d4:	0039      	movs	r1, r7
 80089d6:	4812      	ldr	r0, [pc, #72]	; (8008a20 <midiController_record+0x6c>)
 80089d8:	f001 f9fe 	bl	8009dd8 <oled_setDisplayedSplash>
	//Spusteno ze zakladnove stanice
		//Posle se zprava do PC aby zacalo nahravat
	}


}
 80089dc:	b01d      	add	sp, #116	; 0x74
 80089de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(initiator == ADDRESS_CONTROLLER){
 80089e0:	2801      	cmp	r0, #1
 80089e2:	d1fb      	bne.n	80089dc <midiController_record+0x28>
		msg[1] = INTERNAL_COM_REC;
 80089e4:	2302      	movs	r3, #2
		msg[0] = INTERNAL_COM;
 80089e6:	2500      	movs	r5, #0
 80089e8:	ae03      	add	r6, sp, #12
		memcpy(&msg[2], songname, strlen(songname));
 80089ea:	0008      	movs	r0, r1
		msg[1] = INTERNAL_COM_REC;
 80089ec:	7073      	strb	r3, [r6, #1]
		msg[0] = INTERNAL_COM;
 80089ee:	7035      	strb	r5, [r6, #0]
		memcpy(&msg[2], songname, strlen(songname));
 80089f0:	f7f7 fb92 	bl	8000118 <strlen>
 80089f4:	0002      	movs	r2, r0
 80089f6:	200e      	movs	r0, #14
 80089f8:	0039      	movs	r1, r7
 80089fa:	4468      	add	r0, sp
 80089fc:	f002 ff74 	bl	800b8e8 <memcpy>
		sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
 8008a00:	0038      	movs	r0, r7
 8008a02:	f7f7 fb89 	bl	8000118 <strlen>
 8008a06:	3002      	adds	r0, #2
 8008a08:	b280      	uxth	r0, r0
 8008a0a:	9001      	str	r0, [sp, #4]
 8008a0c:	9600      	str	r6, [sp, #0]
 8008a0e:	0023      	movs	r3, r4
 8008a10:	002a      	movs	r2, r5
 8008a12:	0029      	movs	r1, r5
 8008a14:	0020      	movs	r0, r4
 8008a16:	f000 f9c5 	bl	8008da4 <sendMsg>
}
 8008a1a:	e7df      	b.n	80089dc <midiController_record+0x28>
 8008a1c:	20002f8c 	.word	0x20002f8c
 8008a20:	0800ad11 	.word	0x0800ad11

08008a24 <midiController_play>:

void midiController_play(uint8_t initiator, char * songname){
 8008a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a26:	0004      	movs	r4, r0
 8008a28:	b09d      	sub	sp, #116	; 0x74
 8008a2a:	000f      	movs	r7, r1
	//Spusteno z PC
	if(initiator == ADDRESS_PC){
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d10f      	bne.n	8008a50 <midiController_play+0x2c>
		memset(selectedSong, 0, 40);
 8008a30:	4d16      	ldr	r5, [pc, #88]	; (8008a8c <midiController_play+0x68>)
 8008a32:	0001      	movs	r1, r0
 8008a34:	2228      	movs	r2, #40	; 0x28
 8008a36:	0028      	movs	r0, r5
 8008a38:	f002 ff5f 	bl	800b8fa <memset>
		sprintf(selectedSong, "%s", songname);
 8008a3c:	0039      	movs	r1, r7
 8008a3e:	0028      	movs	r0, r5
 8008a40:	f003 f878 	bl	800bb34 <strcpy>
		//Jen se zobrazi obrazovka prehravani
		oled_setDisplayedSplash(oled_playingSplash, songname);
 8008a44:	0039      	movs	r1, r7
 8008a46:	4812      	ldr	r0, [pc, #72]	; (8008a90 <midiController_play+0x6c>)
 8008a48:	f001 f9c6 	bl	8009dd8 <oled_setDisplayedSplash>
	//Spusteno ze zakladnove stanice
		//Posle se zprava do PC aby zacalo prehravat
	}


}
 8008a4c:	b01d      	add	sp, #116	; 0x74
 8008a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(initiator == ADDRESS_CONTROLLER){
 8008a50:	2801      	cmp	r0, #1
 8008a52:	d1fb      	bne.n	8008a4c <midiController_play+0x28>
		msg[0] = INTERNAL_COM;
 8008a54:	2500      	movs	r5, #0
 8008a56:	ae03      	add	r6, sp, #12
		msg[1] = INTERNAL_COM_PLAY;
 8008a58:	7070      	strb	r0, [r6, #1]
		memcpy(&msg[2], songname, strlen(songname));
 8008a5a:	0008      	movs	r0, r1
		msg[0] = INTERNAL_COM;
 8008a5c:	7035      	strb	r5, [r6, #0]
		memcpy(&msg[2], songname, strlen(songname));
 8008a5e:	f7f7 fb5b 	bl	8000118 <strlen>
 8008a62:	0002      	movs	r2, r0
 8008a64:	200e      	movs	r0, #14
 8008a66:	0039      	movs	r1, r7
 8008a68:	4468      	add	r0, sp
 8008a6a:	f002 ff3d 	bl	800b8e8 <memcpy>
		sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, strlen(songname)+2);
 8008a6e:	0038      	movs	r0, r7
 8008a70:	f7f7 fb52 	bl	8000118 <strlen>
 8008a74:	3002      	adds	r0, #2
 8008a76:	b280      	uxth	r0, r0
 8008a78:	9001      	str	r0, [sp, #4]
 8008a7a:	9600      	str	r6, [sp, #0]
 8008a7c:	0023      	movs	r3, r4
 8008a7e:	002a      	movs	r2, r5
 8008a80:	0029      	movs	r1, r5
 8008a82:	0020      	movs	r0, r4
 8008a84:	f000 f98e 	bl	8008da4 <sendMsg>
}
 8008a88:	e7e0      	b.n	8008a4c <midiController_play+0x28>
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	20002f8c 	.word	0x20002f8c
 8008a90:	0800abe5 	.word	0x0800abe5

08008a94 <midiController_stop>:

void midiController_stop(uint8_t initiator){
 8008a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//Spusteno z hlavni jednotky
	if(initiator == ADDRESS_CONTROLLER){
 8008a96:	2801      	cmp	r0, #1
 8008a98:	d10c      	bne.n	8008ab4 <midiController_stop+0x20>
		//Posle se zprava do PC o zastaveni
		char msg[2] = {INTERNAL_COM, INTERNAL_COM_STOP};
 8008a9a:	2100      	movs	r1, #0
		sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, 2);
 8008a9c:	2202      	movs	r2, #2
		char msg[2] = {INTERNAL_COM, INTERNAL_COM_STOP};
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	7019      	strb	r1, [r3, #0]
 8008aa2:	7059      	strb	r1, [r3, #1]
		sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, 2);
 8008aa4:	9201      	str	r2, [sp, #4]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	000a      	movs	r2, r1
 8008aaa:	0003      	movs	r3, r0
 8008aac:	f000 f97a 	bl	8008da4 <sendMsg>
	}else{
		//Vrati se do menu, zapne OLED refresh a vypne LED
		oledType = OLED_MENU;
	}

}
 8008ab0:	b005      	add	sp, #20
 8008ab2:	bd00      	pop	{pc}
		oledType = OLED_MENU;
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	4b01      	ldr	r3, [pc, #4]	; (8008abc <midiController_stop+0x28>)
 8008ab8:	601a      	str	r2, [r3, #0]
}
 8008aba:	e7f9      	b.n	8008ab0 <midiController_stop+0x1c>
 8008abc:	20000c40 	.word	0x20000c40

08008ac0 <midiController_checkKeyboard>:

uint32_t midiController_checkKeyboard(){
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	4895      	ldr	r0, [pc, #596]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008ac8:	f7fb f836 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8008acc:	2201      	movs	r2, #1
 8008ace:	2104      	movs	r1, #4
 8008ad0:	4892      	ldr	r0, [pc, #584]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008ad2:	f7fb f831 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8008ad6:	2180      	movs	r1, #128	; 0x80
 8008ad8:	2201      	movs	r2, #1
 8008ada:	00c9      	lsls	r1, r1, #3
 8008adc:	488f      	ldr	r0, [pc, #572]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008ade:	f7fb f82b 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	0109      	lsls	r1, r1, #4
 8008ae8:	488c      	ldr	r0, [pc, #560]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008aea:	f7fb f825 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8008aee:	2180      	movs	r1, #128	; 0x80

	keyboardState = 0;
 8008af0:	2500      	movs	r5, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8008af2:	2201      	movs	r2, #1
 8008af4:	0149      	lsls	r1, r1, #5
 8008af6:	4889      	ldr	r0, [pc, #548]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008af8:	f7fb f81e 	bl	8003b38 <HAL_GPIO_WritePin>
	keyboardState = 0;
 8008afc:	4c88      	ldr	r4, [pc, #544]	; (8008d20 <midiController_checkKeyboard+0x260>)

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8008afe:	2101      	movs	r1, #1
 8008b00:	4888      	ldr	r0, [pc, #544]	; (8008d24 <midiController_checkKeyboard+0x264>)
	keyboardState = 0;
 8008b02:	6025      	str	r5, [r4, #0]
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))) << 1) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))) << 2));
 8008b04:	f7fb f812 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b08:	2102      	movs	r1, #2
 8008b0a:	4247      	negs	r7, r0
 8008b0c:	4147      	adcs	r7, r0
 8008b0e:	4885      	ldr	r0, [pc, #532]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b10:	f7fb f80c 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b14:	0003      	movs	r3, r0
 8008b16:	4258      	negs	r0, r3
 8008b18:	4158      	adcs	r0, r3
 8008b1a:	0040      	lsls	r0, r0, #1
 8008b1c:	4307      	orrs	r7, r0
 8008b1e:	2104      	movs	r1, #4
 8008b20:	4880      	ldr	r0, [pc, #512]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b22:	f7fb f803 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b26:	0003      	movs	r3, r0
 8008b28:	4258      	negs	r0, r3
 8008b2a:	4158      	adcs	r0, r3
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	0080      	lsls	r0, r0, #2
 8008b30:	4338      	orrs	r0, r7
 8008b32:	4318      	orrs	r0, r3
 8008b34:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8008b36:	2201      	movs	r2, #1
 8008b38:	2102      	movs	r1, #2
 8008b3a:	4878      	ldr	r0, [pc, #480]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008b3c:	f7fa fffc 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8008b40:	002a      	movs	r2, r5
 8008b42:	2104      	movs	r1, #4
 8008b44:	4875      	ldr	r0, [pc, #468]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008b46:	f7fa fff7 	bl	8003b38 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 3;
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4875      	ldr	r0, [pc, #468]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b4e:	f7fa ffed 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b52:	2102      	movs	r1, #2
 8008b54:	4247      	negs	r7, r0
 8008b56:	4147      	adcs	r7, r0
 8008b58:	4872      	ldr	r0, [pc, #456]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b5a:	f7fa ffe7 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b5e:	0003      	movs	r3, r0
 8008b60:	4258      	negs	r0, r3
 8008b62:	4158      	adcs	r0, r3
 8008b64:	0040      	lsls	r0, r0, #1
 8008b66:	4307      	orrs	r7, r0
 8008b68:	2104      	movs	r1, #4
 8008b6a:	486e      	ldr	r0, [pc, #440]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b6c:	f7fa ffde 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008b70:	0003      	movs	r3, r0
 8008b72:	4258      	negs	r0, r3
 8008b74:	4158      	adcs	r0, r3
 8008b76:	0080      	lsls	r0, r0, #2
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	4338      	orrs	r0, r7
 8008b7c:	00c0      	lsls	r0, r0, #3
 8008b7e:	4318      	orrs	r0, r3
 8008b80:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8008b82:	2201      	movs	r2, #1
 8008b84:	2104      	movs	r1, #4
 8008b86:	4865      	ldr	r0, [pc, #404]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008b88:	f7fa ffd6 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	002a      	movs	r2, r5
 8008b90:	00c9      	lsls	r1, r1, #3
 8008b92:	4862      	ldr	r0, [pc, #392]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008b94:	f7fa ffd0 	bl	8003b38 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4862      	ldr	r0, [pc, #392]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008b9c:	f7fa ffc6 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	4247      	negs	r7, r0
 8008ba4:	4147      	adcs	r7, r0
 8008ba6:	485f      	ldr	r0, [pc, #380]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008ba8:	f7fa ffc0 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008bac:	0003      	movs	r3, r0
 8008bae:	4258      	negs	r0, r3
 8008bb0:	4158      	adcs	r0, r3
 8008bb2:	0040      	lsls	r0, r0, #1
 8008bb4:	4307      	orrs	r7, r0
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	485a      	ldr	r0, [pc, #360]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008bba:	f7fa ffb7 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	4258      	negs	r0, r3
 8008bc2:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8008bc4:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 6;
 8008bc6:	0080      	lsls	r0, r0, #2
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	4338      	orrs	r0, r7
 8008bcc:	0180      	lsls	r0, r0, #6
 8008bce:	4318      	orrs	r0, r3
 8008bd0:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	00c9      	lsls	r1, r1, #3
 8008bd6:	4851      	ldr	r0, [pc, #324]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008bd8:	f7fa ffae 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8008bdc:	2180      	movs	r1, #128	; 0x80
 8008bde:	002a      	movs	r2, r5
 8008be0:	0109      	lsls	r1, r1, #4
 8008be2:	484e      	ldr	r0, [pc, #312]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008be4:	f7fa ffa8 	bl	8003b38 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8008be8:	2101      	movs	r1, #1
 8008bea:	484e      	ldr	r0, [pc, #312]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008bec:	f7fa ff9e 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008bf0:	2102      	movs	r1, #2
 8008bf2:	4247      	negs	r7, r0
 8008bf4:	4147      	adcs	r7, r0
 8008bf6:	484b      	ldr	r0, [pc, #300]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008bf8:	f7fa ff98 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008bfc:	0003      	movs	r3, r0
 8008bfe:	4258      	negs	r0, r3
 8008c00:	4158      	adcs	r0, r3
 8008c02:	0040      	lsls	r0, r0, #1
 8008c04:	4307      	orrs	r7, r0
 8008c06:	2104      	movs	r1, #4
 8008c08:	4846      	ldr	r0, [pc, #280]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008c0a:	f7fa ff8f 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008c0e:	0003      	movs	r3, r0
 8008c10:	4258      	negs	r0, r3
 8008c12:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8008c14:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 9;
 8008c16:	0080      	lsls	r0, r0, #2
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	4338      	orrs	r0, r7
 8008c1c:	0240      	lsls	r0, r0, #9
 8008c1e:	4318      	orrs	r0, r3
 8008c20:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8008c22:	2201      	movs	r2, #1
 8008c24:	0109      	lsls	r1, r1, #4
 8008c26:	483d      	ldr	r0, [pc, #244]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008c28:	f7fa ff86 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	002a      	movs	r2, r5
 8008c30:	0149      	lsls	r1, r1, #5
 8008c32:	483a      	ldr	r0, [pc, #232]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008c34:	f7fa ff80 	bl	8003b38 <HAL_GPIO_WritePin>

	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8008c38:	2101      	movs	r1, #1
 8008c3a:	483a      	ldr	r0, [pc, #232]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008c3c:	f7fa ff76 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008c40:	2102      	movs	r1, #2
 8008c42:	4247      	negs	r7, r0
 8008c44:	4147      	adcs	r7, r0
 8008c46:	4837      	ldr	r0, [pc, #220]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008c48:	f7fa ff70 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008c4c:	0003      	movs	r3, r0
 8008c4e:	4258      	negs	r0, r3
 8008c50:	4158      	adcs	r0, r3
 8008c52:	0040      	lsls	r0, r0, #1
 8008c54:	4307      	orrs	r7, r0
 8008c56:	2104      	movs	r1, #4
 8008c58:	4832      	ldr	r0, [pc, #200]	; (8008d24 <midiController_checkKeyboard+0x264>)
 8008c5a:	f7fa ff67 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	4258      	negs	r0, r3
 8008c62:	4158      	adcs	r0, r3

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8008c64:	2180      	movs	r1, #128	; 0x80
	keyboardState |= ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) << 1)) | ((!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) << 2))) << 12;
 8008c66:	0080      	lsls	r0, r0, #2
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	4338      	orrs	r0, r7
 8008c6c:	0300      	lsls	r0, r0, #12
 8008c6e:	4318      	orrs	r0, r3
 8008c70:	6020      	str	r0, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8008c72:	2201      	movs	r2, #1
 8008c74:	0149      	lsls	r1, r1, #5
 8008c76:	4829      	ldr	r0, [pc, #164]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008c78:	f7fa ff5e 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8008c7c:	20a0      	movs	r0, #160	; 0xa0
 8008c7e:	002a      	movs	r2, r5
 8008c80:	2102      	movs	r1, #2
 8008c82:	05c0      	lsls	r0, r0, #23
 8008c84:	f7fa ff58 	bl	8003b38 <HAL_GPIO_WritePin>

	keyboardState |= (/*(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))) | */(((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) << 1))) << 15;
 8008c88:	2180      	movs	r1, #128	; 0x80
 8008c8a:	4824      	ldr	r0, [pc, #144]	; (8008d1c <midiController_checkKeyboard+0x25c>)
 8008c8c:	0189      	lsls	r1, r1, #6
 8008c8e:	f7fa ff4d 	bl	8003b2c <HAL_GPIO_ReadPin>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	0400      	lsls	r0, r0, #16
 8008c96:	4318      	orrs	r0, r3
 8008c98:	6020      	str	r0, [r4, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8008c9a:	20a0      	movs	r0, #160	; 0xa0
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	05c0      	lsls	r0, r0, #23
 8008ca0:	2102      	movs	r1, #2
 8008ca2:	f7fa ff49 	bl	8003b38 <HAL_GPIO_WritePin>

	if(keyboardState != keyboardStateOld){
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	4c1f      	ldr	r4, [pc, #124]	; (8008d28 <midiController_checkKeyboard+0x268>)
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	4298      	cmp	r0, r3
 8008cae:	d033      	beq.n	8008d18 <midiController_checkKeyboard+0x258>
		keypad.one = (keyboardState & 0x4) >> 2;
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <midiController_checkKeyboard+0x26c>)
 8008cb4:	0881      	lsrs	r1, r0, #2
 8008cb6:	4011      	ands	r1, r2
 8008cb8:	7019      	strb	r1, [r3, #0]
		keypad.two = (keyboardState & 0x2) >> 1;
 8008cba:	0841      	lsrs	r1, r0, #1
 8008cbc:	4011      	ands	r1, r2
 8008cbe:	7059      	strb	r1, [r3, #1]
		keypad.three = (keyboardState & 0x1);
 8008cc0:	0001      	movs	r1, r0
 8008cc2:	4011      	ands	r1, r2
 8008cc4:	7099      	strb	r1, [r3, #2]

		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8008cc6:	0941      	lsrs	r1, r0, #5
 8008cc8:	4011      	ands	r1, r2
 8008cca:	70d9      	strb	r1, [r3, #3]
		keypad.five = ((keyboardState >> 3) & 0x2) >> 1;
 8008ccc:	0901      	lsrs	r1, r0, #4
 8008cce:	4011      	ands	r1, r2
 8008cd0:	7119      	strb	r1, [r3, #4]
		keypad.four = ((keyboardState >> 3) & 0x4) >> 2;
 8008cd2:	08c1      	lsrs	r1, r0, #3
		keypad.six = ((keyboardState >> 3) & 0x1);
 8008cd4:	4011      	ands	r1, r2
 8008cd6:	7159      	strb	r1, [r3, #5]

		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8008cd8:	0a01      	lsrs	r1, r0, #8
 8008cda:	4011      	ands	r1, r2
 8008cdc:	7199      	strb	r1, [r3, #6]
		keypad.eight = ((keyboardState >> 6) & 0x2) >> 1;
 8008cde:	09c1      	lsrs	r1, r0, #7
 8008ce0:	4011      	ands	r1, r2
 8008ce2:	71d9      	strb	r1, [r3, #7]
		keypad.seven = ((keyboardState >> 6) & 0x4) >> 2;
 8008ce4:	0981      	lsrs	r1, r0, #6
		keypad.nine = ((keyboardState >> 6) & 0x1);
 8008ce6:	4011      	ands	r1, r2
 8008ce8:	7219      	strb	r1, [r3, #8]

		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 8008cea:	0ac1      	lsrs	r1, r0, #11
 8008cec:	4011      	ands	r1, r2
 8008cee:	7299      	strb	r1, [r3, #10]
		keypad.zero = ((keyboardState >> 9) & 0x2) >> 1;
 8008cf0:	0a81      	lsrs	r1, r0, #10
 8008cf2:	4011      	ands	r1, r2
 8008cf4:	7259      	strb	r1, [r3, #9]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 8008cf6:	0c01      	lsrs	r1, r0, #16
 8008cf8:	4011      	ands	r1, r2
 8008cfa:	72d9      	strb	r1, [r3, #11]
		keypad.mf1 = ((keyboardState >> 9) & 0x4) >> 2;
 8008cfc:	0a41      	lsrs	r1, r0, #9

		keypad.up = ((keyboardState >> 9) & 0x1);
 8008cfe:	4011      	ands	r1, r2
 8008d00:	7319      	strb	r1, [r3, #12]
		keypad.down = ((keyboardState >> 12) & 0x4) >> 2;
 8008d02:	0b81      	lsrs	r1, r0, #14
 8008d04:	4011      	ands	r1, r2
 8008d06:	7359      	strb	r1, [r3, #13]
		keypad.left = ((keyboardState >> 12) & 0x2) >> 1;
 8008d08:	0b41      	lsrs	r1, r0, #13
 8008d0a:	4011      	ands	r1, r2
 8008d0c:	7399      	strb	r1, [r3, #14]
		keypad.power = ((keyboardState >> 12) & 0x10) >> 4;
 8008d0e:	0b01      	lsrs	r1, r0, #12
		keypad.right = ((keyboardState >> 12) & 0x1);
 8008d10:	4011      	ands	r1, r2
 8008d12:	73d9      	strb	r1, [r3, #15]
		//keypad.enter |= (((keyboardState >> 12) & 0x8) >> 3) & 0x01;

		keypad.changed = 1;
 8008d14:	745a      	strb	r2, [r3, #17]

		keyboardStateOld = keyboardState;
 8008d16:	6020      	str	r0, [r4, #0]
	}


	return keyboardState;
}
 8008d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	50000400 	.word	0x50000400
 8008d20:	20000c4c 	.word	0x20000c4c
 8008d24:	50000c00 	.word	0x50000c00
 8008d28:	20002018 	.word	0x20002018
 8008d2c:	20002ca8 	.word	0x20002ca8

08008d30 <midiController_keepalive_process>:

//Rutina pro kontrolu pripojeni PC a ovladace a odesilani info o "zijici" hlavni jednotce
void midiController_keepalive_process(){
 8008d30:	b510      	push	{r4, lr}
	//Pricita citace - jak dlouho nedostal odpoved
	alivePCCounter++;
 8008d32:	480b      	ldr	r0, [pc, #44]	; (8008d60 <midiController_keepalive_process+0x30>)
	aliveMainCounter++;
 8008d34:	490b      	ldr	r1, [pc, #44]	; (8008d64 <midiController_keepalive_process+0x34>)
	alivePCCounter++;
 8008d36:	7802      	ldrb	r2, [r0, #0]
	aliveMainCounter++;
 8008d38:	780b      	ldrb	r3, [r1, #0]
	alivePCCounter++;
 8008d3a:	3201      	adds	r2, #1
	aliveMainCounter++;
 8008d3c:	3301      	adds	r3, #1
	alivePCCounter++;
 8008d3e:	b2d2      	uxtb	r2, r2
	aliveMainCounter++;
 8008d40:	b2db      	uxtb	r3, r3
	alivePCCounter++;
 8008d42:	7002      	strb	r2, [r0, #0]
	aliveMainCounter++;
 8008d44:	700b      	strb	r3, [r1, #0]

	//Pokud nedostal odpoved za 2s, neni PC pripojeno
	if(alivePCCounter > 6){
 8008d46:	2a06      	cmp	r2, #6
 8008d48:	d903      	bls.n	8008d52 <midiController_keepalive_process+0x22>
		alivePC = 0;
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4c06      	ldr	r4, [pc, #24]	; (8008d68 <midiController_keepalive_process+0x38>)
		alivePCCounter = 0;
 8008d4e:	7002      	strb	r2, [r0, #0]
		alivePC = 0;
 8008d50:	7022      	strb	r2, [r4, #0]
	}

	//Pokud nedostal odpoved za 2s, neni ovladac pripojen
	if(aliveMainCounter > 6){
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d903      	bls.n	8008d5e <midiController_keepalive_process+0x2e>
		aliveMain = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <midiController_keepalive_process+0x3c>)
		aliveMainCounter = 0;
 8008d5a:	700b      	strb	r3, [r1, #0]
		aliveMain = 0;
 8008d5c:	7013      	strb	r3, [r2, #0]
	}


}
 8008d5e:	bd10      	pop	{r4, pc}
 8008d60:	20002fbc 	.word	0x20002fbc
 8008d64:	20003d9c 	.word	0x20003d9c
 8008d68:	2000265c 	.word	0x2000265c
 8008d6c:	20003dd8 	.word	0x20003dd8

08008d70 <midiController_setDisplayRaw>:
	data[8] = barva;

	midiController_setDisplayRaw(data, 9);
}

uint8_t midiController_setDisplayRaw(uint8_t * data, uint16_t len){
 8008d70:	b507      	push	{r0, r1, r2, lr}
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_MAIN, 0, EXTERNAL_DISP, data, len);
 8008d72:	2303      	movs	r3, #3
 8008d74:	9101      	str	r1, [sp, #4]
 8008d76:	9000      	str	r0, [sp, #0]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	f000 f811 	bl	8008da4 <sendMsg>
}
 8008d82:	bd0e      	pop	{r1, r2, r3, pc}

08008d84 <midiController_get_time>:

void midiController_get_time(){
 8008d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//Odesle zadost o nastaveni casu
	char msg[] = {INTERNAL_COM, INTERNAL_COM_GET_TIME};
 8008d86:	2100      	movs	r1, #0
 8008d88:	2205      	movs	r2, #5
 8008d8a:	ab03      	add	r3, sp, #12
 8008d8c:	7019      	strb	r1, [r3, #0]
 8008d8e:	705a      	strb	r2, [r3, #1]
	sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, 2);
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	2301      	movs	r3, #1
 8008d94:	3a03      	subs	r2, #3
 8008d96:	9201      	str	r2, [sp, #4]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	000a      	movs	r2, r1
 8008d9c:	f000 f802 	bl	8008da4 <sendMsg>
}
 8008da0:	b005      	add	sp, #20
 8008da2:	bd00      	pop	{pc}

08008da4 <sendMsg>:

	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
	free(buffer);
}

void sendMsg(uint8_t src, uint8_t dest, uint8_t broadcast, uint8_t type, char * msg, uint16_t len){
 8008da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da6:	b085      	sub	sp, #20
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	ab0a      	add	r3, sp, #40	; 0x28
 8008dac:	9201      	str	r2, [sp, #4]
 8008dae:	cb04      	ldmia	r3!, {r2}
 8008db0:	0005      	movs	r5, r0
 8008db2:	881f      	ldrh	r7, [r3, #0]
 8008db4:	9100      	str	r1, [sp, #0]
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 8008db6:	1dfe      	adds	r6, r7, #7
 8008db8:	0030      	movs	r0, r6
void sendMsg(uint8_t src, uint8_t dest, uint8_t broadcast, uint8_t type, char * msg, uint16_t len){
 8008dba:	9203      	str	r2, [sp, #12]
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 8008dbc:	f002 fd80 	bl	800b8c0 <malloc>
	buffer[0] = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	7003      	strb	r3, [r0, #0]
	buffer[1] = 0;
 8008dc4:	7043      	strb	r3, [r0, #1]
	buffer[2] = 0;
 8008dc6:	7083      	strb	r3, [r0, #2]
	buffer[3] = 0;
 8008dc8:	70c3      	strb	r3, [r0, #3]
	buffer[4] = ((len+1) >> 4) & 0xff;
 8008dca:	1c7b      	adds	r3, r7, #1
 8008dcc:	111a      	asrs	r2, r3, #4
 8008dce:	7102      	strb	r2, [r0, #4]
	buffer[5] = (len+1) & 0xff;
	buffer[6] = ((type & 0x07) << 5) | ((src & 0x3) << 3) | ((broadcast & 0x01) << 2) | (dest & 0x03);
 8008dd0:	2204      	movs	r2, #4
	buffer[5] = (len+1) & 0xff;
 8008dd2:	7143      	strb	r3, [r0, #5]
	buffer[6] = ((type & 0x07) << 5) | ((src & 0x3) << 3) | ((broadcast & 0x01) << 2) | (dest & 0x03);
 8008dd4:	9b01      	ldr	r3, [sp, #4]
 8008dd6:	9900      	ldr	r1, [sp, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4013      	ands	r3, r2
 8008ddc:	3a01      	subs	r2, #1
 8008dde:	4011      	ands	r1, r2
 8008de0:	9a02      	ldr	r2, [sp, #8]
 8008de2:	430b      	orrs	r3, r1
 8008de4:	0152      	lsls	r2, r2, #5
 8008de6:	4313      	orrs	r3, r2
 8008de8:	2218      	movs	r2, #24
 8008dea:	00ed      	lsls	r5, r5, #3
 8008dec:	4015      	ands	r5, r2
 8008dee:	431d      	orrs	r5, r3
 8008df0:	7185      	strb	r5, [r0, #6]
	uint8_t * buffer = (uint8_t*)malloc(len+7);
 8008df2:	0004      	movs	r4, r0
	memcpy(&buffer[7], msg, len);
 8008df4:	003a      	movs	r2, r7
 8008df6:	3007      	adds	r0, #7
 8008df8:	9903      	ldr	r1, [sp, #12]
 8008dfa:	f002 fd75 	bl	800b8e8 <memcpy>


	if(btStreamOpen && !btCmdMode){
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <sendMsg+0x80>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <sendMsg+0x7a>
 8008e06:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <sendMsg+0x84>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d107      	bne.n	8008e1e <sendMsg+0x7a>
		HAL_UART_Transmit_IT(&huart2, buffer, len+7);
 8008e0e:	b2b2      	uxth	r2, r6
 8008e10:	0021      	movs	r1, r4
 8008e12:	4806      	ldr	r0, [pc, #24]	; (8008e2c <sendMsg+0x88>)
 8008e14:	f7fd f828 	bl	8005e68 <HAL_UART_Transmit_IT>
		btData = 1;
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <sendMsg+0x8c>)
 8008e1c:	701a      	strb	r2, [r3, #0]
	}

}
 8008e1e:	b005      	add	sp, #20
 8008e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	20002c94 	.word	0x20002c94
 8008e28:	20003026 	.word	0x20003026
 8008e2c:	200048cc 	.word	0x200048cc
 8008e30:	20003228 	.word	0x20003228

08008e34 <msgAOK>:
void msgAOK(uint8_t aokType, uint8_t recType, uint16_t recSize, uint16_t dataSize, char * msg){
 8008e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e36:	0007      	movs	r7, r0
 8008e38:	b085      	sub	sp, #20
	char * buffer = (char*)malloc(dataSize);
 8008e3a:	0018      	movs	r0, r3
void msgAOK(uint8_t aokType, uint8_t recType, uint16_t recSize, uint16_t dataSize, char * msg){
 8008e3c:	000e      	movs	r6, r1
 8008e3e:	001d      	movs	r5, r3
 8008e40:	9203      	str	r2, [sp, #12]
	char * buffer = (char*)malloc(dataSize);
 8008e42:	f002 fd3d 	bl	800b8c0 <malloc>
	buffer[0] = 0x80 | (aokType & 0x7f);
 8008e46:	2380      	movs	r3, #128	; 0x80
	char * buffer = (char*)malloc(dataSize);
 8008e48:	0004      	movs	r4, r0
	buffer[0] = 0x80 | (aokType & 0x7f);
 8008e4a:	425b      	negs	r3, r3
 8008e4c:	431f      	orrs	r7, r3
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8008e4e:	9b03      	ldr	r3, [sp, #12]
	buffer[0] = 0x80 | (aokType & 0x7f);
 8008e50:	7007      	strb	r7, [r0, #0]
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8008e52:	3b06      	subs	r3, #6
 8008e54:	121a      	asrs	r2, r3, #8
	buffer[1] = recType;
 8008e56:	7046      	strb	r6, [r0, #1]
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8008e58:	7082      	strb	r2, [r0, #2]
	buffer[3] = (recSize-6) & 0xff;
 8008e5a:	70c3      	strb	r3, [r0, #3]
	memcpy(&buffer[4], msg, dataSize);
 8008e5c:	002a      	movs	r2, r5
 8008e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e60:	3004      	adds	r0, #4
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, dataSize+5);
 8008e62:	3505      	adds	r5, #5
	memcpy(&buffer[4], msg, dataSize);
 8008e64:	f002 fd40 	bl	800b8e8 <memcpy>
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, dataSize+5);
 8008e68:	b2ad      	uxth	r5, r5
 8008e6a:	06f1      	lsls	r1, r6, #27
 8008e6c:	0f89      	lsrs	r1, r1, #30
 8008e6e:	2307      	movs	r3, #7
 8008e70:	2200      	movs	r2, #0
 8008e72:	9501      	str	r5, [sp, #4]
 8008e74:	9400      	str	r4, [sp, #0]
 8008e76:	2002      	movs	r0, #2
 8008e78:	f7ff ff94 	bl	8008da4 <sendMsg>
	free(buffer);
 8008e7c:	0020      	movs	r0, r4
 8008e7e:	f002 fd29 	bl	800b8d4 <free>
}
 8008e82:	b005      	add	sp, #20
 8008e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e86 <msgERR>:
void msgERR(uint8_t errType, uint8_t recType, uint16_t recSize){
 8008e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e88:	0016      	movs	r6, r2
 8008e8a:	0007      	movs	r7, r0
	char * buffer = (char*)malloc(5);
 8008e8c:	2005      	movs	r0, #5
void msgERR(uint8_t errType, uint8_t recType, uint16_t recSize){
 8008e8e:	000d      	movs	r5, r1
	char * buffer = (char*)malloc(5);
 8008e90:	f002 fd16 	bl	800b8c0 <malloc>
	buffer[0] = 0x7f & (errType & 0x7f);
 8008e94:	237f      	movs	r3, #127	; 0x7f
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8008e96:	3e06      	subs	r6, #6
	buffer[0] = 0x7f & (errType & 0x7f);
 8008e98:	401f      	ands	r7, r3
	buffer[2] = ((recSize-6) & 0xff00) >> 8;
 8008e9a:	1233      	asrs	r3, r6, #8
 8008e9c:	7083      	strb	r3, [r0, #2]
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 8008e9e:	2305      	movs	r3, #5
	char * buffer = (char*)malloc(5);
 8008ea0:	0004      	movs	r4, r0
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 8008ea2:	06e9      	lsls	r1, r5, #27
	buffer[0] = 0x7f & (errType & 0x7f);
 8008ea4:	7007      	strb	r7, [r0, #0]
	buffer[1] = recType;
 8008ea6:	7045      	strb	r5, [r0, #1]
	buffer[3] = (recSize-6) & 0xff;
 8008ea8:	70c6      	strb	r6, [r0, #3]
	sendMsg(ADDRESS_MAIN, ((recType & 0x18) >> 3), 0, 0x07, buffer, 5);
 8008eaa:	0f89      	lsrs	r1, r1, #30
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	9000      	str	r0, [sp, #0]
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2002      	movs	r0, #2
 8008eb6:	f7ff ff75 	bl	8008da4 <sendMsg>
	free(buffer);
 8008eba:	0020      	movs	r0, r4
 8008ebc:	f002 fd0a 	bl	800b8d4 <free>
}
 8008ec0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08008ec4 <decodeMessage>:
	btData = 1;
 8008ec4:	2101      	movs	r1, #1
void decodeMessage(char * msg, uint8_t broadcast){
 8008ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t len = (msg[4]<<8 | msg[5]);
 8008ec8:	7902      	ldrb	r2, [r0, #4]
	btData = 1;
 8008eca:	4b62      	ldr	r3, [pc, #392]	; (8009054 <decodeMessage+0x190>)
	char msgType = msg[6];
 8008ecc:	7987      	ldrb	r7, [r0, #6]
	uint16_t len = (msg[4]<<8 | msg[5]);
 8008ece:	7946      	ldrb	r6, [r0, #5]
 8008ed0:	0212      	lsls	r2, r2, #8
	btData = 1;
 8008ed2:	7019      	strb	r1, [r3, #0]
void decodeMessage(char * msg, uint8_t broadcast){
 8008ed4:	b08b      	sub	sp, #44	; 0x2c
 8008ed6:	0004      	movs	r4, r0
	uint16_t len = (msg[4]<<8 | msg[5]);
 8008ed8:	4316      	orrs	r6, r2
	uint8_t type = ((msgType & 0xE0) >> 5);
 8008eda:	097b      	lsrs	r3, r7, #5
	if(type == INTERNAL){
 8008edc:	428b      	cmp	r3, r1
 8008ede:	d000      	beq.n	8008ee2 <decodeMessage+0x1e>
 8008ee0:	e080      	b.n	8008fe4 <decodeMessage+0x120>
		if(msg[7] == INTERNAL_COM){
 8008ee2:	79c5      	ldrb	r5, [r0, #7]
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d000      	beq.n	8008eea <decodeMessage+0x26>
 8008ee8:	e0ad      	b.n	8009046 <decodeMessage+0x182>
	uint8_t src = ((msg[6] & 0x18) >> 3);
 8008eea:	06fa      	lsls	r2, r7, #27
 8008eec:	0f92      	lsrs	r2, r2, #30
 8008eee:	9202      	str	r2, [sp, #8]
			if(msg[8] == INTERNAL_COM_PLAY){
 8008ef0:	7a02      	ldrb	r2, [r0, #8]
 8008ef2:	428a      	cmp	r2, r1
 8008ef4:	d113      	bne.n	8008f1e <decodeMessage+0x5a>
				char * buffPlay = (char*) malloc(50);
 8008ef6:	2032      	movs	r0, #50	; 0x32
 8008ef8:	f002 fce2 	bl	800b8c0 <malloc>
				memset(buffPlay, 0, 50);
 8008efc:	2232      	movs	r2, #50	; 0x32
 8008efe:	0029      	movs	r1, r5
				char * buffPlay = (char*) malloc(50);
 8008f00:	0007      	movs	r7, r0
				memset(buffPlay, 0, 50);
 8008f02:	f002 fcfa 	bl	800b8fa <memset>
				memcpy(buffPlay, msg+9, len-3);
 8008f06:	0021      	movs	r1, r4
 8008f08:	1ef2      	subs	r2, r6, #3
 8008f0a:	3109      	adds	r1, #9
 8008f0c:	0038      	movs	r0, r7
 8008f0e:	f002 fceb 	bl	800b8e8 <memcpy>
				midiController_play(src, buffPlay);
 8008f12:	0039      	movs	r1, r7
 8008f14:	9802      	ldr	r0, [sp, #8]
 8008f16:	f7ff fd85 	bl	8008a24 <midiController_play>
}
 8008f1a:	b00b      	add	sp, #44	; 0x2c
 8008f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}else if(msg[8] == INTERNAL_COM_STOP){
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	d103      	bne.n	8008f2a <decodeMessage+0x66>
				midiController_stop(src);
 8008f22:	9802      	ldr	r0, [sp, #8]
 8008f24:	f7ff fdb6 	bl	8008a94 <midiController_stop>
 8008f28:	e7f7      	b.n	8008f1a <decodeMessage+0x56>
			}else if(msg[8] == INTERNAL_COM_REC){
 8008f2a:	2a02      	cmp	r2, #2
 8008f2c:	d119      	bne.n	8008f62 <decodeMessage+0x9e>
				char * buffRec = (char*) malloc(50);
 8008f2e:	2032      	movs	r0, #50	; 0x32
 8008f30:	f002 fcc6 	bl	800b8c0 <malloc>
				memset(buffRec, 0, 50);
 8008f34:	0029      	movs	r1, r5
 8008f36:	2232      	movs	r2, #50	; 0x32
				char * buffRec = (char*) malloc(50);
 8008f38:	9003      	str	r0, [sp, #12]
				memset(buffRec, 0, 50);
 8008f3a:	f002 fcde 	bl	800b8fa <memset>
				memcpy(buffRec, msg+9, len-3);
 8008f3e:	0021      	movs	r1, r4
 8008f40:	1ef2      	subs	r2, r6, #3
 8008f42:	3109      	adds	r1, #9
 8008f44:	9803      	ldr	r0, [sp, #12]
 8008f46:	f002 fccf 	bl	800b8e8 <memcpy>
				midiController_record(src, buffRec);
 8008f4a:	9903      	ldr	r1, [sp, #12]
 8008f4c:	9802      	ldr	r0, [sp, #8]
 8008f4e:	f7ff fd31 	bl	80089b4 <midiController_record>
				msgAOK(0, msgType, len, 0, NULL);
 8008f52:	9500      	str	r5, [sp, #0]
 8008f54:	002b      	movs	r3, r5
 8008f56:	0032      	movs	r2, r6
 8008f58:	0039      	movs	r1, r7
 8008f5a:	0028      	movs	r0, r5
 8008f5c:	f7ff ff6a 	bl	8008e34 <msgAOK>
 8008f60:	e7db      	b.n	8008f1a <decodeMessage+0x56>
			}else if(msg[8] == INTERNAL_COM_KEEPALIVE){
 8008f62:	2aab      	cmp	r2, #171	; 0xab
 8008f64:	d11d      	bne.n	8008fa2 <decodeMessage+0xde>
				if(src == ADDRESS_MAIN){
 8008f66:	9a02      	ldr	r2, [sp, #8]
 8008f68:	2a02      	cmp	r2, #2
 8008f6a:	d10a      	bne.n	8008f82 <decodeMessage+0xbe>
					aliveMain = 1;
 8008f6c:	4a3a      	ldr	r2, [pc, #232]	; (8009058 <decodeMessage+0x194>)
 8008f6e:	7013      	strb	r3, [r2, #0]
					btStreamOpen = 1;
 8008f70:	4a3a      	ldr	r2, [pc, #232]	; (800905c <decodeMessage+0x198>)
 8008f72:	7013      	strb	r3, [r2, #0]
					btStreamSecured = 1;
 8008f74:	4a3a      	ldr	r2, [pc, #232]	; (8009060 <decodeMessage+0x19c>)
 8008f76:	7013      	strb	r3, [r2, #0]
					btStreamBonded = 1;
 8008f78:	4a3a      	ldr	r2, [pc, #232]	; (8009064 <decodeMessage+0x1a0>)
 8008f7a:	7013      	strb	r3, [r2, #0]
					aliveMainCounter = 0;
 8008f7c:	4b3a      	ldr	r3, [pc, #232]	; (8009068 <decodeMessage+0x1a4>)
 8008f7e:	701d      	strb	r5, [r3, #0]
 8008f80:	e7cb      	b.n	8008f1a <decodeMessage+0x56>
				}else if(src == ADDRESS_PC){
 8008f82:	9a02      	ldr	r2, [sp, #8]
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	d1c8      	bne.n	8008f1a <decodeMessage+0x56>
					alivePC = 1;
 8008f88:	4a38      	ldr	r2, [pc, #224]	; (800906c <decodeMessage+0x1a8>)
 8008f8a:	7013      	strb	r3, [r2, #0]
					btStreamOpen = 1;
 8008f8c:	4a33      	ldr	r2, [pc, #204]	; (800905c <decodeMessage+0x198>)
 8008f8e:	7013      	strb	r3, [r2, #0]
					btStreamSecured = 1;
 8008f90:	4a33      	ldr	r2, [pc, #204]	; (8009060 <decodeMessage+0x19c>)
 8008f92:	7013      	strb	r3, [r2, #0]
					btStreamBonded = 1;
 8008f94:	4a33      	ldr	r2, [pc, #204]	; (8009064 <decodeMessage+0x1a0>)
 8008f96:	7013      	strb	r3, [r2, #0]
					alivePCCounter = 0;
 8008f98:	466a      	mov	r2, sp
 8008f9a:	4b35      	ldr	r3, [pc, #212]	; (8009070 <decodeMessage+0x1ac>)
 8008f9c:	7a12      	ldrb	r2, [r2, #8]
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e7bb      	b.n	8008f1a <decodeMessage+0x56>
			}else if(msg[8] == INTERNAL_COM_SET_TIME){
 8008fa2:	2a06      	cmp	r2, #6
 8008fa4:	d14f      	bne.n	8009046 <decodeMessage+0x182>
				date.WeekDay = RTC_WEEKDAY_MONDAY;
 8008fa6:	ae04      	add	r6, sp, #16
				time.Seconds = msg[9];
 8008fa8:	7a42      	ldrb	r2, [r0, #9]
 8008faa:	a905      	add	r1, sp, #20
				date.WeekDay = RTC_WEEKDAY_MONDAY;
 8008fac:	7033      	strb	r3, [r6, #0]
				date.Date = msg[12];
 8008fae:	7b03      	ldrb	r3, [r0, #12]
				time.Seconds = msg[9];
 8008fb0:	708a      	strb	r2, [r1, #2]
				time.Minutes = msg[10];
 8008fb2:	7a82      	ldrb	r2, [r0, #10]
				date.Date = msg[12];
 8008fb4:	70b3      	strb	r3, [r6, #2]
				date.Month = msg[13];
 8008fb6:	7b43      	ldrb	r3, [r0, #13]
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8008fb8:	4c2e      	ldr	r4, [pc, #184]	; (8009074 <decodeMessage+0x1b0>)
				time.Minutes = msg[10];
 8008fba:	704a      	strb	r2, [r1, #1]
				time.Hours = msg[11];
 8008fbc:	7ac2      	ldrb	r2, [r0, #11]
				date.Month = msg[13];
 8008fbe:	7073      	strb	r3, [r6, #1]
				date.Year = msg[14];
 8008fc0:	7b83      	ldrb	r3, [r0, #14]
				time.Hours = msg[11];
 8008fc2:	700a      	strb	r2, [r1, #0]
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8008fc4:	0020      	movs	r0, r4
 8008fc6:	002a      	movs	r2, r5
				time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008fc8:	60cd      	str	r5, [r1, #12]
				time.SecondFraction = 0;
 8008fca:	608d      	str	r5, [r1, #8]
				time.SubSeconds = 0;
 8008fcc:	604d      	str	r5, [r1, #4]
				time.TimeFormat = RTC_HOURFORMAT_24;
 8008fce:	70cd      	strb	r5, [r1, #3]
				time.StoreOperation = RTC_STOREOPERATION_RESET;
 8008fd0:	610d      	str	r5, [r1, #16]
				date.Year = msg[14];
 8008fd2:	70f3      	strb	r3, [r6, #3]
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8008fd4:	f7fc fab0 	bl	8005538 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8008fd8:	002a      	movs	r2, r5
 8008fda:	0031      	movs	r1, r6
 8008fdc:	0020      	movs	r0, r4
 8008fde:	f7fc fb11 	bl	8005604 <HAL_RTC_SetDate>
 8008fe2:	e79a      	b.n	8008f1a <decodeMessage+0x56>
	}else if(type == AOKERR){
 8008fe4:	2b07      	cmp	r3, #7
 8008fe6:	d12e      	bne.n	8009046 <decodeMessage+0x182>
		if((msg[7] & 0x80) == AOK){
 8008fe8:	79c3      	ldrb	r3, [r0, #7]
 8008fea:	2b7f      	cmp	r3, #127	; 0x7f
 8008fec:	d920      	bls.n	8009030 <decodeMessage+0x16c>
			if(msg[8] == 0x28){
 8008fee:	7a03      	ldrb	r3, [r0, #8]
 8008ff0:	2b28      	cmp	r3, #40	; 0x28
 8008ff2:	d000      	beq.n	8008ff6 <decodeMessage+0x132>
 8008ff4:	e791      	b.n	8008f1a <decodeMessage+0x56>
				if(workerGetSongs.assert && workerGetSongs.status == WORKER_WAITING){
 8008ff6:	4b20      	ldr	r3, [pc, #128]	; (8009078 <decodeMessage+0x1b4>)
 8008ff8:	781a      	ldrb	r2, [r3, #0]
 8008ffa:	2a00      	cmp	r2, #0
 8008ffc:	d008      	beq.n	8009010 <decodeMessage+0x14c>
 8008ffe:	785a      	ldrb	r2, [r3, #1]
 8009000:	2a00      	cmp	r2, #0
 8009002:	d105      	bne.n	8009010 <decodeMessage+0x14c>
					workerGetSongs.status = WORKER_OK;
 8009004:	3202      	adds	r2, #2
					strToSongMenu(&msg[11], &songMenuSize);
 8009006:	491d      	ldr	r1, [pc, #116]	; (800907c <decodeMessage+0x1b8>)
 8009008:	300b      	adds	r0, #11
					workerGetSongs.status = WORKER_OK;
 800900a:	705a      	strb	r2, [r3, #1]
					strToSongMenu(&msg[11], &songMenuSize);
 800900c:	f7ff fc38 	bl	8008880 <strToSongMenu>
				if(workerRecord.assert && workerRecord.status == WORKER_WAITING){
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <decodeMessage+0x1bc>)
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	2a00      	cmp	r2, #0
 8009016:	d100      	bne.n	800901a <decodeMessage+0x156>
 8009018:	e77f      	b.n	8008f1a <decodeMessage+0x56>
 800901a:	785a      	ldrb	r2, [r3, #1]
 800901c:	2a00      	cmp	r2, #0
 800901e:	d000      	beq.n	8009022 <decodeMessage+0x15e>
 8009020:	e77b      	b.n	8008f1a <decodeMessage+0x56>
					if(msg[11] == 1){
 8009022:	7ae2      	ldrb	r2, [r4, #11]
 8009024:	2a01      	cmp	r2, #1
 8009026:	d101      	bne.n	800902c <decodeMessage+0x168>
						workerRecord.status = WORKER_OK;
 8009028:	705a      	strb	r2, [r3, #1]
 800902a:	e776      	b.n	8008f1a <decodeMessage+0x56>
 800902c:	2202      	movs	r2, #2
 800902e:	e7fb      	b.n	8009028 <decodeMessage+0x164>
			if(workerGetSongs.assert && workerGetSongs.status == WORKER_WAITING){
 8009030:	4b11      	ldr	r3, [pc, #68]	; (8009078 <decodeMessage+0x1b4>)
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	2a00      	cmp	r2, #0
 8009036:	d100      	bne.n	800903a <decodeMessage+0x176>
 8009038:	e76f      	b.n	8008f1a <decodeMessage+0x56>
 800903a:	785a      	ldrb	r2, [r3, #1]
 800903c:	2a00      	cmp	r2, #0
 800903e:	d000      	beq.n	8009042 <decodeMessage+0x17e>
 8009040:	e76b      	b.n	8008f1a <decodeMessage+0x56>
				workerGetSongs.status = WORKER_ERR;
 8009042:	7059      	strb	r1, [r3, #1]
 8009044:	e769      	b.n	8008f1a <decodeMessage+0x56>
	}else msgERR(0, msgType, len);
 8009046:	0032      	movs	r2, r6
 8009048:	0039      	movs	r1, r7
 800904a:	2000      	movs	r0, #0
 800904c:	f7ff ff1b 	bl	8008e86 <msgERR>
}
 8009050:	e763      	b.n	8008f1a <decodeMessage+0x56>
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	20003228 	.word	0x20003228
 8009058:	20003dd8 	.word	0x20003dd8
 800905c:	20002c94 	.word	0x20002c94
 8009060:	200028c0 	.word	0x200028c0
 8009064:	20000ab8 	.word	0x20000ab8
 8009068:	20003d9c 	.word	0x20003d9c
 800906c:	2000265c 	.word	0x2000265c
 8009070:	20002fbc 	.word	0x20002fbc
 8009074:	200042ec 	.word	0x200042ec
 8009078:	20002851 	.word	0x20002851
 800907c:	20000c48 	.word	0x20000c48
 8009080:	200028b9 	.word	0x200028b9

08009084 <oled_StartSplash>:
void oled_refreshResume(){
	refreshHalt = 0;
}

//Funkce vykreslujici zapinaci obrazovku
void oled_StartSplash(){
 8009084:	b510      	push	{r4, lr}
	//Vypisou se texty
	ssd1306_SetCursor((128-(strlen("MIDIControl"))*11)/2, 10);
 8009086:	210a      	movs	r1, #10
 8009088:	2003      	movs	r0, #3
 800908a:	f002 f907 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("MIDIControl", Font_11x18, White);
 800908e:	4c0f      	ldr	r4, [pc, #60]	; (80090cc <oled_StartSplash+0x48>)
 8009090:	2301      	movs	r3, #1
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	6862      	ldr	r2, [r4, #4]
 8009096:	480e      	ldr	r0, [pc, #56]	; (80090d0 <oled_StartSplash+0x4c>)
 8009098:	f002 f8ec 	bl	800b274 <ssd1306_WriteString>

	ssd1306_SetCursor((128-(strlen("CONTROLLER"))*11)/2, 30);
 800909c:	211e      	movs	r1, #30
 800909e:	2009      	movs	r0, #9
 80090a0:	f002 f8fc 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("CONTROLLER", Font_11x18, White);
 80090a4:	cc06      	ldmia	r4!, {r1, r2}
 80090a6:	2301      	movs	r3, #1
 80090a8:	480a      	ldr	r0, [pc, #40]	; (80090d4 <oled_StartSplash+0x50>)
 80090aa:	f002 f8e3 	bl	800b274 <ssd1306_WriteString>

	char * version = "Verze 1.1";
	ssd1306_SetCursor((128-(strlen(version))*7)/2,50);
 80090ae:	2132      	movs	r1, #50	; 0x32
 80090b0:	2020      	movs	r0, #32
 80090b2:	f002 f8f3 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(version, Font_7x10, White);
 80090b6:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <oled_StartSplash+0x54>)
 80090b8:	2301      	movs	r3, #1
 80090ba:	6811      	ldr	r1, [r2, #0]
 80090bc:	4807      	ldr	r0, [pc, #28]	; (80090dc <oled_StartSplash+0x58>)
 80090be:	6852      	ldr	r2, [r2, #4]
 80090c0:	f002 f8d8 	bl	800b274 <ssd1306_WriteString>

	//Vyporada se s kliknutim tlacitka
	encoderclick = 0;
 80090c4:	2200      	movs	r2, #0
 80090c6:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <oled_StartSplash+0x5c>)
 80090c8:	601a      	str	r2, [r3, #0]
}
 80090ca:	bd10      	pop	{r4, pc}
 80090cc:	200003e8 	.word	0x200003e8
 80090d0:	0800e140 	.word	0x0800e140
 80090d4:	0800e14c 	.word	0x0800e14c
 80090d8:	200003f8 	.word	0x200003f8
 80090dc:	0800e157 	.word	0x0800e157
 80090e0:	200028b4 	.word	0x200028b4

080090e4 <oled_BtDevInfoSplash>:
	}
}


//Funkce vykreslujici ze struktry info obrazovku o zarizeni
void oled_BtDevInfoSplash(struct btDevice * dev){
 80090e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e6:	b08d      	sub	sp, #52	; 0x34
 80090e8:	0004      	movs	r4, r0

	//Nastavi se scrollovani pokud je jmeno delsi nez obrazovka
	if(strlen(dev->name) > 9){
 80090ea:	f7f7 f815 	bl	8000118 <strlen>
 80090ee:	4d37      	ldr	r5, [pc, #220]	; (80091cc <oled_BtDevInfoSplash+0xe8>)
 80090f0:	2809      	cmp	r0, #9
 80090f2:	d95d      	bls.n	80091b0 <oled_BtDevInfoSplash+0xcc>
		scrollMax = (strlen(dev->name) - 10);
 80090f4:	4b36      	ldr	r3, [pc, #216]	; (80091d0 <oled_BtDevInfoSplash+0xec>)
 80090f6:	380a      	subs	r0, #10
 80090f8:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 80090fa:	2101      	movs	r1, #1
 80090fc:	200e      	movs	r0, #14
 80090fe:	f002 f8cd 	bl	800b29c <ssd1306_SetCursor>
		char tmp[10];
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 8009102:	4b34      	ldr	r3, [pc, #208]	; (80091d4 <oled_BtDevInfoSplash+0xf0>)
 8009104:	2209      	movs	r2, #9
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	a805      	add	r0, sp, #20
 800910a:	1861      	adds	r1, r4, r1
 800910c:	f002 fbec 	bl	800b8e8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 8009110:	0020      	movs	r0, r4
 8009112:	f7f7 f801 	bl	8000118 <strlen>
 8009116:	0002      	movs	r2, r0
 8009118:	201d      	movs	r0, #29
 800911a:	3a09      	subs	r2, #9
 800911c:	2100      	movs	r1, #0
 800911e:	4468      	add	r0, sp
 8009120:	f002 fbeb 	bl	800b8fa <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 8009124:	cd06      	ldmia	r5!, {r1, r2}
 8009126:	2301      	movs	r3, #1
 8009128:	a805      	add	r0, sp, #20
	}else{
		ssd1306_SetCursor((128-(strlen(dev->name))*11)/2, 1);
		ssd1306_WriteString(dev->name, Font_11x18, White);
 800912a:	f002 f8a3 	bl	800b274 <ssd1306_WriteString>
	}

	//Vypisou se udaje
	char msg[25];
	sprintf(msg, "%02X-%02X-%02X-%02X-%02X-%02X", dev->mac[0], dev->mac[1], dev->mac[2], dev->mac[3], dev->mac[4], dev->mac[5]);
 800912e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009130:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009136:	4928      	ldr	r1, [pc, #160]	; (80091d8 <oled_BtDevInfoSplash+0xf4>)
 8009138:	9302      	str	r3, [sp, #8]
 800913a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800913c:	a805      	add	r0, sp, #20
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 30);
 8009142:	2707      	movs	r7, #7
	sprintf(msg, "%02X-%02X-%02X-%02X-%02X-%02X", dev->mac[0], dev->mac[1], dev->mac[2], dev->mac[3], dev->mac[4], dev->mac[5]);
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009148:	f002 fc9a 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 30);
 800914c:	a805      	add	r0, sp, #20
 800914e:	f7f6 ffe3 	bl	8000118 <strlen>
 8009152:	2580      	movs	r5, #128	; 0x80
 8009154:	4378      	muls	r0, r7
 8009156:	1a28      	subs	r0, r5, r0
 8009158:	0840      	lsrs	r0, r0, #1
 800915a:	b2c0      	uxtb	r0, r0
 800915c:	211e      	movs	r1, #30
 800915e:	f002 f89d 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8009162:	4e1e      	ldr	r6, [pc, #120]	; (80091dc <oled_BtDevInfoSplash+0xf8>)
 8009164:	2301      	movs	r3, #1
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	6872      	ldr	r2, [r6, #4]
 800916a:	a805      	add	r0, sp, #20
 800916c:	f002 f882 	bl	800b274 <ssd1306_WriteString>

	//Vypise se RSSI
	sprintf(msg, "RSSI: %ddB", dev->rssi);
 8009170:	2254      	movs	r2, #84	; 0x54
 8009172:	491b      	ldr	r1, [pc, #108]	; (80091e0 <oled_BtDevInfoSplash+0xfc>)
 8009174:	56a2      	ldrsb	r2, [r4, r2]
 8009176:	a805      	add	r0, sp, #20
 8009178:	f002 fc82 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 43);
 800917c:	a805      	add	r0, sp, #20
 800917e:	f7f6 ffcb 	bl	8000118 <strlen>
 8009182:	4378      	muls	r0, r7
 8009184:	1a28      	subs	r0, r5, r0
 8009186:	0840      	lsrs	r0, r0, #1
 8009188:	b2c0      	uxtb	r0, r0
 800918a:	212b      	movs	r1, #43	; 0x2b
 800918c:	f002 f886 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 8009190:	ce06      	ldmia	r6!, {r1, r2}
 8009192:	2301      	movs	r3, #1
 8009194:	a805      	add	r0, sp, #20
 8009196:	f002 f86d 	bl	800b274 <ssd1306_WriteString>


	//Pokud se klikne, vrati se do menu
	if(encoderclick){
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <oled_BtDevInfoSplash+0x100>)
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	2a00      	cmp	r2, #0
 80091a0:	d004      	beq.n	80091ac <oled_BtDevInfoSplash+0xc8>
		oledType = OLED_MENU;
 80091a2:	2102      	movs	r1, #2
 80091a4:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <oled_BtDevInfoSplash+0x104>)
 80091a6:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
	}
}
 80091ac:	b00d      	add	sp, #52	; 0x34
 80091ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ssd1306_SetCursor((128-(strlen(dev->name))*11)/2, 1);
 80091b0:	230b      	movs	r3, #11
 80091b2:	4358      	muls	r0, r3
 80091b4:	3375      	adds	r3, #117	; 0x75
 80091b6:	1a18      	subs	r0, r3, r0
 80091b8:	0840      	lsrs	r0, r0, #1
 80091ba:	b2c0      	uxtb	r0, r0
 80091bc:	2101      	movs	r1, #1
 80091be:	f002 f86d 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 80091c2:	cd06      	ldmia	r5!, {r1, r2}
 80091c4:	2301      	movs	r3, #1
 80091c6:	0020      	movs	r0, r4
 80091c8:	e7af      	b.n	800912a <oled_BtDevInfoSplash+0x46>
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	200003e8 	.word	0x200003e8
 80091d0:	20000abc 	.word	0x20000abc
 80091d4:	20003b10 	.word	0x20003b10
 80091d8:	0800de70 	.word	0x0800de70
 80091dc:	200003f8 	.word	0x200003f8
 80091e0:	0800e0a5 	.word	0x0800e0a5
 80091e4:	200028b4 	.word	0x200028b4
 80091e8:	20000c40 	.word	0x20000c40

080091ec <oled_LoadingSplash>:
void oled_LoadingSplash(char * msg){
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	0004      	movs	r4, r0
	ssd1306_SetCursor((128-(strlen(msg))*11)/2, 15);
 80091f0:	f7f6 ff92 	bl	8000118 <strlen>
 80091f4:	0003      	movs	r3, r0
 80091f6:	200b      	movs	r0, #11
 80091f8:	4358      	muls	r0, r3
 80091fa:	2380      	movs	r3, #128	; 0x80
 80091fc:	1a18      	subs	r0, r3, r0
 80091fe:	0840      	lsrs	r0, r0, #1
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8009200:	2601      	movs	r6, #1
	ssd1306_SetCursor((128-(strlen(msg))*11)/2, 15);
 8009202:	b2c0      	uxtb	r0, r0
 8009204:	210f      	movs	r1, #15
 8009206:	f002 f849 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800920a:	0020      	movs	r0, r4
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 800920c:	2421      	movs	r4, #33	; 0x21
	ssd1306_WriteString(msg, Font_11x18, White);
 800920e:	4a1a      	ldr	r2, [pc, #104]	; (8009278 <oled_LoadingSplash+0x8c>)
 8009210:	2301      	movs	r3, #1
 8009212:	6811      	ldr	r1, [r2, #0]
 8009214:	6852      	ldr	r2, [r2, #4]
 8009216:	f002 f82d 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor(36,35);
 800921a:	2123      	movs	r1, #35	; 0x23
 800921c:	2024      	movs	r0, #36	; 0x24
 800921e:	f002 f83d 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - (loadingStat & 0x01), Icon_11x18, White);
 8009222:	4f16      	ldr	r7, [pc, #88]	; (800927c <oled_LoadingSplash+0x90>)
 8009224:	4d16      	ldr	r5, [pc, #88]	; (8009280 <oled_LoadingSplash+0x94>)
 8009226:	6838      	ldr	r0, [r7, #0]
 8009228:	0033      	movs	r3, r6
 800922a:	4030      	ands	r0, r6
 800922c:	1a20      	subs	r0, r4, r0
 800922e:	686a      	ldr	r2, [r5, #4]
 8009230:	6829      	ldr	r1, [r5, #0]
 8009232:	b2c0      	uxtb	r0, r0
 8009234:	f001 ffc8 	bl	800b1c8 <ssd1306_WriteChar>
	ssd1306_SetCursor(58,35);
 8009238:	2123      	movs	r1, #35	; 0x23
 800923a:	203a      	movs	r0, #58	; 0x3a
 800923c:	f002 f82e 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>1) & 0x01), Icon_11x18, White);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	6829      	ldr	r1, [r5, #0]
 8009244:	1058      	asrs	r0, r3, #1
 8009246:	4030      	ands	r0, r6
 8009248:	1a20      	subs	r0, r4, r0
 800924a:	0033      	movs	r3, r6
 800924c:	686a      	ldr	r2, [r5, #4]
 800924e:	b2c0      	uxtb	r0, r0
 8009250:	f001 ffba 	bl	800b1c8 <ssd1306_WriteChar>
	ssd1306_SetCursor(80,35);
 8009254:	2123      	movs	r1, #35	; 0x23
 8009256:	2050      	movs	r0, #80	; 0x50
 8009258:	f002 f820 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteChar(33 - ((loadingStat>>2) & 0x01), Icon_11x18, White);
 800925c:	cd06      	ldmia	r5!, {r1, r2}
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	0033      	movs	r3, r6
 8009262:	1080      	asrs	r0, r0, #2
 8009264:	4030      	ands	r0, r6
 8009266:	1a20      	subs	r0, r4, r0
 8009268:	b2c0      	uxtb	r0, r0
 800926a:	f001 ffad 	bl	800b1c8 <ssd1306_WriteChar>
	encoderclick = 0;
 800926e:	2200      	movs	r2, #0
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <oled_LoadingSplash+0x98>)
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	200003e8 	.word	0x200003e8
 800927c:	20002c98 	.word	0x20002c98
 8009280:	20000400 	.word	0x20000400
 8009284:	200028b4 	.word	0x200028b4

08009288 <oled_BtDevKeyEnterSplash>:
}


void oled_BtDevKeyEnterSplash(struct btDevice * dev){

	keyboardSidePosMax = 5;
 8009288:	2305      	movs	r3, #5
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 800928a:	b5f0      	push	{r4, r5, r6, r7, lr}
	keyboardSidePosMax = 5;
 800928c:	4dda      	ldr	r5, [pc, #872]	; (80095f8 <oled_BtDevKeyEnterSplash+0x370>)
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 800928e:	b093      	sub	sp, #76	; 0x4c

	char msg[25];

	sprintf(msg, "Vlozte PIN");
 8009290:	49da      	ldr	r1, [pc, #872]	; (80095fc <oled_BtDevKeyEnterSplash+0x374>)
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 8009292:	0007      	movs	r7, r0
	sprintf(msg, "Vlozte PIN");
 8009294:	a80b      	add	r0, sp, #44	; 0x2c
	keyboardSidePosMax = 5;
 8009296:	602b      	str	r3, [r5, #0]
	sprintf(msg, "Vlozte PIN");
 8009298:	f002 fc4c 	bl	800bb34 <strcpy>
	ssd1306_SetCursor((128-((float)strlen(msg))*11)/2, 1);
 800929c:	a80b      	add	r0, sp, #44	; 0x2c
 800929e:	f7f6 ff3b 	bl	8000118 <strlen>
 80092a2:	f7f7 febf 	bl	8001024 <__aeabi_ui2f>
 80092a6:	49d6      	ldr	r1, [pc, #856]	; (8009600 <oled_BtDevKeyEnterSplash+0x378>)
 80092a8:	f7f7 fb90 	bl	80009cc <__aeabi_fmul>
 80092ac:	1c01      	adds	r1, r0, #0
 80092ae:	2086      	movs	r0, #134	; 0x86
 80092b0:	05c0      	lsls	r0, r0, #23
 80092b2:	f7f7 fcab 	bl	8000c0c <__aeabi_fsub>
 80092b6:	21fc      	movs	r1, #252	; 0xfc
 80092b8:	0589      	lsls	r1, r1, #22
 80092ba:	f7f7 fb87 	bl	80009cc <__aeabi_fmul>
 80092be:	f7f7 f91b 	bl	80004f8 <__aeabi_f2uiz>
 80092c2:	2101      	movs	r1, #1
 80092c4:	b2c0      	uxtb	r0, r0
 80092c6:	f001 ffe9 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 80092ca:	4cce      	ldr	r4, [pc, #824]	; (8009604 <oled_BtDevKeyEnterSplash+0x37c>)
 80092cc:	2301      	movs	r3, #1
 80092ce:	6821      	ldr	r1, [r4, #0]
 80092d0:	6862      	ldr	r2, [r4, #4]
 80092d2:	a80b      	add	r0, sp, #44	; 0x2c
 80092d4:	f001 ffce 	bl	800b274 <ssd1306_WriteString>


	sprintf(msg, "%06ld", dev->pin);
 80092d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092da:	49cb      	ldr	r1, [pc, #812]	; (8009608 <oled_BtDevKeyEnterSplash+0x380>)
 80092dc:	a80b      	add	r0, sp, #44	; 0x2c
 80092de:	f002 fbcf 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-((float)strlen(msg))*11)/2, 28);
 80092e2:	a80b      	add	r0, sp, #44	; 0x2c
 80092e4:	f7f6 ff18 	bl	8000118 <strlen>
 80092e8:	f7f7 fe9c 	bl	8001024 <__aeabi_ui2f>
 80092ec:	49c4      	ldr	r1, [pc, #784]	; (8009600 <oled_BtDevKeyEnterSplash+0x378>)
 80092ee:	f7f7 fb6d 	bl	80009cc <__aeabi_fmul>
 80092f2:	1c01      	adds	r1, r0, #0
 80092f4:	2086      	movs	r0, #134	; 0x86
 80092f6:	05c0      	lsls	r0, r0, #23
 80092f8:	f7f7 fc88 	bl	8000c0c <__aeabi_fsub>
 80092fc:	21fc      	movs	r1, #252	; 0xfc
 80092fe:	0589      	lsls	r1, r1, #22
 8009300:	f7f7 fb64 	bl	80009cc <__aeabi_fmul>
 8009304:	f7f7 f8f8 	bl	80004f8 <__aeabi_f2uiz>
 8009308:	211c      	movs	r1, #28
 800930a:	b2c0      	uxtb	r0, r0
 800930c:	f001 ffc6 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8009310:	cc06      	ldmia	r4!, {r1, r2}
 8009312:	2301      	movs	r3, #1
 8009314:	a80b      	add	r0, sp, #44	; 0x2c
 8009316:	f001 ffad 	bl	800b274 <ssd1306_WriteString>

	if(loadingToggle){
 800931a:	4bbc      	ldr	r3, [pc, #752]	; (800960c <oled_BtDevKeyEnterSplash+0x384>)
 800931c:	4ebc      	ldr	r6, [pc, #752]	; (8009610 <oled_BtDevKeyEnterSplash+0x388>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d000      	beq.n	8009326 <oled_BtDevKeyEnterSplash+0x9e>
 8009324:	e094      	b.n	8009450 <oled_BtDevKeyEnterSplash+0x1c8>
			}
		}
	}


	uint8_t digit = (dev->pin / (long int)pow(10, keyboardSidePosMax-keyboardSidePos)) - (dev->pin/(long int)pow(10, keyboardSidePosMax-keyboardSidePos+1))*10;
 8009326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009328:	6832      	ldr	r2, [r6, #0]
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	1a98      	subs	r0, r3, r2
 8009330:	f7f9 fbec 	bl	8002b0c <__aeabi_i2d>
 8009334:	0002      	movs	r2, r0
 8009336:	000b      	movs	r3, r1
 8009338:	2000      	movs	r0, #0
 800933a:	49b6      	ldr	r1, [pc, #728]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 800933c:	f003 fcc0 	bl	800ccc0 <pow>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	6832      	ldr	r2, [r6, #0]
 8009344:	9002      	str	r0, [sp, #8]
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	1a98      	subs	r0, r3, r2
 800934a:	3001      	adds	r0, #1
 800934c:	f7f9 fbde 	bl	8002b0c <__aeabi_i2d>
 8009350:	000b      	movs	r3, r1
 8009352:	0002      	movs	r2, r0
 8009354:	49af      	ldr	r1, [pc, #700]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 8009356:	2000      	movs	r0, #0
 8009358:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800935a:	f003 fcb1 	bl	800ccc0 <pow>
 800935e:	f7f9 fba1 	bl	8002aa4 <__aeabi_d2iz>
 8009362:	0001      	movs	r1, r0
 8009364:	0020      	movs	r0, r4
 8009366:	240a      	movs	r4, #10
 8009368:	f7f6 ff7c 	bl	8000264 <__divsi3>
 800936c:	4264      	negs	r4, r4
 800936e:	4344      	muls	r4, r0
 8009370:	9802      	ldr	r0, [sp, #8]
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	f7f9 fb96 	bl	8002aa4 <__aeabi_d2iz>
 8009378:	0001      	movs	r1, r0
 800937a:	9800      	ldr	r0, [sp, #0]
 800937c:	f7f6 ff72 	bl	8000264 <__divsi3>
 8009380:	1824      	adds	r4, r4, r0
 8009382:	b2e3      	uxtb	r3, r4
 8009384:	9300      	str	r3, [sp, #0]

	if(keypadClicks.down){
 8009386:	4ba4      	ldr	r3, [pc, #656]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 8009388:	7b5b      	ldrb	r3, [r3, #13]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d063      	beq.n	8009456 <oled_BtDevKeyEnterSplash+0x1ce>
		//keyboardVertPos = digit;
		if(digit > 0){
 800938e:	9b00      	ldr	r3, [sp, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d016      	beq.n	80093c2 <oled_BtDevKeyEnterSplash+0x13a>
			dev->pin -= pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	6828      	ldr	r0, [r5, #0]
 8009398:	1ac0      	subs	r0, r0, r3
 800939a:	f7f9 fbb7 	bl	8002b0c <__aeabi_i2d>
 800939e:	0002      	movs	r2, r0
 80093a0:	000b      	movs	r3, r1
 80093a2:	2000      	movs	r0, #0
 80093a4:	499b      	ldr	r1, [pc, #620]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 80093a6:	f003 fc8b 	bl	800ccc0 <pow>
 80093aa:	0004      	movs	r4, r0
 80093ac:	000d      	movs	r5, r1
 80093ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80093b0:	f7f9 fbac 	bl	8002b0c <__aeabi_i2d>
 80093b4:	0022      	movs	r2, r4
 80093b6:	002b      	movs	r3, r5
 80093b8:	f7f9 f83e 	bl	8002438 <__aeabi_dsub>
 80093bc:	f7f9 fb72 	bl	8002aa4 <__aeabi_d2iz>
 80093c0:	65b8      	str	r0, [r7, #88]	; 0x58
		}

		keypadClicks.down = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	4a94      	ldr	r2, [pc, #592]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 80093c6:	7353      	strb	r3, [r2, #13]
	}else if(keypadClicks.nine){
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
		keypadClicks.nine = 0;
	}

	if(encoderclick){
 80093c8:	4c94      	ldr	r4, [pc, #592]	; (800961c <oled_BtDevKeyEnterSplash+0x394>)
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <oled_BtDevKeyEnterSplash+0x158>
		 workerAssert(&workerBtEnterPairingKey);
 80093d0:	4893      	ldr	r0, [pc, #588]	; (8009620 <oled_BtDevKeyEnterSplash+0x398>)
 80093d2:	f7ff fa4c 	bl	800886e <workerAssert>
		oledType = OLED_MENU;
 80093d6:	2202      	movs	r2, #2
 80093d8:	4b92      	ldr	r3, [pc, #584]	; (8009624 <oled_BtDevKeyEnterSplash+0x39c>)
 80093da:	601a      	str	r2, [r3, #0]
		encoderclick = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	6023      	str	r3, [r4, #0]
	}
}
 80093e0:	b013      	add	sp, #76	; 0x4c
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ssd1306_DrawPixel(x+(128-((float)strlen(msg))*11)/2+keyboardSidePos*11, y+48, White);
 80093e4:	a80b      	add	r0, sp, #44	; 0x2c
 80093e6:	f7f6 fe97 	bl	8000118 <strlen>
 80093ea:	f7f7 fe1b 	bl	8001024 <__aeabi_ui2f>
 80093ee:	4984      	ldr	r1, [pc, #528]	; (8009600 <oled_BtDevKeyEnterSplash+0x378>)
 80093f0:	f7f7 faec 	bl	80009cc <__aeabi_fmul>
 80093f4:	1c01      	adds	r1, r0, #0
 80093f6:	2086      	movs	r0, #134	; 0x86
 80093f8:	05c0      	lsls	r0, r0, #23
 80093fa:	f7f7 fc07 	bl	8000c0c <__aeabi_fsub>
 80093fe:	21fc      	movs	r1, #252	; 0xfc
 8009400:	0589      	lsls	r1, r1, #22
 8009402:	f7f7 fae3 	bl	80009cc <__aeabi_fmul>
 8009406:	9002      	str	r0, [sp, #8]
 8009408:	9800      	ldr	r0, [sp, #0]
 800940a:	f7f7 fdbb 	bl	8000f84 <__aeabi_i2f>
 800940e:	1c01      	adds	r1, r0, #0
 8009410:	9802      	ldr	r0, [sp, #8]
 8009412:	f7f7 f949 	bl	80006a8 <__aeabi_fadd>
 8009416:	9002      	str	r0, [sp, #8]
 8009418:	200b      	movs	r0, #11
 800941a:	6833      	ldr	r3, [r6, #0]
 800941c:	4358      	muls	r0, r3
 800941e:	f7f7 fdb1 	bl	8000f84 <__aeabi_i2f>
 8009422:	1c01      	adds	r1, r0, #0
 8009424:	9802      	ldr	r0, [sp, #8]
 8009426:	f7f7 f93f 	bl	80006a8 <__aeabi_fadd>
 800942a:	f7f7 f865 	bl	80004f8 <__aeabi_f2uiz>
 800942e:	0021      	movs	r1, r4
 8009430:	3401      	adds	r4, #1
 8009432:	b2c0      	uxtb	r0, r0
 8009434:	2201      	movs	r2, #1
 8009436:	b2e4      	uxtb	r4, r4
 8009438:	f001 fea2 	bl	800b180 <ssd1306_DrawPixel>
			for(int y = 0; y < 3; y++){
 800943c:	2c33      	cmp	r4, #51	; 0x33
 800943e:	d1d1      	bne.n	80093e4 <oled_BtDevKeyEnterSplash+0x15c>
		for(int x = 0; x < 11; x++){
 8009440:	9b00      	ldr	r3, [sp, #0]
 8009442:	3301      	adds	r3, #1
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	2b0b      	cmp	r3, #11
 8009448:	d100      	bne.n	800944c <oled_BtDevKeyEnterSplash+0x1c4>
 800944a:	e76c      	b.n	8009326 <oled_BtDevKeyEnterSplash+0x9e>
void oled_BtDevKeyEnterSplash(struct btDevice * dev){
 800944c:	2430      	movs	r4, #48	; 0x30
 800944e:	e7c9      	b.n	80093e4 <oled_BtDevKeyEnterSplash+0x15c>
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	e7fa      	b.n	800944c <oled_BtDevKeyEnterSplash+0x1c4>
	}else if(keypadClicks.up){
 8009456:	4b70      	ldr	r3, [pc, #448]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 8009458:	7b1c      	ldrb	r4, [r3, #12]
 800945a:	2c00      	cmp	r4, #0
 800945c:	d01d      	beq.n	800949a <oled_BtDevKeyEnterSplash+0x212>
		if(digit < 9){
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	2b08      	cmp	r3, #8
 8009462:	d816      	bhi.n	8009492 <oled_BtDevKeyEnterSplash+0x20a>
			dev->pin += pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009464:	6833      	ldr	r3, [r6, #0]
 8009466:	6828      	ldr	r0, [r5, #0]
 8009468:	1ac0      	subs	r0, r0, r3
 800946a:	f7f9 fb4f 	bl	8002b0c <__aeabi_i2d>
 800946e:	0002      	movs	r2, r0
 8009470:	000b      	movs	r3, r1
 8009472:	2000      	movs	r0, #0
 8009474:	4967      	ldr	r1, [pc, #412]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 8009476:	f003 fc23 	bl	800ccc0 <pow>
 800947a:	0004      	movs	r4, r0
 800947c:	000d      	movs	r5, r1
 800947e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009480:	f7f9 fb44 	bl	8002b0c <__aeabi_i2d>
 8009484:	0022      	movs	r2, r4
 8009486:	002b      	movs	r3, r5
 8009488:	f7f7 fe12 	bl	80010b0 <__aeabi_dadd>
 800948c:	f7f9 fb0a 	bl	8002aa4 <__aeabi_d2iz>
 8009490:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.up = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	4a60      	ldr	r2, [pc, #384]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 8009496:	7313      	strb	r3, [r2, #12]
 8009498:	e796      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.zero){
 800949a:	4b5f      	ldr	r3, [pc, #380]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 800949c:	7a5b      	ldrb	r3, [r3, #9]
 800949e:	9302      	str	r3, [sp, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d024      	beq.n	80094ee <oled_BtDevKeyEnterSplash+0x266>
			dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos));
 80094a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80094a6:	f7f9 fb31 	bl	8002b0c <__aeabi_i2d>
 80094aa:	6833      	ldr	r3, [r6, #0]
 80094ac:	9002      	str	r0, [sp, #8]
 80094ae:	9103      	str	r1, [sp, #12]
 80094b0:	6828      	ldr	r0, [r5, #0]
 80094b2:	1ac0      	subs	r0, r0, r3
 80094b4:	f7f9 fb2a 	bl	8002b0c <__aeabi_i2d>
 80094b8:	0002      	movs	r2, r0
 80094ba:	000b      	movs	r3, r1
 80094bc:	2000      	movs	r0, #0
 80094be:	4955      	ldr	r1, [pc, #340]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 80094c0:	f003 fbfe 	bl	800ccc0 <pow>
 80094c4:	0005      	movs	r5, r0
 80094c6:	000e      	movs	r6, r1
 80094c8:	9800      	ldr	r0, [sp, #0]
 80094ca:	f7f9 fb1f 	bl	8002b0c <__aeabi_i2d>
 80094ce:	002a      	movs	r2, r5
 80094d0:	0033      	movs	r3, r6
 80094d2:	f7f8 fd31 	bl	8001f38 <__aeabi_dmul>
 80094d6:	000b      	movs	r3, r1
 80094d8:	0002      	movs	r2, r0
 80094da:	9802      	ldr	r0, [sp, #8]
 80094dc:	9903      	ldr	r1, [sp, #12]
 80094de:	f7f8 ffab 	bl	8002438 <__aeabi_dsub>
 80094e2:	f7f9 fadf 	bl	8002aa4 <__aeabi_d2iz>
			keypadClicks.zero = 0;
 80094e6:	4b4c      	ldr	r3, [pc, #304]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
			dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos));
 80094e8:	65b8      	str	r0, [r7, #88]	; 0x58
			keypadClicks.zero = 0;
 80094ea:	725c      	strb	r4, [r3, #9]
 80094ec:	e76c      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.one){
 80094ee:	4b4a      	ldr	r3, [pc, #296]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d037      	beq.n	8009568 <oled_BtDevKeyEnterSplash+0x2e0>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + pow(10,(keyboardSidePosMax-keyboardSidePos));
 80094f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80094fa:	f7f9 fb07 	bl	8002b0c <__aeabi_i2d>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	6832      	ldr	r2, [r6, #0]
 8009502:	9004      	str	r0, [sp, #16]
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	1a98      	subs	r0, r3, r2
 8009508:	f7f9 fb00 	bl	8002b0c <__aeabi_i2d>
 800950c:	0002      	movs	r2, r0
 800950e:	000b      	movs	r3, r1
 8009510:	2000      	movs	r0, #0
 8009512:	4940      	ldr	r1, [pc, #256]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 8009514:	f003 fbd4 	bl	800ccc0 <pow>
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	9006      	str	r0, [sp, #24]
 800951c:	9107      	str	r1, [sp, #28]
 800951e:	6828      	ldr	r0, [r5, #0]
 8009520:	1ac0      	subs	r0, r0, r3
 8009522:	f7f9 faf3 	bl	8002b0c <__aeabi_i2d>
 8009526:	0002      	movs	r2, r0
 8009528:	000b      	movs	r3, r1
 800952a:	2000      	movs	r0, #0
 800952c:	4939      	ldr	r1, [pc, #228]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 800952e:	f003 fbc7 	bl	800ccc0 <pow>
 8009532:	0004      	movs	r4, r0
 8009534:	9800      	ldr	r0, [sp, #0]
 8009536:	000d      	movs	r5, r1
 8009538:	f7f9 fae8 	bl	8002b0c <__aeabi_i2d>
 800953c:	9a06      	ldr	r2, [sp, #24]
 800953e:	9b07      	ldr	r3, [sp, #28]
 8009540:	f7f8 fcfa 	bl	8001f38 <__aeabi_dmul>
 8009544:	0002      	movs	r2, r0
 8009546:	000b      	movs	r3, r1
 8009548:	9804      	ldr	r0, [sp, #16]
 800954a:	9905      	ldr	r1, [sp, #20]
 800954c:	f7f8 ff74 	bl	8002438 <__aeabi_dsub>
 8009550:	0022      	movs	r2, r4
 8009552:	002b      	movs	r3, r5
 8009554:	f7f7 fdac 	bl	80010b0 <__aeabi_dadd>
 8009558:	f7f9 faa4 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.one = 0;
 800955c:	466a      	mov	r2, sp
 800955e:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 8009560:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009562:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.one = 0;
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e72f      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.two){
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	9302      	str	r3, [sp, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d05a      	beq.n	8009628 <oled_BtDevKeyEnterSplash+0x3a0>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 2*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009572:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009574:	f7f9 faca 	bl	8002b0c <__aeabi_i2d>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	6832      	ldr	r2, [r6, #0]
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	9103      	str	r1, [sp, #12]
 8009580:	1a98      	subs	r0, r3, r2
 8009582:	f7f9 fac3 	bl	8002b0c <__aeabi_i2d>
 8009586:	0002      	movs	r2, r0
 8009588:	000b      	movs	r3, r1
 800958a:	2000      	movs	r0, #0
 800958c:	4921      	ldr	r1, [pc, #132]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 800958e:	f003 fb97 	bl	800ccc0 <pow>
 8009592:	6833      	ldr	r3, [r6, #0]
 8009594:	9006      	str	r0, [sp, #24]
 8009596:	9107      	str	r1, [sp, #28]
 8009598:	6828      	ldr	r0, [r5, #0]
 800959a:	1ac0      	subs	r0, r0, r3
 800959c:	f7f9 fab6 	bl	8002b0c <__aeabi_i2d>
 80095a0:	0002      	movs	r2, r0
 80095a2:	000b      	movs	r3, r1
 80095a4:	2000      	movs	r0, #0
 80095a6:	491b      	ldr	r1, [pc, #108]	; (8009614 <oled_BtDevKeyEnterSplash+0x38c>)
 80095a8:	f003 fb8a 	bl	800ccc0 <pow>
 80095ac:	0004      	movs	r4, r0
 80095ae:	9800      	ldr	r0, [sp, #0]
 80095b0:	000d      	movs	r5, r1
 80095b2:	f7f9 faab 	bl	8002b0c <__aeabi_i2d>
 80095b6:	9a06      	ldr	r2, [sp, #24]
 80095b8:	9b07      	ldr	r3, [sp, #28]
 80095ba:	f7f8 fcbd 	bl	8001f38 <__aeabi_dmul>
 80095be:	0002      	movs	r2, r0
 80095c0:	000b      	movs	r3, r1
 80095c2:	9802      	ldr	r0, [sp, #8]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	f7f8 ff37 	bl	8002438 <__aeabi_dsub>
 80095ca:	0022      	movs	r2, r4
 80095cc:	9000      	str	r0, [sp, #0]
 80095ce:	9101      	str	r1, [sp, #4]
 80095d0:	002b      	movs	r3, r5
 80095d2:	0020      	movs	r0, r4
 80095d4:	0029      	movs	r1, r5
 80095d6:	f7f7 fd6b 	bl	80010b0 <__aeabi_dadd>
 80095da:	0002      	movs	r2, r0
 80095dc:	000b      	movs	r3, r1
 80095de:	9800      	ldr	r0, [sp, #0]
 80095e0:	9901      	ldr	r1, [sp, #4]
 80095e2:	f7f7 fd65 	bl	80010b0 <__aeabi_dadd>
 80095e6:	f7f9 fa5d 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.two = 0;
 80095ea:	466a      	mov	r2, sp
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <oled_BtDevKeyEnterSplash+0x390>)
 80095ee:	7c12      	ldrb	r2, [r2, #16]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 2*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80095f0:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.two = 0;
 80095f2:	705a      	strb	r2, [r3, #1]
 80095f4:	e6e8      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	20002f88 	.word	0x20002f88
 80095fc:	0800e0b0 	.word	0x0800e0b0
 8009600:	41300000 	.word	0x41300000
 8009604:	200003e8 	.word	0x200003e8
 8009608:	0800e0dd 	.word	0x0800e0dd
 800960c:	20002fc0 	.word	0x20002fc0
 8009610:	20002ca4 	.word	0x20002ca4
 8009614:	40240000 	.word	0x40240000
 8009618:	20002cba 	.word	0x20002cba
 800961c:	200028b4 	.word	0x200028b4
 8009620:	20000c46 	.word	0x20000c46
 8009624:	20000c40 	.word	0x20000c40
	}else if(keypadClicks.three){
 8009628:	4bd4      	ldr	r3, [pc, #848]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 800962a:	789b      	ldrb	r3, [r3, #2]
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d041      	beq.n	80096b6 <oled_BtDevKeyEnterSplash+0x42e>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 3*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009632:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009634:	f7f9 fa6a 	bl	8002b0c <__aeabi_i2d>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	6832      	ldr	r2, [r6, #0]
 800963c:	9004      	str	r0, [sp, #16]
 800963e:	9105      	str	r1, [sp, #20]
 8009640:	1a98      	subs	r0, r3, r2
 8009642:	f7f9 fa63 	bl	8002b0c <__aeabi_i2d>
 8009646:	0002      	movs	r2, r0
 8009648:	000b      	movs	r3, r1
 800964a:	2000      	movs	r0, #0
 800964c:	49cc      	ldr	r1, [pc, #816]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 800964e:	f003 fb37 	bl	800ccc0 <pow>
 8009652:	6833      	ldr	r3, [r6, #0]
 8009654:	9006      	str	r0, [sp, #24]
 8009656:	9107      	str	r1, [sp, #28]
 8009658:	6828      	ldr	r0, [r5, #0]
 800965a:	1ac0      	subs	r0, r0, r3
 800965c:	f7f9 fa56 	bl	8002b0c <__aeabi_i2d>
 8009660:	0002      	movs	r2, r0
 8009662:	000b      	movs	r3, r1
 8009664:	2000      	movs	r0, #0
 8009666:	49c6      	ldr	r1, [pc, #792]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 8009668:	f003 fb2a 	bl	800ccc0 <pow>
 800966c:	9008      	str	r0, [sp, #32]
 800966e:	9109      	str	r1, [sp, #36]	; 0x24
 8009670:	9800      	ldr	r0, [sp, #0]
 8009672:	f7f9 fa4b 	bl	8002b0c <__aeabi_i2d>
 8009676:	9a06      	ldr	r2, [sp, #24]
 8009678:	9b07      	ldr	r3, [sp, #28]
 800967a:	f7f8 fc5d 	bl	8001f38 <__aeabi_dmul>
 800967e:	0002      	movs	r2, r0
 8009680:	000b      	movs	r3, r1
 8009682:	9804      	ldr	r0, [sp, #16]
 8009684:	9905      	ldr	r1, [sp, #20]
 8009686:	f7f8 fed7 	bl	8002438 <__aeabi_dsub>
 800968a:	2200      	movs	r2, #0
 800968c:	0004      	movs	r4, r0
 800968e:	000d      	movs	r5, r1
 8009690:	9808      	ldr	r0, [sp, #32]
 8009692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009694:	4bbb      	ldr	r3, [pc, #748]	; (8009984 <oled_BtDevKeyEnterSplash+0x6fc>)
 8009696:	f7f8 fc4f 	bl	8001f38 <__aeabi_dmul>
 800969a:	0002      	movs	r2, r0
 800969c:	000b      	movs	r3, r1
 800969e:	0020      	movs	r0, r4
 80096a0:	0029      	movs	r1, r5
 80096a2:	f7f7 fd05 	bl	80010b0 <__aeabi_dadd>
 80096a6:	f7f9 f9fd 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.three = 0;
 80096aa:	466a      	mov	r2, sp
 80096ac:	4bb3      	ldr	r3, [pc, #716]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 80096ae:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 3*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80096b0:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.three = 0;
 80096b2:	709a      	strb	r2, [r3, #2]
 80096b4:	e688      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.four){
 80096b6:	4bb1      	ldr	r3, [pc, #708]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 80096b8:	78db      	ldrb	r3, [r3, #3]
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d041      	beq.n	8009744 <oled_BtDevKeyEnterSplash+0x4bc>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 4*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80096c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80096c2:	f7f9 fa23 	bl	8002b0c <__aeabi_i2d>
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	6832      	ldr	r2, [r6, #0]
 80096ca:	9002      	str	r0, [sp, #8]
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	1a98      	subs	r0, r3, r2
 80096d0:	f7f9 fa1c 	bl	8002b0c <__aeabi_i2d>
 80096d4:	0002      	movs	r2, r0
 80096d6:	000b      	movs	r3, r1
 80096d8:	2000      	movs	r0, #0
 80096da:	49a9      	ldr	r1, [pc, #676]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 80096dc:	f003 faf0 	bl	800ccc0 <pow>
 80096e0:	6833      	ldr	r3, [r6, #0]
 80096e2:	9006      	str	r0, [sp, #24]
 80096e4:	9107      	str	r1, [sp, #28]
 80096e6:	6828      	ldr	r0, [r5, #0]
 80096e8:	1ac0      	subs	r0, r0, r3
 80096ea:	f7f9 fa0f 	bl	8002b0c <__aeabi_i2d>
 80096ee:	0002      	movs	r2, r0
 80096f0:	000b      	movs	r3, r1
 80096f2:	2000      	movs	r0, #0
 80096f4:	49a2      	ldr	r1, [pc, #648]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 80096f6:	f003 fae3 	bl	800ccc0 <pow>
 80096fa:	9008      	str	r0, [sp, #32]
 80096fc:	9109      	str	r1, [sp, #36]	; 0x24
 80096fe:	9800      	ldr	r0, [sp, #0]
 8009700:	f7f9 fa04 	bl	8002b0c <__aeabi_i2d>
 8009704:	9a06      	ldr	r2, [sp, #24]
 8009706:	9b07      	ldr	r3, [sp, #28]
 8009708:	f7f8 fc16 	bl	8001f38 <__aeabi_dmul>
 800970c:	0002      	movs	r2, r0
 800970e:	000b      	movs	r3, r1
 8009710:	9802      	ldr	r0, [sp, #8]
 8009712:	9903      	ldr	r1, [sp, #12]
 8009714:	f7f8 fe90 	bl	8002438 <__aeabi_dsub>
 8009718:	2200      	movs	r2, #0
 800971a:	0004      	movs	r4, r0
 800971c:	000d      	movs	r5, r1
 800971e:	9808      	ldr	r0, [sp, #32]
 8009720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009722:	4b99      	ldr	r3, [pc, #612]	; (8009988 <oled_BtDevKeyEnterSplash+0x700>)
 8009724:	f7f8 fc08 	bl	8001f38 <__aeabi_dmul>
 8009728:	0002      	movs	r2, r0
 800972a:	000b      	movs	r3, r1
 800972c:	0020      	movs	r0, r4
 800972e:	0029      	movs	r1, r5
 8009730:	f7f7 fcbe 	bl	80010b0 <__aeabi_dadd>
 8009734:	f7f9 f9b6 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.four = 0;
 8009738:	466a      	mov	r2, sp
 800973a:	4b90      	ldr	r3, [pc, #576]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 800973c:	7c12      	ldrb	r2, [r2, #16]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 4*pow(10,(keyboardSidePosMax-keyboardSidePos));
 800973e:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.four = 0;
 8009740:	70da      	strb	r2, [r3, #3]
 8009742:	e641      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.five){
 8009744:	4b8d      	ldr	r3, [pc, #564]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 8009746:	791b      	ldrb	r3, [r3, #4]
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d041      	beq.n	80097d2 <oled_BtDevKeyEnterSplash+0x54a>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 5*pow(10,(keyboardSidePosMax-keyboardSidePos));
 800974e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009750:	f7f9 f9dc 	bl	8002b0c <__aeabi_i2d>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	6832      	ldr	r2, [r6, #0]
 8009758:	9004      	str	r0, [sp, #16]
 800975a:	9105      	str	r1, [sp, #20]
 800975c:	1a98      	subs	r0, r3, r2
 800975e:	f7f9 f9d5 	bl	8002b0c <__aeabi_i2d>
 8009762:	0002      	movs	r2, r0
 8009764:	000b      	movs	r3, r1
 8009766:	2000      	movs	r0, #0
 8009768:	4985      	ldr	r1, [pc, #532]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 800976a:	f003 faa9 	bl	800ccc0 <pow>
 800976e:	6833      	ldr	r3, [r6, #0]
 8009770:	9006      	str	r0, [sp, #24]
 8009772:	9107      	str	r1, [sp, #28]
 8009774:	6828      	ldr	r0, [r5, #0]
 8009776:	1ac0      	subs	r0, r0, r3
 8009778:	f7f9 f9c8 	bl	8002b0c <__aeabi_i2d>
 800977c:	0002      	movs	r2, r0
 800977e:	000b      	movs	r3, r1
 8009780:	2000      	movs	r0, #0
 8009782:	497f      	ldr	r1, [pc, #508]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 8009784:	f003 fa9c 	bl	800ccc0 <pow>
 8009788:	9008      	str	r0, [sp, #32]
 800978a:	9109      	str	r1, [sp, #36]	; 0x24
 800978c:	9800      	ldr	r0, [sp, #0]
 800978e:	f7f9 f9bd 	bl	8002b0c <__aeabi_i2d>
 8009792:	9a06      	ldr	r2, [sp, #24]
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	f7f8 fbcf 	bl	8001f38 <__aeabi_dmul>
 800979a:	0002      	movs	r2, r0
 800979c:	000b      	movs	r3, r1
 800979e:	9804      	ldr	r0, [sp, #16]
 80097a0:	9905      	ldr	r1, [sp, #20]
 80097a2:	f7f8 fe49 	bl	8002438 <__aeabi_dsub>
 80097a6:	2200      	movs	r2, #0
 80097a8:	0004      	movs	r4, r0
 80097aa:	000d      	movs	r5, r1
 80097ac:	9808      	ldr	r0, [sp, #32]
 80097ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097b0:	4b76      	ldr	r3, [pc, #472]	; (800998c <oled_BtDevKeyEnterSplash+0x704>)
 80097b2:	f7f8 fbc1 	bl	8001f38 <__aeabi_dmul>
 80097b6:	0002      	movs	r2, r0
 80097b8:	000b      	movs	r3, r1
 80097ba:	0020      	movs	r0, r4
 80097bc:	0029      	movs	r1, r5
 80097be:	f7f7 fc77 	bl	80010b0 <__aeabi_dadd>
 80097c2:	f7f9 f96f 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.five = 0;
 80097c6:	466a      	mov	r2, sp
 80097c8:	4b6c      	ldr	r3, [pc, #432]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 80097ca:	7a12      	ldrb	r2, [r2, #8]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 5*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80097cc:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.five = 0;
 80097ce:	711a      	strb	r2, [r3, #4]
 80097d0:	e5fa      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.six){
 80097d2:	4b6a      	ldr	r3, [pc, #424]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 80097d4:	795b      	ldrb	r3, [r3, #5]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d041      	beq.n	800985e <oled_BtDevKeyEnterSplash+0x5d6>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 6*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80097da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80097dc:	f7f9 f996 	bl	8002b0c <__aeabi_i2d>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	6832      	ldr	r2, [r6, #0]
 80097e4:	9002      	str	r0, [sp, #8]
 80097e6:	9103      	str	r1, [sp, #12]
 80097e8:	1a98      	subs	r0, r3, r2
 80097ea:	f7f9 f98f 	bl	8002b0c <__aeabi_i2d>
 80097ee:	0002      	movs	r2, r0
 80097f0:	000b      	movs	r3, r1
 80097f2:	2000      	movs	r0, #0
 80097f4:	4962      	ldr	r1, [pc, #392]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 80097f6:	f003 fa63 	bl	800ccc0 <pow>
 80097fa:	6833      	ldr	r3, [r6, #0]
 80097fc:	9006      	str	r0, [sp, #24]
 80097fe:	9107      	str	r1, [sp, #28]
 8009800:	6828      	ldr	r0, [r5, #0]
 8009802:	1ac0      	subs	r0, r0, r3
 8009804:	f7f9 f982 	bl	8002b0c <__aeabi_i2d>
 8009808:	0002      	movs	r2, r0
 800980a:	000b      	movs	r3, r1
 800980c:	2000      	movs	r0, #0
 800980e:	495c      	ldr	r1, [pc, #368]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 8009810:	f003 fa56 	bl	800ccc0 <pow>
 8009814:	9008      	str	r0, [sp, #32]
 8009816:	9109      	str	r1, [sp, #36]	; 0x24
 8009818:	9800      	ldr	r0, [sp, #0]
 800981a:	f7f9 f977 	bl	8002b0c <__aeabi_i2d>
 800981e:	9a06      	ldr	r2, [sp, #24]
 8009820:	9b07      	ldr	r3, [sp, #28]
 8009822:	f7f8 fb89 	bl	8001f38 <__aeabi_dmul>
 8009826:	0002      	movs	r2, r0
 8009828:	000b      	movs	r3, r1
 800982a:	9802      	ldr	r0, [sp, #8]
 800982c:	9903      	ldr	r1, [sp, #12]
 800982e:	f7f8 fe03 	bl	8002438 <__aeabi_dsub>
 8009832:	2200      	movs	r2, #0
 8009834:	0004      	movs	r4, r0
 8009836:	000d      	movs	r5, r1
 8009838:	9808      	ldr	r0, [sp, #32]
 800983a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800983c:	4b54      	ldr	r3, [pc, #336]	; (8009990 <oled_BtDevKeyEnterSplash+0x708>)
 800983e:	f7f8 fb7b 	bl	8001f38 <__aeabi_dmul>
 8009842:	0002      	movs	r2, r0
 8009844:	000b      	movs	r3, r1
 8009846:	0020      	movs	r0, r4
 8009848:	0029      	movs	r1, r5
 800984a:	f7f7 fc31 	bl	80010b0 <__aeabi_dadd>
 800984e:	f7f9 f929 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.six = 0;
 8009852:	466a      	mov	r2, sp
 8009854:	4b49      	ldr	r3, [pc, #292]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 8009856:	7c12      	ldrb	r2, [r2, #16]
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 6*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009858:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.six = 0;
 800985a:	715a      	strb	r2, [r3, #5]
 800985c:	e5b4      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.seven){
 800985e:	4b47      	ldr	r3, [pc, #284]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 8009860:	799b      	ldrb	r3, [r3, #6]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d042      	beq.n	80098ec <oled_BtDevKeyEnterSplash+0x664>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 7*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009866:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009868:	f7f9 f950 	bl	8002b0c <__aeabi_i2d>
 800986c:	4d49      	ldr	r5, [pc, #292]	; (8009994 <oled_BtDevKeyEnterSplash+0x70c>)
 800986e:	4c4a      	ldr	r4, [pc, #296]	; (8009998 <oled_BtDevKeyEnterSplash+0x710>)
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	9103      	str	r1, [sp, #12]
 8009878:	1a98      	subs	r0, r3, r2
 800987a:	f7f9 f947 	bl	8002b0c <__aeabi_i2d>
 800987e:	0002      	movs	r2, r0
 8009880:	000b      	movs	r3, r1
 8009882:	2000      	movs	r0, #0
 8009884:	493e      	ldr	r1, [pc, #248]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 8009886:	f003 fa1b 	bl	800ccc0 <pow>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	9004      	str	r0, [sp, #16]
 800988e:	9105      	str	r1, [sp, #20]
 8009890:	6828      	ldr	r0, [r5, #0]
 8009892:	1ac0      	subs	r0, r0, r3
 8009894:	f7f9 f93a 	bl	8002b0c <__aeabi_i2d>
 8009898:	0002      	movs	r2, r0
 800989a:	000b      	movs	r3, r1
 800989c:	2000      	movs	r0, #0
 800989e:	4938      	ldr	r1, [pc, #224]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 80098a0:	f003 fa0e 	bl	800ccc0 <pow>
 80098a4:	9006      	str	r0, [sp, #24]
 80098a6:	9107      	str	r1, [sp, #28]
 80098a8:	9800      	ldr	r0, [sp, #0]
 80098aa:	f7f9 f92f 	bl	8002b0c <__aeabi_i2d>
 80098ae:	9a04      	ldr	r2, [sp, #16]
 80098b0:	9b05      	ldr	r3, [sp, #20]
 80098b2:	f7f8 fb41 	bl	8001f38 <__aeabi_dmul>
 80098b6:	0002      	movs	r2, r0
 80098b8:	000b      	movs	r3, r1
 80098ba:	9802      	ldr	r0, [sp, #8]
 80098bc:	9903      	ldr	r1, [sp, #12]
 80098be:	f7f8 fdbb 	bl	8002438 <__aeabi_dsub>
 80098c2:	2200      	movs	r2, #0
 80098c4:	0004      	movs	r4, r0
 80098c6:	000d      	movs	r5, r1
 80098c8:	9806      	ldr	r0, [sp, #24]
 80098ca:	9907      	ldr	r1, [sp, #28]
 80098cc:	4b33      	ldr	r3, [pc, #204]	; (800999c <oled_BtDevKeyEnterSplash+0x714>)
 80098ce:	f7f8 fb33 	bl	8001f38 <__aeabi_dmul>
 80098d2:	0002      	movs	r2, r0
 80098d4:	000b      	movs	r3, r1
 80098d6:	0020      	movs	r0, r4
 80098d8:	0029      	movs	r1, r5
 80098da:	f7f7 fbe9 	bl	80010b0 <__aeabi_dadd>
 80098de:	f7f9 f8e1 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.seven = 0;
 80098e2:	2200      	movs	r2, #0
 80098e4:	4b25      	ldr	r3, [pc, #148]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 7*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80098e6:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.seven = 0;
 80098e8:	719a      	strb	r2, [r3, #6]
 80098ea:	e56d      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
	}else if(keypadClicks.eight){
 80098ec:	4b23      	ldr	r3, [pc, #140]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
 80098ee:	79db      	ldrb	r3, [r3, #7]
 80098f0:	1e1e      	subs	r6, r3, #0
 80098f2:	d057      	beq.n	80099a4 <oled_BtDevKeyEnterSplash+0x71c>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 8*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80098f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80098f6:	f7f9 f909 	bl	8002b0c <__aeabi_i2d>
 80098fa:	4d26      	ldr	r5, [pc, #152]	; (8009994 <oled_BtDevKeyEnterSplash+0x70c>)
 80098fc:	4c26      	ldr	r4, [pc, #152]	; (8009998 <oled_BtDevKeyEnterSplash+0x710>)
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	9002      	str	r0, [sp, #8]
 8009904:	9103      	str	r1, [sp, #12]
 8009906:	1a98      	subs	r0, r3, r2
 8009908:	f7f9 f900 	bl	8002b0c <__aeabi_i2d>
 800990c:	0002      	movs	r2, r0
 800990e:	000b      	movs	r3, r1
 8009910:	2000      	movs	r0, #0
 8009912:	491b      	ldr	r1, [pc, #108]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 8009914:	f003 f9d4 	bl	800ccc0 <pow>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	9004      	str	r0, [sp, #16]
 800991c:	9105      	str	r1, [sp, #20]
 800991e:	6828      	ldr	r0, [r5, #0]
 8009920:	1ac0      	subs	r0, r0, r3
 8009922:	f7f9 f8f3 	bl	8002b0c <__aeabi_i2d>
 8009926:	0002      	movs	r2, r0
 8009928:	000b      	movs	r3, r1
 800992a:	2000      	movs	r0, #0
 800992c:	4914      	ldr	r1, [pc, #80]	; (8009980 <oled_BtDevKeyEnterSplash+0x6f8>)
 800992e:	f003 f9c7 	bl	800ccc0 <pow>
 8009932:	9006      	str	r0, [sp, #24]
 8009934:	9107      	str	r1, [sp, #28]
 8009936:	9800      	ldr	r0, [sp, #0]
 8009938:	f7f9 f8e8 	bl	8002b0c <__aeabi_i2d>
 800993c:	9a04      	ldr	r2, [sp, #16]
 800993e:	9b05      	ldr	r3, [sp, #20]
 8009940:	f7f8 fafa 	bl	8001f38 <__aeabi_dmul>
 8009944:	0002      	movs	r2, r0
 8009946:	000b      	movs	r3, r1
 8009948:	9802      	ldr	r0, [sp, #8]
 800994a:	9903      	ldr	r1, [sp, #12]
 800994c:	f7f8 fd74 	bl	8002438 <__aeabi_dsub>
 8009950:	2200      	movs	r2, #0
 8009952:	0004      	movs	r4, r0
 8009954:	000d      	movs	r5, r1
 8009956:	9806      	ldr	r0, [sp, #24]
 8009958:	9907      	ldr	r1, [sp, #28]
 800995a:	4b11      	ldr	r3, [pc, #68]	; (80099a0 <oled_BtDevKeyEnterSplash+0x718>)
 800995c:	f7f8 faec 	bl	8001f38 <__aeabi_dmul>
 8009960:	0002      	movs	r2, r0
 8009962:	000b      	movs	r3, r1
 8009964:	0020      	movs	r0, r4
 8009966:	0029      	movs	r1, r5
 8009968:	f7f7 fba2 	bl	80010b0 <__aeabi_dadd>
 800996c:	f7f9 f89a 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.eight = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	4a02      	ldr	r2, [pc, #8]	; (800997c <oled_BtDevKeyEnterSplash+0x6f4>)
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 8*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009974:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.eight = 0;
 8009976:	71d3      	strb	r3, [r2, #7]
 8009978:	e526      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	20002cba 	.word	0x20002cba
 8009980:	40240000 	.word	0x40240000
 8009984:	40080000 	.word	0x40080000
 8009988:	40100000 	.word	0x40100000
 800998c:	40140000 	.word	0x40140000
 8009990:	40180000 	.word	0x40180000
 8009994:	20002f88 	.word	0x20002f88
 8009998:	20002ca4 	.word	0x20002ca4
 800999c:	401c0000 	.word	0x401c0000
 80099a0:	40200000 	.word	0x40200000
	}else if(keypadClicks.nine){
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <oled_BtDevKeyEnterSplash+0x7ac>)
 80099a6:	7a1b      	ldrb	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d100      	bne.n	80099ae <oled_BtDevKeyEnterSplash+0x726>
 80099ac:	e50c      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
 80099ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80099b0:	f7f9 f8ac 	bl	8002b0c <__aeabi_i2d>
 80099b4:	4d20      	ldr	r5, [pc, #128]	; (8009a38 <oled_BtDevKeyEnterSplash+0x7b0>)
 80099b6:	4c21      	ldr	r4, [pc, #132]	; (8009a3c <oled_BtDevKeyEnterSplash+0x7b4>)
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	9002      	str	r0, [sp, #8]
 80099be:	9103      	str	r1, [sp, #12]
 80099c0:	1a98      	subs	r0, r3, r2
 80099c2:	f7f9 f8a3 	bl	8002b0c <__aeabi_i2d>
 80099c6:	0002      	movs	r2, r0
 80099c8:	000b      	movs	r3, r1
 80099ca:	2000      	movs	r0, #0
 80099cc:	491c      	ldr	r1, [pc, #112]	; (8009a40 <oled_BtDevKeyEnterSplash+0x7b8>)
 80099ce:	f003 f977 	bl	800ccc0 <pow>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	9004      	str	r0, [sp, #16]
 80099d6:	9105      	str	r1, [sp, #20]
 80099d8:	6828      	ldr	r0, [r5, #0]
 80099da:	1ac0      	subs	r0, r0, r3
 80099dc:	f7f9 f896 	bl	8002b0c <__aeabi_i2d>
 80099e0:	0002      	movs	r2, r0
 80099e2:	000b      	movs	r3, r1
 80099e4:	2000      	movs	r0, #0
 80099e6:	4916      	ldr	r1, [pc, #88]	; (8009a40 <oled_BtDevKeyEnterSplash+0x7b8>)
 80099e8:	f003 f96a 	bl	800ccc0 <pow>
 80099ec:	9006      	str	r0, [sp, #24]
 80099ee:	9107      	str	r1, [sp, #28]
 80099f0:	9800      	ldr	r0, [sp, #0]
 80099f2:	f7f9 f88b 	bl	8002b0c <__aeabi_i2d>
 80099f6:	9a04      	ldr	r2, [sp, #16]
 80099f8:	9b05      	ldr	r3, [sp, #20]
 80099fa:	f7f8 fa9d 	bl	8001f38 <__aeabi_dmul>
 80099fe:	0002      	movs	r2, r0
 8009a00:	000b      	movs	r3, r1
 8009a02:	9802      	ldr	r0, [sp, #8]
 8009a04:	9903      	ldr	r1, [sp, #12]
 8009a06:	f7f8 fd17 	bl	8002438 <__aeabi_dsub>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	0004      	movs	r4, r0
 8009a0e:	000d      	movs	r5, r1
 8009a10:	9806      	ldr	r0, [sp, #24]
 8009a12:	9907      	ldr	r1, [sp, #28]
 8009a14:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <oled_BtDevKeyEnterSplash+0x7bc>)
 8009a16:	f7f8 fa8f 	bl	8001f38 <__aeabi_dmul>
 8009a1a:	000b      	movs	r3, r1
 8009a1c:	0002      	movs	r2, r0
 8009a1e:	0029      	movs	r1, r5
 8009a20:	0020      	movs	r0, r4
 8009a22:	f7f7 fb45 	bl	80010b0 <__aeabi_dadd>
 8009a26:	f7f9 f83d 	bl	8002aa4 <__aeabi_d2iz>
		keypadClicks.nine = 0;
 8009a2a:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <oled_BtDevKeyEnterSplash+0x7ac>)
		dev->pin = dev->pin - digit*pow(10, (keyboardSidePosMax-keyboardSidePos)) + 9*pow(10,(keyboardSidePosMax-keyboardSidePos));
 8009a2c:	65b8      	str	r0, [r7, #88]	; 0x58
		keypadClicks.nine = 0;
 8009a2e:	721e      	strb	r6, [r3, #8]
 8009a30:	e4ca      	b.n	80093c8 <oled_BtDevKeyEnterSplash+0x140>
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	20002cba 	.word	0x20002cba
 8009a38:	20002f88 	.word	0x20002f88
 8009a3c:	20002ca4 	.word	0x20002ca4
 8009a40:	40240000 	.word	0x40240000
 8009a44:	40220000 	.word	0x40220000

08009a48 <oled_setDisplayedMenu>:
void oled_setDisplayedMenu(char *menuname ,struct menuitem (*menu)[], int menusize, int issubmenu){
 8009a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a4a:	000f      	movs	r7, r1
 8009a4c:	0015      	movs	r5, r2
 8009a4e:	0004      	movs	r4, r0
 8009a50:	9301      	str	r3, [sp, #4]
	dispmenuname = malloc(strlen(menuname)+1);
 8009a52:	f7f6 fb61 	bl	8000118 <strlen>
 8009a56:	3001      	adds	r0, #1
 8009a58:	f001 ff32 	bl	800b8c0 <malloc>
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <oled_setDisplayedMenu+0x58>)
	dispmenusize = menusize/sizeof(struct menuitem);
 8009a5e:	096a      	lsrs	r2, r5, #5
	dispmenuname = malloc(strlen(menuname)+1);
 8009a60:	6018      	str	r0, [r3, #0]
	dispmenusize = menusize/sizeof(struct menuitem);
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <oled_setDisplayedMenu+0x5c>)
	dispmenuname = malloc(strlen(menuname)+1);
 8009a64:	0006      	movs	r6, r0
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 8009a66:	0020      	movs	r0, r4
	dispmenusize = menusize/sizeof(struct menuitem);
 8009a68:	601a      	str	r2, [r3, #0]
	memcpy(dispmenuname, menuname, strlen(menuname)+1);
 8009a6a:	f7f6 fb55 	bl	8000118 <strlen>
 8009a6e:	0021      	movs	r1, r4
 8009a70:	1c42      	adds	r2, r0, #1
 8009a72:	0030      	movs	r0, r6
 8009a74:	f001 ff38 	bl	800b8e8 <memcpy>
	memcpy(&dispmenu, menu, menusize);
 8009a78:	002a      	movs	r2, r5
 8009a7a:	0039      	movs	r1, r7
 8009a7c:	480a      	ldr	r0, [pc, #40]	; (8009aa8 <oled_setDisplayedMenu+0x60>)
 8009a7e:	f001 ff33 	bl	800b8e8 <memcpy>
	dispmenusubmenu = issubmenu;
 8009a82:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <oled_setDisplayedMenu+0x64>)
 8009a84:	9a01      	ldr	r2, [sp, #4]
 8009a86:	601a      	str	r2, [r3, #0]
	encoderposOld = -1;
 8009a88:	2201      	movs	r2, #1
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <oled_setDisplayedMenu+0x68>)
 8009a8c:	4252      	negs	r2, r2
 8009a8e:	601a      	str	r2, [r3, #0]
	encoderpos = 0;
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <oled_setDisplayedMenu+0x6c>)
 8009a94:	601a      	str	r2, [r3, #0]
	oledType = OLED_MENU;
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <oled_setDisplayedMenu+0x70>)
 8009a98:	3202      	adds	r2, #2
 8009a9a:	601a      	str	r2, [r3, #0]
}
 8009a9c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009a9e:	46c0      	nop			; (mov r8, r8)
 8009aa0:	2000322c 	.word	0x2000322c
 8009aa4:	20003b08 	.word	0x20003b08
 8009aa8:	2000201c 	.word	0x2000201c
 8009aac:	20002f84 	.word	0x20002f84
 8009ab0:	20002fb8 	.word	0x20002fb8
 8009ab4:	20003b00 	.word	0x20003b00
 8009ab8:	20000c40 	.word	0x20000c40

08009abc <oled_DisplayStatusSplash>:
}




void oled_DisplayStatusSplash(){
 8009abc:	b510      	push	{r4, lr}

	char msg[20];
	//
	sprintf(msg, " %c%c%c%c ", dispSong[3], dispSong[2], dispSong[1], dispSong[0]);
 8009abe:	4924      	ldr	r1, [pc, #144]	; (8009b50 <oled_DisplayStatusSplash+0x94>)
void oled_DisplayStatusSplash(){
 8009ac0:	b088      	sub	sp, #32
	sprintf(msg, " %c%c%c%c ", dispSong[3], dispSong[2], dispSong[1], dispSong[0]);
 8009ac2:	8808      	ldrh	r0, [r1, #0]
 8009ac4:	888b      	ldrh	r3, [r1, #4]
 8009ac6:	88ca      	ldrh	r2, [r1, #6]
 8009ac8:	9001      	str	r0, [sp, #4]
 8009aca:	8849      	ldrh	r1, [r1, #2]
 8009acc:	a803      	add	r0, sp, #12
 8009ace:	9100      	str	r1, [sp, #0]
 8009ad0:	4920      	ldr	r1, [pc, #128]	; (8009b54 <oled_DisplayStatusSplash+0x98>)
 8009ad2:	f001 ffd5 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg))*16)/2, 3);
 8009ad6:	a803      	add	r0, sp, #12
 8009ad8:	f7f6 fb1e 	bl	8000118 <strlen>
 8009adc:	0100      	lsls	r0, r0, #4
 8009ade:	4240      	negs	r0, r0
 8009ae0:	3080      	adds	r0, #128	; 0x80
 8009ae2:	0840      	lsrs	r0, r0, #1
 8009ae4:	b2c0      	uxtb	r0, r0
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	f001 fbd8 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_16x26, White);
 8009aec:	4c1a      	ldr	r4, [pc, #104]	; (8009b58 <oled_DisplayStatusSplash+0x9c>)
 8009aee:	2301      	movs	r3, #1
 8009af0:	6821      	ldr	r1, [r4, #0]
 8009af2:	6862      	ldr	r2, [r4, #4]
 8009af4:	a803      	add	r0, sp, #12
 8009af6:	f001 fbbd 	bl	800b274 <ssd1306_WriteString>

	sprintf(msg, " %c%c %c ", dispVerse[1], dispVerse[0], dispLetter);
 8009afa:	4918      	ldr	r1, [pc, #96]	; (8009b5c <oled_DisplayStatusSplash+0xa0>)
 8009afc:	4a18      	ldr	r2, [pc, #96]	; (8009b60 <oled_DisplayStatusSplash+0xa4>)
 8009afe:	7809      	ldrb	r1, [r1, #0]
 8009b00:	7813      	ldrb	r3, [r2, #0]
 8009b02:	a803      	add	r0, sp, #12
 8009b04:	7852      	ldrb	r2, [r2, #1]
 8009b06:	9100      	str	r1, [sp, #0]
 8009b08:	4916      	ldr	r1, [pc, #88]	; (8009b64 <oled_DisplayStatusSplash+0xa8>)
 8009b0a:	f001 ffb9 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-(strlen(msg))*16)/2, 33);
 8009b0e:	a803      	add	r0, sp, #12
 8009b10:	f7f6 fb02 	bl	8000118 <strlen>
 8009b14:	0100      	lsls	r0, r0, #4
 8009b16:	4240      	negs	r0, r0
 8009b18:	3080      	adds	r0, #128	; 0x80
 8009b1a:	0840      	lsrs	r0, r0, #1
 8009b1c:	b2c0      	uxtb	r0, r0
 8009b1e:	2121      	movs	r1, #33	; 0x21
 8009b20:	f001 fbbc 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_16x26, White);
 8009b24:	cc06      	ldmia	r4!, {r1, r2}
 8009b26:	2301      	movs	r3, #1
 8009b28:	a803      	add	r0, sp, #12
 8009b2a:	f001 fba3 	bl	800b274 <ssd1306_WriteString>


	//Pri kliknuti skoci zpet do menu
	if(encoderclick){
 8009b2e:	4a0e      	ldr	r2, [pc, #56]	; (8009b68 <oled_DisplayStatusSplash+0xac>)
 8009b30:	6813      	ldr	r3, [r2, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d009      	beq.n	8009b4a <oled_DisplayStatusSplash+0x8e>
		encoderclick = 0;
 8009b36:	2300      	movs	r3, #0
		oled_setDisplayedMenu("displaymenu",&displaymenu, sizeof(displaymenu), 0);
 8009b38:	490c      	ldr	r1, [pc, #48]	; (8009b6c <oled_DisplayStatusSplash+0xb0>)
		encoderclick = 0;
 8009b3a:	6013      	str	r3, [r2, #0]
		oled_setDisplayedMenu("displaymenu",&displaymenu, sizeof(displaymenu), 0);
 8009b3c:	480c      	ldr	r0, [pc, #48]	; (8009b70 <oled_DisplayStatusSplash+0xb4>)
 8009b3e:	2260      	movs	r2, #96	; 0x60
 8009b40:	f7ff ff82 	bl	8009a48 <oled_setDisplayedMenu>
		oledType = OLED_MENU;
 8009b44:	2202      	movs	r2, #2
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <oled_DisplayStatusSplash+0xb8>)
 8009b48:	601a      	str	r2, [r3, #0]
	}
}
 8009b4a:	b008      	add	sp, #32
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	20003d9e 	.word	0x20003d9e
 8009b54:	0800e0e3 	.word	0x0800e0e3
 8009b58:	200003f0 	.word	0x200003f0
 8009b5c:	20002cfc 	.word	0x20002cfc
 8009b60:	20000ac4 	.word	0x20000ac4
 8009b64:	0800e0ee 	.word	0x0800e0ee
 8009b68:	200028b4 	.word	0x200028b4
 8009b6c:	200000c8 	.word	0x200000c8
 8009b70:	0800e0f8 	.word	0x0800e0f8
 8009b74:	20000c40 	.word	0x20000c40

08009b78 <oled_ValueEnterSplash>:
	}
}

void oled_ValueEnterSplash(struct reqValue * num){

	keyboardVertPosMax = num->charactersLen;
 8009b78:	0003      	movs	r3, r0
void oled_ValueEnterSplash(struct reqValue * num){
 8009b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	keyboardVertPosMax = num->charactersLen;
 8009b7c:	332c      	adds	r3, #44	; 0x2c
 8009b7e:	781a      	ldrb	r2, [r3, #0]

	num->enteredValue[num->selectedDigit] = num->characters[keyboardVertPos];
 8009b80:	4d88      	ldr	r5, [pc, #544]	; (8009da4 <oled_ValueEnterSplash+0x22c>)
	keyboardVertPosMax = num->charactersLen;
 8009b82:	4b89      	ldr	r3, [pc, #548]	; (8009da8 <oled_ValueEnterSplash+0x230>)
void oled_ValueEnterSplash(struct reqValue * num){
 8009b84:	b08d      	sub	sp, #52	; 0x34
	keyboardVertPosMax = num->charactersLen;
 8009b86:	601a      	str	r2, [r3, #0]
	num->enteredValue[num->selectedDigit] = num->characters[keyboardVertPos];
 8009b88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009b8a:	682a      	ldr	r2, [r5, #0]
void oled_ValueEnterSplash(struct reqValue * num){
 8009b8c:	0004      	movs	r4, r0
	num->enteredValue[num->selectedDigit] = num->characters[keyboardVertPos];
 8009b8e:	5c9a      	ldrb	r2, [r3, r2]
 8009b90:	7883      	ldrb	r3, [r0, #2]
 8009b92:	18c3      	adds	r3, r0, r3
 8009b94:	70da      	strb	r2, [r3, #3]

	char msg[40];

	ssd1306_SetCursor((128-((float)strlen(num->message))*11)/2, 1);
 8009b96:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009b98:	f7f6 fabe 	bl	8000118 <strlen>
 8009b9c:	f7f7 fa42 	bl	8001024 <__aeabi_ui2f>
 8009ba0:	4982      	ldr	r1, [pc, #520]	; (8009dac <oled_ValueEnterSplash+0x234>)
 8009ba2:	f7f6 ff13 	bl	80009cc <__aeabi_fmul>
 8009ba6:	1c01      	adds	r1, r0, #0
 8009ba8:	2086      	movs	r0, #134	; 0x86
 8009baa:	05c0      	lsls	r0, r0, #23
 8009bac:	f7f7 f82e 	bl	8000c0c <__aeabi_fsub>
 8009bb0:	21fc      	movs	r1, #252	; 0xfc
 8009bb2:	0589      	lsls	r1, r1, #22
 8009bb4:	f7f6 ff0a 	bl	80009cc <__aeabi_fmul>
 8009bb8:	f7f6 fc9e 	bl	80004f8 <__aeabi_f2uiz>
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	b2c0      	uxtb	r0, r0
 8009bc0:	f001 fb6c 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(num->message, Font_11x18, White);
 8009bc4:	4e7a      	ldr	r6, [pc, #488]	; (8009db0 <oled_ValueEnterSplash+0x238>)
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	6831      	ldr	r1, [r6, #0]
 8009bca:	6872      	ldr	r2, [r6, #4]
 8009bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bce:	f001 fb51 	bl	800b274 <ssd1306_WriteString>

	sprintf(msg, "%*s", num->digits ,num->enteredValue);
 8009bd2:	1ce3      	adds	r3, r4, #3
 8009bd4:	7862      	ldrb	r2, [r4, #1]
 8009bd6:	4977      	ldr	r1, [pc, #476]	; (8009db4 <oled_ValueEnterSplash+0x23c>)
 8009bd8:	a802      	add	r0, sp, #8
 8009bda:	f001 ff51 	bl	800ba80 <siprintf>
	ssd1306_SetCursor((128-((float)strlen(msg))*11)/2, 28);
 8009bde:	a802      	add	r0, sp, #8
 8009be0:	f7f6 fa9a 	bl	8000118 <strlen>
 8009be4:	f7f7 fa1e 	bl	8001024 <__aeabi_ui2f>
 8009be8:	4970      	ldr	r1, [pc, #448]	; (8009dac <oled_ValueEnterSplash+0x234>)
 8009bea:	f7f6 feef 	bl	80009cc <__aeabi_fmul>
 8009bee:	1c01      	adds	r1, r0, #0
 8009bf0:	2086      	movs	r0, #134	; 0x86
 8009bf2:	05c0      	lsls	r0, r0, #23
 8009bf4:	f7f7 f80a 	bl	8000c0c <__aeabi_fsub>
 8009bf8:	21fc      	movs	r1, #252	; 0xfc
 8009bfa:	0589      	lsls	r1, r1, #22
 8009bfc:	f7f6 fee6 	bl	80009cc <__aeabi_fmul>
 8009c00:	f7f6 fc7a 	bl	80004f8 <__aeabi_f2uiz>
 8009c04:	211c      	movs	r1, #28
 8009c06:	b2c0      	uxtb	r0, r0
 8009c08:	f001 fb48 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 8009c0c:	ce06      	ldmia	r6!, {r1, r2}
 8009c0e:	2301      	movs	r3, #1
 8009c10:	a802      	add	r0, sp, #8
 8009c12:	f001 fb2f 	bl	800b274 <ssd1306_WriteString>

	if(loadingToggle){
 8009c16:	4b68      	ldr	r3, [pc, #416]	; (8009db8 <oled_ValueEnterSplash+0x240>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d15f      	bne.n	8009cde <oled_ValueEnterSplash+0x166>

	num->enteredNumber = num->enteredNumber - digit*pow(10, (num->digits - 1 - num->selectedDigit)) + encoderpos*pow(10, (num->digits - 1 - num->selectedDigit));

*/

	if(keypadClicks.right && num->selectedDigit < (num->digits-1)){
 8009c1e:	4b67      	ldr	r3, [pc, #412]	; (8009dbc <oled_ValueEnterSplash+0x244>)
 8009c20:	7bda      	ldrb	r2, [r3, #15]
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	d05d      	beq.n	8009ce2 <oled_ValueEnterSplash+0x16a>
 8009c26:	7861      	ldrb	r1, [r4, #1]
 8009c28:	78a2      	ldrb	r2, [r4, #2]
 8009c2a:	3901      	subs	r1, #1
 8009c2c:	428a      	cmp	r2, r1
 8009c2e:	da58      	bge.n	8009ce2 <oled_ValueEnterSplash+0x16a>
		num->selectedDigit++;
		keypadClicks.right = 0;
 8009c30:	2100      	movs	r1, #0
		num->selectedDigit++;
 8009c32:	3201      	adds	r2, #1
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	70a2      	strb	r2, [r4, #2]
		keypadClicks.right = 0;
 8009c38:	73d9      	strb	r1, [r3, #15]
		keyboardVertPos = strchr(num->characters, num->enteredValue[num->selectedDigit])-num->characters;
	}else if(keypadClicks.left && num->selectedDigit > 0){
		num->selectedDigit--;
		keypadClicks.left = 0;
		keyboardVertPos = strchr(num->characters, num->enteredValue[num->selectedDigit])-num->characters;
 8009c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c3c:	18a2      	adds	r2, r4, r2
 8009c3e:	78d1      	ldrb	r1, [r2, #3]
 8009c40:	0030      	movs	r0, r6
 8009c42:	f001 ff69 	bl	800bb18 <strchr>
 8009c46:	1b86      	subs	r6, r0, r6
 8009c48:	602e      	str	r6, [r5, #0]
	}else if(keypadClicks.nine){
		keyboardVertPos = 10;
		keypadClicks.nine = 0;
	}

	if(encoderclick){
 8009c4a:	4b5d      	ldr	r3, [pc, #372]	; (8009dc0 <oled_ValueEnterSplash+0x248>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	d010      	beq.n	8009c74 <oled_ValueEnterSplash+0xfc>
		if(num->application == APP_DISPLAY){
 8009c52:	7824      	ldrb	r4, [r4, #0]
 8009c54:	2c00      	cmp	r4, #0
 8009c56:	d000      	beq.n	8009c5a <oled_ValueEnterSplash+0xe2>
 8009c58:	e098      	b.n	8009d8c <oled_ValueEnterSplash+0x214>
			encoderclick = 0;
			workerAssert(&workerDispRefresh);
 8009c5a:	485a      	ldr	r0, [pc, #360]	; (8009dc4 <oled_ValueEnterSplash+0x24c>)
			encoderclick = 0;
 8009c5c:	601c      	str	r4, [r3, #0]
			workerAssert(&workerDispRefresh);
 8009c5e:	f7fe fe06 	bl	800886e <workerAssert>
			oled_setDisplayedMenu("displaysettingsmenu",&displaysettingsmenu, sizeof(displaysettingsmenu), 0);
 8009c62:	0023      	movs	r3, r4
 8009c64:	22a0      	movs	r2, #160	; 0xa0
 8009c66:	4958      	ldr	r1, [pc, #352]	; (8009dc8 <oled_ValueEnterSplash+0x250>)
 8009c68:	4858      	ldr	r0, [pc, #352]	; (8009dcc <oled_ValueEnterSplash+0x254>)
 8009c6a:	f7ff feed 	bl	8009a48 <oled_setDisplayedMenu>
			oledType = OLED_MENU;
		}else if(num->application == APP_RECORD){
			encoderclick = 0;
			workerAssert(&workerRecord);
			workerRecord.status = WORKER_REQUEST;
			oledType = OLED_MENU;
 8009c6e:	2202      	movs	r2, #2
 8009c70:	4b57      	ldr	r3, [pc, #348]	; (8009dd0 <oled_ValueEnterSplash+0x258>)
 8009c72:	601a      	str	r2, [r3, #0]
		}
	}


}
 8009c74:	b00d      	add	sp, #52	; 0x34
 8009c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ssd1306_DrawPixel(x+(128-((float)strlen(msg))*11)/2+num->selectedDigit*11, y+48, White);
 8009c78:	a802      	add	r0, sp, #8
 8009c7a:	f7f6 fa4d 	bl	8000118 <strlen>
 8009c7e:	f7f7 f9d1 	bl	8001024 <__aeabi_ui2f>
 8009c82:	494a      	ldr	r1, [pc, #296]	; (8009dac <oled_ValueEnterSplash+0x234>)
 8009c84:	f7f6 fea2 	bl	80009cc <__aeabi_fmul>
 8009c88:	1c01      	adds	r1, r0, #0
 8009c8a:	2086      	movs	r0, #134	; 0x86
 8009c8c:	05c0      	lsls	r0, r0, #23
 8009c8e:	f7f6 ffbd 	bl	8000c0c <__aeabi_fsub>
 8009c92:	21fc      	movs	r1, #252	; 0xfc
 8009c94:	0589      	lsls	r1, r1, #22
 8009c96:	f7f6 fe99 	bl	80009cc <__aeabi_fmul>
 8009c9a:	9001      	str	r0, [sp, #4]
 8009c9c:	0038      	movs	r0, r7
 8009c9e:	f7f7 f971 	bl	8000f84 <__aeabi_i2f>
 8009ca2:	1c01      	adds	r1, r0, #0
 8009ca4:	9801      	ldr	r0, [sp, #4]
 8009ca6:	f7f6 fcff 	bl	80006a8 <__aeabi_fadd>
 8009caa:	9001      	str	r0, [sp, #4]
 8009cac:	200b      	movs	r0, #11
 8009cae:	78a3      	ldrb	r3, [r4, #2]
 8009cb0:	4358      	muls	r0, r3
 8009cb2:	f7f7 f967 	bl	8000f84 <__aeabi_i2f>
 8009cb6:	1c01      	adds	r1, r0, #0
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	f7f6 fcf5 	bl	80006a8 <__aeabi_fadd>
 8009cbe:	f7f6 fc1b 	bl	80004f8 <__aeabi_f2uiz>
 8009cc2:	0031      	movs	r1, r6
 8009cc4:	3601      	adds	r6, #1
 8009cc6:	b2c0      	uxtb	r0, r0
 8009cc8:	2201      	movs	r2, #1
 8009cca:	b2f6      	uxtb	r6, r6
 8009ccc:	f001 fa58 	bl	800b180 <ssd1306_DrawPixel>
			for(int y = 0; y < 3; y++){
 8009cd0:	2e33      	cmp	r6, #51	; 0x33
 8009cd2:	d1d1      	bne.n	8009c78 <oled_ValueEnterSplash+0x100>
		for(int x = 0; x < 11; x++){
 8009cd4:	3701      	adds	r7, #1
 8009cd6:	2f0b      	cmp	r7, #11
 8009cd8:	d0a1      	beq.n	8009c1e <oled_ValueEnterSplash+0xa6>
void oled_ValueEnterSplash(struct reqValue * num){
 8009cda:	2630      	movs	r6, #48	; 0x30
 8009cdc:	e7cc      	b.n	8009c78 <oled_ValueEnterSplash+0x100>
 8009cde:	2700      	movs	r7, #0
 8009ce0:	e7fb      	b.n	8009cda <oled_ValueEnterSplash+0x162>
	}else if(keypadClicks.left && num->selectedDigit > 0){
 8009ce2:	7b9a      	ldrb	r2, [r3, #14]
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d008      	beq.n	8009cfa <oled_ValueEnterSplash+0x182>
 8009ce8:	78a2      	ldrb	r2, [r4, #2]
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	d005      	beq.n	8009cfa <oled_ValueEnterSplash+0x182>
		keypadClicks.left = 0;
 8009cee:	2100      	movs	r1, #0
		num->selectedDigit--;
 8009cf0:	3a01      	subs	r2, #1
 8009cf2:	b2d2      	uxtb	r2, r2
 8009cf4:	70a2      	strb	r2, [r4, #2]
		keypadClicks.left = 0;
 8009cf6:	7399      	strb	r1, [r3, #14]
 8009cf8:	e79f      	b.n	8009c3a <oled_ValueEnterSplash+0xc2>
	else if(keypadClicks.zero){
 8009cfa:	7a59      	ldrb	r1, [r3, #9]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d004      	beq.n	8009d0a <oled_ValueEnterSplash+0x192>
		keyboardVertPos = 1;
 8009d00:	2201      	movs	r2, #1
 8009d02:	602a      	str	r2, [r5, #0]
		keypadClicks.zero = 0;
 8009d04:	2200      	movs	r2, #0
 8009d06:	725a      	strb	r2, [r3, #9]
 8009d08:	e79f      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.one){
 8009d0a:	781a      	ldrb	r2, [r3, #0]
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d003      	beq.n	8009d18 <oled_ValueEnterSplash+0x1a0>
		keyboardVertPos = 2;
 8009d10:	2202      	movs	r2, #2
		keypadClicks.one = 0;
 8009d12:	7019      	strb	r1, [r3, #0]
		keyboardVertPos = 2;
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	e798      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.two){
 8009d18:	7859      	ldrb	r1, [r3, #1]
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d003      	beq.n	8009d26 <oled_ValueEnterSplash+0x1ae>
		keyboardVertPos = 3;
 8009d1e:	2103      	movs	r1, #3
		keypadClicks.two = 0;
 8009d20:	705a      	strb	r2, [r3, #1]
		keyboardVertPos = 3;
 8009d22:	6029      	str	r1, [r5, #0]
 8009d24:	e791      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.three){
 8009d26:	789a      	ldrb	r2, [r3, #2]
 8009d28:	2a00      	cmp	r2, #0
 8009d2a:	d003      	beq.n	8009d34 <oled_ValueEnterSplash+0x1bc>
		keyboardVertPos = 4;
 8009d2c:	2204      	movs	r2, #4
		keypadClicks.three = 0;
 8009d2e:	7099      	strb	r1, [r3, #2]
		keyboardVertPos = 4;
 8009d30:	602a      	str	r2, [r5, #0]
 8009d32:	e78a      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.four){
 8009d34:	78d9      	ldrb	r1, [r3, #3]
 8009d36:	2900      	cmp	r1, #0
 8009d38:	d003      	beq.n	8009d42 <oled_ValueEnterSplash+0x1ca>
		keyboardVertPos = 5;
 8009d3a:	2105      	movs	r1, #5
		keypadClicks.four = 0;
 8009d3c:	70da      	strb	r2, [r3, #3]
		keyboardVertPos = 5;
 8009d3e:	6029      	str	r1, [r5, #0]
 8009d40:	e783      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.five){
 8009d42:	791a      	ldrb	r2, [r3, #4]
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d003      	beq.n	8009d50 <oled_ValueEnterSplash+0x1d8>
		keyboardVertPos = 6;
 8009d48:	2206      	movs	r2, #6
		keypadClicks.five = 0;
 8009d4a:	7119      	strb	r1, [r3, #4]
		keyboardVertPos = 6;
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	e77c      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.six){
 8009d50:	7959      	ldrb	r1, [r3, #5]
 8009d52:	2900      	cmp	r1, #0
 8009d54:	d003      	beq.n	8009d5e <oled_ValueEnterSplash+0x1e6>
		keyboardVertPos = 7;
 8009d56:	2107      	movs	r1, #7
		keypadClicks.six = 0;
 8009d58:	715a      	strb	r2, [r3, #5]
		keyboardVertPos = 7;
 8009d5a:	6029      	str	r1, [r5, #0]
 8009d5c:	e775      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.seven){
 8009d5e:	799a      	ldrb	r2, [r3, #6]
 8009d60:	2a00      	cmp	r2, #0
 8009d62:	d003      	beq.n	8009d6c <oled_ValueEnterSplash+0x1f4>
		keyboardVertPos = 8;
 8009d64:	2208      	movs	r2, #8
		keypadClicks.seven = 0;
 8009d66:	7199      	strb	r1, [r3, #6]
		keyboardVertPos = 8;
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	e76e      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.eight){
 8009d6c:	79d9      	ldrb	r1, [r3, #7]
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	d003      	beq.n	8009d7a <oled_ValueEnterSplash+0x202>
		keyboardVertPos = 9;
 8009d72:	2109      	movs	r1, #9
		keypadClicks.eight = 0;
 8009d74:	71da      	strb	r2, [r3, #7]
		keyboardVertPos = 9;
 8009d76:	6029      	str	r1, [r5, #0]
 8009d78:	e767      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
	}else if(keypadClicks.nine){
 8009d7a:	7a1a      	ldrb	r2, [r3, #8]
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	d100      	bne.n	8009d82 <oled_ValueEnterSplash+0x20a>
 8009d80:	e763      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
		keyboardVertPos = 10;
 8009d82:	220a      	movs	r2, #10
 8009d84:	602a      	str	r2, [r5, #0]
		keypadClicks.nine = 0;
 8009d86:	2200      	movs	r2, #0
 8009d88:	721a      	strb	r2, [r3, #8]
 8009d8a:	e75e      	b.n	8009c4a <oled_ValueEnterSplash+0xd2>
		}else if(num->application == APP_RECORD){
 8009d8c:	2c01      	cmp	r4, #1
 8009d8e:	d000      	beq.n	8009d92 <oled_ValueEnterSplash+0x21a>
 8009d90:	e770      	b.n	8009c74 <oled_ValueEnterSplash+0xfc>
			encoderclick = 0;
 8009d92:	2200      	movs	r2, #0
			workerAssert(&workerRecord);
 8009d94:	4c0f      	ldr	r4, [pc, #60]	; (8009dd4 <oled_ValueEnterSplash+0x25c>)
			encoderclick = 0;
 8009d96:	601a      	str	r2, [r3, #0]
			workerAssert(&workerRecord);
 8009d98:	0020      	movs	r0, r4
 8009d9a:	f7fe fd68 	bl	800886e <workerAssert>
			workerRecord.status = WORKER_REQUEST;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	7063      	strb	r3, [r4, #1]
 8009da2:	e764      	b.n	8009c6e <oled_ValueEnterSplash+0xf6>
 8009da4:	20003224 	.word	0x20003224
 8009da8:	20000c60 	.word	0x20000c60
 8009dac:	41300000 	.word	0x41300000
 8009db0:	200003e8 	.word	0x200003e8
 8009db4:	0800e161 	.word	0x0800e161
 8009db8:	20002fc0 	.word	0x20002fc0
 8009dbc:	20002cba 	.word	0x20002cba
 8009dc0:	200028b4 	.word	0x200028b4
 8009dc4:	20000ac6 	.word	0x20000ac6
 8009dc8:	200001e8 	.word	0x200001e8
 8009dcc:	0800e165 	.word	0x0800e165
 8009dd0:	20000c40 	.word	0x20000c40
 8009dd4:	200028b9 	.word	0x200028b9

08009dd8 <oled_setDisplayedSplash>:
	loadingStat = 1;
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <oled_setDisplayedSplash+0x18>)
 8009ddc:	601a      	str	r2, [r3, #0]
	splashFunction = funct;
 8009dde:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <oled_setDisplayedSplash+0x1c>)
	oledType = OLED_SPLASH;
 8009de0:	3202      	adds	r2, #2
	splashFunction = funct;
 8009de2:	6018      	str	r0, [r3, #0]
	splashParams = params;
 8009de4:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <oled_setDisplayedSplash+0x20>)
 8009de6:	6019      	str	r1, [r3, #0]
	oledType = OLED_SPLASH;
 8009de8:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <oled_setDisplayedSplash+0x24>)
 8009dea:	601a      	str	r2, [r3, #0]
}
 8009dec:	4770      	bx	lr
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	20002c98 	.word	0x20002c98
 8009df4:	20003220 	.word	0x20003220
 8009df8:	20003ddc 	.word	0x20003ddc
 8009dfc:	20000c40 	.word	0x20000c40

08009e00 <oled_menuOnclick>:
void oled_menuOnclick(int menupos){
 8009e00:	b5f0      	push	{r4, r5, r6, r7, lr}
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8009e02:	4bb8      	ldr	r3, [pc, #736]	; (800a0e4 <oled_menuOnclick+0x2e4>)
void oled_menuOnclick(int menupos){
 8009e04:	b0d1      	sub	sp, #324	; 0x144
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8009e06:	681d      	ldr	r5, [r3, #0]
void oled_menuOnclick(int menupos){
 8009e08:	0004      	movs	r4, r0
	memcpy(&menunameold, dispmenuname, strlen(dispmenuname)+1);
 8009e0a:	0028      	movs	r0, r5
 8009e0c:	f7f6 f984 	bl	8000118 <strlen>
 8009e10:	0029      	movs	r1, r5
 8009e12:	1c42      	adds	r2, r0, #1
 8009e14:	a810      	add	r0, sp, #64	; 0x40
 8009e16:	f001 fd67 	bl	800b8e8 <memcpy>
	if(strcmp(dispmenuname, "mainmenu") == 0){
 8009e1a:	4eb3      	ldr	r6, [pc, #716]	; (800a0e8 <oled_menuOnclick+0x2e8>)
 8009e1c:	0028      	movs	r0, r5
 8009e1e:	0031      	movs	r1, r6
 8009e20:	f7f6 f970 	bl	8000104 <strcmp>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d14c      	bne.n	8009ec2 <oled_menuOnclick+0xc2>
		switch(menupos){
 8009e28:	2c03      	cmp	r4, #3
 8009e2a:	d845      	bhi.n	8009eb8 <oled_menuOnclick+0xb8>
 8009e2c:	0020      	movs	r0, r4
 8009e2e:	f7f6 f97b 	bl	8000128 <__gnu_thumb1_case_uqi>
 8009e32:	2102      	.short	0x2102
 8009e34:	3e37      	.short	0x3e37
				msg[0] = 0x00;
 8009e36:	2400      	movs	r4, #0
				msg[1] = 0x04;
 8009e38:	2304      	movs	r3, #4
				msg[0] = 0x00;
 8009e3a:	ad03      	add	r5, sp, #12
				workerAssert(&workerGetSongs);
 8009e3c:	48ab      	ldr	r0, [pc, #684]	; (800a0ec <oled_menuOnclick+0x2ec>)
				msg[1] = 0x04;
 8009e3e:	706b      	strb	r3, [r5, #1]
				msg[0] = 0x00;
 8009e40:	702c      	strb	r4, [r5, #0]
				workerAssert(&workerGetSongs);
 8009e42:	f7fe fd14 	bl	800886e <workerAssert>
				sendMsg(ADDRESS_CONTROLLER, ADDRESS_PC, 0, INTERNAL, msg, 2);
 8009e46:	2302      	movs	r3, #2
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	9500      	str	r5, [sp, #0]
 8009e4e:	0022      	movs	r2, r4
 8009e50:	0021      	movs	r1, r4
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7fe ffa6 	bl	8008da4 <sendMsg>
	encoderclick = 0;
 8009e58:	2400      	movs	r4, #0
 8009e5a:	4ba5      	ldr	r3, [pc, #660]	; (800a0f0 <oled_menuOnclick+0x2f0>)
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 8009e5c:	a910      	add	r1, sp, #64	; 0x40
	encoderclick = 0;
 8009e5e:	601c      	str	r4, [r3, #0]
	if(strcmp(dispmenuname, menunameold) != 0) encoderpos = 0;
 8009e60:	4ba0      	ldr	r3, [pc, #640]	; (800a0e4 <oled_menuOnclick+0x2e4>)
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	f7f6 f94e 	bl	8000104 <strcmp>
 8009e68:	42a0      	cmp	r0, r4
 8009e6a:	d001      	beq.n	8009e70 <oled_menuOnclick+0x70>
 8009e6c:	4ba1      	ldr	r3, [pc, #644]	; (800a0f4 <oled_menuOnclick+0x2f4>)
 8009e6e:	601c      	str	r4, [r3, #0]
}
 8009e70:	b051      	add	sp, #324	; 0x144
 8009e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
				numRecordSong.digits = 4;
 8009e74:	2304      	movs	r3, #4
 8009e76:	4ca0      	ldr	r4, [pc, #640]	; (800a0f8 <oled_menuOnclick+0x2f8>)
				sprintf(numRecordSong.enteredValue, "----");
 8009e78:	49a0      	ldr	r1, [pc, #640]	; (800a0fc <oled_menuOnclick+0x2fc>)
 8009e7a:	48a1      	ldr	r0, [pc, #644]	; (800a100 <oled_menuOnclick+0x300>)
				numRecordSong.digits = 4;
 8009e7c:	7063      	strb	r3, [r4, #1]
				sprintf(numRecordSong.enteredValue, "----");
 8009e7e:	f001 fe59 	bl	800bb34 <strcpy>
				numRecordSong.message = "Cislo pisne";
 8009e82:	4ba0      	ldr	r3, [pc, #640]	; (800a104 <oled_menuOnclick+0x304>)
				numRecordSong.charactersLen = 11;
 8009e84:	220b      	movs	r2, #11
				numRecordSong.message = "Cislo pisne";
 8009e86:	6263      	str	r3, [r4, #36]	; 0x24
				numRecordSong.selectedDigit = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	70a3      	strb	r3, [r4, #2]
				numRecordSong.characters = "-0123456789";
 8009e8c:	4b9e      	ldr	r3, [pc, #632]	; (800a108 <oled_menuOnclick+0x308>)
 8009e8e:	62a3      	str	r3, [r4, #40]	; 0x28
				numRecordSong.charactersLen = 11;
 8009e90:	0023      	movs	r3, r4
 8009e92:	332c      	adds	r3, #44	; 0x2c
 8009e94:	701a      	strb	r2, [r3, #0]
				numRecordSong.application = APP_RECORD;
 8009e96:	2301      	movs	r3, #1
				numDispVerse.application = APP_DISPLAY;
 8009e98:	7023      	strb	r3, [r4, #0]
				oled_setDisplayedSplash(oled_ValueEnterSplash, &numDispVerse);
 8009e9a:	0021      	movs	r1, r4
 8009e9c:	489b      	ldr	r0, [pc, #620]	; (800a10c <oled_menuOnclick+0x30c>)
 8009e9e:	e050      	b.n	8009f42 <oled_menuOnclick+0x142>
				oled_setDisplayedMenu("organmenu",&organmenu, sizeof(organmenu), 1);
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	2260      	movs	r2, #96	; 0x60
 8009ea4:	499a      	ldr	r1, [pc, #616]	; (800a110 <oled_menuOnclick+0x310>)
 8009ea6:	489b      	ldr	r0, [pc, #620]	; (800a114 <oled_menuOnclick+0x314>)
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8009ea8:	f7ff fdce 	bl	8009a48 <oled_setDisplayedMenu>
					break;
 8009eac:	e7d4      	b.n	8009e58 <oled_menuOnclick+0x58>
				oled_setDisplayedMenu("displaymenu",&displaymenu, sizeof(displaymenu), 1);
 8009eae:	2301      	movs	r3, #1
 8009eb0:	2260      	movs	r2, #96	; 0x60
 8009eb2:	4999      	ldr	r1, [pc, #612]	; (800a118 <oled_menuOnclick+0x318>)
 8009eb4:	4899      	ldr	r0, [pc, #612]	; (800a11c <oled_menuOnclick+0x31c>)
 8009eb6:	e7f7      	b.n	8009ea8 <oled_menuOnclick+0xa8>
				oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 1);
 8009eb8:	2301      	movs	r3, #1
			oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 0);
 8009eba:	2260      	movs	r2, #96	; 0x60
 8009ebc:	4998      	ldr	r1, [pc, #608]	; (800a120 <oled_menuOnclick+0x320>)
 8009ebe:	4899      	ldr	r0, [pc, #612]	; (800a124 <oled_menuOnclick+0x324>)
 8009ec0:	e7f2      	b.n	8009ea8 <oled_menuOnclick+0xa8>
	}else if(strcmp(dispmenuname, "settingsmenu") == 0){
 8009ec2:	4f98      	ldr	r7, [pc, #608]	; (800a124 <oled_menuOnclick+0x324>)
 8009ec4:	0028      	movs	r0, r5
 8009ec6:	0039      	movs	r1, r7
 8009ec8:	f7f6 f91c 	bl	8000104 <strcmp>
 8009ecc:	1e03      	subs	r3, r0, #0
 8009ece:	d106      	bne.n	8009ede <oled_menuOnclick+0xde>
		switch(menupos){
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d130      	bne.n	8009f36 <oled_menuOnclick+0x136>
				oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 1);
 8009ed4:	3301      	adds	r3, #1
			oled_setDisplayedMenu("bluetoothmenu",&bluetoothmenu, sizeof(bluetoothmenu), 0);
 8009ed6:	2280      	movs	r2, #128	; 0x80
 8009ed8:	4993      	ldr	r1, [pc, #588]	; (800a128 <oled_menuOnclick+0x328>)
 8009eda:	4894      	ldr	r0, [pc, #592]	; (800a12c <oled_menuOnclick+0x32c>)
 8009edc:	e7e4      	b.n	8009ea8 <oled_menuOnclick+0xa8>
	}else if(strcmp(dispmenuname, "bluetoothmenu") == 0){
 8009ede:	4993      	ldr	r1, [pc, #588]	; (800a12c <oled_menuOnclick+0x32c>)
 8009ee0:	0028      	movs	r0, r5
 8009ee2:	f7f6 f90f 	bl	8000104 <strcmp>
 8009ee6:	1e03      	subs	r3, r0, #0
 8009ee8:	d11a      	bne.n	8009f20 <oled_menuOnclick+0x120>
		switch(menupos){
 8009eea:	2c01      	cmp	r4, #1
 8009eec:	d00b      	beq.n	8009f06 <oled_menuOnclick+0x106>
 8009eee:	2c02      	cmp	r4, #2
 8009ef0:	d00f      	beq.n	8009f12 <oled_menuOnclick+0x112>
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d110      	bne.n	8009f18 <oled_menuOnclick+0x118>
				oled_setDisplayedSplash(oled_LoadingSplash, "Skenuji");
 8009ef6:	488e      	ldr	r0, [pc, #568]	; (800a130 <oled_menuOnclick+0x330>)
 8009ef8:	498e      	ldr	r1, [pc, #568]	; (800a134 <oled_menuOnclick+0x334>)
 8009efa:	f7ff ff6d 	bl	8009dd8 <oled_setDisplayedSplash>
				workerAssert(&workerBtScanDev);
 8009efe:	488e      	ldr	r0, [pc, #568]	; (800a138 <oled_menuOnclick+0x338>)
				workerAssert(&workerDispRefresh);
 8009f00:	f7fe fcb5 	bl	800886e <workerAssert>
			break;
 8009f04:	e7a8      	b.n	8009e58 <oled_menuOnclick+0x58>
				oled_setDisplayedSplash(oled_LoadingSplash, "Nacitam");
 8009f06:	488a      	ldr	r0, [pc, #552]	; (800a130 <oled_menuOnclick+0x330>)
 8009f08:	498c      	ldr	r1, [pc, #560]	; (800a13c <oled_menuOnclick+0x33c>)
 8009f0a:	f7ff ff65 	bl	8009dd8 <oled_setDisplayedSplash>
				workerAssert(&workerBtBondDev);
 8009f0e:	488c      	ldr	r0, [pc, #560]	; (800a140 <oled_menuOnclick+0x340>)
 8009f10:	e7f6      	b.n	8009f00 <oled_menuOnclick+0x100>
				oled_setDisplayedSplash(oled_BtDevInfoSplash, &btModule);
 8009f12:	498c      	ldr	r1, [pc, #560]	; (800a144 <oled_menuOnclick+0x344>)
			oled_setDisplayedSplash(oled_BtDevInfoSplash, &btScanned[menupos]);
 8009f14:	488c      	ldr	r0, [pc, #560]	; (800a148 <oled_menuOnclick+0x348>)
 8009f16:	e014      	b.n	8009f42 <oled_menuOnclick+0x142>
				oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 0);
 8009f18:	2260      	movs	r2, #96	; 0x60
 8009f1a:	4981      	ldr	r1, [pc, #516]	; (800a120 <oled_menuOnclick+0x320>)
				oled_setDisplayedMenu("displaymenu",&displaymenu, sizeof(displaymenu), 0);
 8009f1c:	0038      	movs	r0, r7
 8009f1e:	e7c3      	b.n	8009ea8 <oled_menuOnclick+0xa8>
	}else if(strcmp(dispmenuname, "displaymenu") == 0){
 8009f20:	4f7e      	ldr	r7, [pc, #504]	; (800a11c <oled_menuOnclick+0x31c>)
 8009f22:	0028      	movs	r0, r5
 8009f24:	0039      	movs	r1, r7
 8009f26:	f7f6 f8ed 	bl	8000104 <strcmp>
 8009f2a:	1e03      	subs	r3, r0, #0
 8009f2c:	d10c      	bne.n	8009f48 <oled_menuOnclick+0x148>
		switch(menupos){
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d005      	beq.n	8009f3e <oled_menuOnclick+0x13e>
 8009f32:	2c01      	cmp	r4, #1
 8009f34:	d065      	beq.n	800a002 <oled_menuOnclick+0x202>
			oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 8009f36:	22a0      	movs	r2, #160	; 0xa0
 8009f38:	4984      	ldr	r1, [pc, #528]	; (800a14c <oled_menuOnclick+0x34c>)
				oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 8009f3a:	0030      	movs	r0, r6
 8009f3c:	e7b4      	b.n	8009ea8 <oled_menuOnclick+0xa8>
				oled_setDisplayedSplash(oled_DisplayStatusSplash, "");
 8009f3e:	4984      	ldr	r1, [pc, #528]	; (800a150 <oled_menuOnclick+0x350>)
 8009f40:	4884      	ldr	r0, [pc, #528]	; (800a154 <oled_menuOnclick+0x354>)
			oled_setDisplayedSplash(oled_BtDevInfoSplash, &btScanned[menupos]);
 8009f42:	f7ff ff49 	bl	8009dd8 <oled_setDisplayedSplash>
 8009f46:	e787      	b.n	8009e58 <oled_menuOnclick+0x58>
	}else if(strcmp(dispmenuname, "displaysettingsmenu") == 0){
 8009f48:	4983      	ldr	r1, [pc, #524]	; (800a158 <oled_menuOnclick+0x358>)
 8009f4a:	0028      	movs	r0, r5
 8009f4c:	f7f6 f8da 	bl	8000104 <strcmp>
 8009f50:	1e03      	subs	r3, r0, #0
 8009f52:	d13a      	bne.n	8009fca <oled_menuOnclick+0x1ca>
		switch(menupos){
 8009f54:	2c03      	cmp	r4, #3
 8009f56:	d835      	bhi.n	8009fc4 <oled_menuOnclick+0x1c4>
 8009f58:	0020      	movs	r0, r4
 8009f5a:	f7f6 f8e5 	bl	8000128 <__gnu_thumb1_case_uqi>
 8009f5e:	1402      	.short	0x1402
 8009f60:	2e1d      	.short	0x2e1d
				numDispSong.digits = 4;
 8009f62:	2304      	movs	r3, #4
 8009f64:	4c7d      	ldr	r4, [pc, #500]	; (800a15c <oled_menuOnclick+0x35c>)
				sprintf(numDispSong.enteredValue, "----");
 8009f66:	4965      	ldr	r1, [pc, #404]	; (800a0fc <oled_menuOnclick+0x2fc>)
 8009f68:	487d      	ldr	r0, [pc, #500]	; (800a160 <oled_menuOnclick+0x360>)
				numDispSong.digits = 4;
 8009f6a:	7063      	strb	r3, [r4, #1]
				sprintf(numDispSong.enteredValue, "----");
 8009f6c:	f001 fde2 	bl	800bb34 <strcpy>
				numDispSong.message = "Cislo pisne";
 8009f70:	4b64      	ldr	r3, [pc, #400]	; (800a104 <oled_menuOnclick+0x304>)
				numDispVerse.characters = "-0123456789";
 8009f72:	4a65      	ldr	r2, [pc, #404]	; (800a108 <oled_menuOnclick+0x308>)
				numDispVerse.message = "Cislo sloky";
 8009f74:	6263      	str	r3, [r4, #36]	; 0x24
				numDispVerse.characters = "-0123456789";
 8009f76:	62a2      	str	r2, [r4, #40]	; 0x28
				numDispVerse.selectedDigit = 0;
 8009f78:	2300      	movs	r3, #0
				numDispVerse.charactersLen = 11;
 8009f7a:	0022      	movs	r2, r4
 8009f7c:	210b      	movs	r1, #11
				numDispVerse.selectedDigit = 0;
 8009f7e:	70a3      	strb	r3, [r4, #2]
				numDispVerse.charactersLen = 11;
 8009f80:	322c      	adds	r2, #44	; 0x2c
 8009f82:	7011      	strb	r1, [r2, #0]
 8009f84:	e788      	b.n	8009e98 <oled_menuOnclick+0x98>
				numDispVerse.digits = 2;
 8009f86:	2302      	movs	r3, #2
 8009f88:	4c76      	ldr	r4, [pc, #472]	; (800a164 <oled_menuOnclick+0x364>)
				sprintf(numDispVerse.enteredValue, "--");
 8009f8a:	4977      	ldr	r1, [pc, #476]	; (800a168 <oled_menuOnclick+0x368>)
 8009f8c:	4877      	ldr	r0, [pc, #476]	; (800a16c <oled_menuOnclick+0x36c>)
				numDispVerse.digits = 2;
 8009f8e:	7063      	strb	r3, [r4, #1]
				sprintf(numDispVerse.enteredValue, "--");
 8009f90:	f001 fdd0 	bl	800bb34 <strcpy>
				numDispVerse.message = "Cislo sloky";
 8009f94:	4b76      	ldr	r3, [pc, #472]	; (800a170 <oled_menuOnclick+0x370>)
 8009f96:	e7ec      	b.n	8009f72 <oled_menuOnclick+0x172>
				numDispLetter.digits = 1;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4c76      	ldr	r4, [pc, #472]	; (800a174 <oled_menuOnclick+0x374>)
				sprintf(numDispLetter.enteredValue, "-");
 8009f9c:	4976      	ldr	r1, [pc, #472]	; (800a178 <oled_menuOnclick+0x378>)
 8009f9e:	4877      	ldr	r0, [pc, #476]	; (800a17c <oled_menuOnclick+0x37c>)
				numDispLetter.digits = 1;
 8009fa0:	7063      	strb	r3, [r4, #1]
				sprintf(numDispLetter.enteredValue, "-");
 8009fa2:	f001 fdc7 	bl	800bb34 <strcpy>
				numDispLetter.message = "Pismeno";
 8009fa6:	4b76      	ldr	r3, [pc, #472]	; (800a180 <oled_menuOnclick+0x380>)
				numDispLetter.characters = "-ABCD";
 8009fa8:	4a76      	ldr	r2, [pc, #472]	; (800a184 <oled_menuOnclick+0x384>)
				numDispLetter.message = "Pismeno";
 8009faa:	6263      	str	r3, [r4, #36]	; 0x24
				numDispLetter.characters = "-ABCD";
 8009fac:	62a2      	str	r2, [r4, #40]	; 0x28
				numDispLetter.selectedDigit = 0;
 8009fae:	2300      	movs	r3, #0
				numDispLetter.charactersLen = 5;
 8009fb0:	0022      	movs	r2, r4
				numDispLetter.selectedDigit = 0;
 8009fb2:	70a3      	strb	r3, [r4, #2]
				numDispLetter.charactersLen = 5;
 8009fb4:	322c      	adds	r2, #44	; 0x2c
 8009fb6:	2105      	movs	r1, #5
 8009fb8:	e7e3      	b.n	8009f82 <oled_menuOnclick+0x182>
				oled_setDisplayedMenu("displaysettingsledmenu",&displaysettingsledmenu, sizeof(displaysettingsledmenu), 0);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	22c0      	movs	r2, #192	; 0xc0
 8009fbe:	4972      	ldr	r1, [pc, #456]	; (800a188 <oled_menuOnclick+0x388>)
 8009fc0:	4872      	ldr	r0, [pc, #456]	; (800a18c <oled_menuOnclick+0x38c>)
 8009fc2:	e771      	b.n	8009ea8 <oled_menuOnclick+0xa8>
				oled_setDisplayedMenu("displaymenu",&displaymenu, sizeof(displaymenu), 0);
 8009fc4:	2260      	movs	r2, #96	; 0x60
 8009fc6:	4954      	ldr	r1, [pc, #336]	; (800a118 <oled_menuOnclick+0x318>)
 8009fc8:	e7a8      	b.n	8009f1c <oled_menuOnclick+0x11c>
	}else if(strcmp(dispmenuname, "displaysettingsledmenu") == 0){
 8009fca:	4970      	ldr	r1, [pc, #448]	; (800a18c <oled_menuOnclick+0x38c>)
 8009fcc:	0028      	movs	r0, r5
 8009fce:	f7f6 f899 	bl	8000104 <strcmp>
 8009fd2:	1e03      	subs	r3, r0, #0
 8009fd4:	d119      	bne.n	800a00a <oled_menuOnclick+0x20a>
		switch(menupos){
 8009fd6:	2c04      	cmp	r4, #4
 8009fd8:	d813      	bhi.n	800a002 <oled_menuOnclick+0x202>
 8009fda:	0020      	movs	r0, r4
 8009fdc:	4a6c      	ldr	r2, [pc, #432]	; (800a190 <oled_menuOnclick+0x390>)
 8009fde:	4b6d      	ldr	r3, [pc, #436]	; (800a194 <oled_menuOnclick+0x394>)
 8009fe0:	f7f6 f8a2 	bl	8000128 <__gnu_thumb1_case_uqi>
 8009fe4:	0b090703 	.word	0x0b090703
 8009fe8:	0d          	.byte	0x0d
 8009fe9:	00          	.byte	0x00
				dispLED = DISP_LED_RED;
 8009fea:	2100      	movs	r1, #0
 8009fec:	7011      	strb	r1, [r2, #0]
				workerAssert(&workerDispRefresh);
 8009fee:	0018      	movs	r0, r3
 8009ff0:	e786      	b.n	8009f00 <oled_menuOnclick+0x100>
				dispLED = DISP_LED_YELLOW;
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	e7fa      	b.n	8009fec <oled_menuOnclick+0x1ec>
				dispLED = DISP_LED_GREEN;
 8009ff6:	2102      	movs	r1, #2
 8009ff8:	e7f8      	b.n	8009fec <oled_menuOnclick+0x1ec>
				dispLED = DISP_LED_BLUE;
 8009ffa:	2103      	movs	r1, #3
 8009ffc:	e7f6      	b.n	8009fec <oled_menuOnclick+0x1ec>
				dispLED = DISP_LED_CLEAR;
 8009ffe:	21e0      	movs	r1, #224	; 0xe0
 800a000:	e7f4      	b.n	8009fec <oled_menuOnclick+0x1ec>
				oled_setDisplayedMenu("displaysettingsmenu",&displaysettingsmenu, sizeof(displaysettingsmenu), 0);
 800a002:	22a0      	movs	r2, #160	; 0xa0
 800a004:	4964      	ldr	r1, [pc, #400]	; (800a198 <oled_menuOnclick+0x398>)
 800a006:	4854      	ldr	r0, [pc, #336]	; (800a158 <oled_menuOnclick+0x358>)
 800a008:	e74e      	b.n	8009ea8 <oled_menuOnclick+0xa8>
	}else if(strcmp(dispmenuname, "songmenu") == 0){
 800a00a:	4964      	ldr	r1, [pc, #400]	; (800a19c <oled_menuOnclick+0x39c>)
 800a00c:	0028      	movs	r0, r5
 800a00e:	f7f6 f879 	bl	8000104 <strcmp>
 800a012:	1e03      	subs	r3, r0, #0
 800a014:	d116      	bne.n	800a044 <oled_menuOnclick+0x244>
		if(menupos == songMenuSize){
 800a016:	4a62      	ldr	r2, [pc, #392]	; (800a1a0 <oled_menuOnclick+0x3a0>)
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	4294      	cmp	r4, r2
 800a01c:	d08b      	beq.n	8009f36 <oled_menuOnclick+0x136>
			memset(selectedSong, 0, 40);
 800a01e:	4c61      	ldr	r4, [pc, #388]	; (800a1a4 <oled_menuOnclick+0x3a4>)
 800a020:	0001      	movs	r1, r0
 800a022:	2228      	movs	r2, #40	; 0x28
 800a024:	0020      	movs	r0, r4
 800a026:	f001 fc68 	bl	800b8fa <memset>
			sprintf(selectedSong, "%s", songMenu[encoderpos].name);
 800a02a:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <oled_menuOnclick+0x2f4>)
 800a02c:	4a5e      	ldr	r2, [pc, #376]	; (800a1a8 <oled_menuOnclick+0x3a8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	0020      	movs	r0, r4
 800a032:	015b      	lsls	r3, r3, #5
 800a034:	5899      	ldr	r1, [r3, r2]
 800a036:	f001 fd7d 	bl	800bb34 <strcpy>
			midiController_play(ADDRESS_CONTROLLER, selectedSong);
 800a03a:	0021      	movs	r1, r4
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7fe fcf1 	bl	8008a24 <midiController_play>
 800a042:	e709      	b.n	8009e58 <oled_menuOnclick+0x58>
	}else if(strcmp(dispmenuname, "btScanedDevices") == 0){
 800a044:	4959      	ldr	r1, [pc, #356]	; (800a1ac <oled_menuOnclick+0x3ac>)
 800a046:	0028      	movs	r0, r5
 800a048:	f7f6 f85c 	bl	8000104 <strcmp>
 800a04c:	1e03      	subs	r3, r0, #0
 800a04e:	d109      	bne.n	800a064 <oled_menuOnclick+0x264>
		if(menupos == btScannedCount){
 800a050:	4a57      	ldr	r2, [pc, #348]	; (800a1b0 <oled_menuOnclick+0x3b0>)
 800a052:	7812      	ldrb	r2, [r2, #0]
 800a054:	4294      	cmp	r4, r2
 800a056:	d100      	bne.n	800a05a <oled_menuOnclick+0x25a>
 800a058:	e73d      	b.n	8009ed6 <oled_menuOnclick+0xd6>
			oled_setDisplayedSplash(oled_BtDevInfoSplash, &btScanned[menupos]);
 800a05a:	215c      	movs	r1, #92	; 0x5c
 800a05c:	434c      	muls	r4, r1
 800a05e:	4955      	ldr	r1, [pc, #340]	; (800a1b4 <oled_menuOnclick+0x3b4>)
 800a060:	1861      	adds	r1, r4, r1
 800a062:	e757      	b.n	8009f14 <oled_menuOnclick+0x114>
	}else if(strcmp(dispmenuname, "btBondedDevicesMenu") == 0){
 800a064:	4e54      	ldr	r6, [pc, #336]	; (800a1b8 <oled_menuOnclick+0x3b8>)
 800a066:	0028      	movs	r0, r5
 800a068:	0031      	movs	r1, r6
 800a06a:	f7f6 f84b 	bl	8000104 <strcmp>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d10f      	bne.n	800a092 <oled_menuOnclick+0x292>
		if(menupos == btBondedCount){
 800a072:	4b52      	ldr	r3, [pc, #328]	; (800a1bc <oled_menuOnclick+0x3bc>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	429c      	cmp	r4, r3
 800a078:	d101      	bne.n	800a07e <oled_menuOnclick+0x27e>
			oled_setDisplayedMenu("settingsmenu",&settingsmenu, sizeof(settingsmenu), 0);
 800a07a:	2300      	movs	r3, #0
 800a07c:	e71d      	b.n	8009eba <oled_menuOnclick+0xba>
			encoderpos = 1;
 800a07e:	2201      	movs	r2, #1
			btSelectedController = menupos;
 800a080:	4b4f      	ldr	r3, [pc, #316]	; (800a1c0 <oled_menuOnclick+0x3c0>)
			oled_setDisplayedMenu("controllermenu",&controllermenu, sizeof(controllermenu), 0);
 800a082:	4950      	ldr	r1, [pc, #320]	; (800a1c4 <oled_menuOnclick+0x3c4>)
			btSelectedController = menupos;
 800a084:	701c      	strb	r4, [r3, #0]
			encoderpos = 1;
 800a086:	4b1b      	ldr	r3, [pc, #108]	; (800a0f4 <oled_menuOnclick+0x2f4>)
			oled_setDisplayedMenu("controllermenu",&controllermenu, sizeof(controllermenu), 0);
 800a088:	484f      	ldr	r0, [pc, #316]	; (800a1c8 <oled_menuOnclick+0x3c8>)
			encoderpos = 1;
 800a08a:	601a      	str	r2, [r3, #0]
			oled_setDisplayedMenu("controllermenu",&controllermenu, sizeof(controllermenu), 0);
 800a08c:	2300      	movs	r3, #0
 800a08e:	323f      	adds	r2, #63	; 0x3f
 800a090:	e70a      	b.n	8009ea8 <oled_menuOnclick+0xa8>
	}else if(strcmp(dispmenuname, "controllermenu") == 0){
 800a092:	494d      	ldr	r1, [pc, #308]	; (800a1c8 <oled_menuOnclick+0x3c8>)
 800a094:	0028      	movs	r0, r5
 800a096:	f7f6 f835 	bl	8000104 <strcmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d10c      	bne.n	800a0b8 <oled_menuOnclick+0x2b8>
		switch(menupos){
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d103      	bne.n	800a0aa <oled_menuOnclick+0x2aa>
				workerBtRemoveController.assert = 1;
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	4b49      	ldr	r3, [pc, #292]	; (800a1cc <oled_menuOnclick+0x3cc>)
 800a0a6:	701a      	strb	r2, [r3, #0]
			break;
 800a0a8:	e6d6      	b.n	8009e58 <oled_menuOnclick+0x58>
				oled_setDisplayedMenu("btBondedDevicesMenu", &btBondedDevicesMenu, sizeof(btBondedDevicesMenu)-(10-btBondedCount-1)*sizeof(btBondedDevicesMenu[9]), 0);
 800a0aa:	4b44      	ldr	r3, [pc, #272]	; (800a1bc <oled_menuOnclick+0x3bc>)
 800a0ac:	4948      	ldr	r1, [pc, #288]	; (800a1d0 <oled_menuOnclick+0x3d0>)
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	3201      	adds	r2, #1
 800a0b4:	0152      	lsls	r2, r2, #5
 800a0b6:	e740      	b.n	8009f3a <oled_menuOnclick+0x13a>
	}else if(strcmp(dispmenuname, "organmenu") == 0){
 800a0b8:	4916      	ldr	r1, [pc, #88]	; (800a114 <oled_menuOnclick+0x314>)
 800a0ba:	0028      	movs	r0, r5
 800a0bc:	f7f6 f822 	bl	8000104 <strcmp>
 800a0c0:	1e03      	subs	r3, r0, #0
 800a0c2:	d000      	beq.n	800a0c6 <oled_menuOnclick+0x2c6>
 800a0c4:	e6c8      	b.n	8009e58 <oled_menuOnclick+0x58>
		switch(menupos){
 800a0c6:	2c00      	cmp	r4, #0
 800a0c8:	d005      	beq.n	800a0d6 <oled_menuOnclick+0x2d6>
 800a0ca:	2c01      	cmp	r4, #1
 800a0cc:	d006      	beq.n	800a0dc <oled_menuOnclick+0x2dc>
						oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 800a0ce:	22a0      	movs	r2, #160	; 0xa0
 800a0d0:	491e      	ldr	r1, [pc, #120]	; (800a14c <oled_menuOnclick+0x34c>)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <oled_menuOnclick+0x2e8>)
 800a0d4:	e6e8      	b.n	8009ea8 <oled_menuOnclick+0xa8>
						midiController_current_On();
 800a0d6:	f7fe fc4d 	bl	8008974 <midiController_current_On>
					break;
 800a0da:	e6bd      	b.n	8009e58 <oled_menuOnclick+0x58>
						midiController_current_Off();
 800a0dc:	f7fe fc5a 	bl	8008994 <midiController_current_Off>
					break;
 800a0e0:	e6ba      	b.n	8009e58 <oled_menuOnclick+0x58>
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	2000322c 	.word	0x2000322c
 800a0e8:	0800e070 	.word	0x0800e070
 800a0ec:	20002851 	.word	0x20002851
 800a0f0:	200028b4 	.word	0x200028b4
 800a0f4:	20003b00 	.word	0x20003b00
 800a0f8:	200028c4 	.word	0x200028c4
 800a0fc:	0800e17f 	.word	0x0800e17f
 800a100:	200028c7 	.word	0x200028c7
 800a104:	0800e184 	.word	0x0800e184
 800a108:	0800e190 	.word	0x0800e190
 800a10c:	08009b79 	.word	0x08009b79
 800a110:	20000328 	.word	0x20000328
 800a114:	0800e19c 	.word	0x0800e19c
 800a118:	200000c8 	.word	0x200000c8
 800a11c:	0800e0f8 	.word	0x0800e0f8
 800a120:	20000388 	.word	0x20000388
 800a124:	0800e16c 	.word	0x0800e16c
 800a128:	20000008 	.word	0x20000008
 800a12c:	0800e1a6 	.word	0x0800e1a6
 800a130:	080091ed 	.word	0x080091ed
 800a134:	0800e1b4 	.word	0x0800e1b4
 800a138:	20000c49 	.word	0x20000c49
 800a13c:	0800e1bc 	.word	0x0800e1bc
 800a140:	200028be 	.word	0x200028be
 800a144:	20002fc8 	.word	0x20002fc8
 800a148:	080090e5 	.word	0x080090e5
 800a14c:	20000288 	.word	0x20000288
 800a150:	0800def2 	.word	0x0800def2
 800a154:	08009abd 	.word	0x08009abd
 800a158:	0800e165 	.word	0x0800e165
 800a15c:	20000ac8 	.word	0x20000ac8
 800a160:	20000acb 	.word	0x20000acb
 800a164:	20002ccc 	.word	0x20002ccc
 800a168:	0800e181 	.word	0x0800e181
 800a16c:	20002ccf 	.word	0x20002ccf
 800a170:	0800e1c4 	.word	0x0800e1c4
 800a174:	20003da8 	.word	0x20003da8
 800a178:	08010dfa 	.word	0x08010dfa
 800a17c:	20003dab 	.word	0x20003dab
 800a180:	0800e1d0 	.word	0x0800e1d0
 800a184:	0800e1d8 	.word	0x0800e1d8
 800a188:	20000128 	.word	0x20000128
 800a18c:	0800e1de 	.word	0x0800e1de
 800a190:	20003da7 	.word	0x20003da7
 800a194:	20000ac6 	.word	0x20000ac6
 800a198:	200001e8 	.word	0x200001e8
 800a19c:	0800e080 	.word	0x0800e080
 800a1a0:	20000c48 	.word	0x20000c48
 800a1a4:	20002f8c 	.word	0x20002f8c
 800a1a8:	20000c68 	.word	0x20000c68
 800a1ac:	0800e046 	.word	0x0800e046
 800a1b0:	20002c9e 	.word	0x20002c9e
 800a1b4:	200018e8 	.word	0x200018e8
 800a1b8:	0800e056 	.word	0x0800e056
 800a1bc:	20003230 	.word	0x20003230
 800a1c0:	20003d94 	.word	0x20003d94
 800a1c4:	20000088 	.word	0x20000088
 800a1c8:	0800e1f5 	.word	0x0800e1f5
 800a1cc:	20002c9c 	.word	0x20002c9c
 800a1d0:	20000b00 	.word	0x20000b00

0800a1d4 <oled_begin>:
void oled_begin(){
 800a1d4:	b510      	push	{r4, lr}
	ssd1306_Init();
 800a1d6:	f000 ff23 	bl	800b020 <ssd1306_Init>
	oled_setDisplayedMenu("mainmenu", &mainmenu, sizeof(mainmenu), 0);
 800a1da:	2300      	movs	r3, #0
 800a1dc:	22a0      	movs	r2, #160	; 0xa0
 800a1de:	4910      	ldr	r1, [pc, #64]	; (800a220 <oled_begin+0x4c>)
 800a1e0:	4810      	ldr	r0, [pc, #64]	; (800a224 <oled_begin+0x50>)
 800a1e2:	f7ff fc31 	bl	8009a48 <oled_setDisplayedMenu>
	oled_setDisplayedSplash(oled_StartSplash, "");
 800a1e6:	4910      	ldr	r1, [pc, #64]	; (800a228 <oled_begin+0x54>)
 800a1e8:	4810      	ldr	r0, [pc, #64]	; (800a22c <oled_begin+0x58>)
 800a1ea:	f7ff fdf5 	bl	8009dd8 <oled_setDisplayedSplash>
	refreshHalt = 0;
 800a1ee:	2300      	movs	r3, #0
	encoderposOld = -1;
 800a1f0:	2101      	movs	r1, #1
	refreshHalt = 0;
 800a1f2:	4a0f      	ldr	r2, [pc, #60]	; (800a230 <oled_begin+0x5c>)
	encoderposOld = -1;
 800a1f4:	4249      	negs	r1, r1
	refreshHalt = 0;
 800a1f6:	6013      	str	r3, [r2, #0]
	encoderpos = 0;
 800a1f8:	4a0e      	ldr	r2, [pc, #56]	; (800a234 <oled_begin+0x60>)
	HAL_TIM_Base_Start_IT(&htim2);
 800a1fa:	480f      	ldr	r0, [pc, #60]	; (800a238 <oled_begin+0x64>)
	encoderpos = 0;
 800a1fc:	6013      	str	r3, [r2, #0]
	encoderposOld = -1;
 800a1fe:	4a0f      	ldr	r2, [pc, #60]	; (800a23c <oled_begin+0x68>)
 800a200:	6011      	str	r1, [r2, #0]
	scrollPause = 0;
 800a202:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <oled_begin+0x6c>)
 800a204:	6013      	str	r3, [r2, #0]
	scrollPauseDone = 0;
 800a206:	4a0f      	ldr	r2, [pc, #60]	; (800a244 <oled_begin+0x70>)
 800a208:	6013      	str	r3, [r2, #0]
	loadingToggle = 0;
 800a20a:	4a0f      	ldr	r2, [pc, #60]	; (800a248 <oled_begin+0x74>)
 800a20c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 800a20e:	f7fb faff 	bl	8005810 <HAL_TIM_Base_Start_IT>
	oledHeader = (char*)malloc(50);
 800a212:	2032      	movs	r0, #50	; 0x32
 800a214:	f001 fb54 	bl	800b8c0 <malloc>
 800a218:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <oled_begin+0x78>)
 800a21a:	6018      	str	r0, [r3, #0]
}
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	20000288 	.word	0x20000288
 800a224:	0800e070 	.word	0x0800e070
 800a228:	0800def2 	.word	0x0800def2
 800a22c:	08009085 	.word	0x08009085
 800a230:	20002854 	.word	0x20002854
 800a234:	20003b00 	.word	0x20003b00
 800a238:	2000484c 	.word	0x2000484c
 800a23c:	20002fb8 	.word	0x20002fb8
 800a240:	20003b0c 	.word	0x20003b0c
 800a244:	20000ab4 	.word	0x20000ab4
 800a248:	20002fc0 	.word	0x20002fc0
 800a24c:	20002ca0 	.word	0x20002ca0

0800a250 <oled_drawMenu>:
void oled_drawMenu(){
 800a250:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(encoderclick){
 800a252:	4bd3      	ldr	r3, [pc, #844]	; (800a5a0 <oled_drawMenu+0x350>)
void oled_drawMenu(){
 800a254:	b08d      	sub	sp, #52	; 0x34
	if(encoderclick){
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4ed2      	ldr	r6, [pc, #840]	; (800a5a4 <oled_drawMenu+0x354>)
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <oled_drawMenu+0x14>
		oled_menuOnclick(encoderpos);
 800a25e:	6830      	ldr	r0, [r6, #0]
 800a260:	f7ff fdce 	bl	8009e00 <oled_menuOnclick>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800a264:	4cd0      	ldr	r4, [pc, #832]	; (800a5a8 <oled_drawMenu+0x358>)
 800a266:	2200      	movs	r2, #0
 800a268:	a907      	add	r1, sp, #28
 800a26a:	0020      	movs	r0, r4
 800a26c:	f7fb fa28 	bl	80056c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800a270:	2200      	movs	r2, #0
 800a272:	a903      	add	r1, sp, #12
 800a274:	0020      	movs	r0, r4
 800a276:	f7fb fa4b 	bl	8005710 <HAL_RTC_GetDate>
	sprintf(oledHeader, "%d %X", battVoltage, I2C_buffer[8]);
 800a27a:	4ccc      	ldr	r4, [pc, #816]	; (800a5ac <oled_drawMenu+0x35c>)
 800a27c:	4bcc      	ldr	r3, [pc, #816]	; (800a5b0 <oled_drawMenu+0x360>)
 800a27e:	4acd      	ldr	r2, [pc, #820]	; (800a5b4 <oled_drawMenu+0x364>)
 800a280:	7a1b      	ldrb	r3, [r3, #8]
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	49cc      	ldr	r1, [pc, #816]	; (800a5b8 <oled_drawMenu+0x368>)
 800a286:	6820      	ldr	r0, [r4, #0]
 800a288:	f001 fbfa 	bl	800ba80 <siprintf>
	ssd1306_SetCursor(2,0);
 800a28c:	2100      	movs	r1, #0
 800a28e:	2002      	movs	r0, #2
 800a290:	f001 f804 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(oledHeader, Font_7x10, White);
 800a294:	4ac9      	ldr	r2, [pc, #804]	; (800a5bc <oled_drawMenu+0x36c>)
 800a296:	2301      	movs	r3, #1
 800a298:	6811      	ldr	r1, [r2, #0]
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	6852      	ldr	r2, [r2, #4]
 800a29e:	f000 ffe9 	bl	800b274 <ssd1306_WriteString>
	if(battStatus <= 4){
 800a2a2:	4dc7      	ldr	r5, [pc, #796]	; (800a5c0 <oled_drawMenu+0x370>)
 800a2a4:	4cc7      	ldr	r4, [pc, #796]	; (800a5c4 <oled_drawMenu+0x374>)
 800a2a6:	782b      	ldrb	r3, [r5, #0]
		ssd1306_SetCursor(114,0);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2072      	movs	r0, #114	; 0x72
	if(battStatus <= 4){
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d871      	bhi.n	800a394 <oled_drawMenu+0x144>
		ssd1306_SetCursor(114,0);
 800a2b0:	f000 fff4 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(32+(2*battStatus), Icon_7x10, White);
 800a2b4:	7828      	ldrb	r0, [r5, #0]
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	3010      	adds	r0, #16
 800a2ba:	0040      	lsls	r0, r0, #1
 800a2bc:	6821      	ldr	r1, [r4, #0]
 800a2be:	6862      	ldr	r2, [r4, #4]
 800a2c0:	b2c0      	uxtb	r0, r0
 800a2c2:	f000 ff81 	bl	800b1c8 <ssd1306_WriteChar>
		ssd1306_SetCursor(121,0);
 800a2c6:	2079      	movs	r0, #121	; 0x79
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	f000 ffe7 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(33+(2*battStatus), Icon_7x10, White);
 800a2ce:	7828      	ldrb	r0, [r5, #0]
		ssd1306_WriteChar(33+(2*battAnim), Icon_7x10, White);
 800a2d0:	0040      	lsls	r0, r0, #1
 800a2d2:	3021      	adds	r0, #33	; 0x21
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	6821      	ldr	r1, [r4, #0]
 800a2d8:	b2c0      	uxtb	r0, r0
 800a2da:	6862      	ldr	r2, [r4, #4]
 800a2dc:	f000 ff74 	bl	800b1c8 <ssd1306_WriteChar>
	if(btDataIcon >= 0){
 800a2e0:	4db9      	ldr	r5, [pc, #740]	; (800a5c8 <oled_drawMenu+0x378>)
		ssd1306_SetCursor(93,0);
 800a2e2:	2100      	movs	r1, #0
	if(btDataIcon >= 0){
 800a2e4:	782b      	ldrb	r3, [r5, #0]
		ssd1306_SetCursor(93,0);
 800a2e6:	205d      	movs	r0, #93	; 0x5d
	if(btDataIcon >= 0){
 800a2e8:	2b7f      	cmp	r3, #127	; 0x7f
 800a2ea:	d865      	bhi.n	800a3b8 <oled_drawMenu+0x168>
		ssd1306_SetCursor(93,0);
 800a2ec:	f000 ffd6 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(42+(2*btDataIcon), Icon_7x10, White);
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	5628      	ldrsb	r0, [r5, r0]
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	3015      	adds	r0, #21
 800a2f8:	0040      	lsls	r0, r0, #1
 800a2fa:	6821      	ldr	r1, [r4, #0]
 800a2fc:	6862      	ldr	r2, [r4, #4]
 800a2fe:	b2c0      	uxtb	r0, r0
 800a300:	f000 ff62 	bl	800b1c8 <ssd1306_WriteChar>
		ssd1306_SetCursor(100,0);
 800a304:	2100      	movs	r1, #0
 800a306:	2064      	movs	r0, #100	; 0x64
 800a308:	f000 ffc8 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(43+(2*btDataIcon), Icon_7x10, White);
 800a30c:	cc06      	ldmia	r4!, {r1, r2}
 800a30e:	2301      	movs	r3, #1
 800a310:	7828      	ldrb	r0, [r5, #0]
 800a312:	0040      	lsls	r0, r0, #1
 800a314:	302b      	adds	r0, #43	; 0x2b
 800a316:	b2c0      	uxtb	r0, r0
		ssd1306_WriteChar(43+6, Icon_7x10, White);
 800a318:	f000 ff56 	bl	800b1c8 <ssd1306_WriteChar>
	if(strlen(dispmenu[encoderpos].name) > 9 && encoderpos != encoderposOld){
 800a31c:	6833      	ldr	r3, [r6, #0]
 800a31e:	4fab      	ldr	r7, [pc, #684]	; (800a5cc <oled_drawMenu+0x37c>)
 800a320:	015c      	lsls	r4, r3, #5
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	59e3      	ldr	r3, [r4, r7]
 800a326:	0018      	movs	r0, r3
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f7f5 fef5 	bl	8000118 <strlen>
 800a32e:	2809      	cmp	r0, #9
 800a330:	d914      	bls.n	800a35c <oled_drawMenu+0x10c>
 800a332:	4da7      	ldr	r5, [pc, #668]	; (800a5d0 <oled_drawMenu+0x380>)
 800a334:	9b00      	ldr	r3, [sp, #0]
 800a336:	682a      	ldr	r2, [r5, #0]
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <oled_drawMenu+0x10c>
		scrollIndex = 0;
 800a33c:	2200      	movs	r2, #0
 800a33e:	4ba5      	ldr	r3, [pc, #660]	; (800a5d4 <oled_drawMenu+0x384>)
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 800a340:	9801      	ldr	r0, [sp, #4]
		scrollIndex = 0;
 800a342:	601a      	str	r2, [r3, #0]
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 800a344:	f7f5 fee8 	bl	8000118 <strlen>
		scrollPause = 0;
 800a348:	2200      	movs	r2, #0
		scrollMax = strlen(dispmenu[encoderpos].name)-10;
 800a34a:	4ba3      	ldr	r3, [pc, #652]	; (800a5d8 <oled_drawMenu+0x388>)
 800a34c:	380a      	subs	r0, #10
 800a34e:	6018      	str	r0, [r3, #0]
		encoderposOld = encoderpos;
 800a350:	9b00      	ldr	r3, [sp, #0]
 800a352:	602b      	str	r3, [r5, #0]
		scrollPause = 0;
 800a354:	4ba1      	ldr	r3, [pc, #644]	; (800a5dc <oled_drawMenu+0x38c>)
 800a356:	601a      	str	r2, [r3, #0]
		scrollPauseDone = 0;
 800a358:	4ba1      	ldr	r3, [pc, #644]	; (800a5e0 <oled_drawMenu+0x390>)
 800a35a:	601a      	str	r2, [r3, #0]
	if(encoderpos != (signed int)(dispmenusize)-1){
 800a35c:	4ba1      	ldr	r3, [pc, #644]	; (800a5e4 <oled_drawMenu+0x394>)
 800a35e:	9900      	ldr	r1, [sp, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	1e5a      	subs	r2, r3, #1
 800a364:	4291      	cmp	r1, r2
 800a366:	d100      	bne.n	800a36a <oled_drawMenu+0x11a>
 800a368:	e096      	b.n	800a498 <oled_drawMenu+0x248>
 800a36a:	193c      	adds	r4, r7, r4
				dispmenu[i].selected = 1;
 800a36c:	2701      	movs	r7, #1
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 800a36e:	6831      	ldr	r1, [r6, #0]
 800a370:	9b00      	ldr	r3, [sp, #0]
 800a372:	1c4a      	adds	r2, r1, #1
 800a374:	4293      	cmp	r3, r2
 800a376:	dd2f      	ble.n	800a3d8 <oled_drawMenu+0x188>
	if(encoderpos <= 0){
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd00      	ble.n	800a380 <oled_drawMenu+0x130>
 800a37e:	e0f6      	b.n	800a56e <oled_drawMenu+0x31e>
		ssd1306_SetCursor(117,41);
 800a380:	2129      	movs	r1, #41	; 0x29
 800a382:	2075      	movs	r0, #117	; 0x75
 800a384:	f000 ff8a 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 800a388:	2301      	movs	r3, #1
 800a38a:	4a97      	ldr	r2, [pc, #604]	; (800a5e8 <oled_drawMenu+0x398>)
 800a38c:	6811      	ldr	r1, [r2, #0]
 800a38e:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 800a390:	2023      	movs	r0, #35	; 0x23
 800a392:	e0fa      	b.n	800a58a <oled_drawMenu+0x33a>
		ssd1306_SetCursor(114,0);
 800a394:	f000 ff82 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(32+(2*battAnim), Icon_7x10, White);
 800a398:	4d94      	ldr	r5, [pc, #592]	; (800a5ec <oled_drawMenu+0x39c>)
 800a39a:	2301      	movs	r3, #1
 800a39c:	6828      	ldr	r0, [r5, #0]
 800a39e:	6821      	ldr	r1, [r4, #0]
 800a3a0:	3010      	adds	r0, #16
 800a3a2:	0040      	lsls	r0, r0, #1
 800a3a4:	6862      	ldr	r2, [r4, #4]
 800a3a6:	b2c0      	uxtb	r0, r0
 800a3a8:	f000 ff0e 	bl	800b1c8 <ssd1306_WriteChar>
		ssd1306_SetCursor(121,0);
 800a3ac:	2079      	movs	r0, #121	; 0x79
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	f000 ff74 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(33+(2*battAnim), Icon_7x10, White);
 800a3b4:	6828      	ldr	r0, [r5, #0]
 800a3b6:	e78b      	b.n	800a2d0 <oled_drawMenu+0x80>
		ssd1306_SetCursor(93,0);
 800a3b8:	f000 ff70 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(42+6, Icon_7x10, White);
 800a3bc:	2301      	movs	r3, #1
 800a3be:	6821      	ldr	r1, [r4, #0]
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	2030      	movs	r0, #48	; 0x30
 800a3c4:	f000 ff00 	bl	800b1c8 <ssd1306_WriteChar>
		ssd1306_SetCursor(100,0);
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	2064      	movs	r0, #100	; 0x64
 800a3cc:	f000 ff66 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(43+6, Icon_7x10, White);
 800a3d0:	cc06      	ldmia	r4!, {r1, r2}
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	2031      	movs	r0, #49	; 0x31
 800a3d6:	e79f      	b.n	800a318 <oled_drawMenu+0xc8>
			if(i == encoderpos){
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	428b      	cmp	r3, r1
 800a3dc:	d14a      	bne.n	800a474 <oled_drawMenu+0x224>
				dispmenu[i].selected = 1;
 800a3de:	6067      	str	r7, [r4, #4]
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 800a3e0:	9b00      	ldr	r3, [sp, #0]
 800a3e2:	200d      	movs	r0, #13
 800a3e4:	1a59      	subs	r1, r3, r1
 800a3e6:	2312      	movs	r3, #18
 800a3e8:	3101      	adds	r1, #1
 800a3ea:	4359      	muls	r1, r3
 800a3ec:	3103      	adds	r1, #3
 800a3ee:	b2c9      	uxtb	r1, r1
 800a3f0:	f000 ff54 	bl	800b29c <ssd1306_SetCursor>
			if(strlen(dispmenu[i].name) > 9){
 800a3f4:	6825      	ldr	r5, [r4, #0]
 800a3f6:	0028      	movs	r0, r5
 800a3f8:	f7f5 fe8e 	bl	8000118 <strlen>
 800a3fc:	2809      	cmp	r0, #9
 800a3fe:	d93f      	bls.n	800a480 <oled_drawMenu+0x230>
				if(dispmenu[i].selected){
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d038      	beq.n	800a47a <oled_drawMenu+0x22a>
					memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 800a408:	2209      	movs	r2, #9
 800a40a:	4b72      	ldr	r3, [pc, #456]	; (800a5d4 <oled_drawMenu+0x384>)
 800a40c:	6819      	ldr	r1, [r3, #0]
 800a40e:	1869      	adds	r1, r5, r1
 800a410:	a804      	add	r0, sp, #16
 800a412:	f001 fa69 	bl	800b8e8 <memcpy>
					memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 800a416:	0028      	movs	r0, r5
 800a418:	f7f5 fe7e 	bl	8000118 <strlen>
 800a41c:	0002      	movs	r2, r0
 800a41e:	2011      	movs	r0, #17
 800a420:	ab02      	add	r3, sp, #8
 800a422:	3a09      	subs	r2, #9
 800a424:	2100      	movs	r1, #0
 800a426:	18c0      	adds	r0, r0, r3
 800a428:	f001 fa67 	bl	800b8fa <memset>
					ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 800a42c:	003b      	movs	r3, r7
 800a42e:	68a2      	ldr	r2, [r4, #8]
 800a430:	a804      	add	r0, sp, #16
 800a432:	6811      	ldr	r1, [r2, #0]
 800a434:	6852      	ldr	r2, [r2, #4]
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800a436:	f000 ff1d 	bl	800b274 <ssd1306_WriteString>
			ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+1)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	6832      	ldr	r2, [r6, #0]
 800a43e:	2002      	movs	r0, #2
 800a440:	1a99      	subs	r1, r3, r2
 800a442:	2312      	movs	r3, #18
 800a444:	3101      	adds	r1, #1
 800a446:	4359      	muls	r1, r3
 800a448:	3103      	adds	r1, #3
 800a44a:	b2c9      	uxtb	r1, r1
 800a44c:	f000 ff26 	bl	800b29c <ssd1306_SetCursor>
			if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 800a450:	68e1      	ldr	r1, [r4, #12]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	4a64      	ldr	r2, [pc, #400]	; (800a5e8 <oled_drawMenu+0x398>)
 800a456:	2900      	cmp	r1, #0
 800a458:	d01a      	beq.n	800a490 <oled_drawMenu+0x240>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d016      	beq.n	800a48c <oled_drawMenu+0x23c>
				ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 800a45e:	7d20      	ldrb	r0, [r4, #20]
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800a460:	003b      	movs	r3, r7
 800a462:	6811      	ldr	r1, [r2, #0]
 800a464:	6852      	ldr	r2, [r2, #4]
 800a466:	f000 feaf 	bl	800b1c8 <ssd1306_WriteChar>
		for(int i = encoderpos; i <= (encoderpos+1); i++){
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	3420      	adds	r4, #32
 800a46e:	3301      	adds	r3, #1
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	e77c      	b.n	800a36e <oled_drawMenu+0x11e>
			}else dispmenu[i].selected = 0;
 800a474:	2200      	movs	r2, #0
 800a476:	6062      	str	r2, [r4, #4]
 800a478:	e7b2      	b.n	800a3e0 <oled_drawMenu+0x190>
					memcpy(tmp, dispmenu[i].name, 9);
 800a47a:	2209      	movs	r2, #9
 800a47c:	0029      	movs	r1, r5
 800a47e:	e7c7      	b.n	800a410 <oled_drawMenu+0x1c0>
			}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800a480:	68a2      	ldr	r2, [r4, #8]
 800a482:	003b      	movs	r3, r7
 800a484:	6811      	ldr	r1, [r2, #0]
 800a486:	0028      	movs	r0, r5
 800a488:	6852      	ldr	r2, [r2, #4]
 800a48a:	e7d4      	b.n	800a436 <oled_drawMenu+0x1e6>
				ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 800a48c:	7c20      	ldrb	r0, [r4, #16]
 800a48e:	e7e7      	b.n	800a460 <oled_drawMenu+0x210>
				ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800a490:	2021      	movs	r0, #33	; 0x21
 800a492:	1ac0      	subs	r0, r0, r3
 800a494:	b2c0      	uxtb	r0, r0
 800a496:	e7e3      	b.n	800a460 <oled_drawMenu+0x210>
 800a498:	3c1c      	subs	r4, #28
 800a49a:	193c      	adds	r4, r7, r4
					dispmenu[i].selected = 1;
 800a49c:	2701      	movs	r7, #1
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 800a49e:	3b02      	subs	r3, #2
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	6831      	ldr	r1, [r6, #0]
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	428b      	cmp	r3, r1
 800a4a8:	dd00      	ble.n	800a4ac <oled_drawMenu+0x25c>
 800a4aa:	e765      	b.n	800a378 <oled_drawMenu+0x128>
				if((i) == encoderpos){
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	428b      	cmp	r3, r1
 800a4b0:	d14b      	bne.n	800a54a <oled_drawMenu+0x2fa>
					dispmenu[i].selected = 1;
 800a4b2:	6027      	str	r7, [r4, #0]
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING + OLED_MENU_TEXT_WIDTH,(i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	200d      	movs	r0, #13
 800a4b8:	1a59      	subs	r1, r3, r1
 800a4ba:	2312      	movs	r3, #18
 800a4bc:	3102      	adds	r1, #2
 800a4be:	4359      	muls	r1, r3
 800a4c0:	3103      	adds	r1, #3
 800a4c2:	b2c9      	uxtb	r1, r1
 800a4c4:	f000 feea 	bl	800b29c <ssd1306_SetCursor>
				if(strlen(dispmenu[i].name) > 9){
 800a4c8:	1f23      	subs	r3, r4, #4
 800a4ca:	681d      	ldr	r5, [r3, #0]
 800a4cc:	0028      	movs	r0, r5
 800a4ce:	f7f5 fe23 	bl	8000118 <strlen>
 800a4d2:	2809      	cmp	r0, #9
 800a4d4:	d93f      	bls.n	800a556 <oled_drawMenu+0x306>
					if(dispmenu[i].selected){
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d038      	beq.n	800a550 <oled_drawMenu+0x300>
						memcpy(tmp, dispmenu[i].name+scrollIndex, 9);
 800a4de:	2209      	movs	r2, #9
 800a4e0:	4b3c      	ldr	r3, [pc, #240]	; (800a5d4 <oled_drawMenu+0x384>)
 800a4e2:	6819      	ldr	r1, [r3, #0]
 800a4e4:	1869      	adds	r1, r5, r1
 800a4e6:	a804      	add	r0, sp, #16
 800a4e8:	f001 f9fe 	bl	800b8e8 <memcpy>
						memset(tmp+9, 0, strlen(dispmenu[i].name)-9);
 800a4ec:	0028      	movs	r0, r5
 800a4ee:	f7f5 fe13 	bl	8000118 <strlen>
 800a4f2:	0002      	movs	r2, r0
 800a4f4:	2011      	movs	r0, #17
 800a4f6:	ab02      	add	r3, sp, #8
 800a4f8:	3a09      	subs	r2, #9
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	18c0      	adds	r0, r0, r3
 800a4fe:	f001 f9fc 	bl	800b8fa <memset>
						ssd1306_WriteString(tmp, *dispmenu[i].font, White);
 800a502:	003b      	movs	r3, r7
 800a504:	6862      	ldr	r2, [r4, #4]
 800a506:	a804      	add	r0, sp, #16
 800a508:	6811      	ldr	r1, [r2, #0]
 800a50a:	6852      	ldr	r2, [r2, #4]
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800a50c:	f000 feb2 	bl	800b274 <ssd1306_WriteString>
				ssd1306_SetCursor(OLED_MENU_LEFT_PADDING, (i-encoderpos+2)*OLED_MENU_TEXT_HEIGHT + OLED_MENU_TOP_PADDING);
 800a510:	9b00      	ldr	r3, [sp, #0]
 800a512:	6832      	ldr	r2, [r6, #0]
 800a514:	2002      	movs	r0, #2
 800a516:	1a99      	subs	r1, r3, r2
 800a518:	2312      	movs	r3, #18
 800a51a:	3102      	adds	r1, #2
 800a51c:	4359      	muls	r1, r3
 800a51e:	3103      	adds	r1, #3
 800a520:	b2c9      	uxtb	r1, r1
 800a522:	f000 febb 	bl	800b29c <ssd1306_SetCursor>
				if(dispmenu[i].hasSpecialSelector && dispmenu[i].selected){
 800a526:	68a1      	ldr	r1, [r4, #8]
 800a528:	4a2f      	ldr	r2, [pc, #188]	; (800a5e8 <oled_drawMenu+0x398>)
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d01a      	beq.n	800a566 <oled_drawMenu+0x316>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d016      	beq.n	800a562 <oled_drawMenu+0x312>
					ssd1306_WriteChar(dispmenu[i].specharSelected, Icon_11x18, White);
 800a534:	7c20      	ldrb	r0, [r4, #16]
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800a536:	003b      	movs	r3, r7
 800a538:	6811      	ldr	r1, [r2, #0]
 800a53a:	6852      	ldr	r2, [r2, #4]
 800a53c:	f000 fe44 	bl	800b1c8 <ssd1306_WriteChar>
		for(int i = encoderpos-1; i <= (encoderpos); i++){
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	3420      	adds	r4, #32
 800a544:	3301      	adds	r3, #1
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	e7ab      	b.n	800a4a2 <oled_drawMenu+0x252>
				}else dispmenu[i].selected = 0;
 800a54a:	2200      	movs	r2, #0
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	e7b1      	b.n	800a4b4 <oled_drawMenu+0x264>
						memcpy(tmp, dispmenu[i].name, 9);
 800a550:	2209      	movs	r2, #9
 800a552:	0029      	movs	r1, r5
 800a554:	e7c7      	b.n	800a4e6 <oled_drawMenu+0x296>
				}else ssd1306_WriteString(dispmenu[i].name, *dispmenu[i].font, White);
 800a556:	6862      	ldr	r2, [r4, #4]
 800a558:	003b      	movs	r3, r7
 800a55a:	6811      	ldr	r1, [r2, #0]
 800a55c:	0028      	movs	r0, r5
 800a55e:	6852      	ldr	r2, [r2, #4]
 800a560:	e7d4      	b.n	800a50c <oled_drawMenu+0x2bc>
					ssd1306_WriteChar(dispmenu[i].specharNotSelected, Icon_11x18, White);
 800a562:	7b20      	ldrb	r0, [r4, #12]
 800a564:	e7e7      	b.n	800a536 <oled_drawMenu+0x2e6>
					ssd1306_WriteChar(33-(dispmenu[i].selected), Icon_11x18, White);
 800a566:	2021      	movs	r0, #33	; 0x21
 800a568:	1ac0      	subs	r0, r0, r3
 800a56a:	b2c0      	uxtb	r0, r0
 800a56c:	e7e3      	b.n	800a536 <oled_drawMenu+0x2e6>
	}else if(encoderpos == dispmenusize-1){
 800a56e:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <oled_drawMenu+0x394>)
 800a570:	6812      	ldr	r2, [r2, #0]
 800a572:	1e51      	subs	r1, r2, #1
 800a574:	428b      	cmp	r3, r1
 800a576:	d13d      	bne.n	800a5f4 <oled_drawMenu+0x3a4>
		ssd1306_SetCursor(117,19);
 800a578:	2113      	movs	r1, #19
 800a57a:	2075      	movs	r0, #117	; 0x75
 800a57c:	f000 fe8e 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 800a580:	2301      	movs	r3, #1
 800a582:	2022      	movs	r0, #34	; 0x22
 800a584:	4a18      	ldr	r2, [pc, #96]	; (800a5e8 <oled_drawMenu+0x398>)
 800a586:	6811      	ldr	r1, [r2, #0]
 800a588:	6852      	ldr	r2, [r2, #4]
		ssd1306_WriteChar(35, Icon_11x18, White);
 800a58a:	f000 fe1d 	bl	800b1c8 <ssd1306_WriteChar>
	if(!refreshHalt) ssd1306_UpdateScreen(0);
 800a58e:	4b18      	ldr	r3, [pc, #96]	; (800a5f0 <oled_drawMenu+0x3a0>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	2800      	cmp	r0, #0
 800a594:	d101      	bne.n	800a59a <oled_drawMenu+0x34a>
 800a596:	f000 fd1d 	bl	800afd4 <ssd1306_UpdateScreen>
}
 800a59a:	b00d      	add	sp, #52	; 0x34
 800a59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	200028b4 	.word	0x200028b4
 800a5a4:	20003b00 	.word	0x20003b00
 800a5a8:	200042ec 	.word	0x200042ec
 800a5ac:	20002ca0 	.word	0x20002ca0
 800a5b0:	20000a3c 	.word	0x20000a3c
 800a5b4:	20000aac 	.word	0x20000aac
 800a5b8:	0800e179 	.word	0x0800e179
 800a5bc:	200003f8 	.word	0x200003f8
 800a5c0:	200028f8 	.word	0x200028f8
 800a5c4:	20000408 	.word	0x20000408
 800a5c8:	20002cfd 	.word	0x20002cfd
 800a5cc:	2000201c 	.word	0x2000201c
 800a5d0:	20002fb8 	.word	0x20002fb8
 800a5d4:	20003b10 	.word	0x20003b10
 800a5d8:	20000abc 	.word	0x20000abc
 800a5dc:	20003b0c 	.word	0x20003b0c
 800a5e0:	20000ab4 	.word	0x20000ab4
 800a5e4:	20003b08 	.word	0x20003b08
 800a5e8:	20000400 	.word	0x20000400
 800a5ec:	20002fb4 	.word	0x20002fb4
 800a5f0:	20002854 	.word	0x20002854
	}else if(encoderpos > 0 && encoderpos < dispmenusize){
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	daca      	bge.n	800a58e <oled_drawMenu+0x33e>
		ssd1306_SetCursor(117,19);
 800a5f8:	2113      	movs	r1, #19
 800a5fa:	2075      	movs	r0, #117	; 0x75
 800a5fc:	f000 fe4e 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(34, Icon_11x18, White);
 800a600:	4c06      	ldr	r4, [pc, #24]	; (800a61c <oled_drawMenu+0x3cc>)
 800a602:	2301      	movs	r3, #1
 800a604:	6821      	ldr	r1, [r4, #0]
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	2022      	movs	r0, #34	; 0x22
 800a60a:	f000 fddd 	bl	800b1c8 <ssd1306_WriteChar>
		ssd1306_SetCursor(117,41);
 800a60e:	2129      	movs	r1, #41	; 0x29
 800a610:	2075      	movs	r0, #117	; 0x75
 800a612:	f000 fe43 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteChar(35, Icon_11x18, White);
 800a616:	cc06      	ldmia	r4!, {r1, r2}
 800a618:	2301      	movs	r3, #1
 800a61a:	e6b9      	b.n	800a390 <oled_drawMenu+0x140>
 800a61c:	20000400 	.word	0x20000400

0800a620 <oled_refresh>:
void oled_refresh(){
 800a620:	b510      	push	{r4, lr}
	ssd1306_Fill(0);
 800a622:	2000      	movs	r0, #0
 800a624:	f000 fcc8 	bl	800afb8 <ssd1306_Fill>
	if(oledType == OLED_MENU){
 800a628:	4b08      	ldr	r3, [pc, #32]	; (800a64c <oled_refresh+0x2c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d102      	bne.n	800a636 <oled_refresh+0x16>
		oled_drawMenu();
 800a630:	f7ff fe0e 	bl	800a250 <oled_drawMenu>
}
 800a634:	bd10      	pop	{r4, pc}
	}else if(oledType == OLED_SPLASH){
 800a636:	2b03      	cmp	r3, #3
 800a638:	d1fc      	bne.n	800a634 <oled_refresh+0x14>
		(*splashFunction)(splashParams);
 800a63a:	4a05      	ldr	r2, [pc, #20]	; (800a650 <oled_refresh+0x30>)
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <oled_refresh+0x34>)
 800a63e:	6810      	ldr	r0, [r2, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4798      	blx	r3
		ssd1306_UpdateScreen(0);
 800a644:	2000      	movs	r0, #0
 800a646:	f000 fcc5 	bl	800afd4 <ssd1306_UpdateScreen>
}
 800a64a:	e7f3      	b.n	800a634 <oled_refresh+0x14>
 800a64c:	20000c40 	.word	0x20000c40
 800a650:	20003ddc 	.word	0x20003ddc
 800a654:	20003220 	.word	0x20003220

0800a658 <oled_ErrorSplash>:
void oled_ErrorSplash(char * msg){
 800a658:	b510      	push	{r4, lr}
 800a65a:	0004      	movs	r4, r0
	ssd1306_SetCursor((128-(strlen("Chyba!"))*11)/2, 1);
 800a65c:	2101      	movs	r1, #1
 800a65e:	201f      	movs	r0, #31
 800a660:	f000 fe1c 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("Chyba!", Font_11x18, White);
 800a664:	4a0f      	ldr	r2, [pc, #60]	; (800a6a4 <oled_ErrorSplash+0x4c>)
 800a666:	2301      	movs	r3, #1
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	480f      	ldr	r0, [pc, #60]	; (800a6a8 <oled_ErrorSplash+0x50>)
 800a66c:	6852      	ldr	r2, [r2, #4]
 800a66e:	f000 fe01 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 20);
 800a672:	0020      	movs	r0, r4
 800a674:	f7f5 fd50 	bl	8000118 <strlen>
 800a678:	0003      	movs	r3, r0
 800a67a:	2007      	movs	r0, #7
 800a67c:	4358      	muls	r0, r3
 800a67e:	2380      	movs	r3, #128	; 0x80
 800a680:	1a18      	subs	r0, r3, r0
 800a682:	0840      	lsrs	r0, r0, #1
 800a684:	b2c0      	uxtb	r0, r0
 800a686:	2114      	movs	r1, #20
 800a688:	f000 fe08 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800a68c:	4a07      	ldr	r2, [pc, #28]	; (800a6ac <oled_ErrorSplash+0x54>)
 800a68e:	2301      	movs	r3, #1
 800a690:	6811      	ldr	r1, [r2, #0]
 800a692:	0020      	movs	r0, r4
 800a694:	6852      	ldr	r2, [r2, #4]
 800a696:	f000 fded 	bl	800b274 <ssd1306_WriteString>
	encoderclick = 0;
 800a69a:	2200      	movs	r2, #0
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <oled_ErrorSplash+0x58>)
 800a69e:	601a      	str	r2, [r3, #0]
}
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	46c0      	nop			; (mov r8, r8)
 800a6a4:	200003e8 	.word	0x200003e8
 800a6a8:	0800e104 	.word	0x0800e104
 800a6ac:	200003f8 	.word	0x200003f8
 800a6b0:	200028b4 	.word	0x200028b4

0800a6b4 <oled_ShutdownSplash>:
void oled_ShutdownSplash(){
 800a6b4:	b510      	push	{r4, lr}
	ssd1306_SetCursor((128-(strlen("Uvolnete"))*11)/2, 14);
 800a6b6:	210e      	movs	r1, #14
 800a6b8:	2014      	movs	r0, #20
 800a6ba:	f000 fdef 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("Uvolnete", Font_11x18, White);
 800a6be:	4c0a      	ldr	r4, [pc, #40]	; (800a6e8 <oled_ShutdownSplash+0x34>)
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	6862      	ldr	r2, [r4, #4]
 800a6c6:	4809      	ldr	r0, [pc, #36]	; (800a6ec <oled_ShutdownSplash+0x38>)
 800a6c8:	f000 fdd4 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen("tlacitko"))*11)/2, 34);
 800a6cc:	2122      	movs	r1, #34	; 0x22
 800a6ce:	2014      	movs	r0, #20
 800a6d0:	f000 fde4 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("tlacitko", Font_11x18, White);
 800a6d4:	cc06      	ldmia	r4!, {r1, r2}
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4805      	ldr	r0, [pc, #20]	; (800a6f0 <oled_ShutdownSplash+0x3c>)
 800a6da:	f000 fdcb 	bl	800b274 <ssd1306_WriteString>
	encoderclick = 0;
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <oled_ShutdownSplash+0x40>)
 800a6e2:	601a      	str	r2, [r3, #0]
}
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	200003e8 	.word	0x200003e8
 800a6ec:	0800e12e 	.word	0x0800e12e
 800a6f0:	0800e137 	.word	0x0800e137
 800a6f4:	200028b4 	.word	0x200028b4

0800a6f8 <oled_NameExistsSplash>:
void oled_NameExistsSplash(){
 800a6f8:	b510      	push	{r4, lr}
	ssd1306_SetCursor((128-(strlen("Chyba!"))*11)/2, 1);
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	201f      	movs	r0, #31
 800a6fe:	f000 fdcd 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("Chyba!", Font_11x18, White);
 800a702:	4a15      	ldr	r2, [pc, #84]	; (800a758 <oled_NameExistsSplash+0x60>)
 800a704:	2301      	movs	r3, #1
 800a706:	6811      	ldr	r1, [r2, #0]
 800a708:	4814      	ldr	r0, [pc, #80]	; (800a75c <oled_NameExistsSplash+0x64>)
 800a70a:	6852      	ldr	r2, [r2, #4]
 800a70c:	f000 fdb2 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen("Pisen"))*7)/2, 25);
 800a710:	2119      	movs	r1, #25
 800a712:	202e      	movs	r0, #46	; 0x2e
 800a714:	f000 fdc2 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("Pisen", Font_7x10, White);
 800a718:	4c11      	ldr	r4, [pc, #68]	; (800a760 <oled_NameExistsSplash+0x68>)
 800a71a:	2301      	movs	r3, #1
 800a71c:	6821      	ldr	r1, [r4, #0]
 800a71e:	6862      	ldr	r2, [r4, #4]
 800a720:	4810      	ldr	r0, [pc, #64]	; (800a764 <oled_NameExistsSplash+0x6c>)
 800a722:	f000 fda7 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen("jiz existuje!"))*7)/2, 40);
 800a726:	2128      	movs	r1, #40	; 0x28
 800a728:	2012      	movs	r0, #18
 800a72a:	f000 fdb7 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString("jiz existuje!", Font_7x10, White);
 800a72e:	cc06      	ldmia	r4!, {r1, r2}
 800a730:	2301      	movs	r3, #1
 800a732:	480d      	ldr	r0, [pc, #52]	; (800a768 <oled_NameExistsSplash+0x70>)
 800a734:	f000 fd9e 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800a738:	4a0c      	ldr	r2, [pc, #48]	; (800a76c <oled_NameExistsSplash+0x74>)
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <oled_NameExistsSplash+0x5c>
		encoderclick = 0;
 800a740:	2300      	movs	r3, #0
		oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 800a742:	490b      	ldr	r1, [pc, #44]	; (800a770 <oled_NameExistsSplash+0x78>)
		encoderclick = 0;
 800a744:	6013      	str	r3, [r2, #0]
		oled_setDisplayedMenu("mainmenu",&mainmenu, sizeof(mainmenu), 0);
 800a746:	480b      	ldr	r0, [pc, #44]	; (800a774 <oled_NameExistsSplash+0x7c>)
 800a748:	22a0      	movs	r2, #160	; 0xa0
 800a74a:	f7ff f97d 	bl	8009a48 <oled_setDisplayedMenu>
		oledType = OLED_MENU;
 800a74e:	2202      	movs	r2, #2
 800a750:	4b09      	ldr	r3, [pc, #36]	; (800a778 <oled_NameExistsSplash+0x80>)
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bd10      	pop	{r4, pc}
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	200003e8 	.word	0x200003e8
 800a75c:	0800e104 	.word	0x0800e104
 800a760:	200003f8 	.word	0x200003f8
 800a764:	0800e10b 	.word	0x0800e10b
 800a768:	0800e111 	.word	0x0800e111
 800a76c:	200028b4 	.word	0x200028b4
 800a770:	20000288 	.word	0x20000288
 800a774:	0800e070 	.word	0x0800e070
 800a778:	20000c40 	.word	0x20000c40

0800a77c <oled_NothingFound>:
void oled_NothingFound(){
 800a77c:	b510      	push	{r4, lr}
	ssd1306_SetCursor((128-(strlen(msg))*11)/2, 1);
 800a77e:	2101      	movs	r1, #1
 800a780:	2024      	movs	r0, #36	; 0x24
 800a782:	f000 fd8b 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800a786:	4c0d      	ldr	r4, [pc, #52]	; (800a7bc <oled_NothingFound+0x40>)
 800a788:	2301      	movs	r3, #1
 800a78a:	6821      	ldr	r1, [r4, #0]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	480c      	ldr	r0, [pc, #48]	; (800a7c0 <oled_NothingFound+0x44>)
 800a790:	f000 fd70 	bl	800b274 <ssd1306_WriteString>
	ssd1306_SetCursor((128-(strlen(msg))*11)/2, 23);
 800a794:	2117      	movs	r1, #23
 800a796:	2014      	movs	r0, #20
 800a798:	f000 fd80 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800a79c:	cc06      	ldmia	r4!, {r1, r2}
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4808      	ldr	r0, [pc, #32]	; (800a7c4 <oled_NothingFound+0x48>)
 800a7a2:	f000 fd67 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800a7a6:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <oled_NothingFound+0x4c>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d004      	beq.n	800a7b8 <oled_NothingFound+0x3c>
		oledType = OLED_MENU;
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	4a06      	ldr	r2, [pc, #24]	; (800a7cc <oled_NothingFound+0x50>)
 800a7b2:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]
}
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	200003e8 	.word	0x200003e8
 800a7c0:	0800e11f 	.word	0x0800e11f
 800a7c4:	0800e125 	.word	0x0800e125
 800a7c8:	200028b4 	.word	0x200028b4
 800a7cc:	20000c40 	.word	0x20000c40

0800a7d0 <oled_BtDevPairRequestSplash>:
void oled_BtDevPairRequestSplash(struct btDevice * dev){
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	0005      	movs	r5, r0
	if(strlen(dev->name) > 9){
 800a7d6:	f7f5 fc9f 	bl	8000118 <strlen>
 800a7da:	4c4f      	ldr	r4, [pc, #316]	; (800a918 <oled_BtDevPairRequestSplash+0x148>)
 800a7dc:	2809      	cmp	r0, #9
 800a7de:	d800      	bhi.n	800a7e2 <oled_BtDevPairRequestSplash+0x12>
 800a7e0:	e08b      	b.n	800a8fa <oled_BtDevPairRequestSplash+0x12a>
		scrollMax = (strlen(dev->name) - 10);
 800a7e2:	4b4e      	ldr	r3, [pc, #312]	; (800a91c <oled_BtDevPairRequestSplash+0x14c>)
 800a7e4:	380a      	subs	r0, #10
 800a7e6:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	200e      	movs	r0, #14
 800a7ec:	f000 fd56 	bl	800b29c <ssd1306_SetCursor>
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 800a7f0:	4b4b      	ldr	r3, [pc, #300]	; (800a920 <oled_BtDevPairRequestSplash+0x150>)
 800a7f2:	2209      	movs	r2, #9
 800a7f4:	6819      	ldr	r1, [r3, #0]
 800a7f6:	a801      	add	r0, sp, #4
 800a7f8:	1869      	adds	r1, r5, r1
 800a7fa:	f001 f875 	bl	800b8e8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 800a7fe:	0028      	movs	r0, r5
 800a800:	f7f5 fc8a 	bl	8000118 <strlen>
 800a804:	0002      	movs	r2, r0
 800a806:	200d      	movs	r0, #13
 800a808:	3a09      	subs	r2, #9
 800a80a:	2100      	movs	r1, #0
 800a80c:	4468      	add	r0, sp
 800a80e:	f001 f874 	bl	800b8fa <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 800a812:	2301      	movs	r3, #1
 800a814:	6821      	ldr	r1, [r4, #0]
 800a816:	6862      	ldr	r2, [r4, #4]
 800a818:	a801      	add	r0, sp, #4
		ssd1306_WriteString(dev->name, Font_11x18, White);
 800a81a:	f000 fd2b 	bl	800b274 <ssd1306_WriteString>
	sprintf(msg, "Zada parovani");
 800a81e:	4941      	ldr	r1, [pc, #260]	; (800a924 <oled_BtDevPairRequestSplash+0x154>)
 800a820:	a801      	add	r0, sp, #4
 800a822:	f001 f987 	bl	800bb34 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg))*7)/2), 25);
 800a826:	a801      	add	r0, sp, #4
 800a828:	f7f5 fc76 	bl	8000118 <strlen>
 800a82c:	f7f6 fbfa 	bl	8001024 <__aeabi_ui2f>
 800a830:	493d      	ldr	r1, [pc, #244]	; (800a928 <oled_BtDevPairRequestSplash+0x158>)
 800a832:	f7f6 f8cb 	bl	80009cc <__aeabi_fmul>
 800a836:	1c01      	adds	r1, r0, #0
 800a838:	2086      	movs	r0, #134	; 0x86
 800a83a:	05c0      	lsls	r0, r0, #23
 800a83c:	f7f6 f9e6 	bl	8000c0c <__aeabi_fsub>
 800a840:	21fc      	movs	r1, #252	; 0xfc
 800a842:	0589      	lsls	r1, r1, #22
 800a844:	f7f6 f8c2 	bl	80009cc <__aeabi_fmul>
 800a848:	f7f5 fe56 	bl	80004f8 <__aeabi_f2uiz>
 800a84c:	2119      	movs	r1, #25
 800a84e:	b2c0      	uxtb	r0, r0
 800a850:	f000 fd24 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800a854:	4e35      	ldr	r6, [pc, #212]	; (800a92c <oled_BtDevPairRequestSplash+0x15c>)
 800a856:	2301      	movs	r3, #1
 800a858:	6872      	ldr	r2, [r6, #4]
 800a85a:	6831      	ldr	r1, [r6, #0]
 800a85c:	a801      	add	r0, sp, #4
 800a85e:	f000 fd09 	bl	800b274 <ssd1306_WriteString>
	sprintf(msg, "PIN");
 800a862:	4933      	ldr	r1, [pc, #204]	; (800a930 <oled_BtDevPairRequestSplash+0x160>)
 800a864:	a801      	add	r0, sp, #4
 800a866:	f001 f965 	bl	800bb34 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg))*7)/2), 41);
 800a86a:	a801      	add	r0, sp, #4
 800a86c:	f7f5 fc54 	bl	8000118 <strlen>
 800a870:	f7f6 fbd8 	bl	8001024 <__aeabi_ui2f>
 800a874:	492c      	ldr	r1, [pc, #176]	; (800a928 <oled_BtDevPairRequestSplash+0x158>)
 800a876:	f7f6 f8a9 	bl	80009cc <__aeabi_fmul>
 800a87a:	1c01      	adds	r1, r0, #0
 800a87c:	2086      	movs	r0, #134	; 0x86
 800a87e:	05c0      	lsls	r0, r0, #23
 800a880:	f7f6 f9c4 	bl	8000c0c <__aeabi_fsub>
 800a884:	21fc      	movs	r1, #252	; 0xfc
 800a886:	0589      	lsls	r1, r1, #22
 800a888:	f7f6 f8a0 	bl	80009cc <__aeabi_fmul>
 800a88c:	f7f5 fe34 	bl	80004f8 <__aeabi_f2uiz>
 800a890:	2129      	movs	r1, #41	; 0x29
 800a892:	b2c0      	uxtb	r0, r0
 800a894:	f000 fd02 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800a898:	ce06      	ldmia	r6!, {r1, r2}
 800a89a:	2301      	movs	r3, #1
 800a89c:	a801      	add	r0, sp, #4
 800a89e:	f000 fce9 	bl	800b274 <ssd1306_WriteString>
	sprintf(msg, "PIN %06ld", dev->pin);
 800a8a2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a8a4:	4923      	ldr	r1, [pc, #140]	; (800a934 <oled_BtDevPairRequestSplash+0x164>)
 800a8a6:	a801      	add	r0, sp, #4
 800a8a8:	f001 f8ea 	bl	800ba80 <siprintf>
	ssd1306_SetCursor(((128-((float)strlen(msg))*11)/2), 41);
 800a8ac:	a801      	add	r0, sp, #4
 800a8ae:	f7f5 fc33 	bl	8000118 <strlen>
 800a8b2:	f7f6 fbb7 	bl	8001024 <__aeabi_ui2f>
 800a8b6:	4920      	ldr	r1, [pc, #128]	; (800a938 <oled_BtDevPairRequestSplash+0x168>)
 800a8b8:	f7f6 f888 	bl	80009cc <__aeabi_fmul>
 800a8bc:	1c01      	adds	r1, r0, #0
 800a8be:	2086      	movs	r0, #134	; 0x86
 800a8c0:	05c0      	lsls	r0, r0, #23
 800a8c2:	f7f6 f9a3 	bl	8000c0c <__aeabi_fsub>
 800a8c6:	21fc      	movs	r1, #252	; 0xfc
 800a8c8:	0589      	lsls	r1, r1, #22
 800a8ca:	f7f6 f87f 	bl	80009cc <__aeabi_fmul>
 800a8ce:	f7f5 fe13 	bl	80004f8 <__aeabi_f2uiz>
 800a8d2:	2129      	movs	r1, #41	; 0x29
 800a8d4:	b2c0      	uxtb	r0, r0
 800a8d6:	f000 fce1 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800a8da:	cc06      	ldmia	r4!, {r1, r2}
 800a8dc:	2301      	movs	r3, #1
 800a8de:	a801      	add	r0, sp, #4
 800a8e0:	f000 fcc8 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800a8e4:	4b15      	ldr	r3, [pc, #84]	; (800a93c <oled_BtDevPairRequestSplash+0x16c>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d004      	beq.n	800a8f6 <oled_BtDevPairRequestSplash+0x126>
		oledType = OLED_MENU;
 800a8ec:	2102      	movs	r1, #2
 800a8ee:	4a14      	ldr	r2, [pc, #80]	; (800a940 <oled_BtDevPairRequestSplash+0x170>)
 800a8f0:	6011      	str	r1, [r2, #0]
		encoderclick = 0;
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
}
 800a8f6:	b008      	add	sp, #32
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
		ssd1306_SetCursor((128-(strlen(dev->name))*11)/2, 1);
 800a8fa:	230b      	movs	r3, #11
 800a8fc:	4358      	muls	r0, r3
 800a8fe:	3375      	adds	r3, #117	; 0x75
 800a900:	1a18      	subs	r0, r3, r0
 800a902:	0840      	lsrs	r0, r0, #1
 800a904:	b2c0      	uxtb	r0, r0
 800a906:	2101      	movs	r1, #1
 800a908:	f000 fcc8 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 800a90c:	2301      	movs	r3, #1
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	6862      	ldr	r2, [r4, #4]
 800a912:	0028      	movs	r0, r5
 800a914:	e781      	b.n	800a81a <oled_BtDevPairRequestSplash+0x4a>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	200003e8 	.word	0x200003e8
 800a91c:	20000abc 	.word	0x20000abc
 800a920:	20003b10 	.word	0x20003b10
 800a924:	0800e0cb 	.word	0x0800e0cb
 800a928:	40e00000 	.word	0x40e00000
 800a92c:	200003f8 	.word	0x200003f8
 800a930:	0800e0b7 	.word	0x0800e0b7
 800a934:	0800e0d9 	.word	0x0800e0d9
 800a938:	41300000 	.word	0x41300000
 800a93c:	200028b4 	.word	0x200028b4
 800a940:	20000c40 	.word	0x20000c40

0800a944 <oled_BtDevKeyRequestSplash>:
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 800a944:	b5f0      	push	{r4, r5, r6, r7, lr}
	keyboardSidePosMax = 1;
 800a946:	2401      	movs	r4, #1
 800a948:	4b98      	ldr	r3, [pc, #608]	; (800abac <oled_BtDevKeyRequestSplash+0x268>)
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 800a94a:	b089      	sub	sp, #36	; 0x24
 800a94c:	0006      	movs	r6, r0
	keyboardSidePosMax = 1;
 800a94e:	601c      	str	r4, [r3, #0]
	if(strlen(dev->name) > 9){
 800a950:	f7f5 fbe2 	bl	8000118 <strlen>
 800a954:	4d96      	ldr	r5, [pc, #600]	; (800abb0 <oled_BtDevKeyRequestSplash+0x26c>)
 800a956:	2809      	cmp	r0, #9
 800a958:	d800      	bhi.n	800a95c <oled_BtDevKeyRequestSplash+0x18>
 800a95a:	e0c6      	b.n	800aaea <oled_BtDevKeyRequestSplash+0x1a6>
		scrollMax = (strlen(dev->name) - 10);
 800a95c:	4b95      	ldr	r3, [pc, #596]	; (800abb4 <oled_BtDevKeyRequestSplash+0x270>)
 800a95e:	380a      	subs	r0, #10
 800a960:	6018      	str	r0, [r3, #0]
		ssd1306_SetCursor(14, 1);
 800a962:	0021      	movs	r1, r4
 800a964:	200e      	movs	r0, #14
 800a966:	f000 fc99 	bl	800b29c <ssd1306_SetCursor>
		memcpy(tmp, (char*)(dev->name)+scrollIndex, 9);
 800a96a:	4b93      	ldr	r3, [pc, #588]	; (800abb8 <oled_BtDevKeyRequestSplash+0x274>)
 800a96c:	2209      	movs	r2, #9
 800a96e:	6819      	ldr	r1, [r3, #0]
 800a970:	a801      	add	r0, sp, #4
 800a972:	1871      	adds	r1, r6, r1
 800a974:	f000 ffb8 	bl	800b8e8 <memcpy>
		memset(tmp+9, 0, strlen(dev->name)-9);
 800a978:	0030      	movs	r0, r6
 800a97a:	f7f5 fbcd 	bl	8000118 <strlen>
 800a97e:	0002      	movs	r2, r0
 800a980:	200d      	movs	r0, #13
 800a982:	3a09      	subs	r2, #9
 800a984:	2100      	movs	r1, #0
 800a986:	4468      	add	r0, sp
 800a988:	f000 ffb7 	bl	800b8fa <memset>
		ssd1306_WriteString(tmp, Font_11x18, White);
 800a98c:	cd06      	ldmia	r5!, {r1, r2}
 800a98e:	0023      	movs	r3, r4
 800a990:	a801      	add	r0, sp, #4
		ssd1306_WriteString(dev->name, Font_11x18, White);
 800a992:	f000 fc6f 	bl	800b274 <ssd1306_WriteString>
	sprintf(msg, "Zada parovani");
 800a996:	4989      	ldr	r1, [pc, #548]	; (800abbc <oled_BtDevKeyRequestSplash+0x278>)
 800a998:	a801      	add	r0, sp, #4
 800a99a:	f001 f8cb 	bl	800bb34 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg))*7)/2), 25);
 800a99e:	a801      	add	r0, sp, #4
 800a9a0:	f7f5 fbba 	bl	8000118 <strlen>
 800a9a4:	f7f6 fb3e 	bl	8001024 <__aeabi_ui2f>
 800a9a8:	4985      	ldr	r1, [pc, #532]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800a9aa:	f7f6 f80f 	bl	80009cc <__aeabi_fmul>
 800a9ae:	1c01      	adds	r1, r0, #0
 800a9b0:	2086      	movs	r0, #134	; 0x86
 800a9b2:	05c0      	lsls	r0, r0, #23
 800a9b4:	f7f6 f92a 	bl	8000c0c <__aeabi_fsub>
 800a9b8:	21fc      	movs	r1, #252	; 0xfc
 800a9ba:	0589      	lsls	r1, r1, #22
 800a9bc:	f7f6 f806 	bl	80009cc <__aeabi_fmul>
 800a9c0:	f7f5 fd9a 	bl	80004f8 <__aeabi_f2uiz>
 800a9c4:	2119      	movs	r1, #25
 800a9c6:	b2c0      	uxtb	r0, r0
 800a9c8:	f000 fc68 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800a9cc:	4c7d      	ldr	r4, [pc, #500]	; (800abc4 <oled_BtDevKeyRequestSplash+0x280>)
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	6862      	ldr	r2, [r4, #4]
 800a9d2:	6821      	ldr	r1, [r4, #0]
 800a9d4:	a801      	add	r0, sp, #4
 800a9d6:	f000 fc4d 	bl	800b274 <ssd1306_WriteString>
	sprintf(msg, "Parovat?");
 800a9da:	497b      	ldr	r1, [pc, #492]	; (800abc8 <oled_BtDevKeyRequestSplash+0x284>)
 800a9dc:	a801      	add	r0, sp, #4
 800a9de:	f001 f8a9 	bl	800bb34 <strcpy>
	ssd1306_SetCursor(((128-((float)strlen(msg))*7)/2), 37);
 800a9e2:	a801      	add	r0, sp, #4
 800a9e4:	f7f5 fb98 	bl	8000118 <strlen>
 800a9e8:	f7f6 fb1c 	bl	8001024 <__aeabi_ui2f>
 800a9ec:	4974      	ldr	r1, [pc, #464]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800a9ee:	f7f5 ffed 	bl	80009cc <__aeabi_fmul>
 800a9f2:	1c01      	adds	r1, r0, #0
 800a9f4:	2086      	movs	r0, #134	; 0x86
 800a9f6:	05c0      	lsls	r0, r0, #23
 800a9f8:	f7f6 f908 	bl	8000c0c <__aeabi_fsub>
 800a9fc:	21fc      	movs	r1, #252	; 0xfc
 800a9fe:	0589      	lsls	r1, r1, #22
 800aa00:	f7f5 ffe4 	bl	80009cc <__aeabi_fmul>
 800aa04:	f7f5 fd78 	bl	80004f8 <__aeabi_f2uiz>
 800aa08:	2125      	movs	r1, #37	; 0x25
 800aa0a:	b2c0      	uxtb	r0, r0
 800aa0c:	f000 fc46 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800aa10:	2301      	movs	r3, #1
 800aa12:	6821      	ldr	r1, [r4, #0]
 800aa14:	6862      	ldr	r2, [r4, #4]
 800aa16:	a801      	add	r0, sp, #4
 800aa18:	f000 fc2c 	bl	800b274 <ssd1306_WriteString>
	if(keyboardSidePos == 0){
 800aa1c:	4b6b      	ldr	r3, [pc, #428]	; (800abcc <oled_BtDevKeyRequestSplash+0x288>)
 800aa1e:	496c      	ldr	r1, [pc, #432]	; (800abd0 <oled_BtDevKeyRequestSplash+0x28c>)
 800aa20:	681f      	ldr	r7, [r3, #0]
		sprintf(msg, "ANO");
 800aa22:	a801      	add	r0, sp, #4
	if(keyboardSidePos == 0){
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	d000      	beq.n	800aa2a <oled_BtDevKeyRequestSplash+0xe6>
 800aa28:	e06c      	b.n	800ab04 <oled_BtDevKeyRequestSplash+0x1c0>
		sprintf(msg, "ANO");
 800aa2a:	f001 f883 	bl	800bb34 <strcpy>
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 800aa2e:	2533      	movs	r5, #51	; 0x33
				ssd1306_DrawPixel(x, y+51, White);
 800aa30:	0029      	movs	r1, r5
 800aa32:	3501      	adds	r5, #1
 800aa34:	b2f8      	uxtb	r0, r7
 800aa36:	2201      	movs	r2, #1
 800aa38:	b2ed      	uxtb	r5, r5
 800aa3a:	f000 fba1 	bl	800b180 <ssd1306_DrawPixel>
			for(int y = 0; y < 12; y++){
 800aa3e:	2d3f      	cmp	r5, #63	; 0x3f
 800aa40:	d1f6      	bne.n	800aa30 <oled_BtDevKeyRequestSplash+0xec>
		for(int x = 0; x < 64; x++){
 800aa42:	3701      	adds	r7, #1
 800aa44:	2f40      	cmp	r7, #64	; 0x40
 800aa46:	d1f2      	bne.n	800aa2e <oled_BtDevKeyRequestSplash+0xea>
		ssd1306_SetCursor(((64-((float)strlen(msg))*7)/2), 53);
 800aa48:	a801      	add	r0, sp, #4
 800aa4a:	f7f5 fb65 	bl	8000118 <strlen>
 800aa4e:	f7f6 fae9 	bl	8001024 <__aeabi_ui2f>
 800aa52:	495b      	ldr	r1, [pc, #364]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800aa54:	f7f5 ffba 	bl	80009cc <__aeabi_fmul>
 800aa58:	1c01      	adds	r1, r0, #0
 800aa5a:	2085      	movs	r0, #133	; 0x85
 800aa5c:	05c0      	lsls	r0, r0, #23
 800aa5e:	f7f6 f8d5 	bl	8000c0c <__aeabi_fsub>
 800aa62:	21fc      	movs	r1, #252	; 0xfc
 800aa64:	0589      	lsls	r1, r1, #22
 800aa66:	f7f5 ffb1 	bl	80009cc <__aeabi_fmul>
 800aa6a:	f7f5 fd45 	bl	80004f8 <__aeabi_f2uiz>
 800aa6e:	2135      	movs	r1, #53	; 0x35
 800aa70:	b2c0      	uxtb	r0, r0
 800aa72:	f000 fc13 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, Black);
 800aa76:	2300      	movs	r3, #0
 800aa78:	6862      	ldr	r2, [r4, #4]
 800aa7a:	6821      	ldr	r1, [r4, #0]
 800aa7c:	a801      	add	r0, sp, #4
 800aa7e:	f000 fbf9 	bl	800b274 <ssd1306_WriteString>
		sprintf(msg, "NE");
 800aa82:	4954      	ldr	r1, [pc, #336]	; (800abd4 <oled_BtDevKeyRequestSplash+0x290>)
 800aa84:	a801      	add	r0, sp, #4
 800aa86:	f001 f855 	bl	800bb34 <strcpy>
		ssd1306_SetCursor(((64-((float)strlen(msg))*7)/2)+64, 53);
 800aa8a:	a801      	add	r0, sp, #4
 800aa8c:	f7f5 fb44 	bl	8000118 <strlen>
 800aa90:	f7f6 fac8 	bl	8001024 <__aeabi_ui2f>
 800aa94:	494a      	ldr	r1, [pc, #296]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800aa96:	f7f5 ff99 	bl	80009cc <__aeabi_fmul>
 800aa9a:	1c01      	adds	r1, r0, #0
 800aa9c:	2085      	movs	r0, #133	; 0x85
 800aa9e:	05c0      	lsls	r0, r0, #23
 800aaa0:	f7f6 f8b4 	bl	8000c0c <__aeabi_fsub>
 800aaa4:	21fc      	movs	r1, #252	; 0xfc
 800aaa6:	0589      	lsls	r1, r1, #22
 800aaa8:	f7f5 ff90 	bl	80009cc <__aeabi_fmul>
 800aaac:	2185      	movs	r1, #133	; 0x85
 800aaae:	05c9      	lsls	r1, r1, #23
 800aab0:	f7f5 fdfa 	bl	80006a8 <__aeabi_fadd>
 800aab4:	f7f5 fd20 	bl	80004f8 <__aeabi_f2uiz>
 800aab8:	2135      	movs	r1, #53	; 0x35
 800aaba:	b2c0      	uxtb	r0, r0
 800aabc:	f000 fbee 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, White);
 800aac0:	2301      	movs	r3, #1
		ssd1306_WriteString(msg, Font_7x10, Black);
 800aac2:	cc06      	ldmia	r4!, {r1, r2}
 800aac4:	a801      	add	r0, sp, #4
 800aac6:	f000 fbd5 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800aaca:	4c43      	ldr	r4, [pc, #268]	; (800abd8 <oled_BtDevKeyRequestSplash+0x294>)
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <oled_BtDevKeyRequestSplash+0x1a2>
		if(keyboardSidePos == 0){
 800aad2:	4b3e      	ldr	r3, [pc, #248]	; (800abcc <oled_BtDevKeyRequestSplash+0x288>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d163      	bne.n	800aba2 <oled_BtDevKeyRequestSplash+0x25e>
			oled_setDisplayedSplash(oled_BtDevKeyEnterSplash, dev);
 800aada:	0031      	movs	r1, r6
 800aadc:	483f      	ldr	r0, [pc, #252]	; (800abdc <oled_BtDevKeyRequestSplash+0x298>)
 800aade:	f7ff f97b 	bl	8009dd8 <oled_setDisplayedSplash>
		encoderclick = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	6023      	str	r3, [r4, #0]
}
 800aae6:	b009      	add	sp, #36	; 0x24
 800aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ssd1306_SetCursor((128-(strlen(dev->name))*11)/2, 1);
 800aaea:	230b      	movs	r3, #11
 800aaec:	4358      	muls	r0, r3
 800aaee:	3375      	adds	r3, #117	; 0x75
 800aaf0:	1a18      	subs	r0, r3, r0
 800aaf2:	0840      	lsrs	r0, r0, #1
 800aaf4:	b2c0      	uxtb	r0, r0
 800aaf6:	0021      	movs	r1, r4
 800aaf8:	f000 fbd0 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(dev->name, Font_11x18, White);
 800aafc:	cd06      	ldmia	r5!, {r1, r2}
 800aafe:	0023      	movs	r3, r4
 800ab00:	0030      	movs	r0, r6
 800ab02:	e746      	b.n	800a992 <oled_BtDevKeyRequestSplash+0x4e>
		sprintf(msg, "ANO");
 800ab04:	f001 f816 	bl	800bb34 <strcpy>
		ssd1306_SetCursor(((64-((float)strlen(msg))*7)/2), 53);
 800ab08:	a801      	add	r0, sp, #4
 800ab0a:	f7f5 fb05 	bl	8000118 <strlen>
 800ab0e:	f7f6 fa89 	bl	8001024 <__aeabi_ui2f>
 800ab12:	492b      	ldr	r1, [pc, #172]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800ab14:	f7f5 ff5a 	bl	80009cc <__aeabi_fmul>
 800ab18:	1c01      	adds	r1, r0, #0
 800ab1a:	2085      	movs	r0, #133	; 0x85
 800ab1c:	05c0      	lsls	r0, r0, #23
 800ab1e:	f7f6 f875 	bl	8000c0c <__aeabi_fsub>
 800ab22:	21fc      	movs	r1, #252	; 0xfc
 800ab24:	0589      	lsls	r1, r1, #22
 800ab26:	f7f5 ff51 	bl	80009cc <__aeabi_fmul>
 800ab2a:	f7f5 fce5 	bl	80004f8 <__aeabi_f2uiz>
 800ab2e:	2135      	movs	r1, #53	; 0x35
 800ab30:	b2c0      	uxtb	r0, r0
 800ab32:	f000 fbb3 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, White);
 800ab36:	2301      	movs	r3, #1
 800ab38:	6821      	ldr	r1, [r4, #0]
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	a801      	add	r0, sp, #4
 800ab3e:	f000 fb99 	bl	800b274 <ssd1306_WriteString>
		sprintf(msg, "NE");
 800ab42:	4924      	ldr	r1, [pc, #144]	; (800abd4 <oled_BtDevKeyRequestSplash+0x290>)
 800ab44:	a801      	add	r0, sp, #4
 800ab46:	f000 fff5 	bl	800bb34 <strcpy>
 800ab4a:	2740      	movs	r7, #64	; 0x40
void oled_BtDevKeyRequestSplash(struct btDevice * dev){
 800ab4c:	2533      	movs	r5, #51	; 0x33
				ssd1306_DrawPixel(x+64, y+51, White);
 800ab4e:	0029      	movs	r1, r5
 800ab50:	3501      	adds	r5, #1
 800ab52:	2201      	movs	r2, #1
 800ab54:	0038      	movs	r0, r7
 800ab56:	b2ed      	uxtb	r5, r5
 800ab58:	f000 fb12 	bl	800b180 <ssd1306_DrawPixel>
			for(int y = 0; y < 12; y++){
 800ab5c:	2d3f      	cmp	r5, #63	; 0x3f
 800ab5e:	d1f6      	bne.n	800ab4e <oled_BtDevKeyRequestSplash+0x20a>
 800ab60:	3701      	adds	r7, #1
 800ab62:	b2ff      	uxtb	r7, r7
		for(int x = 0; x < 64; x++){
 800ab64:	2f80      	cmp	r7, #128	; 0x80
 800ab66:	d1f1      	bne.n	800ab4c <oled_BtDevKeyRequestSplash+0x208>
		ssd1306_SetCursor(((64-((float)strlen(msg))*7)/2)+64, 53);
 800ab68:	a801      	add	r0, sp, #4
 800ab6a:	f7f5 fad5 	bl	8000118 <strlen>
 800ab6e:	f7f6 fa59 	bl	8001024 <__aeabi_ui2f>
 800ab72:	4913      	ldr	r1, [pc, #76]	; (800abc0 <oled_BtDevKeyRequestSplash+0x27c>)
 800ab74:	f7f5 ff2a 	bl	80009cc <__aeabi_fmul>
 800ab78:	1c01      	adds	r1, r0, #0
 800ab7a:	2085      	movs	r0, #133	; 0x85
 800ab7c:	05c0      	lsls	r0, r0, #23
 800ab7e:	f7f6 f845 	bl	8000c0c <__aeabi_fsub>
 800ab82:	21fc      	movs	r1, #252	; 0xfc
 800ab84:	0589      	lsls	r1, r1, #22
 800ab86:	f7f5 ff21 	bl	80009cc <__aeabi_fmul>
 800ab8a:	2185      	movs	r1, #133	; 0x85
 800ab8c:	05c9      	lsls	r1, r1, #23
 800ab8e:	f7f5 fd8b 	bl	80006a8 <__aeabi_fadd>
 800ab92:	f7f5 fcb1 	bl	80004f8 <__aeabi_f2uiz>
 800ab96:	2135      	movs	r1, #53	; 0x35
 800ab98:	b2c0      	uxtb	r0, r0
 800ab9a:	f000 fb7f 	bl	800b29c <ssd1306_SetCursor>
		ssd1306_WriteString(msg, Font_7x10, Black);
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e78f      	b.n	800aac2 <oled_BtDevKeyRequestSplash+0x17e>
			oledType = OLED_MENU;
 800aba2:	2202      	movs	r2, #2
 800aba4:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <oled_BtDevKeyRequestSplash+0x29c>)
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e79b      	b.n	800aae2 <oled_BtDevKeyRequestSplash+0x19e>
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	20002f88 	.word	0x20002f88
 800abb0:	200003e8 	.word	0x200003e8
 800abb4:	20000abc 	.word	0x20000abc
 800abb8:	20003b10 	.word	0x20003b10
 800abbc:	0800e0cb 	.word	0x0800e0cb
 800abc0:	40e00000 	.word	0x40e00000
 800abc4:	200003f8 	.word	0x200003f8
 800abc8:	0800e0bb 	.word	0x0800e0bb
 800abcc:	20002ca4 	.word	0x20002ca4
 800abd0:	0800e0c4 	.word	0x0800e0c4
 800abd4:	0800e0c8 	.word	0x0800e0c8
 800abd8:	200028b4 	.word	0x200028b4
 800abdc:	08009289 	.word	0x08009289
 800abe0:	20000c40 	.word	0x20000c40

0800abe4 <oled_playingSplash>:
void oled_playingSplash(char * songname){
 800abe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe6:	b08b      	sub	sp, #44	; 0x2c
	sprintf(msg, "Prehravam");
 800abe8:	493f      	ldr	r1, [pc, #252]	; (800ace8 <oled_playingSplash+0x104>)
void oled_playingSplash(char * songname){
 800abea:	0005      	movs	r5, r0
	sprintf(msg, "Prehravam");
 800abec:	a803      	add	r0, sp, #12
 800abee:	f000 ffa1 	bl	800bb34 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg))*11)/2, 1);
 800abf2:	a803      	add	r0, sp, #12
 800abf4:	f7f5 fa90 	bl	8000118 <strlen>
 800abf8:	260b      	movs	r6, #11
 800abfa:	2480      	movs	r4, #128	; 0x80
 800abfc:	4370      	muls	r0, r6
 800abfe:	1a20      	subs	r0, r4, r0
 800ac00:	0840      	lsrs	r0, r0, #1
 800ac02:	b2c0      	uxtb	r0, r0
 800ac04:	2101      	movs	r1, #1
 800ac06:	f000 fb49 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800ac0a:	4f38      	ldr	r7, [pc, #224]	; (800acec <oled_playingSplash+0x108>)
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	a803      	add	r0, sp, #12
 800ac14:	f000 fb2e 	bl	800b274 <ssd1306_WriteString>
	if(strlen(songname) > 9){
 800ac18:	0028      	movs	r0, r5
 800ac1a:	f7f5 fa7d 	bl	8000118 <strlen>
 800ac1e:	2809      	cmp	r0, #9
 800ac20:	d956      	bls.n	800acd0 <oled_playingSplash+0xec>
			scrollMax = (strlen(songname) - 10);
 800ac22:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <oled_playingSplash+0x10c>)
 800ac24:	380a      	subs	r0, #10
 800ac26:	6018      	str	r0, [r3, #0]
			ssd1306_SetCursor(14, 25);
 800ac28:	2119      	movs	r1, #25
 800ac2a:	200e      	movs	r0, #14
 800ac2c:	f000 fb36 	bl	800b29c <ssd1306_SetCursor>
			memcpy(tmp, (char*)(songname)+scrollIndex, 9);
 800ac30:	4b30      	ldr	r3, [pc, #192]	; (800acf4 <oled_playingSplash+0x110>)
 800ac32:	2209      	movs	r2, #9
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	4668      	mov	r0, sp
 800ac38:	1869      	adds	r1, r5, r1
 800ac3a:	f000 fe55 	bl	800b8e8 <memcpy>
			memset(tmp+9, 0, strlen(songname)-9);
 800ac3e:	0028      	movs	r0, r5
 800ac40:	f7f5 fa6a 	bl	8000118 <strlen>
 800ac44:	0002      	movs	r2, r0
 800ac46:	2009      	movs	r0, #9
 800ac48:	3a09      	subs	r2, #9
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4468      	add	r0, sp
 800ac4e:	f000 fe54 	bl	800b8fa <memset>
			ssd1306_WriteString(tmp, Font_11x18, White);
 800ac52:	cf06      	ldmia	r7!, {r1, r2}
 800ac54:	2301      	movs	r3, #1
 800ac56:	4668      	mov	r0, sp
 800ac58:	f000 fb0c 	bl	800b274 <ssd1306_WriteString>
void oled_playingSplash(char * songname){
 800ac5c:	2400      	movs	r4, #0
 800ac5e:	2633      	movs	r6, #51	; 0x33
 800ac60:	0035      	movs	r5, r6
			ssd1306_DrawPixel(x, y+51, White);
 800ac62:	0029      	movs	r1, r5
 800ac64:	3501      	adds	r5, #1
 800ac66:	b2e0      	uxtb	r0, r4
 800ac68:	2201      	movs	r2, #1
 800ac6a:	b2ed      	uxtb	r5, r5
 800ac6c:	f000 fa88 	bl	800b180 <ssd1306_DrawPixel>
		for(int y = 0; y < 12; y++){
 800ac70:	2d3f      	cmp	r5, #63	; 0x3f
 800ac72:	d1f6      	bne.n	800ac62 <oled_playingSplash+0x7e>
	for(int x = 0; x < 128; x++){
 800ac74:	3401      	adds	r4, #1
 800ac76:	2c80      	cmp	r4, #128	; 0x80
 800ac78:	d1f2      	bne.n	800ac60 <oled_playingSplash+0x7c>
	sprintf(msg, "Zastavit");
 800ac7a:	491f      	ldr	r1, [pc, #124]	; (800acf8 <oled_playingSplash+0x114>)
 800ac7c:	a803      	add	r0, sp, #12
 800ac7e:	f000 ff59 	bl	800bb34 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 53);
 800ac82:	a803      	add	r0, sp, #12
 800ac84:	f7f5 fa48 	bl	8000118 <strlen>
 800ac88:	0003      	movs	r3, r0
 800ac8a:	2007      	movs	r0, #7
 800ac8c:	4358      	muls	r0, r3
 800ac8e:	1a20      	subs	r0, r4, r0
 800ac90:	0840      	lsrs	r0, r0, #1
 800ac92:	b2c0      	uxtb	r0, r0
 800ac94:	2135      	movs	r1, #53	; 0x35
 800ac96:	f000 fb01 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, Black);
 800ac9a:	4a18      	ldr	r2, [pc, #96]	; (800acfc <oled_playingSplash+0x118>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6811      	ldr	r1, [r2, #0]
 800aca0:	a803      	add	r0, sp, #12
 800aca2:	6852      	ldr	r2, [r2, #4]
 800aca4:	f000 fae6 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800aca8:	4c15      	ldr	r4, [pc, #84]	; (800ad00 <oled_playingSplash+0x11c>)
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00d      	beq.n	800accc <oled_playingSplash+0xe8>
		oled_setDisplayedMenu("mainmenu", &mainmenu, sizeof(mainmenu), 0);
 800acb0:	2300      	movs	r3, #0
 800acb2:	22a0      	movs	r2, #160	; 0xa0
 800acb4:	4813      	ldr	r0, [pc, #76]	; (800ad04 <oled_playingSplash+0x120>)
 800acb6:	4914      	ldr	r1, [pc, #80]	; (800ad08 <oled_playingSplash+0x124>)
 800acb8:	f7fe fec6 	bl	8009a48 <oled_setDisplayedMenu>
		oledType = OLED_MENU;
 800acbc:	2202      	movs	r2, #2
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <oled_playingSplash+0x128>)
		midiController_stop(ADDRESS_CONTROLLER);
 800acc0:	2001      	movs	r0, #1
		oledType = OLED_MENU;
 800acc2:	601a      	str	r2, [r3, #0]
		encoderclick = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	6023      	str	r3, [r4, #0]
		midiController_stop(ADDRESS_CONTROLLER);
 800acc8:	f7fd fee4 	bl	8008a94 <midiController_stop>
}
 800accc:	b00b      	add	sp, #44	; 0x2c
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ssd1306_SetCursor((128-(strlen(songname))*11)/2, 25);
 800acd0:	4370      	muls	r0, r6
 800acd2:	1a20      	subs	r0, r4, r0
 800acd4:	0840      	lsrs	r0, r0, #1
 800acd6:	b2c0      	uxtb	r0, r0
 800acd8:	2119      	movs	r1, #25
 800acda:	f000 fadf 	bl	800b29c <ssd1306_SetCursor>
			ssd1306_WriteString(songname, Font_11x18, White);
 800acde:	cf06      	ldmia	r7!, {r1, r2}
 800ace0:	2301      	movs	r3, #1
 800ace2:	0028      	movs	r0, r5
 800ace4:	e7b8      	b.n	800ac58 <oled_playingSplash+0x74>
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	0800e204 	.word	0x0800e204
 800acec:	200003e8 	.word	0x200003e8
 800acf0:	20000abc 	.word	0x20000abc
 800acf4:	20003b10 	.word	0x20003b10
 800acf8:	0800e20e 	.word	0x0800e20e
 800acfc:	200003f8 	.word	0x200003f8
 800ad00:	200028b4 	.word	0x200028b4
 800ad04:	0800e070 	.word	0x0800e070
 800ad08:	20000288 	.word	0x20000288
 800ad0c:	20000c40 	.word	0x20000c40

0800ad10 <oled_recordingSplash>:
void oled_recordingSplash(char * songname){
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	b08a      	sub	sp, #40	; 0x28
	sprintf(msg, "Nahravam");
 800ad14:	4940      	ldr	r1, [pc, #256]	; (800ae18 <oled_recordingSplash+0x108>)
void oled_recordingSplash(char * songname){
 800ad16:	0004      	movs	r4, r0
	sprintf(msg, "Nahravam");
 800ad18:	a803      	add	r0, sp, #12
 800ad1a:	f000 ff0b 	bl	800bb34 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg)-1)*11)/2, 1);
 800ad1e:	a803      	add	r0, sp, #12
 800ad20:	f7f5 f9fa 	bl	8000118 <strlen>
 800ad24:	0003      	movs	r3, r0
 800ad26:	200b      	movs	r0, #11
 800ad28:	4240      	negs	r0, r0
 800ad2a:	4358      	muls	r0, r3
 800ad2c:	308b      	adds	r0, #139	; 0x8b
 800ad2e:	0840      	lsrs	r0, r0, #1
 800ad30:	b2c0      	uxtb	r0, r0
 800ad32:	2101      	movs	r1, #1
 800ad34:	f000 fab2 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 800ad38:	4d38      	ldr	r5, [pc, #224]	; (800ae1c <oled_recordingSplash+0x10c>)
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	6829      	ldr	r1, [r5, #0]
 800ad3e:	686a      	ldr	r2, [r5, #4]
 800ad40:	a803      	add	r0, sp, #12
 800ad42:	f000 fa97 	bl	800b274 <ssd1306_WriteString>
	if(strlen(songname) > 9){
 800ad46:	0020      	movs	r0, r4
 800ad48:	f7f5 f9e6 	bl	8000118 <strlen>
 800ad4c:	2809      	cmp	r0, #9
 800ad4e:	d956      	bls.n	800adfe <oled_recordingSplash+0xee>
			scrollMax = (strlen(songname) - 10);
 800ad50:	4b33      	ldr	r3, [pc, #204]	; (800ae20 <oled_recordingSplash+0x110>)
 800ad52:	380a      	subs	r0, #10
 800ad54:	6018      	str	r0, [r3, #0]
			ssd1306_SetCursor(14, 25);
 800ad56:	2119      	movs	r1, #25
 800ad58:	200e      	movs	r0, #14
 800ad5a:	f000 fa9f 	bl	800b29c <ssd1306_SetCursor>
			memcpy(tmp, (char*)(songname)+scrollIndex, 9);
 800ad5e:	4b31      	ldr	r3, [pc, #196]	; (800ae24 <oled_recordingSplash+0x114>)
 800ad60:	2209      	movs	r2, #9
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	4668      	mov	r0, sp
 800ad66:	1861      	adds	r1, r4, r1
 800ad68:	f000 fdbe 	bl	800b8e8 <memcpy>
			memset(tmp+9, 0, strlen(songname)-9);
 800ad6c:	0020      	movs	r0, r4
 800ad6e:	f7f5 f9d3 	bl	8000118 <strlen>
 800ad72:	0002      	movs	r2, r0
 800ad74:	2009      	movs	r0, #9
 800ad76:	3a09      	subs	r2, #9
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4468      	add	r0, sp
 800ad7c:	f000 fdbd 	bl	800b8fa <memset>
			ssd1306_WriteString(tmp, Font_11x18, White);
 800ad80:	cd06      	ldmia	r5!, {r1, r2}
 800ad82:	2301      	movs	r3, #1
 800ad84:	4668      	mov	r0, sp
 800ad86:	f000 fa75 	bl	800b274 <ssd1306_WriteString>
void oled_recordingSplash(char * songname){
 800ad8a:	2400      	movs	r4, #0
 800ad8c:	2633      	movs	r6, #51	; 0x33
 800ad8e:	0035      	movs	r5, r6
			ssd1306_DrawPixel(x, y+51, White);
 800ad90:	0029      	movs	r1, r5
 800ad92:	3501      	adds	r5, #1
 800ad94:	b2e0      	uxtb	r0, r4
 800ad96:	2201      	movs	r2, #1
 800ad98:	b2ed      	uxtb	r5, r5
 800ad9a:	f000 f9f1 	bl	800b180 <ssd1306_DrawPixel>
		for(int y = 0; y < 12; y++){
 800ad9e:	2d3f      	cmp	r5, #63	; 0x3f
 800ada0:	d1f6      	bne.n	800ad90 <oled_recordingSplash+0x80>
	for(int x = 0; x < 128; x++){
 800ada2:	3401      	adds	r4, #1
 800ada4:	2c80      	cmp	r4, #128	; 0x80
 800ada6:	d1f2      	bne.n	800ad8e <oled_recordingSplash+0x7e>
	sprintf(msg, "Zastavit");
 800ada8:	491f      	ldr	r1, [pc, #124]	; (800ae28 <oled_recordingSplash+0x118>)
 800adaa:	a803      	add	r0, sp, #12
 800adac:	f000 fec2 	bl	800bb34 <strcpy>
	ssd1306_SetCursor((128-(strlen(msg))*7)/2, 53);
 800adb0:	a803      	add	r0, sp, #12
 800adb2:	f7f5 f9b1 	bl	8000118 <strlen>
 800adb6:	0003      	movs	r3, r0
 800adb8:	2007      	movs	r0, #7
 800adba:	4358      	muls	r0, r3
 800adbc:	1a20      	subs	r0, r4, r0
 800adbe:	0840      	lsrs	r0, r0, #1
 800adc0:	b2c0      	uxtb	r0, r0
 800adc2:	2135      	movs	r1, #53	; 0x35
 800adc4:	f000 fa6a 	bl	800b29c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, Black);
 800adc8:	4a18      	ldr	r2, [pc, #96]	; (800ae2c <oled_recordingSplash+0x11c>)
 800adca:	2300      	movs	r3, #0
 800adcc:	6811      	ldr	r1, [r2, #0]
 800adce:	a803      	add	r0, sp, #12
 800add0:	6852      	ldr	r2, [r2, #4]
 800add2:	f000 fa4f 	bl	800b274 <ssd1306_WriteString>
	if(encoderclick){
 800add6:	4c16      	ldr	r4, [pc, #88]	; (800ae30 <oled_recordingSplash+0x120>)
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00d      	beq.n	800adfa <oled_recordingSplash+0xea>
		oled_setDisplayedMenu("mainmenu", &mainmenu, sizeof(mainmenu), 0);
 800adde:	2300      	movs	r3, #0
 800ade0:	22a0      	movs	r2, #160	; 0xa0
 800ade2:	4814      	ldr	r0, [pc, #80]	; (800ae34 <oled_recordingSplash+0x124>)
 800ade4:	4914      	ldr	r1, [pc, #80]	; (800ae38 <oled_recordingSplash+0x128>)
 800ade6:	f7fe fe2f 	bl	8009a48 <oled_setDisplayedMenu>
		oledType = OLED_MENU;
 800adea:	2202      	movs	r2, #2
 800adec:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <oled_recordingSplash+0x12c>)
		midiController_stop(ADDRESS_CONTROLLER);
 800adee:	2001      	movs	r0, #1
		oledType = OLED_MENU;
 800adf0:	601a      	str	r2, [r3, #0]
		encoderclick = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	6023      	str	r3, [r4, #0]
		midiController_stop(ADDRESS_CONTROLLER);
 800adf6:	f7fd fe4d 	bl	8008a94 <midiController_stop>
}
 800adfa:	b00a      	add	sp, #40	; 0x28
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
			ssd1306_SetCursor((128-(strlen(songname))*11)/2, 25);
 800adfe:	230b      	movs	r3, #11
 800ae00:	4358      	muls	r0, r3
 800ae02:	3375      	adds	r3, #117	; 0x75
 800ae04:	1a18      	subs	r0, r3, r0
 800ae06:	0840      	lsrs	r0, r0, #1
 800ae08:	b2c0      	uxtb	r0, r0
 800ae0a:	2119      	movs	r1, #25
 800ae0c:	f000 fa46 	bl	800b29c <ssd1306_SetCursor>
			ssd1306_WriteString(songname, Font_11x18, White);
 800ae10:	cd06      	ldmia	r5!, {r1, r2}
 800ae12:	2301      	movs	r3, #1
 800ae14:	0020      	movs	r0, r4
 800ae16:	e7b6      	b.n	800ad86 <oled_recordingSplash+0x76>
 800ae18:	0800e217 	.word	0x0800e217
 800ae1c:	200003e8 	.word	0x200003e8
 800ae20:	20000abc 	.word	0x20000abc
 800ae24:	20003b10 	.word	0x20003b10
 800ae28:	0800e20e 	.word	0x0800e20e
 800ae2c:	200003f8 	.word	0x200003f8
 800ae30:	200028b4 	.word	0x200028b4
 800ae34:	0800e070 	.word	0x0800e070
 800ae38:	20000288 	.word	0x20000288
 800ae3c:	20000c40 	.word	0x20000c40

0800ae40 <MX_RTC_Init>:

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 800ae40:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 800ae42:	480b      	ldr	r0, [pc, #44]	; (800ae70 <MX_RTC_Init+0x30>)
{
 800ae44:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 800ae48:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 800ae4a:	3280      	adds	r2, #128	; 0x80
 800ae4c:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae4e:	2280      	movs	r2, #128	; 0x80
  hrtc.Instance = RTC;
 800ae50:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ae52:	2300      	movs	r3, #0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae54:	05d2      	lsls	r2, r2, #23
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ae56:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ae58:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800ae5a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ae5c:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae5e:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800ae60:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ae62:	f7fa fb0d 	bl	8005480 <HAL_RTC_Init>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d001      	beq.n	800ae6e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800ae6a:	f7fd fcff 	bl	800886c <Error_Handler>
  }

}
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	200042ec 	.word	0x200042ec
 800ae74:	40002800 	.word	0x40002800

0800ae78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <HAL_RTC_MspInit+0x2c>)
 800ae7a:	6802      	ldr	r2, [r0, #0]
{
 800ae7c:	b082      	sub	sp, #8
  if(rtcHandle->Instance==RTC)
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d10e      	bne.n	800aea0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae82:	2280      	movs	r2, #128	; 0x80
 800ae84:	4b08      	ldr	r3, [pc, #32]	; (800aea8 <HAL_RTC_MspInit+0x30>)
 800ae86:	0212      	lsls	r2, r2, #8
 800ae88:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ae8a:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ae8c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 800ae8e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ae90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae92:	00c9      	lsls	r1, r1, #3
 800ae94:	430a      	orrs	r2, r1
 800ae96:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	400b      	ands	r3, r1
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800aea0:	b002      	add	sp, #8
 800aea2:	4770      	bx	lr
 800aea4:	40002800 	.word	0x40002800
 800aea8:	40021000 	.word	0x40021000

0800aeac <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 800aeac:	4810      	ldr	r0, [pc, #64]	; (800aef0 <MX_SPI1_Init+0x44>)
 800aeae:	4b11      	ldr	r3, [pc, #68]	; (800aef4 <MX_SPI1_Init+0x48>)
{
 800aeb0:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800aeb2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800aeb4:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800aeb6:	22c0      	movs	r2, #192	; 0xc0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800aebc:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800aebe:	0092      	lsls	r2, r2, #2
 800aec0:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800aec2:	3a01      	subs	r2, #1
 800aec4:	3aff      	subs	r2, #255	; 0xff
 800aec6:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800aec8:	3afa      	subs	r2, #250	; 0xfa
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800aeca:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800aecc:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800aece:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aed0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800aed2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800aed4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aed6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800aed8:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800aeda:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800aedc:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 800aede:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800aee0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aee2:	f7fa fc37 	bl	8005754 <HAL_SPI_Init>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d001      	beq.n	800aeee <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 800aeea:	f7fd fcbf 	bl	800886c <Error_Handler>
  }

}
 800aeee:	bd10      	pop	{r4, pc}
 800aef0:	20004318 	.word	0x20004318
 800aef4:	40013000 	.word	0x40013000

0800aef8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aef8:	b510      	push	{r4, lr}
 800aefa:	0004      	movs	r4, r0
 800aefc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aefe:	2214      	movs	r2, #20
 800af00:	2100      	movs	r1, #0
 800af02:	a803      	add	r0, sp, #12
 800af04:	f000 fcf9 	bl	800b8fa <memset>
  if(spiHandle->Instance==SPI1)
 800af08:	4b19      	ldr	r3, [pc, #100]	; (800af70 <HAL_SPI_MspInit+0x78>)
 800af0a:	6822      	ldr	r2, [r4, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d12c      	bne.n	800af6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af10:	2080      	movs	r0, #128	; 0x80
 800af12:	4b18      	ldr	r3, [pc, #96]	; (800af74 <HAL_SPI_MspInit+0x7c>)
 800af14:	0140      	lsls	r0, r0, #5
 800af16:	6c19      	ldr	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af18:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af1a:	4301      	orrs	r1, r0
 800af1c:	6419      	str	r1, [r3, #64]	; 0x40
 800af1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af20:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af22:	2001      	movs	r0, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af24:	9200      	str	r2, [sp, #0]
 800af26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800af2a:	4301      	orrs	r1, r0
 800af2c:	6359      	str	r1, [r3, #52]	; 0x34
 800af2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af30:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af32:	4002      	ands	r2, r0
 800af34:	9201      	str	r2, [sp, #4]
 800af36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af3a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af3c:	4322      	orrs	r2, r4
 800af3e:	635a      	str	r2, [r3, #52]	; 0x34
 800af40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af42:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af44:	4023      	ands	r3, r4
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800af4a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af4c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800af4e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af50:	f7f8 fd44 	bl	80039dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800af54:	2308      	movs	r3, #8
 800af56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af58:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af5a:	a903      	add	r1, sp, #12
 800af5c:	4806      	ldr	r0, [pc, #24]	; (800af78 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af5e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af60:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800af64:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af66:	f7f8 fd39 	bl	80039dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800af6a:	b008      	add	sp, #32
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	40013000 	.word	0x40013000
 800af74:	40021000 	.word	0x40021000
 800af78:	50000400 	.word	0x50000400

0800af7c <ssd1306_WriteBufferByte>:
#if defined(SSD1306_USE_I2C)

uint8_t screenBuffer[(SSD1306_WIDTH * SSD1306_HEIGHT / 8)], bufferIndex = 0, txStep = 0, intStat = 0;


void ssd1306_WriteBufferByte(uint8_t buff[], uint8_t byte) {
 800af7c:	b510      	push	{r4, lr}
	buff[bufferIndex++] = byte;
 800af7e:	4a03      	ldr	r2, [pc, #12]	; (800af8c <ssd1306_WriteBufferByte+0x10>)
 800af80:	7813      	ldrb	r3, [r2, #0]
 800af82:	1c5c      	adds	r4, r3, #1
 800af84:	7014      	strb	r4, [r2, #0]
 800af86:	54c1      	strb	r1, [r0, r3]
}
 800af88:	bd10      	pop	{r4, pc}
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	20000a26 	.word	0x20000a26

0800af90 <ssd1306_SendBuffer>:

void ssd1306_SendBuffer(uint8_t memAdd, uint8_t buff[], uint32_t size) {
 800af90:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, memAdd, 1, buff, size);
 800af92:	b280      	uxth	r0, r0
 800af94:	b292      	uxth	r2, r2
 800af96:	9201      	str	r2, [sp, #4]
 800af98:	9100      	str	r1, [sp, #0]
 800af9a:	0002      	movs	r2, r0
 800af9c:	2301      	movs	r3, #1
 800af9e:	2178      	movs	r1, #120	; 0x78
 800afa0:	4803      	ldr	r0, [pc, #12]	; (800afb0 <ssd1306_SendBuffer+0x20>)
 800afa2:	f7f9 f89d 	bl	80040e0 <HAL_I2C_Mem_Write_DMA>
	bufferIndex = 0;
 800afa6:	2200      	movs	r2, #0
 800afa8:	4b02      	ldr	r3, [pc, #8]	; (800afb4 <ssd1306_SendBuffer+0x24>)
 800afaa:	701a      	strb	r2, [r3, #0]
}
 800afac:	bd07      	pop	{r0, r1, r2, pc}
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	20003e40 	.word	0x20003e40
 800afb4:	20000a26 	.word	0x20000a26

0800afb8 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800afb8:	1e42      	subs	r2, r0, #1
 800afba:	4190      	sbcs	r0, r2
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800afbc:	2282      	movs	r2, #130	; 0x82
 800afbe:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800afc0:	4903      	ldr	r1, [pc, #12]	; (800afd0 <ssd1306_Fill+0x18>)
 800afc2:	4240      	negs	r0, r0
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800afc4:	00d2      	lsls	r2, r2, #3
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800afc6:	5458      	strb	r0, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800afc8:	3301      	adds	r3, #1
 800afca:	4293      	cmp	r3, r2
 800afcc:	d1fb      	bne.n	800afc6 <ssd1306_Fill+0xe>
    }
}
 800afce:	4770      	bx	lr
 800afd0:	20000616 	.word	0x20000616

0800afd4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(uint8_t step) {
 800afd4:	0003      	movs	r3, r0
    intStat = 1;
 800afd6:	2001      	movs	r0, #1
 800afd8:	4a0d      	ldr	r2, [pc, #52]	; (800b010 <ssd1306_UpdateScreen+0x3c>)
void ssd1306_UpdateScreen(uint8_t step) {
 800afda:	b510      	push	{r4, lr}
    intStat = 1;
 800afdc:	7010      	strb	r0, [r2, #0]
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }*/


    if(step % 2){
 800afde:	4018      	ands	r0, r3
 800afe0:	d00d      	beq.n	800affe <ssd1306_UpdateScreen+0x2a>
    	//memcpy(screenBuffer, &SSD1306_Buffer[SSD1306_WIDTH*((step+1)/2)], SSD1306_WIDTH);
    	ssd1306_SendBuffer(SSD1306_MEM_DAT, &SSD1306_Buffer[SSD1306_WIDTH*((step-1)/2)], SSD1306_WIDTH);
 800afe2:	2282      	movs	r2, #130	; 0x82
 800afe4:	2040      	movs	r0, #64	; 0x40
 800afe6:	1e59      	subs	r1, r3, #1
 800afe8:	1049      	asrs	r1, r1, #1
 800afea:	4351      	muls	r1, r2
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <ssd1306_UpdateScreen+0x40>)
 800afee:	1859      	adds	r1, r3, r1
    }else{
    	screenBuffer[0] = 0xB0 + (step/2);
    	screenBuffer[1] = 0x00;
    	screenBuffer[2] = 0x10;
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 800aff0:	f7ff ffce 	bl	800af90 <ssd1306_SendBuffer>
    }

   /* if(step == 0 && txStep == 0){
    	txStep = 1;
    }else */txStep++;
 800aff4:	4a08      	ldr	r2, [pc, #32]	; (800b018 <ssd1306_UpdateScreen+0x44>)
 800aff6:	7813      	ldrb	r3, [r2, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	7013      	strb	r3, [r2, #0]




    //ssd1306_SendBuffer(SSD1306_MEM_DAT, SSD1306_Buffer, ((SSD1306_WIDTH * SSD1306_HEIGHT) / 8));
}
 800affc:	bd10      	pop	{r4, pc}
    	screenBuffer[0] = 0xB0 + (step/2);
 800affe:	4907      	ldr	r1, [pc, #28]	; (800b01c <ssd1306_UpdateScreen+0x48>)
 800b000:	085b      	lsrs	r3, r3, #1
 800b002:	3b50      	subs	r3, #80	; 0x50
 800b004:	700b      	strb	r3, [r1, #0]
    	screenBuffer[2] = 0x10;
 800b006:	2310      	movs	r3, #16
    	screenBuffer[1] = 0x00;
 800b008:	7048      	strb	r0, [r1, #1]
    	screenBuffer[2] = 0x10;
 800b00a:	708b      	strb	r3, [r1, #2]
    	ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, 3);
 800b00c:	2203      	movs	r2, #3
 800b00e:	e7ef      	b.n	800aff0 <ssd1306_UpdateScreen+0x1c>
 800b010:	20000a27 	.word	0x20000a27
 800b014:	20000616 	.word	0x20000616
 800b018:	20000a28 	.word	0x20000a28
 800b01c:	2000437c 	.word	0x2000437c

0800b020 <ssd1306_Init>:
void ssd1306_Init(void) {
 800b020:	b510      	push	{r4, lr}
    HAL_Delay(100);
 800b022:	2064      	movs	r0, #100	; 0x64
 800b024:	f7f7 ff0e 	bl	8002e44 <HAL_Delay>
    ssd1306_WriteBufferByte(screenBuffer, 0xAE); //display off
 800b028:	4c44      	ldr	r4, [pc, #272]	; (800b13c <ssd1306_Init+0x11c>)
 800b02a:	21ae      	movs	r1, #174	; 0xae
 800b02c:	0020      	movs	r0, r4
 800b02e:	f7ff ffa5 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //Set Memory Addressing Mode
 800b032:	2120      	movs	r1, #32
 800b034:	0020      	movs	r0, r4
 800b036:	f7ff ffa1 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800b03a:	2110      	movs	r1, #16
 800b03c:	0020      	movs	r0, r4
 800b03e:	f7ff ff9d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800b042:	21b0      	movs	r1, #176	; 0xb0
 800b044:	0020      	movs	r0, r4
 800b046:	f7ff ff99 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xC8); //Set COM Output Scan Direction
 800b04a:	21c8      	movs	r1, #200	; 0xc8
 800b04c:	0020      	movs	r0, r4
 800b04e:	f7ff ff95 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //---set low column address
 800b052:	2100      	movs	r1, #0
 800b054:	0020      	movs	r0, r4
 800b056:	f7ff ff91 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x10); //---set high column address
 800b05a:	2110      	movs	r1, #16
 800b05c:	0020      	movs	r0, r4
 800b05e:	f7ff ff8d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x40); //--set start line address - CHECK
 800b062:	2140      	movs	r1, #64	; 0x40
 800b064:	0020      	movs	r0, r4
 800b066:	f7ff ff89 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x81); //--set contrast control register - CHECK
 800b06a:	2181      	movs	r1, #129	; 0x81
 800b06c:	0020      	movs	r0, r4
 800b06e:	f7ff ff85 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xFF);
 800b072:	21ff      	movs	r1, #255	; 0xff
 800b074:	0020      	movs	r0, r4
 800b076:	f7ff ff81 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA1); //--set segment re-map 0 to 127 - CHECK
 800b07a:	21a1      	movs	r1, #161	; 0xa1
 800b07c:	0020      	movs	r0, r4
 800b07e:	f7ff ff7d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA6); //--set normal color
 800b082:	21a6      	movs	r1, #166	; 0xa6
 800b084:	0020      	movs	r0, r4
 800b086:	f7ff ff79 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800b08a:	21a8      	movs	r1, #168	; 0xa8
 800b08c:	0020      	movs	r0, r4
 800b08e:	f7ff ff75 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x3F); //
 800b092:	213f      	movs	r1, #63	; 0x3f
 800b094:	0020      	movs	r0, r4
 800b096:	f7ff ff71 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800b09a:	21a4      	movs	r1, #164	; 0xa4
 800b09c:	0020      	movs	r0, r4
 800b09e:	f7ff ff6d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD3); //-set display offset - CHECK
 800b0a2:	21d3      	movs	r1, #211	; 0xd3
 800b0a4:	0020      	movs	r0, r4
 800b0a6:	f7ff ff69 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x00); //-not offset
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	0020      	movs	r0, r4
 800b0ae:	f7ff ff65 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD5); //--set display clock divide ratio/oscillator frequency
 800b0b2:	21d5      	movs	r1, #213	; 0xd5
 800b0b4:	0020      	movs	r0, r4
 800b0b6:	f7ff ff61 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xF0); //--set divide ratio
 800b0ba:	21f0      	movs	r1, #240	; 0xf0
 800b0bc:	0020      	movs	r0, r4
 800b0be:	f7ff ff5d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xD9); //--set pre-charge period
 800b0c2:	21d9      	movs	r1, #217	; 0xd9
 800b0c4:	0020      	movs	r0, r4
 800b0c6:	f7ff ff59 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x34); //22
 800b0ca:	2134      	movs	r1, #52	; 0x34
 800b0cc:	0020      	movs	r0, r4
 800b0ce:	f7ff ff55 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDA); //--set com pins hardware configuration - CHECK
 800b0d2:	21da      	movs	r1, #218	; 0xda
 800b0d4:	0020      	movs	r0, r4
 800b0d6:	f7ff ff51 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x12);
 800b0da:	2112      	movs	r1, #18
 800b0dc:	0020      	movs	r0, r4
 800b0de:	f7ff ff4d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xDB); //--set vcomh
 800b0e2:	21db      	movs	r1, #219	; 0xdb
 800b0e4:	0020      	movs	r0, r4
 800b0e6:	f7ff ff49 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x20); //0x20,0.77xVcc
 800b0ea:	2120      	movs	r1, #32
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	f7ff ff45 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x8D); //--set DC-DC enable
 800b0f2:	218d      	movs	r1, #141	; 0x8d
 800b0f4:	0020      	movs	r0, r4
 800b0f6:	f7ff ff41 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0x14); //
 800b0fa:	2114      	movs	r1, #20
 800b0fc:	0020      	movs	r0, r4
 800b0fe:	f7ff ff3d 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_WriteBufferByte(screenBuffer, 0xAF); //--turn on SSD1306 panel
 800b102:	21af      	movs	r1, #175	; 0xaf
 800b104:	0020      	movs	r0, r4
 800b106:	f7ff ff39 	bl	800af7c <ssd1306_WriteBufferByte>
    ssd1306_SendBuffer(SSD1306_MEM_CMD, screenBuffer, bufferIndex);
 800b10a:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <ssd1306_Init+0x120>)
 800b10c:	0021      	movs	r1, r4
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	2000      	movs	r0, #0
 800b112:	f7ff ff3d 	bl	800af90 <ssd1306_SendBuffer>
    while(HAL_DMA_GetState(&hdma_i2c1_tx) == HAL_DMA_STATE_BUSY);
 800b116:	480b      	ldr	r0, [pc, #44]	; (800b144 <ssd1306_Init+0x124>)
 800b118:	f7f8 fc5c 	bl	80039d4 <HAL_DMA_GetState>
 800b11c:	2802      	cmp	r0, #2
 800b11e:	d0fa      	beq.n	800b116 <ssd1306_Init+0xf6>
    ssd1306_Fill(Black);
 800b120:	2000      	movs	r0, #0
 800b122:	f7ff ff49 	bl	800afb8 <ssd1306_Fill>
    ssd1306_UpdateScreen(0);
 800b126:	2000      	movs	r0, #0
 800b128:	f7ff ff54 	bl	800afd4 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800b12c:	2200      	movs	r2, #0
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <ssd1306_Init+0x128>)
 800b130:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800b132:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800b134:	3201      	adds	r2, #1
 800b136:	715a      	strb	r2, [r3, #5]
}
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	2000437c 	.word	0x2000437c
 800b140:	20000a26 	.word	0x20000a26
 800b144:	20003de4 	.word	0x20003de4
 800b148:	20000610 	.word	0x20000610

0800b14c <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){

	if(hi2c->Instance == I2C1){
 800b14c:	4b09      	ldr	r3, [pc, #36]	; (800b174 <HAL_I2C_MemTxCpltCallback+0x28>)
 800b14e:	6802      	ldr	r2, [r0, #0]
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 800b150:	b510      	push	{r4, lr}
	if(hi2c->Instance == I2C1){
 800b152:	429a      	cmp	r2, r3
 800b154:	d109      	bne.n	800b16a <HAL_I2C_MemTxCpltCallback+0x1e>
		if(intStat == 0){
 800b156:	4b08      	ldr	r3, [pc, #32]	; (800b178 <HAL_I2C_MemTxCpltCallback+0x2c>)

		}else if(intStat == 1){
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	2a01      	cmp	r2, #1
 800b15c:	d105      	bne.n	800b16a <HAL_I2C_MemTxCpltCallback+0x1e>
			if(txStep < 16){
 800b15e:	4907      	ldr	r1, [pc, #28]	; (800b17c <HAL_I2C_MemTxCpltCallback+0x30>)
 800b160:	7808      	ldrb	r0, [r1, #0]
 800b162:	280f      	cmp	r0, #15
 800b164:	d802      	bhi.n	800b16c <HAL_I2C_MemTxCpltCallback+0x20>
				ssd1306_UpdateScreen(txStep);
 800b166:	f7ff ff35 	bl	800afd4 <ssd1306_UpdateScreen>
		}

	}


}
 800b16a:	bd10      	pop	{r4, pc}
				txStep = 0;
 800b16c:	2200      	movs	r2, #0
 800b16e:	700a      	strb	r2, [r1, #0]
				intStat = 0;
 800b170:	701a      	strb	r2, [r3, #0]
}
 800b172:	e7fa      	b.n	800b16a <HAL_I2C_MemTxCpltCallback+0x1e>
 800b174:	40005400 	.word	0x40005400
 800b178:	20000a27 	.word	0x20000a27
 800b17c:	20000a28 	.word	0x20000a28

0800b180 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800b180:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800b182:	2881      	cmp	r0, #129	; 0x81
 800b184:	d815      	bhi.n	800b1b2 <ssd1306_DrawPixel+0x32>
 800b186:	293f      	cmp	r1, #63	; 0x3f
 800b188:	d813      	bhi.n	800b1b2 <ssd1306_DrawPixel+0x32>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800b18a:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <ssd1306_DrawPixel+0x40>)
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <ssd1306_DrawPixel+0x18>
        color = (SSD1306_COLOR)!color;
 800b192:	4253      	negs	r3, r2
 800b194:	415a      	adcs	r2, r3
 800b196:	b2d2      	uxtb	r2, r2
 800b198:	2382      	movs	r3, #130	; 0x82
 800b19a:	08cd      	lsrs	r5, r1, #3
    }

    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800b19c:	436b      	muls	r3, r5
 800b19e:	1818      	adds	r0, r3, r0
 800b1a0:	2307      	movs	r3, #7
 800b1a2:	4c08      	ldr	r4, [pc, #32]	; (800b1c4 <ssd1306_DrawPixel+0x44>)
 800b1a4:	4019      	ands	r1, r3
    if(color == White) {
 800b1a6:	2a01      	cmp	r2, #1
 800b1a8:	d104      	bne.n	800b1b4 <ssd1306_DrawPixel+0x34>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800b1aa:	408a      	lsls	r2, r1
 800b1ac:	5c23      	ldrb	r3, [r4, r0]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	5422      	strb	r2, [r4, r0]
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}
 800b1b2:	bd30      	pop	{r4, r5, pc}
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	408a      	lsls	r2, r1
 800b1b8:	5c23      	ldrb	r3, [r4, r0]
 800b1ba:	4393      	bics	r3, r2
 800b1bc:	5423      	strb	r3, [r4, r0]
 800b1be:	e7f8      	b.n	800b1b2 <ssd1306_DrawPixel+0x32>
 800b1c0:	20000610 	.word	0x20000610
 800b1c4:	20000616 	.word	0x20000616

0800b1c8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ca:	b08b      	sub	sp, #44	; 0x2c
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	b2cb      	uxtb	r3, r1
 800b1d0:	9303      	str	r3, [sp, #12]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800b1d2:	4b27      	ldr	r3, [pc, #156]	; (800b270 <ssd1306_WriteChar+0xa8>)
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800b1d4:	9108      	str	r1, [sp, #32]
 800b1d6:	9209      	str	r2, [sp, #36]	; 0x24
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800b1d8:	9903      	ldr	r1, [sp, #12]
 800b1da:	881a      	ldrh	r2, [r3, #0]
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800b1dc:	0006      	movs	r6, r0
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800b1de:	9202      	str	r2, [sp, #8]
 800b1e0:	1852      	adds	r2, r2, r1
 800b1e2:	2a81      	cmp	r2, #129	; 0x81
 800b1e4:	dc41      	bgt.n	800b26a <ssd1306_WriteChar+0xa2>
 800b1e6:	aa08      	add	r2, sp, #32
 800b1e8:	7852      	ldrb	r2, [r2, #1]
 800b1ea:	9204      	str	r2, [sp, #16]
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800b1ec:	885c      	ldrh	r4, [r3, #2]
 800b1ee:	18a3      	adds	r3, r4, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800b1f0:	2b3f      	cmp	r3, #63	; 0x3f
 800b1f2:	dc3a      	bgt.n	800b26a <ssd1306_WriteChar+0xa2>
        return 0;
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800b1f4:	0033      	movs	r3, r6
 800b1f6:	3b20      	subs	r3, #32
 800b1f8:	435a      	muls	r2, r3
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9207      	str	r2, [sp, #28]
 800b1fe:	b2e4      	uxtb	r4, r4
 800b200:	9301      	str	r3, [sp, #4]
    for(i = 0; i < Font.FontHeight; i++) {
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	4293      	cmp	r3, r2
 800b208:	d308      	bcc.n	800b21c <ssd1306_WriteChar+0x54>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	4694      	mov	ip, r2
 800b210:	4a17      	ldr	r2, [pc, #92]	; (800b270 <ssd1306_WriteChar+0xa8>)
 800b212:	4463      	add	r3, ip
 800b214:	8013      	strh	r3, [r2, #0]

    // Return written char for validation
    return ch;
}
 800b216:	0030      	movs	r0, r6
 800b218:	b00b      	add	sp, #44	; 0x2c
 800b21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800b21c:	9a07      	ldr	r2, [sp, #28]
 800b21e:	9b01      	ldr	r3, [sp, #4]
        for(j = 0; j < Font.FontWidth; j++) {
 800b220:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800b222:	189b      	adds	r3, r3, r2
 800b224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	5a9b      	ldrh	r3, [r3, r2]
 800b22a:	9306      	str	r3, [sp, #24]
 800b22c:	466b      	mov	r3, sp
 800b22e:	7a1d      	ldrb	r5, [r3, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	429f      	cmp	r7, r3
 800b234:	d305      	bcc.n	800b242 <ssd1306_WriteChar+0x7a>
    for(i = 0; i < Font.FontHeight; i++) {
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	3401      	adds	r4, #1
 800b23a:	3301      	adds	r3, #1
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	b2e4      	uxtb	r4, r4
 800b240:	e7df      	b.n	800b202 <ssd1306_WriteChar+0x3a>
            if((b << j) & 0x8000)  {
 800b242:	9b06      	ldr	r3, [sp, #24]
 800b244:	2280      	movs	r2, #128	; 0x80
 800b246:	40bb      	lsls	r3, r7
 800b248:	0212      	lsls	r2, r2, #8
 800b24a:	4213      	tst	r3, r2
 800b24c:	d008      	beq.n	800b260 <ssd1306_WriteChar+0x98>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800b24e:	9a05      	ldr	r2, [sp, #20]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800b250:	0028      	movs	r0, r5
 800b252:	0021      	movs	r1, r4
 800b254:	3501      	adds	r5, #1
 800b256:	f7ff ff93 	bl	800b180 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800b25a:	3701      	adds	r7, #1
 800b25c:	b2ed      	uxtb	r5, r5
 800b25e:	e7e7      	b.n	800b230 <ssd1306_WriteChar+0x68>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800b260:	9a05      	ldr	r2, [sp, #20]
 800b262:	4253      	negs	r3, r2
 800b264:	415a      	adcs	r2, r3
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	e7f2      	b.n	800b250 <ssd1306_WriteChar+0x88>
        return 0;
 800b26a:	2600      	movs	r6, #0
 800b26c:	e7d3      	b.n	800b216 <ssd1306_WriteChar+0x4e>
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	20000610 	.word	0x20000610

0800b274 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800b274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b276:	0004      	movs	r4, r0
 800b278:	001d      	movs	r5, r3
 800b27a:	9100      	str	r1, [sp, #0]
 800b27c:	9201      	str	r2, [sp, #4]
    // Write until null-byte
    while (*str) {
 800b27e:	7820      	ldrb	r0, [r4, #0]
 800b280:	2800      	cmp	r0, #0
 800b282:	d100      	bne.n	800b286 <ssd1306_WriteString+0x12>
        str++;
    }

    // Everything ok
    return *str;
}
 800b284:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800b286:	002b      	movs	r3, r5
 800b288:	9900      	ldr	r1, [sp, #0]
 800b28a:	9a01      	ldr	r2, [sp, #4]
 800b28c:	f7ff ff9c 	bl	800b1c8 <ssd1306_WriteChar>
 800b290:	0003      	movs	r3, r0
 800b292:	7820      	ldrb	r0, [r4, #0]
 800b294:	4283      	cmp	r3, r0
 800b296:	d1f5      	bne.n	800b284 <ssd1306_WriteString+0x10>
        str++;
 800b298:	3401      	adds	r4, #1
 800b29a:	e7f0      	b.n	800b27e <ssd1306_WriteString+0xa>

0800b29c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 800b29c:	4b01      	ldr	r3, [pc, #4]	; (800b2a4 <ssd1306_SetCursor+0x8>)
 800b29e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 800b2a0:	8059      	strh	r1, [r3, #2]
}
 800b2a2:	4770      	bx	lr
 800b2a4:	20000610 	.word	0x20000610

0800b2a8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <HAL_MspInit+0x38>)
{
 800b2ac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b2b0:	4301      	orrs	r1, r0
 800b2b2:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800b2b4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800b2b8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2ba:	4002      	ands	r2, r0
 800b2bc:	9200      	str	r2, [sp, #0]
 800b2be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b2c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800b2c8:	4a06      	ldr	r2, [pc, #24]	; (800b2e4 <HAL_MspInit+0x3c>)
 800b2ca:	400b      	ands	r3, r1
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	2380      	movs	r3, #128	; 0x80
 800b2d2:	6811      	ldr	r1, [r2, #0]
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	6013      	str	r3, [r2, #0]
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD2_STROBE);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b2da:	b002      	add	sp, #8
 800b2dc:	4770      	bx	lr
 800b2de:	46c0      	nop			; (mov r8, r8)
 800b2e0:	40021000 	.word	0x40021000
 800b2e4:	40010000 	.word	0x40010000

0800b2e8 <NMI_Handler>:
 800b2e8:	4770      	bx	lr

0800b2ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b2ea:	e7fe      	b.n	800b2ea <HardFault_Handler>

0800b2ec <SVC_Handler>:
 800b2ec:	4770      	bx	lr

0800b2ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b2ee:	4770      	bx	lr

0800b2f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b2f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b2f2:	f7f7 fd95 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b2f6:	bd10      	pop	{r4, pc}

0800b2f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800b2f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800b2fa:	2010      	movs	r0, #16
 800b2fc:	f7f8 fc24 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800b300:	2080      	movs	r0, #128	; 0x80
 800b302:	01c0      	lsls	r0, r0, #7
 800b304:	f7f8 fc20 	bl	8003b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800b308:	bd10      	pop	{r4, pc}
	...

0800b30c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b30c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b30e:	4802      	ldr	r0, [pc, #8]	; (800b318 <DMA1_Channel1_IRQHandler+0xc>)
 800b310:	f7f8 fb0c 	bl	800392c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b314:	bd10      	pop	{r4, pc}
 800b316:	46c0      	nop			; (mov r8, r8)
 800b318:	20003de4 	.word	0x20003de4

0800b31c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800b31c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b31e:	4802      	ldr	r0, [pc, #8]	; (800b328 <ADC1_COMP_IRQHandler+0xc>)
 800b320:	f7f7 ff40 	bl	80031a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800b324:	bd10      	pop	{r4, pc}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	20000a48 	.word	0x20000a48

0800b32c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b32c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b32e:	4802      	ldr	r0, [pc, #8]	; (800b338 <TIM1_CC_IRQHandler+0xc>)
 800b330:	f7fa fa9c 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b334:	bd10      	pop	{r4, pc}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	2000480c 	.word	0x2000480c

0800b33c <TIM1_BRK_UP_TRG_COM_IRQHandler>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	f7ff fff5 	bl	800b32c <TIM1_CC_IRQHandler>
 800b342:	bd10      	pop	{r4, pc}

0800b344 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b344:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b346:	4802      	ldr	r0, [pc, #8]	; (800b350 <TIM2_IRQHandler+0xc>)
 800b348:	f7fa fa90 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	46c0      	nop			; (mov r8, r8)
 800b350:	2000484c 	.word	0x2000484c

0800b354 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b354:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b356:	4802      	ldr	r0, [pc, #8]	; (800b360 <TIM3_IRQHandler+0xc>)
 800b358:	f7fa fa88 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	46c0      	nop			; (mov r8, r8)
 800b360:	2000478c 	.word	0x2000478c

0800b364 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800b364:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b366:	4802      	ldr	r0, [pc, #8]	; (800b370 <TIM6_DAC_LPTIM1_IRQHandler+0xc>)
 800b368:	f7fa fa80 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	200047cc 	.word	0x200047cc

0800b374 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800b374:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b376:	4802      	ldr	r0, [pc, #8]	; (800b380 <TIM7_LPTIM2_IRQHandler+0xc>)
 800b378:	f7fa fa78 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 800b37c:	bd10      	pop	{r4, pc}
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	2000488c 	.word	0x2000488c

0800b384 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800b384:	4806      	ldr	r0, [pc, #24]	; (800b3a0 <I2C1_IRQHandler+0x1c>)
{
 800b386:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800b388:	6803      	ldr	r3, [r0, #0]
 800b38a:	699a      	ldr	r2, [r3, #24]
 800b38c:	23e0      	movs	r3, #224	; 0xe0
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	421a      	tst	r2, r3
 800b392:	d002      	beq.n	800b39a <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800b394:	f7f9 fb2a 	bl	80049ec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800b398:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800b39a:	f7f8 ff47 	bl	800422c <HAL_I2C_EV_IRQHandler>
}
 800b39e:	e7fb      	b.n	800b398 <I2C1_IRQHandler+0x14>
 800b3a0:	20003e40 	.word	0x20003e40

0800b3a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800b3a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b3a6:	4802      	ldr	r0, [pc, #8]	; (800b3b0 <USART2_IRQHandler+0xc>)
 800b3a8:	f7fa ff52 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	46c0      	nop			; (mov r8, r8)
 800b3b0:	200048cc 	.word	0x200048cc

0800b3b4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <_sbrk+0x2c>)
{
 800b3b6:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800b3b8:	6819      	ldr	r1, [r3, #0]
{
 800b3ba:	0002      	movs	r2, r0
	if (heap_end == 0)
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	d101      	bne.n	800b3c4 <_sbrk+0x10>
		heap_end = &end;
 800b3c0:	4908      	ldr	r1, [pc, #32]	; (800b3e4 <_sbrk+0x30>)
 800b3c2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800b3c4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800b3c6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800b3c8:	1882      	adds	r2, r0, r2
 800b3ca:	428a      	cmp	r2, r1
 800b3cc:	d906      	bls.n	800b3dc <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b3ce:	f000 fa4d 	bl	800b86c <__errno>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800b3da:	bd10      	pop	{r4, pc}
	heap_end += incr;
 800b3dc:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800b3de:	e7fc      	b.n	800b3da <_sbrk+0x26>
 800b3e0:	20000a2c 	.word	0x20000a2c
 800b3e4:	2000495c 	.word	0x2000495c

0800b3e8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b3e8:	2280      	movs	r2, #128	; 0x80
 800b3ea:	4b02      	ldr	r3, [pc, #8]	; (800b3f4 <SystemInit+0xc>)
 800b3ec:	0512      	lsls	r2, r2, #20
 800b3ee:	609a      	str	r2, [r3, #8]
#endif
}
 800b3f0:	4770      	bx	lr
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	e000ed00 	.word	0xe000ed00

0800b3f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b3f8:	b530      	push	{r4, r5, lr}
 800b3fa:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3fc:	2210      	movs	r2, #16
 800b3fe:	2100      	movs	r1, #0
 800b400:	a803      	add	r0, sp, #12
 800b402:	f000 fa7a 	bl	800b8fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b406:	220c      	movs	r2, #12
 800b408:	2100      	movs	r1, #0
 800b40a:	4668      	mov	r0, sp
 800b40c:	f000 fa75 	bl	800b8fa <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b410:	2234      	movs	r2, #52	; 0x34
 800b412:	2100      	movs	r1, #0
 800b414:	a807      	add	r0, sp, #28
 800b416:	f000 fa70 	bl	800b8fa <memset>

  htim1.Instance = TIM1;
 800b41a:	4c1b      	ldr	r4, [pc, #108]	; (800b488 <MX_TIM1_Init+0x90>)
 800b41c:	4b1b      	ldr	r3, [pc, #108]	; (800b48c <MX_TIM1_Init+0x94>)
  htim1.Init.Prescaler = 63999;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10;
 800b41e:	220a      	movs	r2, #10
  htim1.Instance = TIM1;
 800b420:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 63999;
 800b422:	4b1b      	ldr	r3, [pc, #108]	; (800b490 <MX_TIM1_Init+0x98>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b424:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 63999;
 800b426:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b428:	2300      	movs	r3, #0
  htim1.Init.Period = 10;
 800b42a:	60e2      	str	r2, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b42c:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b42e:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800b430:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b432:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b434:	f7fa fb22 	bl	8005a7c <HAL_TIM_Base_Init>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d001      	beq.n	800b440 <MX_TIM1_Init+0x48>
  {
    Error_Handler();
 800b43c:	f7fd fa16 	bl	800886c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b440:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b442:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b444:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b446:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b448:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b44a:	f7fa fb3f 	bl	8005acc <HAL_TIM_ConfigClockSource>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d001      	beq.n	800b456 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800b452:	f7fd fa0b 	bl	800886c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b456:	2500      	movs	r5, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b458:	4669      	mov	r1, sp
 800b45a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b45c:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b45e:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b460:	9502      	str	r5, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b462:	f7fa fbc9 	bl	8005bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800b466:	42a8      	cmp	r0, r5
 800b468:	d001      	beq.n	800b46e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800b46a:	f7fd f9ff 	bl	800886c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b46e:	a907      	add	r1, sp, #28
 800b470:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800b472:	950e      	str	r5, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800b474:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b476:	f7fa fbe9 	bl	8005c4c <HAL_TIMEx_ConfigBreakDeadTime>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d001      	beq.n	800b482 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800b47e:	f7fd f9f5 	bl	800886c <Error_Handler>
  }

}
 800b482:	b015      	add	sp, #84	; 0x54
 800b484:	bd30      	pop	{r4, r5, pc}
 800b486:	46c0      	nop			; (mov r8, r8)
 800b488:	2000480c 	.word	0x2000480c
 800b48c:	40012c00 	.word	0x40012c00
 800b490:	0000f9ff 	.word	0x0000f9ff

0800b494 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b494:	b510      	push	{r4, lr}
 800b496:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b498:	2210      	movs	r2, #16
 800b49a:	2100      	movs	r1, #0
 800b49c:	a804      	add	r0, sp, #16
 800b49e:	f000 fa2c 	bl	800b8fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4a2:	220c      	movs	r2, #12
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	a801      	add	r0, sp, #4
 800b4a8:	f000 fa27 	bl	800b8fa <memset>

  htim2.Instance = TIM2;
 800b4ac:	2380      	movs	r3, #128	; 0x80
 800b4ae:	4c15      	ldr	r4, [pc, #84]	; (800b504 <MX_TIM2_Init+0x70>)
 800b4b0:	05db      	lsls	r3, r3, #23
 800b4b2:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 319;
 800b4b4:	2340      	movs	r3, #64	; 0x40
 800b4b6:	33ff      	adds	r3, #255	; 0xff
 800b4b8:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4ba:	2300      	movs	r3, #0
  htim2.Init.Period = 13200;
 800b4bc:	4a12      	ldr	r2, [pc, #72]	; (800b508 <MX_TIM2_Init+0x74>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b4be:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4c0:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 13200;
 800b4c2:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4c4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4c6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b4c8:	f7fa fad8 	bl	8005a7c <HAL_TIM_Base_Init>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d001      	beq.n	800b4d4 <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 800b4d0:	f7fd f9cc 	bl	800886c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4d4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b4d6:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4d8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b4da:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b4de:	f7fa faf5 	bl	8005acc <HAL_TIM_ConfigClockSource>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d001      	beq.n	800b4ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b4e6:	f7fd f9c1 	bl	800886c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4ea:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b4ec:	a901      	add	r1, sp, #4
 800b4ee:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4f0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b4f4:	f7fa fb80 	bl	8005bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d001      	beq.n	800b500 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800b4fc:	f7fd f9b6 	bl	800886c <Error_Handler>
  }

}
 800b500:	b008      	add	sp, #32
 800b502:	bd10      	pop	{r4, pc}
 800b504:	2000484c 	.word	0x2000484c
 800b508:	00003390 	.word	0x00003390

0800b50c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b50c:	b510      	push	{r4, lr}
 800b50e:	b088      	sub	sp, #32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b510:	2210      	movs	r2, #16
 800b512:	2100      	movs	r1, #0
 800b514:	a804      	add	r0, sp, #16
 800b516:	f000 f9f0 	bl	800b8fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b51a:	220c      	movs	r2, #12
 800b51c:	2100      	movs	r1, #0
 800b51e:	a801      	add	r0, sp, #4
 800b520:	f000 f9eb 	bl	800b8fa <memset>

  htim3.Instance = TIM3;
 800b524:	4c15      	ldr	r4, [pc, #84]	; (800b57c <MX_TIM3_Init+0x70>)
 800b526:	4b16      	ldr	r3, [pc, #88]	; (800b580 <MX_TIM3_Init+0x74>)
  htim3.Init.Prescaler = 31999;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 800b528:	22fa      	movs	r2, #250	; 0xfa
  htim3.Instance = TIM3;
 800b52a:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 31999;
 800b52c:	4b15      	ldr	r3, [pc, #84]	; (800b584 <MX_TIM3_Init+0x78>)
  htim3.Init.Period = 1000;
 800b52e:	0092      	lsls	r2, r2, #2
  htim3.Init.Prescaler = 31999;
 800b530:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b532:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b534:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b536:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 1000;
 800b538:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b53a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b53c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b53e:	f7fa fa9d 	bl	8005a7c <HAL_TIM_Base_Init>
 800b542:	2800      	cmp	r0, #0
 800b544:	d001      	beq.n	800b54a <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 800b546:	f7fd f991 	bl	800886c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b54a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b54c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b54e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b550:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b552:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b554:	f7fa faba 	bl	8005acc <HAL_TIM_ConfigClockSource>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d001      	beq.n	800b560 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b55c:	f7fd f986 	bl	800886c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b560:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b562:	a901      	add	r1, sp, #4
 800b564:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b566:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b568:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b56a:	f7fa fb45 	bl	8005bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d001      	beq.n	800b576 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800b572:	f7fd f97b 	bl	800886c <Error_Handler>
  }

}
 800b576:	b008      	add	sp, #32
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	46c0      	nop			; (mov r8, r8)
 800b57c:	2000478c 	.word	0x2000478c
 800b580:	40000400 	.word	0x40000400
 800b584:	00007cff 	.word	0x00007cff

0800b588 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b588:	b530      	push	{r4, r5, lr}
 800b58a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b58c:	220c      	movs	r2, #12
 800b58e:	2100      	movs	r1, #0
 800b590:	a801      	add	r0, sp, #4
 800b592:	f000 f9b2 	bl	800b8fa <memset>

  htim6.Instance = TIM6;
 800b596:	4c0e      	ldr	r4, [pc, #56]	; (800b5d0 <MX_TIM6_Init+0x48>)
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <MX_TIM6_Init+0x4c>)
  htim6.Init.Prescaler = 6399;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b59a:	2500      	movs	r5, #0
  htim6.Instance = TIM6;
 800b59c:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 6399;
 800b59e:	4b0e      	ldr	r3, [pc, #56]	; (800b5d8 <MX_TIM6_Init+0x50>)
  htim6.Init.Period = 100;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b5a0:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 6399;
 800b5a2:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 100;
 800b5a4:	2364      	movs	r3, #100	; 0x64
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5a6:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 100;
 800b5a8:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5aa:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b5ac:	f7fa fa66 	bl	8005a7c <HAL_TIM_Base_Init>
 800b5b0:	42a8      	cmp	r0, r5
 800b5b2:	d001      	beq.n	800b5b8 <MX_TIM6_Init+0x30>
  {
    Error_Handler();
 800b5b4:	f7fd f95a 	bl	800886c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b5b8:	a901      	add	r1, sp, #4
 800b5ba:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b5bc:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b5be:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b5c0:	f7fa fb1a 	bl	8005bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d001      	beq.n	800b5cc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800b5c8:	f7fd f950 	bl	800886c <Error_Handler>
  }

}
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bd30      	pop	{r4, r5, pc}
 800b5d0:	200047cc 	.word	0x200047cc
 800b5d4:	40001000 	.word	0x40001000
 800b5d8:	000018ff 	.word	0x000018ff

0800b5dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b5dc:	b530      	push	{r4, r5, lr}
 800b5de:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5e0:	220c      	movs	r2, #12
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	a801      	add	r0, sp, #4
 800b5e6:	f000 f988 	bl	800b8fa <memset>

  htim7.Instance = TIM7;
 800b5ea:	4c0f      	ldr	r4, [pc, #60]	; (800b628 <MX_TIM7_Init+0x4c>)
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <MX_TIM7_Init+0x50>)
  htim7.Init.Prescaler = 32000;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5ee:	2500      	movs	r5, #0
  htim7.Instance = TIM7;
 800b5f0:	6023      	str	r3, [r4, #0]
  htim7.Init.Prescaler = 32000;
 800b5f2:	23fa      	movs	r3, #250	; 0xfa
 800b5f4:	01db      	lsls	r3, r3, #7
 800b5f6:	6063      	str	r3, [r4, #4]
  htim7.Init.Period = 125;
 800b5f8:	237d      	movs	r3, #125	; 0x7d
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b5fa:	0020      	movs	r0, r4
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5fc:	60a5      	str	r5, [r4, #8]
  htim7.Init.Period = 125;
 800b5fe:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b600:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b602:	f7fa fa3b 	bl	8005a7c <HAL_TIM_Base_Init>
 800b606:	42a8      	cmp	r0, r5
 800b608:	d001      	beq.n	800b60e <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 800b60a:	f7fd f92f 	bl	800886c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b60e:	a901      	add	r1, sp, #4
 800b610:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b612:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b614:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b616:	f7fa faef 	bl	8005bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d001      	beq.n	800b622 <MX_TIM7_Init+0x46>
  {
    Error_Handler();
 800b61e:	f7fd f925 	bl	800886c <Error_Handler>
  }

}
 800b622:	b005      	add	sp, #20
 800b624:	bd30      	pop	{r4, r5, pc}
 800b626:	46c0      	nop			; (mov r8, r8)
 800b628:	2000488c 	.word	0x2000488c
 800b62c:	40001400 	.word	0x40001400

0800b630 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  if(tim_baseHandle->Instance==TIM1)
 800b632:	6803      	ldr	r3, [r0, #0]
 800b634:	4a35      	ldr	r2, [pc, #212]	; (800b70c <HAL_TIM_Base_MspInit+0xdc>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d11b      	bne.n	800b672 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b63a:	2080      	movs	r0, #128	; 0x80
 800b63c:	4a34      	ldr	r2, [pc, #208]	; (800b710 <HAL_TIM_Base_MspInit+0xe0>)
 800b63e:	0100      	lsls	r0, r0, #4
 800b640:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b642:	4301      	orrs	r1, r0
 800b644:	6411      	str	r1, [r2, #64]	; 0x40
 800b646:	6c13      	ldr	r3, [r2, #64]	; 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800b648:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b64a:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800b64c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b64e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800b650:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b652:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800b654:	f7f7 ffe2 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800b658:	200d      	movs	r0, #13
 800b65a:	f7f8 f80f 	bl	800367c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800b65e:	2200      	movs	r2, #0
 800b660:	200e      	movs	r0, #14
 800b662:	0011      	movs	r1, r2
 800b664:	f7f7 ffda 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800b668:	200e      	movs	r0, #14
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800b66a:	f7f8 f807 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b66e:	b007      	add	sp, #28
 800b670:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM2)
 800b672:	2280      	movs	r2, #128	; 0x80
 800b674:	05d2      	lsls	r2, r2, #23
 800b676:	4293      	cmp	r3, r2
 800b678:	d10f      	bne.n	800b69a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b67a:	2001      	movs	r0, #1
 800b67c:	4a24      	ldr	r2, [pc, #144]	; (800b710 <HAL_TIM_Base_MspInit+0xe0>)
 800b67e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b680:	4301      	orrs	r1, r0
 800b682:	63d1      	str	r1, [r2, #60]	; 0x3c
 800b684:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b686:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b688:	4003      	ands	r3, r0
 800b68a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b68c:	300e      	adds	r0, #14
 800b68e:	0011      	movs	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b690:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b692:	f7f7 ffc3 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b696:	200f      	movs	r0, #15
 800b698:	e7e7      	b.n	800b66a <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM3)
 800b69a:	4a1e      	ldr	r2, [pc, #120]	; (800b714 <HAL_TIM_Base_MspInit+0xe4>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d10f      	bne.n	800b6c0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b6a0:	2002      	movs	r0, #2
 800b6a2:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <HAL_TIM_Base_MspInit+0xe0>)
 800b6a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b6a6:	4301      	orrs	r1, r0
 800b6a8:	63d1      	str	r1, [r2, #60]	; 0x3c
 800b6aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b6ac:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b6ae:	4003      	ands	r3, r0
 800b6b0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b6b2:	300e      	adds	r0, #14
 800b6b4:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b6b6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b6b8:	f7f7 ffb0 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b6bc:	2010      	movs	r0, #16
 800b6be:	e7d4      	b.n	800b66a <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM6)
 800b6c0:	4a15      	ldr	r2, [pc, #84]	; (800b718 <HAL_TIM_Base_MspInit+0xe8>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d10f      	bne.n	800b6e6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b6c6:	2010      	movs	r0, #16
 800b6c8:	4a11      	ldr	r2, [pc, #68]	; (800b710 <HAL_TIM_Base_MspInit+0xe0>)
 800b6ca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b6cc:	4301      	orrs	r1, r0
 800b6ce:	63d1      	str	r1, [r2, #60]	; 0x3c
 800b6d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800b6d2:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b6d4:	4003      	ands	r3, r0
 800b6d6:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800b6d8:	3001      	adds	r0, #1
 800b6da:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b6dc:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800b6de:	f7f7 ff9d 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800b6e2:	2011      	movs	r0, #17
 800b6e4:	e7c1      	b.n	800b66a <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM7)
 800b6e6:	4a0d      	ldr	r2, [pc, #52]	; (800b71c <HAL_TIM_Base_MspInit+0xec>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d1c0      	bne.n	800b66e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b6ec:	2020      	movs	r0, #32
 800b6ee:	4a08      	ldr	r2, [pc, #32]	; (800b710 <HAL_TIM_Base_MspInit+0xe0>)
 800b6f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b6f2:	4301      	orrs	r1, r0
 800b6f4:	63d1      	str	r1, [r2, #60]	; 0x3c
 800b6f6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800b6f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b6fa:	4003      	ands	r3, r0
 800b6fc:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800b6fe:	380e      	subs	r0, #14
 800b700:	0011      	movs	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b702:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800b704:	f7f7 ff8a 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800b708:	2012      	movs	r0, #18
 800b70a:	e7ae      	b.n	800b66a <HAL_TIM_Base_MspInit+0x3a>
 800b70c:	40012c00 	.word	0x40012c00
 800b710:	40021000 	.word	0x40021000
 800b714:	40000400 	.word	0x40000400
 800b718:	40001000 	.word	0x40001000
 800b71c:	40001400 	.word	0x40001400

0800b720 <MX_UCPD1_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800b720:	2080      	movs	r0, #128	; 0x80
 800b722:	4a06      	ldr	r2, [pc, #24]	; (800b73c <MX_UCPD1_Init+0x1c>)
 800b724:	0480      	lsls	r0, r0, #18
 800b726:	6bd1      	ldr	r1, [r2, #60]	; 0x3c

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 800b728:	b082      	sub	sp, #8
 800b72a:	4301      	orrs	r1, r0
 800b72c:	63d1      	str	r1, [r2, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800b72e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800b730:	4003      	ands	r3, r0
 800b732:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800b734:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);

}
 800b736:	b002      	add	sp, #8
 800b738:	4770      	bx	lr
 800b73a:	46c0      	nop			; (mov r8, r8)
 800b73c:	40021000 	.word	0x40021000

0800b740 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b740:	b510      	push	{r4, lr}

  huart2.Instance = USART2;
 800b742:	4b18      	ldr	r3, [pc, #96]	; (800b7a4 <MX_USART2_UART_Init+0x64>)
 800b744:	4c18      	ldr	r4, [pc, #96]	; (800b7a8 <MX_USART2_UART_Init+0x68>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b746:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 800b748:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 800b74a:	23e1      	movs	r3, #225	; 0xe1
 800b74c:	025b      	lsls	r3, r3, #9
 800b74e:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b750:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b752:	0020      	movs	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b754:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b756:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b758:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b75a:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b75c:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b75e:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b760:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b762:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b764:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b766:	f7fb fb2d 	bl	8006dc4 <HAL_UART_Init>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d001      	beq.n	800b772 <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
 800b76e:	f7fd f87d 	bl	800886c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b772:	2100      	movs	r1, #0
 800b774:	0020      	movs	r0, r4
 800b776:	f7fb fbb8 	bl	8006eea <HAL_UARTEx_SetTxFifoThreshold>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d001      	beq.n	800b782 <MX_USART2_UART_Init+0x42>
  {
    Error_Handler();
 800b77e:	f7fd f875 	bl	800886c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b782:	2100      	movs	r1, #0
 800b784:	0020      	movs	r0, r4
 800b786:	f7fb fbd1 	bl	8006f2c <HAL_UARTEx_SetRxFifoThreshold>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d001      	beq.n	800b792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b78e:	f7fd f86d 	bl	800886c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800b792:	0020      	movs	r0, r4
 800b794:	f7fb fb8b 	bl	8006eae <HAL_UARTEx_EnableFifoMode>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d001      	beq.n	800b7a0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800b79c:	f7fd f866 	bl	800886c <Error_Handler>
  }

}
 800b7a0:	bd10      	pop	{r4, pc}
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	40004400 	.word	0x40004400
 800b7a8:	200048cc 	.word	0x200048cc

0800b7ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	0004      	movs	r4, r0
 800b7b0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b2:	2214      	movs	r2, #20
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	a803      	add	r0, sp, #12
 800b7b8:	f000 f89f 	bl	800b8fa <memset>
  if(uartHandle->Instance==USART2)
 800b7bc:	4b14      	ldr	r3, [pc, #80]	; (800b810 <HAL_UART_MspInit+0x64>)
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d123      	bne.n	800b80c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b7c4:	2080      	movs	r0, #128	; 0x80
 800b7c6:	4b13      	ldr	r3, [pc, #76]	; (800b814 <HAL_UART_MspInit+0x68>)
 800b7c8:	0280      	lsls	r0, r0, #10
 800b7ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b7cc:	4301      	orrs	r1, r0
 800b7ce:	63d9      	str	r1, [r3, #60]	; 0x3c
 800b7d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7d2:	4002      	ands	r2, r0
 800b7d4:	9201      	str	r2, [sp, #4]
 800b7d6:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d8:	2201      	movs	r2, #1
 800b7da:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7dc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7de:	4311      	orrs	r1, r2
 800b7e0:	6359      	str	r1, [r3, #52]	; 0x34
 800b7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7e4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	9302      	str	r3, [sp, #8]
 800b7ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b7ec:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7ee:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b7f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f2:	3b0a      	subs	r3, #10
 800b7f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800b7f6:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f7f8 f8f0 	bl	80039dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	201c      	movs	r0, #28
 800b800:	0011      	movs	r1, r2
 800b802:	f7f7 ff0b 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b806:	201c      	movs	r0, #28
 800b808:	f7f7 ff38 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b80c:	b008      	add	sp, #32
 800b80e:	bd10      	pop	{r4, pc}
 800b810:	40004400 	.word	0x40004400
 800b814:	40021000 	.word	0x40021000

0800b818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b818:	480d      	ldr	r0, [pc, #52]	; (800b850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b81a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800b81c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800b81e:	e003      	b.n	800b828 <LoopCopyDataInit>

0800b820 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800b822:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800b824:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800b826:	3104      	adds	r1, #4

0800b828 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800b828:	480b      	ldr	r0, [pc, #44]	; (800b858 <LoopForever+0xa>)
  ldr r3, =_edata
 800b82a:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <LoopForever+0xe>)
  adds r2, r0, r1
 800b82c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800b82e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800b830:	d3f6      	bcc.n	800b820 <CopyDataInit>
  ldr r2, =_sbss
 800b832:	4a0b      	ldr	r2, [pc, #44]	; (800b860 <LoopForever+0x12>)
  b LoopFillZerobss
 800b834:	e002      	b.n	800b83c <LoopFillZerobss>

0800b836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800b836:	2300      	movs	r3, #0
  str  r3, [r2]
 800b838:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b83a:	3204      	adds	r2, #4

0800b83c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800b83c:	4b09      	ldr	r3, [pc, #36]	; (800b864 <LoopForever+0x16>)
  cmp r2, r3
 800b83e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800b840:	d3f9      	bcc.n	800b836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800b842:	f7ff fdd1 	bl	800b3e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800b846:	f000 f817 	bl	800b878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b84a:	f7fc fad1 	bl	8007df0 <main>

0800b84e <LoopForever>:

LoopForever:
    b LoopForever
 800b84e:	e7fe      	b.n	800b84e <LoopForever>
  ldr   r0, =_estack
 800b850:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800b854:	08010fc8 	.word	0x08010fc8
  ldr r0, =_sdata
 800b858:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800b85c:	200005e8 	.word	0x200005e8
  ldr r2, =_sbss
 800b860:	200005e8 	.word	0x200005e8
  ldr r3, = _ebss
 800b864:	2000495c 	.word	0x2000495c

0800b868 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b868:	e7fe      	b.n	800b868 <CEC_IRQHandler>
	...

0800b86c <__errno>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <__errno+0x8>)
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	4770      	bx	lr
 800b872:	46c0      	nop			; (mov r8, r8)
 800b874:	20000414 	.word	0x20000414

0800b878 <__libc_init_array>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	2600      	movs	r6, #0
 800b87c:	4d0c      	ldr	r5, [pc, #48]	; (800b8b0 <__libc_init_array+0x38>)
 800b87e:	4c0d      	ldr	r4, [pc, #52]	; (800b8b4 <__libc_init_array+0x3c>)
 800b880:	1b64      	subs	r4, r4, r5
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	42a6      	cmp	r6, r4
 800b886:	d109      	bne.n	800b89c <__libc_init_array+0x24>
 800b888:	2600      	movs	r6, #0
 800b88a:	f002 fa53 	bl	800dd34 <_init>
 800b88e:	4d0a      	ldr	r5, [pc, #40]	; (800b8b8 <__libc_init_array+0x40>)
 800b890:	4c0a      	ldr	r4, [pc, #40]	; (800b8bc <__libc_init_array+0x44>)
 800b892:	1b64      	subs	r4, r4, r5
 800b894:	10a4      	asrs	r4, r4, #2
 800b896:	42a6      	cmp	r6, r4
 800b898:	d105      	bne.n	800b8a6 <__libc_init_array+0x2e>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	00b3      	lsls	r3, r6, #2
 800b89e:	58eb      	ldr	r3, [r5, r3]
 800b8a0:	4798      	blx	r3
 800b8a2:	3601      	adds	r6, #1
 800b8a4:	e7ee      	b.n	800b884 <__libc_init_array+0xc>
 800b8a6:	00b3      	lsls	r3, r6, #2
 800b8a8:	58eb      	ldr	r3, [r5, r3]
 800b8aa:	4798      	blx	r3
 800b8ac:	3601      	adds	r6, #1
 800b8ae:	e7f2      	b.n	800b896 <__libc_init_array+0x1e>
 800b8b0:	08010fc0 	.word	0x08010fc0
 800b8b4:	08010fc0 	.word	0x08010fc0
 800b8b8:	08010fc0 	.word	0x08010fc0
 800b8bc:	08010fc4 	.word	0x08010fc4

0800b8c0 <malloc>:
 800b8c0:	b510      	push	{r4, lr}
 800b8c2:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <malloc+0x10>)
 800b8c4:	0001      	movs	r1, r0
 800b8c6:	6818      	ldr	r0, [r3, #0]
 800b8c8:	f000 f86a 	bl	800b9a0 <_malloc_r>
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	46c0      	nop			; (mov r8, r8)
 800b8d0:	20000414 	.word	0x20000414

0800b8d4 <free>:
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	4b03      	ldr	r3, [pc, #12]	; (800b8e4 <free+0x10>)
 800b8d8:	0001      	movs	r1, r0
 800b8da:	6818      	ldr	r0, [r3, #0]
 800b8dc:	f000 f816 	bl	800b90c <_free_r>
 800b8e0:	bd10      	pop	{r4, pc}
 800b8e2:	46c0      	nop			; (mov r8, r8)
 800b8e4:	20000414 	.word	0x20000414

0800b8e8 <memcpy>:
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d100      	bne.n	800b8f2 <memcpy+0xa>
 800b8f0:	bd10      	pop	{r4, pc}
 800b8f2:	5ccc      	ldrb	r4, [r1, r3]
 800b8f4:	54c4      	strb	r4, [r0, r3]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	e7f8      	b.n	800b8ec <memcpy+0x4>

0800b8fa <memset>:
 800b8fa:	0003      	movs	r3, r0
 800b8fc:	1882      	adds	r2, r0, r2
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d100      	bne.n	800b904 <memset+0xa>
 800b902:	4770      	bx	lr
 800b904:	7019      	strb	r1, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	e7f9      	b.n	800b8fe <memset+0x4>
	...

0800b90c <_free_r>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	0005      	movs	r5, r0
 800b910:	2900      	cmp	r1, #0
 800b912:	d010      	beq.n	800b936 <_free_r+0x2a>
 800b914:	1f0c      	subs	r4, r1, #4
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	da00      	bge.n	800b91e <_free_r+0x12>
 800b91c:	18e4      	adds	r4, r4, r3
 800b91e:	0028      	movs	r0, r5
 800b920:	f000 f97e 	bl	800bc20 <__malloc_lock>
 800b924:	4a1d      	ldr	r2, [pc, #116]	; (800b99c <_free_r+0x90>)
 800b926:	6813      	ldr	r3, [r2, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d105      	bne.n	800b938 <_free_r+0x2c>
 800b92c:	6063      	str	r3, [r4, #4]
 800b92e:	6014      	str	r4, [r2, #0]
 800b930:	0028      	movs	r0, r5
 800b932:	f000 f976 	bl	800bc22 <__malloc_unlock>
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	42a3      	cmp	r3, r4
 800b93a:	d909      	bls.n	800b950 <_free_r+0x44>
 800b93c:	6821      	ldr	r1, [r4, #0]
 800b93e:	1860      	adds	r0, r4, r1
 800b940:	4283      	cmp	r3, r0
 800b942:	d1f3      	bne.n	800b92c <_free_r+0x20>
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	1841      	adds	r1, r0, r1
 800b94a:	6021      	str	r1, [r4, #0]
 800b94c:	e7ee      	b.n	800b92c <_free_r+0x20>
 800b94e:	0013      	movs	r3, r2
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	2a00      	cmp	r2, #0
 800b954:	d001      	beq.n	800b95a <_free_r+0x4e>
 800b956:	42a2      	cmp	r2, r4
 800b958:	d9f9      	bls.n	800b94e <_free_r+0x42>
 800b95a:	6819      	ldr	r1, [r3, #0]
 800b95c:	1858      	adds	r0, r3, r1
 800b95e:	42a0      	cmp	r0, r4
 800b960:	d10b      	bne.n	800b97a <_free_r+0x6e>
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	1809      	adds	r1, r1, r0
 800b966:	1858      	adds	r0, r3, r1
 800b968:	6019      	str	r1, [r3, #0]
 800b96a:	4282      	cmp	r2, r0
 800b96c:	d1e0      	bne.n	800b930 <_free_r+0x24>
 800b96e:	6810      	ldr	r0, [r2, #0]
 800b970:	6852      	ldr	r2, [r2, #4]
 800b972:	1841      	adds	r1, r0, r1
 800b974:	6019      	str	r1, [r3, #0]
 800b976:	605a      	str	r2, [r3, #4]
 800b978:	e7da      	b.n	800b930 <_free_r+0x24>
 800b97a:	42a0      	cmp	r0, r4
 800b97c:	d902      	bls.n	800b984 <_free_r+0x78>
 800b97e:	230c      	movs	r3, #12
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	e7d5      	b.n	800b930 <_free_r+0x24>
 800b984:	6821      	ldr	r1, [r4, #0]
 800b986:	1860      	adds	r0, r4, r1
 800b988:	4282      	cmp	r2, r0
 800b98a:	d103      	bne.n	800b994 <_free_r+0x88>
 800b98c:	6810      	ldr	r0, [r2, #0]
 800b98e:	6852      	ldr	r2, [r2, #4]
 800b990:	1841      	adds	r1, r0, r1
 800b992:	6021      	str	r1, [r4, #0]
 800b994:	6062      	str	r2, [r4, #4]
 800b996:	605c      	str	r4, [r3, #4]
 800b998:	e7ca      	b.n	800b930 <_free_r+0x24>
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	20000a30 	.word	0x20000a30

0800b9a0 <_malloc_r>:
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	b570      	push	{r4, r5, r6, lr}
 800b9a4:	1ccd      	adds	r5, r1, #3
 800b9a6:	439d      	bics	r5, r3
 800b9a8:	3508      	adds	r5, #8
 800b9aa:	0006      	movs	r6, r0
 800b9ac:	2d0c      	cmp	r5, #12
 800b9ae:	d21e      	bcs.n	800b9ee <_malloc_r+0x4e>
 800b9b0:	250c      	movs	r5, #12
 800b9b2:	42a9      	cmp	r1, r5
 800b9b4:	d81d      	bhi.n	800b9f2 <_malloc_r+0x52>
 800b9b6:	0030      	movs	r0, r6
 800b9b8:	f000 f932 	bl	800bc20 <__malloc_lock>
 800b9bc:	4a25      	ldr	r2, [pc, #148]	; (800ba54 <_malloc_r+0xb4>)
 800b9be:	6814      	ldr	r4, [r2, #0]
 800b9c0:	0021      	movs	r1, r4
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d119      	bne.n	800b9fa <_malloc_r+0x5a>
 800b9c6:	4c24      	ldr	r4, [pc, #144]	; (800ba58 <_malloc_r+0xb8>)
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d103      	bne.n	800b9d6 <_malloc_r+0x36>
 800b9ce:	0030      	movs	r0, r6
 800b9d0:	f000 f844 	bl	800ba5c <_sbrk_r>
 800b9d4:	6020      	str	r0, [r4, #0]
 800b9d6:	0029      	movs	r1, r5
 800b9d8:	0030      	movs	r0, r6
 800b9da:	f000 f83f 	bl	800ba5c <_sbrk_r>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d12c      	bne.n	800ba3c <_malloc_r+0x9c>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	0030      	movs	r0, r6
 800b9e6:	6033      	str	r3, [r6, #0]
 800b9e8:	f000 f91b 	bl	800bc22 <__malloc_unlock>
 800b9ec:	e003      	b.n	800b9f6 <_malloc_r+0x56>
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	dadf      	bge.n	800b9b2 <_malloc_r+0x12>
 800b9f2:	230c      	movs	r3, #12
 800b9f4:	6033      	str	r3, [r6, #0]
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	bd70      	pop	{r4, r5, r6, pc}
 800b9fa:	680b      	ldr	r3, [r1, #0]
 800b9fc:	1b5b      	subs	r3, r3, r5
 800b9fe:	d41a      	bmi.n	800ba36 <_malloc_r+0x96>
 800ba00:	2b0b      	cmp	r3, #11
 800ba02:	d903      	bls.n	800ba0c <_malloc_r+0x6c>
 800ba04:	600b      	str	r3, [r1, #0]
 800ba06:	18cc      	adds	r4, r1, r3
 800ba08:	6025      	str	r5, [r4, #0]
 800ba0a:	e003      	b.n	800ba14 <_malloc_r+0x74>
 800ba0c:	428c      	cmp	r4, r1
 800ba0e:	d10e      	bne.n	800ba2e <_malloc_r+0x8e>
 800ba10:	6863      	ldr	r3, [r4, #4]
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	0030      	movs	r0, r6
 800ba16:	f000 f904 	bl	800bc22 <__malloc_unlock>
 800ba1a:	0020      	movs	r0, r4
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	300b      	adds	r0, #11
 800ba20:	1d23      	adds	r3, r4, #4
 800ba22:	4390      	bics	r0, r2
 800ba24:	1ac3      	subs	r3, r0, r3
 800ba26:	d0e7      	beq.n	800b9f8 <_malloc_r+0x58>
 800ba28:	425a      	negs	r2, r3
 800ba2a:	50e2      	str	r2, [r4, r3]
 800ba2c:	e7e4      	b.n	800b9f8 <_malloc_r+0x58>
 800ba2e:	684b      	ldr	r3, [r1, #4]
 800ba30:	6063      	str	r3, [r4, #4]
 800ba32:	000c      	movs	r4, r1
 800ba34:	e7ee      	b.n	800ba14 <_malloc_r+0x74>
 800ba36:	000c      	movs	r4, r1
 800ba38:	6849      	ldr	r1, [r1, #4]
 800ba3a:	e7c2      	b.n	800b9c2 <_malloc_r+0x22>
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	1cc4      	adds	r4, r0, #3
 800ba40:	439c      	bics	r4, r3
 800ba42:	42a0      	cmp	r0, r4
 800ba44:	d0e0      	beq.n	800ba08 <_malloc_r+0x68>
 800ba46:	1a21      	subs	r1, r4, r0
 800ba48:	0030      	movs	r0, r6
 800ba4a:	f000 f807 	bl	800ba5c <_sbrk_r>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d1da      	bne.n	800ba08 <_malloc_r+0x68>
 800ba52:	e7c6      	b.n	800b9e2 <_malloc_r+0x42>
 800ba54:	20000a30 	.word	0x20000a30
 800ba58:	20000a34 	.word	0x20000a34

0800ba5c <_sbrk_r>:
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	4c06      	ldr	r4, [pc, #24]	; (800ba7c <_sbrk_r+0x20>)
 800ba62:	0005      	movs	r5, r0
 800ba64:	0008      	movs	r0, r1
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	f7ff fca4 	bl	800b3b4 <_sbrk>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d103      	bne.n	800ba78 <_sbrk_r+0x1c>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d000      	beq.n	800ba78 <_sbrk_r+0x1c>
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	bd70      	pop	{r4, r5, r6, pc}
 800ba7a:	46c0      	nop			; (mov r8, r8)
 800ba7c:	20004958 	.word	0x20004958

0800ba80 <siprintf>:
 800ba80:	b40e      	push	{r1, r2, r3}
 800ba82:	b510      	push	{r4, lr}
 800ba84:	b09d      	sub	sp, #116	; 0x74
 800ba86:	a902      	add	r1, sp, #8
 800ba88:	9002      	str	r0, [sp, #8]
 800ba8a:	6108      	str	r0, [r1, #16]
 800ba8c:	480b      	ldr	r0, [pc, #44]	; (800babc <siprintf+0x3c>)
 800ba8e:	2482      	movs	r4, #130	; 0x82
 800ba90:	6088      	str	r0, [r1, #8]
 800ba92:	6148      	str	r0, [r1, #20]
 800ba94:	2001      	movs	r0, #1
 800ba96:	4240      	negs	r0, r0
 800ba98:	ab1f      	add	r3, sp, #124	; 0x7c
 800ba9a:	81c8      	strh	r0, [r1, #14]
 800ba9c:	4808      	ldr	r0, [pc, #32]	; (800bac0 <siprintf+0x40>)
 800ba9e:	cb04      	ldmia	r3!, {r2}
 800baa0:	00a4      	lsls	r4, r4, #2
 800baa2:	6800      	ldr	r0, [r0, #0]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	818c      	strh	r4, [r1, #12]
 800baa8:	f000 f91e 	bl	800bce8 <_svfiprintf_r>
 800baac:	2300      	movs	r3, #0
 800baae:	9a02      	ldr	r2, [sp, #8]
 800bab0:	7013      	strb	r3, [r2, #0]
 800bab2:	b01d      	add	sp, #116	; 0x74
 800bab4:	bc10      	pop	{r4}
 800bab6:	bc08      	pop	{r3}
 800bab8:	b003      	add	sp, #12
 800baba:	4718      	bx	r3
 800babc:	7fffffff 	.word	0x7fffffff
 800bac0:	20000414 	.word	0x20000414

0800bac4 <siscanf>:
 800bac4:	b40e      	push	{r1, r2, r3}
 800bac6:	2381      	movs	r3, #129	; 0x81
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	b09d      	sub	sp, #116	; 0x74
 800bacc:	ac02      	add	r4, sp, #8
 800bace:	ad21      	add	r5, sp, #132	; 0x84
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	cd40      	ldmia	r5!, {r6}
 800bad4:	81a3      	strh	r3, [r4, #12]
 800bad6:	9002      	str	r0, [sp, #8]
 800bad8:	9006      	str	r0, [sp, #24]
 800bada:	f7f4 fb1d 	bl	8000118 <strlen>
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <siscanf+0x48>)
 800bae0:	6060      	str	r0, [r4, #4]
 800bae2:	6263      	str	r3, [r4, #36]	; 0x24
 800bae4:	2300      	movs	r3, #0
 800bae6:	6160      	str	r0, [r4, #20]
 800bae8:	4809      	ldr	r0, [pc, #36]	; (800bb10 <siscanf+0x4c>)
 800baea:	6363      	str	r3, [r4, #52]	; 0x34
 800baec:	64a3      	str	r3, [r4, #72]	; 0x48
 800baee:	3b01      	subs	r3, #1
 800baf0:	81e3      	strh	r3, [r4, #14]
 800baf2:	0032      	movs	r2, r6
 800baf4:	002b      	movs	r3, r5
 800baf6:	0021      	movs	r1, r4
 800baf8:	6800      	ldr	r0, [r0, #0]
 800bafa:	9501      	str	r5, [sp, #4]
 800bafc:	f000 fa54 	bl	800bfa8 <__ssvfiscanf_r>
 800bb00:	b01d      	add	sp, #116	; 0x74
 800bb02:	bc70      	pop	{r4, r5, r6}
 800bb04:	bc08      	pop	{r3}
 800bb06:	b003      	add	sp, #12
 800bb08:	4718      	bx	r3
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	0800bb15 	.word	0x0800bb15
 800bb10:	20000414 	.word	0x20000414

0800bb14 <__seofread>:
 800bb14:	2000      	movs	r0, #0
 800bb16:	4770      	bx	lr

0800bb18 <strchr>:
 800bb18:	b2c9      	uxtb	r1, r1
 800bb1a:	7803      	ldrb	r3, [r0, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <strchr+0x12>
 800bb20:	4299      	cmp	r1, r3
 800bb22:	d100      	bne.n	800bb26 <strchr+0xe>
 800bb24:	4770      	bx	lr
 800bb26:	3001      	adds	r0, #1
 800bb28:	e7f7      	b.n	800bb1a <strchr+0x2>
 800bb2a:	424b      	negs	r3, r1
 800bb2c:	4159      	adcs	r1, r3
 800bb2e:	4249      	negs	r1, r1
 800bb30:	4008      	ands	r0, r1
 800bb32:	e7f7      	b.n	800bb24 <strchr+0xc>

0800bb34 <strcpy>:
 800bb34:	1c03      	adds	r3, r0, #0
 800bb36:	780a      	ldrb	r2, [r1, #0]
 800bb38:	3101      	adds	r1, #1
 800bb3a:	701a      	strb	r2, [r3, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	2a00      	cmp	r2, #0
 800bb40:	d1f9      	bne.n	800bb36 <strcpy+0x2>
 800bb42:	4770      	bx	lr

0800bb44 <strstr>:
 800bb44:	b510      	push	{r4, lr}
 800bb46:	0002      	movs	r2, r0
 800bb48:	7800      	ldrb	r0, [r0, #0]
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d104      	bne.n	800bb58 <strstr+0x14>
 800bb4e:	7809      	ldrb	r1, [r1, #0]
 800bb50:	2900      	cmp	r1, #0
 800bb52:	d00d      	beq.n	800bb70 <strstr+0x2c>
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	3201      	adds	r2, #1
 800bb58:	7810      	ldrb	r0, [r2, #0]
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d0fa      	beq.n	800bb54 <strstr+0x10>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	5cc8      	ldrb	r0, [r1, r3]
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d004      	beq.n	800bb70 <strstr+0x2c>
 800bb66:	5cd4      	ldrb	r4, [r2, r3]
 800bb68:	4284      	cmp	r4, r0
 800bb6a:	d1f4      	bne.n	800bb56 <strstr+0x12>
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	e7f7      	b.n	800bb60 <strstr+0x1c>
 800bb70:	0010      	movs	r0, r2
 800bb72:	e7ef      	b.n	800bb54 <strstr+0x10>

0800bb74 <strtok>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <strtok+0x4c>)
 800bb78:	0006      	movs	r6, r0
 800bb7a:	681d      	ldr	r5, [r3, #0]
 800bb7c:	000f      	movs	r7, r1
 800bb7e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800bb80:	2c00      	cmp	r4, #0
 800bb82:	d116      	bne.n	800bbb2 <strtok+0x3e>
 800bb84:	2050      	movs	r0, #80	; 0x50
 800bb86:	f7ff fe9b 	bl	800b8c0 <malloc>
 800bb8a:	65a8      	str	r0, [r5, #88]	; 0x58
 800bb8c:	6004      	str	r4, [r0, #0]
 800bb8e:	6044      	str	r4, [r0, #4]
 800bb90:	6084      	str	r4, [r0, #8]
 800bb92:	60c4      	str	r4, [r0, #12]
 800bb94:	6104      	str	r4, [r0, #16]
 800bb96:	6144      	str	r4, [r0, #20]
 800bb98:	6184      	str	r4, [r0, #24]
 800bb9a:	6284      	str	r4, [r0, #40]	; 0x28
 800bb9c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800bb9e:	6304      	str	r4, [r0, #48]	; 0x30
 800bba0:	6344      	str	r4, [r0, #52]	; 0x34
 800bba2:	6384      	str	r4, [r0, #56]	; 0x38
 800bba4:	63c4      	str	r4, [r0, #60]	; 0x3c
 800bba6:	6404      	str	r4, [r0, #64]	; 0x40
 800bba8:	6444      	str	r4, [r0, #68]	; 0x44
 800bbaa:	6484      	str	r4, [r0, #72]	; 0x48
 800bbac:	64c4      	str	r4, [r0, #76]	; 0x4c
 800bbae:	7704      	strb	r4, [r0, #28]
 800bbb0:	6244      	str	r4, [r0, #36]	; 0x24
 800bbb2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800bbb4:	0039      	movs	r1, r7
 800bbb6:	0030      	movs	r0, r6
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f000 f803 	bl	800bbc4 <__strtok_r>
 800bbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc0:	20000414 	.word	0x20000414

0800bbc4 <__strtok_r>:
 800bbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d104      	bne.n	800bbd4 <__strtok_r+0x10>
 800bbca:	6810      	ldr	r0, [r2, #0]
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d101      	bne.n	800bbd4 <__strtok_r+0x10>
 800bbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd2:	0020      	movs	r0, r4
 800bbd4:	000e      	movs	r6, r1
 800bbd6:	7805      	ldrb	r5, [r0, #0]
 800bbd8:	1c44      	adds	r4, r0, #1
 800bbda:	7837      	ldrb	r7, [r6, #0]
 800bbdc:	2f00      	cmp	r7, #0
 800bbde:	d104      	bne.n	800bbea <__strtok_r+0x26>
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	d110      	bne.n	800bc06 <__strtok_r+0x42>
 800bbe4:	6015      	str	r5, [r2, #0]
 800bbe6:	0028      	movs	r0, r5
 800bbe8:	e7f2      	b.n	800bbd0 <__strtok_r+0xc>
 800bbea:	3601      	adds	r6, #1
 800bbec:	42bd      	cmp	r5, r7
 800bbee:	d1f4      	bne.n	800bbda <__strtok_r+0x16>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1ee      	bne.n	800bbd2 <__strtok_r+0xe>
 800bbf4:	6014      	str	r4, [r2, #0]
 800bbf6:	7003      	strb	r3, [r0, #0]
 800bbf8:	e7ea      	b.n	800bbd0 <__strtok_r+0xc>
 800bbfa:	0033      	movs	r3, r6
 800bbfc:	e00e      	b.n	800bc1c <__strtok_r+0x58>
 800bbfe:	3501      	adds	r5, #1
 800bc00:	001c      	movs	r4, r3
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	d102      	bne.n	800bc0c <__strtok_r+0x48>
 800bc06:	000d      	movs	r5, r1
 800bc08:	7826      	ldrb	r6, [r4, #0]
 800bc0a:	1c63      	adds	r3, r4, #1
 800bc0c:	782f      	ldrb	r7, [r5, #0]
 800bc0e:	42be      	cmp	r6, r7
 800bc10:	d1f5      	bne.n	800bbfe <__strtok_r+0x3a>
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	d0f1      	beq.n	800bbfa <__strtok_r+0x36>
 800bc16:	2400      	movs	r4, #0
 800bc18:	1e59      	subs	r1, r3, #1
 800bc1a:	700c      	strb	r4, [r1, #0]
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	e7d7      	b.n	800bbd0 <__strtok_r+0xc>

0800bc20 <__malloc_lock>:
 800bc20:	4770      	bx	lr

0800bc22 <__malloc_unlock>:
 800bc22:	4770      	bx	lr

0800bc24 <__ssputs_r>:
 800bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc26:	688e      	ldr	r6, [r1, #8]
 800bc28:	b085      	sub	sp, #20
 800bc2a:	0007      	movs	r7, r0
 800bc2c:	000c      	movs	r4, r1
 800bc2e:	9203      	str	r2, [sp, #12]
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	429e      	cmp	r6, r3
 800bc34:	d839      	bhi.n	800bcaa <__ssputs_r+0x86>
 800bc36:	2390      	movs	r3, #144	; 0x90
 800bc38:	898a      	ldrh	r2, [r1, #12]
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	421a      	tst	r2, r3
 800bc3e:	d034      	beq.n	800bcaa <__ssputs_r+0x86>
 800bc40:	2503      	movs	r5, #3
 800bc42:	6909      	ldr	r1, [r1, #16]
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	1a5b      	subs	r3, r3, r1
 800bc48:	9302      	str	r3, [sp, #8]
 800bc4a:	6963      	ldr	r3, [r4, #20]
 800bc4c:	9802      	ldr	r0, [sp, #8]
 800bc4e:	435d      	muls	r5, r3
 800bc50:	0feb      	lsrs	r3, r5, #31
 800bc52:	195d      	adds	r5, r3, r5
 800bc54:	9b01      	ldr	r3, [sp, #4]
 800bc56:	106d      	asrs	r5, r5, #1
 800bc58:	3301      	adds	r3, #1
 800bc5a:	181b      	adds	r3, r3, r0
 800bc5c:	42ab      	cmp	r3, r5
 800bc5e:	d900      	bls.n	800bc62 <__ssputs_r+0x3e>
 800bc60:	001d      	movs	r5, r3
 800bc62:	0553      	lsls	r3, r2, #21
 800bc64:	d532      	bpl.n	800bccc <__ssputs_r+0xa8>
 800bc66:	0029      	movs	r1, r5
 800bc68:	0038      	movs	r0, r7
 800bc6a:	f7ff fe99 	bl	800b9a0 <_malloc_r>
 800bc6e:	1e06      	subs	r6, r0, #0
 800bc70:	d109      	bne.n	800bc86 <__ssputs_r+0x62>
 800bc72:	230c      	movs	r3, #12
 800bc74:	603b      	str	r3, [r7, #0]
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	2001      	movs	r0, #1
 800bc7a:	89a2      	ldrh	r2, [r4, #12]
 800bc7c:	4240      	negs	r0, r0
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	b005      	add	sp, #20
 800bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc86:	9a02      	ldr	r2, [sp, #8]
 800bc88:	6921      	ldr	r1, [r4, #16]
 800bc8a:	f7ff fe2d 	bl	800b8e8 <memcpy>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	4a14      	ldr	r2, [pc, #80]	; (800bce4 <__ssputs_r+0xc0>)
 800bc92:	401a      	ands	r2, r3
 800bc94:	2380      	movs	r3, #128	; 0x80
 800bc96:	4313      	orrs	r3, r2
 800bc98:	81a3      	strh	r3, [r4, #12]
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	6126      	str	r6, [r4, #16]
 800bc9e:	18f6      	adds	r6, r6, r3
 800bca0:	6026      	str	r6, [r4, #0]
 800bca2:	6165      	str	r5, [r4, #20]
 800bca4:	9e01      	ldr	r6, [sp, #4]
 800bca6:	1aed      	subs	r5, r5, r3
 800bca8:	60a5      	str	r5, [r4, #8]
 800bcaa:	9b01      	ldr	r3, [sp, #4]
 800bcac:	42b3      	cmp	r3, r6
 800bcae:	d200      	bcs.n	800bcb2 <__ssputs_r+0x8e>
 800bcb0:	001e      	movs	r6, r3
 800bcb2:	0032      	movs	r2, r6
 800bcb4:	9903      	ldr	r1, [sp, #12]
 800bcb6:	6820      	ldr	r0, [r4, #0]
 800bcb8:	f000 ffb5 	bl	800cc26 <memmove>
 800bcbc:	68a3      	ldr	r3, [r4, #8]
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	1b9b      	subs	r3, r3, r6
 800bcc2:	60a3      	str	r3, [r4, #8]
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	199e      	adds	r6, r3, r6
 800bcc8:	6026      	str	r6, [r4, #0]
 800bcca:	e7da      	b.n	800bc82 <__ssputs_r+0x5e>
 800bccc:	002a      	movs	r2, r5
 800bcce:	0038      	movs	r0, r7
 800bcd0:	f000 ffbb 	bl	800cc4a <_realloc_r>
 800bcd4:	1e06      	subs	r6, r0, #0
 800bcd6:	d1e0      	bne.n	800bc9a <__ssputs_r+0x76>
 800bcd8:	6921      	ldr	r1, [r4, #16]
 800bcda:	0038      	movs	r0, r7
 800bcdc:	f7ff fe16 	bl	800b90c <_free_r>
 800bce0:	e7c7      	b.n	800bc72 <__ssputs_r+0x4e>
 800bce2:	46c0      	nop			; (mov r8, r8)
 800bce4:	fffffb7f 	.word	0xfffffb7f

0800bce8 <_svfiprintf_r>:
 800bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcea:	b09f      	sub	sp, #124	; 0x7c
 800bcec:	9002      	str	r0, [sp, #8]
 800bcee:	9305      	str	r3, [sp, #20]
 800bcf0:	898b      	ldrh	r3, [r1, #12]
 800bcf2:	000f      	movs	r7, r1
 800bcf4:	0016      	movs	r6, r2
 800bcf6:	061b      	lsls	r3, r3, #24
 800bcf8:	d511      	bpl.n	800bd1e <_svfiprintf_r+0x36>
 800bcfa:	690b      	ldr	r3, [r1, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10e      	bne.n	800bd1e <_svfiprintf_r+0x36>
 800bd00:	2140      	movs	r1, #64	; 0x40
 800bd02:	f7ff fe4d 	bl	800b9a0 <_malloc_r>
 800bd06:	6038      	str	r0, [r7, #0]
 800bd08:	6138      	str	r0, [r7, #16]
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d105      	bne.n	800bd1a <_svfiprintf_r+0x32>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	9a02      	ldr	r2, [sp, #8]
 800bd12:	3801      	subs	r0, #1
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	b01f      	add	sp, #124	; 0x7c
 800bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd1a:	2340      	movs	r3, #64	; 0x40
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	ad06      	add	r5, sp, #24
 800bd22:	616b      	str	r3, [r5, #20]
 800bd24:	3320      	adds	r3, #32
 800bd26:	766b      	strb	r3, [r5, #25]
 800bd28:	3310      	adds	r3, #16
 800bd2a:	76ab      	strb	r3, [r5, #26]
 800bd2c:	0034      	movs	r4, r6
 800bd2e:	7823      	ldrb	r3, [r4, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d147      	bne.n	800bdc4 <_svfiprintf_r+0xdc>
 800bd34:	1ba3      	subs	r3, r4, r6
 800bd36:	9304      	str	r3, [sp, #16]
 800bd38:	d00d      	beq.n	800bd56 <_svfiprintf_r+0x6e>
 800bd3a:	1ba3      	subs	r3, r4, r6
 800bd3c:	0032      	movs	r2, r6
 800bd3e:	0039      	movs	r1, r7
 800bd40:	9802      	ldr	r0, [sp, #8]
 800bd42:	f7ff ff6f 	bl	800bc24 <__ssputs_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d100      	bne.n	800bd4c <_svfiprintf_r+0x64>
 800bd4a:	e0b5      	b.n	800beb8 <_svfiprintf_r+0x1d0>
 800bd4c:	696a      	ldr	r2, [r5, #20]
 800bd4e:	9b04      	ldr	r3, [sp, #16]
 800bd50:	4694      	mov	ip, r2
 800bd52:	4463      	add	r3, ip
 800bd54:	616b      	str	r3, [r5, #20]
 800bd56:	7823      	ldrb	r3, [r4, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d100      	bne.n	800bd5e <_svfiprintf_r+0x76>
 800bd5c:	e0ac      	b.n	800beb8 <_svfiprintf_r+0x1d0>
 800bd5e:	2201      	movs	r2, #1
 800bd60:	2300      	movs	r3, #0
 800bd62:	4252      	negs	r2, r2
 800bd64:	606a      	str	r2, [r5, #4]
 800bd66:	a902      	add	r1, sp, #8
 800bd68:	3254      	adds	r2, #84	; 0x54
 800bd6a:	1852      	adds	r2, r2, r1
 800bd6c:	3401      	adds	r4, #1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	60eb      	str	r3, [r5, #12]
 800bd72:	60ab      	str	r3, [r5, #8]
 800bd74:	7013      	strb	r3, [r2, #0]
 800bd76:	65ab      	str	r3, [r5, #88]	; 0x58
 800bd78:	4e58      	ldr	r6, [pc, #352]	; (800bedc <_svfiprintf_r+0x1f4>)
 800bd7a:	2205      	movs	r2, #5
 800bd7c:	7821      	ldrb	r1, [r4, #0]
 800bd7e:	0030      	movs	r0, r6
 800bd80:	f000 ff46 	bl	800cc10 <memchr>
 800bd84:	1c62      	adds	r2, r4, #1
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d120      	bne.n	800bdcc <_svfiprintf_r+0xe4>
 800bd8a:	6829      	ldr	r1, [r5, #0]
 800bd8c:	06cb      	lsls	r3, r1, #27
 800bd8e:	d504      	bpl.n	800bd9a <_svfiprintf_r+0xb2>
 800bd90:	2353      	movs	r3, #83	; 0x53
 800bd92:	ae02      	add	r6, sp, #8
 800bd94:	3020      	adds	r0, #32
 800bd96:	199b      	adds	r3, r3, r6
 800bd98:	7018      	strb	r0, [r3, #0]
 800bd9a:	070b      	lsls	r3, r1, #28
 800bd9c:	d504      	bpl.n	800bda8 <_svfiprintf_r+0xc0>
 800bd9e:	2353      	movs	r3, #83	; 0x53
 800bda0:	202b      	movs	r0, #43	; 0x2b
 800bda2:	ae02      	add	r6, sp, #8
 800bda4:	199b      	adds	r3, r3, r6
 800bda6:	7018      	strb	r0, [r3, #0]
 800bda8:	7823      	ldrb	r3, [r4, #0]
 800bdaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bdac:	d016      	beq.n	800bddc <_svfiprintf_r+0xf4>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	210a      	movs	r1, #10
 800bdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb4:	7822      	ldrb	r2, [r4, #0]
 800bdb6:	3a30      	subs	r2, #48	; 0x30
 800bdb8:	2a09      	cmp	r2, #9
 800bdba:	d955      	bls.n	800be68 <_svfiprintf_r+0x180>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d015      	beq.n	800bdec <_svfiprintf_r+0x104>
 800bdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc2:	e013      	b.n	800bdec <_svfiprintf_r+0x104>
 800bdc4:	2b25      	cmp	r3, #37	; 0x25
 800bdc6:	d0b5      	beq.n	800bd34 <_svfiprintf_r+0x4c>
 800bdc8:	3401      	adds	r4, #1
 800bdca:	e7b0      	b.n	800bd2e <_svfiprintf_r+0x46>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	1b80      	subs	r0, r0, r6
 800bdd0:	4083      	lsls	r3, r0
 800bdd2:	6829      	ldr	r1, [r5, #0]
 800bdd4:	0014      	movs	r4, r2
 800bdd6:	430b      	orrs	r3, r1
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	e7cd      	b.n	800bd78 <_svfiprintf_r+0x90>
 800bddc:	9b05      	ldr	r3, [sp, #20]
 800bdde:	1d18      	adds	r0, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	9005      	str	r0, [sp, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	db39      	blt.n	800be5c <_svfiprintf_r+0x174>
 800bde8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdea:	0014      	movs	r4, r2
 800bdec:	7823      	ldrb	r3, [r4, #0]
 800bdee:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf0:	d10b      	bne.n	800be0a <_svfiprintf_r+0x122>
 800bdf2:	7863      	ldrb	r3, [r4, #1]
 800bdf4:	1c62      	adds	r2, r4, #1
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d13e      	bne.n	800be78 <_svfiprintf_r+0x190>
 800bdfa:	9b05      	ldr	r3, [sp, #20]
 800bdfc:	3402      	adds	r4, #2
 800bdfe:	1d1a      	adds	r2, r3, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	9205      	str	r2, [sp, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	db34      	blt.n	800be72 <_svfiprintf_r+0x18a>
 800be08:	9307      	str	r3, [sp, #28]
 800be0a:	4e35      	ldr	r6, [pc, #212]	; (800bee0 <_svfiprintf_r+0x1f8>)
 800be0c:	7821      	ldrb	r1, [r4, #0]
 800be0e:	2203      	movs	r2, #3
 800be10:	0030      	movs	r0, r6
 800be12:	f000 fefd 	bl	800cc10 <memchr>
 800be16:	2800      	cmp	r0, #0
 800be18:	d006      	beq.n	800be28 <_svfiprintf_r+0x140>
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	1b80      	subs	r0, r0, r6
 800be1e:	4083      	lsls	r3, r0
 800be20:	682a      	ldr	r2, [r5, #0]
 800be22:	3401      	adds	r4, #1
 800be24:	4313      	orrs	r3, r2
 800be26:	602b      	str	r3, [r5, #0]
 800be28:	7821      	ldrb	r1, [r4, #0]
 800be2a:	2206      	movs	r2, #6
 800be2c:	482d      	ldr	r0, [pc, #180]	; (800bee4 <_svfiprintf_r+0x1fc>)
 800be2e:	1c66      	adds	r6, r4, #1
 800be30:	7629      	strb	r1, [r5, #24]
 800be32:	f000 feed 	bl	800cc10 <memchr>
 800be36:	2800      	cmp	r0, #0
 800be38:	d046      	beq.n	800bec8 <_svfiprintf_r+0x1e0>
 800be3a:	4b2b      	ldr	r3, [pc, #172]	; (800bee8 <_svfiprintf_r+0x200>)
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d12f      	bne.n	800bea0 <_svfiprintf_r+0x1b8>
 800be40:	6829      	ldr	r1, [r5, #0]
 800be42:	9b05      	ldr	r3, [sp, #20]
 800be44:	2207      	movs	r2, #7
 800be46:	05c9      	lsls	r1, r1, #23
 800be48:	d528      	bpl.n	800be9c <_svfiprintf_r+0x1b4>
 800be4a:	189b      	adds	r3, r3, r2
 800be4c:	4393      	bics	r3, r2
 800be4e:	3308      	adds	r3, #8
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	696b      	ldr	r3, [r5, #20]
 800be54:	9a03      	ldr	r2, [sp, #12]
 800be56:	189b      	adds	r3, r3, r2
 800be58:	616b      	str	r3, [r5, #20]
 800be5a:	e767      	b.n	800bd2c <_svfiprintf_r+0x44>
 800be5c:	425b      	negs	r3, r3
 800be5e:	60eb      	str	r3, [r5, #12]
 800be60:	2302      	movs	r3, #2
 800be62:	430b      	orrs	r3, r1
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	e7c0      	b.n	800bdea <_svfiprintf_r+0x102>
 800be68:	434b      	muls	r3, r1
 800be6a:	3401      	adds	r4, #1
 800be6c:	189b      	adds	r3, r3, r2
 800be6e:	2001      	movs	r0, #1
 800be70:	e7a0      	b.n	800bdb4 <_svfiprintf_r+0xcc>
 800be72:	2301      	movs	r3, #1
 800be74:	425b      	negs	r3, r3
 800be76:	e7c7      	b.n	800be08 <_svfiprintf_r+0x120>
 800be78:	2300      	movs	r3, #0
 800be7a:	0014      	movs	r4, r2
 800be7c:	200a      	movs	r0, #10
 800be7e:	001a      	movs	r2, r3
 800be80:	606b      	str	r3, [r5, #4]
 800be82:	7821      	ldrb	r1, [r4, #0]
 800be84:	3930      	subs	r1, #48	; 0x30
 800be86:	2909      	cmp	r1, #9
 800be88:	d903      	bls.n	800be92 <_svfiprintf_r+0x1aa>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0bd      	beq.n	800be0a <_svfiprintf_r+0x122>
 800be8e:	9207      	str	r2, [sp, #28]
 800be90:	e7bb      	b.n	800be0a <_svfiprintf_r+0x122>
 800be92:	4342      	muls	r2, r0
 800be94:	3401      	adds	r4, #1
 800be96:	1852      	adds	r2, r2, r1
 800be98:	2301      	movs	r3, #1
 800be9a:	e7f2      	b.n	800be82 <_svfiprintf_r+0x19a>
 800be9c:	3307      	adds	r3, #7
 800be9e:	e7d5      	b.n	800be4c <_svfiprintf_r+0x164>
 800bea0:	ab05      	add	r3, sp, #20
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	003a      	movs	r2, r7
 800bea6:	4b11      	ldr	r3, [pc, #68]	; (800beec <_svfiprintf_r+0x204>)
 800bea8:	0029      	movs	r1, r5
 800beaa:	9802      	ldr	r0, [sp, #8]
 800beac:	e000      	b.n	800beb0 <_svfiprintf_r+0x1c8>
 800beae:	bf00      	nop
 800beb0:	9003      	str	r0, [sp, #12]
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	3301      	adds	r3, #1
 800beb6:	d1cc      	bne.n	800be52 <_svfiprintf_r+0x16a>
 800beb8:	89bb      	ldrh	r3, [r7, #12]
 800beba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bebc:	065b      	lsls	r3, r3, #25
 800bebe:	d400      	bmi.n	800bec2 <_svfiprintf_r+0x1da>
 800bec0:	e729      	b.n	800bd16 <_svfiprintf_r+0x2e>
 800bec2:	2001      	movs	r0, #1
 800bec4:	4240      	negs	r0, r0
 800bec6:	e726      	b.n	800bd16 <_svfiprintf_r+0x2e>
 800bec8:	ab05      	add	r3, sp, #20
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	003a      	movs	r2, r7
 800bece:	4b07      	ldr	r3, [pc, #28]	; (800beec <_svfiprintf_r+0x204>)
 800bed0:	0029      	movs	r1, r5
 800bed2:	9802      	ldr	r0, [sp, #8]
 800bed4:	f000 fa5c 	bl	800c390 <_printf_i>
 800bed8:	e7ea      	b.n	800beb0 <_svfiprintf_r+0x1c8>
 800beda:	46c0      	nop			; (mov r8, r8)
 800bedc:	08010db4 	.word	0x08010db4
 800bee0:	08010dba 	.word	0x08010dba
 800bee4:	08010dbe 	.word	0x08010dbe
 800bee8:	00000000 	.word	0x00000000
 800beec:	0800bc25 	.word	0x0800bc25

0800bef0 <_sungetc_r>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	0014      	movs	r4, r2
 800bef4:	1c4b      	adds	r3, r1, #1
 800bef6:	d103      	bne.n	800bf00 <_sungetc_r+0x10>
 800bef8:	2501      	movs	r5, #1
 800befa:	426d      	negs	r5, r5
 800befc:	0028      	movs	r0, r5
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	8993      	ldrh	r3, [r2, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	4393      	bics	r3, r2
 800bf06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	b2ce      	uxtb	r6, r1
 800bf0c:	b2cd      	uxtb	r5, r1
 800bf0e:	6863      	ldr	r3, [r4, #4]
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	d010      	beq.n	800bf36 <_sungetc_r+0x46>
 800bf14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf16:	4293      	cmp	r3, r2
 800bf18:	da07      	bge.n	800bf2a <_sungetc_r+0x3a>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	701e      	strb	r6, [r3, #0]
 800bf22:	6863      	ldr	r3, [r4, #4]
 800bf24:	3301      	adds	r3, #1
 800bf26:	6063      	str	r3, [r4, #4]
 800bf28:	e7e8      	b.n	800befc <_sungetc_r+0xc>
 800bf2a:	0021      	movs	r1, r4
 800bf2c:	f000 fe0e 	bl	800cb4c <__submore>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0f2      	beq.n	800bf1a <_sungetc_r+0x2a>
 800bf34:	e7e0      	b.n	800bef8 <_sungetc_r+0x8>
 800bf36:	6921      	ldr	r1, [r4, #16]
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	2900      	cmp	r1, #0
 800bf3c:	d007      	beq.n	800bf4e <_sungetc_r+0x5e>
 800bf3e:	4291      	cmp	r1, r2
 800bf40:	d205      	bcs.n	800bf4e <_sungetc_r+0x5e>
 800bf42:	1e51      	subs	r1, r2, #1
 800bf44:	7808      	ldrb	r0, [r1, #0]
 800bf46:	4285      	cmp	r5, r0
 800bf48:	d101      	bne.n	800bf4e <_sungetc_r+0x5e>
 800bf4a:	6021      	str	r1, [r4, #0]
 800bf4c:	e7ea      	b.n	800bf24 <_sungetc_r+0x34>
 800bf4e:	6423      	str	r3, [r4, #64]	; 0x40
 800bf50:	0023      	movs	r3, r4
 800bf52:	3344      	adds	r3, #68	; 0x44
 800bf54:	6363      	str	r3, [r4, #52]	; 0x34
 800bf56:	2303      	movs	r3, #3
 800bf58:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf5a:	0023      	movs	r3, r4
 800bf5c:	3346      	adds	r3, #70	; 0x46
 800bf5e:	63e2      	str	r2, [r4, #60]	; 0x3c
 800bf60:	701e      	strb	r6, [r3, #0]
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	2301      	movs	r3, #1
 800bf66:	e7de      	b.n	800bf26 <_sungetc_r+0x36>

0800bf68 <__ssrefill_r>:
 800bf68:	b510      	push	{r4, lr}
 800bf6a:	000c      	movs	r4, r1
 800bf6c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d00e      	beq.n	800bf90 <__ssrefill_r+0x28>
 800bf72:	0023      	movs	r3, r4
 800bf74:	3344      	adds	r3, #68	; 0x44
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d001      	beq.n	800bf7e <__ssrefill_r+0x16>
 800bf7a:	f7ff fcc7 	bl	800b90c <_free_r>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf82:	6360      	str	r0, [r4, #52]	; 0x34
 800bf84:	6063      	str	r3, [r4, #4]
 800bf86:	4283      	cmp	r3, r0
 800bf88:	d002      	beq.n	800bf90 <__ssrefill_r+0x28>
 800bf8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	2001      	movs	r0, #1
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	2300      	movs	r3, #0
 800bf98:	89a2      	ldrh	r2, [r4, #12]
 800bf9a:	6063      	str	r3, [r4, #4]
 800bf9c:	3320      	adds	r3, #32
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	4240      	negs	r0, r0
 800bfa4:	e7f3      	b.n	800bf8e <__ssrefill_r+0x26>
	...

0800bfa8 <__ssvfiscanf_r>:
 800bfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfaa:	4cbd      	ldr	r4, [pc, #756]	; (800c2a0 <__ssvfiscanf_r+0x2f8>)
 800bfac:	2586      	movs	r5, #134	; 0x86
 800bfae:	44a5      	add	sp, r4
 800bfb0:	9303      	str	r3, [sp, #12]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9348      	str	r3, [sp, #288]	; 0x120
 800bfb6:	9349      	str	r3, [sp, #292]	; 0x124
 800bfb8:	ab05      	add	r3, sp, #20
 800bfba:	934a      	str	r3, [sp, #296]	; 0x128
 800bfbc:	23be      	movs	r3, #190	; 0xbe
 800bfbe:	006d      	lsls	r5, r5, #1
 800bfc0:	9000      	str	r0, [sp, #0]
 800bfc2:	000c      	movs	r4, r1
 800bfc4:	a802      	add	r0, sp, #8
 800bfc6:	49b7      	ldr	r1, [pc, #732]	; (800c2a4 <__ssvfiscanf_r+0x2fc>)
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	1940      	adds	r0, r0, r5
 800bfcc:	27c0      	movs	r7, #192	; 0xc0
 800bfce:	50c1      	str	r1, [r0, r3]
 800bfd0:	ab02      	add	r3, sp, #8
 800bfd2:	195b      	adds	r3, r3, r5
 800bfd4:	0015      	movs	r5, r2
 800bfd6:	49b4      	ldr	r1, [pc, #720]	; (800c2a8 <__ssvfiscanf_r+0x300>)
 800bfd8:	007f      	lsls	r7, r7, #1
 800bfda:	51d9      	str	r1, [r3, r7]
 800bfdc:	782b      	ldrb	r3, [r5, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d100      	bne.n	800bfe4 <__ssvfiscanf_r+0x3c>
 800bfe2:	e15b      	b.n	800c29c <__ssvfiscanf_r+0x2f4>
 800bfe4:	f000 fdf4 	bl	800cbd0 <__locale_ctype_ptr>
 800bfe8:	2208      	movs	r2, #8
 800bfea:	782b      	ldrb	r3, [r5, #0]
 800bfec:	18c0      	adds	r0, r0, r3
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	7843      	ldrb	r3, [r0, #1]
 800bff2:	4013      	ands	r3, r2
 800bff4:	d141      	bne.n	800c07a <__ssvfiscanf_r+0xd2>
 800bff6:	9a01      	ldr	r2, [sp, #4]
 800bff8:	1c6e      	adds	r6, r5, #1
 800bffa:	2a25      	cmp	r2, #37	; 0x25
 800bffc:	d000      	beq.n	800c000 <__ssvfiscanf_r+0x58>
 800bffe:	e0a8      	b.n	800c152 <__ssvfiscanf_r+0x1aa>
 800c000:	9347      	str	r3, [sp, #284]	; 0x11c
 800c002:	9345      	str	r3, [sp, #276]	; 0x114
 800c004:	786b      	ldrb	r3, [r5, #1]
 800c006:	2b2a      	cmp	r3, #42	; 0x2a
 800c008:	d102      	bne.n	800c010 <__ssvfiscanf_r+0x68>
 800c00a:	3b1a      	subs	r3, #26
 800c00c:	9345      	str	r3, [sp, #276]	; 0x114
 800c00e:	1cae      	adds	r6, r5, #2
 800c010:	0035      	movs	r5, r6
 800c012:	220a      	movs	r2, #10
 800c014:	7829      	ldrb	r1, [r5, #0]
 800c016:	000b      	movs	r3, r1
 800c018:	3b30      	subs	r3, #48	; 0x30
 800c01a:	2b09      	cmp	r3, #9
 800c01c:	d948      	bls.n	800c0b0 <__ssvfiscanf_r+0x108>
 800c01e:	4ea3      	ldr	r6, [pc, #652]	; (800c2ac <__ssvfiscanf_r+0x304>)
 800c020:	2203      	movs	r2, #3
 800c022:	0030      	movs	r0, r6
 800c024:	f000 fdf4 	bl	800cc10 <memchr>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d007      	beq.n	800c03c <__ssvfiscanf_r+0x94>
 800c02c:	2301      	movs	r3, #1
 800c02e:	1b80      	subs	r0, r0, r6
 800c030:	4083      	lsls	r3, r0
 800c032:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c034:	3501      	adds	r5, #1
 800c036:	4313      	orrs	r3, r2
 800c038:	9202      	str	r2, [sp, #8]
 800c03a:	9345      	str	r3, [sp, #276]	; 0x114
 800c03c:	782b      	ldrb	r3, [r5, #0]
 800c03e:	1c6e      	adds	r6, r5, #1
 800c040:	2b67      	cmp	r3, #103	; 0x67
 800c042:	d858      	bhi.n	800c0f6 <__ssvfiscanf_r+0x14e>
 800c044:	2b65      	cmp	r3, #101	; 0x65
 800c046:	d300      	bcc.n	800c04a <__ssvfiscanf_r+0xa2>
 800c048:	e0dd      	b.n	800c206 <__ssvfiscanf_r+0x25e>
 800c04a:	2b47      	cmp	r3, #71	; 0x47
 800c04c:	d838      	bhi.n	800c0c0 <__ssvfiscanf_r+0x118>
 800c04e:	2b45      	cmp	r3, #69	; 0x45
 800c050:	d300      	bcc.n	800c054 <__ssvfiscanf_r+0xac>
 800c052:	e0d8      	b.n	800c206 <__ssvfiscanf_r+0x25e>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d100      	bne.n	800c05a <__ssvfiscanf_r+0xb2>
 800c058:	e11d      	b.n	800c296 <__ssvfiscanf_r+0x2ee>
 800c05a:	2b25      	cmp	r3, #37	; 0x25
 800c05c:	d079      	beq.n	800c152 <__ssvfiscanf_r+0x1aa>
 800c05e:	2303      	movs	r3, #3
 800c060:	934b      	str	r3, [sp, #300]	; 0x12c
 800c062:	3307      	adds	r3, #7
 800c064:	9346      	str	r3, [sp, #280]	; 0x118
 800c066:	e053      	b.n	800c110 <__ssvfiscanf_r+0x168>
 800c068:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c06a:	3301      	adds	r3, #1
 800c06c:	9201      	str	r2, [sp, #4]
 800c06e:	3201      	adds	r2, #1
 800c070:	9249      	str	r2, [sp, #292]	; 0x124
 800c072:	6862      	ldr	r2, [r4, #4]
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	3a01      	subs	r2, #1
 800c078:	6062      	str	r2, [r4, #4]
 800c07a:	6863      	ldr	r3, [r4, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dd0b      	ble.n	800c098 <__ssvfiscanf_r+0xf0>
 800c080:	f000 fda6 	bl	800cbd0 <__locale_ctype_ptr>
 800c084:	2108      	movs	r1, #8
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	781a      	ldrb	r2, [r3, #0]
 800c08a:	1880      	adds	r0, r0, r2
 800c08c:	7842      	ldrb	r2, [r0, #1]
 800c08e:	420a      	tst	r2, r1
 800c090:	d1ea      	bne.n	800c068 <__ssvfiscanf_r+0xc0>
 800c092:	1c6e      	adds	r6, r5, #1
 800c094:	0035      	movs	r5, r6
 800c096:	e7a1      	b.n	800bfdc <__ssvfiscanf_r+0x34>
 800c098:	2286      	movs	r2, #134	; 0x86
 800c09a:	ab02      	add	r3, sp, #8
 800c09c:	0052      	lsls	r2, r2, #1
 800c09e:	189b      	adds	r3, r3, r2
 800c0a0:	59db      	ldr	r3, [r3, r7]
 800c0a2:	0021      	movs	r1, r4
 800c0a4:	9800      	ldr	r0, [sp, #0]
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	4798      	blx	r3
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0e8      	beq.n	800c080 <__ssvfiscanf_r+0xd8>
 800c0ae:	e7f0      	b.n	800c092 <__ssvfiscanf_r+0xea>
 800c0b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c0b2:	3501      	adds	r5, #1
 800c0b4:	9302      	str	r3, [sp, #8]
 800c0b6:	4353      	muls	r3, r2
 800c0b8:	3b30      	subs	r3, #48	; 0x30
 800c0ba:	1859      	adds	r1, r3, r1
 800c0bc:	9147      	str	r1, [sp, #284]	; 0x11c
 800c0be:	e7a9      	b.n	800c014 <__ssvfiscanf_r+0x6c>
 800c0c0:	2b5b      	cmp	r3, #91	; 0x5b
 800c0c2:	d100      	bne.n	800c0c6 <__ssvfiscanf_r+0x11e>
 800c0c4:	e077      	b.n	800c1b6 <__ssvfiscanf_r+0x20e>
 800c0c6:	d80f      	bhi.n	800c0e8 <__ssvfiscanf_r+0x140>
 800c0c8:	2b58      	cmp	r3, #88	; 0x58
 800c0ca:	d1c8      	bne.n	800c05e <__ssvfiscanf_r+0xb6>
 800c0cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0ce:	9201      	str	r2, [sp, #4]
 800c0d0:	2280      	movs	r2, #128	; 0x80
 800c0d2:	9901      	ldr	r1, [sp, #4]
 800c0d4:	0092      	lsls	r2, r2, #2
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	9245      	str	r2, [sp, #276]	; 0x114
 800c0da:	2210      	movs	r2, #16
 800c0dc:	9246      	str	r2, [sp, #280]	; 0x118
 800c0de:	2203      	movs	r2, #3
 800c0e0:	2b6e      	cmp	r3, #110	; 0x6e
 800c0e2:	dd14      	ble.n	800c10e <__ssvfiscanf_r+0x166>
 800c0e4:	3201      	adds	r2, #1
 800c0e6:	e012      	b.n	800c10e <__ssvfiscanf_r+0x166>
 800c0e8:	2b63      	cmp	r3, #99	; 0x63
 800c0ea:	d100      	bne.n	800c0ee <__ssvfiscanf_r+0x146>
 800c0ec:	e071      	b.n	800c1d2 <__ssvfiscanf_r+0x22a>
 800c0ee:	2b64      	cmp	r3, #100	; 0x64
 800c0f0:	d1b5      	bne.n	800c05e <__ssvfiscanf_r+0xb6>
 800c0f2:	220a      	movs	r2, #10
 800c0f4:	e7f2      	b.n	800c0dc <__ssvfiscanf_r+0x134>
 800c0f6:	2b70      	cmp	r3, #112	; 0x70
 800c0f8:	d052      	beq.n	800c1a0 <__ssvfiscanf_r+0x1f8>
 800c0fa:	d822      	bhi.n	800c142 <__ssvfiscanf_r+0x19a>
 800c0fc:	2b6e      	cmp	r3, #110	; 0x6e
 800c0fe:	d100      	bne.n	800c102 <__ssvfiscanf_r+0x15a>
 800c100:	e06f      	b.n	800c1e2 <__ssvfiscanf_r+0x23a>
 800c102:	d854      	bhi.n	800c1ae <__ssvfiscanf_r+0x206>
 800c104:	2b69      	cmp	r3, #105	; 0x69
 800c106:	d1aa      	bne.n	800c05e <__ssvfiscanf_r+0xb6>
 800c108:	2300      	movs	r3, #0
 800c10a:	2203      	movs	r2, #3
 800c10c:	9346      	str	r3, [sp, #280]	; 0x118
 800c10e:	924b      	str	r2, [sp, #300]	; 0x12c
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	dc00      	bgt.n	800c118 <__ssvfiscanf_r+0x170>
 800c116:	e078      	b.n	800c20a <__ssvfiscanf_r+0x262>
 800c118:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	065b      	lsls	r3, r3, #25
 800c11e:	d400      	bmi.n	800c122 <__ssvfiscanf_r+0x17a>
 800c120:	e08b      	b.n	800c23a <__ssvfiscanf_r+0x292>
 800c122:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800c124:	2b02      	cmp	r3, #2
 800c126:	dd00      	ble.n	800c12a <__ssvfiscanf_r+0x182>
 800c128:	e09d      	b.n	800c266 <__ssvfiscanf_r+0x2be>
 800c12a:	ab03      	add	r3, sp, #12
 800c12c:	0022      	movs	r2, r4
 800c12e:	a945      	add	r1, sp, #276	; 0x114
 800c130:	9800      	ldr	r0, [sp, #0]
 800c132:	f000 fa47 	bl	800c5c4 <_scanf_chars>
 800c136:	2801      	cmp	r0, #1
 800c138:	d100      	bne.n	800c13c <__ssvfiscanf_r+0x194>
 800c13a:	e0af      	b.n	800c29c <__ssvfiscanf_r+0x2f4>
 800c13c:	2802      	cmp	r0, #2
 800c13e:	d1a9      	bne.n	800c094 <__ssvfiscanf_r+0xec>
 800c140:	e025      	b.n	800c18e <__ssvfiscanf_r+0x1e6>
 800c142:	2b75      	cmp	r3, #117	; 0x75
 800c144:	d0d5      	beq.n	800c0f2 <__ssvfiscanf_r+0x14a>
 800c146:	2b78      	cmp	r3, #120	; 0x78
 800c148:	d0c0      	beq.n	800c0cc <__ssvfiscanf_r+0x124>
 800c14a:	2b73      	cmp	r3, #115	; 0x73
 800c14c:	d187      	bne.n	800c05e <__ssvfiscanf_r+0xb6>
 800c14e:	2302      	movs	r3, #2
 800c150:	e03d      	b.n	800c1ce <__ssvfiscanf_r+0x226>
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	dd0f      	ble.n	800c178 <__ssvfiscanf_r+0x1d0>
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	9901      	ldr	r1, [sp, #4]
 800c15c:	781a      	ldrb	r2, [r3, #0]
 800c15e:	4291      	cmp	r1, r2
 800c160:	d000      	beq.n	800c164 <__ssvfiscanf_r+0x1bc>
 800c162:	e09b      	b.n	800c29c <__ssvfiscanf_r+0x2f4>
 800c164:	3301      	adds	r3, #1
 800c166:	6862      	ldr	r2, [r4, #4]
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c16c:	3a01      	subs	r2, #1
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	3301      	adds	r3, #1
 800c172:	6062      	str	r2, [r4, #4]
 800c174:	9349      	str	r3, [sp, #292]	; 0x124
 800c176:	e78d      	b.n	800c094 <__ssvfiscanf_r+0xec>
 800c178:	2286      	movs	r2, #134	; 0x86
 800c17a:	ab02      	add	r3, sp, #8
 800c17c:	0052      	lsls	r2, r2, #1
 800c17e:	189b      	adds	r3, r3, r2
 800c180:	59db      	ldr	r3, [r3, r7]
 800c182:	0021      	movs	r1, r4
 800c184:	9800      	ldr	r0, [sp, #0]
 800c186:	9302      	str	r3, [sp, #8]
 800c188:	4798      	blx	r3
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0e4      	beq.n	800c158 <__ssvfiscanf_r+0x1b0>
 800c18e:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c190:	2800      	cmp	r0, #0
 800c192:	d000      	beq.n	800c196 <__ssvfiscanf_r+0x1ee>
 800c194:	e07b      	b.n	800c28e <__ssvfiscanf_r+0x2e6>
 800c196:	3801      	subs	r0, #1
 800c198:	23a7      	movs	r3, #167	; 0xa7
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	449d      	add	sp, r3
 800c19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1a2:	9201      	str	r2, [sp, #4]
 800c1a4:	2220      	movs	r2, #32
 800c1a6:	9901      	ldr	r1, [sp, #4]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	9245      	str	r2, [sp, #276]	; 0x114
 800c1ac:	e78e      	b.n	800c0cc <__ssvfiscanf_r+0x124>
 800c1ae:	2308      	movs	r3, #8
 800c1b0:	2204      	movs	r2, #4
 800c1b2:	9346      	str	r3, [sp, #280]	; 0x118
 800c1b4:	e7ab      	b.n	800c10e <__ssvfiscanf_r+0x166>
 800c1b6:	0031      	movs	r1, r6
 800c1b8:	a805      	add	r0, sp, #20
 800c1ba:	f000 fb67 	bl	800c88c <__sccl>
 800c1be:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1c0:	0006      	movs	r6, r0
 800c1c2:	9301      	str	r3, [sp, #4]
 800c1c4:	2340      	movs	r3, #64	; 0x40
 800c1c6:	9a01      	ldr	r2, [sp, #4]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	9345      	str	r3, [sp, #276]	; 0x114
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	934b      	str	r3, [sp, #300]	; 0x12c
 800c1d0:	e79e      	b.n	800c110 <__ssvfiscanf_r+0x168>
 800c1d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	2340      	movs	r3, #64	; 0x40
 800c1d8:	9a01      	ldr	r2, [sp, #4]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	9345      	str	r3, [sp, #276]	; 0x114
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e7f5      	b.n	800c1ce <__ssvfiscanf_r+0x226>
 800c1e2:	9945      	ldr	r1, [sp, #276]	; 0x114
 800c1e4:	06cb      	lsls	r3, r1, #27
 800c1e6:	d500      	bpl.n	800c1ea <__ssvfiscanf_r+0x242>
 800c1e8:	e754      	b.n	800c094 <__ssvfiscanf_r+0xec>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c1ee:	07c8      	lsls	r0, r1, #31
 800c1f0:	d504      	bpl.n	800c1fc <__ssvfiscanf_r+0x254>
 800c1f2:	1d19      	adds	r1, r3, #4
 800c1f4:	9103      	str	r1, [sp, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	801a      	strh	r2, [r3, #0]
 800c1fa:	e74b      	b.n	800c094 <__ssvfiscanf_r+0xec>
 800c1fc:	1d19      	adds	r1, r3, #4
 800c1fe:	9103      	str	r1, [sp, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e746      	b.n	800c094 <__ssvfiscanf_r+0xec>
 800c206:	2305      	movs	r3, #5
 800c208:	e7e1      	b.n	800c1ce <__ssvfiscanf_r+0x226>
 800c20a:	2286      	movs	r2, #134	; 0x86
 800c20c:	ab02      	add	r3, sp, #8
 800c20e:	0052      	lsls	r2, r2, #1
 800c210:	189b      	adds	r3, r3, r2
 800c212:	59db      	ldr	r3, [r3, r7]
 800c214:	0021      	movs	r1, r4
 800c216:	9800      	ldr	r0, [sp, #0]
 800c218:	9301      	str	r3, [sp, #4]
 800c21a:	4798      	blx	r3
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d100      	bne.n	800c222 <__ssvfiscanf_r+0x27a>
 800c220:	e77a      	b.n	800c118 <__ssvfiscanf_r+0x170>
 800c222:	e7b4      	b.n	800c18e <__ssvfiscanf_r+0x1e6>
 800c224:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800c226:	9201      	str	r2, [sp, #4]
 800c228:	3201      	adds	r2, #1
 800c22a:	9249      	str	r2, [sp, #292]	; 0x124
 800c22c:	6862      	ldr	r2, [r4, #4]
 800c22e:	3a01      	subs	r2, #1
 800c230:	6062      	str	r2, [r4, #4]
 800c232:	2a00      	cmp	r2, #0
 800c234:	dd0b      	ble.n	800c24e <__ssvfiscanf_r+0x2a6>
 800c236:	3301      	adds	r3, #1
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	f000 fcc9 	bl	800cbd0 <__locale_ctype_ptr>
 800c23e:	2108      	movs	r1, #8
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	781a      	ldrb	r2, [r3, #0]
 800c244:	1880      	adds	r0, r0, r2
 800c246:	7842      	ldrb	r2, [r0, #1]
 800c248:	420a      	tst	r2, r1
 800c24a:	d1eb      	bne.n	800c224 <__ssvfiscanf_r+0x27c>
 800c24c:	e769      	b.n	800c122 <__ssvfiscanf_r+0x17a>
 800c24e:	2286      	movs	r2, #134	; 0x86
 800c250:	ab02      	add	r3, sp, #8
 800c252:	0052      	lsls	r2, r2, #1
 800c254:	189b      	adds	r3, r3, r2
 800c256:	59db      	ldr	r3, [r3, r7]
 800c258:	0021      	movs	r1, r4
 800c25a:	9800      	ldr	r0, [sp, #0]
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	4798      	blx	r3
 800c260:	2800      	cmp	r0, #0
 800c262:	d0ea      	beq.n	800c23a <__ssvfiscanf_r+0x292>
 800c264:	e793      	b.n	800c18e <__ssvfiscanf_r+0x1e6>
 800c266:	2b04      	cmp	r3, #4
 800c268:	dc06      	bgt.n	800c278 <__ssvfiscanf_r+0x2d0>
 800c26a:	ab03      	add	r3, sp, #12
 800c26c:	0022      	movs	r2, r4
 800c26e:	a945      	add	r1, sp, #276	; 0x114
 800c270:	9800      	ldr	r0, [sp, #0]
 800c272:	f000 fa0b 	bl	800c68c <_scanf_i>
 800c276:	e75e      	b.n	800c136 <__ssvfiscanf_r+0x18e>
 800c278:	4b0d      	ldr	r3, [pc, #52]	; (800c2b0 <__ssvfiscanf_r+0x308>)
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d100      	bne.n	800c280 <__ssvfiscanf_r+0x2d8>
 800c27e:	e709      	b.n	800c094 <__ssvfiscanf_r+0xec>
 800c280:	ab03      	add	r3, sp, #12
 800c282:	0022      	movs	r2, r4
 800c284:	a945      	add	r1, sp, #276	; 0x114
 800c286:	9800      	ldr	r0, [sp, #0]
 800c288:	e000      	b.n	800c28c <__ssvfiscanf_r+0x2e4>
 800c28a:	bf00      	nop
 800c28c:	e753      	b.n	800c136 <__ssvfiscanf_r+0x18e>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	065b      	lsls	r3, r3, #25
 800c292:	d400      	bmi.n	800c296 <__ssvfiscanf_r+0x2ee>
 800c294:	e780      	b.n	800c198 <__ssvfiscanf_r+0x1f0>
 800c296:	2001      	movs	r0, #1
 800c298:	4240      	negs	r0, r0
 800c29a:	e77d      	b.n	800c198 <__ssvfiscanf_r+0x1f0>
 800c29c:	9848      	ldr	r0, [sp, #288]	; 0x120
 800c29e:	e77b      	b.n	800c198 <__ssvfiscanf_r+0x1f0>
 800c2a0:	fffffd64 	.word	0xfffffd64
 800c2a4:	0800bef1 	.word	0x0800bef1
 800c2a8:	0800bf69 	.word	0x0800bf69
 800c2ac:	08010dba 	.word	0x08010dba
 800c2b0:	00000000 	.word	0x00000000

0800c2b4 <_printf_common>:
 800c2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b6:	0015      	movs	r5, r2
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	688a      	ldr	r2, [r1, #8]
 800c2bc:	690b      	ldr	r3, [r1, #16]
 800c2be:	9000      	str	r0, [sp, #0]
 800c2c0:	000c      	movs	r4, r1
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	da00      	bge.n	800c2c8 <_printf_common+0x14>
 800c2c6:	0013      	movs	r3, r2
 800c2c8:	0022      	movs	r2, r4
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	3243      	adds	r2, #67	; 0x43
 800c2ce:	7812      	ldrb	r2, [r2, #0]
 800c2d0:	2a00      	cmp	r2, #0
 800c2d2:	d001      	beq.n	800c2d8 <_printf_common+0x24>
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	069b      	lsls	r3, r3, #26
 800c2dc:	d502      	bpl.n	800c2e4 <_printf_common+0x30>
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	602b      	str	r3, [r5, #0]
 800c2e4:	2706      	movs	r7, #6
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	401f      	ands	r7, r3
 800c2ea:	d027      	beq.n	800c33c <_printf_common+0x88>
 800c2ec:	0023      	movs	r3, r4
 800c2ee:	3343      	adds	r3, #67	; 0x43
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	1e5a      	subs	r2, r3, #1
 800c2f4:	4193      	sbcs	r3, r2
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	0692      	lsls	r2, r2, #26
 800c2fa:	d430      	bmi.n	800c35e <_printf_common+0xaa>
 800c2fc:	0022      	movs	r2, r4
 800c2fe:	9901      	ldr	r1, [sp, #4]
 800c300:	3243      	adds	r2, #67	; 0x43
 800c302:	9800      	ldr	r0, [sp, #0]
 800c304:	9e08      	ldr	r6, [sp, #32]
 800c306:	47b0      	blx	r6
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d025      	beq.n	800c358 <_printf_common+0xa4>
 800c30c:	2306      	movs	r3, #6
 800c30e:	6820      	ldr	r0, [r4, #0]
 800c310:	682a      	ldr	r2, [r5, #0]
 800c312:	68e1      	ldr	r1, [r4, #12]
 800c314:	4003      	ands	r3, r0
 800c316:	2500      	movs	r5, #0
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d103      	bne.n	800c324 <_printf_common+0x70>
 800c31c:	1a8d      	subs	r5, r1, r2
 800c31e:	43eb      	mvns	r3, r5
 800c320:	17db      	asrs	r3, r3, #31
 800c322:	401d      	ands	r5, r3
 800c324:	68a3      	ldr	r3, [r4, #8]
 800c326:	6922      	ldr	r2, [r4, #16]
 800c328:	4293      	cmp	r3, r2
 800c32a:	dd01      	ble.n	800c330 <_printf_common+0x7c>
 800c32c:	1a9b      	subs	r3, r3, r2
 800c32e:	18ed      	adds	r5, r5, r3
 800c330:	2700      	movs	r7, #0
 800c332:	42bd      	cmp	r5, r7
 800c334:	d120      	bne.n	800c378 <_printf_common+0xc4>
 800c336:	2000      	movs	r0, #0
 800c338:	e010      	b.n	800c35c <_printf_common+0xa8>
 800c33a:	3701      	adds	r7, #1
 800c33c:	68e3      	ldr	r3, [r4, #12]
 800c33e:	682a      	ldr	r2, [r5, #0]
 800c340:	1a9b      	subs	r3, r3, r2
 800c342:	429f      	cmp	r7, r3
 800c344:	dad2      	bge.n	800c2ec <_printf_common+0x38>
 800c346:	0022      	movs	r2, r4
 800c348:	2301      	movs	r3, #1
 800c34a:	3219      	adds	r2, #25
 800c34c:	9901      	ldr	r1, [sp, #4]
 800c34e:	9800      	ldr	r0, [sp, #0]
 800c350:	9e08      	ldr	r6, [sp, #32]
 800c352:	47b0      	blx	r6
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d1f0      	bne.n	800c33a <_printf_common+0x86>
 800c358:	2001      	movs	r0, #1
 800c35a:	4240      	negs	r0, r0
 800c35c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c35e:	2030      	movs	r0, #48	; 0x30
 800c360:	18e1      	adds	r1, r4, r3
 800c362:	3143      	adds	r1, #67	; 0x43
 800c364:	7008      	strb	r0, [r1, #0]
 800c366:	0021      	movs	r1, r4
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	3145      	adds	r1, #69	; 0x45
 800c36c:	7809      	ldrb	r1, [r1, #0]
 800c36e:	18a2      	adds	r2, r4, r2
 800c370:	3243      	adds	r2, #67	; 0x43
 800c372:	3302      	adds	r3, #2
 800c374:	7011      	strb	r1, [r2, #0]
 800c376:	e7c1      	b.n	800c2fc <_printf_common+0x48>
 800c378:	0022      	movs	r2, r4
 800c37a:	2301      	movs	r3, #1
 800c37c:	321a      	adds	r2, #26
 800c37e:	9901      	ldr	r1, [sp, #4]
 800c380:	9800      	ldr	r0, [sp, #0]
 800c382:	9e08      	ldr	r6, [sp, #32]
 800c384:	47b0      	blx	r6
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	d0e6      	beq.n	800c358 <_printf_common+0xa4>
 800c38a:	3701      	adds	r7, #1
 800c38c:	e7d1      	b.n	800c332 <_printf_common+0x7e>
	...

0800c390 <_printf_i>:
 800c390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c392:	b08b      	sub	sp, #44	; 0x2c
 800c394:	9206      	str	r2, [sp, #24]
 800c396:	000a      	movs	r2, r1
 800c398:	3243      	adds	r2, #67	; 0x43
 800c39a:	9307      	str	r3, [sp, #28]
 800c39c:	9005      	str	r0, [sp, #20]
 800c39e:	9204      	str	r2, [sp, #16]
 800c3a0:	7e0a      	ldrb	r2, [r1, #24]
 800c3a2:	000c      	movs	r4, r1
 800c3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3a6:	2a6e      	cmp	r2, #110	; 0x6e
 800c3a8:	d100      	bne.n	800c3ac <_printf_i+0x1c>
 800c3aa:	e08f      	b.n	800c4cc <_printf_i+0x13c>
 800c3ac:	d817      	bhi.n	800c3de <_printf_i+0x4e>
 800c3ae:	2a63      	cmp	r2, #99	; 0x63
 800c3b0:	d02c      	beq.n	800c40c <_printf_i+0x7c>
 800c3b2:	d808      	bhi.n	800c3c6 <_printf_i+0x36>
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	d100      	bne.n	800c3ba <_printf_i+0x2a>
 800c3b8:	e099      	b.n	800c4ee <_printf_i+0x15e>
 800c3ba:	2a58      	cmp	r2, #88	; 0x58
 800c3bc:	d054      	beq.n	800c468 <_printf_i+0xd8>
 800c3be:	0026      	movs	r6, r4
 800c3c0:	3642      	adds	r6, #66	; 0x42
 800c3c2:	7032      	strb	r2, [r6, #0]
 800c3c4:	e029      	b.n	800c41a <_printf_i+0x8a>
 800c3c6:	2a64      	cmp	r2, #100	; 0x64
 800c3c8:	d001      	beq.n	800c3ce <_printf_i+0x3e>
 800c3ca:	2a69      	cmp	r2, #105	; 0x69
 800c3cc:	d1f7      	bne.n	800c3be <_printf_i+0x2e>
 800c3ce:	6821      	ldr	r1, [r4, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	0608      	lsls	r0, r1, #24
 800c3d4:	d523      	bpl.n	800c41e <_printf_i+0x8e>
 800c3d6:	1d11      	adds	r1, r2, #4
 800c3d8:	6019      	str	r1, [r3, #0]
 800c3da:	6815      	ldr	r5, [r2, #0]
 800c3dc:	e025      	b.n	800c42a <_printf_i+0x9a>
 800c3de:	2a73      	cmp	r2, #115	; 0x73
 800c3e0:	d100      	bne.n	800c3e4 <_printf_i+0x54>
 800c3e2:	e088      	b.n	800c4f6 <_printf_i+0x166>
 800c3e4:	d808      	bhi.n	800c3f8 <_printf_i+0x68>
 800c3e6:	2a6f      	cmp	r2, #111	; 0x6f
 800c3e8:	d029      	beq.n	800c43e <_printf_i+0xae>
 800c3ea:	2a70      	cmp	r2, #112	; 0x70
 800c3ec:	d1e7      	bne.n	800c3be <_printf_i+0x2e>
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	6809      	ldr	r1, [r1, #0]
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	6022      	str	r2, [r4, #0]
 800c3f6:	e003      	b.n	800c400 <_printf_i+0x70>
 800c3f8:	2a75      	cmp	r2, #117	; 0x75
 800c3fa:	d020      	beq.n	800c43e <_printf_i+0xae>
 800c3fc:	2a78      	cmp	r2, #120	; 0x78
 800c3fe:	d1de      	bne.n	800c3be <_printf_i+0x2e>
 800c400:	0022      	movs	r2, r4
 800c402:	2178      	movs	r1, #120	; 0x78
 800c404:	3245      	adds	r2, #69	; 0x45
 800c406:	7011      	strb	r1, [r2, #0]
 800c408:	4a6c      	ldr	r2, [pc, #432]	; (800c5bc <_printf_i+0x22c>)
 800c40a:	e030      	b.n	800c46e <_printf_i+0xde>
 800c40c:	000e      	movs	r6, r1
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	3642      	adds	r6, #66	; 0x42
 800c412:	1d11      	adds	r1, r2, #4
 800c414:	6019      	str	r1, [r3, #0]
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	7033      	strb	r3, [r6, #0]
 800c41a:	2301      	movs	r3, #1
 800c41c:	e079      	b.n	800c512 <_printf_i+0x182>
 800c41e:	0649      	lsls	r1, r1, #25
 800c420:	d5d9      	bpl.n	800c3d6 <_printf_i+0x46>
 800c422:	1d11      	adds	r1, r2, #4
 800c424:	6019      	str	r1, [r3, #0]
 800c426:	2300      	movs	r3, #0
 800c428:	5ed5      	ldrsh	r5, [r2, r3]
 800c42a:	2d00      	cmp	r5, #0
 800c42c:	da03      	bge.n	800c436 <_printf_i+0xa6>
 800c42e:	232d      	movs	r3, #45	; 0x2d
 800c430:	9a04      	ldr	r2, [sp, #16]
 800c432:	426d      	negs	r5, r5
 800c434:	7013      	strb	r3, [r2, #0]
 800c436:	4b62      	ldr	r3, [pc, #392]	; (800c5c0 <_printf_i+0x230>)
 800c438:	270a      	movs	r7, #10
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	e02f      	b.n	800c49e <_printf_i+0x10e>
 800c43e:	6820      	ldr	r0, [r4, #0]
 800c440:	6819      	ldr	r1, [r3, #0]
 800c442:	0605      	lsls	r5, r0, #24
 800c444:	d503      	bpl.n	800c44e <_printf_i+0xbe>
 800c446:	1d08      	adds	r0, r1, #4
 800c448:	6018      	str	r0, [r3, #0]
 800c44a:	680d      	ldr	r5, [r1, #0]
 800c44c:	e005      	b.n	800c45a <_printf_i+0xca>
 800c44e:	0640      	lsls	r0, r0, #25
 800c450:	d5f9      	bpl.n	800c446 <_printf_i+0xb6>
 800c452:	680d      	ldr	r5, [r1, #0]
 800c454:	1d08      	adds	r0, r1, #4
 800c456:	6018      	str	r0, [r3, #0]
 800c458:	b2ad      	uxth	r5, r5
 800c45a:	4b59      	ldr	r3, [pc, #356]	; (800c5c0 <_printf_i+0x230>)
 800c45c:	2708      	movs	r7, #8
 800c45e:	9303      	str	r3, [sp, #12]
 800c460:	2a6f      	cmp	r2, #111	; 0x6f
 800c462:	d018      	beq.n	800c496 <_printf_i+0x106>
 800c464:	270a      	movs	r7, #10
 800c466:	e016      	b.n	800c496 <_printf_i+0x106>
 800c468:	3145      	adds	r1, #69	; 0x45
 800c46a:	700a      	strb	r2, [r1, #0]
 800c46c:	4a54      	ldr	r2, [pc, #336]	; (800c5c0 <_printf_i+0x230>)
 800c46e:	9203      	str	r2, [sp, #12]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	6821      	ldr	r1, [r4, #0]
 800c474:	1d10      	adds	r0, r2, #4
 800c476:	6018      	str	r0, [r3, #0]
 800c478:	6815      	ldr	r5, [r2, #0]
 800c47a:	0608      	lsls	r0, r1, #24
 800c47c:	d522      	bpl.n	800c4c4 <_printf_i+0x134>
 800c47e:	07cb      	lsls	r3, r1, #31
 800c480:	d502      	bpl.n	800c488 <_printf_i+0xf8>
 800c482:	2320      	movs	r3, #32
 800c484:	4319      	orrs	r1, r3
 800c486:	6021      	str	r1, [r4, #0]
 800c488:	2710      	movs	r7, #16
 800c48a:	2d00      	cmp	r5, #0
 800c48c:	d103      	bne.n	800c496 <_printf_i+0x106>
 800c48e:	2320      	movs	r3, #32
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	439a      	bics	r2, r3
 800c494:	6022      	str	r2, [r4, #0]
 800c496:	0023      	movs	r3, r4
 800c498:	2200      	movs	r2, #0
 800c49a:	3343      	adds	r3, #67	; 0x43
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	60a3      	str	r3, [r4, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	db5c      	blt.n	800c560 <_printf_i+0x1d0>
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	6821      	ldr	r1, [r4, #0]
 800c4aa:	4391      	bics	r1, r2
 800c4ac:	6021      	str	r1, [r4, #0]
 800c4ae:	2d00      	cmp	r5, #0
 800c4b0:	d158      	bne.n	800c564 <_printf_i+0x1d4>
 800c4b2:	9e04      	ldr	r6, [sp, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d064      	beq.n	800c582 <_printf_i+0x1f2>
 800c4b8:	0026      	movs	r6, r4
 800c4ba:	9b03      	ldr	r3, [sp, #12]
 800c4bc:	3642      	adds	r6, #66	; 0x42
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	7033      	strb	r3, [r6, #0]
 800c4c2:	e05e      	b.n	800c582 <_printf_i+0x1f2>
 800c4c4:	0648      	lsls	r0, r1, #25
 800c4c6:	d5da      	bpl.n	800c47e <_printf_i+0xee>
 800c4c8:	b2ad      	uxth	r5, r5
 800c4ca:	e7d8      	b.n	800c47e <_printf_i+0xee>
 800c4cc:	6809      	ldr	r1, [r1, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	0608      	lsls	r0, r1, #24
 800c4d2:	d505      	bpl.n	800c4e0 <_printf_i+0x150>
 800c4d4:	1d11      	adds	r1, r2, #4
 800c4d6:	6019      	str	r1, [r3, #0]
 800c4d8:	6813      	ldr	r3, [r2, #0]
 800c4da:	6962      	ldr	r2, [r4, #20]
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	e006      	b.n	800c4ee <_printf_i+0x15e>
 800c4e0:	0649      	lsls	r1, r1, #25
 800c4e2:	d5f7      	bpl.n	800c4d4 <_printf_i+0x144>
 800c4e4:	1d11      	adds	r1, r2, #4
 800c4e6:	6019      	str	r1, [r3, #0]
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	8aa2      	ldrh	r2, [r4, #20]
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9e04      	ldr	r6, [sp, #16]
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	e054      	b.n	800c5a0 <_printf_i+0x210>
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	1d11      	adds	r1, r2, #4
 800c4fa:	6019      	str	r1, [r3, #0]
 800c4fc:	6816      	ldr	r6, [r2, #0]
 800c4fe:	2100      	movs	r1, #0
 800c500:	6862      	ldr	r2, [r4, #4]
 800c502:	0030      	movs	r0, r6
 800c504:	f000 fb84 	bl	800cc10 <memchr>
 800c508:	2800      	cmp	r0, #0
 800c50a:	d001      	beq.n	800c510 <_printf_i+0x180>
 800c50c:	1b80      	subs	r0, r0, r6
 800c50e:	6060      	str	r0, [r4, #4]
 800c510:	6863      	ldr	r3, [r4, #4]
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	2300      	movs	r3, #0
 800c516:	9a04      	ldr	r2, [sp, #16]
 800c518:	7013      	strb	r3, [r2, #0]
 800c51a:	e041      	b.n	800c5a0 <_printf_i+0x210>
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	0032      	movs	r2, r6
 800c520:	9906      	ldr	r1, [sp, #24]
 800c522:	9805      	ldr	r0, [sp, #20]
 800c524:	9d07      	ldr	r5, [sp, #28]
 800c526:	47a8      	blx	r5
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d043      	beq.n	800c5b4 <_printf_i+0x224>
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	2500      	movs	r5, #0
 800c530:	079b      	lsls	r3, r3, #30
 800c532:	d40f      	bmi.n	800c554 <_printf_i+0x1c4>
 800c534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c536:	68e0      	ldr	r0, [r4, #12]
 800c538:	4298      	cmp	r0, r3
 800c53a:	da3d      	bge.n	800c5b8 <_printf_i+0x228>
 800c53c:	0018      	movs	r0, r3
 800c53e:	e03b      	b.n	800c5b8 <_printf_i+0x228>
 800c540:	0022      	movs	r2, r4
 800c542:	2301      	movs	r3, #1
 800c544:	3219      	adds	r2, #25
 800c546:	9906      	ldr	r1, [sp, #24]
 800c548:	9805      	ldr	r0, [sp, #20]
 800c54a:	9e07      	ldr	r6, [sp, #28]
 800c54c:	47b0      	blx	r6
 800c54e:	1c43      	adds	r3, r0, #1
 800c550:	d030      	beq.n	800c5b4 <_printf_i+0x224>
 800c552:	3501      	adds	r5, #1
 800c554:	68e3      	ldr	r3, [r4, #12]
 800c556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c558:	1a9b      	subs	r3, r3, r2
 800c55a:	429d      	cmp	r5, r3
 800c55c:	dbf0      	blt.n	800c540 <_printf_i+0x1b0>
 800c55e:	e7e9      	b.n	800c534 <_printf_i+0x1a4>
 800c560:	2d00      	cmp	r5, #0
 800c562:	d0a9      	beq.n	800c4b8 <_printf_i+0x128>
 800c564:	9e04      	ldr	r6, [sp, #16]
 800c566:	0028      	movs	r0, r5
 800c568:	0039      	movs	r1, r7
 800c56a:	f7f3 fe77 	bl	800025c <__aeabi_uidivmod>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	3e01      	subs	r6, #1
 800c572:	5c5b      	ldrb	r3, [r3, r1]
 800c574:	0028      	movs	r0, r5
 800c576:	7033      	strb	r3, [r6, #0]
 800c578:	0039      	movs	r1, r7
 800c57a:	f7f3 fde9 	bl	8000150 <__udivsi3>
 800c57e:	1e05      	subs	r5, r0, #0
 800c580:	d1f1      	bne.n	800c566 <_printf_i+0x1d6>
 800c582:	2f08      	cmp	r7, #8
 800c584:	d109      	bne.n	800c59a <_printf_i+0x20a>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	07db      	lsls	r3, r3, #31
 800c58a:	d506      	bpl.n	800c59a <_printf_i+0x20a>
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	6922      	ldr	r2, [r4, #16]
 800c590:	4293      	cmp	r3, r2
 800c592:	dc02      	bgt.n	800c59a <_printf_i+0x20a>
 800c594:	2330      	movs	r3, #48	; 0x30
 800c596:	3e01      	subs	r6, #1
 800c598:	7033      	strb	r3, [r6, #0]
 800c59a:	9b04      	ldr	r3, [sp, #16]
 800c59c:	1b9b      	subs	r3, r3, r6
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	9b07      	ldr	r3, [sp, #28]
 800c5a2:	aa09      	add	r2, sp, #36	; 0x24
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	0021      	movs	r1, r4
 800c5a8:	9b06      	ldr	r3, [sp, #24]
 800c5aa:	9805      	ldr	r0, [sp, #20]
 800c5ac:	f7ff fe82 	bl	800c2b4 <_printf_common>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d1b3      	bne.n	800c51c <_printf_i+0x18c>
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	4240      	negs	r0, r0
 800c5b8:	b00b      	add	sp, #44	; 0x2c
 800c5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5bc:	08010dd6 	.word	0x08010dd6
 800c5c0:	08010dc5 	.word	0x08010dc5

0800c5c4 <_scanf_chars>:
 800c5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5c6:	0015      	movs	r5, r2
 800c5c8:	688a      	ldr	r2, [r1, #8]
 800c5ca:	9001      	str	r0, [sp, #4]
 800c5cc:	000c      	movs	r4, r1
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	d106      	bne.n	800c5e0 <_scanf_chars+0x1c>
 800c5d2:	698a      	ldr	r2, [r1, #24]
 800c5d4:	1e51      	subs	r1, r2, #1
 800c5d6:	418a      	sbcs	r2, r1
 800c5d8:	2101      	movs	r1, #1
 800c5da:	4252      	negs	r2, r2
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	60a2      	str	r2, [r4, #8]
 800c5e0:	6822      	ldr	r2, [r4, #0]
 800c5e2:	06d2      	lsls	r2, r2, #27
 800c5e4:	d403      	bmi.n	800c5ee <_scanf_chars+0x2a>
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	1d11      	adds	r1, r2, #4
 800c5ea:	6019      	str	r1, [r3, #0]
 800c5ec:	6817      	ldr	r7, [r2, #0]
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	69a3      	ldr	r3, [r4, #24]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d01c      	beq.n	800c630 <_scanf_chars+0x6c>
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d108      	bne.n	800c60c <_scanf_chars+0x48>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	6962      	ldr	r2, [r4, #20]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	5cd3      	ldrb	r3, [r2, r3]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d114      	bne.n	800c630 <_scanf_chars+0x6c>
 800c606:	2e00      	cmp	r6, #0
 800c608:	d130      	bne.n	800c66c <_scanf_chars+0xa8>
 800c60a:	e006      	b.n	800c61a <_scanf_chars+0x56>
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d006      	beq.n	800c61e <_scanf_chars+0x5a>
 800c610:	2e00      	cmp	r6, #0
 800c612:	d12b      	bne.n	800c66c <_scanf_chars+0xa8>
 800c614:	69a3      	ldr	r3, [r4, #24]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d128      	bne.n	800c66c <_scanf_chars+0xa8>
 800c61a:	2001      	movs	r0, #1
 800c61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c61e:	f000 fad7 	bl	800cbd0 <__locale_ctype_ptr>
 800c622:	2208      	movs	r2, #8
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	18c0      	adds	r0, r0, r3
 800c62a:	7843      	ldrb	r3, [r0, #1]
 800c62c:	4213      	tst	r3, r2
 800c62e:	d1ef      	bne.n	800c610 <_scanf_chars+0x4c>
 800c630:	2210      	movs	r2, #16
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	3601      	adds	r6, #1
 800c636:	4213      	tst	r3, r2
 800c638:	d103      	bne.n	800c642 <_scanf_chars+0x7e>
 800c63a:	682b      	ldr	r3, [r5, #0]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	703b      	strb	r3, [r7, #0]
 800c640:	3701      	adds	r7, #1
 800c642:	682a      	ldr	r2, [r5, #0]
 800c644:	686b      	ldr	r3, [r5, #4]
 800c646:	3201      	adds	r2, #1
 800c648:	602a      	str	r2, [r5, #0]
 800c64a:	68a2      	ldr	r2, [r4, #8]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	3a01      	subs	r2, #1
 800c650:	606b      	str	r3, [r5, #4]
 800c652:	60a2      	str	r2, [r4, #8]
 800c654:	2a00      	cmp	r2, #0
 800c656:	d009      	beq.n	800c66c <_scanf_chars+0xa8>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dcc9      	bgt.n	800c5f0 <_scanf_chars+0x2c>
 800c65c:	23c0      	movs	r3, #192	; 0xc0
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	58e3      	ldr	r3, [r4, r3]
 800c662:	0029      	movs	r1, r5
 800c664:	9801      	ldr	r0, [sp, #4]
 800c666:	4798      	blx	r3
 800c668:	2800      	cmp	r0, #0
 800c66a:	d0c1      	beq.n	800c5f0 <_scanf_chars+0x2c>
 800c66c:	2310      	movs	r3, #16
 800c66e:	6822      	ldr	r2, [r4, #0]
 800c670:	4013      	ands	r3, r2
 800c672:	d106      	bne.n	800c682 <_scanf_chars+0xbe>
 800c674:	68e2      	ldr	r2, [r4, #12]
 800c676:	3201      	adds	r2, #1
 800c678:	60e2      	str	r2, [r4, #12]
 800c67a:	69a2      	ldr	r2, [r4, #24]
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	d000      	beq.n	800c682 <_scanf_chars+0xbe>
 800c680:	703b      	strb	r3, [r7, #0]
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	2000      	movs	r0, #0
 800c686:	199e      	adds	r6, r3, r6
 800c688:	6126      	str	r6, [r4, #16]
 800c68a:	e7c7      	b.n	800c61c <_scanf_chars+0x58>

0800c68c <_scanf_i>:
 800c68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c68e:	000c      	movs	r4, r1
 800c690:	b08d      	sub	sp, #52	; 0x34
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	4b77      	ldr	r3, [pc, #476]	; (800c874 <_scanf_i+0x1e8>)
 800c696:	9005      	str	r0, [sp, #20]
 800c698:	0016      	movs	r6, r2
 800c69a:	aa09      	add	r2, sp, #36	; 0x24
 800c69c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800c69e:	c223      	stmia	r2!, {r0, r1, r5}
 800c6a0:	4b75      	ldr	r3, [pc, #468]	; (800c878 <_scanf_i+0x1ec>)
 800c6a2:	9306      	str	r3, [sp, #24]
 800c6a4:	69a3      	ldr	r3, [r4, #24]
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d001      	beq.n	800c6ae <_scanf_i+0x22>
 800c6aa:	4b74      	ldr	r3, [pc, #464]	; (800c87c <_scanf_i+0x1f0>)
 800c6ac:	9306      	str	r3, [sp, #24]
 800c6ae:	22ae      	movs	r2, #174	; 0xae
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	0052      	lsls	r2, r2, #1
 800c6b6:	1e59      	subs	r1, r3, #1
 800c6b8:	9004      	str	r0, [sp, #16]
 800c6ba:	4291      	cmp	r1, r2
 800c6bc:	d905      	bls.n	800c6ca <_scanf_i+0x3e>
 800c6be:	3b5e      	subs	r3, #94	; 0x5e
 800c6c0:	3bff      	subs	r3, #255	; 0xff
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	235e      	movs	r3, #94	; 0x5e
 800c6c6:	33ff      	adds	r3, #255	; 0xff
 800c6c8:	60a3      	str	r3, [r4, #8]
 800c6ca:	0023      	movs	r3, r4
 800c6cc:	331c      	adds	r3, #28
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	23d0      	movs	r3, #208	; 0xd0
 800c6d2:	2700      	movs	r7, #0
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	9303      	str	r3, [sp, #12]
 800c6e0:	6833      	ldr	r3, [r6, #0]
 800c6e2:	a809      	add	r0, sp, #36	; 0x24
 800c6e4:	7819      	ldrb	r1, [r3, #0]
 800c6e6:	00bb      	lsls	r3, r7, #2
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	5818      	ldr	r0, [r3, r0]
 800c6ec:	f000 fa90 	bl	800cc10 <memchr>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d02b      	beq.n	800c74c <_scanf_i+0xc0>
 800c6f4:	2f01      	cmp	r7, #1
 800c6f6:	d15f      	bne.n	800c7b8 <_scanf_i+0x12c>
 800c6f8:	6863      	ldr	r3, [r4, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <_scanf_i+0x80>
 800c6fe:	3308      	adds	r3, #8
 800c700:	6822      	ldr	r2, [r4, #0]
 800c702:	6063      	str	r3, [r4, #4]
 800c704:	33f9      	adds	r3, #249	; 0xf9
 800c706:	33ff      	adds	r3, #255	; 0xff
 800c708:	4313      	orrs	r3, r2
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	4b5c      	ldr	r3, [pc, #368]	; (800c880 <_scanf_i+0x1f4>)
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	4013      	ands	r3, r2
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	68a3      	ldr	r3, [r4, #8]
 800c716:	1e5a      	subs	r2, r3, #1
 800c718:	60a2      	str	r2, [r4, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d016      	beq.n	800c74c <_scanf_i+0xc0>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	1c5d      	adds	r5, r3, #1
 800c722:	6833      	ldr	r3, [r6, #0]
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	6032      	str	r2, [r6, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	9a03      	ldr	r2, [sp, #12]
 800c72c:	9503      	str	r5, [sp, #12]
 800c72e:	7013      	strb	r3, [r2, #0]
 800c730:	6873      	ldr	r3, [r6, #4]
 800c732:	3b01      	subs	r3, #1
 800c734:	6073      	str	r3, [r6, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	dc08      	bgt.n	800c74c <_scanf_i+0xc0>
 800c73a:	23c0      	movs	r3, #192	; 0xc0
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	58e3      	ldr	r3, [r4, r3]
 800c740:	0031      	movs	r1, r6
 800c742:	9805      	ldr	r0, [sp, #20]
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	4798      	blx	r3
 800c748:	2800      	cmp	r0, #0
 800c74a:	d17d      	bne.n	800c848 <_scanf_i+0x1bc>
 800c74c:	3701      	adds	r7, #1
 800c74e:	2f03      	cmp	r7, #3
 800c750:	d1c6      	bne.n	800c6e0 <_scanf_i+0x54>
 800c752:	6863      	ldr	r3, [r4, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <_scanf_i+0xd0>
 800c758:	330a      	adds	r3, #10
 800c75a:	6063      	str	r3, [r4, #4]
 800c75c:	2110      	movs	r1, #16
 800c75e:	2700      	movs	r7, #0
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	6960      	ldr	r0, [r4, #20]
 800c764:	1ac9      	subs	r1, r1, r3
 800c766:	4b47      	ldr	r3, [pc, #284]	; (800c884 <_scanf_i+0x1f8>)
 800c768:	18c9      	adds	r1, r1, r3
 800c76a:	f000 f88f 	bl	800c88c <__sccl>
 800c76e:	9d03      	ldr	r5, [sp, #12]
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d041      	beq.n	800c7fa <_scanf_i+0x16e>
 800c776:	6832      	ldr	r2, [r6, #0]
 800c778:	6960      	ldr	r0, [r4, #20]
 800c77a:	7811      	ldrb	r1, [r2, #0]
 800c77c:	5c40      	ldrb	r0, [r0, r1]
 800c77e:	2800      	cmp	r0, #0
 800c780:	d03b      	beq.n	800c7fa <_scanf_i+0x16e>
 800c782:	2930      	cmp	r1, #48	; 0x30
 800c784:	d128      	bne.n	800c7d8 <_scanf_i+0x14c>
 800c786:	2080      	movs	r0, #128	; 0x80
 800c788:	6821      	ldr	r1, [r4, #0]
 800c78a:	0100      	lsls	r0, r0, #4
 800c78c:	4201      	tst	r1, r0
 800c78e:	d023      	beq.n	800c7d8 <_scanf_i+0x14c>
 800c790:	9a04      	ldr	r2, [sp, #16]
 800c792:	3701      	adds	r7, #1
 800c794:	2a00      	cmp	r2, #0
 800c796:	d003      	beq.n	800c7a0 <_scanf_i+0x114>
 800c798:	3a01      	subs	r2, #1
 800c79a:	3301      	adds	r3, #1
 800c79c:	9204      	str	r2, [sp, #16]
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6873      	ldr	r3, [r6, #4]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	6073      	str	r3, [r6, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd1e      	ble.n	800c7e8 <_scanf_i+0x15c>
 800c7aa:	6833      	ldr	r3, [r6, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	6033      	str	r3, [r6, #0]
 800c7b0:	68a3      	ldr	r3, [r4, #8]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	e7db      	b.n	800c770 <_scanf_i+0xe4>
 800c7b8:	2f02      	cmp	r7, #2
 800c7ba:	d1ab      	bne.n	800c714 <_scanf_i+0x88>
 800c7bc:	21c0      	movs	r1, #192	; 0xc0
 800c7be:	2380      	movs	r3, #128	; 0x80
 800c7c0:	6822      	ldr	r2, [r4, #0]
 800c7c2:	00c9      	lsls	r1, r1, #3
 800c7c4:	4011      	ands	r1, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	d1c2      	bne.n	800c752 <_scanf_i+0xc6>
 800c7cc:	3bf1      	subs	r3, #241	; 0xf1
 800c7ce:	3bff      	subs	r3, #255	; 0xff
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	33f0      	adds	r3, #240	; 0xf0
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	e79c      	b.n	800c712 <_scanf_i+0x86>
 800c7d8:	6821      	ldr	r1, [r4, #0]
 800c7da:	4b2b      	ldr	r3, [pc, #172]	; (800c888 <_scanf_i+0x1fc>)
 800c7dc:	400b      	ands	r3, r1
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	7813      	ldrb	r3, [r2, #0]
 800c7e2:	702b      	strb	r3, [r5, #0]
 800c7e4:	3501      	adds	r5, #1
 800c7e6:	e7db      	b.n	800c7a0 <_scanf_i+0x114>
 800c7e8:	23c0      	movs	r3, #192	; 0xc0
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	58e3      	ldr	r3, [r4, r3]
 800c7ee:	0031      	movs	r1, r6
 800c7f0:	9805      	ldr	r0, [sp, #20]
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	4798      	blx	r3
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0da      	beq.n	800c7b0 <_scanf_i+0x124>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	05db      	lsls	r3, r3, #23
 800c7fe:	d50e      	bpl.n	800c81e <_scanf_i+0x192>
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	429d      	cmp	r5, r3
 800c804:	d907      	bls.n	800c816 <_scanf_i+0x18a>
 800c806:	23be      	movs	r3, #190	; 0xbe
 800c808:	3d01      	subs	r5, #1
 800c80a:	005b      	lsls	r3, r3, #1
 800c80c:	7829      	ldrb	r1, [r5, #0]
 800c80e:	58e3      	ldr	r3, [r4, r3]
 800c810:	0032      	movs	r2, r6
 800c812:	9805      	ldr	r0, [sp, #20]
 800c814:	4798      	blx	r3
 800c816:	9b01      	ldr	r3, [sp, #4]
 800c818:	2001      	movs	r0, #1
 800c81a:	429d      	cmp	r5, r3
 800c81c:	d027      	beq.n	800c86e <_scanf_i+0x1e2>
 800c81e:	2210      	movs	r2, #16
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	401a      	ands	r2, r3
 800c824:	d11c      	bne.n	800c860 <_scanf_i+0x1d4>
 800c826:	702a      	strb	r2, [r5, #0]
 800c828:	6863      	ldr	r3, [r4, #4]
 800c82a:	9901      	ldr	r1, [sp, #4]
 800c82c:	9805      	ldr	r0, [sp, #20]
 800c82e:	9e06      	ldr	r6, [sp, #24]
 800c830:	47b0      	blx	r6
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	0691      	lsls	r1, r2, #26
 800c83a:	d507      	bpl.n	800c84c <_scanf_i+0x1c0>
 800c83c:	9902      	ldr	r1, [sp, #8]
 800c83e:	1d1a      	adds	r2, r3, #4
 800c840:	600a      	str	r2, [r1, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6018      	str	r0, [r3, #0]
 800c846:	e008      	b.n	800c85a <_scanf_i+0x1ce>
 800c848:	2700      	movs	r7, #0
 800c84a:	e7d6      	b.n	800c7fa <_scanf_i+0x16e>
 800c84c:	07d1      	lsls	r1, r2, #31
 800c84e:	d5f5      	bpl.n	800c83c <_scanf_i+0x1b0>
 800c850:	9902      	ldr	r1, [sp, #8]
 800c852:	1d1a      	adds	r2, r3, #4
 800c854:	600a      	str	r2, [r1, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	8018      	strh	r0, [r3, #0]
 800c85a:	68e3      	ldr	r3, [r4, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	60e3      	str	r3, [r4, #12]
 800c860:	2000      	movs	r0, #0
 800c862:	9b01      	ldr	r3, [sp, #4]
 800c864:	1aed      	subs	r5, r5, r3
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	19ef      	adds	r7, r5, r7
 800c86a:	19df      	adds	r7, r3, r7
 800c86c:	6127      	str	r7, [r4, #16]
 800c86e:	b00d      	add	sp, #52	; 0x34
 800c870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c872:	46c0      	nop			; (mov r8, r8)
 800c874:	0800dd50 	.word	0x0800dd50
 800c878:	0800c9fd 	.word	0x0800c9fd
 800c87c:	0800cb2d 	.word	0x0800cb2d
 800c880:	fffffaff 	.word	0xfffffaff
 800c884:	08010de7 	.word	0x08010de7
 800c888:	fffff6ff 	.word	0xfffff6ff

0800c88c <__sccl>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	780b      	ldrb	r3, [r1, #0]
 800c890:	2b5e      	cmp	r3, #94	; 0x5e
 800c892:	d00d      	beq.n	800c8b0 <__sccl+0x24>
 800c894:	1c4a      	adds	r2, r1, #1
 800c896:	2100      	movs	r1, #0
 800c898:	0004      	movs	r4, r0
 800c89a:	1c45      	adds	r5, r0, #1
 800c89c:	35ff      	adds	r5, #255	; 0xff
 800c89e:	7021      	strb	r1, [r4, #0]
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	42a5      	cmp	r5, r4
 800c8a4:	d1fb      	bne.n	800c89e <__sccl+0x12>
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <__sccl+0x2c>
 800c8aa:	3a01      	subs	r2, #1
 800c8ac:	0010      	movs	r0, r2
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	1c8a      	adds	r2, r1, #2
 800c8b2:	784b      	ldrb	r3, [r1, #1]
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	e7ef      	b.n	800c898 <__sccl+0xc>
 800c8b8:	2401      	movs	r4, #1
 800c8ba:	404c      	eors	r4, r1
 800c8bc:	0011      	movs	r1, r2
 800c8be:	54c4      	strb	r4, [r0, r3]
 800c8c0:	780d      	ldrb	r5, [r1, #0]
 800c8c2:	1c4a      	adds	r2, r1, #1
 800c8c4:	2d2d      	cmp	r5, #45	; 0x2d
 800c8c6:	d007      	beq.n	800c8d8 <__sccl+0x4c>
 800c8c8:	2d5d      	cmp	r5, #93	; 0x5d
 800c8ca:	d0ef      	beq.n	800c8ac <__sccl+0x20>
 800c8cc:	2d00      	cmp	r5, #0
 800c8ce:	d101      	bne.n	800c8d4 <__sccl+0x48>
 800c8d0:	000a      	movs	r2, r1
 800c8d2:	e7eb      	b.n	800c8ac <__sccl+0x20>
 800c8d4:	002b      	movs	r3, r5
 800c8d6:	e7f1      	b.n	800c8bc <__sccl+0x30>
 800c8d8:	784e      	ldrb	r6, [r1, #1]
 800c8da:	2e5d      	cmp	r6, #93	; 0x5d
 800c8dc:	d0fa      	beq.n	800c8d4 <__sccl+0x48>
 800c8de:	42b3      	cmp	r3, r6
 800c8e0:	dcf8      	bgt.n	800c8d4 <__sccl+0x48>
 800c8e2:	3102      	adds	r1, #2
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	54c4      	strb	r4, [r0, r3]
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	dcfb      	bgt.n	800c8e4 <__sccl+0x58>
 800c8ec:	e7e8      	b.n	800c8c0 <__sccl+0x34>
	...

0800c8f0 <_strtol_l.isra.0>:
 800c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8f2:	001f      	movs	r7, r3
 800c8f4:	000e      	movs	r6, r1
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	9005      	str	r0, [sp, #20]
 800c8fa:	9103      	str	r1, [sp, #12]
 800c8fc:	9202      	str	r2, [sp, #8]
 800c8fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c900:	7834      	ldrb	r4, [r6, #0]
 800c902:	f000 f961 	bl	800cbc8 <__locale_ctype_ptr_l>
 800c906:	2208      	movs	r2, #8
 800c908:	1900      	adds	r0, r0, r4
 800c90a:	7843      	ldrb	r3, [r0, #1]
 800c90c:	1c75      	adds	r5, r6, #1
 800c90e:	4013      	ands	r3, r2
 800c910:	d10c      	bne.n	800c92c <_strtol_l.isra.0+0x3c>
 800c912:	2c2d      	cmp	r4, #45	; 0x2d
 800c914:	d10c      	bne.n	800c930 <_strtol_l.isra.0+0x40>
 800c916:	3301      	adds	r3, #1
 800c918:	782c      	ldrb	r4, [r5, #0]
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	1cb5      	adds	r5, r6, #2
 800c91e:	2f00      	cmp	r7, #0
 800c920:	d00c      	beq.n	800c93c <_strtol_l.isra.0+0x4c>
 800c922:	2f10      	cmp	r7, #16
 800c924:	d114      	bne.n	800c950 <_strtol_l.isra.0+0x60>
 800c926:	2c30      	cmp	r4, #48	; 0x30
 800c928:	d00a      	beq.n	800c940 <_strtol_l.isra.0+0x50>
 800c92a:	e011      	b.n	800c950 <_strtol_l.isra.0+0x60>
 800c92c:	002e      	movs	r6, r5
 800c92e:	e7e6      	b.n	800c8fe <_strtol_l.isra.0+0xe>
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	2c2b      	cmp	r4, #43	; 0x2b
 800c934:	d1f3      	bne.n	800c91e <_strtol_l.isra.0+0x2e>
 800c936:	782c      	ldrb	r4, [r5, #0]
 800c938:	1cb5      	adds	r5, r6, #2
 800c93a:	e7f0      	b.n	800c91e <_strtol_l.isra.0+0x2e>
 800c93c:	2c30      	cmp	r4, #48	; 0x30
 800c93e:	d12f      	bne.n	800c9a0 <_strtol_l.isra.0+0xb0>
 800c940:	2220      	movs	r2, #32
 800c942:	782b      	ldrb	r3, [r5, #0]
 800c944:	4393      	bics	r3, r2
 800c946:	2b58      	cmp	r3, #88	; 0x58
 800c948:	d151      	bne.n	800c9ee <_strtol_l.isra.0+0xfe>
 800c94a:	2710      	movs	r7, #16
 800c94c:	786c      	ldrb	r4, [r5, #1]
 800c94e:	3502      	adds	r5, #2
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	4a29      	ldr	r2, [pc, #164]	; (800c9f8 <_strtol_l.isra.0+0x108>)
 800c954:	0039      	movs	r1, r7
 800c956:	189e      	adds	r6, r3, r2
 800c958:	0030      	movs	r0, r6
 800c95a:	f7f3 fc7f 	bl	800025c <__aeabi_uidivmod>
 800c95e:	0030      	movs	r0, r6
 800c960:	9104      	str	r1, [sp, #16]
 800c962:	0039      	movs	r1, r7
 800c964:	f7f3 fbf4 	bl	8000150 <__udivsi3>
 800c968:	2101      	movs	r1, #1
 800c96a:	2300      	movs	r3, #0
 800c96c:	4249      	negs	r1, r1
 800c96e:	0002      	movs	r2, r0
 800c970:	468c      	mov	ip, r1
 800c972:	0018      	movs	r0, r3
 800c974:	0021      	movs	r1, r4
 800c976:	3930      	subs	r1, #48	; 0x30
 800c978:	2909      	cmp	r1, #9
 800c97a:	d813      	bhi.n	800c9a4 <_strtol_l.isra.0+0xb4>
 800c97c:	000c      	movs	r4, r1
 800c97e:	42a7      	cmp	r7, r4
 800c980:	dd1c      	ble.n	800c9bc <_strtol_l.isra.0+0xcc>
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	d009      	beq.n	800c99a <_strtol_l.isra.0+0xaa>
 800c986:	4663      	mov	r3, ip
 800c988:	4282      	cmp	r2, r0
 800c98a:	d306      	bcc.n	800c99a <_strtol_l.isra.0+0xaa>
 800c98c:	d102      	bne.n	800c994 <_strtol_l.isra.0+0xa4>
 800c98e:	9904      	ldr	r1, [sp, #16]
 800c990:	42a1      	cmp	r1, r4
 800c992:	db02      	blt.n	800c99a <_strtol_l.isra.0+0xaa>
 800c994:	2301      	movs	r3, #1
 800c996:	4378      	muls	r0, r7
 800c998:	1820      	adds	r0, r4, r0
 800c99a:	782c      	ldrb	r4, [r5, #0]
 800c99c:	3501      	adds	r5, #1
 800c99e:	e7e9      	b.n	800c974 <_strtol_l.isra.0+0x84>
 800c9a0:	270a      	movs	r7, #10
 800c9a2:	e7d5      	b.n	800c950 <_strtol_l.isra.0+0x60>
 800c9a4:	0021      	movs	r1, r4
 800c9a6:	3941      	subs	r1, #65	; 0x41
 800c9a8:	2919      	cmp	r1, #25
 800c9aa:	d801      	bhi.n	800c9b0 <_strtol_l.isra.0+0xc0>
 800c9ac:	3c37      	subs	r4, #55	; 0x37
 800c9ae:	e7e6      	b.n	800c97e <_strtol_l.isra.0+0x8e>
 800c9b0:	0021      	movs	r1, r4
 800c9b2:	3961      	subs	r1, #97	; 0x61
 800c9b4:	2919      	cmp	r1, #25
 800c9b6:	d801      	bhi.n	800c9bc <_strtol_l.isra.0+0xcc>
 800c9b8:	3c57      	subs	r4, #87	; 0x57
 800c9ba:	e7e0      	b.n	800c97e <_strtol_l.isra.0+0x8e>
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	d108      	bne.n	800c9d2 <_strtol_l.isra.0+0xe2>
 800c9c0:	9a05      	ldr	r2, [sp, #20]
 800c9c2:	3323      	adds	r3, #35	; 0x23
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	9b02      	ldr	r3, [sp, #8]
 800c9c8:	0030      	movs	r0, r6
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10b      	bne.n	800c9e6 <_strtol_l.isra.0+0xf6>
 800c9ce:	b007      	add	sp, #28
 800c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d2:	9a01      	ldr	r2, [sp, #4]
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	d000      	beq.n	800c9da <_strtol_l.isra.0+0xea>
 800c9d8:	4240      	negs	r0, r0
 800c9da:	9a02      	ldr	r2, [sp, #8]
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	d0f6      	beq.n	800c9ce <_strtol_l.isra.0+0xde>
 800c9e0:	9a03      	ldr	r2, [sp, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d000      	beq.n	800c9e8 <_strtol_l.isra.0+0xf8>
 800c9e6:	1e6a      	subs	r2, r5, #1
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	e7ef      	b.n	800c9ce <_strtol_l.isra.0+0xde>
 800c9ee:	2430      	movs	r4, #48	; 0x30
 800c9f0:	2f00      	cmp	r7, #0
 800c9f2:	d1ad      	bne.n	800c950 <_strtol_l.isra.0+0x60>
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	e7ab      	b.n	800c950 <_strtol_l.isra.0+0x60>
 800c9f8:	7fffffff 	.word	0x7fffffff

0800c9fc <_strtol_r>:
 800c9fc:	b513      	push	{r0, r1, r4, lr}
 800c9fe:	4c05      	ldr	r4, [pc, #20]	; (800ca14 <_strtol_r+0x18>)
 800ca00:	6824      	ldr	r4, [r4, #0]
 800ca02:	6a24      	ldr	r4, [r4, #32]
 800ca04:	2c00      	cmp	r4, #0
 800ca06:	d100      	bne.n	800ca0a <_strtol_r+0xe>
 800ca08:	4c03      	ldr	r4, [pc, #12]	; (800ca18 <_strtol_r+0x1c>)
 800ca0a:	9400      	str	r4, [sp, #0]
 800ca0c:	f7ff ff70 	bl	800c8f0 <_strtol_l.isra.0>
 800ca10:	bd16      	pop	{r1, r2, r4, pc}
 800ca12:	46c0      	nop			; (mov r8, r8)
 800ca14:	20000414 	.word	0x20000414
 800ca18:	20000478 	.word	0x20000478

0800ca1c <_strtoul_l.isra.0>:
 800ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1e:	001f      	movs	r7, r3
 800ca20:	000e      	movs	r6, r1
 800ca22:	b087      	sub	sp, #28
 800ca24:	9005      	str	r0, [sp, #20]
 800ca26:	9103      	str	r1, [sp, #12]
 800ca28:	9201      	str	r2, [sp, #4]
 800ca2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca2c:	7834      	ldrb	r4, [r6, #0]
 800ca2e:	f000 f8cb 	bl	800cbc8 <__locale_ctype_ptr_l>
 800ca32:	2208      	movs	r2, #8
 800ca34:	1900      	adds	r0, r0, r4
 800ca36:	7843      	ldrb	r3, [r0, #1]
 800ca38:	1c75      	adds	r5, r6, #1
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	d10c      	bne.n	800ca58 <_strtoul_l.isra.0+0x3c>
 800ca3e:	2c2d      	cmp	r4, #45	; 0x2d
 800ca40:	d10c      	bne.n	800ca5c <_strtoul_l.isra.0+0x40>
 800ca42:	3301      	adds	r3, #1
 800ca44:	782c      	ldrb	r4, [r5, #0]
 800ca46:	9302      	str	r3, [sp, #8]
 800ca48:	1cb5      	adds	r5, r6, #2
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	d00c      	beq.n	800ca68 <_strtoul_l.isra.0+0x4c>
 800ca4e:	2f10      	cmp	r7, #16
 800ca50:	d114      	bne.n	800ca7c <_strtoul_l.isra.0+0x60>
 800ca52:	2c30      	cmp	r4, #48	; 0x30
 800ca54:	d00a      	beq.n	800ca6c <_strtoul_l.isra.0+0x50>
 800ca56:	e011      	b.n	800ca7c <_strtoul_l.isra.0+0x60>
 800ca58:	002e      	movs	r6, r5
 800ca5a:	e7e6      	b.n	800ca2a <_strtoul_l.isra.0+0xe>
 800ca5c:	9302      	str	r3, [sp, #8]
 800ca5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ca60:	d1f3      	bne.n	800ca4a <_strtoul_l.isra.0+0x2e>
 800ca62:	782c      	ldrb	r4, [r5, #0]
 800ca64:	1cb5      	adds	r5, r6, #2
 800ca66:	e7f0      	b.n	800ca4a <_strtoul_l.isra.0+0x2e>
 800ca68:	2c30      	cmp	r4, #48	; 0x30
 800ca6a:	d12f      	bne.n	800cacc <_strtoul_l.isra.0+0xb0>
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	782b      	ldrb	r3, [r5, #0]
 800ca70:	4393      	bics	r3, r2
 800ca72:	2b58      	cmp	r3, #88	; 0x58
 800ca74:	d154      	bne.n	800cb20 <_strtoul_l.isra.0+0x104>
 800ca76:	2710      	movs	r7, #16
 800ca78:	786c      	ldrb	r4, [r5, #1]
 800ca7a:	3502      	adds	r5, #2
 800ca7c:	2001      	movs	r0, #1
 800ca7e:	0039      	movs	r1, r7
 800ca80:	4240      	negs	r0, r0
 800ca82:	f7f3 fb65 	bl	8000150 <__udivsi3>
 800ca86:	0006      	movs	r6, r0
 800ca88:	2001      	movs	r0, #1
 800ca8a:	0039      	movs	r1, r7
 800ca8c:	4240      	negs	r0, r0
 800ca8e:	f7f3 fbe5 	bl	800025c <__aeabi_uidivmod>
 800ca92:	2300      	movs	r3, #0
 800ca94:	9104      	str	r1, [sp, #16]
 800ca96:	2101      	movs	r1, #1
 800ca98:	2201      	movs	r2, #1
 800ca9a:	0018      	movs	r0, r3
 800ca9c:	468c      	mov	ip, r1
 800ca9e:	4252      	negs	r2, r2
 800caa0:	0021      	movs	r1, r4
 800caa2:	3930      	subs	r1, #48	; 0x30
 800caa4:	2909      	cmp	r1, #9
 800caa6:	d813      	bhi.n	800cad0 <_strtoul_l.isra.0+0xb4>
 800caa8:	000c      	movs	r4, r1
 800caaa:	42a7      	cmp	r7, r4
 800caac:	dd1e      	ble.n	800caec <_strtoul_l.isra.0+0xd0>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	db1a      	blt.n	800cae8 <_strtoul_l.isra.0+0xcc>
 800cab2:	0013      	movs	r3, r2
 800cab4:	4286      	cmp	r6, r0
 800cab6:	d306      	bcc.n	800cac6 <_strtoul_l.isra.0+0xaa>
 800cab8:	d102      	bne.n	800cac0 <_strtoul_l.isra.0+0xa4>
 800caba:	9904      	ldr	r1, [sp, #16]
 800cabc:	42a1      	cmp	r1, r4
 800cabe:	db02      	blt.n	800cac6 <_strtoul_l.isra.0+0xaa>
 800cac0:	4663      	mov	r3, ip
 800cac2:	4378      	muls	r0, r7
 800cac4:	1820      	adds	r0, r4, r0
 800cac6:	782c      	ldrb	r4, [r5, #0]
 800cac8:	3501      	adds	r5, #1
 800caca:	e7e9      	b.n	800caa0 <_strtoul_l.isra.0+0x84>
 800cacc:	270a      	movs	r7, #10
 800cace:	e7d5      	b.n	800ca7c <_strtoul_l.isra.0+0x60>
 800cad0:	0021      	movs	r1, r4
 800cad2:	3941      	subs	r1, #65	; 0x41
 800cad4:	2919      	cmp	r1, #25
 800cad6:	d801      	bhi.n	800cadc <_strtoul_l.isra.0+0xc0>
 800cad8:	3c37      	subs	r4, #55	; 0x37
 800cada:	e7e6      	b.n	800caaa <_strtoul_l.isra.0+0x8e>
 800cadc:	0021      	movs	r1, r4
 800cade:	3961      	subs	r1, #97	; 0x61
 800cae0:	2919      	cmp	r1, #25
 800cae2:	d803      	bhi.n	800caec <_strtoul_l.isra.0+0xd0>
 800cae4:	3c57      	subs	r4, #87	; 0x57
 800cae6:	e7e0      	b.n	800caaa <_strtoul_l.isra.0+0x8e>
 800cae8:	0013      	movs	r3, r2
 800caea:	e7ec      	b.n	800cac6 <_strtoul_l.isra.0+0xaa>
 800caec:	2b00      	cmp	r3, #0
 800caee:	da09      	bge.n	800cb04 <_strtoul_l.isra.0+0xe8>
 800caf0:	2322      	movs	r3, #34	; 0x22
 800caf2:	2001      	movs	r0, #1
 800caf4:	9a05      	ldr	r2, [sp, #20]
 800caf6:	4240      	negs	r0, r0
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <_strtoul_l.isra.0+0xfc>
 800cb00:	b007      	add	sp, #28
 800cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb04:	9a02      	ldr	r2, [sp, #8]
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	d000      	beq.n	800cb0c <_strtoul_l.isra.0+0xf0>
 800cb0a:	4240      	negs	r0, r0
 800cb0c:	9a01      	ldr	r2, [sp, #4]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d0f6      	beq.n	800cb00 <_strtoul_l.isra.0+0xe4>
 800cb12:	9a03      	ldr	r2, [sp, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d000      	beq.n	800cb1a <_strtoul_l.isra.0+0xfe>
 800cb18:	1e6a      	subs	r2, r5, #1
 800cb1a:	9b01      	ldr	r3, [sp, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	e7ef      	b.n	800cb00 <_strtoul_l.isra.0+0xe4>
 800cb20:	2430      	movs	r4, #48	; 0x30
 800cb22:	2f00      	cmp	r7, #0
 800cb24:	d1aa      	bne.n	800ca7c <_strtoul_l.isra.0+0x60>
 800cb26:	3708      	adds	r7, #8
 800cb28:	e7a8      	b.n	800ca7c <_strtoul_l.isra.0+0x60>
	...

0800cb2c <_strtoul_r>:
 800cb2c:	b513      	push	{r0, r1, r4, lr}
 800cb2e:	4c05      	ldr	r4, [pc, #20]	; (800cb44 <_strtoul_r+0x18>)
 800cb30:	6824      	ldr	r4, [r4, #0]
 800cb32:	6a24      	ldr	r4, [r4, #32]
 800cb34:	2c00      	cmp	r4, #0
 800cb36:	d100      	bne.n	800cb3a <_strtoul_r+0xe>
 800cb38:	4c03      	ldr	r4, [pc, #12]	; (800cb48 <_strtoul_r+0x1c>)
 800cb3a:	9400      	str	r4, [sp, #0]
 800cb3c:	f7ff ff6e 	bl	800ca1c <_strtoul_l.isra.0>
 800cb40:	bd16      	pop	{r1, r2, r4, pc}
 800cb42:	46c0      	nop			; (mov r8, r8)
 800cb44:	20000414 	.word	0x20000414
 800cb48:	20000478 	.word	0x20000478

0800cb4c <__submore>:
 800cb4c:	000b      	movs	r3, r1
 800cb4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb50:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800cb52:	3344      	adds	r3, #68	; 0x44
 800cb54:	000c      	movs	r4, r1
 800cb56:	429d      	cmp	r5, r3
 800cb58:	d11c      	bne.n	800cb94 <__submore+0x48>
 800cb5a:	2680      	movs	r6, #128	; 0x80
 800cb5c:	00f6      	lsls	r6, r6, #3
 800cb5e:	0031      	movs	r1, r6
 800cb60:	f7fe ff1e 	bl	800b9a0 <_malloc_r>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d102      	bne.n	800cb6e <__submore+0x22>
 800cb68:	2001      	movs	r0, #1
 800cb6a:	4240      	negs	r0, r0
 800cb6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb6e:	0023      	movs	r3, r4
 800cb70:	6360      	str	r0, [r4, #52]	; 0x34
 800cb72:	63a6      	str	r6, [r4, #56]	; 0x38
 800cb74:	3346      	adds	r3, #70	; 0x46
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <__submore+0x70>)
 800cb7a:	54c2      	strb	r2, [r0, r3]
 800cb7c:	0023      	movs	r3, r4
 800cb7e:	3345      	adds	r3, #69	; 0x45
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <__submore+0x74>)
 800cb84:	54c2      	strb	r2, [r0, r3]
 800cb86:	782a      	ldrb	r2, [r5, #0]
 800cb88:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <__submore+0x78>)
 800cb8a:	54c2      	strb	r2, [r0, r3]
 800cb8c:	18c0      	adds	r0, r0, r3
 800cb8e:	6020      	str	r0, [r4, #0]
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7eb      	b.n	800cb6c <__submore+0x20>
 800cb94:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800cb96:	0029      	movs	r1, r5
 800cb98:	0073      	lsls	r3, r6, #1
 800cb9a:	001a      	movs	r2, r3
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	f000 f854 	bl	800cc4a <_realloc_r>
 800cba2:	1e05      	subs	r5, r0, #0
 800cba4:	d0e0      	beq.n	800cb68 <__submore+0x1c>
 800cba6:	1987      	adds	r7, r0, r6
 800cba8:	0001      	movs	r1, r0
 800cbaa:	0032      	movs	r2, r6
 800cbac:	0038      	movs	r0, r7
 800cbae:	f7fe fe9b 	bl	800b8e8 <memcpy>
 800cbb2:	9b01      	ldr	r3, [sp, #4]
 800cbb4:	6027      	str	r7, [r4, #0]
 800cbb6:	6365      	str	r5, [r4, #52]	; 0x34
 800cbb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbba:	e7e9      	b.n	800cb90 <__submore+0x44>
 800cbbc:	000003ff 	.word	0x000003ff
 800cbc0:	000003fe 	.word	0x000003fe
 800cbc4:	000003fd 	.word	0x000003fd

0800cbc8 <__locale_ctype_ptr_l>:
 800cbc8:	30ec      	adds	r0, #236	; 0xec
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <__locale_ctype_ptr>:
 800cbd0:	4b04      	ldr	r3, [pc, #16]	; (800cbe4 <__locale_ctype_ptr+0x14>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d100      	bne.n	800cbdc <__locale_ctype_ptr+0xc>
 800cbda:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <__locale_ctype_ptr+0x18>)
 800cbdc:	33ec      	adds	r3, #236	; 0xec
 800cbde:	6818      	ldr	r0, [r3, #0]
 800cbe0:	4770      	bx	lr
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	20000414 	.word	0x20000414
 800cbe8:	20000478 	.word	0x20000478

0800cbec <__ascii_mbtowc>:
 800cbec:	b082      	sub	sp, #8
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	d100      	bne.n	800cbf4 <__ascii_mbtowc+0x8>
 800cbf2:	a901      	add	r1, sp, #4
 800cbf4:	1e10      	subs	r0, r2, #0
 800cbf6:	d006      	beq.n	800cc06 <__ascii_mbtowc+0x1a>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d006      	beq.n	800cc0a <__ascii_mbtowc+0x1e>
 800cbfc:	7813      	ldrb	r3, [r2, #0]
 800cbfe:	600b      	str	r3, [r1, #0]
 800cc00:	7810      	ldrb	r0, [r2, #0]
 800cc02:	1e43      	subs	r3, r0, #1
 800cc04:	4198      	sbcs	r0, r3
 800cc06:	b002      	add	sp, #8
 800cc08:	4770      	bx	lr
 800cc0a:	2002      	movs	r0, #2
 800cc0c:	4240      	negs	r0, r0
 800cc0e:	e7fa      	b.n	800cc06 <__ascii_mbtowc+0x1a>

0800cc10 <memchr>:
 800cc10:	b2c9      	uxtb	r1, r1
 800cc12:	1882      	adds	r2, r0, r2
 800cc14:	4290      	cmp	r0, r2
 800cc16:	d101      	bne.n	800cc1c <memchr+0xc>
 800cc18:	2000      	movs	r0, #0
 800cc1a:	4770      	bx	lr
 800cc1c:	7803      	ldrb	r3, [r0, #0]
 800cc1e:	428b      	cmp	r3, r1
 800cc20:	d0fb      	beq.n	800cc1a <memchr+0xa>
 800cc22:	3001      	adds	r0, #1
 800cc24:	e7f6      	b.n	800cc14 <memchr+0x4>

0800cc26 <memmove>:
 800cc26:	b510      	push	{r4, lr}
 800cc28:	4288      	cmp	r0, r1
 800cc2a:	d902      	bls.n	800cc32 <memmove+0xc>
 800cc2c:	188b      	adds	r3, r1, r2
 800cc2e:	4298      	cmp	r0, r3
 800cc30:	d308      	bcc.n	800cc44 <memmove+0x1e>
 800cc32:	2300      	movs	r3, #0
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d007      	beq.n	800cc48 <memmove+0x22>
 800cc38:	5ccc      	ldrb	r4, [r1, r3]
 800cc3a:	54c4      	strb	r4, [r0, r3]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	e7f9      	b.n	800cc34 <memmove+0xe>
 800cc40:	5c8b      	ldrb	r3, [r1, r2]
 800cc42:	5483      	strb	r3, [r0, r2]
 800cc44:	3a01      	subs	r2, #1
 800cc46:	d2fb      	bcs.n	800cc40 <memmove+0x1a>
 800cc48:	bd10      	pop	{r4, pc}

0800cc4a <_realloc_r>:
 800cc4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4c:	0007      	movs	r7, r0
 800cc4e:	000d      	movs	r5, r1
 800cc50:	0016      	movs	r6, r2
 800cc52:	2900      	cmp	r1, #0
 800cc54:	d105      	bne.n	800cc62 <_realloc_r+0x18>
 800cc56:	0011      	movs	r1, r2
 800cc58:	f7fe fea2 	bl	800b9a0 <_malloc_r>
 800cc5c:	0004      	movs	r4, r0
 800cc5e:	0020      	movs	r0, r4
 800cc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc62:	2a00      	cmp	r2, #0
 800cc64:	d103      	bne.n	800cc6e <_realloc_r+0x24>
 800cc66:	f7fe fe51 	bl	800b90c <_free_r>
 800cc6a:	0034      	movs	r4, r6
 800cc6c:	e7f7      	b.n	800cc5e <_realloc_r+0x14>
 800cc6e:	f000 f81e 	bl	800ccae <_malloc_usable_size_r>
 800cc72:	002c      	movs	r4, r5
 800cc74:	4286      	cmp	r6, r0
 800cc76:	d9f2      	bls.n	800cc5e <_realloc_r+0x14>
 800cc78:	0031      	movs	r1, r6
 800cc7a:	0038      	movs	r0, r7
 800cc7c:	f7fe fe90 	bl	800b9a0 <_malloc_r>
 800cc80:	1e04      	subs	r4, r0, #0
 800cc82:	d0ec      	beq.n	800cc5e <_realloc_r+0x14>
 800cc84:	0029      	movs	r1, r5
 800cc86:	0032      	movs	r2, r6
 800cc88:	f7fe fe2e 	bl	800b8e8 <memcpy>
 800cc8c:	0029      	movs	r1, r5
 800cc8e:	0038      	movs	r0, r7
 800cc90:	f7fe fe3c 	bl	800b90c <_free_r>
 800cc94:	e7e3      	b.n	800cc5e <_realloc_r+0x14>

0800cc96 <__ascii_wctomb>:
 800cc96:	1e0b      	subs	r3, r1, #0
 800cc98:	d004      	beq.n	800cca4 <__ascii_wctomb+0xe>
 800cc9a:	2aff      	cmp	r2, #255	; 0xff
 800cc9c:	d904      	bls.n	800cca8 <__ascii_wctomb+0x12>
 800cc9e:	238a      	movs	r3, #138	; 0x8a
 800cca0:	6003      	str	r3, [r0, #0]
 800cca2:	3b8b      	subs	r3, #139	; 0x8b
 800cca4:	0018      	movs	r0, r3
 800cca6:	4770      	bx	lr
 800cca8:	700a      	strb	r2, [r1, #0]
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e7fa      	b.n	800cca4 <__ascii_wctomb+0xe>

0800ccae <_malloc_usable_size_r>:
 800ccae:	1f0b      	subs	r3, r1, #4
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	1f18      	subs	r0, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	da01      	bge.n	800ccbc <_malloc_usable_size_r+0xe>
 800ccb8:	580b      	ldr	r3, [r1, r0]
 800ccba:	18c0      	adds	r0, r0, r3
 800ccbc:	4770      	bx	lr
	...

0800ccc0 <pow>:
 800ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc2:	b091      	sub	sp, #68	; 0x44
 800ccc4:	001f      	movs	r7, r3
 800ccc6:	9000      	str	r0, [sp, #0]
 800ccc8:	9101      	str	r1, [sp, #4]
 800ccca:	0016      	movs	r6, r2
 800cccc:	f000 f99c 	bl	800d008 <__ieee754_pow>
 800ccd0:	4bc5      	ldr	r3, [pc, #788]	; (800cfe8 <pow+0x328>)
 800ccd2:	0004      	movs	r4, r0
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	000d      	movs	r5, r1
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	9303      	str	r3, [sp, #12]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	d100      	bne.n	800cce2 <pow+0x22>
 800cce0:	e0d8      	b.n	800ce94 <pow+0x1d4>
 800cce2:	0032      	movs	r2, r6
 800cce4:	003b      	movs	r3, r7
 800cce6:	0030      	movs	r0, r6
 800cce8:	0039      	movs	r1, r7
 800ccea:	f7f5 febb 	bl	8002a64 <__aeabi_dcmpun>
 800ccee:	9004      	str	r0, [sp, #16]
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d000      	beq.n	800ccf6 <pow+0x36>
 800ccf4:	e0ce      	b.n	800ce94 <pow+0x1d4>
 800ccf6:	9a00      	ldr	r2, [sp, #0]
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	0010      	movs	r0, r2
 800ccfc:	0019      	movs	r1, r3
 800ccfe:	f7f5 feb1 	bl	8002a64 <__aeabi_dcmpun>
 800cd02:	2200      	movs	r2, #0
 800cd04:	9005      	str	r0, [sp, #20]
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d020      	beq.n	800cd4c <pow+0x8c>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	0030      	movs	r0, r6
 800cd0e:	0039      	movs	r1, r7
 800cd10:	f7f3 fba4 	bl	800045c <__aeabi_dcmpeq>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d100      	bne.n	800cd1a <pow+0x5a>
 800cd18:	e0bc      	b.n	800ce94 <pow+0x1d4>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	9306      	str	r3, [sp, #24]
 800cd20:	4bb2      	ldr	r3, [pc, #712]	; (800cfec <pow+0x32c>)
 800cd22:	960a      	str	r6, [sp, #40]	; 0x28
 800cd24:	970b      	str	r7, [sp, #44]	; 0x2c
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	9b04      	ldr	r3, [sp, #16]
 800cd2a:	930e      	str	r3, [sp, #56]	; 0x38
 800cd2c:	9b00      	ldr	r3, [sp, #0]
 800cd2e:	9c01      	ldr	r4, [sp, #4]
 800cd30:	9308      	str	r3, [sp, #32]
 800cd32:	9409      	str	r4, [sp, #36]	; 0x24
 800cd34:	4bae      	ldr	r3, [pc, #696]	; (800cff0 <pow+0x330>)
 800cd36:	920c      	str	r2, [sp, #48]	; 0x30
 800cd38:	930d      	str	r3, [sp, #52]	; 0x34
 800cd3a:	9b03      	ldr	r3, [sp, #12]
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d035      	beq.n	800cdac <pow+0xec>
 800cd40:	a806      	add	r0, sp, #24
 800cd42:	f000 fefb 	bl	800db3c <matherr>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d127      	bne.n	800cd9a <pow+0xda>
 800cd4a:	e05c      	b.n	800ce06 <pow+0x146>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	9800      	ldr	r0, [sp, #0]
 800cd50:	9901      	ldr	r1, [sp, #4]
 800cd52:	f7f3 fb83 	bl	800045c <__aeabi_dcmpeq>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d05a      	beq.n	800ce10 <pow+0x150>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	0030      	movs	r0, r6
 800cd60:	0039      	movs	r1, r7
 800cd62:	f7f3 fb7b 	bl	800045c <__aeabi_dcmpeq>
 800cd66:	9004      	str	r0, [sp, #16]
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d022      	beq.n	800cdb2 <pow+0xf2>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	9306      	str	r3, [sp, #24]
 800cd70:	4b9e      	ldr	r3, [pc, #632]	; (800cfec <pow+0x32c>)
 800cd72:	960a      	str	r6, [sp, #40]	; 0x28
 800cd74:	970b      	str	r7, [sp, #44]	; 0x2c
 800cd76:	9307      	str	r3, [sp, #28]
 800cd78:	9b05      	ldr	r3, [sp, #20]
 800cd7a:	930e      	str	r3, [sp, #56]	; 0x38
 800cd7c:	9b00      	ldr	r3, [sp, #0]
 800cd7e:	9c01      	ldr	r4, [sp, #4]
 800cd80:	9308      	str	r3, [sp, #32]
 800cd82:	9409      	str	r4, [sp, #36]	; 0x24
 800cd84:	2300      	movs	r3, #0
 800cd86:	2400      	movs	r4, #0
 800cd88:	930c      	str	r3, [sp, #48]	; 0x30
 800cd8a:	940d      	str	r4, [sp, #52]	; 0x34
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0d6      	beq.n	800cd40 <pow+0x80>
 800cd92:	2200      	movs	r2, #0
 800cd94:	4b96      	ldr	r3, [pc, #600]	; (800cff0 <pow+0x330>)
 800cd96:	920c      	str	r2, [sp, #48]	; 0x30
 800cd98:	930d      	str	r3, [sp, #52]	; 0x34
 800cd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d004      	beq.n	800cdac <pow+0xec>
 800cda2:	f7fe fd63 	bl	800b86c <__errno>
 800cda6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	6003      	str	r3, [r0, #0]
 800cdac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cdae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cdb0:	e070      	b.n	800ce94 <pow+0x1d4>
 800cdb2:	0030      	movs	r0, r6
 800cdb4:	0039      	movs	r1, r7
 800cdb6:	f000 feb9 	bl	800db2c <finite>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d06a      	beq.n	800ce94 <pow+0x1d4>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	0030      	movs	r0, r6
 800cdc4:	0039      	movs	r1, r7
 800cdc6:	f7f3 fb4f 	bl	8000468 <__aeabi_dcmplt>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d062      	beq.n	800ce94 <pow+0x1d4>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	9306      	str	r3, [sp, #24]
 800cdd2:	4b86      	ldr	r3, [pc, #536]	; (800cfec <pow+0x32c>)
 800cdd4:	960a      	str	r6, [sp, #40]	; 0x28
 800cdd6:	970b      	str	r7, [sp, #44]	; 0x2c
 800cdd8:	9307      	str	r3, [sp, #28]
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	930e      	str	r3, [sp, #56]	; 0x38
 800cdde:	9b00      	ldr	r3, [sp, #0]
 800cde0:	9c01      	ldr	r4, [sp, #4]
 800cde2:	9308      	str	r3, [sp, #32]
 800cde4:	9409      	str	r4, [sp, #36]	; 0x24
 800cde6:	4b80      	ldr	r3, [pc, #512]	; (800cfe8 <pow+0x328>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b25b      	sxtb	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d104      	bne.n	800cdfa <pow+0x13a>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	2400      	movs	r4, #0
 800cdf4:	930c      	str	r3, [sp, #48]	; 0x30
 800cdf6:	940d      	str	r4, [sp, #52]	; 0x34
 800cdf8:	e7a2      	b.n	800cd40 <pow+0x80>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	497d      	ldr	r1, [pc, #500]	; (800cff4 <pow+0x334>)
 800cdfe:	900c      	str	r0, [sp, #48]	; 0x30
 800ce00:	910d      	str	r1, [sp, #52]	; 0x34
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d19c      	bne.n	800cd40 <pow+0x80>
 800ce06:	f7fe fd31 	bl	800b86c <__errno>
 800ce0a:	2321      	movs	r3, #33	; 0x21
 800ce0c:	6003      	str	r3, [r0, #0]
 800ce0e:	e7c4      	b.n	800cd9a <pow+0xda>
 800ce10:	0020      	movs	r0, r4
 800ce12:	0029      	movs	r1, r5
 800ce14:	f000 fe8a 	bl	800db2c <finite>
 800ce18:	9003      	str	r0, [sp, #12]
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d000      	beq.n	800ce20 <pow+0x160>
 800ce1e:	e0ab      	b.n	800cf78 <pow+0x2b8>
 800ce20:	9800      	ldr	r0, [sp, #0]
 800ce22:	9901      	ldr	r1, [sp, #4]
 800ce24:	f000 fe82 	bl	800db2c <finite>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d100      	bne.n	800ce2e <pow+0x16e>
 800ce2c:	e0a4      	b.n	800cf78 <pow+0x2b8>
 800ce2e:	0030      	movs	r0, r6
 800ce30:	0039      	movs	r1, r7
 800ce32:	f000 fe7b 	bl	800db2c <finite>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d100      	bne.n	800ce3c <pow+0x17c>
 800ce3a:	e09d      	b.n	800cf78 <pow+0x2b8>
 800ce3c:	002b      	movs	r3, r5
 800ce3e:	0022      	movs	r2, r4
 800ce40:	0020      	movs	r0, r4
 800ce42:	0029      	movs	r1, r5
 800ce44:	f7f5 fe0e 	bl	8002a64 <__aeabi_dcmpun>
 800ce48:	2500      	movs	r5, #0
 800ce4a:	4b67      	ldr	r3, [pc, #412]	; (800cfe8 <pow+0x328>)
 800ce4c:	ac06      	add	r4, sp, #24
 800ce4e:	575d      	ldrsb	r5, [r3, r5]
 800ce50:	4b66      	ldr	r3, [pc, #408]	; (800cfec <pow+0x32c>)
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d02f      	beq.n	800ceb6 <pow+0x1f6>
 800ce56:	2201      	movs	r2, #1
 800ce58:	6063      	str	r3, [r4, #4]
 800ce5a:	9b03      	ldr	r3, [sp, #12]
 800ce5c:	9206      	str	r2, [sp, #24]
 800ce5e:	6223      	str	r3, [r4, #32]
 800ce60:	6126      	str	r6, [r4, #16]
 800ce62:	6167      	str	r7, [r4, #20]
 800ce64:	9a00      	ldr	r2, [sp, #0]
 800ce66:	9b01      	ldr	r3, [sp, #4]
 800ce68:	60a2      	str	r2, [r4, #8]
 800ce6a:	60e3      	str	r3, [r4, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	2300      	movs	r3, #0
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	d113      	bne.n	800ce9c <pow+0x1dc>
 800ce74:	61a2      	str	r2, [r4, #24]
 800ce76:	61e3      	str	r3, [r4, #28]
 800ce78:	0020      	movs	r0, r4
 800ce7a:	f000 fe5f 	bl	800db3c <matherr>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d014      	beq.n	800ceac <pow+0x1ec>
 800ce82:	6a23      	ldr	r3, [r4, #32]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <pow+0x1d0>
 800ce88:	f7fe fcf0 	bl	800b86c <__errno>
 800ce8c:	6a23      	ldr	r3, [r4, #32]
 800ce8e:	6003      	str	r3, [r0, #0]
 800ce90:	69e5      	ldr	r5, [r4, #28]
 800ce92:	69a4      	ldr	r4, [r4, #24]
 800ce94:	0020      	movs	r0, r4
 800ce96:	0029      	movs	r1, r5
 800ce98:	b011      	add	sp, #68	; 0x44
 800ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9c:	0010      	movs	r0, r2
 800ce9e:	0019      	movs	r1, r3
 800cea0:	f7f4 fc16 	bl	80016d0 <__aeabi_ddiv>
 800cea4:	61a0      	str	r0, [r4, #24]
 800cea6:	61e1      	str	r1, [r4, #28]
 800cea8:	2d02      	cmp	r5, #2
 800ceaa:	d1e5      	bne.n	800ce78 <pow+0x1b8>
 800ceac:	f7fe fcde 	bl	800b86c <__errno>
 800ceb0:	2321      	movs	r3, #33	; 0x21
 800ceb2:	6003      	str	r3, [r0, #0]
 800ceb4:	e7e5      	b.n	800ce82 <pow+0x1c2>
 800ceb6:	2203      	movs	r2, #3
 800ceb8:	6063      	str	r3, [r4, #4]
 800ceba:	9206      	str	r2, [sp, #24]
 800cebc:	6220      	str	r0, [r4, #32]
 800cebe:	9a00      	ldr	r2, [sp, #0]
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	6126      	str	r6, [r4, #16]
 800cec4:	6167      	str	r7, [r4, #20]
 800cec6:	60a2      	str	r2, [r4, #8]
 800cec8:	60e3      	str	r3, [r4, #12]
 800ceca:	2d00      	cmp	r5, #0
 800cecc:	d12c      	bne.n	800cf28 <pow+0x268>
 800cece:	9800      	ldr	r0, [sp, #0]
 800ced0:	9901      	ldr	r1, [sp, #4]
 800ced2:	22e0      	movs	r2, #224	; 0xe0
 800ced4:	4b48      	ldr	r3, [pc, #288]	; (800cff8 <pow+0x338>)
 800ced6:	0612      	lsls	r2, r2, #24
 800ced8:	61a2      	str	r2, [r4, #24]
 800ceda:	61e3      	str	r3, [r4, #28]
 800cedc:	2200      	movs	r2, #0
 800cede:	2300      	movs	r3, #0
 800cee0:	f7f3 fac2 	bl	8000468 <__aeabi_dcmplt>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d040      	beq.n	800cf6a <pow+0x2aa>
 800cee8:	2200      	movs	r2, #0
 800ceea:	4b44      	ldr	r3, [pc, #272]	; (800cffc <pow+0x33c>)
 800ceec:	0030      	movs	r0, r6
 800ceee:	0039      	movs	r1, r7
 800cef0:	f7f5 f822 	bl	8001f38 <__aeabi_dmul>
 800cef4:	0006      	movs	r6, r0
 800cef6:	000f      	movs	r7, r1
 800cef8:	f000 fe28 	bl	800db4c <rint>
 800cefc:	0002      	movs	r2, r0
 800cefe:	000b      	movs	r3, r1
 800cf00:	0030      	movs	r0, r6
 800cf02:	0039      	movs	r1, r7
 800cf04:	f7f3 faaa 	bl	800045c <__aeabi_dcmpeq>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d104      	bne.n	800cf16 <pow+0x256>
 800cf0c:	22e0      	movs	r2, #224	; 0xe0
 800cf0e:	4b3c      	ldr	r3, [pc, #240]	; (800d000 <pow+0x340>)
 800cf10:	0612      	lsls	r2, r2, #24
 800cf12:	61a2      	str	r2, [r4, #24]
 800cf14:	61e3      	str	r3, [r4, #28]
 800cf16:	4b34      	ldr	r3, [pc, #208]	; (800cfe8 <pow+0x328>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d124      	bne.n	800cf6a <pow+0x2aa>
 800cf20:	f7fe fca4 	bl	800b86c <__errno>
 800cf24:	2322      	movs	r3, #34	; 0x22
 800cf26:	e7c4      	b.n	800ceb2 <pow+0x1f2>
 800cf28:	2200      	movs	r2, #0
 800cf2a:	9800      	ldr	r0, [sp, #0]
 800cf2c:	9901      	ldr	r1, [sp, #4]
 800cf2e:	4b35      	ldr	r3, [pc, #212]	; (800d004 <pow+0x344>)
 800cf30:	61a2      	str	r2, [r4, #24]
 800cf32:	61e3      	str	r3, [r4, #28]
 800cf34:	2200      	movs	r2, #0
 800cf36:	2300      	movs	r3, #0
 800cf38:	f7f3 fa96 	bl	8000468 <__aeabi_dcmplt>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d0ea      	beq.n	800cf16 <pow+0x256>
 800cf40:	2200      	movs	r2, #0
 800cf42:	4b2e      	ldr	r3, [pc, #184]	; (800cffc <pow+0x33c>)
 800cf44:	0030      	movs	r0, r6
 800cf46:	0039      	movs	r1, r7
 800cf48:	f7f4 fff6 	bl	8001f38 <__aeabi_dmul>
 800cf4c:	0006      	movs	r6, r0
 800cf4e:	000f      	movs	r7, r1
 800cf50:	f000 fdfc 	bl	800db4c <rint>
 800cf54:	0002      	movs	r2, r0
 800cf56:	000b      	movs	r3, r1
 800cf58:	0030      	movs	r0, r6
 800cf5a:	0039      	movs	r1, r7
 800cf5c:	f7f3 fa7e 	bl	800045c <__aeabi_dcmpeq>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d1d8      	bne.n	800cf16 <pow+0x256>
 800cf64:	2200      	movs	r2, #0
 800cf66:	4b23      	ldr	r3, [pc, #140]	; (800cff4 <pow+0x334>)
 800cf68:	e7d3      	b.n	800cf12 <pow+0x252>
 800cf6a:	0020      	movs	r0, r4
 800cf6c:	f000 fde6 	bl	800db3c <matherr>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d000      	beq.n	800cf76 <pow+0x2b6>
 800cf74:	e785      	b.n	800ce82 <pow+0x1c2>
 800cf76:	e7d3      	b.n	800cf20 <pow+0x260>
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	0020      	movs	r0, r4
 800cf7e:	0029      	movs	r1, r5
 800cf80:	f7f3 fa6c 	bl	800045c <__aeabi_dcmpeq>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d100      	bne.n	800cf8a <pow+0x2ca>
 800cf88:	e784      	b.n	800ce94 <pow+0x1d4>
 800cf8a:	9800      	ldr	r0, [sp, #0]
 800cf8c:	9901      	ldr	r1, [sp, #4]
 800cf8e:	f000 fdcd 	bl	800db2c <finite>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d100      	bne.n	800cf98 <pow+0x2d8>
 800cf96:	e77d      	b.n	800ce94 <pow+0x1d4>
 800cf98:	0030      	movs	r0, r6
 800cf9a:	0039      	movs	r1, r7
 800cf9c:	f000 fdc6 	bl	800db2c <finite>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d100      	bne.n	800cfa6 <pow+0x2e6>
 800cfa4:	e776      	b.n	800ce94 <pow+0x1d4>
 800cfa6:	2304      	movs	r3, #4
 800cfa8:	9306      	str	r3, [sp, #24]
 800cfaa:	4b10      	ldr	r3, [pc, #64]	; (800cfec <pow+0x32c>)
 800cfac:	960a      	str	r6, [sp, #40]	; 0x28
 800cfae:	970b      	str	r7, [sp, #44]	; 0x2c
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfb6:	9b00      	ldr	r3, [sp, #0]
 800cfb8:	9c01      	ldr	r4, [sp, #4]
 800cfba:	9308      	str	r3, [sp, #32]
 800cfbc:	9409      	str	r4, [sp, #36]	; 0x24
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	2400      	movs	r4, #0
 800cfc2:	930c      	str	r3, [sp, #48]	; 0x30
 800cfc4:	940d      	str	r4, [sp, #52]	; 0x34
 800cfc6:	4b08      	ldr	r3, [pc, #32]	; (800cfe8 <pow+0x328>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	b25b      	sxtb	r3, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d103      	bne.n	800cfd8 <pow+0x318>
 800cfd0:	f7fe fc4c 	bl	800b86c <__errno>
 800cfd4:	2322      	movs	r3, #34	; 0x22
 800cfd6:	e719      	b.n	800ce0c <pow+0x14c>
 800cfd8:	a806      	add	r0, sp, #24
 800cfda:	f000 fdaf 	bl	800db3c <matherr>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d000      	beq.n	800cfe4 <pow+0x324>
 800cfe2:	e6da      	b.n	800cd9a <pow+0xda>
 800cfe4:	e7f4      	b.n	800cfd0 <pow+0x310>
 800cfe6:	46c0      	nop			; (mov r8, r8)
 800cfe8:	200005e4 	.word	0x200005e4
 800cfec:	08010f6f 	.word	0x08010f6f
 800cff0:	3ff00000 	.word	0x3ff00000
 800cff4:	fff00000 	.word	0xfff00000
 800cff8:	47efffff 	.word	0x47efffff
 800cffc:	3fe00000 	.word	0x3fe00000
 800d000:	c7efffff 	.word	0xc7efffff
 800d004:	7ff00000 	.word	0x7ff00000

0800d008 <__ieee754_pow>:
 800d008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d00a:	b097      	sub	sp, #92	; 0x5c
 800d00c:	9200      	str	r2, [sp, #0]
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	000e      	movs	r6, r1
 800d014:	9106      	str	r1, [sp, #24]
 800d016:	9900      	ldr	r1, [sp, #0]
 800d018:	005d      	lsls	r5, r3, #1
 800d01a:	9302      	str	r3, [sp, #8]
 800d01c:	000b      	movs	r3, r1
 800d01e:	086d      	lsrs	r5, r5, #1
 800d020:	0007      	movs	r7, r0
 800d022:	432b      	orrs	r3, r5
 800d024:	d101      	bne.n	800d02a <__ieee754_pow+0x22>
 800d026:	f000 fc94 	bl	800d952 <__ieee754_pow+0x94a>
 800d02a:	4b74      	ldr	r3, [pc, #464]	; (800d1fc <__ieee754_pow+0x1f4>)
 800d02c:	0074      	lsls	r4, r6, #1
 800d02e:	0864      	lsrs	r4, r4, #1
 800d030:	469c      	mov	ip, r3
 800d032:	429c      	cmp	r4, r3
 800d034:	dc0b      	bgt.n	800d04e <__ieee754_pow+0x46>
 800d036:	d104      	bne.n	800d042 <__ieee754_pow+0x3a>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d108      	bne.n	800d04e <__ieee754_pow+0x46>
 800d03c:	42a5      	cmp	r5, r4
 800d03e:	dc0c      	bgt.n	800d05a <__ieee754_pow+0x52>
 800d040:	e001      	b.n	800d046 <__ieee754_pow+0x3e>
 800d042:	429d      	cmp	r5, r3
 800d044:	dc03      	bgt.n	800d04e <__ieee754_pow+0x46>
 800d046:	4565      	cmp	r5, ip
 800d048:	d10c      	bne.n	800d064 <__ieee754_pow+0x5c>
 800d04a:	2900      	cmp	r1, #0
 800d04c:	d00a      	beq.n	800d064 <__ieee754_pow+0x5c>
 800d04e:	4b6c      	ldr	r3, [pc, #432]	; (800d200 <__ieee754_pow+0x1f8>)
 800d050:	18e4      	adds	r4, r4, r3
 800d052:	4327      	orrs	r7, r4
 800d054:	d101      	bne.n	800d05a <__ieee754_pow+0x52>
 800d056:	f000 fc7c 	bl	800d952 <__ieee754_pow+0x94a>
 800d05a:	486a      	ldr	r0, [pc, #424]	; (800d204 <__ieee754_pow+0x1fc>)
 800d05c:	f000 fd70 	bl	800db40 <nan>
 800d060:	b017      	add	sp, #92	; 0x5c
 800d062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d064:	2300      	movs	r3, #0
 800d066:	9304      	str	r3, [sp, #16]
 800d068:	2e00      	cmp	r6, #0
 800d06a:	da17      	bge.n	800d09c <__ieee754_pow+0x94>
 800d06c:	4a66      	ldr	r2, [pc, #408]	; (800d208 <__ieee754_pow+0x200>)
 800d06e:	4295      	cmp	r5, r2
 800d070:	dc47      	bgt.n	800d102 <__ieee754_pow+0xfa>
 800d072:	4a66      	ldr	r2, [pc, #408]	; (800d20c <__ieee754_pow+0x204>)
 800d074:	4295      	cmp	r5, r2
 800d076:	dd11      	ble.n	800d09c <__ieee754_pow+0x94>
 800d078:	4b65      	ldr	r3, [pc, #404]	; (800d210 <__ieee754_pow+0x208>)
 800d07a:	152a      	asrs	r2, r5, #20
 800d07c:	18d2      	adds	r2, r2, r3
 800d07e:	2a14      	cmp	r2, #20
 800d080:	dd21      	ble.n	800d0c6 <__ieee754_pow+0xbe>
 800d082:	2034      	movs	r0, #52	; 0x34
 800d084:	1a82      	subs	r2, r0, r2
 800d086:	9800      	ldr	r0, [sp, #0]
 800d088:	40d0      	lsrs	r0, r2
 800d08a:	0003      	movs	r3, r0
 800d08c:	4093      	lsls	r3, r2
 800d08e:	4299      	cmp	r1, r3
 800d090:	d104      	bne.n	800d09c <__ieee754_pow+0x94>
 800d092:	2201      	movs	r2, #1
 800d094:	4010      	ands	r0, r2
 800d096:	1892      	adds	r2, r2, r2
 800d098:	1a13      	subs	r3, r2, r0
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d155      	bne.n	800d14c <__ieee754_pow+0x144>
 800d0a0:	4565      	cmp	r5, ip
 800d0a2:	d11f      	bne.n	800d0e4 <__ieee754_pow+0xdc>
 800d0a4:	4b56      	ldr	r3, [pc, #344]	; (800d200 <__ieee754_pow+0x1f8>)
 800d0a6:	18e3      	adds	r3, r4, r3
 800d0a8:	431f      	orrs	r7, r3
 800d0aa:	d101      	bne.n	800d0b0 <__ieee754_pow+0xa8>
 800d0ac:	f000 fc51 	bl	800d952 <__ieee754_pow+0x94a>
 800d0b0:	4b56      	ldr	r3, [pc, #344]	; (800d20c <__ieee754_pow+0x204>)
 800d0b2:	429c      	cmp	r4, r3
 800d0b4:	dd27      	ble.n	800d106 <__ieee754_pow+0xfe>
 800d0b6:	9800      	ldr	r0, [sp, #0]
 800d0b8:	9901      	ldr	r1, [sp, #4]
 800d0ba:	9b02      	ldr	r3, [sp, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	dacf      	bge.n	800d060 <__ieee754_pow+0x58>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	e7cc      	b.n	800d060 <__ieee754_pow+0x58>
 800d0c6:	2900      	cmp	r1, #0
 800d0c8:	d140      	bne.n	800d14c <__ieee754_pow+0x144>
 800d0ca:	2314      	movs	r3, #20
 800d0cc:	1a9a      	subs	r2, r3, r2
 800d0ce:	002b      	movs	r3, r5
 800d0d0:	4113      	asrs	r3, r2
 800d0d2:	0019      	movs	r1, r3
 800d0d4:	4091      	lsls	r1, r2
 800d0d6:	428d      	cmp	r5, r1
 800d0d8:	d104      	bne.n	800d0e4 <__ieee754_pow+0xdc>
 800d0da:	2201      	movs	r2, #1
 800d0dc:	4013      	ands	r3, r2
 800d0de:	1892      	adds	r2, r2, r2
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	4b4b      	ldr	r3, [pc, #300]	; (800d214 <__ieee754_pow+0x20c>)
 800d0e6:	429d      	cmp	r5, r3
 800d0e8:	d119      	bne.n	800d11e <__ieee754_pow+0x116>
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	0038      	movs	r0, r7
 800d0ee:	0031      	movs	r1, r6
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dab5      	bge.n	800d060 <__ieee754_pow+0x58>
 800d0f4:	003a      	movs	r2, r7
 800d0f6:	0033      	movs	r3, r6
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	4946      	ldr	r1, [pc, #280]	; (800d214 <__ieee754_pow+0x20c>)
 800d0fc:	f7f4 fae8 	bl	80016d0 <__aeabi_ddiv>
 800d100:	e7ae      	b.n	800d060 <__ieee754_pow+0x58>
 800d102:	2302      	movs	r3, #2
 800d104:	e7c9      	b.n	800d09a <__ieee754_pow+0x92>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dad9      	bge.n	800d0c0 <__ieee754_pow+0xb8>
 800d10c:	2280      	movs	r2, #128	; 0x80
 800d10e:	0612      	lsls	r2, r2, #24
 800d110:	4694      	mov	ip, r2
 800d112:	9b00      	ldr	r3, [sp, #0]
 800d114:	0018      	movs	r0, r3
 800d116:	9b01      	ldr	r3, [sp, #4]
 800d118:	4463      	add	r3, ip
 800d11a:	0019      	movs	r1, r3
 800d11c:	e7a0      	b.n	800d060 <__ieee754_pow+0x58>
 800d11e:	2380      	movs	r3, #128	; 0x80
 800d120:	9a02      	ldr	r2, [sp, #8]
 800d122:	05db      	lsls	r3, r3, #23
 800d124:	429a      	cmp	r2, r3
 800d126:	d106      	bne.n	800d136 <__ieee754_pow+0x12e>
 800d128:	003a      	movs	r2, r7
 800d12a:	0033      	movs	r3, r6
 800d12c:	0038      	movs	r0, r7
 800d12e:	0031      	movs	r1, r6
 800d130:	f7f4 ff02 	bl	8001f38 <__aeabi_dmul>
 800d134:	e794      	b.n	800d060 <__ieee754_pow+0x58>
 800d136:	4b38      	ldr	r3, [pc, #224]	; (800d218 <__ieee754_pow+0x210>)
 800d138:	9a02      	ldr	r2, [sp, #8]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d106      	bne.n	800d14c <__ieee754_pow+0x144>
 800d13e:	2e00      	cmp	r6, #0
 800d140:	db04      	blt.n	800d14c <__ieee754_pow+0x144>
 800d142:	0038      	movs	r0, r7
 800d144:	0031      	movs	r1, r6
 800d146:	f000 fc3d 	bl	800d9c4 <__ieee754_sqrt>
 800d14a:	e789      	b.n	800d060 <__ieee754_pow+0x58>
 800d14c:	0038      	movs	r0, r7
 800d14e:	0031      	movs	r1, r6
 800d150:	f000 fce8 	bl	800db24 <fabs>
 800d154:	2f00      	cmp	r7, #0
 800d156:	d127      	bne.n	800d1a8 <__ieee754_pow+0x1a0>
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d004      	beq.n	800d166 <__ieee754_pow+0x15e>
 800d15c:	4a2d      	ldr	r2, [pc, #180]	; (800d214 <__ieee754_pow+0x20c>)
 800d15e:	00b3      	lsls	r3, r6, #2
 800d160:	089b      	lsrs	r3, r3, #2
 800d162:	4293      	cmp	r3, r2
 800d164:	d120      	bne.n	800d1a8 <__ieee754_pow+0x1a0>
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	da05      	bge.n	800d178 <__ieee754_pow+0x170>
 800d16c:	0002      	movs	r2, r0
 800d16e:	000b      	movs	r3, r1
 800d170:	2000      	movs	r0, #0
 800d172:	4928      	ldr	r1, [pc, #160]	; (800d214 <__ieee754_pow+0x20c>)
 800d174:	f7f4 faac 	bl	80016d0 <__aeabi_ddiv>
 800d178:	9b06      	ldr	r3, [sp, #24]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	db00      	blt.n	800d180 <__ieee754_pow+0x178>
 800d17e:	e76f      	b.n	800d060 <__ieee754_pow+0x58>
 800d180:	4b1f      	ldr	r3, [pc, #124]	; (800d200 <__ieee754_pow+0x1f8>)
 800d182:	18e4      	adds	r4, r4, r3
 800d184:	9b04      	ldr	r3, [sp, #16]
 800d186:	431c      	orrs	r4, r3
 800d188:	d106      	bne.n	800d198 <__ieee754_pow+0x190>
 800d18a:	0002      	movs	r2, r0
 800d18c:	000b      	movs	r3, r1
 800d18e:	f7f5 f953 	bl	8002438 <__aeabi_dsub>
 800d192:	0002      	movs	r2, r0
 800d194:	000b      	movs	r3, r1
 800d196:	e7b1      	b.n	800d0fc <__ieee754_pow+0xf4>
 800d198:	9b04      	ldr	r3, [sp, #16]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d000      	beq.n	800d1a0 <__ieee754_pow+0x198>
 800d19e:	e75f      	b.n	800d060 <__ieee754_pow+0x58>
 800d1a0:	2480      	movs	r4, #128	; 0x80
 800d1a2:	0624      	lsls	r4, r4, #24
 800d1a4:	190b      	adds	r3, r1, r4
 800d1a6:	e7b8      	b.n	800d11a <__ieee754_pow+0x112>
 800d1a8:	0ff3      	lsrs	r3, r6, #31
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	9310      	str	r3, [sp, #64]	; 0x40
 800d1ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1b0:	9b04      	ldr	r3, [sp, #16]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	d104      	bne.n	800d1c0 <__ieee754_pow+0x1b8>
 800d1b6:	003a      	movs	r2, r7
 800d1b8:	0033      	movs	r3, r6
 800d1ba:	0038      	movs	r0, r7
 800d1bc:	0031      	movs	r1, r6
 800d1be:	e7e6      	b.n	800d18e <__ieee754_pow+0x186>
 800d1c0:	4b16      	ldr	r3, [pc, #88]	; (800d21c <__ieee754_pow+0x214>)
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	dc00      	bgt.n	800d1c8 <__ieee754_pow+0x1c0>
 800d1c6:	e0f5      	b.n	800d3b4 <__ieee754_pow+0x3ac>
 800d1c8:	4b15      	ldr	r3, [pc, #84]	; (800d220 <__ieee754_pow+0x218>)
 800d1ca:	429d      	cmp	r5, r3
 800d1cc:	dd0b      	ble.n	800d1e6 <__ieee754_pow+0x1de>
 800d1ce:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <__ieee754_pow+0x204>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	dc0e      	bgt.n	800d1f2 <__ieee754_pow+0x1ea>
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	db00      	blt.n	800d1dc <__ieee754_pow+0x1d4>
 800d1da:	e771      	b.n	800d0c0 <__ieee754_pow+0xb8>
 800d1dc:	4a11      	ldr	r2, [pc, #68]	; (800d224 <__ieee754_pow+0x21c>)
 800d1de:	4b12      	ldr	r3, [pc, #72]	; (800d228 <__ieee754_pow+0x220>)
 800d1e0:	0010      	movs	r0, r2
 800d1e2:	0019      	movs	r1, r3
 800d1e4:	e7a4      	b.n	800d130 <__ieee754_pow+0x128>
 800d1e6:	4b11      	ldr	r3, [pc, #68]	; (800d22c <__ieee754_pow+0x224>)
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	ddf3      	ble.n	800d1d4 <__ieee754_pow+0x1cc>
 800d1ec:	4b09      	ldr	r3, [pc, #36]	; (800d214 <__ieee754_pow+0x20c>)
 800d1ee:	429c      	cmp	r4, r3
 800d1f0:	dd1e      	ble.n	800d230 <__ieee754_pow+0x228>
 800d1f2:	9b02      	ldr	r3, [sp, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dcf1      	bgt.n	800d1dc <__ieee754_pow+0x1d4>
 800d1f8:	e762      	b.n	800d0c0 <__ieee754_pow+0xb8>
 800d1fa:	46c0      	nop			; (mov r8, r8)
 800d1fc:	7ff00000 	.word	0x7ff00000
 800d200:	c0100000 	.word	0xc0100000
 800d204:	0800def2 	.word	0x0800def2
 800d208:	433fffff 	.word	0x433fffff
 800d20c:	3fefffff 	.word	0x3fefffff
 800d210:	fffffc01 	.word	0xfffffc01
 800d214:	3ff00000 	.word	0x3ff00000
 800d218:	3fe00000 	.word	0x3fe00000
 800d21c:	41e00000 	.word	0x41e00000
 800d220:	43f00000 	.word	0x43f00000
 800d224:	8800759c 	.word	0x8800759c
 800d228:	7e37e43c 	.word	0x7e37e43c
 800d22c:	3feffffe 	.word	0x3feffffe
 800d230:	2200      	movs	r2, #0
 800d232:	4b52      	ldr	r3, [pc, #328]	; (800d37c <__ieee754_pow+0x374>)
 800d234:	f7f5 f900 	bl	8002438 <__aeabi_dsub>
 800d238:	22c0      	movs	r2, #192	; 0xc0
 800d23a:	4b51      	ldr	r3, [pc, #324]	; (800d380 <__ieee754_pow+0x378>)
 800d23c:	05d2      	lsls	r2, r2, #23
 800d23e:	0006      	movs	r6, r0
 800d240:	000f      	movs	r7, r1
 800d242:	f7f4 fe79 	bl	8001f38 <__aeabi_dmul>
 800d246:	4a4f      	ldr	r2, [pc, #316]	; (800d384 <__ieee754_pow+0x37c>)
 800d248:	9002      	str	r0, [sp, #8]
 800d24a:	9103      	str	r1, [sp, #12]
 800d24c:	4b4e      	ldr	r3, [pc, #312]	; (800d388 <__ieee754_pow+0x380>)
 800d24e:	0030      	movs	r0, r6
 800d250:	0039      	movs	r1, r7
 800d252:	f7f4 fe71 	bl	8001f38 <__aeabi_dmul>
 800d256:	2200      	movs	r2, #0
 800d258:	9006      	str	r0, [sp, #24]
 800d25a:	9107      	str	r1, [sp, #28]
 800d25c:	4b4b      	ldr	r3, [pc, #300]	; (800d38c <__ieee754_pow+0x384>)
 800d25e:	0030      	movs	r0, r6
 800d260:	0039      	movs	r1, r7
 800d262:	f7f4 fe69 	bl	8001f38 <__aeabi_dmul>
 800d266:	0002      	movs	r2, r0
 800d268:	000b      	movs	r3, r1
 800d26a:	4849      	ldr	r0, [pc, #292]	; (800d390 <__ieee754_pow+0x388>)
 800d26c:	4949      	ldr	r1, [pc, #292]	; (800d394 <__ieee754_pow+0x38c>)
 800d26e:	f7f5 f8e3 	bl	8002438 <__aeabi_dsub>
 800d272:	0032      	movs	r2, r6
 800d274:	003b      	movs	r3, r7
 800d276:	f7f4 fe5f 	bl	8001f38 <__aeabi_dmul>
 800d27a:	0002      	movs	r2, r0
 800d27c:	000b      	movs	r3, r1
 800d27e:	2000      	movs	r0, #0
 800d280:	4945      	ldr	r1, [pc, #276]	; (800d398 <__ieee754_pow+0x390>)
 800d282:	f7f5 f8d9 	bl	8002438 <__aeabi_dsub>
 800d286:	0032      	movs	r2, r6
 800d288:	0004      	movs	r4, r0
 800d28a:	000d      	movs	r5, r1
 800d28c:	003b      	movs	r3, r7
 800d28e:	0030      	movs	r0, r6
 800d290:	0039      	movs	r1, r7
 800d292:	f7f4 fe51 	bl	8001f38 <__aeabi_dmul>
 800d296:	0002      	movs	r2, r0
 800d298:	000b      	movs	r3, r1
 800d29a:	0020      	movs	r0, r4
 800d29c:	0029      	movs	r1, r5
 800d29e:	f7f4 fe4b 	bl	8001f38 <__aeabi_dmul>
 800d2a2:	4a3e      	ldr	r2, [pc, #248]	; (800d39c <__ieee754_pow+0x394>)
 800d2a4:	4b36      	ldr	r3, [pc, #216]	; (800d380 <__ieee754_pow+0x378>)
 800d2a6:	f7f4 fe47 	bl	8001f38 <__aeabi_dmul>
 800d2aa:	0002      	movs	r2, r0
 800d2ac:	000b      	movs	r3, r1
 800d2ae:	9806      	ldr	r0, [sp, #24]
 800d2b0:	9907      	ldr	r1, [sp, #28]
 800d2b2:	f7f5 f8c1 	bl	8002438 <__aeabi_dsub>
 800d2b6:	0002      	movs	r2, r0
 800d2b8:	000b      	movs	r3, r1
 800d2ba:	0004      	movs	r4, r0
 800d2bc:	000d      	movs	r5, r1
 800d2be:	9802      	ldr	r0, [sp, #8]
 800d2c0:	9903      	ldr	r1, [sp, #12]
 800d2c2:	f7f3 fef5 	bl	80010b0 <__aeabi_dadd>
 800d2c6:	9a02      	ldr	r2, [sp, #8]
 800d2c8:	9b03      	ldr	r3, [sp, #12]
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	9006      	str	r0, [sp, #24]
 800d2ce:	9107      	str	r1, [sp, #28]
 800d2d0:	f7f5 f8b2 	bl	8002438 <__aeabi_dsub>
 800d2d4:	0002      	movs	r2, r0
 800d2d6:	000b      	movs	r3, r1
 800d2d8:	0020      	movs	r0, r4
 800d2da:	0029      	movs	r1, r5
 800d2dc:	f7f5 f8ac 	bl	8002438 <__aeabi_dsub>
 800d2e0:	9b04      	ldr	r3, [sp, #16]
 800d2e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	0006      	movs	r6, r0
 800d2e8:	000f      	movs	r7, r1
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	d000      	beq.n	800d2f0 <__ieee754_pow+0x2e8>
 800d2ee:	e1da      	b.n	800d6a6 <__ieee754_pow+0x69e>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4c2b      	ldr	r4, [pc, #172]	; (800d3a0 <__ieee754_pow+0x398>)
 800d2f4:	9302      	str	r3, [sp, #8]
 800d2f6:	9403      	str	r4, [sp, #12]
 800d2f8:	9c00      	ldr	r4, [sp, #0]
 800d2fa:	9d01      	ldr	r5, [sp, #4]
 800d2fc:	9800      	ldr	r0, [sp, #0]
 800d2fe:	9901      	ldr	r1, [sp, #4]
 800d300:	2400      	movs	r4, #0
 800d302:	002b      	movs	r3, r5
 800d304:	0022      	movs	r2, r4
 800d306:	f7f5 f897 	bl	8002438 <__aeabi_dsub>
 800d30a:	9a06      	ldr	r2, [sp, #24]
 800d30c:	9b07      	ldr	r3, [sp, #28]
 800d30e:	f7f4 fe13 	bl	8001f38 <__aeabi_dmul>
 800d312:	9a00      	ldr	r2, [sp, #0]
 800d314:	9b01      	ldr	r3, [sp, #4]
 800d316:	9004      	str	r0, [sp, #16]
 800d318:	9105      	str	r1, [sp, #20]
 800d31a:	0030      	movs	r0, r6
 800d31c:	0039      	movs	r1, r7
 800d31e:	f7f4 fe0b 	bl	8001f38 <__aeabi_dmul>
 800d322:	0002      	movs	r2, r0
 800d324:	000b      	movs	r3, r1
 800d326:	9804      	ldr	r0, [sp, #16]
 800d328:	9905      	ldr	r1, [sp, #20]
 800d32a:	f7f3 fec1 	bl	80010b0 <__aeabi_dadd>
 800d32e:	0022      	movs	r2, r4
 800d330:	002b      	movs	r3, r5
 800d332:	9004      	str	r0, [sp, #16]
 800d334:	9105      	str	r1, [sp, #20]
 800d336:	9806      	ldr	r0, [sp, #24]
 800d338:	9907      	ldr	r1, [sp, #28]
 800d33a:	f7f4 fdfd 	bl	8001f38 <__aeabi_dmul>
 800d33e:	0006      	movs	r6, r0
 800d340:	000f      	movs	r7, r1
 800d342:	000b      	movs	r3, r1
 800d344:	0002      	movs	r2, r0
 800d346:	9804      	ldr	r0, [sp, #16]
 800d348:	9905      	ldr	r1, [sp, #20]
 800d34a:	9606      	str	r6, [sp, #24]
 800d34c:	9707      	str	r7, [sp, #28]
 800d34e:	f7f3 feaf 	bl	80010b0 <__aeabi_dadd>
 800d352:	4b14      	ldr	r3, [pc, #80]	; (800d3a4 <__ieee754_pow+0x39c>)
 800d354:	0005      	movs	r5, r0
 800d356:	000c      	movs	r4, r1
 800d358:	9108      	str	r1, [sp, #32]
 800d35a:	4299      	cmp	r1, r3
 800d35c:	dc00      	bgt.n	800d360 <__ieee754_pow+0x358>
 800d35e:	e2d4      	b.n	800d90a <__ieee754_pow+0x902>
 800d360:	4b11      	ldr	r3, [pc, #68]	; (800d3a8 <__ieee754_pow+0x3a0>)
 800d362:	18cb      	adds	r3, r1, r3
 800d364:	4303      	orrs	r3, r0
 800d366:	d100      	bne.n	800d36a <__ieee754_pow+0x362>
 800d368:	e1d6      	b.n	800d718 <__ieee754_pow+0x710>
 800d36a:	9802      	ldr	r0, [sp, #8]
 800d36c:	9903      	ldr	r1, [sp, #12]
 800d36e:	4a0f      	ldr	r2, [pc, #60]	; (800d3ac <__ieee754_pow+0x3a4>)
 800d370:	4b0f      	ldr	r3, [pc, #60]	; (800d3b0 <__ieee754_pow+0x3a8>)
 800d372:	f7f4 fde1 	bl	8001f38 <__aeabi_dmul>
 800d376:	4a0d      	ldr	r2, [pc, #52]	; (800d3ac <__ieee754_pow+0x3a4>)
 800d378:	4b0d      	ldr	r3, [pc, #52]	; (800d3b0 <__ieee754_pow+0x3a8>)
 800d37a:	e6d9      	b.n	800d130 <__ieee754_pow+0x128>
 800d37c:	3ff00000 	.word	0x3ff00000
 800d380:	3ff71547 	.word	0x3ff71547
 800d384:	f85ddf44 	.word	0xf85ddf44
 800d388:	3e54ae0b 	.word	0x3e54ae0b
 800d38c:	3fd00000 	.word	0x3fd00000
 800d390:	55555555 	.word	0x55555555
 800d394:	3fd55555 	.word	0x3fd55555
 800d398:	3fe00000 	.word	0x3fe00000
 800d39c:	652b82fe 	.word	0x652b82fe
 800d3a0:	bff00000 	.word	0xbff00000
 800d3a4:	408fffff 	.word	0x408fffff
 800d3a8:	bf700000 	.word	0xbf700000
 800d3ac:	8800759c 	.word	0x8800759c
 800d3b0:	7e37e43c 	.word	0x7e37e43c
 800d3b4:	4bbd      	ldr	r3, [pc, #756]	; (800d6ac <__ieee754_pow+0x6a4>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	dc06      	bgt.n	800d3ca <__ieee754_pow+0x3c2>
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4bbc      	ldr	r3, [pc, #752]	; (800d6b0 <__ieee754_pow+0x6a8>)
 800d3c0:	f7f4 fdba 	bl	8001f38 <__aeabi_dmul>
 800d3c4:	2235      	movs	r2, #53	; 0x35
 800d3c6:	000c      	movs	r4, r1
 800d3c8:	4252      	negs	r2, r2
 800d3ca:	4dba      	ldr	r5, [pc, #744]	; (800d6b4 <__ieee754_pow+0x6ac>)
 800d3cc:	1523      	asrs	r3, r4, #20
 800d3ce:	195b      	adds	r3, r3, r5
 800d3d0:	189b      	adds	r3, r3, r2
 800d3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3d4:	0324      	lsls	r4, r4, #12
 800d3d6:	4db8      	ldr	r5, [pc, #736]	; (800d6b8 <__ieee754_pow+0x6b0>)
 800d3d8:	4bb8      	ldr	r3, [pc, #736]	; (800d6bc <__ieee754_pow+0x6b4>)
 800d3da:	0b24      	lsrs	r4, r4, #12
 800d3dc:	4325      	orrs	r5, r4
 800d3de:	2600      	movs	r6, #0
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	dd09      	ble.n	800d3f8 <__ieee754_pow+0x3f0>
 800d3e4:	4bb6      	ldr	r3, [pc, #728]	; (800d6c0 <__ieee754_pow+0x6b8>)
 800d3e6:	3601      	adds	r6, #1
 800d3e8:	429c      	cmp	r4, r3
 800d3ea:	dd05      	ble.n	800d3f8 <__ieee754_pow+0x3f0>
 800d3ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ee:	199b      	adds	r3, r3, r6
 800d3f0:	2600      	movs	r6, #0
 800d3f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3f4:	4bb3      	ldr	r3, [pc, #716]	; (800d6c4 <__ieee754_pow+0x6bc>)
 800d3f6:	18ed      	adds	r5, r5, r3
 800d3f8:	0029      	movs	r1, r5
 800d3fa:	00f3      	lsls	r3, r6, #3
 800d3fc:	9311      	str	r3, [sp, #68]	; 0x44
 800d3fe:	4bb2      	ldr	r3, [pc, #712]	; (800d6c8 <__ieee754_pow+0x6c0>)
 800d400:	00f2      	lsls	r2, r6, #3
 800d402:	189b      	adds	r3, r3, r2
 800d404:	685c      	ldr	r4, [r3, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	930e      	str	r3, [sp, #56]	; 0x38
 800d40a:	940f      	str	r4, [sp, #60]	; 0x3c
 800d40c:	001a      	movs	r2, r3
 800d40e:	0023      	movs	r3, r4
 800d410:	900c      	str	r0, [sp, #48]	; 0x30
 800d412:	910d      	str	r1, [sp, #52]	; 0x34
 800d414:	f7f5 f810 	bl	8002438 <__aeabi_dsub>
 800d418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d41c:	9012      	str	r0, [sp, #72]	; 0x48
 800d41e:	9113      	str	r1, [sp, #76]	; 0x4c
 800d420:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d422:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d424:	f7f3 fe44 	bl	80010b0 <__aeabi_dadd>
 800d428:	0002      	movs	r2, r0
 800d42a:	000b      	movs	r3, r1
 800d42c:	2000      	movs	r0, #0
 800d42e:	49a2      	ldr	r1, [pc, #648]	; (800d6b8 <__ieee754_pow+0x6b0>)
 800d430:	f7f4 f94e 	bl	80016d0 <__aeabi_ddiv>
 800d434:	0002      	movs	r2, r0
 800d436:	000b      	movs	r3, r1
 800d438:	9014      	str	r0, [sp, #80]	; 0x50
 800d43a:	9115      	str	r1, [sp, #84]	; 0x54
 800d43c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d43e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d440:	f7f4 fd7a 	bl	8001f38 <__aeabi_dmul>
 800d444:	9008      	str	r0, [sp, #32]
 800d446:	9109      	str	r1, [sp, #36]	; 0x24
 800d448:	9b08      	ldr	r3, [sp, #32]
 800d44a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d44c:	2180      	movs	r1, #128	; 0x80
 800d44e:	106d      	asrs	r5, r5, #1
 800d450:	0589      	lsls	r1, r1, #22
 800d452:	9306      	str	r3, [sp, #24]
 800d454:	9407      	str	r4, [sp, #28]
 800d456:	430d      	orrs	r5, r1
 800d458:	2300      	movs	r3, #0
 800d45a:	2180      	movs	r1, #128	; 0x80
 800d45c:	2200      	movs	r2, #0
 800d45e:	9306      	str	r3, [sp, #24]
 800d460:	0309      	lsls	r1, r1, #12
 800d462:	9b06      	ldr	r3, [sp, #24]
 800d464:	9c07      	ldr	r4, [sp, #28]
 800d466:	186d      	adds	r5, r5, r1
 800d468:	9302      	str	r3, [sp, #8]
 800d46a:	9403      	str	r4, [sp, #12]
 800d46c:	9802      	ldr	r0, [sp, #8]
 800d46e:	9903      	ldr	r1, [sp, #12]
 800d470:	04b6      	lsls	r6, r6, #18
 800d472:	19ab      	adds	r3, r5, r6
 800d474:	0014      	movs	r4, r2
 800d476:	001d      	movs	r5, r3
 800d478:	f7f4 fd5e 	bl	8001f38 <__aeabi_dmul>
 800d47c:	0002      	movs	r2, r0
 800d47e:	000b      	movs	r3, r1
 800d480:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d482:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d484:	f7f4 ffd8 	bl	8002438 <__aeabi_dsub>
 800d488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d48c:	0006      	movs	r6, r0
 800d48e:	000f      	movs	r7, r1
 800d490:	0020      	movs	r0, r4
 800d492:	0029      	movs	r1, r5
 800d494:	f7f4 ffd0 	bl	8002438 <__aeabi_dsub>
 800d498:	0002      	movs	r2, r0
 800d49a:	000b      	movs	r3, r1
 800d49c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d49e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d4a0:	f7f4 ffca 	bl	8002438 <__aeabi_dsub>
 800d4a4:	9a02      	ldr	r2, [sp, #8]
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	f7f4 fd46 	bl	8001f38 <__aeabi_dmul>
 800d4ac:	0002      	movs	r2, r0
 800d4ae:	000b      	movs	r3, r1
 800d4b0:	0030      	movs	r0, r6
 800d4b2:	0039      	movs	r1, r7
 800d4b4:	f7f4 ffc0 	bl	8002438 <__aeabi_dsub>
 800d4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4bc:	f7f4 fd3c 	bl	8001f38 <__aeabi_dmul>
 800d4c0:	9a08      	ldr	r2, [sp, #32]
 800d4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c4:	900c      	str	r0, [sp, #48]	; 0x30
 800d4c6:	910d      	str	r1, [sp, #52]	; 0x34
 800d4c8:	0010      	movs	r0, r2
 800d4ca:	0019      	movs	r1, r3
 800d4cc:	f7f4 fd34 	bl	8001f38 <__aeabi_dmul>
 800d4d0:	0006      	movs	r6, r0
 800d4d2:	000f      	movs	r7, r1
 800d4d4:	4a7d      	ldr	r2, [pc, #500]	; (800d6cc <__ieee754_pow+0x6c4>)
 800d4d6:	4b7e      	ldr	r3, [pc, #504]	; (800d6d0 <__ieee754_pow+0x6c8>)
 800d4d8:	f7f4 fd2e 	bl	8001f38 <__aeabi_dmul>
 800d4dc:	4a7d      	ldr	r2, [pc, #500]	; (800d6d4 <__ieee754_pow+0x6cc>)
 800d4de:	4b7e      	ldr	r3, [pc, #504]	; (800d6d8 <__ieee754_pow+0x6d0>)
 800d4e0:	f7f3 fde6 	bl	80010b0 <__aeabi_dadd>
 800d4e4:	0032      	movs	r2, r6
 800d4e6:	003b      	movs	r3, r7
 800d4e8:	f7f4 fd26 	bl	8001f38 <__aeabi_dmul>
 800d4ec:	4a7b      	ldr	r2, [pc, #492]	; (800d6dc <__ieee754_pow+0x6d4>)
 800d4ee:	4b7c      	ldr	r3, [pc, #496]	; (800d6e0 <__ieee754_pow+0x6d8>)
 800d4f0:	f7f3 fdde 	bl	80010b0 <__aeabi_dadd>
 800d4f4:	0032      	movs	r2, r6
 800d4f6:	003b      	movs	r3, r7
 800d4f8:	f7f4 fd1e 	bl	8001f38 <__aeabi_dmul>
 800d4fc:	4a79      	ldr	r2, [pc, #484]	; (800d6e4 <__ieee754_pow+0x6dc>)
 800d4fe:	4b7a      	ldr	r3, [pc, #488]	; (800d6e8 <__ieee754_pow+0x6e0>)
 800d500:	f7f3 fdd6 	bl	80010b0 <__aeabi_dadd>
 800d504:	0032      	movs	r2, r6
 800d506:	003b      	movs	r3, r7
 800d508:	f7f4 fd16 	bl	8001f38 <__aeabi_dmul>
 800d50c:	4a77      	ldr	r2, [pc, #476]	; (800d6ec <__ieee754_pow+0x6e4>)
 800d50e:	4b78      	ldr	r3, [pc, #480]	; (800d6f0 <__ieee754_pow+0x6e8>)
 800d510:	f7f3 fdce 	bl	80010b0 <__aeabi_dadd>
 800d514:	0032      	movs	r2, r6
 800d516:	003b      	movs	r3, r7
 800d518:	f7f4 fd0e 	bl	8001f38 <__aeabi_dmul>
 800d51c:	4a75      	ldr	r2, [pc, #468]	; (800d6f4 <__ieee754_pow+0x6ec>)
 800d51e:	4b76      	ldr	r3, [pc, #472]	; (800d6f8 <__ieee754_pow+0x6f0>)
 800d520:	f7f3 fdc6 	bl	80010b0 <__aeabi_dadd>
 800d524:	0032      	movs	r2, r6
 800d526:	0004      	movs	r4, r0
 800d528:	000d      	movs	r5, r1
 800d52a:	003b      	movs	r3, r7
 800d52c:	0030      	movs	r0, r6
 800d52e:	0039      	movs	r1, r7
 800d530:	f7f4 fd02 	bl	8001f38 <__aeabi_dmul>
 800d534:	0002      	movs	r2, r0
 800d536:	000b      	movs	r3, r1
 800d538:	0020      	movs	r0, r4
 800d53a:	0029      	movs	r1, r5
 800d53c:	f7f4 fcfc 	bl	8001f38 <__aeabi_dmul>
 800d540:	9a02      	ldr	r2, [sp, #8]
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	0004      	movs	r4, r0
 800d546:	000d      	movs	r5, r1
 800d548:	9808      	ldr	r0, [sp, #32]
 800d54a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d54c:	f7f3 fdb0 	bl	80010b0 <__aeabi_dadd>
 800d550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d554:	f7f4 fcf0 	bl	8001f38 <__aeabi_dmul>
 800d558:	0022      	movs	r2, r4
 800d55a:	002b      	movs	r3, r5
 800d55c:	f7f3 fda8 	bl	80010b0 <__aeabi_dadd>
 800d560:	9a02      	ldr	r2, [sp, #8]
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	900e      	str	r0, [sp, #56]	; 0x38
 800d566:	910f      	str	r1, [sp, #60]	; 0x3c
 800d568:	0010      	movs	r0, r2
 800d56a:	0019      	movs	r1, r3
 800d56c:	f7f4 fce4 	bl	8001f38 <__aeabi_dmul>
 800d570:	2200      	movs	r2, #0
 800d572:	4b62      	ldr	r3, [pc, #392]	; (800d6fc <__ieee754_pow+0x6f4>)
 800d574:	0004      	movs	r4, r0
 800d576:	000d      	movs	r5, r1
 800d578:	f7f3 fd9a 	bl	80010b0 <__aeabi_dadd>
 800d57c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d580:	f7f3 fd96 	bl	80010b0 <__aeabi_dadd>
 800d584:	9e06      	ldr	r6, [sp, #24]
 800d586:	000f      	movs	r7, r1
 800d588:	0032      	movs	r2, r6
 800d58a:	000b      	movs	r3, r1
 800d58c:	9802      	ldr	r0, [sp, #8]
 800d58e:	9903      	ldr	r1, [sp, #12]
 800d590:	f7f4 fcd2 	bl	8001f38 <__aeabi_dmul>
 800d594:	2200      	movs	r2, #0
 800d596:	9002      	str	r0, [sp, #8]
 800d598:	9103      	str	r1, [sp, #12]
 800d59a:	4b58      	ldr	r3, [pc, #352]	; (800d6fc <__ieee754_pow+0x6f4>)
 800d59c:	0030      	movs	r0, r6
 800d59e:	0039      	movs	r1, r7
 800d5a0:	f7f4 ff4a 	bl	8002438 <__aeabi_dsub>
 800d5a4:	0022      	movs	r2, r4
 800d5a6:	002b      	movs	r3, r5
 800d5a8:	f7f4 ff46 	bl	8002438 <__aeabi_dsub>
 800d5ac:	0002      	movs	r2, r0
 800d5ae:	000b      	movs	r3, r1
 800d5b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d5b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d5b4:	f7f4 ff40 	bl	8002438 <__aeabi_dsub>
 800d5b8:	9a08      	ldr	r2, [sp, #32]
 800d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5bc:	f7f4 fcbc 	bl	8001f38 <__aeabi_dmul>
 800d5c0:	0032      	movs	r2, r6
 800d5c2:	0004      	movs	r4, r0
 800d5c4:	000d      	movs	r5, r1
 800d5c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d5ca:	003b      	movs	r3, r7
 800d5cc:	f7f4 fcb4 	bl	8001f38 <__aeabi_dmul>
 800d5d0:	0002      	movs	r2, r0
 800d5d2:	000b      	movs	r3, r1
 800d5d4:	0020      	movs	r0, r4
 800d5d6:	0029      	movs	r1, r5
 800d5d8:	f7f3 fd6a 	bl	80010b0 <__aeabi_dadd>
 800d5dc:	0004      	movs	r4, r0
 800d5de:	000d      	movs	r5, r1
 800d5e0:	0002      	movs	r2, r0
 800d5e2:	000b      	movs	r3, r1
 800d5e4:	9802      	ldr	r0, [sp, #8]
 800d5e6:	9903      	ldr	r1, [sp, #12]
 800d5e8:	f7f3 fd62 	bl	80010b0 <__aeabi_dadd>
 800d5ec:	22e0      	movs	r2, #224	; 0xe0
 800d5ee:	9e06      	ldr	r6, [sp, #24]
 800d5f0:	0612      	lsls	r2, r2, #24
 800d5f2:	4b43      	ldr	r3, [pc, #268]	; (800d700 <__ieee754_pow+0x6f8>)
 800d5f4:	0030      	movs	r0, r6
 800d5f6:	000f      	movs	r7, r1
 800d5f8:	f7f4 fc9e 	bl	8001f38 <__aeabi_dmul>
 800d5fc:	9a02      	ldr	r2, [sp, #8]
 800d5fe:	9b03      	ldr	r3, [sp, #12]
 800d600:	9008      	str	r0, [sp, #32]
 800d602:	9109      	str	r1, [sp, #36]	; 0x24
 800d604:	0030      	movs	r0, r6
 800d606:	0039      	movs	r1, r7
 800d608:	f7f4 ff16 	bl	8002438 <__aeabi_dsub>
 800d60c:	0002      	movs	r2, r0
 800d60e:	000b      	movs	r3, r1
 800d610:	0020      	movs	r0, r4
 800d612:	0029      	movs	r1, r5
 800d614:	f7f4 ff10 	bl	8002438 <__aeabi_dsub>
 800d618:	4a3a      	ldr	r2, [pc, #232]	; (800d704 <__ieee754_pow+0x6fc>)
 800d61a:	4b39      	ldr	r3, [pc, #228]	; (800d700 <__ieee754_pow+0x6f8>)
 800d61c:	f7f4 fc8c 	bl	8001f38 <__aeabi_dmul>
 800d620:	4a39      	ldr	r2, [pc, #228]	; (800d708 <__ieee754_pow+0x700>)
 800d622:	0004      	movs	r4, r0
 800d624:	000d      	movs	r5, r1
 800d626:	4b39      	ldr	r3, [pc, #228]	; (800d70c <__ieee754_pow+0x704>)
 800d628:	0030      	movs	r0, r6
 800d62a:	0039      	movs	r1, r7
 800d62c:	f7f4 fc84 	bl	8001f38 <__aeabi_dmul>
 800d630:	0002      	movs	r2, r0
 800d632:	000b      	movs	r3, r1
 800d634:	0020      	movs	r0, r4
 800d636:	0029      	movs	r1, r5
 800d638:	f7f3 fd3a 	bl	80010b0 <__aeabi_dadd>
 800d63c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d63e:	4b34      	ldr	r3, [pc, #208]	; (800d710 <__ieee754_pow+0x708>)
 800d640:	189b      	adds	r3, r3, r2
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	f7f3 fd33 	bl	80010b0 <__aeabi_dadd>
 800d64a:	9002      	str	r0, [sp, #8]
 800d64c:	9103      	str	r1, [sp, #12]
 800d64e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d650:	f7f5 fa5c 	bl	8002b0c <__aeabi_i2d>
 800d654:	0004      	movs	r4, r0
 800d656:	000d      	movs	r5, r1
 800d658:	9808      	ldr	r0, [sp, #32]
 800d65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d65c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d65e:	4b2d      	ldr	r3, [pc, #180]	; (800d714 <__ieee754_pow+0x70c>)
 800d660:	189b      	adds	r3, r3, r2
 800d662:	681e      	ldr	r6, [r3, #0]
 800d664:	685f      	ldr	r7, [r3, #4]
 800d666:	9a02      	ldr	r2, [sp, #8]
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	f7f3 fd21 	bl	80010b0 <__aeabi_dadd>
 800d66e:	0032      	movs	r2, r6
 800d670:	003b      	movs	r3, r7
 800d672:	f7f3 fd1d 	bl	80010b0 <__aeabi_dadd>
 800d676:	0022      	movs	r2, r4
 800d678:	002b      	movs	r3, r5
 800d67a:	f7f3 fd19 	bl	80010b0 <__aeabi_dadd>
 800d67e:	9806      	ldr	r0, [sp, #24]
 800d680:	0022      	movs	r2, r4
 800d682:	002b      	movs	r3, r5
 800d684:	9006      	str	r0, [sp, #24]
 800d686:	9107      	str	r1, [sp, #28]
 800d688:	f7f4 fed6 	bl	8002438 <__aeabi_dsub>
 800d68c:	0032      	movs	r2, r6
 800d68e:	003b      	movs	r3, r7
 800d690:	f7f4 fed2 	bl	8002438 <__aeabi_dsub>
 800d694:	9a08      	ldr	r2, [sp, #32]
 800d696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d698:	f7f4 fece 	bl	8002438 <__aeabi_dsub>
 800d69c:	0002      	movs	r2, r0
 800d69e:	000b      	movs	r3, r1
 800d6a0:	9802      	ldr	r0, [sp, #8]
 800d6a2:	9903      	ldr	r1, [sp, #12]
 800d6a4:	e61a      	b.n	800d2dc <__ieee754_pow+0x2d4>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	4c03      	ldr	r4, [pc, #12]	; (800d6b8 <__ieee754_pow+0x6b0>)
 800d6aa:	e623      	b.n	800d2f4 <__ieee754_pow+0x2ec>
 800d6ac:	000fffff 	.word	0x000fffff
 800d6b0:	43400000 	.word	0x43400000
 800d6b4:	fffffc01 	.word	0xfffffc01
 800d6b8:	3ff00000 	.word	0x3ff00000
 800d6bc:	0003988e 	.word	0x0003988e
 800d6c0:	000bb679 	.word	0x000bb679
 800d6c4:	fff00000 	.word	0xfff00000
 800d6c8:	08010f78 	.word	0x08010f78
 800d6cc:	4a454eef 	.word	0x4a454eef
 800d6d0:	3fca7e28 	.word	0x3fca7e28
 800d6d4:	93c9db65 	.word	0x93c9db65
 800d6d8:	3fcd864a 	.word	0x3fcd864a
 800d6dc:	a91d4101 	.word	0xa91d4101
 800d6e0:	3fd17460 	.word	0x3fd17460
 800d6e4:	518f264d 	.word	0x518f264d
 800d6e8:	3fd55555 	.word	0x3fd55555
 800d6ec:	db6fabff 	.word	0xdb6fabff
 800d6f0:	3fdb6db6 	.word	0x3fdb6db6
 800d6f4:	33333303 	.word	0x33333303
 800d6f8:	3fe33333 	.word	0x3fe33333
 800d6fc:	40080000 	.word	0x40080000
 800d700:	3feec709 	.word	0x3feec709
 800d704:	dc3a03fd 	.word	0xdc3a03fd
 800d708:	145b01f5 	.word	0x145b01f5
 800d70c:	be3e2fe0 	.word	0xbe3e2fe0
 800d710:	08010f98 	.word	0x08010f98
 800d714:	08010f88 	.word	0x08010f88
 800d718:	4a90      	ldr	r2, [pc, #576]	; (800d95c <__ieee754_pow+0x954>)
 800d71a:	4b91      	ldr	r3, [pc, #580]	; (800d960 <__ieee754_pow+0x958>)
 800d71c:	9804      	ldr	r0, [sp, #16]
 800d71e:	9905      	ldr	r1, [sp, #20]
 800d720:	f7f3 fcc6 	bl	80010b0 <__aeabi_dadd>
 800d724:	0032      	movs	r2, r6
 800d726:	9000      	str	r0, [sp, #0]
 800d728:	9101      	str	r1, [sp, #4]
 800d72a:	003b      	movs	r3, r7
 800d72c:	0028      	movs	r0, r5
 800d72e:	0021      	movs	r1, r4
 800d730:	f7f4 fe82 	bl	8002438 <__aeabi_dsub>
 800d734:	0002      	movs	r2, r0
 800d736:	000b      	movs	r3, r1
 800d738:	9800      	ldr	r0, [sp, #0]
 800d73a:	9901      	ldr	r1, [sp, #4]
 800d73c:	f7f2 fea8 	bl	8000490 <__aeabi_dcmpgt>
 800d740:	2800      	cmp	r0, #0
 800d742:	d000      	beq.n	800d746 <__ieee754_pow+0x73e>
 800d744:	e611      	b.n	800d36a <__ieee754_pow+0x362>
 800d746:	2100      	movs	r1, #0
 800d748:	4a86      	ldr	r2, [pc, #536]	; (800d964 <__ieee754_pow+0x95c>)
 800d74a:	0063      	lsls	r3, r4, #1
 800d74c:	085b      	lsrs	r3, r3, #1
 800d74e:	9100      	str	r1, [sp, #0]
 800d750:	4293      	cmp	r3, r2
 800d752:	dd25      	ble.n	800d7a0 <__ieee754_pow+0x798>
 800d754:	4a84      	ldr	r2, [pc, #528]	; (800d968 <__ieee754_pow+0x960>)
 800d756:	151b      	asrs	r3, r3, #20
 800d758:	189b      	adds	r3, r3, r2
 800d75a:	2280      	movs	r2, #128	; 0x80
 800d75c:	0352      	lsls	r2, r2, #13
 800d75e:	4694      	mov	ip, r2
 800d760:	411a      	asrs	r2, r3
 800d762:	1914      	adds	r4, r2, r4
 800d764:	0060      	lsls	r0, r4, #1
 800d766:	4b81      	ldr	r3, [pc, #516]	; (800d96c <__ieee754_pow+0x964>)
 800d768:	0d40      	lsrs	r0, r0, #21
 800d76a:	4d81      	ldr	r5, [pc, #516]	; (800d970 <__ieee754_pow+0x968>)
 800d76c:	18c0      	adds	r0, r0, r3
 800d76e:	4105      	asrs	r5, r0
 800d770:	0021      	movs	r1, r4
 800d772:	43a9      	bics	r1, r5
 800d774:	000b      	movs	r3, r1
 800d776:	4661      	mov	r1, ip
 800d778:	0324      	lsls	r4, r4, #12
 800d77a:	0b24      	lsrs	r4, r4, #12
 800d77c:	4321      	orrs	r1, r4
 800d77e:	2414      	movs	r4, #20
 800d780:	1a20      	subs	r0, r4, r0
 800d782:	4101      	asrs	r1, r0
 800d784:	9100      	str	r1, [sp, #0]
 800d786:	9908      	ldr	r1, [sp, #32]
 800d788:	2200      	movs	r2, #0
 800d78a:	2900      	cmp	r1, #0
 800d78c:	da02      	bge.n	800d794 <__ieee754_pow+0x78c>
 800d78e:	9900      	ldr	r1, [sp, #0]
 800d790:	4249      	negs	r1, r1
 800d792:	9100      	str	r1, [sp, #0]
 800d794:	0030      	movs	r0, r6
 800d796:	0039      	movs	r1, r7
 800d798:	f7f4 fe4e 	bl	8002438 <__aeabi_dsub>
 800d79c:	9006      	str	r0, [sp, #24]
 800d79e:	9107      	str	r1, [sp, #28]
 800d7a0:	9a04      	ldr	r2, [sp, #16]
 800d7a2:	9b05      	ldr	r3, [sp, #20]
 800d7a4:	9806      	ldr	r0, [sp, #24]
 800d7a6:	9907      	ldr	r1, [sp, #28]
 800d7a8:	2600      	movs	r6, #0
 800d7aa:	f7f3 fc81 	bl	80010b0 <__aeabi_dadd>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	4b70      	ldr	r3, [pc, #448]	; (800d974 <__ieee754_pow+0x96c>)
 800d7b2:	0030      	movs	r0, r6
 800d7b4:	000f      	movs	r7, r1
 800d7b6:	f7f4 fbbf 	bl	8001f38 <__aeabi_dmul>
 800d7ba:	9a06      	ldr	r2, [sp, #24]
 800d7bc:	9b07      	ldr	r3, [sp, #28]
 800d7be:	9008      	str	r0, [sp, #32]
 800d7c0:	9109      	str	r1, [sp, #36]	; 0x24
 800d7c2:	0030      	movs	r0, r6
 800d7c4:	0039      	movs	r1, r7
 800d7c6:	f7f4 fe37 	bl	8002438 <__aeabi_dsub>
 800d7ca:	0002      	movs	r2, r0
 800d7cc:	000b      	movs	r3, r1
 800d7ce:	9804      	ldr	r0, [sp, #16]
 800d7d0:	9905      	ldr	r1, [sp, #20]
 800d7d2:	f7f4 fe31 	bl	8002438 <__aeabi_dsub>
 800d7d6:	4a68      	ldr	r2, [pc, #416]	; (800d978 <__ieee754_pow+0x970>)
 800d7d8:	4b68      	ldr	r3, [pc, #416]	; (800d97c <__ieee754_pow+0x974>)
 800d7da:	f7f4 fbad 	bl	8001f38 <__aeabi_dmul>
 800d7de:	4a68      	ldr	r2, [pc, #416]	; (800d980 <__ieee754_pow+0x978>)
 800d7e0:	0004      	movs	r4, r0
 800d7e2:	000d      	movs	r5, r1
 800d7e4:	4b67      	ldr	r3, [pc, #412]	; (800d984 <__ieee754_pow+0x97c>)
 800d7e6:	0030      	movs	r0, r6
 800d7e8:	0039      	movs	r1, r7
 800d7ea:	f7f4 fba5 	bl	8001f38 <__aeabi_dmul>
 800d7ee:	0002      	movs	r2, r0
 800d7f0:	000b      	movs	r3, r1
 800d7f2:	0020      	movs	r0, r4
 800d7f4:	0029      	movs	r1, r5
 800d7f6:	f7f3 fc5b 	bl	80010b0 <__aeabi_dadd>
 800d7fa:	0004      	movs	r4, r0
 800d7fc:	000d      	movs	r5, r1
 800d7fe:	0002      	movs	r2, r0
 800d800:	000b      	movs	r3, r1
 800d802:	9808      	ldr	r0, [sp, #32]
 800d804:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d806:	f7f3 fc53 	bl	80010b0 <__aeabi_dadd>
 800d80a:	9a08      	ldr	r2, [sp, #32]
 800d80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80e:	0006      	movs	r6, r0
 800d810:	000f      	movs	r7, r1
 800d812:	f7f4 fe11 	bl	8002438 <__aeabi_dsub>
 800d816:	0002      	movs	r2, r0
 800d818:	000b      	movs	r3, r1
 800d81a:	0020      	movs	r0, r4
 800d81c:	0029      	movs	r1, r5
 800d81e:	f7f4 fe0b 	bl	8002438 <__aeabi_dsub>
 800d822:	0032      	movs	r2, r6
 800d824:	9004      	str	r0, [sp, #16]
 800d826:	9105      	str	r1, [sp, #20]
 800d828:	003b      	movs	r3, r7
 800d82a:	0030      	movs	r0, r6
 800d82c:	0039      	movs	r1, r7
 800d82e:	f7f4 fb83 	bl	8001f38 <__aeabi_dmul>
 800d832:	0004      	movs	r4, r0
 800d834:	000d      	movs	r5, r1
 800d836:	4a54      	ldr	r2, [pc, #336]	; (800d988 <__ieee754_pow+0x980>)
 800d838:	4b54      	ldr	r3, [pc, #336]	; (800d98c <__ieee754_pow+0x984>)
 800d83a:	f7f4 fb7d 	bl	8001f38 <__aeabi_dmul>
 800d83e:	4a54      	ldr	r2, [pc, #336]	; (800d990 <__ieee754_pow+0x988>)
 800d840:	4b54      	ldr	r3, [pc, #336]	; (800d994 <__ieee754_pow+0x98c>)
 800d842:	f7f4 fdf9 	bl	8002438 <__aeabi_dsub>
 800d846:	0022      	movs	r2, r4
 800d848:	002b      	movs	r3, r5
 800d84a:	f7f4 fb75 	bl	8001f38 <__aeabi_dmul>
 800d84e:	4a52      	ldr	r2, [pc, #328]	; (800d998 <__ieee754_pow+0x990>)
 800d850:	4b52      	ldr	r3, [pc, #328]	; (800d99c <__ieee754_pow+0x994>)
 800d852:	f7f3 fc2d 	bl	80010b0 <__aeabi_dadd>
 800d856:	0022      	movs	r2, r4
 800d858:	002b      	movs	r3, r5
 800d85a:	f7f4 fb6d 	bl	8001f38 <__aeabi_dmul>
 800d85e:	4a50      	ldr	r2, [pc, #320]	; (800d9a0 <__ieee754_pow+0x998>)
 800d860:	4b50      	ldr	r3, [pc, #320]	; (800d9a4 <__ieee754_pow+0x99c>)
 800d862:	f7f4 fde9 	bl	8002438 <__aeabi_dsub>
 800d866:	0022      	movs	r2, r4
 800d868:	002b      	movs	r3, r5
 800d86a:	f7f4 fb65 	bl	8001f38 <__aeabi_dmul>
 800d86e:	4a4e      	ldr	r2, [pc, #312]	; (800d9a8 <__ieee754_pow+0x9a0>)
 800d870:	4b4e      	ldr	r3, [pc, #312]	; (800d9ac <__ieee754_pow+0x9a4>)
 800d872:	f7f3 fc1d 	bl	80010b0 <__aeabi_dadd>
 800d876:	0022      	movs	r2, r4
 800d878:	002b      	movs	r3, r5
 800d87a:	f7f4 fb5d 	bl	8001f38 <__aeabi_dmul>
 800d87e:	0002      	movs	r2, r0
 800d880:	000b      	movs	r3, r1
 800d882:	0030      	movs	r0, r6
 800d884:	0039      	movs	r1, r7
 800d886:	f7f4 fdd7 	bl	8002438 <__aeabi_dsub>
 800d88a:	0004      	movs	r4, r0
 800d88c:	000d      	movs	r5, r1
 800d88e:	0002      	movs	r2, r0
 800d890:	000b      	movs	r3, r1
 800d892:	0030      	movs	r0, r6
 800d894:	0039      	movs	r1, r7
 800d896:	f7f4 fb4f 	bl	8001f38 <__aeabi_dmul>
 800d89a:	2380      	movs	r3, #128	; 0x80
 800d89c:	9006      	str	r0, [sp, #24]
 800d89e:	9107      	str	r1, [sp, #28]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	05db      	lsls	r3, r3, #23
 800d8a4:	0020      	movs	r0, r4
 800d8a6:	0029      	movs	r1, r5
 800d8a8:	f7f4 fdc6 	bl	8002438 <__aeabi_dsub>
 800d8ac:	0002      	movs	r2, r0
 800d8ae:	000b      	movs	r3, r1
 800d8b0:	9806      	ldr	r0, [sp, #24]
 800d8b2:	9907      	ldr	r1, [sp, #28]
 800d8b4:	f7f3 ff0c 	bl	80016d0 <__aeabi_ddiv>
 800d8b8:	9a04      	ldr	r2, [sp, #16]
 800d8ba:	9b05      	ldr	r3, [sp, #20]
 800d8bc:	0004      	movs	r4, r0
 800d8be:	000d      	movs	r5, r1
 800d8c0:	0030      	movs	r0, r6
 800d8c2:	0039      	movs	r1, r7
 800d8c4:	f7f4 fb38 	bl	8001f38 <__aeabi_dmul>
 800d8c8:	9a04      	ldr	r2, [sp, #16]
 800d8ca:	9b05      	ldr	r3, [sp, #20]
 800d8cc:	f7f3 fbf0 	bl	80010b0 <__aeabi_dadd>
 800d8d0:	0002      	movs	r2, r0
 800d8d2:	000b      	movs	r3, r1
 800d8d4:	0020      	movs	r0, r4
 800d8d6:	0029      	movs	r1, r5
 800d8d8:	f7f4 fdae 	bl	8002438 <__aeabi_dsub>
 800d8dc:	0032      	movs	r2, r6
 800d8de:	003b      	movs	r3, r7
 800d8e0:	f7f4 fdaa 	bl	8002438 <__aeabi_dsub>
 800d8e4:	0002      	movs	r2, r0
 800d8e6:	000b      	movs	r3, r1
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	4931      	ldr	r1, [pc, #196]	; (800d9b0 <__ieee754_pow+0x9a8>)
 800d8ec:	f7f4 fda4 	bl	8002438 <__aeabi_dsub>
 800d8f0:	9b00      	ldr	r3, [sp, #0]
 800d8f2:	051b      	lsls	r3, r3, #20
 800d8f4:	185b      	adds	r3, r3, r1
 800d8f6:	151a      	asrs	r2, r3, #20
 800d8f8:	2a00      	cmp	r2, #0
 800d8fa:	dc28      	bgt.n	800d94e <__ieee754_pow+0x946>
 800d8fc:	9a00      	ldr	r2, [sp, #0]
 800d8fe:	f000 f9ad 	bl	800dc5c <scalbn>
 800d902:	9a02      	ldr	r2, [sp, #8]
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	f7ff fc13 	bl	800d130 <__ieee754_pow+0x128>
 800d90a:	4a2a      	ldr	r2, [pc, #168]	; (800d9b4 <__ieee754_pow+0x9ac>)
 800d90c:	004b      	lsls	r3, r1, #1
 800d90e:	085b      	lsrs	r3, r3, #1
 800d910:	4293      	cmp	r3, r2
 800d912:	dc00      	bgt.n	800d916 <__ieee754_pow+0x90e>
 800d914:	e717      	b.n	800d746 <__ieee754_pow+0x73e>
 800d916:	4b28      	ldr	r3, [pc, #160]	; (800d9b8 <__ieee754_pow+0x9b0>)
 800d918:	18cb      	adds	r3, r1, r3
 800d91a:	4303      	orrs	r3, r0
 800d91c:	d009      	beq.n	800d932 <__ieee754_pow+0x92a>
 800d91e:	9802      	ldr	r0, [sp, #8]
 800d920:	9903      	ldr	r1, [sp, #12]
 800d922:	4a26      	ldr	r2, [pc, #152]	; (800d9bc <__ieee754_pow+0x9b4>)
 800d924:	4b26      	ldr	r3, [pc, #152]	; (800d9c0 <__ieee754_pow+0x9b8>)
 800d926:	f7f4 fb07 	bl	8001f38 <__aeabi_dmul>
 800d92a:	4a24      	ldr	r2, [pc, #144]	; (800d9bc <__ieee754_pow+0x9b4>)
 800d92c:	4b24      	ldr	r3, [pc, #144]	; (800d9c0 <__ieee754_pow+0x9b8>)
 800d92e:	f7ff fbff 	bl	800d130 <__ieee754_pow+0x128>
 800d932:	0032      	movs	r2, r6
 800d934:	003b      	movs	r3, r7
 800d936:	f7f4 fd7f 	bl	8002438 <__aeabi_dsub>
 800d93a:	0002      	movs	r2, r0
 800d93c:	000b      	movs	r3, r1
 800d93e:	9804      	ldr	r0, [sp, #16]
 800d940:	9905      	ldr	r1, [sp, #20]
 800d942:	f7f2 fd9b 	bl	800047c <__aeabi_dcmple>
 800d946:	2800      	cmp	r0, #0
 800d948:	d100      	bne.n	800d94c <__ieee754_pow+0x944>
 800d94a:	e6fc      	b.n	800d746 <__ieee754_pow+0x73e>
 800d94c:	e7e7      	b.n	800d91e <__ieee754_pow+0x916>
 800d94e:	0019      	movs	r1, r3
 800d950:	e7d7      	b.n	800d902 <__ieee754_pow+0x8fa>
 800d952:	2000      	movs	r0, #0
 800d954:	4916      	ldr	r1, [pc, #88]	; (800d9b0 <__ieee754_pow+0x9a8>)
 800d956:	f7ff fb83 	bl	800d060 <__ieee754_pow+0x58>
 800d95a:	46c0      	nop			; (mov r8, r8)
 800d95c:	652b82fe 	.word	0x652b82fe
 800d960:	3c971547 	.word	0x3c971547
 800d964:	3fe00000 	.word	0x3fe00000
 800d968:	fffffc02 	.word	0xfffffc02
 800d96c:	fffffc01 	.word	0xfffffc01
 800d970:	000fffff 	.word	0x000fffff
 800d974:	3fe62e43 	.word	0x3fe62e43
 800d978:	fefa39ef 	.word	0xfefa39ef
 800d97c:	3fe62e42 	.word	0x3fe62e42
 800d980:	0ca86c39 	.word	0x0ca86c39
 800d984:	be205c61 	.word	0xbe205c61
 800d988:	72bea4d0 	.word	0x72bea4d0
 800d98c:	3e663769 	.word	0x3e663769
 800d990:	c5d26bf1 	.word	0xc5d26bf1
 800d994:	3ebbbd41 	.word	0x3ebbbd41
 800d998:	af25de2c 	.word	0xaf25de2c
 800d99c:	3f11566a 	.word	0x3f11566a
 800d9a0:	16bebd93 	.word	0x16bebd93
 800d9a4:	3f66c16c 	.word	0x3f66c16c
 800d9a8:	5555553e 	.word	0x5555553e
 800d9ac:	3fc55555 	.word	0x3fc55555
 800d9b0:	3ff00000 	.word	0x3ff00000
 800d9b4:	4090cbff 	.word	0x4090cbff
 800d9b8:	3f6f3400 	.word	0x3f6f3400
 800d9bc:	c2f8f359 	.word	0xc2f8f359
 800d9c0:	01a56e1f 	.word	0x01a56e1f

0800d9c4 <__ieee754_sqrt>:
 800d9c4:	4b54      	ldr	r3, [pc, #336]	; (800db18 <__ieee754_sqrt+0x154>)
 800d9c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9c8:	001e      	movs	r6, r3
 800d9ca:	0005      	movs	r5, r0
 800d9cc:	000c      	movs	r4, r1
 800d9ce:	0002      	movs	r2, r0
 800d9d0:	400e      	ands	r6, r1
 800d9d2:	429e      	cmp	r6, r3
 800d9d4:	d10f      	bne.n	800d9f6 <__ieee754_sqrt+0x32>
 800d9d6:	0002      	movs	r2, r0
 800d9d8:	000b      	movs	r3, r1
 800d9da:	f7f4 faad 	bl	8001f38 <__aeabi_dmul>
 800d9de:	0002      	movs	r2, r0
 800d9e0:	000b      	movs	r3, r1
 800d9e2:	0028      	movs	r0, r5
 800d9e4:	0021      	movs	r1, r4
 800d9e6:	f7f3 fb63 	bl	80010b0 <__aeabi_dadd>
 800d9ea:	0005      	movs	r5, r0
 800d9ec:	000c      	movs	r4, r1
 800d9ee:	0028      	movs	r0, r5
 800d9f0:	0021      	movs	r1, r4
 800d9f2:	b003      	add	sp, #12
 800d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f6:	2900      	cmp	r1, #0
 800d9f8:	dc0e      	bgt.n	800da18 <__ieee754_sqrt+0x54>
 800d9fa:	004b      	lsls	r3, r1, #1
 800d9fc:	085b      	lsrs	r3, r3, #1
 800d9fe:	4303      	orrs	r3, r0
 800da00:	d0f5      	beq.n	800d9ee <__ieee754_sqrt+0x2a>
 800da02:	2900      	cmp	r1, #0
 800da04:	d00a      	beq.n	800da1c <__ieee754_sqrt+0x58>
 800da06:	0002      	movs	r2, r0
 800da08:	000b      	movs	r3, r1
 800da0a:	f7f4 fd15 	bl	8002438 <__aeabi_dsub>
 800da0e:	0002      	movs	r2, r0
 800da10:	000b      	movs	r3, r1
 800da12:	f7f3 fe5d 	bl	80016d0 <__aeabi_ddiv>
 800da16:	e7e8      	b.n	800d9ea <__ieee754_sqrt+0x26>
 800da18:	150b      	asrs	r3, r1, #20
 800da1a:	d10f      	bne.n	800da3c <__ieee754_sqrt+0x78>
 800da1c:	2300      	movs	r3, #0
 800da1e:	2900      	cmp	r1, #0
 800da20:	d06f      	beq.n	800db02 <__ieee754_sqrt+0x13e>
 800da22:	2480      	movs	r4, #128	; 0x80
 800da24:	2000      	movs	r0, #0
 800da26:	0364      	lsls	r4, r4, #13
 800da28:	4221      	tst	r1, r4
 800da2a:	d06e      	beq.n	800db0a <__ieee754_sqrt+0x146>
 800da2c:	1e44      	subs	r4, r0, #1
 800da2e:	1b1b      	subs	r3, r3, r4
 800da30:	2420      	movs	r4, #32
 800da32:	0015      	movs	r5, r2
 800da34:	1a24      	subs	r4, r4, r0
 800da36:	40e5      	lsrs	r5, r4
 800da38:	4082      	lsls	r2, r0
 800da3a:	4329      	orrs	r1, r5
 800da3c:	4837      	ldr	r0, [pc, #220]	; (800db1c <__ieee754_sqrt+0x158>)
 800da3e:	0309      	lsls	r1, r1, #12
 800da40:	1818      	adds	r0, r3, r0
 800da42:	2380      	movs	r3, #128	; 0x80
 800da44:	0b09      	lsrs	r1, r1, #12
 800da46:	035b      	lsls	r3, r3, #13
 800da48:	4319      	orrs	r1, r3
 800da4a:	07c3      	lsls	r3, r0, #31
 800da4c:	d503      	bpl.n	800da56 <__ieee754_sqrt+0x92>
 800da4e:	0fd3      	lsrs	r3, r2, #31
 800da50:	0049      	lsls	r1, r1, #1
 800da52:	1859      	adds	r1, r3, r1
 800da54:	0052      	lsls	r2, r2, #1
 800da56:	2400      	movs	r4, #0
 800da58:	1043      	asrs	r3, r0, #1
 800da5a:	9301      	str	r3, [sp, #4]
 800da5c:	0fd3      	lsrs	r3, r2, #31
 800da5e:	185b      	adds	r3, r3, r1
 800da60:	2580      	movs	r5, #128	; 0x80
 800da62:	185b      	adds	r3, r3, r1
 800da64:	0020      	movs	r0, r4
 800da66:	2116      	movs	r1, #22
 800da68:	0052      	lsls	r2, r2, #1
 800da6a:	03ad      	lsls	r5, r5, #14
 800da6c:	1946      	adds	r6, r0, r5
 800da6e:	429e      	cmp	r6, r3
 800da70:	dc02      	bgt.n	800da78 <__ieee754_sqrt+0xb4>
 800da72:	1970      	adds	r0, r6, r5
 800da74:	1b9b      	subs	r3, r3, r6
 800da76:	1964      	adds	r4, r4, r5
 800da78:	0fd6      	lsrs	r6, r2, #31
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	3901      	subs	r1, #1
 800da7e:	18f3      	adds	r3, r6, r3
 800da80:	0052      	lsls	r2, r2, #1
 800da82:	086d      	lsrs	r5, r5, #1
 800da84:	2900      	cmp	r1, #0
 800da86:	d1f1      	bne.n	800da6c <__ieee754_sqrt+0xa8>
 800da88:	2520      	movs	r5, #32
 800da8a:	2680      	movs	r6, #128	; 0x80
 800da8c:	46ac      	mov	ip, r5
 800da8e:	9100      	str	r1, [sp, #0]
 800da90:	0636      	lsls	r6, r6, #24
 800da92:	9d00      	ldr	r5, [sp, #0]
 800da94:	1977      	adds	r7, r6, r5
 800da96:	4283      	cmp	r3, r0
 800da98:	dc02      	bgt.n	800daa0 <__ieee754_sqrt+0xdc>
 800da9a:	d112      	bne.n	800dac2 <__ieee754_sqrt+0xfe>
 800da9c:	4297      	cmp	r7, r2
 800da9e:	d810      	bhi.n	800dac2 <__ieee754_sqrt+0xfe>
 800daa0:	19bd      	adds	r5, r7, r6
 800daa2:	9500      	str	r5, [sp, #0]
 800daa4:	0005      	movs	r5, r0
 800daa6:	2f00      	cmp	r7, #0
 800daa8:	da03      	bge.n	800dab2 <__ieee754_sqrt+0xee>
 800daaa:	9d00      	ldr	r5, [sp, #0]
 800daac:	43ed      	mvns	r5, r5
 800daae:	0fed      	lsrs	r5, r5, #31
 800dab0:	1945      	adds	r5, r0, r5
 800dab2:	1a1b      	subs	r3, r3, r0
 800dab4:	42ba      	cmp	r2, r7
 800dab6:	4180      	sbcs	r0, r0
 800dab8:	4240      	negs	r0, r0
 800daba:	1a1b      	subs	r3, r3, r0
 800dabc:	0028      	movs	r0, r5
 800dabe:	1bd2      	subs	r2, r2, r7
 800dac0:	1989      	adds	r1, r1, r6
 800dac2:	0fd5      	lsrs	r5, r2, #31
 800dac4:	18ed      	adds	r5, r5, r3
 800dac6:	18eb      	adds	r3, r5, r3
 800dac8:	2501      	movs	r5, #1
 800daca:	426d      	negs	r5, r5
 800dacc:	44ac      	add	ip, r5
 800dace:	4665      	mov	r5, ip
 800dad0:	0052      	lsls	r2, r2, #1
 800dad2:	0876      	lsrs	r6, r6, #1
 800dad4:	2d00      	cmp	r5, #0
 800dad6:	d1dc      	bne.n	800da92 <__ieee754_sqrt+0xce>
 800dad8:	4313      	orrs	r3, r2
 800dada:	d003      	beq.n	800dae4 <__ieee754_sqrt+0x120>
 800dadc:	1c4b      	adds	r3, r1, #1
 800dade:	d117      	bne.n	800db10 <__ieee754_sqrt+0x14c>
 800dae0:	4661      	mov	r1, ip
 800dae2:	3401      	adds	r4, #1
 800dae4:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <__ieee754_sqrt+0x15c>)
 800dae6:	1060      	asrs	r0, r4, #1
 800dae8:	18c0      	adds	r0, r0, r3
 800daea:	0849      	lsrs	r1, r1, #1
 800daec:	07e3      	lsls	r3, r4, #31
 800daee:	d502      	bpl.n	800daf6 <__ieee754_sqrt+0x132>
 800daf0:	2380      	movs	r3, #128	; 0x80
 800daf2:	061b      	lsls	r3, r3, #24
 800daf4:	4319      	orrs	r1, r3
 800daf6:	9b01      	ldr	r3, [sp, #4]
 800daf8:	000d      	movs	r5, r1
 800dafa:	051c      	lsls	r4, r3, #20
 800dafc:	1823      	adds	r3, r4, r0
 800dafe:	001c      	movs	r4, r3
 800db00:	e775      	b.n	800d9ee <__ieee754_sqrt+0x2a>
 800db02:	0ad1      	lsrs	r1, r2, #11
 800db04:	3b15      	subs	r3, #21
 800db06:	0552      	lsls	r2, r2, #21
 800db08:	e789      	b.n	800da1e <__ieee754_sqrt+0x5a>
 800db0a:	0049      	lsls	r1, r1, #1
 800db0c:	3001      	adds	r0, #1
 800db0e:	e78b      	b.n	800da28 <__ieee754_sqrt+0x64>
 800db10:	2301      	movs	r3, #1
 800db12:	3101      	adds	r1, #1
 800db14:	4399      	bics	r1, r3
 800db16:	e7e5      	b.n	800dae4 <__ieee754_sqrt+0x120>
 800db18:	7ff00000 	.word	0x7ff00000
 800db1c:	fffffc01 	.word	0xfffffc01
 800db20:	3fe00000 	.word	0x3fe00000

0800db24 <fabs>:
 800db24:	0049      	lsls	r1, r1, #1
 800db26:	084b      	lsrs	r3, r1, #1
 800db28:	0019      	movs	r1, r3
 800db2a:	4770      	bx	lr

0800db2c <finite>:
 800db2c:	0048      	lsls	r0, r1, #1
 800db2e:	4b02      	ldr	r3, [pc, #8]	; (800db38 <finite+0xc>)
 800db30:	0840      	lsrs	r0, r0, #1
 800db32:	18c0      	adds	r0, r0, r3
 800db34:	0fc0      	lsrs	r0, r0, #31
 800db36:	4770      	bx	lr
 800db38:	80100000 	.word	0x80100000

0800db3c <matherr>:
 800db3c:	2000      	movs	r0, #0
 800db3e:	4770      	bx	lr

0800db40 <nan>:
 800db40:	2000      	movs	r0, #0
 800db42:	4901      	ldr	r1, [pc, #4]	; (800db48 <nan+0x8>)
 800db44:	4770      	bx	lr
 800db46:	46c0      	nop			; (mov r8, r8)
 800db48:	7ff80000 	.word	0x7ff80000

0800db4c <rint>:
 800db4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db4e:	004e      	lsls	r6, r1, #1
 800db50:	0d76      	lsrs	r6, r6, #21
 800db52:	46b4      	mov	ip, r6
 800db54:	4e3d      	ldr	r6, [pc, #244]	; (800dc4c <rint+0x100>)
 800db56:	b085      	sub	sp, #20
 800db58:	4466      	add	r6, ip
 800db5a:	0005      	movs	r5, r0
 800db5c:	000b      	movs	r3, r1
 800db5e:	9101      	str	r1, [sp, #4]
 800db60:	0002      	movs	r2, r0
 800db62:	0fcc      	lsrs	r4, r1, #31
 800db64:	2e13      	cmp	r6, #19
 800db66:	dc55      	bgt.n	800dc14 <rint+0xc8>
 800db68:	2e00      	cmp	r6, #0
 800db6a:	da28      	bge.n	800dbbe <rint+0x72>
 800db6c:	004a      	lsls	r2, r1, #1
 800db6e:	0852      	lsrs	r2, r2, #1
 800db70:	4302      	orrs	r2, r0
 800db72:	d022      	beq.n	800dbba <rint+0x6e>
 800db74:	030a      	lsls	r2, r1, #12
 800db76:	0b12      	lsrs	r2, r2, #12
 800db78:	4315      	orrs	r5, r2
 800db7a:	426a      	negs	r2, r5
 800db7c:	432a      	orrs	r2, r5
 800db7e:	2580      	movs	r5, #128	; 0x80
 800db80:	0c4b      	lsrs	r3, r1, #17
 800db82:	0b12      	lsrs	r2, r2, #12
 800db84:	032d      	lsls	r5, r5, #12
 800db86:	045b      	lsls	r3, r3, #17
 800db88:	402a      	ands	r2, r5
 800db8a:	431a      	orrs	r2, r3
 800db8c:	4b30      	ldr	r3, [pc, #192]	; (800dc50 <rint+0x104>)
 800db8e:	0011      	movs	r1, r2
 800db90:	00e2      	lsls	r2, r4, #3
 800db92:	189b      	adds	r3, r3, r2
 800db94:	681e      	ldr	r6, [r3, #0]
 800db96:	685f      	ldr	r7, [r3, #4]
 800db98:	0032      	movs	r2, r6
 800db9a:	003b      	movs	r3, r7
 800db9c:	f7f3 fa88 	bl	80010b0 <__aeabi_dadd>
 800dba0:	9002      	str	r0, [sp, #8]
 800dba2:	9103      	str	r1, [sp, #12]
 800dba4:	9802      	ldr	r0, [sp, #8]
 800dba6:	9903      	ldr	r1, [sp, #12]
 800dba8:	003b      	movs	r3, r7
 800dbaa:	0032      	movs	r2, r6
 800dbac:	f7f4 fc44 	bl	8002438 <__aeabi_dsub>
 800dbb0:	004b      	lsls	r3, r1, #1
 800dbb2:	085b      	lsrs	r3, r3, #1
 800dbb4:	07e4      	lsls	r4, r4, #31
 800dbb6:	4323      	orrs	r3, r4
 800dbb8:	0019      	movs	r1, r3
 800dbba:	b005      	add	sp, #20
 800dbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbbe:	4d25      	ldr	r5, [pc, #148]	; (800dc54 <rint+0x108>)
 800dbc0:	4135      	asrs	r5, r6
 800dbc2:	002f      	movs	r7, r5
 800dbc4:	400f      	ands	r7, r1
 800dbc6:	4307      	orrs	r7, r0
 800dbc8:	d0f7      	beq.n	800dbba <rint+0x6e>
 800dbca:	086d      	lsrs	r5, r5, #1
 800dbcc:	0028      	movs	r0, r5
 800dbce:	4008      	ands	r0, r1
 800dbd0:	4310      	orrs	r0, r2
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	4290      	cmp	r0, r2
 800dbd6:	d009      	beq.n	800dbec <rint+0xa0>
 800dbd8:	2e13      	cmp	r6, #19
 800dbda:	d101      	bne.n	800dbe0 <rint+0x94>
 800dbdc:	2280      	movs	r2, #128	; 0x80
 800dbde:	0612      	lsls	r2, r2, #24
 800dbe0:	2780      	movs	r7, #128	; 0x80
 800dbe2:	02ff      	lsls	r7, r7, #11
 800dbe4:	4137      	asrs	r7, r6
 800dbe6:	43ab      	bics	r3, r5
 800dbe8:	431f      	orrs	r7, r3
 800dbea:	9701      	str	r7, [sp, #4]
 800dbec:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <rint+0x104>)
 800dbee:	00e4      	lsls	r4, r4, #3
 800dbf0:	191c      	adds	r4, r3, r4
 800dbf2:	6865      	ldr	r5, [r4, #4]
 800dbf4:	6824      	ldr	r4, [r4, #0]
 800dbf6:	9901      	ldr	r1, [sp, #4]
 800dbf8:	002b      	movs	r3, r5
 800dbfa:	0010      	movs	r0, r2
 800dbfc:	0022      	movs	r2, r4
 800dbfe:	f7f3 fa57 	bl	80010b0 <__aeabi_dadd>
 800dc02:	9002      	str	r0, [sp, #8]
 800dc04:	9103      	str	r1, [sp, #12]
 800dc06:	9802      	ldr	r0, [sp, #8]
 800dc08:	9903      	ldr	r1, [sp, #12]
 800dc0a:	0022      	movs	r2, r4
 800dc0c:	002b      	movs	r3, r5
 800dc0e:	f7f4 fc13 	bl	8002438 <__aeabi_dsub>
 800dc12:	e7d2      	b.n	800dbba <rint+0x6e>
 800dc14:	2e33      	cmp	r6, #51	; 0x33
 800dc16:	dd08      	ble.n	800dc2a <rint+0xde>
 800dc18:	2380      	movs	r3, #128	; 0x80
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	429e      	cmp	r6, r3
 800dc1e:	d1cc      	bne.n	800dbba <rint+0x6e>
 800dc20:	0002      	movs	r2, r0
 800dc22:	000b      	movs	r3, r1
 800dc24:	f7f3 fa44 	bl	80010b0 <__aeabi_dadd>
 800dc28:	e7c7      	b.n	800dbba <rint+0x6e>
 800dc2a:	2601      	movs	r6, #1
 800dc2c:	4d0a      	ldr	r5, [pc, #40]	; (800dc58 <rint+0x10c>)
 800dc2e:	4276      	negs	r6, r6
 800dc30:	4465      	add	r5, ip
 800dc32:	40ee      	lsrs	r6, r5
 800dc34:	4206      	tst	r6, r0
 800dc36:	d0c0      	beq.n	800dbba <rint+0x6e>
 800dc38:	0876      	lsrs	r6, r6, #1
 800dc3a:	4206      	tst	r6, r0
 800dc3c:	d0d6      	beq.n	800dbec <rint+0xa0>
 800dc3e:	2380      	movs	r3, #128	; 0x80
 800dc40:	05db      	lsls	r3, r3, #23
 800dc42:	412b      	asrs	r3, r5
 800dc44:	43b2      	bics	r2, r6
 800dc46:	431a      	orrs	r2, r3
 800dc48:	e7d0      	b.n	800dbec <rint+0xa0>
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	fffffc01 	.word	0xfffffc01
 800dc50:	08010fa8 	.word	0x08010fa8
 800dc54:	000fffff 	.word	0x000fffff
 800dc58:	fffffbed 	.word	0xfffffbed

0800dc5c <scalbn>:
 800dc5c:	004b      	lsls	r3, r1, #1
 800dc5e:	b570      	push	{r4, r5, r6, lr}
 800dc60:	0d5b      	lsrs	r3, r3, #21
 800dc62:	0014      	movs	r4, r2
 800dc64:	000a      	movs	r2, r1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10e      	bne.n	800dc88 <scalbn+0x2c>
 800dc6a:	004b      	lsls	r3, r1, #1
 800dc6c:	085b      	lsrs	r3, r3, #1
 800dc6e:	4303      	orrs	r3, r0
 800dc70:	d011      	beq.n	800dc96 <scalbn+0x3a>
 800dc72:	2200      	movs	r2, #0
 800dc74:	4b20      	ldr	r3, [pc, #128]	; (800dcf8 <scalbn+0x9c>)
 800dc76:	f7f4 f95f 	bl	8001f38 <__aeabi_dmul>
 800dc7a:	4b20      	ldr	r3, [pc, #128]	; (800dcfc <scalbn+0xa0>)
 800dc7c:	000a      	movs	r2, r1
 800dc7e:	429c      	cmp	r4, r3
 800dc80:	da0a      	bge.n	800dc98 <scalbn+0x3c>
 800dc82:	4a1f      	ldr	r2, [pc, #124]	; (800dd00 <scalbn+0xa4>)
 800dc84:	4b1f      	ldr	r3, [pc, #124]	; (800dd04 <scalbn+0xa8>)
 800dc86:	e016      	b.n	800dcb6 <scalbn+0x5a>
 800dc88:	4d1f      	ldr	r5, [pc, #124]	; (800dd08 <scalbn+0xac>)
 800dc8a:	42ab      	cmp	r3, r5
 800dc8c:	d107      	bne.n	800dc9e <scalbn+0x42>
 800dc8e:	0002      	movs	r2, r0
 800dc90:	000b      	movs	r3, r1
 800dc92:	f7f3 fa0d 	bl	80010b0 <__aeabi_dadd>
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	004b      	lsls	r3, r1, #1
 800dc9a:	0d5b      	lsrs	r3, r3, #21
 800dc9c:	3b36      	subs	r3, #54	; 0x36
 800dc9e:	4d1b      	ldr	r5, [pc, #108]	; (800dd0c <scalbn+0xb0>)
 800dca0:	18e3      	adds	r3, r4, r3
 800dca2:	42ab      	cmp	r3, r5
 800dca4:	dd0a      	ble.n	800dcbc <scalbn+0x60>
 800dca6:	0002      	movs	r2, r0
 800dca8:	000b      	movs	r3, r1
 800dcaa:	4819      	ldr	r0, [pc, #100]	; (800dd10 <scalbn+0xb4>)
 800dcac:	4919      	ldr	r1, [pc, #100]	; (800dd14 <scalbn+0xb8>)
 800dcae:	f000 f839 	bl	800dd24 <copysign>
 800dcb2:	4a17      	ldr	r2, [pc, #92]	; (800dd10 <scalbn+0xb4>)
 800dcb4:	4b17      	ldr	r3, [pc, #92]	; (800dd14 <scalbn+0xb8>)
 800dcb6:	f7f4 f93f 	bl	8001f38 <__aeabi_dmul>
 800dcba:	e7ec      	b.n	800dc96 <scalbn+0x3a>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dd05      	ble.n	800dccc <scalbn+0x70>
 800dcc0:	4c15      	ldr	r4, [pc, #84]	; (800dd18 <scalbn+0xbc>)
 800dcc2:	051b      	lsls	r3, r3, #20
 800dcc4:	4022      	ands	r2, r4
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	0011      	movs	r1, r2
 800dcca:	e7e4      	b.n	800dc96 <scalbn+0x3a>
 800dccc:	001d      	movs	r5, r3
 800dcce:	3535      	adds	r5, #53	; 0x35
 800dcd0:	da09      	bge.n	800dce6 <scalbn+0x8a>
 800dcd2:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <scalbn+0xc0>)
 800dcd4:	0002      	movs	r2, r0
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	dce6      	bgt.n	800dca8 <scalbn+0x4c>
 800dcda:	000b      	movs	r3, r1
 800dcdc:	4808      	ldr	r0, [pc, #32]	; (800dd00 <scalbn+0xa4>)
 800dcde:	4909      	ldr	r1, [pc, #36]	; (800dd04 <scalbn+0xa8>)
 800dce0:	f000 f820 	bl	800dd24 <copysign>
 800dce4:	e7cd      	b.n	800dc82 <scalbn+0x26>
 800dce6:	4c0c      	ldr	r4, [pc, #48]	; (800dd18 <scalbn+0xbc>)
 800dce8:	3336      	adds	r3, #54	; 0x36
 800dcea:	4022      	ands	r2, r4
 800dcec:	051b      	lsls	r3, r3, #20
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	0019      	movs	r1, r3
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4b0a      	ldr	r3, [pc, #40]	; (800dd20 <scalbn+0xc4>)
 800dcf6:	e7de      	b.n	800dcb6 <scalbn+0x5a>
 800dcf8:	43500000 	.word	0x43500000
 800dcfc:	ffff3cb0 	.word	0xffff3cb0
 800dd00:	c2f8f359 	.word	0xc2f8f359
 800dd04:	01a56e1f 	.word	0x01a56e1f
 800dd08:	000007ff 	.word	0x000007ff
 800dd0c:	000007fe 	.word	0x000007fe
 800dd10:	8800759c 	.word	0x8800759c
 800dd14:	7e37e43c 	.word	0x7e37e43c
 800dd18:	800fffff 	.word	0x800fffff
 800dd1c:	0000c350 	.word	0x0000c350
 800dd20:	3c900000 	.word	0x3c900000

0800dd24 <copysign>:
 800dd24:	b530      	push	{r4, r5, lr}
 800dd26:	004a      	lsls	r2, r1, #1
 800dd28:	0fdb      	lsrs	r3, r3, #31
 800dd2a:	07db      	lsls	r3, r3, #31
 800dd2c:	0852      	lsrs	r2, r2, #1
 800dd2e:	431a      	orrs	r2, r3
 800dd30:	0011      	movs	r1, r2
 800dd32:	bd30      	pop	{r4, r5, pc}

0800dd34 <_init>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	46c0      	nop			; (mov r8, r8)
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr

0800dd40 <_fini>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd46:	bc08      	pop	{r3}
 800dd48:	469e      	mov	lr, r3
 800dd4a:	4770      	bx	lr
